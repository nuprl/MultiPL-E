language: go_test.go
name: HumanEval_133_sum_squares
results:
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var sum_squares int\n\n    for\
    \ i, v := range lst {\n        if i == len(lst)-1 {\n            sum_squares =\
    \ v*v\n        } else {\n            sum_squares += v*v\n        }\n    }\n  \
    \  return sum_squares\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate\
    \ := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}),\
    \ expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected:\
    \ 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n\
    \     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual:\
    \ candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual:\
    \ candidate([]float64{10000.0, 10000.0}), expected: 200000000 },\n     { actual:\
    \ candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4,\
    \ 17.9, 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n\
    \     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsbx5b5lp_test.go:27:27: cannot use v * v (value of type float64) as type
    int in assignment

    /tmp/tmpsbx5b5lp_test.go:29:13: invalid operation: sum_squares += v * v (mismatched
    types int and float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075052
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    // write your code in package\
    \ sum_squares_test\n    return 0\n}\nfunc TestSum_Squares(t *testing.T) {\n  candidate\
    \ := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}),\
    \ expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected:\
    \ 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n\
    \     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual:\
    \ candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual:\
    \ candidate([]float64{10000.0, 10000.0}), expected: 200000000 },\n     { actual:\
    \ candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4,\
    \ 17.9, 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n\
    \     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpk1bra005_test.go:50: expected '%!s(int=14)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpk1bra005_test.go:50:\
    \ expected '%!s(int=14)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__2\
    \ (0.00s)\n        tmpk1bra005_test.go:50: expected '%!s(int=84)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpk1bra005_test.go:50:\
    \ expected '%!s(int=29)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4\
    \ (0.00s)\n        tmpk1bra005_test.go:50: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__5 (0.00s)\n        tmpk1bra005_test.go:50:\
    \ expected '%!s(int=10230)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpk1bra005_test.go:50: expected '%!s(int=200000000)', got\
    \ '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpk1bra005_test.go:50:\
    \ expected '%!s(int=75)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpk1bra005_test.go:50: expected '%!s(int=1086)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpk1bra005_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__11\
    \ (0.00s)\n        tmpk1bra005_test.go:50: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075053
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    // Write your code here\n   \
    \ var i int = 0\n    for _, e := range lst {\n        lst[i] = math.Ceil(e*e)\n\
    \        i += 1 \n    }\n    x := sum(lst)\n    return int(x)\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0,\
    \ 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}),\
    \ expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected:\
    \ 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected:\
    \ 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected: 200000000\
    \ },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n \
    \    { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected: 1086 },\n\
    \     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0}),\
    \ expected: 1 },\n     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpaly71rqt_test.go:26:18: undefined: math

    /tmp/tmpaly71rqt_test.go:29:10: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075052
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    sum := 0.0\n    for _, v := range\
    \ lst {\n        sum += v*v\n    }\n    return int(math.Ceil(sum))\n}\n\nfunc\
    \ TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 3.0, 5.0, 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2,\
    \ 0.0}), expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}),\
    \ expected: 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}),\
    \ expected: 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected:\
    \ 200000000 },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected:\
    \ 75 },\n     { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected:\
    \ 1086 },\n     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{-1.0}), expected: 1 },\n     { actual: candidate([]float64{-1.0,\
    \ 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx40a18nx_test.go:27:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074915
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    return 0\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0,\
    \ 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}),\
    \ expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected:\
    \ 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected:\
    \ 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected: 200000000\
    \ },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n \
    \    { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected: 1086 },\n\
    \     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0}),\
    \ expected: 1 },\n     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmp82_m_fif_test.go:50: expected '%!s(int=14)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmp82_m_fif_test.go:50:\
    \ expected '%!s(int=14)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__2\
    \ (0.00s)\n        tmp82_m_fif_test.go:50: expected '%!s(int=84)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmp82_m_fif_test.go:50:\
    \ expected '%!s(int=29)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4\
    \ (0.00s)\n        tmp82_m_fif_test.go:50: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__5 (0.00s)\n        tmp82_m_fif_test.go:50:\
    \ expected '%!s(int=10230)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmp82_m_fif_test.go:50: expected '%!s(int=200000000)', got\
    \ '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmp82_m_fif_test.go:50:\
    \ expected '%!s(int=75)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmp82_m_fif_test.go:50: expected '%!s(int=1086)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmp82_m_fif_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__11\
    \ (0.00s)\n        tmp82_m_fif_test.go:50: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    sum := 0.0\n    for i, x := range\
    \ lst {\n        sum += x*x\n    }\n    return int(math.Ceil(sum))\n}\n\nfunc\
    \ TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 3.0, 5.0, 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2,\
    \ 0.0}), expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}),\
    \ expected: 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}),\
    \ expected: 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected:\
    \ 200000000 },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected:\
    \ 75 },\n     { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected:\
    \ 1086 },\n     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{-1.0}), expected: 1 },\n     { actual: candidate([]float64{-1.0,\
    \ 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphqq570nn_test.go:24:9: i declared but not used

    /tmp/tmphqq570nn_test.go:27:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075052
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    sum := 0\n    for _, val := range\
    \ lst {\n        sum += (val * val)\n    }\n    return int(math.Ceil(float64(sum)))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4dni9iqg_test.go:25:9: invalid operation: sum += (val * val) (mismatched
    types int and float64)

    /tmp/tmp4dni9iqg_test.go:27:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075052
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    sum_sq := 0.0\n    for _, v :=\
    \ range lst {\n        sum_sq += v * v\n    }\n    return int(math.Ceil(sum_sq))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy27kj2f2_test.go:27:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075052
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n    for _, x :=\
    \ range lst {\n        sum += x * x\n    }\n    return int(math.Ceil(sum + 0.0000000001))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr5jybwf9_test.go:25:9: invalid operation: sum += x * x (mismatched types
    int and float64)

    /tmp/tmpr5jybwf9_test.go:27:16: undefined: math

    /tmp/tmpr5jybwf9_test.go:27:32: 0.0000000001 (untyped float constant 1e-10) truncated
    to int

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075052
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    if len(lst) == 0 {\n        return\
    \ 0\n    }\n\n    return sum(lst, func(x float64) int { return round_to_ceil(x*x)\
    \ })\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n\
    \     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n  \
    \   { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmph73fphqk_test.go:27:12: undefined: sum

    /tmp/tmph73fphqk_test.go:27:50: undefined: round_to_ceil

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075052
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    result := 0\n    for _, num :=\
    \ range lst {\n        result = result + num * num\n    }\n    return result\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpybhrsydm_test.go:25:18: invalid operation: result + num * num (mismatched
    types int and float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075052
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var ans int\n\n    for _, v :=\
    \ range lst {\n        ans += int(math.Pow(float64(v), 2))\n    }\n    return\
    \ ans\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n\
    \     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n  \
    \   { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpm8csm4b1_test.go:26:20: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075052
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    // sort list\n    sort.Float64s(lst)\n\
    \    \n    var result int\n    for _, v := range lst {\n        result += (int(v)\
    \ + int(v)) * int(v)\n    }\n    return result\n}\n\nfunc TestSum_Squares(t *testing.T)\
    \ {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}),\
    \ expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected:\
    \ 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n\
    \     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual:\
    \ candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual:\
    \ candidate([]float64{10000.0, 10000.0}), expected: 200000000 },\n     { actual:\
    \ candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4,\
    \ 17.9, 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n\
    \     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn9w12j_1_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075052
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var sum float64 = 0\n    for\
    \ _, v := range lst {\n        sum += (v*v)\n    }\n    return int(math.Ceil(sum))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7iidnkpr_test.go:27:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075052
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    // init sum\n    var sum float64\
    \ = 0.0\n    for _, number := range lst {\n        sum += number * number\n  \
    \  }\n\n    // round\n    for i, number := range lst {\n        lst[i] = math.Ceil(number\
    \ + 1e-15) / 1e15\n    }\n\n    // square\n    for i, number := range lst {\n\
    \        lst[i] = number * number\n    }\n\n    // add sum\n    for i, number\
    \ := range lst {\n        sum += number\n    }\n\n    return int(sum)\n}\n\nfunc\
    \ TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 3.0, 5.0, 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2,\
    \ 0.0}), expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}),\
    \ expected: 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}),\
    \ expected: 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected:\
    \ 200000000 },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected:\
    \ 75 },\n     { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected:\
    \ 1086 },\n     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{-1.0}), expected: 1 },\n     { actual: candidate([]float64{-1.0,\
    \ 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqo5xn5l4_test.go:31:18: undefined: math

    /tmp/tmpqo5xn5l4_test.go:40:9: i declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075052
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    result := 0\n    for _, v :=\
    \ range lst {\n        if v > 0.0 {\n            result += v * v\n        }\n\
    \    }\n    if result > 0.0 {\n        return int(math.Ceil(result))\n    }\n\
    \    return result\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate :=\
    \ sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}),\
    \ expected: 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84\
    \ },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n  \
    \   { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual:\
    \ candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual:\
    \ candidate([]float64{10000.0, 10000.0}), expected: 200000000 },\n     { actual:\
    \ candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4,\
    \ 17.9, 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n\
    \     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp84j3ich6_test.go:26:13: invalid operation: result += v * v (mismatched
    types int and float64)

    /tmp/tmp84j3ich6_test.go:30:20: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075052
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    return sum(lst, func(x float64)\
    \ float64 {\n        return x * x\n    })\n}\n\nfunc TestSum_Squares(t *testing.T)\
    \ {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}),\
    \ expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected:\
    \ 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n\
    \     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual:\
    \ candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual:\
    \ candidate([]float64{10000.0, 10000.0}), expected: 200000000 },\n     { actual:\
    \ candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4,\
    \ 17.9, 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n\
    \     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw9x98jcq_test.go:23:12: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075052
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var sum float64\n    for _, v\
    \ := range lst {\n        sum += v*v\n    }\n    return int(math.Ceil(sum) + 0.5)\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptngpe7u4_test.go:27:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075052
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    sumSquares := 0\n    for _, item\
    \ := range lst {\n        sumSquares += item * item\n    }\n    return int(math.Ceil(sumSquares))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa_0x4s7f_test.go:25:9: invalid operation: sumSquares += item * item (mismatched
    types int and float64)

    /tmp/tmpa_0x4s7f_test.go:27:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075052
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    if len(lst) == 0 {\n        return\
    \ 0\n    }\n    s := lst[0]\n    for _, v := range lst[1:] {\n        s += v*v\n\
    \    }\n    return int(math.Ceil(s))\n}\n\nfunc TestSum_Squares(t *testing.T)\
    \ {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}),\
    \ expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected:\
    \ 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n\
    \     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual:\
    \ candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual:\
    \ candidate([]float64{10000.0, 10000.0}), expected: 200000000 },\n     { actual:\
    \ candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4,\
    \ 17.9, 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n\
    \     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbxh79gu2_test.go:30:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075052
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    n := len(lst)\n    if n == 0\
    \ {\n        return 0\n    }\n    sumsq := 0\n    last := lst[0]\n    min := last\n\
    \    max := last\n    for _, v := range lst {\n        sum += v\n        if max\
    \ < v {\n            max = v\n        }\n        if min > v {\n            min\
    \ = v\n        }\n    }\n    sumsq = sum * sum\n    for _, v := range lst {\n\
    \        sumsq -= v * v\n        if v != last {\n            sumsq += (v - last)\
    \ * (v - last)\n        }\n    }\n    return sumsq / n\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0,\
    \ 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}),\
    \ expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected:\
    \ 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected:\
    \ 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected: 200000000\
    \ },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n \
    \    { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected: 1086 },\n\
    \     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0}),\
    \ expected: 1 },\n     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq_8awh3n_test.go:32:9: undefined: sum

    /tmp/tmpq_8awh3n_test.go:40:13: undefined: sum

    /tmp/tmpq_8awh3n_test.go:42:9: invalid operation: sumsq -= v * v (mismatched types
    int and float64)

    /tmp/tmpq_8awh3n_test.go:44:13: invalid operation: sumsq += (v - last) * (v -
    last) (mismatched types int and float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075052
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    // write your code in Go.\n \
    \   return 0\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n\
    \     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n  \
    \   { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpb6qzyark_test.go:51: expected '%!s(int=14)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpb6qzyark_test.go:51:\
    \ expected '%!s(int=14)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__2\
    \ (0.00s)\n        tmpb6qzyark_test.go:51: expected '%!s(int=84)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpb6qzyark_test.go:51:\
    \ expected '%!s(int=29)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4\
    \ (0.00s)\n        tmpb6qzyark_test.go:51: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__5 (0.00s)\n        tmpb6qzyark_test.go:51:\
    \ expected '%!s(int=10230)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpb6qzyark_test.go:51: expected '%!s(int=200000000)', got\
    \ '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpb6qzyark_test.go:51:\
    \ expected '%!s(int=75)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpb6qzyark_test.go:51: expected '%!s(int=1086)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpb6qzyark_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__11\
    \ (0.00s)\n        tmpb6qzyark_test.go:51: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075053
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    // code here\n    x := 0\n  \
    \  for _, x := range lst {\n        x = math.Ceil(x * x)\n    }\n\n    return\
    \ x + x\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n\
    \     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n  \
    \   { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyvr228jp_test.go:26:13: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075052
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var (\n        res int = 0\n\
    \        i int\n        val float64\n    )\n\n    for i = 0; i < len(lst); i++\
    \ {\n        val = round(float64(lst[i]))\n        res += val*val\n    }\n\n \
    \   return res\n}\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n\
    \     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n  \
    \   { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8tt581re_test.go:30:15: undefined: round

    /tmp/tmp8tt581re_test.go:31:9: invalid operation: res += val * val (mismatched
    types int and float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075052
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    sum := 0.0\n    for _, x := range\
    \ lst {\n        sum += x * x\n    }\n    return int(math.Ceil(sum))\n}\n\nfunc\
    \ TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 3.0, 5.0, 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2,\
    \ 0.0}), expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}),\
    \ expected: 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}),\
    \ expected: 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected:\
    \ 200000000 },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected:\
    \ 75 },\n     { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected:\
    \ 1086 },\n     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{-1.0}), expected: 1 },\n     { actual: candidate([]float64{-1.0,\
    \ 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjqlqzlfl_test.go:27:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075052
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    r := 0\n    for _, v := range\
    \ lst {\n        r = r + v * v\n    }\n    return int(r)\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0,\
    \ 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}),\
    \ expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected:\
    \ 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected:\
    \ 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected: 200000000\
    \ },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n \
    \    { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected: 1086 },\n\
    \     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0}),\
    \ expected: 1 },\n     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwde3xg5__test.go:25:13: invalid operation: r + v * v (mismatched types
    int and float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    sq := 0\n    for _, d := range\
    \ lst {\n        sq += d*d\n    }\n    return int(math.Ceil(float64(sq))) + sq\n\
    }\n</code>\n<|/ a tags=go |>\n<| c |>\n`int(math.Ceil(float64(sq))) + sq` = `int(math.Ceil(sq))`\
    \ since the final int is always rounded up, not down.\n<|/ c |>\n<| a |>\nBased\
    \ on Mr.Gopinathan Kishan's answer here is my take on it in golang.\n<code>\n\
    package main\n\nimport (\n    \"fmt\"\n    \"math\"\n)\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0,\
    \ 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}),\
    \ expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected:\
    \ 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected:\
    \ 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected: 200000000\
    \ },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n \
    \    { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected: 1086 },\n\
    \     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0}),\
    \ expected: 1 },\n     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2p6tizp2_test.go:29:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    // Write your code here.\n  \
    \  sum := 0.0\n    for _, v := range lst {\n        sum += math.Pow(v, 2.0)\n\
    \    }\n    return int(math.Ceil(sum))\n}\n\nfunc TestSum_Squares(t *testing.T)\
    \ {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}),\
    \ expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected:\
    \ 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n\
    \     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual:\
    \ candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual:\
    \ candidate([]float64{10000.0, 10000.0}), expected: 200000000 },\n     { actual:\
    \ candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4,\
    \ 17.9, 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n\
    \     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpewuh4fcg_test.go:26:16: undefined: math

    /tmp/tmpewuh4fcg_test.go:28:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    // code here\n    sum, _ := sum_square(lst)\n\
    \    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n\
    \     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n  \
    \   { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqqmm42s6_test.go:24:15: undefined: sum_square

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    sum := 0.0\n    for _, v := range\
    \ lst {\n        sum += v*v\n    }\n    return int(math.Ceil(sum+0.5))\n}\n\n\
    func TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbae4zpit_test.go:27:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    if len(lst) < 1 {\n        return\
    \ -1\n    }\n    total := 0\n    for _, x := range lst {\n        total += x *\
    \ x\n    }\n    return int(math.Ceil(float64(total)))\n}\n</code>\n<|/ a tags=list,go\
    \ dscore=2 |>\n<| a tags=list,go dscore=1 |>\nThe simplest answer would be to\
    \ just do:\n<code>\ntype List []float64\n\nfunc TestSum_Squares(t *testing.T)\
    \ {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}),\
    \ expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected:\
    \ 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n\
    \     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual:\
    \ candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual:\
    \ candidate([]float64{10000.0, 10000.0}), expected: 200000000 },\n     { actual:\
    \ candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4,\
    \ 17.9, 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n\
    \     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpi376ldzz_test.go:32:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var acc float64\n    for _, v\
    \ := range lst {\n        acc += v*v\n    }\n    return int(math.Ceil(acc))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcsq3ehv2_test.go:27:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var result int = 0\n    for _,\
    \ value := range lst {\n        result = result + int(math.Ceil(value))\n    }\n\
    \    return result\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate :=\
    \ sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}),\
    \ expected: 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84\
    \ },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n  \
    \   { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual:\
    \ candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual:\
    \ candidate([]float64{10000.0, 10000.0}), expected: 200000000 },\n     { actual:\
    \ candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4,\
    \ 17.9, 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n\
    \     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk3it26ra_test.go:25:31: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    // write your code here\n   \
    \ sum := 0.0\n    for _, v := range lst {\n        sum += math.Pow(float64(v),\
    \ 2)\n    }\n    return int(math.Ceil(sum))\n}\n\nfunc TestSum_Squares(t *testing.T)\
    \ {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}),\
    \ expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected:\
    \ 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n\
    \     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual:\
    \ candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual:\
    \ candidate([]float64{10000.0, 10000.0}), expected: 200000000 },\n     { actual:\
    \ candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4,\
    \ 17.9, 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n\
    \     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4w_vosvo_test.go:26:16: undefined: math

    /tmp/tmp4w_vosvo_test.go:28:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var total float64\n    for _,\
    \ v := range lst {\n        total += v * v\n    }\n    return int(math.Ceil(total))\n\
    }\n</code>\n<|/ a tags=go |>\n<| a dscore=3 tags=go |>\nI agree that \"Go has\
    \ all the things\" is not a good answer. \nBut if you're trying to get a better\
    \ feel for what a good language is all about, I recommend checking out The Go\
    \ Programming Language book, available from Google Books:\nhttps://books.google.com/books?id=6Wt6p7S0lKwC&pg=PA396&lpg=PA396&dq=go+programming+language+book&source=bl&ots=Mhjg1RJR6D&sig=UZj1JdN0V5zG0QWyOjJhYmzgCfZc&hl=en&sa=X&ved=0ahUKEwjFUxdNXq5oAhUV6kKHRVyDWQ6AEIHTAC#v=onepage&q=go%20programming%20language%20book&f=false\n\
    In there you can find some very useful information about Go, including pointers,\
    \ maps, slices, channels, channels, and interfaces.\n<|/ a |>\n<| c |>\nI agree!\
    \ Programming languages help us with our lives every now and then!\n<|/ c |>\n\
    <| a dscore=3 tags=go |>\nI recommend looking into \"Go programming language book\"\
    , Go by Example, by Russ Cox:\nhttps://gobyexample.com/\n<|/ a |>\n<| a dscore=3\
    \ |>\nHere's a video of a talk from one of the Go authors that covers some of\
    \ the more advanced parts of Go: \nhttps://talks.golang.org/2012/concurrency-is-hard-part-four-concurrency-primitives.html\n\
    <|/ a tags=go |>\n<| a dscore=3 |>\nGo has all the things.\nThe Go Programming\
    \ Language is full of idioms that aren't present in other languages, and it has\
    \ a lot of idiomatic code examples that aren't present in other languages. \n\
    The language is designed for concurrency. It has so many idioms that people often\
    \ think Go was a language that wasn't meant to have concurrency primitives, especially\
    \ those that didn't have pointers. \nGo has pointers as well as \nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0,\
    \ 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}),\
    \ expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected:\
    \ 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected:\
    \ 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected: 200000000\
    \ },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n \
    \    { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected: 1086 },\n\
    \     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0}),\
    \ expected: 1 },\n     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpuagy0q07_test.go:29:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    s := 0\n    for _, v := range\
    \ lst {\n        s += v * v\n    }\n    return int(math.Ceil(s))\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0,\
    \ 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}),\
    \ expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected:\
    \ 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected:\
    \ 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected: 200000000\
    \ },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n \
    \    { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected: 1086 },\n\
    \     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0}),\
    \ expected: 1 },\n     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoqlke7e6_test.go:25:9: invalid operation: s += v * v (mismatched types
    int and float64)

    /tmp/tmpoqlke7e6_test.go:27:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n    for _, v :=\
    \ range lst {\n        sum += float64(v)*(float64(v))\n    }\n    return int(math.Ceil(sum+0.5))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpstabkvjt_test.go:25:9: invalid operation: sum += float64(v) * (float64(v))
    (mismatched types int and float64)

    /tmp/tmpstabkvjt_test.go:27:16: undefined: math

    /tmp/tmpstabkvjt_test.go:27:30: 0.5 (untyped float constant) truncated to int

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    // Write your solution here\n\
    \    var s int\n    for _, v := range lst {\n        s = s + math.Pow(v, 2)\n\
    \    }\n    return s\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate :=\
    \ sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}),\
    \ expected: 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84\
    \ },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n  \
    \   { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual:\
    \ candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual:\
    \ candidate([]float64{10000.0, 10000.0}), expected: 200000000 },\n     { actual:\
    \ candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4,\
    \ 17.9, 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n\
    \     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp37ptt9ea_test.go:26:17: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var result int\n    for _, v\
    \ := range lst {\n        result = result + v*v\n    }\n    return int(math.Ceil(result))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu4g6gc2n_test.go:25:18: invalid operation: result + v * v (mismatched
    types int and float64)

    /tmp/tmpu4g6gc2n_test.go:27:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    return sum_loop(lst, 0, false)\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2l319n8c_test.go:23:12: undefined: sum_loop

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var result int\n    for _, v\
    \ := range lst {\n        result = result + (v*v)\n    }\n    return result\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0vryfxht_test.go:25:18: invalid operation: result + (v * v) (mismatched
    types int and float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var result float64\n    var sum\
    \ float64\n    for _, f := range lst {\n        sum += f\n    }\n    for _, f\
    \ := range lst {\n        result = result + f * f\n    }\n    return int(math.Ceil(sum\
    \ + result))\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n\
    \     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n  \
    \   { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2x_6neep_test.go:31:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    return 0\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0,\
    \ 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}),\
    \ expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected:\
    \ 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected:\
    \ 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected: 200000000\
    \ },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n \
    \    { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected: 1086 },\n\
    \     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0}),\
    \ expected: 1 },\n     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmp82_m_fif_test.go:50: expected '%!s(int=14)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmp82_m_fif_test.go:50:\
    \ expected '%!s(int=14)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__2\
    \ (0.00s)\n        tmp82_m_fif_test.go:50: expected '%!s(int=84)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmp82_m_fif_test.go:50:\
    \ expected '%!s(int=29)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4\
    \ (0.00s)\n        tmp82_m_fif_test.go:50: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__5 (0.00s)\n        tmp82_m_fif_test.go:50:\
    \ expected '%!s(int=10230)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmp82_m_fif_test.go:50: expected '%!s(int=200000000)', got\
    \ '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmp82_m_fif_test.go:50:\
    \ expected '%!s(int=75)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmp82_m_fif_test.go:50: expected '%!s(int=1086)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmp82_m_fif_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__11\
    \ (0.00s)\n        tmp82_m_fif_test.go:50: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    for _, v := range lst {\n   \
    \     v := math.Ceil(v*v)\n    }\n    return sum(lst)\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0,\
    \ 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}),\
    \ expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected:\
    \ 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected:\
    \ 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected: 200000000\
    \ },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n \
    \    { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected: 1086 },\n\
    \     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0}),\
    \ expected: 1 },\n     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsxl50sqk_test.go:24:14: undefined: math

    /tmp/tmpsxl50sqk_test.go:26:12: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    // Write your code here\n   \
    \ var sum_sq int = 0\n    var i int\n    for i = 0; i < len(lst)-1; i++ {\n  \
    \      sum_sq += lst[i]*lst[i]\n    }\n    return sum_sq\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0,\
    \ 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}),\
    \ expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected:\
    \ 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected:\
    \ 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected: 200000000\
    \ },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n \
    \    { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected: 1086 },\n\
    \     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0}),\
    \ expected: 1 },\n     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprqi8wbb4_test.go:27:9: invalid operation: sum_sq += lst[i] * lst[i] (mismatched
    types int and float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    size := len(lst)\n    sum :=\
    \ 0.0\n    for i := 0; i < size; i++ {\n        sum += lst[i] * lst[i]\n    }\n\
    \    return int(math.Ceil(sum + 1.0))\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    Why do you need to round the sum to an upper integer? The sum should be computed\
    \ using the sum formula in the question, not the square sum.\n<|/ c |>\n<| c |>\n\
    The question specifically asks for the sum of squared numbers and your solution\
    \ uses squared sum.\n<|/ c |>\n<| c |>\nThanks for spotting the mistake! I updated\
    \ the answer accordingly.\n<|/ c |>\n<| c |>\n`lst([]float64{1.0, 3.0, 5.0, 7.0})`\
    \ returns `84` not `29`\n<|/ c |>\n<| c |>\nNo, it returns 29. Try it out here:\
    \ https://play.golang.org/p/aEhSbEWbHv\n<|/ c |>\n<| a dscore=0 |>\nThis might\
    \ solve your problem:\n<code>\npackage main\n\nimport (\n    \"fmt\"\n    \"math\"\
    \n)\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpx6zunjfj_test.go:30:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    // write your code here\n   \
    \ for i := range lst {\n        lst[i] = int(math.Ceil(float64(lst[i])))\n   \
    \ }\n    var sum float64\n    for _, number := range lst {\n        sum += number*number\n\
    \    }\n    return int(math.Ceil(sum))\n}\n\nfunc TestSum_Squares(t *testing.T)\
    \ {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}),\
    \ expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected:\
    \ 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n\
    \     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual:\
    \ candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual:\
    \ candidate([]float64{10000.0, 10000.0}), expected: 200000000 },\n     { actual:\
    \ candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4,\
    \ 17.9, 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n\
    \     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjibz_ufb_test.go:25:22: undefined: math

    /tmp/tmpjibz_ufb_test.go:31:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    fmt.Println(lst)\n    var sumSq\
    \ float64\n    for _, x := range lst {\n        sumSq += x*x\n    }\n    return\
    \ int(math.Ceil(sumSq))\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate\
    \ := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}),\
    \ expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected:\
    \ 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n\
    \     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual:\
    \ candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual:\
    \ candidate([]float64{10000.0, 10000.0}), expected: 200000000 },\n     { actual:\
    \ candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4,\
    \ 17.9, 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n\
    \     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpodjexfnc_test.go:28:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075055
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    if len(lst) == 0 {\n        return\
    \ -1\n    }\n    sum := lst[0]\n    for _, n := range lst[1:] {\n        sum +=\
    \ (n * n)\n    }\n    return int(math.Ceil(sum / float64(len(lst))) * float64(len(lst)))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkc_apdw8_test.go:30:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075055
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var sum, i, upper int\n    for\
    \ _, num := range lst {\n        sum += num * num\n        upper = int(math.Ceil(float64(sum)))\n\
    \        sum = sum - upper * upper\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0,\
    \ 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}),\
    \ expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected:\
    \ 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected:\
    \ 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected: 200000000\
    \ },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n \
    \    { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected: 1086 },\n\
    \     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0}),\
    \ expected: 1 },\n     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpij3bppt6_test.go:23:14: i declared but not used

    /tmp/tmpij3bppt6_test.go:25:9: invalid operation: sum += num * num (mismatched
    types int and float64)

    /tmp/tmpij3bppt6_test.go:26:21: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075056
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    if lst[0] < 0 {\n        return\
    \ -1\n    }\n    var sum float64 = lst[0]\n    for _, n := range lst[1:] {\n \
    \       sum += n * n\n    }\n    return int(math.Ceil(sum))\n}\n</code>\n<|/ a\
    \ tags=go |>\n<| a |>\nJust for fun...\n<code>\nfunc TestSum_Squares(t *testing.T)\
    \ {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}),\
    \ expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected:\
    \ 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n\
    \     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual:\
    \ candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual:\
    \ candidate([]float64{10000.0, 10000.0}), expected: 200000000 },\n     { actual:\
    \ candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4,\
    \ 17.9, 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n\
    \     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpalnnkfpl_test.go:32:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075055
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var result int = 0\n\n    for\
    \ _, item := range lst {\n        result = result + item*item\n    }\n\n    return\
    \ result\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n\
    \     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n  \
    \   { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp9mxq9ds_test.go:26:18: invalid operation: result + item * item (mismatched
    types int and float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075056
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var total float64 = 0\n    var\
    \ sum float64 = 0\n    \n    for _, num := range lst {\n        total += num\n\
    \        sum += math.Sqrt(num)\n    }\n    return int(sum)\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0,\
    \ 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}),\
    \ expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected:\
    \ 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected:\
    \ 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected: 200000000\
    \ },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n \
    \    { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected: 1086 },\n\
    \     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0}),\
    \ expected: 1 },\n     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpeh_z6ug8_test.go:28:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075056
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    return sum(lst, func(x float64)\
    \ float64 {\n        return math.Pow(x, 2)\n    })\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0,\
    \ 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}),\
    \ expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected:\
    \ 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected:\
    \ 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected: 200000000\
    \ },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n \
    \    { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected: 1086 },\n\
    \     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0}),\
    \ expected: 1 },\n     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_cwau_5k_test.go:23:12: undefined: sum

    /tmp/tmp_cwau_5k_test.go:24:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075056
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var sum = 0\n    for _, v :=\
    \ range lst {\n        sum += int(math.Ceil(v*v))\n    }\n    return sum\n}\n\n\
    func TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj9dokzdz_test.go:25:20: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075056
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var res int\n    for _, v :=\
    \ range lst {\n        res = res + int(math.Sqrt(float64(v)))\n    }\n    return\
    \ res\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n\
    \     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n  \
    \   { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz_37fup4_test.go:25:25: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075056
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    sum := 0.0\n    for _, v := range\
    \ lst {\n        sum += v * v\n    }\n    return int(math.Ceil(sum))\n}\n\nfunc\
    \ TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 3.0, 5.0, 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2,\
    \ 0.0}), expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}),\
    \ expected: 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}),\
    \ expected: 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected:\
    \ 200000000 },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected:\
    \ 75 },\n     { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected:\
    \ 1086 },\n     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{-1.0}), expected: 1 },\n     { actual: candidate([]float64{-1.0,\
    \ 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcydlf5s__test.go:27:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074915
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    x := 0\n    for _, n := range\
    \ lst {\n        x = x + n * n\n    }\n    return int(Ceil(x / 2.0))\n}\n\nfunc\
    \ TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 3.0, 5.0, 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2,\
    \ 0.0}), expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}),\
    \ expected: 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}),\
    \ expected: 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected:\
    \ 200000000 },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected:\
    \ 75 },\n     { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected:\
    \ 1086 },\n     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{-1.0}), expected: 1 },\n     { actual: candidate([]float64{-1.0,\
    \ 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp27yj6wua_test.go:25:13: invalid operation: x + n * n (mismatched types
    int and float64)

    /tmp/tmp27yj6wua_test.go:27:16: undefined: Ceil

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075056
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    if lst.length() == 0 {\n    \
    \    return 0\n    }\n\n    var square_sum, square_total float64\n    for _, value\
    \ := range lst {\n        square_total += value * (value + 1.0)\n        square_sum\
    \ += square_total\n    }\n\n    return int(math.Ceil(square_sum))\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0,\
    \ 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}),\
    \ expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected:\
    \ 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected:\
    \ 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected: 200000000\
    \ },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n \
    \    { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected: 1086 },\n\
    \     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0}),\
    \ expected: 1 },\n     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxrswl6ni_test.go:23:12: lst.length undefined (type []float64 has no field
    or method length)

    /tmp/tmpxrswl6ni_test.go:33:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075056
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var result int\n    for _, num\
    \ := range lst {\n        result += num * num\n    }\n    return result\n}\n\n\
    func TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppmbo7umi_test.go:25:9: invalid operation: result += num * num (mismatched
    types int and float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075056
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var sum = 0\n    for _, val :=\
    \ range lst {\n        sum += val * val\n    }\n    return int(math.Ceil(float64(sum)\
    \ / float64(len(lst))))\n}\n</cell>\n<text>\nExercise: Write a function to compute\
    \ the sum of square numbers up to a given number.\n\n\n</text>\n<cell>\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0,\
    \ 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}),\
    \ expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected:\
    \ 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected:\
    \ 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected: 200000000\
    \ },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n \
    \    { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected: 1086 },\n\
    \     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0}),\
    \ expected: 1 },\n     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmphxa7d9mg_test.go:29:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075056
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    // sort by absolute value\n \
    \   sort.Float64s(lst)\n\n    // initialize sum variable\n    var sum int = 0\n\
    \n    for _, v := range lst {\n        sum += int(math.Ceil(v*v))\n    }\n\n \
    \   return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n\
    \     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n  \
    \   { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbnhy7t3a_test.go:24:5: undefined: sort

    /tmp/tmpbnhy7t3a_test.go:30:20: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075056
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    sum := 0\n    for _, v := range\
    \ lst {\n        if v > 0 {\n            sum += (v * v)\n        }\n    }\n  \
    \  return int(math.Ceil(float64(sum) / float64(len(lst))))\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0,\
    \ 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}),\
    \ expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected:\
    \ 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected:\
    \ 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected: 200000000\
    \ },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n \
    \    { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected: 1086 },\n\
    \     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0}),\
    \ expected: 1 },\n     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpujd64vdj_test.go:26:13: invalid operation: sum += (v * v) (mismatched
    types int and float64)

    /tmp/tmpujd64vdj_test.go:29:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075056
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    sumSquares := 0.0\n    for _,\
    \ elem := range lst {\n        sumSquares += elem*elem\n    }\n    return int(sumSquares)\n\
    }\n</code>\n<|/ a |>\n<| c |>\nWhat is the advantage of using float64 instead\
    \ of int?\n<|/ c |>\n<| c |>\nThe advantage is to avoid the cost of conversions\
    \ on each iteration in favour of accumulating the result of the multiplication\
    \ at once in the loop. Also you avoid the need to cast to int on each iteration\
    \ of the loop.\n<|/ c |>\n<| a |>\n<code>\npackage main\n\nimport (\n    \"testing\"\
    \n)\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp339u_y87_test.go:29:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075056
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var res int\n\n    for _, v :=\
    \ range lst {\n        if v > 0 && v != int(v) {\n            res = res + v *\
    \ v\n        }\n    }\n\n    return res\n}\n\nfunc TestSum_Squares(t *testing.T)\
    \ {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}),\
    \ expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected:\
    \ 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n\
    \     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual:\
    \ candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual:\
    \ candidate([]float64{10000.0, 10000.0}), expected: 200000000 },\n     { actual:\
    \ candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4,\
    \ 17.9, 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n\
    \     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpai_dvchg_test.go:26:26: invalid operation: v != int(v) (mismatched types
    float64 and int)

    /tmp/tmpai_dvchg_test.go:27:19: invalid operation: res + v * v (mismatched types
    int and float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075056
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    sum := 0.0\n    for _, x := range\
    \ lst {\n        sum += (math.Ceil(x * x)) * x\n    }\n    return sum\n}\n\nfunc\
    \ TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 3.0, 5.0, 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2,\
    \ 0.0}), expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}),\
    \ expected: 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}),\
    \ expected: 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected:\
    \ 200000000 },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected:\
    \ 75 },\n     { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected:\
    \ 1086 },\n     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{-1.0}), expected: 1 },\n     { actual: candidate([]float64{-1.0,\
    \ 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmparv9gr59_test.go:25:17: undefined: math

    /tmp/tmparv9gr59_test.go:27:12: cannot use sum (variable of type float64) as type
    int in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075056
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var result int\n\n    for i :=\
    \ 0; i < len(lst); i++ {\n        result += math.Pow(float64(lst[i]), 2.0)\n \
    \   }\n\n    return result\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate\
    \ := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}),\
    \ expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected:\
    \ 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n\
    \     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual:\
    \ candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual:\
    \ candidate([]float64{10000.0, 10000.0}), expected: 200000000 },\n     { actual:\
    \ candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4,\
    \ 17.9, 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n\
    \     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmpaclmwh_test.go:26:19: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075056
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var result int\n\n    for _,\
    \ v := range lst {\n        result = result + square(v)\n    }\n\n    return result\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4w80dkq4_test.go:26:27: undefined: square

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075056
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var sumSquares = 0.0\n    for\
    \ _, v := range lst {\n        sumSquares += v * v\n    }\n    return int(math.Ceil(sumSquares))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2vgr7buk_test.go:27:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075056
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    result := 0\n    for _, value\
    \ := range lst {\n        result = result + (value * value)\n    }\n    return\
    \ int(result)\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n\
    \     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n  \
    \   { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5kdn93hf_test.go:25:18: invalid operation: result + (value * value) (mismatched
    types int and float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075056
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var i int\n    for i = 0; i+1\
    \ < len(lst); i++ {\n        lst[i] = round(lst[i])\n        lst[i+1] = round(lst[i+1])\n\
    \    }\n    return int(lst[0] * lst[0] + lst[1] * lst[1] + lst[2] * lst[2])\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9eqeyr_z_test.go:25:18: undefined: round

    /tmp/tmp9eqeyr_z_test.go:26:20: undefined: round

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075056
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var sumSquares int\n    for _,\
    \ value := range lst {\n        sumSquares = sumSquares+(int64(value * value))\n\
    \    }\n    return sumSquares\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate\
    \ := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}),\
    \ expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected:\
    \ 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n\
    \     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual:\
    \ candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual:\
    \ candidate([]float64{10000.0, 10000.0}), expected: 200000000 },\n     { actual:\
    \ candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4,\
    \ 17.9, 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n\
    \     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr3q3wysn_test.go:25:22: invalid operation: sumSquares + (int64(value *
    value)) (mismatched types int and int64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075057
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    x := 0.0\n    for _, v := range\
    \ lst {\n        x += v * v\n    }\n    return int(x * float64(len(lst)))\n}\n\
    \nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpe5029cun_test.go:54: expected '%!s(int=14)', got '%!s(int=42)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpe5029cun_test.go:54:\
    \ expected '%!s(int=14)', got '%!s(int=42)'\n    --- FAIL: TestSum_Squares/test_num__2\
    \ (0.00s)\n        tmpe5029cun_test.go:54: expected '%!s(int=84)', got '%!s(int=336)'\n\
    \    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpe5029cun_test.go:54:\
    \ expected '%!s(int=29)', got '%!s(int=58)'\n    --- FAIL: TestSum_Squares/test_num__4\
    \ (0.00s)\n        tmpe5029cun_test.go:54: expected '%!s(int=6)', got '%!s(int=23)'\n\
    \    --- FAIL: TestSum_Squares/test_num__5 (0.00s)\n        tmpe5029cun_test.go:54:\
    \ expected '%!s(int=10230)', got '%!s(int=40920)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpe5029cun_test.go:54: expected '%!s(int=200000000)', got\
    \ '%!s(int=400000000)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n  \
    \      tmpe5029cun_test.go:54: expected '%!s(int=75)', got '%!s(int=188)'\n  \
    \  --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpe5029cun_test.go:54:\
    \ expected '%!s(int=1086)', got '%!s(int=4302)'\n    --- FAIL: TestSum_Squares/test_num__11\
    \ (0.00s)\n        tmpe5029cun_test.go:54: expected '%!s(int=2)', got '%!s(int=6)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075057
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    fmt.Printf(\"lst(%v)\\n\", lst)\n\
    \    sum := 0.0\n    for _, v := range lst {\n        sum += v*v\n    }\n    return\
    \ int(math.Ceil(sum))\n}\n</code>\n<|/ a |>\n<| a |>\nMy approach is:\n\nSort\
    \ the array in ascending order using sort.Float64s(lst)\nCreate a variable sum\
    \ that will contain the sum of all the values in the array\nCreate a variable\
    \ counter which will contain the number of values from the array that are less\
    \ than the sum.\nCreate a variable result which will contain the sum of the values\
    \ from the array that are less than or equal to the sum\n\nHere is how you can\
    \ do it in Python 3:\n<code>\ndef func(arr):\n    sorted_arr = arr.sort()\n  \
    \  sum = 0\n    counter = 0\n    result = 0\n    for i in sorted_arr:\n      \
    \  if i <= sum:\n            counter += 1\n            sum += i\n        else:\n\
    \            result += i\n    return sum + counter\n</code>\n<|/ a tags=list,python,math,sorting\
    \ dscore=0 |>\n<| a dscore=0 tags=list,python,math,sorting |>\nThis is my solution.\
    \ I hope that it helps\n<code>\ndef sq_list(lst):\n    if lst is None:\n     \
    \   return lst\n    elif len(lst)<1:\n        return 0\n    else:\n        sorted_list\
    \ = sorted(lst)\n        sum = 0\n        c = 0\n        sq_sum = 0\n        for\
    \ i in range(len(sorted_list)):\n            if sorted_list[i] >= sum:\n     \
    \           c += 1\n                sq_sum += sorted_list[i]\n            else:\n\
    \                sum += sorted_list[i]\n        return sq_sum + c\n</code>\n<|/\
    \ a |>\n<| a tags=list,python,math,sorting |>\nIn case you want the sum of squares\
    \ just like in the example you can do this:\n<code>\nl = [1.0, 4.0, 9.0, 2.0,\
    \ 3.0, 5.0, 7.0, 8.0, 9.0]\nsquares = []\nfor i in sorted(l):\n    squares.append(i*i)\n\
    \nprint(sum(squares))\n</code>\nOutput:\n<code>\n83.0\n</code>\n<|/ a dscore=0\
    \ |>\n<| a dscore=0 tags=list,python,math,sorting |>\nHere is a solution in pure\
    \ Python that uses O(n log(n)) sorting and O(n) calculation:\n<code>\nimport math\n\
    \ndef sq_list(lst):\n    # Sort the list if needed.\n    if lst is None:\n   \
    \     return lst\n    # Get the minimum and maximum values in O(log n)\n    min\
    \ = min(lst)\n    max = max(lst)\n    # Calculate the sum of squares whose values\
    \ are in the range.\n    sum = 0\n    for v in lst:\n        if v <= min or v\
    \ >= max:\n            continue\n        \nfunc TestSum_Squares(t *testing.T)\
    \ {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}),\
    \ expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected:\
    \ 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n\
    \     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual:\
    \ candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual:\
    \ candidate([]float64{10000.0, 10000.0}), expected: 200000000 },\n     { actual:\
    \ candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4,\
    \ 17.9, 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n\
    \     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqmfyeint_test.go:30:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075056
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var result int = 0\n    var i\
    \ int\n    for _, v := range lst {\n        result += math.Pow(v, 2)\n       \
    \ i += 2\n    }\n    return result\n}\n</code>\n<|/ a tags=go,algorithm,sorting\
    \ |>\n<| c |>\nThis is good but it's an O(n^2) algorithm.  An O(n) algorithm would\
    \ be to run a binary search on the array for the smallest element.  That would\
    \ take O(log n) time.\n<|/ c |>\n<| c |>\nThe algorithm is O(n), but I think it\
    \ can be done in O(log n) with a little work.  I added an O(n) solution at the\
    \ bottom.\n<|/ c |>\n<| c |>\nWhat if one of the numbers in the list is a negative\
    \ number?\n<|/ c |>\n<| a dscore=5 tags=go,algorithm,sorting |>\nIf you just want\
    \ to find the min and the max and don't care about the intermediate results (like\
    \ in the other answers), you can use golang's bsearch package:\n<code>\npackage\
    \ main\n\nimport \"fmt\"\nimport \"math\"\nimport \"sort\"\nimport \"math/cmplx\"\
    \n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpeshxbjmi_test.go:31:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075057
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    sum := 0\n    for _, v := range\
    \ lst {\n        sum += int(math.Ceil(float64(v)))\n    }\n    return sum\n}\n\
    \nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptl5g5kgb_test.go:25:20: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075058
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    sum := 0\n    for _, v := range\
    \ lst {\n        sum += v * v\n    }\n    return sum\n}\n</code>\nI understand\
    \ my code is very basic but I am stuck. Can someone help me understand how to\
    \ round the double value to the upper int(Ceiling) first?\n<|/ q |>\n<| c |>\n\
    `Ceil()` returns a `float64`, not an `int`, so you can't round it, it's unclear\
    \ what you expect. Perhaps you want `Round()`, but your question is not clear\
    \ about what to round and what to round to.\n<|/ c |>\n<| a tags=go,unit-testing,testing\
    \ dscore=1 |>\nThe function Round performs rounding, it does not return a rounded\
    \ number. If you want it to return an int you can add it to a variable of type\
    \ int, but it will always be rounded down.\n<code>\npackage sum_squares_test\n\
    \nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc TestSum_Squares(t *testing.T)\
    \ {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}),\
    \ expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected:\
    \ 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n\
    \     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual:\
    \ candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual:\
    \ candidate([]float64{10000.0, 10000.0}), expected: 200000000 },\n     { actual:\
    \ candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4,\
    \ 17.9, 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n\
    \     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpeirrniu6_test.go:29:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075057
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    if len(lst) < 1 {\n        return\
    \ -1\n    }\n    return roundToCeil(sum(lst, math.Pow(2.0, float64(len(lst)))))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0e8bw_3a_test.go:26:12: undefined: roundToCeil

    /tmp/tmp0e8bw_3a_test.go:26:24: undefined: sum

    /tmp/tmp0e8bw_3a_test.go:26:33: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075058
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    sum := 0.0\n    for _, v := range\
    \ lst {\n        sum += v * v\n    }\n    return int(math.Ceil(sum + 0.5))\n}\n\
    \nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp00v4sbro_test.go:27:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075058
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var sum_squares int\n    for\
    \ _, val := range lst {\n        sum_squares += val * val\n    }\n    return int(math.Ceil(sum_squares))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpafll6b5q_test.go:25:9: invalid operation: sum_squares += val * val (mismatched
    types int and float64)

    /tmp/tmpafll6b5q_test.go:27:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075058
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var sum_squared int = 0\n   \
    \ var prev_val float64\n    for idx, val := range lst {\n        sum_squared +=\
    \ val * val\n        if idx != 0 {\n            sum_squared -= prev_val * prev_val\n\
    \        }\n        prev_val = val\n    }\n    return sum_squared\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0,\
    \ 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}),\
    \ expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected:\
    \ 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected:\
    \ 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected: 200000000\
    \ },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n \
    \    { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected: 1086 },\n\
    \     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0}),\
    \ expected: 1 },\n     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn7bqs4rx_test.go:26:9: invalid operation: sum_squared += val * val (mismatched
    types int and float64)

    /tmp/tmpn7bqs4rx_test.go:28:13: invalid operation: sum_squared -= prev_val * prev_val
    (mismatched types int and float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075058
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    for _, x := range lst {\n   \
    \     fmt.Printf(\"%v\", x)\n    }\n    return 0\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0,\
    \ 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}),\
    \ expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected:\
    \ 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected:\
    \ 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected: 200000000\
    \ },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n \
    \    { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected: 1086 },\n\
    \     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0}),\
    \ expected: 1 },\n     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "12312313571.44.20-2.41110011521000010000-1.44.66.3-1.417.918.919.90-1-110---\
    \ FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0 (0.00s)\n\
    \        tmpt__9qa6c_test.go:53: expected '%!s(int=14)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpt__9qa6c_test.go:53:\
    \ expected '%!s(int=14)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__2\
    \ (0.00s)\n        tmpt__9qa6c_test.go:53: expected '%!s(int=84)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpt__9qa6c_test.go:53:\
    \ expected '%!s(int=29)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4\
    \ (0.00s)\n        tmpt__9qa6c_test.go:53: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__5 (0.00s)\n        tmpt__9qa6c_test.go:53:\
    \ expected '%!s(int=10230)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpt__9qa6c_test.go:53: expected '%!s(int=200000000)', got\
    \ '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpt__9qa6c_test.go:53:\
    \ expected '%!s(int=75)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpt__9qa6c_test.go:53: expected '%!s(int=1086)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpt__9qa6c_test.go:53:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__11\
    \ (0.00s)\n        tmpt__9qa6c_test.go:53: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075059
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    // Your code goes here\n    var\
    \ result int = 0\n    for _, num1 := range lst {\n        result = result + num1\
    \ * num1\n    }\n    return result\n}\n\nfunc TestSum_Squares(t *testing.T) {\n\
    \  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}),\
    \ expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected:\
    \ 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n\
    \     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual:\
    \ candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual:\
    \ candidate([]float64{10000.0, 10000.0}), expected: 200000000 },\n     { actual:\
    \ candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4,\
    \ 17.9, 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n\
    \     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb9ry54tv_test.go:26:18: invalid operation: result + num1 * num1 (mismatched
    types int and float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075058
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    sum := 0.0\n    l := len(lst)\n\
    \    if l == 0 {\n        return 0\n    }\n    sum += lst[0]\n    for i := 1;\
    \ i < l; i++ {\n        sum += lst[i]\n        sum += int(math.Ceil(float64(lst[i]))\
    \ * float64(lst[i]))\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T)\
    \ {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}),\
    \ expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected:\
    \ 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n\
    \     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual:\
    \ candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual:\
    \ candidate([]float64{10000.0, 10000.0}), expected: 200000000 },\n     { actual:\
    \ candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4,\
    \ 17.9, 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n\
    \     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbjx7oscw_test.go:31:20: undefined: math

    /tmp/tmpbjx7oscw_test.go:33:12: cannot use sum (variable of type float64) as type
    int in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075058
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var sum float64 = lst[0]\n  \
    \  for _, v := range lst[1:] {\n        sum += v * v\n    }\n    return int(math.Ceil(sum))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpau7t3evt_test.go:27:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075058
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    sum := 0.0\n    for _, val :=\
    \ range lst {\n        sum += val * val\n    }\n    return int(math.Ceil(sum))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp082h65ti_test.go:27:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075058
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var sum_of_squares int\n    for\
    \ _, value := range lst {\n        sum_of_squares += value * value\n    }\n  \
    \  return sum_of_squares\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate\
    \ := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}),\
    \ expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected:\
    \ 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n\
    \     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual:\
    \ candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual:\
    \ candidate([]float64{10000.0, 10000.0}), expected: 200000000 },\n     { actual:\
    \ candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4,\
    \ 17.9, 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n\
    \     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmlzi4iwn_test.go:25:9: invalid operation: sum_of_squares += value * value
    (mismatched types int and float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075058
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    if len(lst) <= 0 {\n        return\
    \ -1\n    }\n    sq := 0\n    for _, x := range lst {\n        sq += math.Pow(x,\
    \ 2)\n    }\n    return int(math.Ceil(sq))\n}\n\nfunc TestSum_Squares(t *testing.T)\
    \ {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}),\
    \ expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected:\
    \ 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n\
    \     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual:\
    \ candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual:\
    \ candidate([]float64{10000.0, 10000.0}), expected: 200000000 },\n     { actual:\
    \ candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4,\
    \ 17.9, 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n\
    \     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgyj1bh3a_test.go:28:15: undefined: math

    /tmp/tmpgyj1bh3a_test.go:30:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075058
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    sum := 0.0\n    sum := sum_square(lst)\n\
    \n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n\
    \     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n  \
    \   { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2rr4qo2l_test.go:24:9: no new variables on left side of :=

    /tmp/tmp2rr4qo2l_test.go:24:12: undefined: sum_square

    /tmp/tmp2rr4qo2l_test.go:26:12: cannot use sum (variable of type float64) as type
    int in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075058
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    sum := 0.0\n    for _, v := range\
    \ lst {\n        sum += v * v\n    }\n    return int(math.Ceil(float64(sum)))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpartpca_f_test.go:27:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075058
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var n int = 0\n    sum := 0.0\n\
    \    for _, element := range lst {\n        sum += element\n        n += int(math.Ceil(float64(element)))\n\
    \    }\n    return sum * sum / n\n}\n\nfunc TestSum_Squares(t *testing.T) {\n\
    \  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}),\
    \ expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected:\
    \ 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n\
    \     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual:\
    \ candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual:\
    \ candidate([]float64{10000.0, 10000.0}), expected: 200000000 },\n     { actual:\
    \ candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4,\
    \ 17.9, 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n\
    \     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmph4risgcx_test.go:27:18: undefined: math

    /tmp/tmph4risgcx_test.go:29:12: invalid operation: sum * sum / n (mismatched types
    float64 and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075058
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    sum_ := 0.0\n    for _, val :=\
    \ range lst {\n        sum_ += val*val\n    }\n    return int(math.Ceil(sum_))\
    \ + sum_\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n\
    \     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n  \
    \   { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptbq1uqlo_test.go:27:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075058
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    sum_squares_var := 0.0\n    for\
    \ _, value := range lst {\n        sum_squares_var += math.Pow(value, 2.0)\n \
    \   }\n    return int(math.Ceil(sum_squares_var))\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0,\
    \ 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}),\
    \ expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected:\
    \ 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected:\
    \ 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected: 200000000\
    \ },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n \
    \    { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected: 1086 },\n\
    \     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0}),\
    \ expected: 1 },\n     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpe7nnntmq_test.go:25:28: undefined: math

    /tmp/tmpe7nnntmq_test.go:27:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075058
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    if len(lst) == 0 {\n        return\
    \ 0\n    }\n    summ := 0\n    for _, n := range lst {\n        summ += n * n\n\
    \    }\n    return int(math.Ceil(float64(summ) / float64(len(lst))))\n}\nfunc\
    \ TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 3.0, 5.0, 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2,\
    \ 0.0}), expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}),\
    \ expected: 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}),\
    \ expected: 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected:\
    \ 200000000 },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected:\
    \ 75 },\n     { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected:\
    \ 1086 },\n     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{-1.0}), expected: 1 },\n     { actual: candidate([]float64{-1.0,\
    \ 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmhjr_ms7_test.go:28:9: invalid operation: summ += n * n (mismatched types
    int and float64)

    /tmp/tmpmhjr_ms7_test.go:30:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075058
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var sum, square, n int\n    n,\
    \ sum = 1, 0\n    for _, ele := range lst {\n        square = ele * ele\n    \
    \    sum += square\n        n++\n        if n == 100 {\n            sum += sum\
    \ / n\n            n = 1\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0,\
    \ 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}),\
    \ expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected:\
    \ 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected:\
    \ 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected: 200000000\
    \ },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n \
    \    { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected: 1086 },\n\
    \     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0}),\
    \ expected: 1 },\n     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgtzq7ds4_test.go:26:18: cannot use ele * ele (value of type float64) as
    type int in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075058
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var total int\n    var max int\n\
    \    for _, x := range lst {\n        if x != 0 {\n            total += int(math.Sqrt(float64(x)))\n\
    \            if total > max {\n                max = total\n            }\n  \
    \      }\n    }\n    return max\n}\n\nfunc TestSum_Squares(t *testing.T) {\n \
    \ candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}),\
    \ expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected:\
    \ 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n\
    \     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual:\
    \ candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual:\
    \ candidate([]float64{10000.0, 10000.0}), expected: 200000000 },\n     { actual:\
    \ candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4,\
    \ 17.9, 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n\
    \     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb_qo3m0x_test.go:27:26: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075059
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    sumSquares := 0\n    for _, v\
    \ := range lst {\n        sumSquares += v*v\n    }\n    return int(math.Ceil(sumSquares))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplqlybcto_test.go:25:9: invalid operation: sumSquares += v * v (mismatched
    types int and float64)

    /tmp/tmplqlybcto_test.go:27:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075059
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    // Write your code here.\n  \
    \  squares := 0\n    for _, num := range lst {\n        squares += num * num\n\
    \    }\n    return int(math.Ceil(squares))\n}\n\nfunc TestSum_Squares(t *testing.T)\
    \ {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}),\
    \ expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected:\
    \ 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n\
    \     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual:\
    \ candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual:\
    \ candidate([]float64{10000.0, 10000.0}), expected: 200000000 },\n     { actual:\
    \ candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4,\
    \ 17.9, 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n\
    \     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqy1nf0m6_test.go:26:9: invalid operation: squares += num * num (mismatched
    types int and float64)

    /tmp/tmpqy1nf0m6_test.go:28:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075059
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    result := 0\n    for _, v :=\
    \ range lst {\n        result += v*v\n    }\n    return int(math.Ceil(float64(result)))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz80ipo2k_test.go:25:9: invalid operation: result += v * v (mismatched
    types int and float64)

    /tmp/tmpz80ipo2k_test.go:27:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075060
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var sum_sq int = 0\n    for _,\
    \ v := range lst {\n        sum_sq += v * v\n    }\n    return sum_sq\n}\n\nfunc\
    \ TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 3.0, 5.0, 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2,\
    \ 0.0}), expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}),\
    \ expected: 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}),\
    \ expected: 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected:\
    \ 200000000 },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected:\
    \ 75 },\n     { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected:\
    \ 1086 },\n     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{-1.0}), expected: 1 },\n     { actual: candidate([]float64{-1.0,\
    \ 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvdor7ihj_test.go:25:9: invalid operation: sum_sq += v * v (mismatched
    types int and float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075060
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    fmt.Println(\"Inside sum_squares\
    \ function\")\n    if len(lst) == 0 {\n        fmt.Println(\"lst = \", lst)\n\
    \        return -1\n    }\n\n    var total float64 = 0\n    for _, element :=\
    \ range lst {\n        total += element*element\n    }\n    return int(math.Ceil(total))\n\
    }\n</code>\n<|/ a tags=go,algorithm |>\n<| a |>\nThis one is without loops, as\
    \ per comment by OP:\n\nI was thinking about this one, but I was wondering if\
    \ there was a way to do the problem without using loops.\n\nThis is how I solved\
    \ this without loops. I created a function which takes 1 argument, a list of numbers.\n\
    <code>\npackage main\n\nimport (\n    \"fmt\"\n    \"math\"\n)\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0,\
    \ 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}),\
    \ expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected:\
    \ 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected:\
    \ 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected: 200000000\
    \ },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n \
    \    { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected: 1086 },\n\
    \     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0}),\
    \ expected: 1 },\n     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp7ydsr9hd_test.go:35:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075059
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    // init variables\n    var sum\
    \ = 0\n    var sq = 0\n    for _, v := range lst {\n        sum += v\n       \
    \ sq += v*v\n    }\n    return int(math.Ceil(sq))\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0,\
    \ 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}),\
    \ expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected:\
    \ 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected:\
    \ 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected: 200000000\
    \ },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n \
    \    { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected: 1086 },\n\
    \     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0}),\
    \ expected: 1 },\n     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcw11b30t_test.go:27:9: invalid operation: sum += v (mismatched types int
    and float64)

    /tmp/tmpcw11b30t_test.go:28:9: invalid operation: sq += v * v (mismatched types
    int and float64)

    /tmp/tmpcw11b30t_test.go:30:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075060
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    if len(lst) <= 0 {\n        return\
    \ 0\n    }\n    ret := 0\n    for _, v := range lst {\n        fmt.Println(v)\n\
    \        fmt.Println(int(math.Ceil(v)))\n        ret += int(math.Ceil(v))*(int(math.Ceil(v))*v\
    \ + math.Ceil(v))\n    }\n    return ret\n}\n\nfunc TestSum_Squares(t *testing.T)\
    \ {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}),\
    \ expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected:\
    \ 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n\
    \     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual:\
    \ candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual:\
    \ candidate([]float64{10000.0, 10000.0}), expected: 200000000 },\n     { actual:\
    \ candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4,\
    \ 17.9, 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n\
    \     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmuomhzfs_test.go:29:25: undefined: math

    /tmp/tmpmuomhzfs_test.go:30:20: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075060
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var sum float64\n\n    for _,\
    \ v := range lst {\n        sum += v * v\n    }\n    return int(math.Ceil(sum))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3skcvkgz_test.go:28:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075060
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var sum float64 = 0\n    for\
    \ _, num := range lst {\n        sum += num * num\n    }\n    return int(math.Ceil(sum)\
    \ + 0.5) // round up\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate :=\
    \ sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}),\
    \ expected: 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84\
    \ },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n  \
    \   { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual:\
    \ candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual:\
    \ candidate([]float64{10000.0, 10000.0}), expected: 200000000 },\n     { actual:\
    \ candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4,\
    \ 17.9, 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n\
    \     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0fa9uaq4_test.go:27:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075060
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var sumSquares int = 0\n    for\
    \ _, num := range lst {\n        sumSquares += num * num\n    }\n    return int(math.Ceil(float64(sumSquares)))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpego8ru6s_test.go:25:9: invalid operation: sumSquares += num * num (mismatched
    types int and float64)

    /tmp/tmpego8ru6s_test.go:27:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075060
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    // Write your code here.\n  \
    \  var sum int = 0\n    for _, v := range lst {\n        sum += int(math.Ceil(v\
    \ * v))\n    }\n    return sum\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=go |>\n\
    I prefer this approach using map and reduce functions.\n<code>\npackage main\n\
    \nimport \"fmt\"\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n\
    \     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n  \
    \   { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpawca8x8v_test.go:30:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075060
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    if len(lst) == 0 {\n        return\
    \ 0\n    }\n    return sum_squares_test.sum_squares(lst)\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0,\
    \ 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}),\
    \ expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected:\
    \ 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected:\
    \ 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected: 200000000\
    \ },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n \
    \    { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected: 1086 },\n\
    \     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0}),\
    \ expected: 1 },\n     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6pcinlv__test.go:26:12: undefined: sum_squares_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075060
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    m := make(map[float64]int, len(lst))\n\
    \    for _, v := range lst {\n        m[v] = m[math.Ceil(v)] + 1\n    }\n    sum\
    \ := 0\n    for _, v := range m {\n        sum += v * v\n    }\n    return sum\n\
    }\n</code>\n<|/ a tags=go |>\n<| a tags=go |>\nIf you don't want a map, you can\
    \ do it with a reduce, which will avoid the extra memory allocation you're going\
    \ to do with a map:\n<code>\npackage main\n\nimport \"fmt\"\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0,\
    \ 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}),\
    \ expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected:\
    \ 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected:\
    \ 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected: 200000000\
    \ },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n \
    \    { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected: 1086 },\n\
    \     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0}),\
    \ expected: 1 },\n     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp0wzj8hut_test.go:33:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075060
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    sum_squares := 0.0\n    for _,\
    \ v := range lst {\n        sum_squares += v*v\n    }\n    return int(math.Ceil(sum_squares))\n\
    }\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7v_dxxql_test.go:27:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    // Write your code here\n   \
    \ x := 0\n    y := 0\n    for _, v := range lst {\n        if v > 0 { // only\
    \ positive value can be square\n            y *= v\n        }\n        else {\n\
    \            x *= v\n        }\n    }\n    return x + y\n}\n</code>\n<|/ a dscore=0\
    \ tags=go |>\n<| a tags=go dscore=0 |>\n<code>\npackage main\n\nimport \"fmt\"\
    \n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpw__r4cme_test.go:30:9: expected statement, found ''else''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075060
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var sum_squares int = 0\n   \
    \ for _, number := range lst {\n        sum_squares += (number * number)\n   \
    \ }\n\n    return sum_squares\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate\
    \ := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}),\
    \ expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected:\
    \ 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n\
    \     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual:\
    \ candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual:\
    \ candidate([]float64{10000.0, 10000.0}), expected: 200000000 },\n     { actual:\
    \ candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4,\
    \ 17.9, 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n\
    \     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb5mno3t0_test.go:25:9: invalid operation: sum_squares += (number * number)
    (mismatched types int and float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075061
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n    for _, v :=\
    \ range lst {\n        sum += v * v\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0,\
    \ 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}),\
    \ expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected:\
    \ 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected:\
    \ 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected: 200000000\
    \ },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n \
    \    { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected: 1086 },\n\
    \     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0}),\
    \ expected: 1 },\n     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpick3oavs_test.go:25:9: invalid operation: sum += v * v (mismatched types
    int and float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074985
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var sumSquares = 0.0\n    var\
    \ sum float64\n    for _, elem := range lst {\n        sum += elem\n        sumSquares\
    \ += elem*elem\n    }\n    return int(math.Ceil(sumSquares))\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0,\
    \ 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}),\
    \ expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected:\
    \ 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected:\
    \ 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected: 200000000\
    \ },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n \
    \    { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected: 1086 },\n\
    \     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0}),\
    \ expected: 1 },\n     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpt2az0ixv_test.go:29:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075060
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var result float64\n    for _,\
    \ v := range lst {\n        result = result + v*v\n    }\n    return int(math.Ceil(result))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyou58wic_test.go:27:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075061
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    if len(lst) < 1 {\n        return\
    \ -1\n    }\n    var result int = 0\n    var square float64\n    for _, element\
    \ := range lst {\n        square = element*element\n        result += square\n\
    \    }\n    return result\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate\
    \ := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}),\
    \ expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected:\
    \ 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n\
    \     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual:\
    \ candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual:\
    \ candidate([]float64{10000.0, 10000.0}), expected: 200000000 },\n     { actual:\
    \ candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4,\
    \ 17.9, 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n\
    \     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfzmh5kh3_test.go:30:9: invalid operation: result += square (mismatched
    types int and float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075061
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var sum_squares int = 0\n   \
    \ for _,val := range lst{\n        sum_squares += int(math.Sqrt(float64(val)))\n\
    \    }\n    return sum_squares\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate\
    \ := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}),\
    \ expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected:\
    \ 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n\
    \     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual:\
    \ candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual:\
    \ candidate([]float64{10000.0, 10000.0}), expected: 200000000 },\n     { actual:\
    \ candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4,\
    \ 17.9, 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n\
    \     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcd3873g6_test.go:25:28: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075061
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    result := 0\n    for _, number\
    \ := range lst {\n        result = result + (number*number)\n    }\n    return\
    \ int(result)\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n\
    \     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n  \
    \   { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2a1wsm3h_test.go:25:18: invalid operation: result + (number * number)
    (mismatched types int and float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075061
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    if len(lst) < 2 {\n        return\
    \ 0\n    }\n    sum := 0\n    for _, value := range lst {\n        sum += value\
    \ * value\n    }\n    sqrt := math.Ceil(math.Sqrt(sum))\n    return int(math.Round(sqrt))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwlbra6sg_test.go:28:9: invalid operation: sum += value * value (mismatched
    types int and float64)

    /tmp/tmpwlbra6sg_test.go:30:13: undefined: math

    /tmp/tmpwlbra6sg_test.go:31:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075061
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    r := 0\n    for _, v := range\
    \ lst {\n        r = r + math.Pow(v, 2)\n    }\n    return r\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0,\
    \ 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}),\
    \ expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected:\
    \ 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected:\
    \ 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected: 200000000\
    \ },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n \
    \    { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected: 1086 },\n\
    \     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0}),\
    \ expected: 1 },\n     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzjdalv50_test.go:25:17: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075061
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    summ := 0.0\n    for _, x :=\
    \ range lst {\n        summ += x * x\n    }\n    return int(math.Ceil(summ/2))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3v98bt0v_test.go:27:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075061
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n    var sum_squares\
    \ int\n    for _, item := range lst {\n        sum += item\n        sum_squares\
    \ += item*item\n    }\n    return int(sum_squares+sum)\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0,\
    \ 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}),\
    \ expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected:\
    \ 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected:\
    \ 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected: 200000000\
    \ },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n \
    \    { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected: 1086 },\n\
    \     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0}),\
    \ expected: 1 },\n     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmply0414w1_test.go:26:9: invalid operation: sum += item (mismatched types
    int and float64)

    /tmp/tmply0414w1_test.go:27:9: invalid operation: sum_squares += item * item (mismatched
    types int and float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075061
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    sum := 0\n    for _, v := range\
    \ lst {\n        sum += v*v\n    }\n    return int(math.Ceil(sum))\n}\n\nfunc\
    \ TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 3.0, 5.0, 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2,\
    \ 0.0}), expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}),\
    \ expected: 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}),\
    \ expected: 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected:\
    \ 200000000 },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected:\
    \ 75 },\n     { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected:\
    \ 1086 },\n     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{-1.0}), expected: 1 },\n     { actual: candidate([]float64{-1.0,\
    \ 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgwnwixfy_test.go:25:9: invalid operation: sum += v * v (mismatched types
    int and float64)

    /tmp/tmpgwnwixfy_test.go:27:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074915
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    // Write code here\n    sum :=\
    \ 0.0\n    for _, v := range lst {\n        sum += v * v\n    }\n    return int(math.Ceil(sum))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb2zav9gu_test.go:28:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075061
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    if len(lst) <= 0 {\n        return\
    \ 0\n    }\n\n    // Calculate the square of each element\n    squares := make([]float64,\
    \ len(lst))\n    for index, number := range lst {\n        squares[index] = number\
    \ * number\n    }\n\n    // Round each element to the upper int(Ceiling) first\n\
    \    rounded_squares := make([]float64, len(squares))\n    for i, number := range\
    \ squares {\n        rounded_squares[i] = float64(number) + 0.5\n    }\n\n   \
    \ // Compute the sum of the rounded squares.\n    // If there are several solutions,\
    \ return the smallest one.\n    sum := 0\n    for _, number := range rounded_squares\
    \ {\n        sum += number\n    }\n\n    return sum\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0,\
    \ 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}),\
    \ expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected:\
    \ 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected:\
    \ 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected: 200000000\
    \ },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n \
    \    { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected: 1086 },\n\
    \     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0}),\
    \ expected: 1 },\n     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbaizjx6o_test.go:43:9: invalid operation: sum += number (mismatched types
    int and float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075062
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    sum := 0.0\n    for _, v := range\
    \ lst {\n        sum += math.Pow(v, 2)\n    }\n    return int(math.Ceil(float64(sum)))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6box7rpa_test.go:25:16: undefined: math

    /tmp/tmp6box7rpa_test.go:27:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075062
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var sum = 0\n    for _, element\
    \ := range lst {\n        sum += element*element\n    }\n    return sum\n}\nfunc\
    \ TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 3.0, 5.0, 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2,\
    \ 0.0}), expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}),\
    \ expected: 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}),\
    \ expected: 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected:\
    \ 200000000 },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected:\
    \ 75 },\n     { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected:\
    \ 1086 },\n     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{-1.0}), expected: 1 },\n     { actual: candidate([]float64{-1.0,\
    \ 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbu_mymm1_test.go:25:9: invalid operation: sum += element * element (mismatched
    types int and float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075062
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    for _, num := range lst {\n \
    \       num := math.Ceil(num)\n    }\n    return 0\n}\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0,\
    \ 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}),\
    \ expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected:\
    \ 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected:\
    \ 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected: 200000000\
    \ },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n \
    \    { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected: 1086 },\n\
    \     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0}),\
    \ expected: 1 },\n     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgwa7lzv3_test.go:24:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075062
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var result int\n    for _, x\
    \ := range lst {\n        result += x * x\n    }\n    if result < 0 {\n      \
    \  return -1\n    }\n    return result\n}\n\nfunc TestSum_Squares(t *testing.T)\
    \ {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}),\
    \ expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected:\
    \ 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n\
    \     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual:\
    \ candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual:\
    \ candidate([]float64{10000.0, 10000.0}), expected: 200000000 },\n     { actual:\
    \ candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4,\
    \ 17.9, 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n\
    \     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqu_3p_s__test.go:25:9: invalid operation: result += x * x (mismatched
    types int and float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075062
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var total int = 0\n\n    for\
    \ _, v := range lst {\n        total += v * v\n    }\n\n    return total\n}\n\n\
    func TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpt_xesulp_test.go:26:9: invalid operation: total += v * v (mismatched types
    int and float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075062
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    return sum_squaresHelper(lst)\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl6fpzl96_test.go:23:12: undefined: sum_squaresHelper

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075062
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    // write your code here\n   \
    \ sum_squared := 0\n    for i := range lst {\n        sum := math.Pow(lst[i],\
    \ 2)\n        sum_squared += sum\n    }\n    return int(math.Ceil(sum_squared))\n\
    }\n</code>\n<|/ a |>\n<| a dscore=0 |>\nYou can use following code -\n<code>\n\
    package main\n\nimport (\n    \"fmt\"\n    \"math\"\n)\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0,\
    \ 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}),\
    \ expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected:\
    \ 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected:\
    \ 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected: 200000000\
    \ },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n \
    \    { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected: 1086 },\n\
    \     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0}),\
    \ expected: 1 },\n     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp87rvrhc6_test.go:31:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075062
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    for _, v := range lst {\n   \
    \     v := int(math.Ceil(float64(v)))\n        fmt.Println(v)\n    }\n    return\
    \ 0\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n\
    \     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n  \
    \   { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdqc1a026_test.go:24:18: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075062
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    ans := 0\n    for _, v := range\
    \ lst {\n        ans += v*v\n    }\n    return int(math.Ceil(ans) / 2)\n}\n\n\
    func TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk9l2m9sj_test.go:25:9: invalid operation: ans += v * v (mismatched types
    int and float64)

    /tmp/tmpk9l2m9sj_test.go:27:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075062
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var sum int = 0\n    for _, v\
    \ := range lst {\n        sum += v*v\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0,\
    \ 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}),\
    \ expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected:\
    \ 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected:\
    \ 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected: 200000000\
    \ },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n \
    \    { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected: 1086 },\n\
    \     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0}),\
    \ expected: 1 },\n     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa_ntof2l_test.go:25:9: invalid operation: sum += v * v (mismatched types
    int and float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074915
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    sum := 0.0\n    for _, n := range\
    \ lst {\n        sum += n * n\n    }\n    return int(math.Ceil(sum + 0.0))\n}\n\
    \nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsolomfzi_test.go:27:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075062
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    if lst == nil || len(lst) ==\
    \ 0 {\n        return 0\n    }\n    sum := 0.0\n    for _, v := range lst {\n\
    \        sum += (round(v) + 0.5)*(round(v) + 0.5)\n    }\n    return int(round(sum))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnr8ctej1_test.go:28:17: undefined: round

    /tmp/tmpnr8ctej1_test.go:30:16: undefined: round

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075063
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    sumSqrs := 0.0\n    var x float64\n\
    \    var y float64\n    for _, val := range lst {\n        x = val\n        y\
    \ = x * x\n        sumSqrs += y\n    }\n    return int(sumSqrs)\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0,\
    \ 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}),\
    \ expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected:\
    \ 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected:\
    \ 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected: 200000000\
    \ },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n \
    \    { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected: 1086 },\n\
    \     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0}),\
    \ expected: 1 },\n     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpujpdbtaz_test.go:58: expected '%!s(int=29)', got '%!s(int=19)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpujpdbtaz_test.go:58:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpujpdbtaz_test.go:58: expected '%!s(int=75)', got '%!s(int=62)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpujpdbtaz_test.go:58:\
    \ expected '%!s(int=1086)', got '%!s(int=1075)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075063
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    sum := 0.0\n    len := len(lst)\n\
    \    for i := 0; i < len; i++ {\n        sum += lst[i] * lst[i]\n    }\n    return\
    \ int(fmt.Sprintf(\"%.2f\", sum))\n}\n</code>\n<|/ a dscore=0 tags=go,list,arrays\
    \ |>\n<| a |>\nHere's a function that does what you want, in O(1):\n<code>\npackage\
    \ main\n\nimport \"fmt\"\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate\
    \ := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}),\
    \ expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected:\
    \ 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n\
    \     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual:\
    \ candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual:\
    \ candidate([]float64{10000.0, 10000.0}), expected: 200000000 },\n     { actual:\
    \ candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4,\
    \ 17.9, 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n\
    \     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1jhbqtjo_test.go:30:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075062
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var result float64 = 0\n    for\
    \ _, value := range lst {\n        result += (value * value)\n    }\n    return\
    \ int(result)\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=go |>\n<code>\npackage\
    \ sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0,\
    \ 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}),\
    \ expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected:\
    \ 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected:\
    \ 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected: 200000000\
    \ },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n \
    \    { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected: 1086 },\n\
    \     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0}),\
    \ expected: 1 },\n     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwss2puwo_test.go:29:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075062
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    sum := 0\n    for _, v := range\
    \ lst {\n        sum += v * v\n    }\n    return int(sum)\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0,\
    \ 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}),\
    \ expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected:\
    \ 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected:\
    \ 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected: 200000000\
    \ },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n \
    \    { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected: 1086 },\n\
    \     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0}),\
    \ expected: 1 },\n     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_lyeffwq_test.go:25:9: invalid operation: sum += v * v (mismatched types
    int and float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075063
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    sum := 0.0\n    for _, v := range\
    \ lst {\n        sum += v * v\n    }\n    return int(math.Ceil(sum * float64(len(lst)))\
    \ + 0.5)\n}\n</code>\n<|/ a tags=go |>\n<| a |>\nAs far as I know, there is no\
    \ \"native\" way to do this. The following is your best bet for doing it:\n<code>\n\
    package main\n\nimport (\n    \"fmt\"\n    \"math\"\n)\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0,\
    \ 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}),\
    \ expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected:\
    \ 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected:\
    \ 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected: 200000000\
    \ },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n \
    \    { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected: 1086 },\n\
    \     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0}),\
    \ expected: 1 },\n     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpoq3vg_1__test.go:29:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075062
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var result float64 = 0\n    for\
    \ _, v := range lst {\n        result += (float64(v * v))\n    }\n    return int(math.Ceil(result))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpf6yqtwhh_test.go:27:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075063
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    result := 0\n    for _, v :=\
    \ range lst {\n        result += v*v\n    }\n    return result\n}\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0,\
    \ 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}),\
    \ expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected:\
    \ 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected:\
    \ 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected: 200000000\
    \ },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n \
    \    { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected: 1086 },\n\
    \     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0}),\
    \ expected: 1 },\n     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr5yjtbm3_test.go:25:9: invalid operation: result += v * v (mismatched
    types int and float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075063
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var sum float64 = 0.0\n    for\
    \ _, number := range lst {\n        sum += number * number\n    }\n    return\
    \ int(math.Ceil(sum))\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate\
    \ := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}),\
    \ expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected:\
    \ 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n\
    \     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual:\
    \ candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual:\
    \ candidate([]float64{10000.0, 10000.0}), expected: 200000000 },\n     { actual:\
    \ candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4,\
    \ 17.9, 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n\
    \     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7gjtxgr2_test.go:27:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075063
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var sum float64 = 0\n    for\
    \ _, v := range lst {\n        sum += (float64(v) * v)\n    }\n    return int(math.Ceil(sum\
    \ + 0.5))\n}\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n\
    \     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n  \
    \   { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphopqzclc_test.go:27:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075063
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    fmt.Println(lst)\n    var sum\
    \ float64\n    for i := 0; i < len(lst); i++ {\n        sum += lst[i] * lst[i]\n\
    \    }\n    fmt.Println(sum)\n    return int(math.Ceil(sum))\n}\n</code>\n<|/\
    \ a dscore=0 tags=arrays,go,slice |>\n<| a |>\n<code>\npackage main\n\nimport\
    \ (\n    \"fmt\"\n    \"math\"\n)\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate\
    \ := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}),\
    \ expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected:\
    \ 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n\
    \     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual:\
    \ candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual:\
    \ candidate([]float64{10000.0, 10000.0}), expected: 200000000 },\n     { actual:\
    \ candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4,\
    \ 17.9, 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n\
    \     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp48girq7o_test.go:31:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075062
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    sum := 0.0\n    for _, v := range\
    \ lst {\n        sum += math.Pow(v, 2)\n    }\n    return int(math.Ceil(float64(sum)))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6box7rpa_test.go:25:16: undefined: math

    /tmp/tmp6box7rpa_test.go:27:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075062
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var sum_of_squares = 0\n    for\
    \ _, number := range lst {\n        sum_of_squares += number * number\n    }\n\
    \    return int(math.Ceil(float64(sum_of_squares)))\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0,\
    \ 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}),\
    \ expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected:\
    \ 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected:\
    \ 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected: 200000000\
    \ },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n \
    \    { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected: 1086 },\n\
    \     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0}),\
    \ expected: 1 },\n     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvcb6v29q_test.go:25:9: invalid operation: sum_of_squares += number * number
    (mismatched types int and float64)

    /tmp/tmpvcb6v29q_test.go:27:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075063
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    sum := 0.0\n    for _, x := range\
    \ lst {\n        sum += x\n    }\n    return int(math.Ceil(sum * sum))\n}\n\n\
    func TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdc47cksp_test.go:27:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075064
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    // write your code in here\n\
    \    \n    return 0 \n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate :=\
    \ sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}),\
    \ expected: 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84\
    \ },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n  \
    \   { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual:\
    \ candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual:\
    \ candidate([]float64{10000.0, 10000.0}), expected: 200000000 },\n     { actual:\
    \ candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4,\
    \ 17.9, 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n\
    \     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmp_opwdo9i_test.go:52: expected '%!s(int=14)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmp_opwdo9i_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__2\
    \ (0.00s)\n        tmp_opwdo9i_test.go:52: expected '%!s(int=84)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmp_opwdo9i_test.go:52:\
    \ expected '%!s(int=29)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4\
    \ (0.00s)\n        tmp_opwdo9i_test.go:52: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__5 (0.00s)\n        tmp_opwdo9i_test.go:52:\
    \ expected '%!s(int=10230)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmp_opwdo9i_test.go:52: expected '%!s(int=200000000)', got\
    \ '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmp_opwdo9i_test.go:52:\
    \ expected '%!s(int=75)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmp_opwdo9i_test.go:52: expected '%!s(int=1086)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmp_opwdo9i_test.go:52:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__11\
    \ (0.00s)\n        tmp_opwdo9i_test.go:52: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075064
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    if len(lst) == 0 {\n        return\
    \ 0\n    }\n    sum_num := 0.0\n    for _, v := range lst {\n        sum_num +=\
    \ float64(v) * float64(v)\n    }\n    return int(math.Ceil(sum_num))\n}\n\nfunc\
    \ TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 3.0, 5.0, 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2,\
    \ 0.0}), expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}),\
    \ expected: 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}),\
    \ expected: 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected:\
    \ 200000000 },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected:\
    \ 75 },\n     { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected:\
    \ 1086 },\n     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{-1.0}), expected: 1 },\n     { actual: candidate([]float64{-1.0,\
    \ 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp32cge_36_test.go:30:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075064
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var result float64 = 0\n    var\
    \ sum float64 = 0\n    \n    for _, n := range lst {\n        sum += n*n\n   \
    \ }\n\n    if sum == 0 {\n        return 0\n    }\n\n    for _, n := range lst\
    \ {\n        result = math.Ceil(math.Sqrt(sum)+n)\n    }\n\n    return result\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfrxfm5u3_test.go:35:18: undefined: math

    /tmp/tmpfrxfm5u3_test.go:38:12: cannot use result (variable of type float64) as
    type int in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075064
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var total = 0\n    var sq float64\n\
    \n    for _, val := range lst {\n        total += int(math.Ceil(val*10))\n   \
    \     sq += val*val\n    }\n    return int(math.Sqrt(sq))\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0,\
    \ 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}),\
    \ expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected:\
    \ 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected:\
    \ 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected: 200000000\
    \ },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n \
    \    { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected: 1086 },\n\
    \     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0}),\
    \ expected: 1 },\n     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphc2d40yl_test.go:27:22: undefined: math

    /tmp/tmphc2d40yl_test.go:30:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075064
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    return sum_squaresHelper(lst)\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl6fpzl96_test.go:23:12: undefined: sum_squaresHelper

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075062
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    squares := make([]float64, 0,\
    \ len(lst))\n    for _, v := range lst {\n        squares = append(squares, v*v)\n\
    \    }\n    squared := make([]float64, 0, len(squares))\n    for _, v := range\
    \ squares {\n        squared = append(squared, math.Ceil(v))\n    }\n    return\
    \ sumSquares(squared, 0, len(squared))\n}\n\nfunc TestSum_Squares(t *testing.T)\
    \ {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}),\
    \ expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected:\
    \ 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n\
    \     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual:\
    \ candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual:\
    \ candidate([]float64{10000.0, 10000.0}), expected: 200000000 },\n     { actual:\
    \ candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4,\
    \ 17.9, 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n\
    \     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7fs0v1bp_test.go:29:35: undefined: math

    /tmp/tmp7fs0v1bp_test.go:31:12: undefined: sumSquares

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075064
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var sum float64 = 0\n    for\
    \ _, i := range lst {\n        sum += i * i\n    }\n    return int(math.Ceil(sum\
    \ + 1))\n}\n</cell>\n<text>\nExercise\nWrite a function to return the square of\
    \ a given number.\n\n\n</text>\n<cell>\nfunc TestSum_Squares(t *testing.T) {\n\
    \  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}),\
    \ expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected:\
    \ 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n\
    \     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual:\
    \ candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual:\
    \ candidate([]float64{10000.0, 10000.0}), expected: 200000000 },\n     { actual:\
    \ candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4,\
    \ 17.9, 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n\
    \     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqjaalzua_test.go:29:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075063
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    sumSquares := 0\n    for _, item\
    \ := range lst {\n        fmt.Print(item, \" \")\n        sumSquares += item *\
    \ item\n    }\n    return int(math.Ceil(sumSquares))\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0,\
    \ 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}),\
    \ expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected:\
    \ 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected:\
    \ 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected: 200000000\
    \ },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n \
    \    { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected: 1086 },\n\
    \     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0}),\
    \ expected: 1 },\n     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0lnfk3_3_test.go:26:9: invalid operation: sumSquares += item * item (mismatched
    types int and float64)

    /tmp/tmp0lnfk3_3_test.go:28:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075064
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var sum_squares2 float64 = 0\n\
    \    var sum_squares_sum int = 0\n    for _, val := range lst {\n        sum_squares2\
    \ += val\n        sum_squares_sum += int(math.Ceil(sum_squares2 * sum_squares2))\n\
    \    }\n    return int(sum_squares_sum)\n}\nfunc TestSum_Squares(t *testing.T)\
    \ {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}),\
    \ expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected:\
    \ 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n\
    \     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual:\
    \ candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual:\
    \ candidate([]float64{10000.0, 10000.0}), expected: 200000000 },\n     { actual:\
    \ candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4,\
    \ 17.9, 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n\
    \     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk2bkvqfl_test.go:27:32: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075064
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    // code here\n    if len(lst)\
    \ == 0 {\n        return 0\n    }\n    i := 0\n    sum := 0.0\n    for _, v :=\
    \ range lst {\n        if v > 0 {\n            sum += v * v\n        }\n     \
    \   i++\n    }\n    if i < 2 {\n        return sum\n    }\n    if i == 2 {\n \
    \       sum += lst[0] * lst[0]\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0,\
    \ 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}),\
    \ expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected:\
    \ 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected:\
    \ 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected: 200000000\
    \ },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n \
    \    { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected: 1086 },\n\
    \     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0}),\
    \ expected: 1 },\n     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_iunf163_test.go:36:16: cannot use sum (variable of type float64) as type
    int in return statement

    /tmp/tmp_iunf163_test.go:41:12: cannot use sum (variable of type float64) as type
    int in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075064
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    // Write your code here.\n  \
    \  s := 0\n    for _, v := range lst {\n        s += v*v\n    }\n    return int(math.Ceil(float64(s)))\
    \ // int(math.Ceil(float64(s))) to get round up instead of down\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0,\
    \ 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}),\
    \ expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected:\
    \ 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected:\
    \ 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected: 200000000\
    \ },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n \
    \    { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected: 1086 },\n\
    \     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0}),\
    \ expected: 1 },\n     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcvfr2fm8_test.go:26:9: invalid operation: s += v * v (mismatched types
    int and float64)

    /tmp/tmpcvfr2fm8_test.go:28:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075064
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    if len(lst) == 0 {\n        return\
    \ 0\n    }\n    sum := 0.0\n    for _, f := range lst {\n        sum += int(math.Pow(float64(f),\
    \ 2))\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate\
    \ := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}),\
    \ expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected:\
    \ 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n\
    \     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual:\
    \ candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual:\
    \ candidate([]float64{10000.0, 10000.0}), expected: 200000000 },\n     { actual:\
    \ candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4,\
    \ 17.9, 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n\
    \     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbd4aa4_l_test.go:28:20: undefined: math

    /tmp/tmpbd4aa4_l_test.go:30:12: cannot use sum (variable of type float64) as type
    int in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075064
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    if len(lst) == 0 {\n        return\
    \ 0\n    }\n    arr := make([]float64, len(lst))\n    copy(arr, lst)\n    for\
    \ i := 0; i < len(arr); i++ {\n        arr[i] = int(math.Ceil(float64(arr[i])))\n\
    \    }\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        sum += arr[i]*arr[i]\n\
    \    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate\
    \ := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}),\
    \ expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected:\
    \ 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n\
    \     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual:\
    \ candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual:\
    \ candidate([]float64{10000.0, 10000.0}), expected: 200000000 },\n     { actual:\
    \ candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4,\
    \ 17.9, 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n\
    \     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2h8g8ge7_test.go:29:22: undefined: math

    /tmp/tmp2h8g8ge7_test.go:33:9: invalid operation: sum += arr[i] * arr[i] (mismatched
    types int and float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075064
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var total int = 0\n    for _,\
    \ v := range lst {\n        total += int(math.Ceil(v*v))\n    }\n    return total\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpaslbf9sb_test.go:25:22: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075064
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var squares int = 0\n    for\
    \ _, item := range lst {\n        squares = squares + item * item\n    }\n   \
    \ return squares\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n\
    \     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n  \
    \   { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6czzy0i6_test.go:25:19: invalid operation: squares + item * item (mismatched
    types int and float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075064
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    size := len(lst)\n    if size\
    \ == 0 {\n        return 0\n    }\n    s := 0\n    for _, d := range lst {\n \
    \       s += d * d\n    }\n    if size > 0 {\n        if s <= 0 {\n          \
    \  return 0\n        }\n        s = math.Ceil(float64(s) / float64(size))\n  \
    \  }\n    return int(s)\n}\nfunc TestSum_Squares(t *testing.T) {\n  candidate\
    \ := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}),\
    \ expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected:\
    \ 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n\
    \     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual:\
    \ candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual:\
    \ candidate([]float64{10000.0, 10000.0}), expected: 200000000 },\n     { actual:\
    \ candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4,\
    \ 17.9, 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n\
    \     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqgsz_nx6_test.go:29:9: invalid operation: s += d * d (mismatched types
    int and float64)

    /tmp/tmpqgsz_nx6_test.go:35:13: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075064
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    total := 0\n    for _, number\
    \ := range lst {\n        fmt.Printf(\"%.1f\\n\", number)\n        total += number\
    \ * number\n    }\n    return int(math.Ceil(total))\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0,\
    \ 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}),\
    \ expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected:\
    \ 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected:\
    \ 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected: 200000000\
    \ },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n \
    \    { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected: 1086 },\n\
    \     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0}),\
    \ expected: 1 },\n     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz7vm6v4__test.go:26:9: invalid operation: total += number * number (mismatched
    types int and float64)

    /tmp/tmpz7vm6v4__test.go:28:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075065
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    sums := make(map[float64]int)\n\
    \    for i, f := range lst {\n        if sums[f] == 0 {\n            sums[f] =\
    \ i\n        }\n    }\n    return sums[lst[len(lst)-1]]\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0,\
    \ 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}),\
    \ expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected:\
    \ 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected:\
    \ 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected: 200000000\
    \ },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n \
    \    { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected: 1086 },\n\
    \     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0}),\
    \ expected: 1 },\n     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmp5506vkw9_test.go:56: expected '%!s(int=14)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmp5506vkw9_test.go:56:\
    \ expected '%!s(int=14)', got '%!s(int=2)'\n    --- FAIL: TestSum_Squares/test_num__2\
    \ (0.00s)\n        tmp5506vkw9_test.go:56: expected '%!s(int=84)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmp5506vkw9_test.go:56:\
    \ expected '%!s(int=29)', got '%!s(int=2)'\n    --- FAIL: TestSum_Squares/test_num__4\
    \ (0.00s)\n        tmp5506vkw9_test.go:56: expected '%!s(int=6)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSum_Squares/test_num__5 (0.00s)\n        tmp5506vkw9_test.go:56:\
    \ expected '%!s(int=10230)', got '%!s(int=3)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmp5506vkw9_test.go:56: expected '%!s(int=200000000)', got\
    \ '%!s(int=1)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmp5506vkw9_test.go:56:\
    \ expected '%!s(int=75)', got '%!s(int=2)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmp5506vkw9_test.go:56: expected '%!s(int=1086)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmp5506vkw9_test.go:56:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075065
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var sum float64 = 0\n    for\
    \ _, f := range lst {\n        sum += f * (f + 1)\n    }\n    return int(math.Ceil(sum\
    \ / float64(len(lst))) * 100)\n}\n</code>\n<|/ a tags=go |>\n<| a |>\nYou can\
    \ use the package math/big.Float\n\n<code>\npackage main\n\nimport (\n    \"fmt\"\
    \n    \"math/big\"\n)\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate :=\
    \ sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}),\
    \ expected: 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84\
    \ },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n  \
    \   { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual:\
    \ candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual:\
    \ candidate([]float64{10000.0, 10000.0}), expected: 200000000 },\n     { actual:\
    \ candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4,\
    \ 17.9, 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n\
    \     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpyacsxfub_test.go:29:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075064
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var sum float64\n    var i int\n\
    \    for i = range lst {\n        sum += lst[i] * lst[i]\n    }\n    return int(math.Ceil(sum\
    \ + 0.1))\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks, but I think your solution\
    \ is way overcomplicated for something that can be solved without loops and without\
    \ recursion.\n<|/ c |>\n<| c |>\nNo, the question is about finding the sum of\
    \ squared numbers in an array where each number has been rounded to the closest\
    \ integer. Since you cannot round every number to the nearest integer, you have\
    \ to round the numbers in order to sum the squares.\n<|/ c |>\n<| c |>\nSorry\
    \ for the misunderstanding, I edited my question to make it clearer.\n<|/ c |>\n\
    <| c |>\nI edited the solution to round the numbers before calculating the sum\
    \ of the squares.\n<|/ c |>\n<| c |>\nIf your solution involves loops then you\
    \ have solved the problem without recursion. How is that possible?\n<|/ c |>\n\
    <| a |>\nFor those who are looking for an algorithm without loops, here it is:\n\
    <code>\ndef square_of_int(n):\n    return n * n\n\ndef sum_of_squares(n):\n  \
    \  \"\"\"\n    >>> sum_of_squares([0.0, 1.0, 2.0])\n    3.0\n    >>> sum_of_squares([0.0,\
    \ 1.4, 2.0])\n    5.8\n    \"\"\"\n    if type(n) is not list:\n        raise\
    \ ValueError('invalid input type')\n    sq = 0\n    for n in n:\n        sq =\
    \ sq + square_of_int(n)\n    return sq\n</code>\nIt uses recursion, although it\
    \ seems that it is not that complicated and therefore does not use any loops.\
    \ In fact, it is quite similar to previous answers except the return statement\
    \ is changed to return sq. Also the input type checking is not included.\n<|/\
    \ a dscore=0 tags=recursion,algorithm,go |>\n<| a tags=recursion,algorithm,go\
    \ |>\nJust for fun I did this in JavaScript - not pretty but gets the job done.\n\
    <code>\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpw0dvbga__test.go:30:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075064
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    // Write your code here.\n  \
    \  sum := 0\n    for _, v := range lst {\n        sum += int(math.Ceil(v * float64(1.0)))\n\
    \    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate\
    \ := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}),\
    \ expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected:\
    \ 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n\
    \     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual:\
    \ candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual:\
    \ candidate([]float64{10000.0, 10000.0}), expected: 200000000 },\n     { actual:\
    \ candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4,\
    \ 17.9, 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n\
    \     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpythlsiri_test.go:26:20: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075065
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    m := 0\n    r := 0.0\n    for\
    \ _, v := range lst {\n        if v > 0 {\n            r += v*v\n            m\
    \ += v\n        }\n    }\n    return int(math.Ceiling(r/float64(m)))\n}\n\nfunc\
    \ TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 3.0, 5.0, 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2,\
    \ 0.0}), expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}),\
    \ expected: 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}),\
    \ expected: 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected:\
    \ 200000000 },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected:\
    \ 75 },\n     { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected:\
    \ 1086 },\n     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{-1.0}), expected: 1 },\n     { actual: candidate([]float64{-1.0,\
    \ 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2x2cdlyp_test.go:28:13: invalid operation: m += v (mismatched types int
    and float64)

    /tmp/tmp2x2cdlyp_test.go:31:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075065
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var sum = 0\n    for _, v :=\
    \ range lst {\n        sum += int(math.Sqrt(v)) \n    }\n    return sum\n}\n\n\
    func TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1rbpcxfe_test.go:25:20: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075065
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var result int = 0\n    for _,\
    \ v := range lst {\n        result += v*v\n    }\n    return int(math.Ceil(float64(result)))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_5y0di0t_test.go:25:9: invalid operation: result += v * v (mismatched
    types int and float64)

    /tmp/tmp_5y0di0t_test.go:27:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075065
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    // write your code in Go\n  \
    \  n := len(lst)\n    if n == 0 {\n        return 0\n    }\n\n    sum := 0.0\n\
    \    var i int\n    for i = 0; i < n; i++ {\n        sum += lst[i] * lst[i]\n\
    \        if i != n-1 {\n            sum += lst[i+1] / float64(n+1)\n        }\n\
    \    }\n    return int(math.Ceil(sum))\n}\n\nfunc TestSum_Squares(t *testing.T)\
    \ {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}),\
    \ expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected:\
    \ 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n\
    \     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual:\
    \ candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual:\
    \ candidate([]float64{10000.0, 10000.0}), expected: 200000000 },\n     { actual:\
    \ candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4,\
    \ 17.9, 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n\
    \     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdkraz0ky_test.go:37:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075065
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    summ := 0.0\n    for _, x :=\
    \ range lst {\n        summ += x * x\n    }\n    return int(math.Ceil(summ))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpajku3cwx_test.go:27:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075066
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    if lst == nil || len(lst) <=\
    \ 0 {\n        return 0\n    }\n\n    sum := 0\n    for _, v := range lst {\n\
    \        sum += v * v\n    }\n\n    return int(math.Ceil(sum + 0.5))\n}\n\nfunc\
    \ TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 3.0, 5.0, 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2,\
    \ 0.0}), expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}),\
    \ expected: 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}),\
    \ expected: 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected:\
    \ 200000000 },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected:\
    \ 75 },\n     { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected:\
    \ 1086 },\n     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{-1.0}), expected: 1 },\n     { actual: candidate([]float64{-1.0,\
    \ 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsisqhf6q_test.go:29:9: invalid operation: sum += v * v (mismatched types
    int and float64)

    /tmp/tmpsisqhf6q_test.go:32:16: undefined: math

    /tmp/tmpsisqhf6q_test.go:32:32: 0.5 (untyped float constant) truncated to int

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075066
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    result := 0\n    for _, number\
    \ := range lst {\n        result += number * number\n    }\n    return result\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp7gnhkl4_test.go:25:9: invalid operation: result += number * number (mismatched
    types int and float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075066
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var i int = 0\n    for _, _ :=\
    \ range lst {\n        i = i + 1\n    }\n    var sum float64 = 0\n    for _, v\
    \ := range lst {\n        sum += v*v\n    }\n    if int(sum+0.5) <= i {\n    \
    \    return sum\n    } else {\n        return i\n    }\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0,\
    \ 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}),\
    \ expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected:\
    \ 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected:\
    \ 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected: 200000000\
    \ },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n \
    \    { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected: 1086 },\n\
    \     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0}),\
    \ expected: 1 },\n     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc7nur8ie_test.go:24:5: no new variables on left side of :=

    /tmp/tmpc7nur8ie_test.go:32:16: cannot use sum (variable of type float64) as type
    int in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075066
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    total := 0.0\n    for _, element\
    \ := range lst {\n        total += math.Pow(element, 2)\n    }\n    return int(math.Ceil(total))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwwl98rkf_test.go:25:18: undefined: math

    /tmp/tmpwwl98rkf_test.go:27:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075066
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    return sum_squaresHelper(lst)\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl6fpzl96_test.go:23:12: undefined: sum_squaresHelper

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075062
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    sum := 0.0\n    for _, v := range\
    \ lst {\n        sum += v * v\n    }\n    return int(math.Ceil(sum))\n}\n\nfunc\
    \ TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 3.0, 5.0, 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2,\
    \ 0.0}), expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}),\
    \ expected: 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}),\
    \ expected: 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected:\
    \ 200000000 },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected:\
    \ 75 },\n     { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected:\
    \ 1086 },\n     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{-1.0}), expected: 1 },\n     { actual: candidate([]float64{-1.0,\
    \ 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcydlf5s__test.go:27:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074915
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    // return 0 when the list is\
    \ empty\n    if len(lst) == 0 {\n        return 0\n    }\n\n    // Sort the list\
    \ in-place (sort is in-place)\n    sort.Float64s(lst)\n\n    // Initialize a counter\n\
    \    sum := 0\n    // Iterate through the list\n    for i, f := range lst {\n\
    \        sum += math.Pow(float64(f), 2)\n    }\n\n    // Return the sum\n    return\
    \ sum\n}\n</code>\n<|/ a tags=go,algorithm dscore=5 |>\n<| c |>\nThanks for the\
    \ detailed explanation, very helpful to me\n<|/ c |>\n<| a dscore=4 |>\nThe answer\
    \ of Burak Serdar is great but if you don't want to use build in sort function,\
    \ you can use this\n<code>\npackage main\n\nimport (\n    \"fmt\"\n    \"math\"\
    \n)\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp4rl_gch1_test.go:41:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075065
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var total int\n    for _, number\
    \ := range lst {\n        total += int(math.Ceil(float64(number)*float64(number)))\n\
    \    }\n    return total\n}\n</code>\n<|/ a tags=go,list |>\n<| c |>\nThank you\
    \ so much! That was really helpful!\n<|/ c |>\n<| c |>\nGood answer. My answer\
    \ was similar. +1 from me.\n<|/ c |>\n<| a dscore=2 |>\nHere's another way:\n\
    <code>\npackage main\n\nimport \"math\"\n\nfunc TestSum_Squares(t *testing.T)\
    \ {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}),\
    \ expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected:\
    \ 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n\
    \     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual:\
    \ candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual:\
    \ candidate([]float64{10000.0, 10000.0}), expected: 200000000 },\n     { actual:\
    \ candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4,\
    \ 17.9, 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n\
    \     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpv_0p4_8j_test.go:29:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075065
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    sum := 0.0\n    for _, v := range\
    \ lst {\n        sum += v*v\n    }\n    return int(math.Ceil(sum))\n}\n\nfunc\
    \ TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 3.0, 5.0, 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2,\
    \ 0.0}), expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}),\
    \ expected: 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}),\
    \ expected: 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected:\
    \ 200000000 },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected:\
    \ 75 },\n     { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected:\
    \ 1086 },\n     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{-1.0}), expected: 1 },\n     { actual: candidate([]float64{-1.0,\
    \ 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx40a18nx_test.go:27:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074915
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    if len(lst) == 0 {\n        return\
    \ -1\n    }\n    sum := 0.0\n    for _, num := range lst {\n        sum += num\
    \ * num\n    }\n    return int(math.Ceil(sum + 0.5))\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0,\
    \ 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}),\
    \ expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected:\
    \ 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected:\
    \ 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected: 200000000\
    \ },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n \
    \    { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected: 1086 },\n\
    \     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0}),\
    \ expected: 1 },\n     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpih9rvq15_test.go:30:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075066
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var squares int = 0\n    for\
    \ _, el := range lst {\n        squares += el*el\n    }\n    return squares\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgh_eoixa_test.go:25:9: invalid operation: squares += el * el (mismatched
    types int and float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075066
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var sum int = 0\n    for _, num\
    \ := range lst {\n        sum += num * num\n    }\n    return sum\n}\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0,\
    \ 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}),\
    \ expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected:\
    \ 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected:\
    \ 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected: 200000000\
    \ },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n \
    \    { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected: 1086 },\n\
    \     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0}),\
    \ expected: 1 },\n     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo5dyvvcu_test.go:25:9: invalid operation: sum += num * num (mismatched
    types int and float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075066
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    // Write your code here.\n  \
    \  total := 0\n    for _, number := range lst {\n        total += int(math.Pow(float64(number),\
    \ 2))\n    }\n    return total\n}\n</code>\n<|/ a tags=go |>\n<| c |>\nI got it.\
    \ I just replaced \"sum_square\" with \"sum_squares\" in func definition and it\
    \ worked.\n<|/ c |>\n<| a tags=go |>\nI made this a lot shorter and just for fun\
    \ because it was homework and I was curious, here it is in one line. :)\n<code>\n\
    package main\n\nimport (\n    \"fmt\"\n)\n\nfunc TestSum_Squares(t *testing.T)\
    \ {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}),\
    \ expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected:\
    \ 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n\
    \     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual:\
    \ candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual:\
    \ candidate([]float64{10000.0, 10000.0}), expected: 200000000 },\n     { actual:\
    \ candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4,\
    \ 17.9, 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n\
    \     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmphin_gf6y_test.go:30:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075066
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    sum_squares := 0.0\n    for _,\
    \ v := range lst {\n        if v == 0 { continue }\n        sum_squares += float64(v)\
    \ * float64(v)\n    }\n    return int(math.Ceil(sum_squares))\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0,\
    \ 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}),\
    \ expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected:\
    \ 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected:\
    \ 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected: 200000000\
    \ },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n \
    \    { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected: 1086 },\n\
    \     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0}),\
    \ expected: 1 },\n     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3lhhm0b7_test.go:28:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075066
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var result int\n\n    for _,\
    \ v := range lst {\n        result = result + v * v\n    }\n\n    return result\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2b8nnu_s_test.go:26:18: invalid operation: result + v * v (mismatched
    types int and float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075066
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var i int = 0\n    var sum float64\n\
    \    for ; i < len(lst); i++ {\n        sum += math.Pow(lst[i], 2)\n    }\n  \
    \  return int(math.Ceil(sum))\n}\n</code>\n<|/ a tags=python,go,algorithm |>\n\
    <| a dscore=0 |>\nHere is another answer to the question, where you can specify\
    \ the type of the list\n<code>\npackage main\n\nimport (\n    \"fmt\"\n    \"\
    math\"\n)\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n\
    \     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n  \
    \   { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpzc4pzvw5_test.go:30:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075066
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var sum_squares int\n    for\
    \ _, val := range lst {\n        sum_squares += val*val\n    }\n    return math.Ceil(sum_squares)\
    \ / 1000\n}\n</code>\n<|/ a tags=go,list dscore=4 |>\n<| c |>\nYou don't need\
    \ to add `1000` to the ceil result. The `ceil` function truncates rather than\
    \ rounding.\n<|/ c |>\n<| c |>\n, you're right. Fixed.\n<|/ c |>\n<| c |>\nI added\
    \ another answer that uses `math.Sqrt(x)` instead of `x * x`. It has some advantages\
    \ over this one, but also some disadvantages.\n<|/ c |>\n<| c |>\nI tested your\
    \ answer against this one's and your answer wins on average (though there are\
    \ some things to consider when comparing the two). I suggest you add your answer\
    \ to the list so that it wins.\n<|/ c |>\n<| c |>\nThis answer is superior to\
    \ other answers here in terms of readability, maintainability and performance\
    \ when compared to others (see my comment on the other answer).\n<|/ c |>\n<|\
    \ a |>\nA little bit of googling reveals that there have been a few attempts to\
    \ implement the algorithm you mentioned in the Go standard library, including\
    \ this one by Krama, which, as far as I can tell, is very similar to yours except\
    \ for one minor detail: the last element of the input slice must be handled differently\
    \ than the others:\n<code>\npackage sum_squares_test\n\nimport (\n    \"math\"\
    \n    \"testing\"\n)\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n\
    \     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n  \
    \   { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_zytet33_test.go:29:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075066
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    // write your code in JavaScript\
    \ (Node.js 8.9.4)\n    // \u6216\u8005 Python (3.7.4)\n    result := 0.0\n   \
    \ for _, v := range lst {\n        result = result + v*v\n    }\n    return int(math.Ceil(result))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpol512c_j_test.go:29:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075066
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    return sum_squares_test.SumSquares(lst)\n\
    }\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb_gbsz1f_test.go:23:12: undefined: sum_squares_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075066
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var sum_squares int = 0\n   \
    \ var last_val float64 = -1 // last element\n    for _, v := range lst {\n   \
    \     if last_val != v {\n            last_val = v\n            sum_squares =\
    \ sum_squares*v + v*v\n        }\n    }\n    return sum_squares\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0,\
    \ 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}),\
    \ expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected:\
    \ 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected:\
    \ 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected: 200000000\
    \ },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n \
    \    { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected: 1086 },\n\
    \     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0}),\
    \ expected: 1 },\n     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq92das01_test.go:28:27: invalid operation: sum_squares * v (mismatched
    types int and float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075066
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    sum_square_total := 0\n    for\
    \ _, number := range lst {\n        sum_square_total += math.Pow(number, 2)\n\
    \    }\n\n    return int(math.Ceil(sum_square_total))\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0,\
    \ 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}),\
    \ expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected:\
    \ 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected:\
    \ 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected: 200000000\
    \ },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n \
    \    { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected: 1086 },\n\
    \     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0}),\
    \ expected: 1 },\n     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyrh_j8n5_test.go:25:29: undefined: math

    /tmp/tmpyrh_j8n5_test.go:28:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075066
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var squares int = 0\n\n    for\
    \ _, val := range lst {\n        squares += val * val\n    }\n\n    return squares\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzr8enbkz_test.go:26:9: invalid operation: squares += val * val (mismatched
    types int and float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075066
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    result := 0\n    for _, value\
    \ := range lst {\n        result += value * value\n    }\n    return int(fmt.Sprintf(\"\
    %.0f\", result))\n}\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n\
    \     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n  \
    \   { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5oghmv1n_test.go:25:9: invalid operation: result += value * value (mismatched
    types int and float64)

    /tmp/tmp5oghmv1n_test.go:27:16: cannot convert fmt.Sprintf("%.0f", result) (value
    of type string) to type int

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075066
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var sum int = 0\n    for _, num\
    \ := range lst {\n        sum += num * num\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0,\
    \ 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}),\
    \ expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected:\
    \ 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected:\
    \ 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected: 200000000\
    \ },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n \
    \    { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected: 1086 },\n\
    \     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0}),\
    \ expected: 1 },\n     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkxktopkm_test.go:25:9: invalid operation: sum += num * num (mismatched
    types int and float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075066
