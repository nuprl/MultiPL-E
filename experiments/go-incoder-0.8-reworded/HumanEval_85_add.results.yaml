language: go_test.go
name: HumanEval_85_add
results:
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for i, v := range lst {\n        if i % 2 == 0 {\n        \
    \    sum += v\n        }\n    }\n    return sum\n}\n</code>\n<|/ a |>\n<| c |>\n\
    Thanks for your answer. I think that it is possible to do it with just one pass,\
    \ but I am not quite sure how.\n<|/ c |>\n<| c |>\nThe idea is there, but it is\
    \ really unlikely to be faster. Your code is clear and simple and has only two\
    \ lines of code, so it is definitely better than your other solution. I'd use\
    \ that. I'll post an alternative if you need it.\n<|/ c |>\n<| a dscore=0 |>\n\
    I assume you want the solution without using maps, otherwise maps are the answer.\n\
    Here is a solution in Python:\n<code>\ndef sum(lst):\n    sum = 0\n    even =\
    \ False\n    i = 0\n    while i < len(lst):\n        if lst[i]%2 != 0:\n     \
    \       if not even:\n                sum += lst[i]\n            else:\n     \
    \           sum += lst[i-1]\n            even = False\n        else:\n       \
    \     even = True\n        i += 1\n    return sum\n</code>\nEDIT: Since you mentioned\
    \ Python, I decided to rewrite it using Python's list comprehension:\n<code>\n\
    def sum(lst):\n    return sum([el for el in lst if el%2!=0])\n</code>\n<|/ a tags=algorithm,math,python,pseudocode\
    \ |>\n<| c |>\nThanks for your answer. I am not familiar with Python, so I will\
    \ stick with the other solution, but thanks anyway.\n<|/ c |>\n<| a dscore=0 |>\n\
    In C++:\n<code>\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\nusing\
    \ namespace std;\n#define MAXL 50\nint arr[MAXL];\nint sum=0 ,i=0,j;\nint main()\n\
    {\n    int n,n,m;\n    scanf(\"%d\",&n);\n    for(i=0;i<n;i++)\n    {\n      \
    \  scanf(\"%d\",&arr[i]);\n    }\n    sort(arr,arr+n);\n    for(i=1;i<=n;i++)\n\
    \    {\n        sum=sum+arr[i];\n        if(sum%2==0)\n        {\n           \
    \ if(sum>2*(j-1))\n            {\n                break;\n            }\n    \
    \        j++;\n        }\n    }\n    printf(\"%d\",j);\n    return 0;\n}\n</code>\n\
    <|/ a tags=algorithm,math,python,pseudocode |>\n<| c |>\nThis code has some syntax\
    \ errors. Please provide some explanations.\n<|/\nfunc TestAdd(t *testing.T) {\n\
    \  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}),\
    \ expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected:\
    \ 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     {\
    \ actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpjyis_9gh_test.go:21:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075074
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    if lst == nil {\n        return 0\n    }\n    total := 0\n    for i := 0;\
    \ i < len(lst); i++ {\n        if i%2 == 0 {\n            total += lst[i]\n  \
    \      }\n    }\n    return total\n}\n</code>\n<|/ a |>\n<| c |>\nI thought of\
    \ this too, but the requirement was to not use any loops. Any way to achieve this\
    \ without using any loops?\n<|/ c |>\n<| c |>\nThis is why I added the other solution\
    \ but you changed your question significantly. I am now assuming you are just\
    \ looking to implement the function you posted.\n<|/ c |>\n<| c |>\n: I edited\
    \ my answer. Is this what you are looking for?\n<|/ c |>\n<| a tags=arrays,go\
    \ |>\n<code>\npackage main\n\nimport (\n    \"fmt\"\n)\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp4ys7efao_test.go:24:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075074
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var evenIndex int\n    var oddIndex int\n    var sum = 0\n    for i, _ :=\
    \ range lst {\n        if i%2 == 0 {\n            sum += lst[i]\n        }\n \
    \       if i%2 != 0 {\n            evenIndex++\n        }\n        if i%2 == 1\
    \ {\n            oddIndex++\n        }\n    }\n    return sum + lst[evenIndex]\
    \ + lst[oddIndex]\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n     {\
    \ actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     { actual:\
    \ candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmp5wbw3k5z_test.go:46: expected '%!s(int=88)', got '%!s(int=180)'\n\
    \    --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmp5wbw3k5z_test.go:46: expected\
    \ '%!s(int=122)', got '%!s(int=26)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmp5wbw3k5z_test.go:46: expected '%!s(int=0)', got '%!s(int=22)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmp5wbw3k5z_test.go:46: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.008s\n\
    FAIL\n"
  timestamp: 1660075075
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    ret := 0\n    for i, v := range lst {\n        if i % 2 == 1 {\n        \
    \    ret += v\n        }\n    }\n    return ret\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__1 (0.00s)\n\
    \        tmpgij8qis5_test.go:38: expected '%!s(int=122)', got '%!s(int=134)'\n\
    \    --- FAIL: TestAdd/test_num__2 (0.00s)\n        tmpgij8qis5_test.go:38: expected\
    \ '%!s(int=0)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\n\
    FAIL\n"
  timestamp: 1660075075
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    total := 0\n    for i, v := range lst {\n        if i%2 == 0 {\n        \
    \    total += v\n        }\n    }\n    return total\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpu3i2o0va_test.go:38: expected '%!s(int=88)', got '%!s(int=4)'\n  \
    \  --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpu3i2o0va_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=12)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpu3i2o0va_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpu3i2o0va_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=10)'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\n\
    FAIL\n"
  timestamp: 1660075075
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n          \
    \  sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 2
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    if len(lst) == 0 {\n        return 0\n    }\n\n    var even = []int{}\n \
    \   for i := 1; i < len(lst); i++ {\n        if lst[i] % 2 != 0 {\n          \
    \  even = append(even, lst[i])\n        }\n    }\n\n    return sum(even)\n}\n\n\
    func TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{4, 88}), expected: 88 },\n     { actual: candidate([]int{4,\
    \ 5, 6, 7, 2, 122}), expected: 122 },\n     { actual: candidate([]int{4, 0, 6,\
    \ 7}), expected: 0 },\n     { actual: candidate([]int{4, 4, 6, 8}), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcq9rgv5g_test.go:24:12: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075075
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, i := range lst {\n        if i%2 == 0 {\n          \
    \  sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpbllflv1p_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpbllflv1p_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpbllflv1p_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpbllflv1p_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sumOdd := 0\n    for _, num := range lst {\n        if num%2 == 0 {\n   \
    \         sumOdd += num\n        }\n    }\n    return sumOdd\n}\n</code>\n<|/\
    \ a tags=go |>\n<| a tags=go |>\nHere is one way to solve your problem.\n<code>\n\
    func TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{4, 88}), expected: 88 },\n     { actual: candidate([]int{4,\
    \ 5, 6, 7, 2, 122}), expected: 122 },\n     { actual: candidate([]int{4, 0, 6,\
    \ 7}), expected: 0 },\n     { actual: candidate([]int{4, 4, 6, 8}), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp7ic0c52o_test.go:21:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075074
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    if lst[0] == 0 {\n        return 0\n    }\n    if len(lst) == 0 {\n     \
    \   return -1\n    }\n\n    var res int\n    for i := 1; i < len(lst); i += 2\
    \ {\n        if lst[i] % 2 == 0 {\n            res += lst[i]\n        }\n    }\n\
    \    return res\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n     {\
    \ actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     { actual:\
    \ candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.007s\n"
  timestamp: 1660075075
- exit_code: 2
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    evenSums := make([]int, 0)\n    for i, val := range lst {\n        if i%2\
    \ == 0 {\n            evenSums = append(evenSums, val)\n        }\n    }\n   \
    \ return sum(evenSums)\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n\
    \     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     {\
    \ actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptcnk4ckb_test.go:19:12: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075075
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    if len(lst) < 2 {\n        return -1\n    }\n    var a int\n    for i :=\
    \ len(lst) - 1; i >= 0; i-- {\n        if i % 2 == 0 {\n            a = a + lst[i]\n\
    \        }\n    }\n    return a\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmphlmpafwk_test.go:41: expected '%!s(int=88)', got '%!s(int=4)'\n  \
    \  --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmphlmpafwk_test.go:41: expected\
    \ '%!s(int=122)', got '%!s(int=12)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmphlmpafwk_test.go:41: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmphlmpafwk_test.go:41: expected\
    \ '%!s(int=12)', got '%!s(int=10)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660075075
- exit_code: 2
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    // Write the code to solve this problem below!\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppqcb3hbw_test.go:14:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075075
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    if len(lst) == 0 {\n        return 0\n    }\n    index := len(lst)\n    for\
    \ index > 0 {\n        if index%2 == 0 {\n            lst[index] := lst[index/2]\
    \ + lst[index/2+1]\n            index = (index-1)/2\n        } else {\n      \
    \      index--\n        }\n    }\n    return lst[0]\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcvxwxppo_test.go:19:13: expected identifier on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075074
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    result := 0\n    for _, v := range lst {\n        if v%2 == 1 {\n       \
    \     result += v\n        }\n    }\n    return result\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmp7btejta2_test.go:38: expected '%!s(int=88)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmp7btejta2_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=12)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmp7btejta2_test.go:38: expected '%!s(int=0)', got '%!s(int=7)'\n   \
    \ --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmp7btejta2_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\n\
    FAIL\n"
  timestamp: 1660075075
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    if len(lst) < 2 {\n        return -1\n    }\n    var sum = 0\n    for idx,\
    \ _ := range lst {\n        if idx%2 != 0 {\n            sum += lst[idx]\n   \
    \     }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__1 (0.00s)\n\
    \        tmpkfeklkda_test.go:41: expected '%!s(int=122)', got '%!s(int=134)'\n\
    \    --- FAIL: TestAdd/test_num__2 (0.00s)\n        tmpkfeklkda_test.go:41: expected\
    \ '%!s(int=0)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660075075
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    return lst[0]\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n\
    \     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     {\
    \ actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpvb2tnhqe_test.go:32: expected '%!s(int=88)', got '%!s(int=4)'\n  \
    \  --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpvb2tnhqe_test.go:32: expected\
    \ '%!s(int=122)', got '%!s(int=4)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpvb2tnhqe_test.go:32: expected '%!s(int=0)', got '%!s(int=4)'\n   \
    \ --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpvb2tnhqe_test.go:32: expected\
    \ '%!s(int=12)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660075075
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    if lst == nil || len(lst) == 0 {\n        return -1\n    }\n    var result\
    \ int = 0\n    for _, v := range lst {\n        if v%2 == 0 {\n            result\
    \ = v + result\n        }\n    }\n    return result\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpc_ndglkl_test.go:41: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpc_ndglkl_test.go:41: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpc_ndglkl_test.go:41: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpc_ndglkl_test.go:41: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660075075
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    even_index := 0\n    for index, val := range lst {\n        if index%2 !=\
    \ 0 {\n            even_index += val\n        }\n    }\n    return even_index\n\
    }\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]int{4, 88}), expected: 88 },\n     { actual: candidate([]int{4,\
    \ 5, 6, 7, 2, 122}), expected: 122 },\n     { actual: candidate([]int{4, 0, 6,\
    \ 7}), expected: 0 },\n     { actual: candidate([]int{4, 4, 6, 8}), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__1 (0.00s)\n\
    \        tmp7wq3xu62_test.go:38: expected '%!s(int=122)', got '%!s(int=134)'\n\
    \    --- FAIL: TestAdd/test_num__2 (0.00s)\n        tmp7wq3xu62_test.go:38: expected\
    \ '%!s(int=0)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.009s\n\
    FAIL\n"
  timestamp: 1660075075
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    if len(lst) <= 1 {\n        return 0\n    }\n\n    var acc int = 0\n\n  \
    \  for i := 1; i < len(lst); i++ {\n        if lst[i] % 2 == 0 {\n           \
    \ acc += lst[i]\n        }\n    }\n\n    return acc\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__1 (0.00s)\n\
    \        tmpfr5w58i3_test.go:44: expected '%!s(int=122)', got '%!s(int=130)'\n\
    \    --- FAIL: TestAdd/test_num__2 (0.00s)\n        tmpfr5w58i3_test.go:44: expected\
    \ '%!s(int=0)', got '%!s(int=6)'\n    --- FAIL: TestAdd/test_num__3 (0.00s)\n\
    \        tmpfr5w58i3_test.go:44: expected '%!s(int=12)', got '%!s(int=18)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075075
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    if lst == nil {\n        return 0\n    }\n    sum := 0\n    for _, i := range\
    \ lst {\n        if i % 2 == 0 {\n            sum += i\n        }\n    }\n   \
    \ return sum\n}\n`\n\tfake.AddTestOutput(t, \"pkg\", \"add_test\", add_test_pkg)\n\
    \n\t// Add a new package with test cases\n\tadd_test_pkg = `package add_test\n\
    \nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc TestAdd(t *testing.T) {\n\
    \  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}),\
    \ expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected:\
    \ 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     {\
    \ actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments\n/tmp/tmpx8p7kob7_test.go:24:1: expected declaration,\
    \ found `\n\tfake.AddTestOutput(t, \"pkg\", \"add_test\", add_test_pkg)\n\n\t\
    // Add a new package with test cases\n\tadd_test_pkg = `\n"
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075074
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    // Your code here\n    return 0\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmp2gh_y8my_test.go:33: expected '%!s(int=88)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmp2gh_y8my_test.go:33: expected\
    \ '%!s(int=122)', got '%!s(int=0)'\n    --- FAIL: TestAdd/test_num__3 (0.00s)\n\
    \        tmp2gh_y8my_test.go:33: expected '%!s(int=12)', got '%!s(int=0)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075075
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    return 0\n}\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n     {\
    \ actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     { actual:\
    \ candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpafu2d9du_test.go:31: expected '%!s(int=88)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpafu2d9du_test.go:31: expected\
    \ '%!s(int=122)', got '%!s(int=0)'\n    --- FAIL: TestAdd/test_num__3 (0.00s)\n\
    \        tmpafu2d9du_test.go:31: expected '%!s(int=12)', got '%!s(int=0)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075075
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    // add only odd indices\n    for i := 0; i < len(lst); i += 2 {\n       \
    \ lst[i] += lst[i + 1]\n    }\n\n    // add only even indices\n    for i := 0;\
    \ i < len(lst); i += 2 {\n        lst[i] -= lst[i + 1]\n    }\n\n    return lst[0]\n\
    }\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]int{4, 88}), expected: 88 },\n     { actual: candidate([]int{4,\
    \ 5, 6, 7, 2, 122}), expected: 122 },\n     { actual: candidate([]int{4, 0, 6,\
    \ 7}), expected: 0 },\n     { actual: candidate([]int{4, 4, 6, 8}), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpg2m7mnew_test.go:42: expected '%!s(int=88)', got '%!s(int=4)'\n  \
    \  --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpg2m7mnew_test.go:42: expected\
    \ '%!s(int=122)', got '%!s(int=4)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpg2m7mnew_test.go:42: expected '%!s(int=0)', got '%!s(int=4)'\n   \
    \ --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpg2m7mnew_test.go:42: expected\
    \ '%!s(int=12)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\n\
    FAIL\n"
  timestamp: 1660075075
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    if len(lst) == 0 {\n        return 0\n    }\n\n    result := 0\n\n    evenIdxs\
    \ := make([]int, len(lst))\n\n    for idx, val := range lst {\n        if idx%2\
    \ != 0 {\n            evenIdxs[idx] = val\n        } else {\n            result\
    \ += val\n        }\n    }\n\n    for idx := range evenIdxs {\n        result\
    \ += lst[idx]\n    }\n\n    return result\n}\n\nfunc TestAdd(t *testing.T) {\n\
    \  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}),\
    \ expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected:\
    \ 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     {\
    \ actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpllr62jv0_test.go:52: expected '%!s(int=88)', got '%!s(int=96)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpllr62jv0_test.go:52: expected\
    \ '%!s(int=122)', got '%!s(int=158)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpllr62jv0_test.go:52: expected '%!s(int=0)', got '%!s(int=27)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpllr62jv0_test.go:52: expected\
    \ '%!s(int=12)', got '%!s(int=32)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075075
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    if len(lst) == 0 {\n        return 0\n    }\n    sum := 0\n    for i := range\
    \ lst {\n        if i%2 == 1 {\n            sum += lst[i]\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n     {\
    \ actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     { actual:\
    \ candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__1 (0.00s)\n\
    \        tmpalxkc245_test.go:41: expected '%!s(int=122)', got '%!s(int=134)'\n\
    \    --- FAIL: TestAdd/test_num__2 (0.00s)\n        tmpalxkc245_test.go:41: expected\
    \ '%!s(int=0)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660075076
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var sum int\n    for i, v := range lst {\n        if i%2 == 0 {\n       \
    \     sum += v\n        }\n    }\n    return sum\n}\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmp92ayuh8s_test.go:37: expected '%!s(int=88)', got '%!s(int=4)'\n  \
    \  --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmp92ayuh8s_test.go:37: expected\
    \ '%!s(int=122)', got '%!s(int=12)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmp92ayuh8s_test.go:37: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmp92ayuh8s_test.go:37: expected\
    \ '%!s(int=12)', got '%!s(int=10)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075076
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var evenSum = 0\n    var oddSum = 0\n    for _, i := range lst {\n      \
    \  if i%2 == 0 {\n            evenSum += i\n        } else {\n            oddSum\
    \ += i\n        }\n    }\n    return evenSum + oddSum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpqkmp01sd_test.go:41: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpqkmp01sd_test.go:41: expected\
    \ '%!s(int=122)', got '%!s(int=146)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpqkmp01sd_test.go:41: expected '%!s(int=0)', got '%!s(int=17)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpqkmp01sd_test.go:41: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075076
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sumOdd := 0\n    for _, i := range lst {\n        if i%2 == 0 {\n       \
    \     sumOdd = sumOdd + i\n        }\n    }\n    return sumOdd\n}\n`\n)\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{4, 88}), expected: 88 },\n     { actual: candidate([]int{4,\
    \ 5, 6, 7, 2, 122}), expected: 122 },\n     { actual: candidate([]int{4, 0, 6,\
    \ 7}), expected: 0 },\n     { actual: candidate([]int{4, 4, 6, 8}), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpyuejxhkq_test.go:21:1: raw string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075075
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    evenIndex := len(lst)/2\n    evenElements := make([]int, evenIndex)\n   \
    \ for i := 0; i < evenIndex; i++ {\n        evenElements[i] = lst[i]\n    }\n\
    \    for i := evenIndex - 1; i >= 0; i-- {\n        if evenElements[i]%2 != 0\
    \ {\n            evenElements[i] = evenElements[i]+evenElements[i+1]\n       \
    \     evenElements[i+1] = 0\n        }\n    }\n    return evenElements[0]\n}\n\
    \nfunc TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{4, 88}), expected: 88 },\n     { actual: candidate([]int{4,\
    \ 5, 6, 7, 2, 122}), expected: 122 },\n     { actual: candidate([]int{4, 0, 6,\
    \ 7}), expected: 0 },\n     { actual: candidate([]int{4, 4, 6, 8}), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpt4hwdq5i_test.go:43: expected '%!s(int=88)', got '%!s(int=4)'\n  \
    \  --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpt4hwdq5i_test.go:43: expected\
    \ '%!s(int=122)', got '%!s(int=4)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpt4hwdq5i_test.go:43: expected '%!s(int=0)', got '%!s(int=4)'\n   \
    \ --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpt4hwdq5i_test.go:43: expected\
    \ '%!s(int=12)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660075076
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var ans int\n    switch len(lst) {\n    case 0:\n        return -1\n    case\
    \ 1:\n        return lst[0]\n    default:\n        for _, val := range lst {\n\
    \            if val%2 == 0 {\n                ans += val\n            }\n    \
    \    }\n        return ans\n    }\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmploak3274_test.go:45: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmploak3274_test.go:45: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmploak3274_test.go:45: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmploak3274_test.go:45: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075077
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    if len(lst) < 2 {\n        return -1\n    }\n    if lst[0]%2 != 0 {\n   \
    \     return -1\n    }\n    if lst[1]%2 != 0 {\n        return -1\n    }\n   \
    \ return lst[0]+lst[1]\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n\
    \     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     {\
    \ actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmp708k9iwc_test.go:41: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmp708k9iwc_test.go:41: expected\
    \ '%!s(int=122)', got '%!s(int=-1)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmp708k9iwc_test.go:41: expected '%!s(int=0)', got '%!s(int=4)'\n   \
    \ --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmp708k9iwc_test.go:41: expected\
    \ '%!s(int=12)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075077
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, i := range lst {\n        if i%2 == 0 {\n          \
    \  sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpbllflv1p_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpbllflv1p_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpbllflv1p_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpbllflv1p_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 2
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum = 0\n    for _, elem := range lst {\n        if elem%2 == 1 {\n     \
    \       sum += elem\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp76saepy4_test.go:13:5: undefined: sum

    /tmp/tmp76saepy4_test.go:16:13: undefined: sum

    /tmp/tmp76saepy4_test.go:19:12: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075077
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    return lst[1+lst[2]%len(lst)]\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\npanic: runtime error: index out of range [2]\
    \ with length 2 [recovered]\n\tpanic: runtime error: index out of range [2] with\
    \ length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.add(...)\n\t/tmp/tmp582yh13p_test.go:13\n\
    command-line-arguments_test.TestAdd(0x0?)\n\t/tmp/tmp582yh13p_test.go:23 +0x1b\n\
    testing.tRunner(0xc0000cc4e0, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075078
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    if len(lst) == 0 {\n        return 0\n    }\n\n    sum := 0\n    for _, x\
    \ := range lst {\n        if x%2 == 0 {\n            sum += x\n        }\n   \
    \ }\n\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n\
    \     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     {\
    \ actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpxq86ns6u_test.go:43: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpxq86ns6u_test.go:43: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpxq86ns6u_test.go:43: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpxq86ns6u_test.go:43: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660075078
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    for _, i := range lst {\n        if i % 2 == 1 {\n            lst = append(lst,\
    \ i)\n        }\n    }\n    return len(lst)\n}\n\nfunc TestAdd(t *testing.T) {\n\
    \  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}),\
    \ expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected:\
    \ 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     {\
    \ actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpv5jy0g9f_test.go:37: expected '%!s(int=88)', got '%!s(int=2)'\n  \
    \  --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpv5jy0g9f_test.go:37: expected\
    \ '%!s(int=122)', got '%!s(int=8)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpv5jy0g9f_test.go:37: expected '%!s(int=0)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpv5jy0g9f_test.go:37: expected\
    \ '%!s(int=12)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660075078
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var sum int = 0\n    for _, v := range lst {\n        if v%2 == 0 {\n   \
    \         sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpyrs78im9_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpyrs78im9_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpyrs78im9_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpyrs78im9_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum, i := 0, 0\n    for i < len(lst) {\n        if i+2 > len(lst) {\n   \
    \         break\n        }\n        if lst[i] % 2 == 1 {\n            sum += lst[i+1]\n\
    \        }\n        i += 2\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmp30yx4yxj_test.go:42: expected '%!s(int=88)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmp30yx4yxj_test.go:42: expected\
    \ '%!s(int=122)', got '%!s(int=0)'\n    --- FAIL: TestAdd/test_num__3 (0.00s)\n\
    \        tmp30yx4yxj_test.go:42: expected '%!s(int=12)', got '%!s(int=0)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075078
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    if len(lst) == 0 {\n        return 0\n    }\n\n    return lst[0] + lst[1]\
    \ + add(lst[2:])\n}\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n     {\
    \ actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     { actual:\
    \ candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmppg0n4yw0_test.go:35: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmppg0n4yw0_test.go:35: expected\
    \ '%!s(int=122)', got '%!s(int=146)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmppg0n4yw0_test.go:35: expected '%!s(int=0)', got '%!s(int=17)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmppg0n4yw0_test.go:35: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660075078
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    result := 0\n    for _, i := range lst {\n        if i%2 != 0 {\n       \
    \     result += i\n        }\n    }\n    return result\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmps8voqxhm_test.go:38: expected '%!s(int=88)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmps8voqxhm_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=12)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmps8voqxhm_test.go:38: expected '%!s(int=0)', got '%!s(int=7)'\n   \
    \ --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmps8voqxhm_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075078
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    evenIndices := 0\n    for _, number := range lst {\n        if number%2 ==\
    \ 0 {\n            evenIndices += number/2\n        }\n    }\n    return evenIndices\n\
    }\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]int{4, 88}), expected: 88 },\n     { actual: candidate([]int{4,\
    \ 5, 6, 7, 2, 122}), expected: 122 },\n     { actual: candidate([]int{4, 0, 6,\
    \ 7}), expected: 0 },\n     { actual: candidate([]int{4, 4, 6, 8}), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpzt2gnlwb_test.go:38: expected '%!s(int=88)', got '%!s(int=46)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpzt2gnlwb_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=67)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpzt2gnlwb_test.go:38: expected '%!s(int=0)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpzt2gnlwb_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=11)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\n\
    FAIL\n"
  timestamp: 1660075078
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, i := range lst {\n        if i%2 == 0 {\n          \
    \  sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpbllflv1p_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpbllflv1p_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpbllflv1p_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpbllflv1p_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var sum int\n    for idx, value := range lst {\n        if idx%2 != 0 {\n\
    \            sum += value\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t\
    \ *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__1 (0.00s)\n\
    \        tmpgqglgoz0_test.go:38: expected '%!s(int=122)', got '%!s(int=134)'\n\
    \    --- FAIL: TestAdd/test_num__2 (0.00s)\n        tmpgqglgoz0_test.go:38: expected\
    \ '%!s(int=0)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075078
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    result := 0\n    for i, num := range lst {\n        if i % 2 == 0 {\n   \
    \         result += num\n        }\n    }\n    return result\n}\n\nfunc TestAdd(t\
    \ *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmp2ukuut2n_test.go:38: expected '%!s(int=88)', got '%!s(int=4)'\n  \
    \  --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmp2ukuut2n_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=12)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmp2ukuut2n_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmp2ukuut2n_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=10)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660075078
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var result int\n    for idx, val := range lst {\n        if idx % 2 == 1\
    \ {\n            result += val\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{4, 88}), expected: 88 },\n     { actual: candidate([]int{4,\
    \ 5, 6, 7, 2, 122}), expected: 122 },\n     { actual: candidate([]int{4, 0, 6,\
    \ 7}), expected: 0 },\n     { actual: candidate([]int{4, 4, 6, 8}), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__1 (0.00s)\n\
    \        tmp8g19vqsg_test.go:38: expected '%!s(int=122)', got '%!s(int=134)'\n\
    \    --- FAIL: TestAdd/test_num__2 (0.00s)\n        tmp8g19vqsg_test.go:38: expected\
    \ '%!s(int=0)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075078
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var newLst = make([]int, 0)\n    for _, v := range lst {\n        if v%2\
    \ == 0 {\n            newLst = append(newLst, v)\n        }\n    }\n    return\
    \ newLst[0]\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n     {\
    \ actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     { actual:\
    \ candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmp9nt5o9w9_test.go:38: expected '%!s(int=88)', got '%!s(int=4)'\n  \
    \  --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmp9nt5o9w9_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=4)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmp9nt5o9w9_test.go:38: expected '%!s(int=0)', got '%!s(int=4)'\n   \
    \ --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmp9nt5o9w9_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075078
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var result int\n    for _, i := range lst {\n        if i%2 == 0 {\n    \
    \        result += i\n        }\n    }\n    return result\n}\n\nfunc TestAdd(t\
    \ *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpg6sp24c1_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpg6sp24c1_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpg6sp24c1_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpg6sp24c1_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075078
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, val := range lst {\n        if val%2 != 0 {\n      \
    \      sum += val\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpsjqh157y_test.go:38: expected '%!s(int=88)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpsjqh157y_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=12)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpsjqh157y_test.go:38: expected '%!s(int=0)', got '%!s(int=7)'\n   \
    \ --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpsjqh157y_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075078
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var sum = 0\n    for _, val := range lst {\n        if val%2 == 0 {\n   \
    \         sum += val\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmp58m0o5xf_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmp58m0o5xf_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmp58m0o5xf_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmp58m0o5xf_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075078
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for i, v := range lst {\n        if i%2 == 1 {\n          \
    \  sum += v\n        }\n    }\n    return sum\n}\n</code>\nAnd finally the tests.\n\
    <code>\npackage add_test\n\nimport (\n    \"testing\"\n)\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3q9st9p4_test.go:21:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075077
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    if l := len(lst); l == 0 {\n        return -1\n    }\n    result := 0\n \
    \   for _, v := range lst {\n        if v%2 != 0 {\n            result += v\n\
    \        }\n    }\n    return result\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpgy69kxs5_test.go:41: expected '%!s(int=88)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpgy69kxs5_test.go:41: expected\
    \ '%!s(int=122)', got '%!s(int=12)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpgy69kxs5_test.go:41: expected '%!s(int=0)', got '%!s(int=7)'\n   \
    \ --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpgy69kxs5_test.go:41: expected\
    \ '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660075078
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    even := 0\n    odd := 0\n    for i, v := range lst {\n        if i%2 == 0\
    \ {\n            even += v\n        } else {\n            odd += v\n        }\n\
    \    }\n    return even+odd\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate :=\
    \ add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmppznc6hd5_test.go:41: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmppznc6hd5_test.go:41: expected\
    \ '%!s(int=122)', got '%!s(int=146)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmppznc6hd5_test.go:41: expected '%!s(int=0)', got '%!s(int=17)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmppznc6hd5_test.go:41: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660075078
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    // Your code here\n    result := 0\n    count := 0\n    for _, value := range\
    \ lst {\n        if count % 2 == 0 {\n            result += value\n        }\n\
    \        count += 1 \n    }\n    return result\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpdpjfb3_z_test.go:41: expected '%!s(int=88)', got '%!s(int=4)'\n  \
    \  --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpdpjfb3_z_test.go:41: expected\
    \ '%!s(int=122)', got '%!s(int=12)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpdpjfb3_z_test.go:41: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpdpjfb3_z_test.go:41: expected\
    \ '%!s(int=12)', got '%!s(int=10)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075078
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    if len(lst) <= 1 {\n        return 0\n    }\n\n    var sum = 0\n    for i\
    \ := range lst {\n        if i%2 != 0 {\n            sum += lst[i]\n        }\n\
    \    }\n\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n\
    \     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     {\
    \ actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__1 (0.00s)\n\
    \        tmpwgutnl2g_test.go:43: expected '%!s(int=122)', got '%!s(int=134)'\n\
    \    --- FAIL: TestAdd/test_num__2 (0.00s)\n        tmpwgutnl2g_test.go:43: expected\
    \ '%!s(int=0)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660075078
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var sum int\n    for _, i := range lst {\n        if i%2 != 0 {\n       \
    \     sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmp0g7nfid8_test.go:38: expected '%!s(int=88)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmp0g7nfid8_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=12)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmp0g7nfid8_test.go:38: expected '%!s(int=0)', got '%!s(int=7)'\n   \
    \ --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmp0g7nfid8_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075078
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var sum int\n    for i, v := range lst {\n        if i%2 == 1 {\n       \
    \     sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__1 (0.00s)\n\
    \        tmpdsizf0ot_test.go:38: expected '%!s(int=122)', got '%!s(int=134)'\n\
    \    --- FAIL: TestAdd/test_num__2 (0.00s)\n        tmpdsizf0ot_test.go:38: expected\
    \ '%!s(int=0)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660075079
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    count := 0\n    for _, i := range lst {\n        if i%2 != 0 {\n        \
    \    lst[count] += i\n            count++\n        }\n    }\n    return lst[count]\n\
    }\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]int{4, 88}), expected: 88 },\n     { actual: candidate([]int{4,\
    \ 5, 6, 7, 2, 122}), expected: 122 },\n     { actual: candidate([]int{4, 0, 6,\
    \ 7}), expected: 0 },\n     { actual: candidate([]int{4, 4, 6, 8}), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpglo71xkf_test.go:39: expected '%!s(int=88)', got '%!s(int=4)'\n  \
    \  --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpglo71xkf_test.go:39: expected\
    \ '%!s(int=122)', got '%!s(int=6)'\n    --- FAIL: TestAdd/test_num__3 (0.00s)\n\
    \        tmpglo71xkf_test.go:39: expected '%!s(int=12)', got '%!s(int=4)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075079
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for i, v := range lst {\n        if i%2 == 1 {\n          \
    \  sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__1 (0.00s)\n\
    \        tmprg7lm8b2_test.go:38: expected '%!s(int=122)', got '%!s(int=134)'\n\
    \    --- FAIL: TestAdd/test_num__2 (0.00s)\n        tmprg7lm8b2_test.go:38: expected\
    \ '%!s(int=0)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075079
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for i, val := range lst {\n        if i%2 == 0 {\n        \
    \    sum += val\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpnrl0a8dk_test.go:38: expected '%!s(int=88)', got '%!s(int=4)'\n  \
    \  --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpnrl0a8dk_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=12)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpnrl0a8dk_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpnrl0a8dk_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=10)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075079
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    if len(lst) == 0 {\n        return -1\n    }\n    total := 0\n    for _,\
    \ num := range lst {\n        if num%2 == 0 {\n            total += num\n    \
    \    }\n    }\n    return total\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmp5ipiniap_test.go:41: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmp5ipiniap_test.go:41: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmp5ipiniap_test.go:41: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmp5ipiniap_test.go:41: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075080
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var sum int\n    i := 0\n    for _, v := range lst {\n        if i%2 == 0\
    \ {\n            sum += v\n        }\n        i++\n    }\n    return sum\n}\n\n\
    func TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{4, 88}), expected: 88 },\n     { actual: candidate([]int{4,\
    \ 5, 6, 7, 2, 122}), expected: 122 },\n     { actual: candidate([]int{4, 0, 6,\
    \ 7}), expected: 0 },\n     { actual: candidate([]int{4, 4, 6, 8}), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpctq1m171_test.go:40: expected '%!s(int=88)', got '%!s(int=4)'\n  \
    \  --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpctq1m171_test.go:40: expected\
    \ '%!s(int=122)', got '%!s(int=12)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpctq1m171_test.go:40: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpctq1m171_test.go:40: expected\
    \ '%!s(int=12)', got '%!s(int=10)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660075080
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    if len(lst) == 0 {\n        return -1\n    }\n    if len(lst) == 1 {\n  \
    \      return lst[0]\n    }\n    evens := make([]int, len(lst))\n    for i, e\
    \ := range lst {\n        if i%2 == 0 {\n            evens[i] = e\n        }\n\
    \    }\n    result := 0\n    for i, e := range evens {\n        result += e\n\
    \    }\n    return result\n}\n`\n    if err := t.Run(test.name, func(t *testing.T)\
    \ {\n        panic(err)\n    }); err != nil {\n        t.Error(err)\n    }\n}\n\
    \nfunc TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{4, 88}), expected: 88 },\n     { actual: candidate([]int{4,\
    \ 5, 6, 7, 2, 122}), expected: 122 },\n     { actual: candidate([]int{4, 0, 6,\
    \ 7}), expected: 0 },\n     { actual: candidate([]int{4, 4, 6, 8}), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp76xzmzie_test.go:31:1: raw string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075079
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for i, v := range lst {\n        if i%2 != 0 {\n          \
    \  sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__1 (0.00s)\n\
    \        tmpl7szhkym_test.go:38: expected '%!s(int=122)', got '%!s(int=134)'\n\
    \    --- FAIL: TestAdd/test_num__2 (0.00s)\n        tmpl7szhkym_test.go:38: expected\
    \ '%!s(int=0)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660075080
- exit_code: 2
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    if len(lst) == 0 {\n        return 0\n    }\n    evenIndices := make([]int,\
    \ 0, len(lst))\n    for _, v := range lst {\n        if v%2 == 0 {\n         \
    \   evenIndices = append(evenIndices, v)\n        }\n    }\n    return sum(evenIndices)\n\
    }\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]int{4, 88}), expected: 88 },\n     { actual: candidate([]int{4,\
    \ 5, 6, 7, 2, 122}), expected: 122 },\n     { actual: candidate([]int{4, 0, 6,\
    \ 7}), expected: 0 },\n     { actual: candidate([]int{4, 4, 6, 8}), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6a7v_oou_test.go:22:12: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075080
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    if len(lst) < 2 {\n        return -1\n    }\n    var sum = 0\n    for i :=\
    \ 0; i < len(lst); i += 2 {\n        sum += lst[i]\n    }\n    return sum\n}\n\
    </code>\n<|/ a dscore=2 |>\n<| c |>\nThis is what I ended up with thank you, I've\
    \ upvoted your answer, but I accepted the other one as it was closer to what I\
    \ asked for but definitely very cool for future references.\n<|/ c |>\n<| a |>\n\
    I came here looking for how to do this in Javascript, and I came up with a fairly\
    \ simple solution.  It's also possible in Python using the sum function, which\
    \ allows you to use the key parameter to specify the value you want the sum to\
    \ start at (which would get you the behavior you want).  I ended up writing this\
    \ in Go though, so I'm not 100% sure it will work in Javascript.\n<code>\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{4, 88}), expected: 88 },\n     { actual: candidate([]int{4,\
    \ 5, 6, 7, 2, 122}), expected: 122 },\n     { actual: candidate([]int{4, 0, 6,\
    \ 7}), expected: 0 },\n     { actual: candidate([]int{4, 4, 6, 8}), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmph2ne_cn3_test.go:22:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075079
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    ret := 0\n    for _, v := range lst {\n        if v%2 == 1 {\n          \
    \  ret += v\n        }\n    }\n    return ret\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpsqsm08w1_test.go:38: expected '%!s(int=88)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpsqsm08w1_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=12)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpsqsm08w1_test.go:38: expected '%!s(int=0)', got '%!s(int=7)'\n   \
    \ --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpsqsm08w1_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660075080
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    if len(lst) == 0 {\n        return 0\n    }\n\n    // initialize sum\n  \
    \  sum := 0\n    i := 0\n    for ; lst[i] < 0; i++ {\n    }\n\n    // find even\
    \ values\n    for ; i < len(lst); i++ {\n        if lst[i] % 2 == 0 {\n      \
    \      sum += lst[i]\n        }\n    }\n\n    return sum\n}\n\nfunc TestAdd(t\
    \ *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmprkrngfbt_test.go:49: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmprkrngfbt_test.go:49: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmprkrngfbt_test.go:49: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmprkrngfbt_test.go:49: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075080
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for i, v := range lst {\n        if i%2 == 1 {\n          \
    \  sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__1 (0.00s)\n\
    \        tmprg7lm8b2_test.go:38: expected '%!s(int=122)', got '%!s(int=134)'\n\
    \    --- FAIL: TestAdd/test_num__2 (0.00s)\n        tmprg7lm8b2_test.go:38: expected\
    \ '%!s(int=0)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075079
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var sum = 0\n    var i int\n\n    for i = range lst {\n        if i % 2 ==\
    \ 0 {\n            sum += lst[i]\n        }\n    }\n\n    return sum\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{4, 88}), expected: 88 },\n     { actual: candidate([]int{4,\
    \ 5, 6, 7, 2, 122}), expected: 122 },\n     { actual: candidate([]int{4, 0, 6,\
    \ 7}), expected: 0 },\n     { actual: candidate([]int{4, 4, 6, 8}), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpgccofy_p_test.go:41: expected '%!s(int=88)', got '%!s(int=4)'\n  \
    \  --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpgccofy_p_test.go:41: expected\
    \ '%!s(int=122)', got '%!s(int=12)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpgccofy_p_test.go:41: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpgccofy_p_test.go:41: expected\
    \ '%!s(int=12)', got '%!s(int=10)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075080
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    if len(lst) <= 0 {\n        return 0\n    }\n\n    sum := 0\n    oddElems\
    \ := lst[1::2]\n\n    for i, v := range oddElems {\n        sum += v\n    }\n\n\
    \    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n     {\
    \ actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     { actual:\
    \ candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpelhxqvmh_test.go:18:22: 2nd index required in 3-index slice

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075079
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    n := 0\n    for _, i := range lst {\n        if i%2 == 0 {\n            n\
    \ += i\n        }\n    }\n    return n\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmp53v5rhc2_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmp53v5rhc2_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmp53v5rhc2_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmp53v5rhc2_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075080
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sumVal := 0\n    for _, value := range lst {\n        if value%2 != 0 {\n\
    \            sumVal += value\n        }\n    }\n    return sumVal\n}\n\nfunc TestAdd(t\
    \ *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpfr9saieb_test.go:38: expected '%!s(int=88)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpfr9saieb_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=12)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpfr9saieb_test.go:38: expected '%!s(int=0)', got '%!s(int=7)'\n   \
    \ --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpfr9saieb_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075080
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    // base case\n    if len(lst) == 0 {\n        return -1\n    }\n\n    //\
    \ recurse\n    if len(lst) == 1 {\n        return lst[0]\n    }\n\n    even :=\
    \ add(lst[:len(lst)-1])\n\n    // add the even indices in lst\n    if even !=\
    \ -1 {\n        even += lst[len(lst)-1]\n    }\n\n    return even\n}\n\nfunc TestAdd(t\
    \ *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmp_xegf4k__test.go:49: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmp_xegf4k__test.go:49: expected\
    \ '%!s(int=122)', got '%!s(int=146)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmp_xegf4k__test.go:49: expected '%!s(int=0)', got '%!s(int=17)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmp_xegf4k__test.go:49: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660075080
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    for i := range lst {\n        if i%2 == 1 {\n            lst[i] += lst[i]\n\
    \        }\n    }\n    return lst[0]\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpbwgn9mn5_test.go:37: expected '%!s(int=88)', got '%!s(int=4)'\n  \
    \  --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpbwgn9mn5_test.go:37: expected\
    \ '%!s(int=122)', got '%!s(int=4)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpbwgn9mn5_test.go:37: expected '%!s(int=0)', got '%!s(int=4)'\n   \
    \ --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpbwgn9mn5_test.go:37: expected\
    \ '%!s(int=12)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075080
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    if lst==nil || len(lst)==0 {\n        return -1\n    }\n    var sum=0\n \
    \   for idx, val:= range lst {\n        if idx%2==0 {\n            sum+=val\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmp2zln42p0_test.go:41: expected '%!s(int=88)', got '%!s(int=4)'\n  \
    \  --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmp2zln42p0_test.go:41: expected\
    \ '%!s(int=122)', got '%!s(int=12)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmp2zln42p0_test.go:41: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmp2zln42p0_test.go:41: expected\
    \ '%!s(int=12)', got '%!s(int=10)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075080
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    if len(lst) <= 0 {\n        fmt.Println(\"Empty list\")\n        return 0\n\
    \    }\n\n    // initialize sum and sum count\n    var sum, sumCount int\n\n \
    \   // add even\n    for i := 0; i < len(lst); i = i + 2 {\n        sum += lst[i]\n\
    \        sumCount++\n    }\n\n    // add odd\n    for i := 1; i < len(lst); i\
    \ = i + 2 {\n        sum += lst[i]\n        sumCount++\n    }\n\n    // return\
    \ sum\n    return sum\n}\n</code>\n<|/ a |>\n<| c |>\nI like this answer but I'm\
    \ having trouble understanding the use of the if statement in the add() function.\
    \  I don't quite understand what it is checking for.  Why wouldn't you just be\
    \ doing a for loop and incrementing i by 2 each time?\n<|/ c |>\n<| c |>\nI updated\
    \ the code with comments on what it does. If the list is `[]int{1, 2, 3, 4, 5}`\
    \ then `sum` would be equal to `6` and `sumCount` would be equal to `5`. The `if`\
    \ statement checks if `i` is divisible by 2. If it is, then add the even numbers\
    \ and increment the counter by 1. Otherwise, add the odd numbers and increment\
    \ the counter by 1. The `for` loop adds the odd numbers, increments the counter,\
    \ adds them to the sum then returns the sum.\n<|/ c |>\n<| c |>\nI understand\
    \ that much. My confusion is with how the for loop works. Why do you need an if\
    \ statement to check whether i is divisible by 2? It seems like the for loop is\
    \ adding the even numbers and incrementing the counter by 1 each time which makes\
    \ the if statement redundant isn't it? The for loop would be: \nfor i := 0; i\
    \ < len(lst); i = i + 2{\n    sum += lst[i]\n    sumCount++\n}\n<|/ c |>\n<| c\
    \ |>\nThe `for` loop adds the even numbers, increments the counter, adds them\
    \ to the sum then returns the sum. If `i` is divisible by 2 then add it. If it\
    \ is not, add the odd numbers and increment the counter by 1. `sum` would equal\
    \ `6` and `sumCount` would equal `5`. So the first `for` loop adds the even numbers,\
    \ increments the counter, adds them to the sum then returns the sum. The second\
    \ `for` loop adds the odd numbers, increments the counter, adds them to the sum\
    \ then returns the sum. The `if` statement checks if `i` is divisible by 2. If\
    \ it is, then add the even numbers and increment the counter by 1. Otherwise,\
    \ add the odd numbers and increment the \nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp9notyiqq_test.go:36:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075080
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    ret := 0\n    for i := range lst {\n        if i%2 == 0 {\n            ret\
    \ = ret + lst[i]\n        }\n    }\n    return ret\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpcr2qph07_test.go:38: expected '%!s(int=88)', got '%!s(int=4)'\n  \
    \  --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpcr2qph07_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=12)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpcr2qph07_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpcr2qph07_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=10)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660075081
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    n := 0\n    prev := lst[0]\n    odd := true\n    for _, val := range lst\
    \ {\n        if prev%2 == 0 {\n            n += val\n        } else {\n      \
    \      n += prev\n        }\n        prev = val\n        if prev%2 == 0 && val%2\
    \ != 0 {\n            odd = !odd\n        }\n    }\n    if odd && n > 0 {\n  \
    \      n += 1\n    }\n    return n\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpdqbhq_fg_test.go:49: expected '%!s(int=88)', got '%!s(int=93)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpdqbhq_fg_test.go:49: expected\
    \ '%!s(int=122)', got '%!s(int=151)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpdqbhq_fg_test.go:49: expected '%!s(int=0)', got '%!s(int=18)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpdqbhq_fg_test.go:49: expected\
    \ '%!s(int=12)', got '%!s(int=23)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075081
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var sum int = 0\n    for _, v := range lst {\n        if v%2 == 0 {\n   \
    \         sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpyrs78im9_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpyrs78im9_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpyrs78im9_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpyrs78im9_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, index := range lst {\n        if index%2 == 0 {\n  \
    \          sum += index\n        }\n    }\n    return sum\n}\n</code>\n<|/ a tags=go\
    \ |>\n<| a tags=go |>\nIt could be done with a map, just for fun, here it is:\n\
    <code>\npackage main\n\nimport (\n    \"fmt\"\n)\n\nvar map = make(map[int]int)\n\
    var input = []int{4, 2, 6, 7}\n\nfunc TestAdd(t *testing.T) {\n  candidate :=\
    \ add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp7x4hn78t_test.go:21:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075080
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    if len(lst) == 0 {\n        return 0\n    }\n    // Find even positions.\n\
    \    evenIndexes := make([]int, 0, len(lst))\n    for i, e := range lst {\n  \
    \      if i % 2 == 0 {\n            evenIndexes = append(evenIndexes, i)\n   \
    \     }\n    }\n\n    // Add the even numbers at odd positions.\n    for _, ei\
    \ := range evenIndexes {\n        lst[ei] = lst[ei] + lst[evenIndexes[len(evenIndexes)-1]]\n\
    \    }\n\n    return lst[0]\n}\n</code>\nThe advantage of this approach is that\
    \ you can modify your approach to take advantage of the underlying array \nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{4, 88}), expected: 88 },\n     { actual: candidate([]int{4,\
    \ 5, 6, 7, 2, 122}), expected: 122 },\n     { actual: candidate([]int{4, 0, 6,\
    \ 7}), expected: 0 },\n     { actual: candidate([]int{4, 4, 6, 8}), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpkw6p0k7n_test.go:31:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075080
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var result int\n    for _, v := range lst {\n        if v%2 != 0 {\n    \
    \        result += v\n        }\n    }\n    return result\n}\n\nfunc TestAdd(t\
    \ *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpe5us_3w0_test.go:38: expected '%!s(int=88)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpe5us_3w0_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=12)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpe5us_3w0_test.go:38: expected '%!s(int=0)', got '%!s(int=7)'\n   \
    \ --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpe5us_3w0_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075081
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var sum int = 0\n    for i, x := range lst {\n        if i%2 == 0 {\n   \
    \         sum += x\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpu8_51m9f_test.go:38: expected '%!s(int=88)', got '%!s(int=4)'\n  \
    \  --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpu8_51m9f_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=12)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpu8_51m9f_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpu8_51m9f_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=10)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075081
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    if len(lst) < 2 {\n        return -1\n    }\n    if len(lst) == 0 {\n   \
    \     return 0\n    }\n    if len(lst) == 1 {\n        return lst[0]\n    }\n\
    \    if len(lst) == 2 {\n        return lst[0] + lst[1]\n    }\n    sum, i :=\
    \ lst[0], 1\n    for ; i <= len(lst)-1; i++ {\n        if i % 2 == 0 {\n     \
    \       sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpxlh_gliz_test.go:50: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpxlh_gliz_test.go:50: expected\
    \ '%!s(int=122)', got '%!s(int=12)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpxlh_gliz_test.go:50: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpxlh_gliz_test.go:50: expected\
    \ '%!s(int=12)', got '%!s(int=10)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075081
- exit_code: 2
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    if lst==nil || len(lst)==0 {\n        return -1\n    }\n    i := 0\n    for\
    \ _, v := range lst {\n        if i%2 == 0 {\n            lst.Set(i, v+lst[i])\n\
    \        }\n        i++\n    }\n    return lst[0]\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2cfdhej__test.go:19:17: lst.Set undefined (type []int has no field or
    method Set)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075081
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for i := 0; i < len(lst); i += 2 {\n        sum += lst[i]\n\
    \    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n\
    \     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     {\
    \ actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpa56lvmc9_test.go:36: expected '%!s(int=88)', got '%!s(int=4)'\n  \
    \  --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpa56lvmc9_test.go:36: expected\
    \ '%!s(int=122)', got '%!s(int=12)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpa56lvmc9_test.go:36: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpa56lvmc9_test.go:36: expected\
    \ '%!s(int=12)', got '%!s(int=10)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075081
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    lastOddIndex := len(lst)-1\n    for _, i := range lst {\n \
    \       if i % 2 == 1 {\n            sum += i\n        } else {\n            lastOddIndex--\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpkr5aeq03_test.go:41: expected '%!s(int=88)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpkr5aeq03_test.go:41: expected\
    \ '%!s(int=122)', got '%!s(int=12)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpkr5aeq03_test.go:41: expected '%!s(int=0)', got '%!s(int=7)'\n   \
    \ --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpkr5aeq03_test.go:41: expected\
    \ '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\n\
    FAIL\n"
  timestamp: 1660075081
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var sum = 0\n    for i, _ := range lst {\n        if i%2 == 0 {\n       \
    \     sum += lst[i]\n        }\n    }\n    return sum\n}\n</code>\n<|/ a tags=go,loops,arrays,function,for-loop\
    \ |>\n<| a dscore=1 tags=go,loops,arrays,function,for-loop |>\n<code>\nfunc TestAdd(t\
    \ *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp4zyfe3ml_test.go:21:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075081
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    if len(lst)%2 != 0 {\n        fmt.Println(\"Not an even number of elements\"\
    )\n        return 0\n    }\n    var sum = 0\n    for idx, value := range lst {\n\
    \        if idx % 2 == 0 {\n            sum += value\n        }\n    }\n    return\
    \ sum\n}\n`\n},\n{\n    name:    \"add_test\",\n    source:  `package add_test\n\
    \nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc TestAdd(t *testing.T) {\n\
    \  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}),\
    \ expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected:\
    \ 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     {\
    \ actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments\n/tmp/tmpgem60f84_test.go:25:1: expected declaration,\
    \ found `\n},\n{\n    name:    \"add_test\",\n    source:  `\n"
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075081
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    if len(lst) == 0 {\n        return 0\n    }\n\n    ret := 0\n    for i :=\
    \ 0; i < len(lst); i++ {\n        if i % 2 == 0 {\n            ret += lst[i]\n\
    \        }\n    }\n    return ret\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpe92i6ejv_test.go:42: expected '%!s(int=88)', got '%!s(int=4)'\n  \
    \  --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpe92i6ejv_test.go:42: expected\
    \ '%!s(int=122)', got '%!s(int=12)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpe92i6ejv_test.go:42: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpe92i6ejv_test.go:42: expected\
    \ '%!s(int=12)', got '%!s(int=10)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660075082
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    if len(lst) < 1 {\n        fmt.Println(\"list too small\")\n        return\
    \ 0\n    }\n    var sum int = 0\n    for index, val := range lst {\n        if\
    \ index % 2 == 0 {\n            sum += val\n        }\n    }\n    return sum\n\
    }\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]int{4, 88}), expected: 88 },\n     { actual: candidate([]int{4,\
    \ 5, 6, 7, 2, 122}), expected: 122 },\n     { actual: candidate([]int{4, 0, 6,\
    \ 7}), expected: 0 },\n     { actual: candidate([]int{4, 4, 6, 8}), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmppxc_q327_test.go:42: expected '%!s(int=88)', got '%!s(int=4)'\n  \
    \  --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmppxc_q327_test.go:42: expected\
    \ '%!s(int=122)', got '%!s(int=12)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmppxc_q327_test.go:42: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmppxc_q327_test.go:42: expected\
    \ '%!s(int=12)', got '%!s(int=10)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660075083
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, v := range lst {\n        if v & 1 == 1 {\n        \
    \    sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpf5o_ex5p_test.go:38: expected '%!s(int=88)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpf5o_ex5p_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=12)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpf5o_ex5p_test.go:38: expected '%!s(int=0)', got '%!s(int=7)'\n   \
    \ --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpf5o_ex5p_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075083
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    for _, e := range lst {\n        if e%2 != 0 {\n            return e + 2\n\
    \        }\n    }\n\n    return 0\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpsws1gj58_test.go:38: expected '%!s(int=88)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpsws1gj58_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=7)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpsws1gj58_test.go:38: expected '%!s(int=0)', got '%!s(int=9)'\n   \
    \ --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpsws1gj58_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075083
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, value := range lst {\n        if value%2 == 1 {\n  \
    \          sum += value\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t\
    \ *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpecl8s514_test.go:38: expected '%!s(int=88)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpecl8s514_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=12)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpecl8s514_test.go:38: expected '%!s(int=0)', got '%!s(int=7)'\n   \
    \ --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpecl8s514_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660075083
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    if len(lst) < 2 {\n        fmt.Printf(\"add only works on a list of at least\
    \ 2 elements.\\n\")\n        return -1\n    }\n\n    even_sum := 0\n    for i,\
    \ v := range lst {\n        if i%2 == 0 {\n            even_sum += v\n       \
    \ }\n    }\n\n    return even_sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmp1thr9bf3_test.go:44: expected '%!s(int=88)', got '%!s(int=4)'\n  \
    \  --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmp1thr9bf3_test.go:44: expected\
    \ '%!s(int=122)', got '%!s(int=12)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmp1thr9bf3_test.go:44: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmp1thr9bf3_test.go:44: expected\
    \ '%!s(int=12)', got '%!s(int=10)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075083
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    if len(lst) < 2 {\n        return -1\n    }\n    \n    result := 0\n    \n\
    \    for i := 1; i < len(lst); i++ {\n        if lst[i] % 2 == 0 {\n         \
    \   result += lst[i]\n        }\n    }\n    \n    return result\n}\n\nfunc TestAdd(t\
    \ *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__1 (0.00s)\n\
    \        tmppd3go0rs_test.go:44: expected '%!s(int=122)', got '%!s(int=130)'\n\
    \    --- FAIL: TestAdd/test_num__2 (0.00s)\n        tmppd3go0rs_test.go:44: expected\
    \ '%!s(int=0)', got '%!s(int=6)'\n    --- FAIL: TestAdd/test_num__3 (0.00s)\n\
    \        tmppd3go0rs_test.go:44: expected '%!s(int=12)', got '%!s(int=18)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075083
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var sum = 0\n    for _, v := range lst {\n        sum += v % 2 == 0 ? v :\
    \ 0\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate :=\
    \ add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2g0j7nk7_test.go:15:27: illegal character U+003F ''?''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075082
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    if len(lst) == 0 {\n        return 0\n    }\n    if len(lst) == 1 {\n   \
    \     return lst[0]\n    }\n    \n    // find the index that has odd index\n \
    \   oddIndex := len(lst)\n    for i := 0; i < len(lst); i++ {\n        if i %\
    \ 2 != 0 {\n            oddIndex = i\n        }\n    }\n\n    // add the elements\
    \ at the odd index positions..\n    var sum int\n    for i := 0; i < len(lst);\
    \ i++ {\n        if i < oddIndex {\n            sum += lst[i]\n        }\n   \
    \ }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n\
    \     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     {\
    \ actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmp9wfk3geu_test.go:54: expected '%!s(int=88)', got '%!s(int=4)'\n  \
    \  --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmp9wfk3geu_test.go:54: expected\
    \ '%!s(int=122)', got '%!s(int=24)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmp9wfk3geu_test.go:54: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmp9wfk3geu_test.go:54: expected\
    \ '%!s(int=12)', got '%!s(int=14)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660075083
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for i, val := range lst {\n        if i%2 == 0 {\n        \
    \    sum += val\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpnrl0a8dk_test.go:38: expected '%!s(int=88)', got '%!s(int=4)'\n  \
    \  --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpnrl0a8dk_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=12)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpnrl0a8dk_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpnrl0a8dk_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=10)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075079
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    res := 0\n    for _, v := range lst {\n        if v%2 != 0 {\n          \
    \  res += v\n        }\n    }\n    return res\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| a tags=go |>\nYou can use reduce to solve this kind of problem:\n<code>\npackage\
    \ main\n\nimport (\n    \"fmt\"\n    \"math/rand\"\n    \"time\"\n)\n\nfunc TestAdd(t\
    \ *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpl64wepj4_test.go:21:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075082
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    result := 0\n    for _, val := range lst {\n        if val%2 != 0 {\n   \
    \         result += val\n        }\n    }\n    return result\n}\n\nfunc TestAdd(t\
    \ *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpoijtd4ud_test.go:38: expected '%!s(int=88)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpoijtd4ud_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=12)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpoijtd4ud_test.go:38: expected '%!s(int=0)', got '%!s(int=7)'\n   \
    \ --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpoijtd4ud_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075083
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    if len(lst) == 0 {\n        return -1\n    }\n\n    var ans = lst[0]\n  \
    \  for _, v := range lst[1:] {\n        if v%2 == 0 {\n            ans += v\n\
    \        }\n    }\n\n    return ans\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpkurl7ozk_test.go:43: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpkurl7ozk_test.go:43: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpkurl7ozk_test.go:43: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpkurl7ozk_test.go:43: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075083
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var result int = 0\n    length := len(lst)\n\n    for i := 0; i < length;\
    \ i++ {\n        result += lst[i] + lst[length+i]\n    }\n\n    return result\n\
    }\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]int{4, 88}), expected: 88 },\n     { actual: candidate([]int{4,\
    \ 5, 6, 7, 2, 122}), expected: 122 },\n     { actual: candidate([]int{4, 0, 6,\
    \ 7}), expected: 0 },\n     { actual: candidate([]int{4, 4, 6, 8}), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\npanic: runtime error: index out of range [2]\
    \ with length 2 [recovered]\n\tpanic: runtime error: index out of range [2] with\
    \ length 2\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512620, 0xc000160000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512620,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.add(...)\n\t/tmp/tmpkjfsytek_test.go:17\n\
    command-line-arguments_test.TestAdd(0x0?)\n\t/tmp/tmpkjfsytek_test.go:30 +0x47f\n\
    testing.tRunner(0xc000103520, 0x527f38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075083
- exit_code: 2
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    if len(lst) == 0 {\n        return -1\n    }\n    sum := 0\n    i := len(lst)\
    \ - 1\n    for i; i > 0; i-- {\n        if lst[i] % 2 == 0 {\n            sum\
    \ += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp25jds92d_test.go:18:9: i (variable of type int) is not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075083
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var even, odd int\n    for _, e := range lst {\n        if even+1 %2 == 1\
    \ {\n            even += e\n        }\n        if odd+1 %2 == 0 {\n          \
    \  odd += e\n        }\n    }\n    return even\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| a dscore=0 |>\nI wrote a recursive function as below. This will find the solution\
    \ in O(n logn) time.\n<code>\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n\
    \     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     {\
    \ actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpr1dt904q_test.go:24:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075082
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, x := range lst {\n        if x%2 == 1 {\n          \
    \  sum += x\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmp6oonlp9q_test.go:38: expected '%!s(int=88)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmp6oonlp9q_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=12)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmp6oonlp9q_test.go:38: expected '%!s(int=0)', got '%!s(int=7)'\n   \
    \ --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmp6oonlp9q_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075083
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var sum int\n    for _, v := range lst {\n        if v%2 != 0 {\n       \
    \     sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpvkpuc5k2_test.go:38: expected '%!s(int=88)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpvkpuc5k2_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=12)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpvkpuc5k2_test.go:38: expected '%!s(int=0)', got '%!s(int=7)'\n   \
    \ --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpvkpuc5k2_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660075083
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var sum int\n    for i := 0; i < len(lst); i++ {\n        if i%2 != 0 {\n\
    \            sum += lst[i]\n        }\n    }\n    return sum\n}\n</code>\nThen\
    \ we can run these tests on each package, for example:\n<code>\ngo test -args\
    \ ./...\n</code>\n<|/ a |>\n<| c |>\nThis looks good, thank you! I have been trying\
    \ to get my head around the type system in Go and you really helped me to understand\
    \ it a bit. Just a few things: first, your example code has a syntax error (missing\
    \ parentheses around `sum`), second, when I ran the test for the first package\
    \ (by doing `go test -args ./...` it failed, but when I ran it for `../...` it\
    \ passed. Can you explain what the difference is? Thanks!\n<|/ c |>\n<| c |>\n\
    My guess would be that the `go test` command is looking at the current directory\
    \ and running the tests on those packages, but the `go test` command doesn't automatically\
    \ do that (it would be very weird if it did), so you have to specify `../...`\
    \ to run those tests on the packages in the parent directory.\n<|/ c |>\n<| c\
    \ |>\nOh I see! Thank you so much!\n<|/ c |>\n<| c |>\nOne thing that really helped\
    \ me understand this was the ability to `go test` multiple packages at once using\
    \ the `-args` flag. For example, I could do `go test -args ./... ./...` which\
    \ would only run the tests on the first two packages (assuming they had no tests).\n\
    <|/ c |>\n<| a |>\nA more idiomatic and more performant (no explicit types) solution:\n\
    <code>\npackage main\n\nimport (\n    \"fmt\"\n    \"os\"\n    \"reflect\"\n)\n\
    \nfunc TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{4, 88}), expected: 88 },\n     { actual: candidate([]int{4,\
    \ 5, 6, 7, 2, 122}), expected: 122 },\n     { actual: candidate([]int{4, 0, 6,\
    \ 7}), expected: 0 },\n     { actual: candidate([]int{4, 4, 6, 8}), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmphggrp6pe_test.go:21:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075082
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var ans int\n    for idx, val := range lst {\n        if idx % 2 == 0 {\n\
    \            ans += val\n        }\n    }\n    return ans\n}\n\nfunc TestAdd(t\
    \ *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmp7whveru5_test.go:38: expected '%!s(int=88)', got '%!s(int=4)'\n  \
    \  --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmp7whveru5_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=12)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmp7whveru5_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmp7whveru5_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=10)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    if len(lst) == 0 {\n        return 0\n    }\n    idx := 0\n    result :=\
    \ 0\n    for idx < len(lst) {\n        if idx%2 == 0 {\n            result +=\
    \ lst[idx]\n        }\n        idx++\n    }\n    return result\n}\n\nfunc TestAdd(t\
    \ *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpjiirhkrr_test.go:43: expected '%!s(int=88)', got '%!s(int=4)'\n  \
    \  --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpjiirhkrr_test.go:43: expected\
    \ '%!s(int=122)', got '%!s(int=12)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpjiirhkrr_test.go:43: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpjiirhkrr_test.go:43: expected\
    \ '%!s(int=12)', got '%!s(int=10)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var evens, odds int\n    for _, v := range lst {\n        if v%2 == 0 {\n\
    \            evens += v\n        } else {\n            odds += v\n        }\n\
    \    }\n    return evens + odds\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmp9av75d3f_test.go:40: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmp9av75d3f_test.go:40: expected\
    \ '%!s(int=122)', got '%!s(int=146)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmp9av75d3f_test.go:40: expected '%!s(int=0)', got '%!s(int=17)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmp9av75d3f_test.go:40: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    return 0\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n     {\
    \ actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     { actual:\
    \ candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmplq37e5d2_test.go:32: expected '%!s(int=88)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmplq37e5d2_test.go:32: expected\
    \ '%!s(int=122)', got '%!s(int=0)'\n    --- FAIL: TestAdd/test_num__3 (0.00s)\n\
    \        tmplq37e5d2_test.go:32: expected '%!s(int=12)', got '%!s(int=0)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074779
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n          \
    \  sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n          \
    \  sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    if len(lst) < 2 {\n        return -1\n    }\n\n    for i := 1; i < len(lst);\
    \ i++ {\n        if lst[i] % 2 != 0 {\n            lst[i] += lst[i-1]\n      \
    \  }\n    }\n\n    return lst[0]\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThe\
    \ code is in C, not Go. OP is probably looking for a Go solution.\n<|/ c |>\n\
    <| c |>\nthe question does say that \"I need a golang solution\" and also \"not\
    \ C, not Go\"... I don't see any reason for me to convert this code, I just thought\
    \ it might be helpful to show a solution in Go just for comparison. Also, the\
    \ question only ever talks about adding a \"single element\", so this is not a\
    \ question of \"a code golf challenge problem\".\n<|/ c |>\n<| c |>\nThe question\
    \ is \"a golang challenge problem\". It's also tagged \"c\", not \"c++\", which\
    \ means that the OP has a lot of C experience and knowledge to share.\n<|/ c |>\n\
    <| c |>\nThe question says nothing about not using C, Go, Java, or any other language.\
    \ The OP has also stated that it must be \"golang only\". So I assume the OP has\
    \ a lot of C experience and knowledge to share.\n<|/ c |>\n<| c |>\nYes, but my\
    \ point is that \"golang only\" is a bit of a vague. There are many languages\
    \ that you could consider \"golang only\", such as C#, Java, C++, and Ruby. But\
    \ there are other languages (Python and Ruby) where you can write this more concisely,\
    \ even more concisely, and even more concisely with some added overhead. I'm just\
    \ saying there are other languages, not just \"golang only\".\n<|/ c |>\n<| a\
    \ dscore=0 |>\n<code>\npackage main\n\nimport \"fmt\"\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpihbkcxo4_test.go:25:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075083
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    for i := 0; i < len(lst); i++ {\n        if i%2 != 0 {\n            lst[i]\
    \ += lst[i]\n        }\n    }\n    return lst[0]\n}\n</code>\n<|/ a dscore=1 tags=go\
    \ |>\n<| a dscore=1 tags=go |>\n<code>\npackage main\n\nimport (\n    \"bufio\"\
    \n    \"fmt\"\n    \"log\"\n    \"os\"\n    \"strings\"\n    \"time\"\n    \"\
    unicode\"\n)\n\nvar data []string\nvar words []string\nvar finalWords []string\n\
    \nfunc TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{4, 88}), expected: 88 },\n     { actual: candidate([]int{4,\
    \ 5, 6, 7, 2, 122}), expected: 122 },\n     { actual: candidate([]int{4, 0, 6,\
    \ 7}), expected: 0 },\n     { actual: candidate([]int{4, 4, 6, 8}), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmprbn8i6b7_test.go:20:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075083
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, i := range lst {\n        if i % 2 == 0 {\n        \
    \    sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmprxmyiwzz_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmprxmyiwzz_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmprxmyiwzz_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmprxmyiwzz_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var ans int\n    for _, v := range lst {\n        if v%2 != 0 {\n       \
    \     ans += v\n        }\n    }\n    return ans\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmp7ay764b2_test.go:38: expected '%!s(int=88)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmp7ay764b2_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=12)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmp7ay764b2_test.go:38: expected '%!s(int=0)', got '%!s(int=7)'\n   \
    \ --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmp7ay764b2_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum, count := 0, 0\n    for _, e := range lst {\n        if count % 2 ==\
    \ 0 {\n            sum += e\n        }\n        count++\n    }\n    return sum\n\
    }\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]int{4, 88}), expected: 88 },\n     { actual: candidate([]int{4,\
    \ 5, 6, 7, 2, 122}), expected: 122 },\n     { actual: candidate([]int{4, 0, 6,\
    \ 7}), expected: 0 },\n     { actual: candidate([]int{4, 4, 6, 8}), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpn5ofzkw2_test.go:39: expected '%!s(int=88)', got '%!s(int=4)'\n  \
    \  --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpn5ofzkw2_test.go:39: expected\
    \ '%!s(int=122)', got '%!s(int=12)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpn5ofzkw2_test.go:39: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpn5ofzkw2_test.go:39: expected\
    \ '%!s(int=12)', got '%!s(int=10)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    if lst[len(lst)-1] % 2 == 0 {\n        fmt.Println(\"Last element is even\"\
    )\n    }\n    s := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n   \
    \         s += v\n        }\n    }\n    return s\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "Last element is even\nLast element is even\nLast element is even\n--- FAIL:\
    \ TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n        tmpb3swkm_j_test.go:41:\
    \ expected '%!s(int=88)', got '%!s(int=92)'\n    --- FAIL: TestAdd/test_num__1\
    \ (0.00s)\n        tmpb3swkm_j_test.go:41: expected '%!s(int=122)', got '%!s(int=134)'\n\
    \    --- FAIL: TestAdd/test_num__2 (0.00s)\n        tmpb3swkm_j_test.go:41: expected\
    \ '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestAdd/test_num__3 (0.00s)\n\
    \        tmpb3swkm_j_test.go:41: expected '%!s(int=12)', got '%!s(int=22)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    if len(lst) == 0 {\n        return -1\n    }\n    if len(lst) == 1 {\n  \
    \      return lst[0]\n    }\n    i := 0\n    for ; i < len(lst); i++ {\n     \
    \   if i % 2 == 0 {\n            lst[i] = lst[i] + lst[i+1]\n        }\n    }\n\
    \    return lst[len(lst) - 1]\n}\nfunc TestAdd(t *testing.T) {\n  candidate :=\
    \ add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpbs4hz95r_test.go:43: expected '%!s(int=0)', got '%!s(int=7)'\n   \
    \ --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpbs4hz95r_test.go:43: expected\
    \ '%!s(int=12)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075085
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    evenOdd := make([]int, 0, len(lst))\n    for _, value := range lst {\n  \
    \      if value % 2 == 0 {\n            evenOdd = append(evenOdd, value)\n   \
    \     }\n    }\n    return len(evenOdd)\n}\n\nfunc TestAdd(t *testing.T) {\n \
    \ candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}),\
    \ expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected:\
    \ 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     {\
    \ actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpq8nf43ot_test.go:38: expected '%!s(int=88)', got '%!s(int=2)'\n  \
    \  --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpq8nf43ot_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=4)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpq8nf43ot_test.go:38: expected '%!s(int=0)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpq8nf43ot_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\n\
    FAIL\n"
  timestamp: 1660075085
- exit_code: 2
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    if lst == nil {\n        return 0\n    }\n    if lst%2 == 1 {\n        x\
    \ := lst[0]\n        for i := 0; i < len(lst); i++ {\n            if i%2 == 1\
    \ {\n                x = x + lst[i]\n            }\n        }\n        return\
    \ x\n    }\n    return 0\n}\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n\
    \     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     {\
    \ actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0s9ez_z9_test.go:16:12: cannot convert 2 (untyped int constant) to []int

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    for i := 0; i < len(lst)/2; i++ {\n        lst[i]+=lst[i+1:][i]\n    }\n\
    \    return lst[len(lst)/2]\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate :=\
    \ add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__1 (0.00s)\n\
    \        tmp9fcgxq49_test.go:35: expected '%!s(int=122)', got '%!s(int=7)'\n \
    \   --- FAIL: TestAdd/test_num__2 (0.00s)\n        tmp9fcgxq49_test.go:35: expected\
    \ '%!s(int=0)', got '%!s(int=6)'\n    --- FAIL: TestAdd/test_num__3 (0.00s)\n\
    \        tmp9fcgxq49_test.go:35: expected '%!s(int=12)', got '%!s(int=6)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075085
- exit_code: 2
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    evens := make([]int, len(lst))\n    for index, value := range lst {\n   \
    \     if index%2 == 1 {\n            evens[index] = value\n        }\n    }\n\
    \    return sum(evens)\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n\
    \     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     {\
    \ actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpe36qn_bb_test.go:19:12: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075085
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    // Your code here\n    if lst[0] != 0 {\n        return 0\n    }\n    n :=\
    \ 0\n    for idx, val := range lst {\n        if idx % 2 == 0 {\n            n\
    \ += val\n        }\n    }\n    return n\n}\n\nfunc TestAdd(t *testing.T) {\n\
    \  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}),\
    \ expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected:\
    \ 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     {\
    \ actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmp5u23u019_test.go:42: expected '%!s(int=88)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmp5u23u019_test.go:42: expected\
    \ '%!s(int=122)', got '%!s(int=0)'\n    --- FAIL: TestAdd/test_num__3 (0.00s)\n\
    \        tmp5u23u019_test.go:42: expected '%!s(int=12)', got '%!s(int=0)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075085
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var res int\n    for i := 0; i < len(lst); i += 2 {\n        res = lst[i]\
    \ + lst[i+1]\n    }\n    return res\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmp61_iltid_test.go:36: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmp61_iltid_test.go:36: expected\
    \ '%!s(int=122)', got '%!s(int=124)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmp61_iltid_test.go:36: expected '%!s(int=0)', got '%!s(int=13)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmp61_iltid_test.go:36: expected\
    \ '%!s(int=12)', got '%!s(int=14)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075085
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var sum = 0\n    switch len(lst) {\n    case 0:\n        return -1\n    case\
    \ 1:\n        return lst[0]\n    case 2:\n        sum += lst[0] + lst[1]\n   \
    \     return sum\n    default:\n        odds := lst[1%len(lst)]\n        evens\
    \ := lst[0%len(lst)]\n        sum += odds + evens\n        return sum\n    }\n\
    }\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]int{4, 88}), expected: 88 },\n     { actual: candidate([]int{4,\
    \ 5, 6, 7, 2, 122}), expected: 122 },\n     { actual: candidate([]int{4, 0, 6,\
    \ 7}), expected: 0 },\n     { actual: candidate([]int{4, 4, 6, 8}), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmp1pd0kuq7_test.go:46: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmp1pd0kuq7_test.go:46: expected\
    \ '%!s(int=122)', got '%!s(int=9)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmp1pd0kuq7_test.go:46: expected '%!s(int=0)', got '%!s(int=4)'\n   \
    \ --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmp1pd0kuq7_test.go:46: expected\
    \ '%!s(int=12)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\n\
    FAIL\n"
  timestamp: 1660075085
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var sum int\n    for _, x := range lst {\n        sum += x % 2 // even numbers\n\
    \    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n\
    \     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     {\
    \ actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmp12_frlka_test.go:36: expected '%!s(int=88)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmp12_frlka_test.go:36: expected\
    \ '%!s(int=122)', got '%!s(int=2)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmp12_frlka_test.go:36: expected '%!s(int=0)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmp12_frlka_test.go:36: expected\
    \ '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075085
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var result int\n    if len(lst) < 2 {\n        fmt.Println(\"Error: must\
    \ provide at least two elements to sum\")\n    }\n    for _, value := range lst\
    \ {\n        if value % 2 == 0 {\n            result = result + value\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpliyz70ko_test.go:41: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpliyz70ko_test.go:41: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpliyz70ko_test.go:41: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpliyz70ko_test.go:41: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660075085
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    return lst[len(lst)-1]\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate :=\
    \ add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpt84t_jaf_test.go:32: expected '%!s(int=0)', got '%!s(int=7)'\n   \
    \ --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpt84t_jaf_test.go:32: expected\
    \ '%!s(int=12)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075085
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n          \
    \  sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmps658d2c0_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmps658d2c0_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    return lst[1] + lst[2] + lst[3]\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\npanic: runtime error: index out of range [2]\
    \ with length 2 [recovered]\n\tpanic: runtime error: index out of range [2] with\
    \ length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.add(...)\n\t/tmp/tmplev60j0z_test.go:13\n\
    command-line-arguments_test.TestAdd(0x0?)\n\t/tmp/tmplev60j0z_test.go:23 +0x1b\n\
    testing.tRunner(0xc0000da1a0, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075085
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var sum int\n    for _, e := range lst {\n        if e%2 != 0 {\n       \
    \     sum += e\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpr1qv0put_test.go:38: expected '%!s(int=88)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpr1qv0put_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=12)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpr1qv0put_test.go:38: expected '%!s(int=0)', got '%!s(int=7)'\n   \
    \ --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpr1qv0put_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075085
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var sum int\n    for _, v := range lst {\n        sum += v\n    }\n    sum\
    \ /= 2\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n\
    \     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     {\
    \ actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmp4buyorsy_test.go:37: expected '%!s(int=88)', got '%!s(int=46)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmp4buyorsy_test.go:37: expected\
    \ '%!s(int=122)', got '%!s(int=73)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmp4buyorsy_test.go:37: expected '%!s(int=0)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmp4buyorsy_test.go:37: expected\
    \ '%!s(int=12)', got '%!s(int=11)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075085
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, e := range lst {\n        if e%2 == 1 {\n          \
    \  sum += e\n        }\n    }\n    return sum\n}\nfunc TestAdd(t *testing.T) {\n\
    \  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}),\
    \ expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected:\
    \ 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     {\
    \ actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmplzi3mbkf_test.go:37: expected '%!s(int=88)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmplzi3mbkf_test.go:37: expected\
    \ '%!s(int=122)', got '%!s(int=12)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmplzi3mbkf_test.go:37: expected '%!s(int=0)', got '%!s(int=7)'\n   \
    \ --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmplzi3mbkf_test.go:37: expected\
    \ '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    if len(lst) == 0 {\n        return 0\n    }\n    even := 0\n    odd := 0\n\
    \    for _, num := range lst {\n        if num%2 == 0 {\n            even++\n\
    \        } else {\n            odd++\n        }\n    }\n    return even + odd\n\
    }\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]int{4, 88}), expected: 88 },\n     { actual: candidate([]int{4,\
    \ 5, 6, 7, 2, 122}), expected: 122 },\n     { actual: candidate([]int{4, 0, 6,\
    \ 7}), expected: 0 },\n     { actual: candidate([]int{4, 4, 6, 8}), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmp4p11sc22_test.go:44: expected '%!s(int=88)', got '%!s(int=2)'\n  \
    \  --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmp4p11sc22_test.go:44: expected\
    \ '%!s(int=122)', got '%!s(int=6)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmp4p11sc22_test.go:44: expected '%!s(int=0)', got '%!s(int=4)'\n   \
    \ --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmp4p11sc22_test.go:44: expected\
    \ '%!s(int=12)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var sum int\n    for _, item := range lst {\n        if item % 2 == 0 {\n\
    \            sum += item\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t\
    \ *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpbgsalac9_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpbgsalac9_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpbgsalac9_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpbgsalac9_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    result := 0\n    for i := range lst {\n        if i%2 == 0 {\n          \
    \  result += lst[i]\n        }\n    }\n    return result\n}\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpks2y0e_e_test.go:37: expected '%!s(int=88)', got '%!s(int=4)'\n  \
    \  --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpks2y0e_e_test.go:37: expected\
    \ '%!s(int=122)', got '%!s(int=12)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpks2y0e_e_test.go:37: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpks2y0e_e_test.go:37: expected\
    \ '%!s(int=12)', got '%!s(int=10)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var ret int\n    for _, i := range lst {\n        if i%2 == 0 {\n       \
    \     ret += i\n        }\n    }\n    return ret\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpl8buk192_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpl8buk192_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpl8buk192_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpl8buk192_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for i := 0; i < len(lst); i += 2 {\n        sum += lst[i]\n\
    \    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n\
    \     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     {\
    \ actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpa56lvmc9_test.go:36: expected '%!s(int=88)', got '%!s(int=4)'\n  \
    \  --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpa56lvmc9_test.go:36: expected\
    \ '%!s(int=122)', got '%!s(int=12)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpa56lvmc9_test.go:36: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpa56lvmc9_test.go:36: expected\
    \ '%!s(int=12)', got '%!s(int=10)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075081
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    result := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n       \
    \     result += v\n        }\n    }\n    return result\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpafp64_hp_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpafp64_hp_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpafp64_hp_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpafp64_hp_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    if len(lst) <= 1 {\n        return lst[0]\n    }\n    sum := lst[0]\n   \
    \ for i := 1; i < len(lst); i++ {\n        if i % 2 == 1 {\n            sum +=\
    \ lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n\
    \  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}),\
    \ expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected:\
    \ 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     {\
    \ actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpl6semtzn_test.go:41: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpl6semtzn_test.go:41: expected\
    \ '%!s(int=122)', got '%!s(int=138)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpl6semtzn_test.go:41: expected '%!s(int=0)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpl6semtzn_test.go:41: expected\
    \ '%!s(int=12)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    evenCount := 0\n    for i, v := range lst {\n        if i%2 != 0 {\n    \
    \        evenCount += v\n        }\n    }\n    return evenCount\n}\n\nfunc TestAdd(t\
    \ *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__1 (0.00s)\n\
    \        tmp5sk97k6c_test.go:38: expected '%!s(int=122)', got '%!s(int=134)'\n\
    \    --- FAIL: TestAdd/test_num__2 (0.00s)\n        tmp5sk97k6c_test.go:38: expected\
    \ '%!s(int=0)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\n\
    FAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    if len(lst) == 0 {\n        return -1\n    }\n    even := 0\n    odd := 0\n\
    \    for _, v := range lst {\n        if v%2 == 0 {\n            even += v\n \
    \       } else {\n            odd += v\n        }\n    }\n    return even+odd\n\
    }\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]int{4, 88}), expected: 88 },\n     { actual: candidate([]int{4,\
    \ 5, 6, 7, 2, 122}), expected: 122 },\n     { actual: candidate([]int{4, 0, 6,\
    \ 7}), expected: 0 },\n     { actual: candidate([]int{4, 4, 6, 8}), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpb83wkz4c_test.go:44: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpb83wkz4c_test.go:44: expected\
    \ '%!s(int=122)', got '%!s(int=146)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpb83wkz4c_test.go:44: expected '%!s(int=0)', got '%!s(int=17)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpb83wkz4c_test.go:44: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075087
- exit_code: 2
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    evens := make([]int, 0)\n    oddbys := make([]int, 0)\n\n    for i, v :=\
    \ range lst {\n        if i%2 == 0 {\n            evens = append(evens, v)\n \
    \       } else {\n            oddbys = append(oddbys, v)\n        }\n    }\n\n\
    \    return sum(evens, oddbys)\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppjn1r9ov_test.go:24:12: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var res int = 0\n    for _, v := range lst {\n        if v & 1 == 1 {\n \
    \           res += v\n        }\n    }\n    return res\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpf6r533g8_test.go:38: expected '%!s(int=88)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpf6r533g8_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=12)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpf6r533g8_test.go:38: expected '%!s(int=0)', got '%!s(int=7)'\n   \
    \ --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpf6r533g8_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075087
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    return 0\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n     {\
    \ actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     { actual:\
    \ candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmplq37e5d2_test.go:32: expected '%!s(int=88)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmplq37e5d2_test.go:32: expected\
    \ '%!s(int=122)', got '%!s(int=0)'\n    --- FAIL: TestAdd/test_num__3 (0.00s)\n\
    \        tmplq37e5d2_test.go:32: expected '%!s(int=12)', got '%!s(int=0)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074779
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var x int\n    idx := len(lst)\n    for i := idx; i >= 0; i-- {\n       \
    \ if i % 2 == 0 {\n            x += (lst[i])\n        }\n    }\n    return x\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a tags=go |>\nHere is a solution without loop\n\
    <code>\npackage main\n\nimport (\n    \"fmt\"\n)\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3iliygwk_test.go:22:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var total int\n    total += lst[0]\n    for i := 1; i < len(lst); i++ {\n\
    \        if lst[i]%2 != 0 {\n            total += lst[i]\n        }\n    }\n \
    \   return total\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n     {\
    \ actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     { actual:\
    \ candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpib_g7u2b_test.go:39: expected '%!s(int=88)', got '%!s(int=4)'\n  \
    \  --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpib_g7u2b_test.go:39: expected\
    \ '%!s(int=122)', got '%!s(int=16)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpib_g7u2b_test.go:39: expected '%!s(int=0)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpib_g7u2b_test.go:39: expected\
    \ '%!s(int=12)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660075087
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    // Your code here\n    sum := 0\n    for _, v := range lst {\n        if\
    \ v%2 == 0 {\n            sum += v\n        }\n    }\n    return sum\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{4, 88}), expected: 88 },\n     { actual: candidate([]int{4,\
    \ 5, 6, 7, 2, 122}), expected: 122 },\n     { actual: candidate([]int{4, 0, 6,\
    \ 7}), expected: 0 },\n     { actual: candidate([]int{4, 4, 6, 8}), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpgf6gi9in_test.go:39: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpgf6gi9in_test.go:39: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpgf6gi9in_test.go:39: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpgf6gi9in_test.go:39: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075087
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    return 0\n}\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n     {\
    \ actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     { actual:\
    \ candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpafu2d9du_test.go:31: expected '%!s(int=88)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpafu2d9du_test.go:31: expected\
    \ '%!s(int=122)', got '%!s(int=0)'\n    --- FAIL: TestAdd/test_num__3 (0.00s)\n\
    \        tmpafu2d9du_test.go:31: expected '%!s(int=12)', got '%!s(int=0)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075075
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    total := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n        \
    \    total += v\n        }\n    }\n    return total\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpw17gj0h1_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpw17gj0h1_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpw17gj0h1_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpw17gj0h1_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075088
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var result int\n    for _, val := range lst {\n        if val%2 == 1 {\n\
    \            result += val\n        }\n    }\n    return result\n}\n\nfunc TestAdd(t\
    \ *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmp1zlatnuo_test.go:38: expected '%!s(int=88)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmp1zlatnuo_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=12)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmp1zlatnuo_test.go:38: expected '%!s(int=0)', got '%!s(int=7)'\n   \
    \ --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmp1zlatnuo_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075088
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, x := range lst {\n        if x%2 == 0 {\n          \
    \  sum += x\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpnh5qqwlr_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpnh5qqwlr_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpnh5qqwlr_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpnh5qqwlr_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\n\
    FAIL\n"
  timestamp: 1660075088
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var res int\n    for _, x := range lst {\n        if x%2 == 0 {\n       \
    \     res += x\n        }\n    }\n    return res\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmp6rqinuq1_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmp6rqinuq1_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmp6rqinuq1_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmp6rqinuq1_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075088
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    // TODO: implement here\n    return 0\n}\n\nfunc TestAdd(t *testing.T) {\n\
    \  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}),\
    \ expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected:\
    \ 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     {\
    \ actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpfs4f20nb_test.go:33: expected '%!s(int=88)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpfs4f20nb_test.go:33: expected\
    \ '%!s(int=122)', got '%!s(int=0)'\n    --- FAIL: TestAdd/test_num__3 (0.00s)\n\
    \        tmpfs4f20nb_test.go:33: expected '%!s(int=12)', got '%!s(int=0)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075088
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    if len(lst) == 0 {\n        return 0\n    }\n    total := 0\n    for _, v\
    \ := range lst {\n        total += v\n        if total % 2 == 0 {\n          \
    \  return total\n        }\n    }\n    return total\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpvkyj0a43_test.go:42: expected '%!s(int=88)', got '%!s(int=4)'\n  \
    \  --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpvkyj0a43_test.go:42: expected\
    \ '%!s(int=122)', got '%!s(int=4)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpvkyj0a43_test.go:42: expected '%!s(int=0)', got '%!s(int=4)'\n   \
    \ --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpvkyj0a43_test.go:42: expected\
    \ '%!s(int=12)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075088
- exit_code: 2
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var evens []int\n    for _, x := range lst {\n        if x%2 == 0 {\n   \
    \         evens = append(evens, x)\n        }\n    }\n    return sum(evens)\n\
    }\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]int{4, 88}), expected: 88 },\n     { actual: candidate([]int{4,\
    \ 5, 6, 7, 2, 122}), expected: 122 },\n     { actual: candidate([]int{4, 0, 6,\
    \ 7}), expected: 0 },\n     { actual: candidate([]int{4, 4, 6, 8}), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8m2bvwz5_test.go:19:12: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075087
- exit_code: 2
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    if lst == nil {\n        return -1\n    }\n    evenIndices := make([]int,\
    \ len(lst))\n    for i := 0; i < len(lst); i++ {\n        if i%2 == 0 {\n    \
    \        evenIndices[i/2] += lst[i]\n        }\n    }\n    sum(evenIndices)\n\
    }\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]int{4, 88}), expected: 88 },\n     { actual: candidate([]int{4,\
    \ 5, 6, 7, 2, 122}), expected: 122 },\n     { actual: candidate([]int{4, 0, 6,\
    \ 7}), expected: 0 },\n     { actual: candidate([]int{4, 4, 6, 8}), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp660524e_test.go:22:5: undefined: sum

    /tmp/tmpp660524e_test.go:23:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075087
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    even := 0\n    for index, value := range lst {\n        odd := index\n  \
    \      if odd == 0 {\n            even = value\n        } else {\n           \
    \ even += value\n        }\n    }\n    return even\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| a dscore=2 tags=go,slice |>\nIf you want to iterate a slice backwards,\
    \ you can use for range:\n<code>\npackage main\n\nimport \"fmt\"\n\nfunc TestAdd(t\
    \ *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmphv2kn8au_test.go:24:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075087
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for i, el := range lst {\n        if i%2 == 0 {\n         \
    \   sum += el\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpphg1r887_test.go:38: expected '%!s(int=88)', got '%!s(int=4)'\n  \
    \  --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpphg1r887_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=12)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpphg1r887_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpphg1r887_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=10)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075088
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    even := 1\n    for _, v := range lst {\n        if v%2 == 0 {\n         \
    \   even += v\n        }\n    }\n    return even\n}\n</code>\n<|/ a tags=go |>\n\
    <| a dscore=1 tags=go |>\n<code>\npackage main\n\nimport (\n        \"fmt\"\n\
    \        \"strings\"\n)\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n\
    \     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     {\
    \ actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpllwh6y0z_test.go:21:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075087
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    result := 0\n    for i := 0; i < len(lst); i += 2 {\n        result = lst[i]\
    \ + result\n    }\n    return result\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpa284gbx0_test.go:36: expected '%!s(int=88)', got '%!s(int=4)'\n  \
    \  --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpa284gbx0_test.go:36: expected\
    \ '%!s(int=122)', got '%!s(int=12)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpa284gbx0_test.go:36: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpa284gbx0_test.go:36: expected\
    \ '%!s(int=12)', got '%!s(int=10)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075088
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var res int\n    for i := 0; i < len(lst); i += 2 {\n        res += lst[i]\n\
    \    }\n    return res\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n\
    \     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     {\
    \ actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpojvgoxbz_test.go:36: expected '%!s(int=88)', got '%!s(int=4)'\n  \
    \  --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpojvgoxbz_test.go:36: expected\
    \ '%!s(int=122)', got '%!s(int=12)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpojvgoxbz_test.go:36: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpojvgoxbz_test.go:36: expected\
    \ '%!s(int=12)', got '%!s(int=10)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660075088
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for i := 0; i < len(lst); i = i + 2 {\n        if lst[i] %\
    \ 2 != 0 {\n            sum = lst[i] + sum\n        }\n    }\n    return sum\n\
    }\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]int{4, 88}), expected: 88 },\n     { actual: candidate([]int{4,\
    \ 5, 6, 7, 2, 122}), expected: 122 },\n     { actual: candidate([]int{4, 0, 6,\
    \ 7}), expected: 0 },\n     { actual: candidate([]int{4, 4, 6, 8}), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmp9xtmvfdr_test.go:38: expected '%!s(int=88)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmp9xtmvfdr_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=0)'\n    --- FAIL: TestAdd/test_num__3 (0.00s)\n\
    \        tmp9xtmvfdr_test.go:38: expected '%!s(int=12)', got '%!s(int=0)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075088
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    result := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n       \
    \     result += v\n        }\n    }\n    return result\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpafp64_hp_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpafp64_hp_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpafp64_hp_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpafp64_hp_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    if len(lst) < 2 {\n        return len(lst)\n    }\n\n    var evens int\n\
    \    var odds int\n\n    for _, i := range lst {\n        if i % 2 == 0 {\n  \
    \          evens += i\n        } else {\n            odds += i\n        }\n  \
    \  }\n\n    return evens + odds\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpb9zxfag7_test.go:47: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpb9zxfag7_test.go:47: expected\
    \ '%!s(int=122)', got '%!s(int=146)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpb9zxfag7_test.go:47: expected '%!s(int=0)', got '%!s(int=17)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpb9zxfag7_test.go:47: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    ret := 0\n    for _, i := range lst {\n        if i%2 != 0 {\n          \
    \  ret += i\n        }\n    }\n    return ret\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmp8l6m5zoq_test.go:38: expected '%!s(int=88)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmp8l6m5zoq_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=12)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmp8l6m5zoq_test.go:38: expected '%!s(int=0)', got '%!s(int=7)'\n   \
    \ --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmp8l6m5zoq_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075089
- exit_code: 2
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum = 0\n    for i := 0; i < len(lst); i = i+2 {\n        if lst[i] % 2 !=\
    \ 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{4, 88}), expected: 88 },\n     { actual: candidate([]int{4,\
    \ 5, 6, 7, 2, 122}), expected: 122 },\n     { actual: candidate([]int{4, 0, 6,\
    \ 7}), expected: 0 },\n     { actual: candidate([]int{4, 4, 6, 8}), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsldiaoyv_test.go:13:5: undefined: sum

    /tmp/tmpsldiaoyv_test.go:16:13: undefined: sum

    /tmp/tmpsldiaoyv_test.go:19:12: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075088
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    evenIndices := make([]int, len(lst))\n    oddIndices := make([]int, len(lst))\n\
    \n    count := 0\n    for idx := 0; idx < len(lst); idx++ {\n        if idx %\
    \ 2 == 0 {\n            evenIndices[count] = lst[idx]\n            count++\n \
    \       } else {\n            oddIndices[count] = lst[idx]\n            count++\n\
    \        }\n    }\n    return count * 2\n}\n\nfunc TestAdd(t *testing.T) {\n \
    \ candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}),\
    \ expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected:\
    \ 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     {\
    \ actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmp3sz98z0u_test.go:45: expected '%!s(int=88)', got '%!s(int=4)'\n  \
    \  --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmp3sz98z0u_test.go:45: expected\
    \ '%!s(int=122)', got '%!s(int=12)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmp3sz98z0u_test.go:45: expected '%!s(int=0)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmp3sz98z0u_test.go:45: expected\
    \ '%!s(int=12)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    // TODO: Implement this function\n    return 0\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpekwlxpex_test.go:33: expected '%!s(int=88)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpekwlxpex_test.go:33: expected\
    \ '%!s(int=122)', got '%!s(int=0)'\n    --- FAIL: TestAdd/test_num__3 (0.00s)\n\
    \        tmpekwlxpex_test.go:33: expected '%!s(int=12)', got '%!s(int=0)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var sum int\n    for _, value := range lst {\n        if value % 2 == 0 {\n\
    \            sum += value\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t\
    \ *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpqw1l0qyn_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpqw1l0qyn_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpqw1l0qyn_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpqw1l0qyn_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var sum = 0\n    for _, element := range lst {\n        if element%2 == 0\
    \ {\n            sum += element\n        }\n    }\n    return sum\n}\n`\n    }\
    \ else if name == \"add_test_types\" {\n        code = `// package add_test\n\n\
    import (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments\n/tmp/tmpd8xr2_og_test.go:21:1: expected declaration,\
    \ found `\n    } else if name == \"add_test_types\" {\n        code = `\n"
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075088
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    return lst[1::2] + lst[0::2]\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpjqoag63y_test.go:13:17: 2nd index required in 3-index slice

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075088
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    if len(lst) <= 0 {\n        return 0\n    }\n    x := lst[0]\n    for i :=\
    \ 1; i < len(lst); i++ {\n        if i%2 == 0 {\n            x += lst[i]\n   \
    \     }\n    }\n    return x\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate :=\
    \ add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpdbhyyx2p_test.go:41: expected '%!s(int=88)', got '%!s(int=4)'\n  \
    \  --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpdbhyyx2p_test.go:41: expected\
    \ '%!s(int=122)', got '%!s(int=12)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpdbhyyx2p_test.go:41: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpdbhyyx2p_test.go:41: expected\
    \ '%!s(int=12)', got '%!s(int=10)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var sum = 0\n    for _, i := range lst {\n        if i%2 == 1 {\n       \
    \     sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmp6rscwwb0_test.go:38: expected '%!s(int=88)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmp6rscwwb0_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=12)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmp6rscwwb0_test.go:38: expected '%!s(int=0)', got '%!s(int=7)'\n   \
    \ --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmp6rscwwb0_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for i := 0; i < len(lst); i += 2 {\n        sum += lst[i]\n\
    \    }\n    return sum\n}\n</code>\n<|/ a dscore=0 tags=go |>\n<| c |>\nYou don't\
    \ have to return anything. Just use `return`.\n<|/ c |>\n<| a tags=go |>\nHere\
    \ is a solution where we simply keep an running sum using a loop:\n<code>\npackage\
    \ main\n\nimport \"fmt\"\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n\
    \     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     {\
    \ actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2q_u77nr_test.go:19:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    return lst[len(lst)-1]\n}\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n\
    \     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     {\
    \ actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpnqfk55d7_test.go:31: expected '%!s(int=0)', got '%!s(int=7)'\n   \
    \ --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpnqfk55d7_test.go:31: expected\
    \ '%!s(int=12)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075090
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    result := 0\n    for _, number := range lst {\n        if number % 2 == 0\
    \ {\n            result += number\n        }\n    }\n    return result\n}\n\n\
    func TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{4, 88}), expected: 88 },\n     { actual: candidate([]int{4,\
    \ 5, 6, 7, 2, 122}), expected: 122 },\n     { actual: candidate([]int{4, 0, 6,\
    \ 7}), expected: 0 },\n     { actual: candidate([]int{4, 4, 6, 8}), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpxxiq_9bx_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpxxiq_9bx_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=134)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpxxiq_9bx_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpxxiq_9bx_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075090
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for _, i := range lst {\n        if i%2 == 1 {\n          \
    \  sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpxx36cltf_test.go:38: expected '%!s(int=88)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpxx36cltf_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=12)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpxx36cltf_test.go:38: expected '%!s(int=0)', got '%!s(int=7)'\n   \
    \ --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpxx36cltf_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 2
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    evens := make([]int, 0, len(lst))\n    for i := 0; i < len(lst); i++ {\n\
    \        if i % 2 == 0 {\n            evens = append(evens, lst[i])\n        }\n\
    \    }\n    return sum(evens)\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkx1qf3ep_test.go:19:12: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    result := 0\n    for _, v := range lst {\n        if v%2 != 0 {\n       \
    \     result += v\n        }\n    }\n    return result\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpjb01c5b9_test.go:38: expected '%!s(int=88)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpjb01c5b9_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=12)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpjb01c5b9_test.go:38: expected '%!s(int=0)', got '%!s(int=7)'\n   \
    \ --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpjb01c5b9_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\n\
    FAIL\n"
  timestamp: 1660075090
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var sum = 0\n    for i := 0; i < len(lst); i++ {\n        if i % 2 == 0 {\n\
    \            sum += lst[i]\n        }\n    }\n    return sum\n}\n</code>\n<|/\
    \ a |>\n<| c |>\nThe question was specifically asking how to do this in golang,\
    \ not just some arbitrary language.  In golang, the `sum` built-in is more idiomatic\
    \ than writing your own functions.  I edited my answer to point this out.\n<|/\
    \ c |>\n<| a tags=java,go,python,c++ |>\nI came up with something that would work\
    \ similar to your C++ example.\n<code>\npackage main\n\nimport \"fmt\"\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{4, 88}), expected: 88 },\n     { actual: candidate([]int{4,\
    \ 5, 6, 7, 2, 122}), expected: 122 },\n     { actual: candidate([]int{4, 0, 6,\
    \ 7}), expected: 0 },\n     { actual: candidate([]int{4, 4, 6, 8}), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmph5fqb9ep_test.go:21:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var sum int\n    for _, i := range lst {\n        sum += i\n    }\n    return\
    \ sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{4, 88}), expected: 88 },\n     { actual: candidate([]int{4,\
    \ 5, 6, 7, 2, 122}), expected: 122 },\n     { actual: candidate([]int{4, 0, 6,\
    \ 7}), expected: 0 },\n     { actual: candidate([]int{4, 4, 6, 8}), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpaj3pcolo_test.go:36: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpaj3pcolo_test.go:36: expected\
    \ '%!s(int=122)', got '%!s(int=146)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpaj3pcolo_test.go:36: expected '%!s(int=0)', got '%!s(int=17)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpaj3pcolo_test.go:36: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660075090
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    res := 0\n    for idx, e := range lst {\n        if idx%2 == 1 {\n      \
    \      res += e\n        }\n    }\n    return res\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__1 (0.00s)\n\
    \        tmp85q4_db__test.go:38: expected '%!s(int=122)', got '%!s(int=134)'\n\
    \    --- FAIL: TestAdd/test_num__2 (0.00s)\n        tmp85q4_db__test.go:38: expected\
    \ '%!s(int=0)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660075090
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    if len(lst) < 2 {\n        return lst[0]\n    }\n\n    var sum, i int\n\n\
    \    for i = 1; i < len(lst); i++ {\n        if i % 2 != 0 {\n            sum\
    \ += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__1 (0.00s)\n\
    \        tmpygwnezf__test.go:43: expected '%!s(int=122)', got '%!s(int=134)'\n\
    \    --- FAIL: TestAdd/test_num__2 (0.00s)\n        tmpygwnezf__test.go:43: expected\
    \ '%!s(int=0)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660075090
- exit_code: 2
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    evens := make([]int, 0, len(lst))\n    for _, x := range lst {\n        if\
    \ x % 2 == 0 {\n            evens = append(evens, x)\n        }\n    }\n\n   \
    \ return reduce(evens)\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n\
    \     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     {\
    \ actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv_j52twe_test.go:20:12: undefined: reduce

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075090
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var sum int = 0\n    for i, value := range lst {\n        if i%2 == 0 {\n\
    \            sum += value\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t\
    \ *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpiikoy2t1_test.go:38: expected '%!s(int=88)', got '%!s(int=4)'\n  \
    \  --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpiikoy2t1_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=12)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpiikoy2t1_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpiikoy2t1_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=10)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660075090
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    if len(lst) < 2 {\n        return -1\n    }\n\n    total := 0\n    for _,\
    \ i := range lst {\n        if i%2 != 0 {\n            total += i\n        }\n\
    \    }\n    return total\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n\
    \     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     {\
    \ actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmp918r7_7__test.go:42: expected '%!s(int=88)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmp918r7_7__test.go:42: expected\
    \ '%!s(int=122)', got '%!s(int=12)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmp918r7_7__test.go:42: expected '%!s(int=0)', got '%!s(int=7)'\n   \
    \ --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmp918r7_7__test.go:42: expected\
    \ '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660075090
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    i := 0\n    for i < len(lst) {\n        if lst[i] % 2 == 1\
    \ {\n            sum += lst[i]\n        }\n        i++\n    }\n    return sum\n\
    }\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{4, 88}), expected: 88 },\n     { actual: candidate([]int{4,\
    \ 5, 6, 7, 2, 122}), expected: 122 },\n     { actual: candidate([]int{4, 0, 6,\
    \ 7}), expected: 0 },\n     { actual: candidate([]int{4, 4, 6, 8}), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmp6o3w4rv1_test.go:39: expected '%!s(int=88)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmp6o3w4rv1_test.go:39: expected\
    \ '%!s(int=122)', got '%!s(int=12)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmp6o3w4rv1_test.go:39: expected '%!s(int=0)', got '%!s(int=7)'\n   \
    \ --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmp6o3w4rv1_test.go:39: expected\
    \ '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075090
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    if len(lst) < 2 {\n        return -1\n    }\n    if len(lst) < 3 {\n    \
    \    return -1\n    }\n    if len(lst) < 4 {\n        return -1\n    }\n    result\
    \ := 0\n    for _, index := range lst[3:] {\n        if index % 2 == 0 {\n   \
    \         result += index\n        }\n    }\n    return result\n}\n\nfunc TestAdd(t\
    \ *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpqjlburmv_test.go:47: expected '%!s(int=88)', got '%!s(int=-1)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpqjlburmv_test.go:47: expected\
    \ '%!s(int=122)', got '%!s(int=124)'\n    --- FAIL: TestAdd/test_num__3 (0.00s)\n\
    \        tmpqjlburmv_test.go:47: expected '%!s(int=12)', got '%!s(int=8)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075090
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    if len(lst) == 0 {\n        return -1\n    }\n    return lst[0] + add(lst[1:])\n\
    }\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]int{4, 88}), expected: 88 },\n     { actual: candidate([]int{4,\
    \ 5, 6, 7, 2, 122}), expected: 122 },\n     { actual: candidate([]int{4, 0, 6,\
    \ 7}), expected: 0 },\n     { actual: candidate([]int{4, 4, 6, 8}), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmplbj7qxk0_test.go:35: expected '%!s(int=88)', got '%!s(int=91)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmplbj7qxk0_test.go:35: expected\
    \ '%!s(int=122)', got '%!s(int=145)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmplbj7qxk0_test.go:35: expected '%!s(int=0)', got '%!s(int=16)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmplbj7qxk0_test.go:35: expected\
    \ '%!s(int=12)', got '%!s(int=21)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660075090
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var result int\n    for _, i := range lst {\n        if i % 2 == 1 {\n  \
    \          result += i\n        }\n    }\n    return result\n}\n\nfunc TestAdd(t\
    \ *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmppu89mj_n_test.go:38: expected '%!s(int=88)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmppu89mj_n_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=12)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmppu89mj_n_test.go:38: expected '%!s(int=0)', got '%!s(int=7)'\n   \
    \ --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmppu89mj_n_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\n\
    FAIL\n"
  timestamp: 1660075090
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    if len(lst) == 0 {\n        return -1\n    }\n\n    total := lst[0]\n   \
    \ for i := 1; i < len(lst); i++ {\n        total += lst[i]\n        if total%2\
    \ == 0 {\n            return total\n        }\n    }\n    return -1\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{4, 88}), expected: 88 },\n     { actual: candidate([]int{4,\
    \ 5, 6, 7, 2, 122}), expected: 122 },\n     { actual: candidate([]int{4, 0, 6,\
    \ 7}), expected: 0 },\n     { actual: candidate([]int{4, 4, 6, 8}), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpa5n333m8_test.go:43: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpa5n333m8_test.go:43: expected\
    \ '%!s(int=122)', got '%!s(int=22)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpa5n333m8_test.go:43: expected '%!s(int=0)', got '%!s(int=4)'\n   \
    \ --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpa5n333m8_test.go:43: expected\
    \ '%!s(int=12)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075090
- exit_code: 2
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    evens := make([]int, 0, len(lst))\n    for i := 0; i < len(lst); i++ {\n\
    \        if i%2 == 0 {\n            evens = append(evens, lst[i])\n        }\n\
    \    }\n    return sum(evens)\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfz2op_q0_test.go:19:12: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075090
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var sum int\n    for i := 0; i < len(lst); i++ {\n        if i%2 == 0 {\n\
    \            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t\
    \ *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpvm136i5x_test.go:38: expected '%!s(int=88)', got '%!s(int=4)'\n  \
    \  --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpvm136i5x_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=12)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpvm136i5x_test.go:38: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpvm136i5x_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=10)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var sum int\n    for _, v := range lst {\n        sum += v\n        if v\
    \ & 1 == 1 {\n            sum++\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t\
    \ *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpkg4rzggu_test.go:39: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpkg4rzggu_test.go:39: expected\
    \ '%!s(int=122)', got '%!s(int=148)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpkg4rzggu_test.go:39: expected '%!s(int=0)', got '%!s(int=18)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpkg4rzggu_test.go:39: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\n\
    FAIL\n"
  timestamp: 1660075090
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    return 0\n}\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n     {\
    \ actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     { actual:\
    \ candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpafu2d9du_test.go:31: expected '%!s(int=88)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpafu2d9du_test.go:31: expected\
    \ '%!s(int=122)', got '%!s(int=0)'\n    --- FAIL: TestAdd/test_num__3 (0.00s)\n\
    \        tmpafu2d9du_test.go:31: expected '%!s(int=12)', got '%!s(int=0)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075075
