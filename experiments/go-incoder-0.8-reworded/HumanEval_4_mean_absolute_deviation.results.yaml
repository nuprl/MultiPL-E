language: go_test.go
name: HumanEval_4_mean_absolute_deviation
results:
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var x_mean float64\n    var mad float64\n    for _, number := range numbers\
    \ {\n        x_mean += number\n    }\n    x_mean /= float64(len(numbers))\n  \
    \  mad := 0.0\n    for _, number := range numbers {\n        mad += math.Pow(number\
    \ - x_mean, 2)\n    }\n    return mad / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3djm2oyn_test.go:22:9: no new variables on left side of :=

    /tmp/tmp3djm2oyn_test.go:24:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074244
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var mean float64\n    for _, number := range numbers {\n        mean\
    \ += number\n    }\n    mean /= float64(len(numbers))\n\n    var deviation float64\n\
    \    for _, number := range numbers {\n        deviation += math.Pow(number -\
    \ mean, 2)\n    }\n    return math.Sqrt(deviation)\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_ajqm8rs_test.go:24:22: undefined: math

    /tmp/tmp_ajqm8rs_test.go:26:12: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074244
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    mean := mean(numbers)\n\n    return average(numbers, mean)\n}\n\nfunc\
    \ TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1uebdd5v_test.go:16:13: undefined: mean

    /tmp/tmp1uebdd5v_test.go:18:12: undefined: average

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074244
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    mean := mean(numbers)\n\n    deviation := 0.0\n\n    for _, number :=\
    \ range numbers {\n        deviation += (fmt.Sprintf(\"%0.02f\", float64(number)\
    \ - float64(mean))) / fmt.Sprintf(\"%0.02f\", number)\n    }\n\n    return deviation\
    \ / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwmxrml4a_test.go:16:13: undefined: mean

    /tmp/tmpwmxrml4a_test.go:21:22: invalid operation: operator / not defined on (fmt.Sprintf("%0.02f",
    float64(number) - float64(mean))) (value of type string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074244
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) < 2 {\n        fmt.Printf(\"Error: need at least 2 elements\
    \ to calculate MAD.\\n\")\n        return -1.0\n    }\n    mean := 0.0\n    for\
    \ _, number := range numbers {\n        mean += number\n    }\n    mean /= float64(len(numbers))\n\
    \    for _, number := range numbers {\n        mean -= number\n    }\n    mean\
    \ /= float64(len(numbers))\n    return mean\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmps_pz732z_test.go:47: expected '%!s(float64=0.5)', got '%!s(float64=-0.75)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmps_pz732z_test.go:47:\
    \ expected '%!s(float64=1)', got '%!s(float64=-1.875)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmps_pz732z_test.go:47: expected '%!s(float64=1.2)', got '%!s(float64=-2.4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074244
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0\n    var mean float64 = 0\n    for _, v := range\
    \ numbers {\n        sum += v\n        mean += v\n    }\n    return mean / float64(len(numbers))\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmp6efk3hjd_test.go:40: expected '%!s(float64=0.5)', got '%!s(float64=1.5)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmp6efk3hjd_test.go:40:\
    \ expected '%!s(float64=1)', got '%!s(float64=2.5)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmp6efk3hjd_test.go:40: expected '%!s(float64=1.2)', got '%!s(float64=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074244
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    mean := sum(numbers) / float64(len(numbers))\n    diff := make([]float64,\
    \ len(numbers))\n    for i := 0; i < len(numbers); i++ {\n        diff[i] = numbers[i]\
    \ - mean\n    }\n    return mean(diff)\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqu8cx_rv_test.go:16:13: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074244
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    mean := mean(numbers)\n    return sum(numbers) - mean * mean\n}\n\nfunc\
    \ TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4xa7u848_test.go:16:13: undefined: mean

    /tmp/tmp4xa7u848_test.go:17:12: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074244
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    mean := mean(numbers)\n    sumSquared := 0.0\n    for _, value := range\
    \ numbers {\n        sumSquared += math.Pow(value - mean, 2)\n    }\n    return\
    \ math.Sqrt(sumSquared)\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n\
    \  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmps852l6p3_test.go:16:13: undefined: mean

    /tmp/tmps852l6p3_test.go:19:23: undefined: math

    /tmp/tmps852l6p3_test.go:21:12: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074244
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if numbers == nil {\n        return 0.0\n    }\n    numbers := normalizeArray(numbers)\n\
    \    meanValue := average(numbers)\n    return average(mapFloat64ArrayToFloat64(numbers,\
    \ func(i int) float64 {\n        diffValue := numbers[i] - meanValue\n       \
    \ return math.Abs(diffValue)\n    }))\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcau9t5bj_test.go:19:13: no new variables on left side of :=

    /tmp/tmpcau9t5bj_test.go:19:16: undefined: normalizeArray

    /tmp/tmpcau9t5bj_test.go:20:18: undefined: average

    /tmp/tmpcau9t5bj_test.go:21:12: undefined: average

    /tmp/tmpcau9t5bj_test.go:21:20: undefined: mapFloat64ArrayToFloat64

    /tmp/tmpcau9t5bj_test.go:23:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074244
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var x float64 = 0.0\n    if len(numbers) == 0 {\n        return 0.0\n\
    \    }\n    for _, n := range numbers {\n        x += n\n    }\n    x /= float64(len(numbers))\n\
    \    var result float64 = 0.0\n    for _, n := range numbers {\n        result\
    \ += math.Abs(n - x)\n    }\n    return result / float64(len(numbers))\n}\n\n\
    func TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzd1ny55e_test.go:26:19: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074244
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    mean := float64(mean(numbers))\n    numbers := sortedNumbers(numbers)\n\
    \    diff := []float64{}\n    for _, number := range numbers {\n        diff :=\
    \ append(diff, math.Abs(number-mean))\n    }\n    mad := float64(mean(diff))\n\
    \    return mad\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate\
    \ := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2qq0_bh8_test.go:16:21: undefined: mean

    /tmp/tmp2qq0_bh8_test.go:17:13: no new variables on left side of :=

    /tmp/tmp2qq0_bh8_test.go:17:16: undefined: sortedNumbers

    /tmp/tmp2qq0_bh8_test.go:20:9: diff declared but not used

    /tmp/tmp2qq0_bh8_test.go:20:30: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074244
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if numbers == nil {\n        return 0.0\n    }\n    mean := float64(mean(numbers))\n\
    \    diff := make([]float64, len(numbers))\n    for i, _ := range diff[:len(numbers)]\
    \ {\n        diff[i] = numbers[i] - mean\n    }\n    return mean(diff)\n}\n\n\
    func TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8514url5_test.go:19:21: undefined: mean

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074244
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    mean := 0.0\n    for _, number := range numbers {\n        mean += float64(number)\n\
    \    }\n    mean /= float64(len(numbers))\n    return math.Sqrt(math.Pow(float64(mean-math.Trunc(mean)),\
    \ 2))\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4m3w3g4i_test.go:21:12: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074244
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var mean float64\n    var total float64\n    var sum float64\n    for\
    \ _, n := range numbers {\n        total += n\n        sum += n\n    }\n    mean\
    \ = sum / float64(len(numbers))\n    for _, n := range numbers {\n        mean\
    \ -= n\n    }\n    return mean / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmpvy7hn2w4_test.go:45: expected '%!s(float64=0.5)', got '%!s(float64=-0.75)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmpvy7hn2w4_test.go:45:\
    \ expected '%!s(float64=1)', got '%!s(float64=-1.875)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmpvy7hn2w4_test.go:45: expected '%!s(float64=1.2)', got '%!s(float64=-2.4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074244
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if numbers == nil || len(numbers) == 0 {\n        return math.NaN()\n\
    \    }\n\n    sum := 0.0\n    mean := 0.0\n\n    for _, number := range numbers\
    \ {\n        sum += number\n        mean += number\n    }\n\n    mean /= float64(len(numbers))\n\
    \n    return math.Sqrt(sum / float64(len(numbers)) - mean*mean)\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkuz1oyti_test.go:17:16: undefined: math

    /tmp/tmpkuz1oyti_test.go:30:12: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074244
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    mean := 0.0\n    if len(numbers) == 0 {\n        return 0.0\n    }\n\
    \    for _, number := range numbers {\n        mean += number\n    }\n    mean\
    \ /= float64(len(numbers))\n\n    var mad = 0.0\n    for _, number := range numbers\
    \ {\n        absolute := math.Abs(number - mean)\n        mad += absolute\n  \
    \  }\n    return mad / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpepaossfz_test.go:27:21: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074244
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var mean float64 = 0\n    for _, v := range numbers {\n        mean +=\
    \ v\n    }\n    mean /= float64(len(numbers))\n\n    diff := 0.0\n    for _, v\
    \ := range numbers {\n        diff += (v - mean) * (v - mean)\n    }\n    diff\
    \ /= float64(len(numbers))\n\n    return math.Sqrt(diff)\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjg3zf4gf_test.go:28:12: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074244
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var mean float64\n    for _, num := range numbers {\n        mean +=\
    \ num\n    }\n    return mean / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmpgtg6vkas_test.go:38: expected '%!s(float64=0.5)', got '%!s(float64=1.5)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmpgtg6vkas_test.go:38:\
    \ expected '%!s(float64=1)', got '%!s(float64=2.5)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmpgtg6vkas_test.go:38: expected '%!s(float64=1.2)', got '%!s(float64=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074244
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var total float64\n    var total float64\n    for _, number := range\
    \ numbers {\n        total += number\n    }\n    return total / float64(len(numbers))\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpvgj9lyx8_test.go:17:9:\
    \ total redeclared in this block\n\t/tmp/tmpvgj9lyx8_test.go:16:9: other declaration\
    \ of total\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074244
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum_squares float64\n    for _, number := range numbers {\n     \
    \   sum_squares += (number - float64(len(numbers))/float64(len(numbers)-1))*(number\
    \ - float64(len(numbers))/float64(len(numbers)-1))\n    }\n    return sum_squares\
    \ / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__1\
    \ (0.00s)\n        tmp_eetwpsr_test.go:38: expected '%!s(float64=1)', got '%!s(float64=2.6111111111111116)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__2 (0.00s)\n        tmp_eetwpsr_test.go:38:\
    \ expected '%!s(float64=1.2)', got '%!s(float64=5.0625)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074244
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    n := len(numbers)\n    if len(numbers) < 2 {\n        fmt.Println(\"\
    Not enough numbers to compute MAD. Numbers: \", numbers)\n        return NAN\n\
    \    }\n\n    var mad_sum = 0.0\n    for _, number := range numbers {\n      \
    \  mad_sum += (number - mean(numbers))*(number - mean(numbers))\n    }\n    mad_sum\
    \ /= float64(n)\n\n    for _, number := range numbers {\n        if number > mean(numbers)\
    \ {\n            return NAN\n        }\n    }\n\n    return mad_sum / float64(n)\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnqtrsuje_test.go:19:16: undefined: NAN

    /tmp/tmpnqtrsuje_test.go:24:30: undefined: mean

    /tmp/tmpnqtrsuje_test.go:29:21: undefined: mean

    /tmp/tmpnqtrsuje_test.go:30:20: undefined: NAN

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074244
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) < 1 {\n        return 0\n    }\n    if len(numbers) ==\
    \ 1 {\n        return numbers[0]\n    }\n    avg := mean_(numbers)\n    diff :=\
    \ make([]float64, len(numbers))\n    for i := range numbers {\n        diff[i]\
    \ = numbers[i] - avg\n    }\n    return mean_(diff)\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa6u6kwia_test.go:22:12: undefined: mean_

    /tmp/tmpa6u6kwia_test.go:27:12: undefined: mean_

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074244
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var mu float64 = 0\n    var sum float64 = 0\n    for _, number := range\
    \ numbers {\n        sum += number\n        mu += number * number\n    }\n   \
    \ return sum / float64(len(numbers)) - mu / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmp72rpv1ob_test.go:40: expected '%!s(float64=0.5)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmp72rpv1ob_test.go:40:\
    \ expected '%!s(float64=1)', got '%!s(float64=-5)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmp72rpv1ob_test.go:40: expected '%!s(float64=1.2)', got '%!s(float64=-8)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074246
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    mean := mean(numbers)\n    result := 0.0\n    for _, number := range\
    \ numbers {\n        result += math.Abs(number - mean)\n    }\n    return result\
    \ / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2_648t3__test.go:16:13: undefined: mean

    /tmp/tmp2_648t3__test.go:19:19: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074246
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    avg := mean(numbers)\n    var mad float64\n    for _, x := range numbers\
    \ {\n        mad += math.Abs(x-avg)\n    }\n    return mad / float64(len(numbers))\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq4cfteeb_test.go:16:12: undefined: mean

    /tmp/tmpq4cfteeb_test.go:19:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074246
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    // Sum the absolute value of the difference from each number\n    //\
    \ to the mean of the numbers. Then divide by the number of numbers.\n    // To\
    \ avoid overflow, make sure we do not divide by 0 here.\n    var sumOfDifferences\
    \ float64\n    for _, number := range numbers {\n        sumOfDifferences += (number\
    \ - meanOfNumbers(numbers))\n    }\n    return sumOfDifferences / float64(len(numbers))\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnhrgsel6_test.go:21:39: undefined: meanOfNumbers

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074246
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    mean := mean(numbers)\n    var mad float64 = 0.0\n    for _, n := range\
    \ numbers {\n        mad += math.Abs(n - mean)\n    }\n    return mad / float64(len(numbers))\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgh85693c_test.go:16:13: undefined: mean

    /tmp/tmpgh85693c_test.go:19:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074246
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    // http://en.wikipedia.org/wiki/Mean_square_root\n    m := mean(numbers)\n\
    \    mad, _ := mean_absolute_deviation_fast(numbers)\n    return mad\n}\n\nfunc\
    \ TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa04pnm3g_test.go:17:10: undefined: mean

    /tmp/tmpa04pnm3g_test.go:18:15: undefined: mean_absolute_deviation_fast

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074246
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) < 2 {\n        return math.NaN()\n    }\n    mean :=\
    \ float64(numbers[0])\n    if len(numbers) == 2 {\n        return math.Sqrt(math.Pow(mean-numbers[1],2))\n\
    \    }\n    var MAD float64\n    for _, number := range numbers {\n        MAD\
    \ += math.Abs(number-mean)\n        mean = number\n    }\n    return MAD / float64(len(numbers))\n\
    }\n`\n\treturn code\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n \
    \ candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpys5pwkei_test.go:30:1: raw string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074245
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) < 2 {\n        return 0.0\n    }\n\n    if len(numbers)\
    \ == 1 {\n        return numbers[0]\n    }\n\n    mean := mean(numbers)\n\n  \
    \  var sum float64 = 0\n    var mdevs []float64\n    for _, number := range numbers\
    \ {\n        sum += number\n        mdevs = append(mdevs, math.Abs(number - mean))\n\
    \    }\n    mdev := sum(mdevs) / float64(len(mdevs))\n    return mdev\n}\n\nfunc\
    \ TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpat05306d_test.go:24:13: undefined: mean

    /tmp/tmpat05306d_test.go:30:31: undefined: math

    /tmp/tmpat05306d_test.go:32:13: invalid operation: cannot call non-function sum
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074246
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    n := len(numbers)\n    mean := 0.0\n    mean_of_numbers := 0.0\n    mean\
    \ += numbers[0]\n    for i := 1; i < n; i++ {\n        mean_of_numbers += numbers[i]\n\
    \        mean += numbers[i]\n    }\n    mean_of_numbers /= n\n    return mean_of_numbers\
    \ - mean\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate :=\
    \ mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyq7cwdsi_test.go:24:5: invalid operation: mean_of_numbers /= n (mismatched
    types float64 and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074246
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    mean := mean(numbers)\n    return mean(numbers) - mean\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxynoebtl_test.go:16:13: undefined: mean

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074246
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var mean float64\n    for _, number := range numbers {\n        mean\
    \ += number\n    }\n    mean = mean / float64(len(numbers))\n    diff := make([]float64,\
    \ len(numbers))\n    for i, number := range numbers {\n        diff[i] += (number\
    \ - mean)\n    }\n    return math.Sqrt(mean(diff))\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdrdyc8ls_test.go:25:12: undefined: math

    /tmp/tmpdrdyc8ls_test.go:25:22: invalid operation: cannot call non-function mean
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074246
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    mean := mean(numbers)\n    diff := []float64{}\n    for _, v := range\
    \ numbers {\n        diff = append(diff, v - mean)\n    }\n    return mean(diff)\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcbwno649_test.go:16:13: undefined: mean

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074246
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    // The centerpoint is the mean of this data.\n    sum := 0.0\n    n :=\
    \ 0.0\n    for _, number := range numbers {\n        sum += math.Abs(number)\n\
    \        n += 1\n    }\n    if n == 0 {\n        return 0.0\n    }\n    return\
    \ sum / n\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate\
    \ := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdikzrxyr_test.go:20:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074246
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    x := 0.0\n    for _, number := range numbers {\n        x += math.Abs(number-mean)\n\
    \    }\n    return x / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp33c0y9yz_test.go:18:14: undefined: math

    /tmp/tmp33c0y9yz_test.go:18:30: undefined: mean

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074246
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var mean float64 = mean(numbers)\n    var deltas []float64\n    for _,\
    \ number := range numbers {\n        deltas = append(deltas, number - mean)\n\
    \    }\n\n    delta := mean(deltas)\n    return delta\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4gm21sbt_test.go:16:24: undefined: mean

    /tmp/tmp4gm21sbt_test.go:22:14: invalid operation: cannot call non-function mean
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074246
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) <= 1 {\n        return 0.0\n    }\n    return meanAbsoluteDeviation(numbers,\
    \ numbers[0])\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate\
    \ := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpm965ex5f_test.go:19:12: undefined: meanAbsoluteDeviation

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074246
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) < 2 {\n        return math.NaN()\n    }\n    var sum\
    \ = 0.0\n    var sum_squares = 0.0\n    for _, number := range numbers {\n   \
    \     sum += number\n        sum_squares += math.Pow(number, 2)\n    }\n    return\
    \ math.Sqrt(sum_squares / float64(len(numbers))) / math.Sqrt(float64(len(numbers))-2)\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphgsrrccu_test.go:17:16: undefined: math

    /tmp/tmphgsrrccu_test.go:23:24: undefined: math

    /tmp/tmphgsrrccu_test.go:25:12: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074246
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    n := float64(len(numbers))\n    mean := float64(0)\n\n    for _, number\
    \ := range numbers {\n        mean += number\n    }\n    mean = mean / n\n\n \
    \   mean -= mean(numbers)\n    return mean\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjak449oi_test.go:24:13: invalid operation: cannot call non-function mean
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074246
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    mean := float64(mean(numbers))\n    return average(numbers, mean)\n}\n\
    \nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp61fewl4a_test.go:16:21: undefined: mean

    /tmp/tmp61fewl4a_test.go:17:12: undefined: average

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074246
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum_of_squared_differences float64\n    for _, number := range numbers\
    \ {\n        sum_of_squared_differences += (number - mean_square(numbers))\n \
    \   }\n    return sum_of_squared_differences / float64(len(numbers))\n}\n\nfunc\
    \ TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqto1jge__test.go:18:49: undefined: mean_square

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074246
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if numbers == nil || len(numbers) == 0 {\n        return 0\n    }\n\n\
    \    // Calculate the mean of the numbers\n    var mean float64\n    for _, number\
    \ := range numbers {\n        mean += number\n    }\n    mean /= float64(len(numbers))\n\
    \n    // Calculate the deviation for each number\n    var deviations []float64\n\
    \    for _, number := range numbers {\n        deviations += math.Abs(number -\
    \ mean)\n    }\n\n    // Return the mean of the deviations\n    return math.Sqrt(deviations\
    \ / float64(len(numbers)))\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqz5koqus_test.go:30:23: undefined: math

    /tmp/tmpqz5koqus_test.go:34:12: undefined: math

    /tmp/tmpqz5koqus_test.go:34:22: invalid operation: deviations / float64(len(numbers))
    (mismatched types []float64 and float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074246
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) == 0 {\n        return 0.0\n    }\n    mean := sum(numbers)\
    \ / float64(len(numbers))\n    diff := []float64{}\n    for _, number := range\
    \ numbers {\n        diff := []float64{(number - mean)}\n        diff := append(diff,\
    \ diff...)\n        mean = mean + diff[0]\n    }\n    return math.Sqrt(sum(diff)\
    \ / float64(len(diff)))\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n\
    \  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkq6deq_p_test.go:19:13: undefined: sum

    /tmp/tmpkq6deq_p_test.go:23:14: no new variables on left side of :=

    /tmp/tmpkq6deq_p_test.go:26:12: undefined: math

    /tmp/tmpkq6deq_p_test.go:26:22: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074246
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var mean_value float64\n    var num_values float64\n    mean := 0.0\n\
    \    for _, number := range numbers {\n        mean += number\n        num_values\
    \ += 1\n    }\n    mean_value = mean / num_values\n    for _, number := range\
    \ numbers {\n        mean -= number\n        num_values += 1\n    }\n    return\
    \ mean_value / num_values\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmp6dvdm0nl_test.go:46: expected '%!s(float64=0.5)', got '%!s(float64=0.375)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmp6dvdm0nl_test.go:46:\
    \ expected '%!s(float64=1)', got '%!s(float64=0.3125)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmp6dvdm0nl_test.go:46: expected '%!s(float64=1.2)', got '%!s(float64=0.3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074247
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if numbers == nil {\n        return math.NaN()\n    }\n    if len(numbers)\
    \ < 1 {\n        return math.NaN()\n    }\n    meanValue := 0.0\n    count :=\
    \ 0\n    for _, value := range numbers {\n        meanValue += value\n       \
    \ count += 1\n    }\n    meanValue /= float64(count)\n    mean := 0.0\n    count\
    \ := 0\n    for _, value := range numbers {\n        mean += math.Pow(value -\
    \ meanValue, 2)\n        count += 1\n    }\n    return math.Sqrt(mean/float64(count))\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8qnqpzo5_test.go:17:16: undefined: math

    /tmp/tmp8qnqpzo5_test.go:20:16: undefined: math

    /tmp/tmp8qnqpzo5_test.go:30:11: no new variables on left side of :=

    /tmp/tmp8qnqpzo5_test.go:32:17: undefined: math

    /tmp/tmp8qnqpzo5_test.go:35:12: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074247
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) == 0 {\n        return math.NaN()\n    }\n    var sum_x\
    \ float64 = 0.0\n    var sum_x2 float64 = 0.0\n    var sum_y float64 = 0.0\n \
    \   var num_items float64 = float64(len(numbers))\n    for _, number := range\
    \ numbers {\n        sum_x += number\n        sum_x2 += number * number\n    \
    \    sum_y += number\n    }\n    if num_items == 0 {\n        return math.NaN()\n\
    \    }\n    return (sum_x2 - sum_x * sum_x / num_items) / num_items\n}\n\nfunc\
    \ TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2zf83hfp_test.go:17:16: undefined: math

    /tmp/tmp2zf83hfp_test.go:29:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074248
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) == 0 {\n        return 0.0\n    }\n    mean := sum(numbers)\
    \ / float64(len(numbers))\n    diff := []float64{}\n    for _, number := range\
    \ numbers {\n        diff = append(diff, number-mean)\n    }\n    return mean(diff)\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpeeh6ueiw_test.go:19:13: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074248
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) < 1 {\n        return math.NaN()\n    }\n\n    mean :=\
    \ float64(0)\n\n    for _, number := range numbers {\n        mean += number\n\
    \    }\n\n    return mean / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj0owuu_f_test.go:17:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074248
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    mean := sum(numbers) / float64(len(numbers))\n    return mean(numbers)\
    \ - mean([]float64{mean})\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6_yrsf5y_test.go:16:13: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074248
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) < 2 {\n        panic(\"need at least 2 numbers\")\n \
    \   }\n    mean := sum(numbers)/float64(len(numbers))\n    diff := 0.0\n    for\
    \ _, number := range numbers {\n        diff += math.Abs(number - mean)\n    }\n\
    \    return math.Sqrt(diff / float64(len(numbers)))\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3k9d93x6_test.go:19:13: undefined: sum

    /tmp/tmp3k9d93x6_test.go:22:17: undefined: math

    /tmp/tmp3k9d93x6_test.go:24:12: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074248
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) == 0 {\n        return math.NaN()\n    }\n\n    mean\
    \ := mean(numbers)\n\n    // The center of the data set is the arithmetic mean\
    \ of the dataset,\n    // not the mean of the absolute values of the elements:\n\
    \    center := mean(absolute(numbers))\n\n    // Find the distance between the\
    \ centerpoint and the mean of the absolute\n    // values, then square that to\
    \ get the average absolute difference:\n    return average(absolute(numbers) -\
    \ center)\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate\
    \ := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppbj0musn_test.go:17:16: undefined: math

    /tmp/tmppbj0musn_test.go:20:13: undefined: mean

    /tmp/tmppbj0musn_test.go:24:20: undefined: absolute

    /tmp/tmppbj0musn_test.go:28:12: undefined: average

    /tmp/tmppbj0musn_test.go:28:20: undefined: absolute

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074248
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    mean := mean(numbers)\n    var mad = 0.0\n    for _, n := range numbers\
    \ {\n        mad = mad + math.Abs(n-mean)\n    }\n    return mad/float64(len(numbers))\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp00ja56ng_test.go:16:13: undefined: mean

    /tmp/tmp00ja56ng_test.go:19:21: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074248
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    mean := mean(numbers)\n    return mad(numbers, mean)\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpygxg62h5_test.go:16:13: undefined: mean

    /tmp/tmpygxg62h5_test.go:17:12: undefined: mad

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074117
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var mean float64\n    var sumSquares float64\n    var sum float64\n \
    \   for _, number := range numbers {\n        sum += number\n        sumSquares\
    \ += number * number\n    }\n    mean = sum / float64(len(numbers))\n    return\
    \ sumSquares / float64(len(numbers)) - mean * mean\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmpvmaou8uk_test.go:42: expected '%!s(float64=0.5)', got '%!s(float64=0.25)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmpvmaou8uk_test.go:42:\
    \ expected '%!s(float64=1)', got '%!s(float64=1.25)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmpvmaou8uk_test.go:42: expected '%!s(float64=1.2)', got '%!s(float64=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074248
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) < 2 {\n        return math.NaN()\n    }\n    mean :=\
    \ float64(0)\n    for _, number := range numbers {\n        mean += number\n \
    \   }\n    mean /= float64(len(numbers))\n    diff := []float64{}\n    for _,\
    \ number := range numbers {\n        diff = append(diff, float64(number-mean))\n\
    \    }\n    mad := math.Abs(diff[len(diff)-1]) / float64(len(diff))\n    return\
    \ mad\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpf3ph6gkl_test.go:17:16: undefined: math

    /tmp/tmpf3ph6gkl_test.go:28:12: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074248
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var mean float64 = 0\n    var sumOfSquares float64 = 0\n    var sumOfNumbers\
    \ float64 = 0\n    for _, number := range numbers {\n        sumOfNumbers += number\n\
    \        sumOfSquares += (number * number)\n    }\n    mean = sumOfNumbers / float64(len(numbers))\n\
    \    return sumOfSquares / float64(len(numbers)) - mean * mean\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmp74mcmeam_test.go:42: expected '%!s(float64=0.5)', got '%!s(float64=0.25)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmp74mcmeam_test.go:42:\
    \ expected '%!s(float64=1)', got '%!s(float64=1.25)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmp74mcmeam_test.go:42: expected '%!s(float64=1.2)', got '%!s(float64=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074248
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    mean := float64(0)\n    for _, number := range numbers {\n        mean\
    \ += number\n    }\n    return mean / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmp_8hwbyuk_test.go:38: expected '%!s(float64=0.5)', got '%!s(float64=1.5)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmp_8hwbyuk_test.go:38:\
    \ expected '%!s(float64=1)', got '%!s(float64=2.5)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmp_8hwbyuk_test.go:38: expected '%!s(float64=1.2)', got '%!s(float64=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074248
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) == 0 {\n        return 0.0\n    }\n    mean := float64(sum(numbers))\
    \ / float64(len(numbers))\n    return math.Sqrt(mean_absolute_deviation_test(numbers)-mean*mean)\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp22e5shn8_test.go:19:21: undefined: sum

    /tmp/tmp22e5shn8_test.go:20:12: undefined: math

    /tmp/tmp22e5shn8_test.go:20:22: undefined: mean_absolute_deviation_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074248
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    mean := mean(numbers)\n    numbers -= mean\n    return ma(numbers)\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0152j2yb_test.go:16:13: undefined: mean

    /tmp/tmp0152j2yb_test.go:18:12: undefined: ma

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074248
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var mean float64\n    for _, number := range numbers {\n        mean\
    \ += number\n    }\n    return mean / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmptpkdv6q__test.go:38: expected '%!s(float64=0.5)', got '%!s(float64=1.5)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmptpkdv6q__test.go:38:\
    \ expected '%!s(float64=1)', got '%!s(float64=2.5)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmptpkdv6q__test.go:38: expected '%!s(float64=1.2)', got '%!s(float64=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    mean := mean(numbers)\n    var sumOfSquares float64\n    for _, n :=\
    \ range numbers {\n        sumOfSquares += pow(n-mean, 2)\n    }\n    return sumOfSquares/float64(len(numbers))\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpben7js6k_test.go:16:13: undefined: mean

    /tmp/tmpben7js6k_test.go:19:25: undefined: pow

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074248
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var mean float64 = mean(numbers)\n    return std(numbers, mean)\n}\n\n\
    func TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmph3cuekql_test.go:16:24: undefined: mean

    /tmp/tmph3cuekql_test.go:17:12: undefined: std

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074248
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) < 1 {\n        fmt.Println(\"warning: cannot calculate\
    \ MAD for an empty list of numbers\")\n        return 0.0\n    }\n\n    mean :=\
    \ 0.0\n    for _, v := range numbers {\n        mean += v\n    }\n    mean /=\
    \ float64(len(numbers))\n\n    mad := 0.0\n    for _, v := range numbers {\n \
    \       diff := v - mean\n        mad += diff*diff\n    }\n    mad /= float64(len(numbers))\n\
    \n    return mad\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate\
    \ := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmpqz0x9tz2_test.go:52: expected '%!s(float64=0.5)', got '%!s(float64=0.25)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmpqz0x9tz2_test.go:52:\
    \ expected '%!s(float64=1)', got '%!s(float64=1.25)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmpqz0x9tz2_test.go:52: expected '%!s(float64=1.2)', got '%!s(float64=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074248
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) < 2 {\n        return -1\n    }\n\n    var avg float64\
    \ = float64(0)\n    for _, n := range numbers {\n        avg += (n - avg) / 2\n\
    \    }\n    return avg\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n\
    \  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmpe24lgdtc_test.go:42: expected '%!s(float64=0.5)', got '%!s(float64=1.25)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmpe24lgdtc_test.go:42:\
    \ expected '%!s(float64=1)', got '%!s(float64=3.0625)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmpe24lgdtc_test.go:42: expected '%!s(float64=1.2)', got '%!s(float64=4.03125)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074249
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    n := float64(len(numbers))\n    mads := make([]float64, n)\n    for i\
    \ := 0; i < n; i++ {\n        mads[i] = math.Abs(numbers[i] - mean(numbers))\n\
    \    }\n    return mean(mads) / n\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6vtfru_0_test.go:17:29: invalid argument: index n (variable of type float64)
    must be integer

    /tmp/tmp6vtfru_0_test.go:18:21: invalid operation: i < n (mismatched types int
    and float64)

    /tmp/tmp6vtfru_0_test.go:19:19: undefined: math

    /tmp/tmp6vtfru_0_test.go:19:41: undefined: mean

    /tmp/tmp6vtfru_0_test.go:21:12: undefined: mean

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074248
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    return float64(mean_absolute_deviation_calculator.calculate(numbers).toFloat64())\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpojsgbfcu_test.go:16:20: undefined: mean_absolute_deviation_calculator

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074248
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    mean := meanValue(numbers)\n    mad := 0.0\n    for _, n := range numbers\
    \ {\n        diff := n - mean\n        mad += diff*diff\n    }\n    return mad/float64(len(numbers))\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzodadvru_test.go:16:13: undefined: meanValue

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074248
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var mad float64\n    if len(numbers)%2 != 0 {\n        fmt.Printf(\"\
    ERROR: List must be an even number of elements\\n\")\n    }\n    for i := 0; i\
    \ < len(numbers); i += 2 {\n        mad += math.Abs(numbers[i] - numbers[i+1])\n\
    \    }\n    return mad / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu1e9ufkc_test.go:21:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074248
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    n := len(numbers)\n    mean := sum(numbers) / float64(n)\n    return\
    \ sum((numbers - mean)*(numbers - mean)) / float64(n)\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpztzd74od_test.go:17:13: undefined: sum

    /tmp/tmpztzd74od_test.go:18:12: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074249
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var x float64\n    for _, number := range numbers {\n        x += number\n\
    \    }\n    x /= float64(len(numbers))\n    mean := 0.0\n    for _, number :=\
    \ range numbers {\n        mean += math.Abs(number - mean)\n    }\n    mean /=\
    \ float64(len(numbers))\n    return mean - math.Abs(mean)\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcburje8__test.go:23:17: undefined: math

    /tmp/tmpcburje8__test.go:26:19: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074249
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if numbers == nil {\n        return math.NaN()\n    }\n    var mean float64\n\
    \    if len(numbers) > 0 {\n        mean, _ = mean_(numbers)\n    }\n    return\
    \ mean_absolute_deviation_(numbers, mean)\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj1fvuh2o_test.go:17:16: undefined: math

    /tmp/tmpj1fvuh2o_test.go:21:19: undefined: mean_

    /tmp/tmpj1fvuh2o_test.go:23:12: undefined: mean_absolute_deviation_

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074250
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) <= 1 {\n        return 0.0\n    }\n    means := sum(numbers)/float64(len(numbers))\n\
    \    sumOfSquares := 0.0\n    for _, value := range numbers {\n        sumOfSquares\
    \ += (value - means)*(value - means)\n    }\n    return math.Sqrt(sumOfSquares/float64(len(numbers)-1))\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfwaawllh_test.go:19:14: undefined: sum

    /tmp/tmpfwaawllh_test.go:24:12: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074250
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) == 0 {\n        return 0\n    }\n    mean := mean(numbers)\n\
    \    return mean(numbers)\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8ttiqjae_test.go:19:13: undefined: mean

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074250
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) < 1 {\n        panic(\"need at least one number\")\n\
    \    }\n\n    total := 0.0\n    diff := 0.0\n    for _, number := range numbers\
    \ {\n        total += number\n        diff += math.Abs(float64(number) - math.Trunc(float64(number)))\n\
    \    }\n\n    mean := total / float64(len(numbers))\n\n    return math.Sqrt(diff\
    \ / (float64(len(numbers)) * mean))\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi37ngnq__test.go:24:17: undefined: math

    /tmp/tmpi37ngnq__test.go:29:12: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074250
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) < 1 {\n        return math.NaN()\n    }\n    return meanAbsoluteDeviation(numbers)\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp397c1v71_test.go:17:16: undefined: math

    /tmp/tmp397c1v71_test.go:19:12: undefined: meanAbsoluteDeviation

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074250
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var mean float64\n    for _, v := range numbers {\n        mean += v\n\
    \    }\n    mean /= float64(len(numbers))\n    var mad, diff float64\n    for\
    \ _, v := range numbers {\n        diff += math.Abs(v - mean)\n    }\n    mad\
    \ = diff / float64(len(numbers))\n    return mad\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9tadw4lv_test.go:23:17: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074250
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    mean := 0.0\n    for _, value := range numbers {\n        mean += value\n\
    \    }\n    mean /= float64(len(numbers))\n\n    var deviations []float64\n  \
    \  for _, value := range numbers {\n        deviations = append(deviations, value-mean)\n\
    \    }\n\n    return average(deviations)\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgx3urd21_test.go:27:12: undefined: average

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074250
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    mean := 0.0\n    for _, number := range numbers {\n        mean += number\n\
    \    }\n    mean /= float64(len(numbers))\n    diffs := make([]float64, len(numbers))\n\
    \    for _, number := range numbers {\n        diffs[len(diffs)-1] += (number\
    \ - mean)\n    }\n    return diffs[len(diffs)-1] / float64(len(numbers)-1)\n}\n\
    \nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmpkjuxa4w6_test.go:43: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmpkjuxa4w6_test.go:43:\
    \ expected '%!s(float64=1)', got '%!s(float64=0)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmpkjuxa4w6_test.go:43: expected '%!s(float64=1.2)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074250
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    mean := mean(numbers)\n    numbers_sorted := sorted(numbers)\n    diff\
    \ := numbers_sorted[len(numbers_sorted)-1] - numbers_sorted[0]\n    return mean\
    \ + diff / float64(len(numbers_sorted))\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3ohv6531_test.go:16:13: undefined: mean

    /tmp/tmp3ohv6531_test.go:17:23: undefined: sorted

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074250
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if numbers == nil {\n        return 0\n    }\n\n    if len(numbers) <\
    \ 2 {\n        return 0\n    }\n\n    var result float64\n    var sum float64\n\
    \n    for _, number := range numbers {\n        sum += number\n    }\n\n    mean\
    \ := sum / float64(len(numbers))\n\n    for _, number := range numbers {\n   \
    \     result = result + (number - mean)**2\n    }\n\n    return result / float64(len(numbers)-1)\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp1q_cvkt_test.go:34:44: invalid operation: cannot indirect 2 (untyped
    int constant)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074250
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) < 1 {\n        return 0\n    }\n\n    meanNumber := mean_(numbers)\n\
    \n    return mad(numbers, meanNumber)\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5wzmi0gc_test.go:20:19: undefined: mean_

    /tmp/tmp5wzmi0gc_test.go:22:12: undefined: mad

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074250
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) == 0 {\n        fmt.Println(\"Error: need at least two\
    \ numbers\")\n        return -1.0\n    }\n    meanNum := 0.0 // mean of the dataset\n\
    \    sum := 0.0 // sum of differences between each number and the mean\n    for\
    \ _, number := range numbers {\n        sum += (number - meanNum)\n        meanNum\
    \ += number\n    }\n    meanNum /= float64(len(numbers))\n    return sum / float64(len(numbers))\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmph9c7xikk_test.go:45: expected '%!s(float64=0.5)', got '%!s(float64=1)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmph9c7xikk_test.go:45:\
    \ expected '%!s(float64=1)', got '%!s(float64=0)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmph9c7xikk_test.go:45: expected '%!s(float64=1.2)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074250
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var mean float64\n    var sumOfSquares float64\n    var sumOfSquareOfDifferences\
    \ float64\n    var mad float64\n    var total float64\n\n    // Sum of squares\
    \ and sum of squares of differences need to be initialised for each number\n \
    \   // as they will need to be kept while summing:\n    for _, number := range\
    \ numbers {\n        sumOfSquares = 0.0\n        sumOfSquareOfDifferences = 0.0\n\
    \        total += number\n        mean = (total * total) / float64(len(numbers))\n\
    \    }\n\n    // For each number, calculate the difference from the mean and sum\
    \ the squares:\n    for _, number := range numbers {\n        sumOfSquares +=\
    \ (number - mean) * (number - mean)\n        sumOfSquareOfDifferences += (number\
    \ - mean) * (number)\n    }\n\n    // Finally calculate the mean of the squared\
    \ differences and the absolute value:\n    mad := math.Sqrt(sumOfSquareOfDifferences\
    \ / float64(len(numbers))) / float64(len(numbers))\n\n    return mad\n}\n\nfunc\
    \ TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvzy6_x3z_test.go:38:9: no new variables on left side of :=

    /tmp/tmpvzy6_x3z_test.go:38:12: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074250
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) < 1 {\n        panic(\"Not enough input numbers!\")\n\
    \    }\n    if len(numbers) == 1 {\n        return numbers[0]\n    }\n    mean\
    \ := float64(0)\n    mean += numbers[0]\n    for i := 1; i < len(numbers); i++\
    \ {\n        mean += numbers[i]\n    }\n    return mean / float64(len(numbers))\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmpnctqhw0s_test.go:45: expected '%!s(float64=0.5)', got '%!s(float64=1.5)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmpnctqhw0s_test.go:45:\
    \ expected '%!s(float64=1)', got '%!s(float64=2.5)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmpnctqhw0s_test.go:45: expected '%!s(float64=1.2)', got '%!s(float64=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074250
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum_of_numbers float64 = 0\n    var total_of_numbers float64 = 0\n\
    \    for _, number := range numbers {\n        total_of_numbers += number\n  \
    \      sum_of_numbers += number * number\n    }\n    return math.Sqrt(sum_of_numbers\
    \ / total_of_numbers)\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n\
    \  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfyq2a7lv_test.go:22:12: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074250
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if numbers == nil {\n        return 0\n    }\n    mean := mean(numbers)\n\
    \    diff := make([]float64, len(numbers))\n    for i := range diff {\n      \
    \  diff[i] = numbers[i] - mean\n    }\n    return mean(diff)\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp838jtp9k_test.go:19:13: undefined: mean

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074250
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    // The mean is the sum of all numbers in the dataset.\n    var mean float64\
    \ = 0.0\n    for _, value := range numbers {\n        mean += value\n    }\n \
    \   mean /= float64(len(numbers))\n\n    // For each number, calculate the MAD\
    \ as |x_i - x_mean| where x_i is the number.\n    result := 0.0\n    for _, number\
    \ := range numbers {\n        result += (number - mean)\n    }\n\n    // Return\
    \ the average MAD.\n    return result / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmprbqmw6uu_test.go:48: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmprbqmw6uu_test.go:48:\
    \ expected '%!s(float64=1)', got '%!s(float64=0)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmprbqmw6uu_test.go:48: expected '%!s(float64=1.2)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074251
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    mean := mean(numbers)\n    sum := 0.0\n    for _, number := range numbers\
    \ {\n        sum += (number - mean) * (number - mean)\n    }\n    return math.Sqrt(sum\
    \ / (len(numbers)-1))\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n\
    \  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr2ca9oks_test.go:16:13: undefined: mean

    /tmp/tmpr2ca9oks_test.go:21:12: undefined: math

    /tmp/tmpr2ca9oks_test.go:21:22: invalid operation: sum / (len(numbers) - 1) (mismatched
    types float64 and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074250
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    // Sort the numbers before calculating MAD\n    sort.Float64s(numbers)\n\
    \    numbers := numbers[0 : len(numbers)/2]\n\n    var sumOfSquared float64\n\
    \    for _, number := range numbers {\n        sumOfSquared += math.Pow(number\
    \ - mean(numbers), 2)\n    }\n    return math.Sqrt(sumOfSquared/len(numbers))\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc0rvqggg_test.go:17:5: undefined: sort

    /tmp/tmpc0rvqggg_test.go:18:13: no new variables on left side of :=

    /tmp/tmpc0rvqggg_test.go:22:25: undefined: math

    /tmp/tmpc0rvqggg_test.go:22:43: undefined: mean

    /tmp/tmpc0rvqggg_test.go:24:12: undefined: math

    /tmp/tmpc0rvqggg_test.go:24:22: invalid operation: sumOfSquared / len(numbers)
    (mismatched types float64 and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074250
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var diff float64\n    for _, n := range numbers {\n        diff += math.Abs(n\
    \ - mean())\n    }\n    return diff / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmr_f4wui_test.go:18:17: undefined: math

    /tmp/tmpmr_f4wui_test.go:18:30: undefined: mean

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074250
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var mean float64\n    if len(numbers) == 0 {\n        mean = 0.0\n  \
    \  } else {\n        mean = numbers[0]\n    }\n    diff := make([]float64, len(numbers))\n\
    \    for i, d := range numbers {\n        diff[i] = d - mean\n    }\n    return\
    \ mean_absolute_deviation(diff)\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0380\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f368?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\nruntime.mallocgc(0x10?, 0x4fbfc0?, 0x1?)\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/runtime/malloc.go:909 +0x91d fp=0xc0201e0390\
    \ sp=0xc0201e0388 pc=0x40cf1d\nruntime.makeslice(0x449bb2?, 0x10?, 0x4fbfc0?)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/runtime/slice.go:103 +0x52 fp=0xc0201e03b8\
    \ sp=0xc0201e0390 pc=0x449bb2\ncommand-line-arguments_test.mean_absolute_deviation({0xc006e5b980,\
    \ 0x2, 0x4fbfc0?})\n\t/tmp/tmp132n_22f_test.go:22 +0x45 fp=0xc0201e03e8 sp=0xc0201e03b8\
    \ pc=0x4ef6a5\ncommand-line-arguments_test.mean_absolute_deviation({0xc006e5b970,\
    \ 0x2, 0x4fbfc0?})\n\t/tmp/tmp132n_22f_test.go:26 +0x77 fp=0xc0201e0418 sp=0xc0201e03e8\
    \ pc=0x4ef6d7\ncommand-line-arguments_test.mean_absolute_deviation({0xc006e5b960,\
    \ 0x2, 0x4fbfc0?})\n\t/tmp/tmp132n_22f_test.go:26 +0x77 fp=0xc0201e0448 sp=0xc0201e0418\
    \ pc=0x4ef6d7\ncommand-line-arguments_test.mean_absolute_deviation({0xc006e5b950,\
    \ 0x2, 0x4fbfc0?})\n\t/tmp/tmp132n_22f_test.go:26 +0x77 fp=0xc0201e0478 sp=0xc0201e0448\
    \ pc=0x4ef6d7\ncommand-line-arguments_test.mean_absolute_deviation({0xc006e5b940,\
    \ 0x2, 0x4fbfc0?})\n\t/tmp/tmp132n_22f_test.go:26 +0x77 fp=0xc0201e04a8 sp=0xc0201e0478\
    \ pc=0x4ef6d7\ncommand-line-arguments_test.mean_absolute_deviation({0xc006e5b930,\
    \ 0x2, 0x4fbfc0?})\n\t/tmp/tmp132n_22f_test.go:26 +0x77 fp=0xc0201e04d8 sp=0xc0201e04a8\
    \ pc=0x4ef6d7\ncommand-line-arguments_test.mean_absolute_deviation({0xc006e5b920,\
    \ 0x2, 0x4fbfc0?})\n\t/tmp/tmp132n_22f_test.go:26 +0x77 fp=0xc0201e0508 sp=0xc0201e04d8\
    \ pc=0x4ef6d7\ncommand-line-arguments_test.mean_absolute_deviation({0xc006e5b910,\
    \ 0x2, 0x4fbfc0?})\n\t/tmp/tmp132n_22f_test.go:26 +0x77 "
  timestamp: 1660074253
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var result float64 = 0\n    if len(numbers) < 1 {\n        return 0\n\
    \    }\n    for _, v := range numbers {\n        result += math.Abs(v - math.Trunc(v))\
    \ // math.Abs returns float64, math.Trunc returns int\n    }\n    result = result\
    \ / float64(len(numbers))\n    return result\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpshh9h6db_test.go:21:19: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074251
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var mean float64\n    for _, number := range numbers {\n        mean\
    \ += number\n    }\n    mean /= float64(len(numbers))\n    var mad_number float64\n\
    \    for _, number := range numbers {\n        mad_number += math.Abs(number-mean)\n\
    \    }\n    return mad_number / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkqq7brpe_test.go:23:23: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074251
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    n := len(numbers)\n    mean := 0.0\n    mean := mean / float64(n)\n \
    \   return mean + mad(numbers, mean)\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4l2wrzmz_test.go:18:10: no new variables on left side of :=

    /tmp/tmp4l2wrzmz_test.go:19:19: undefined: mad

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074252
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) < 2 {\n        return math.NaN()\n    }\n    mean :=\
    \ sum(numbers)/float64(len(numbers))\n    return sum(math.Abs(number-mean) for\
    \ number in numbers)/float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp7bw4ap9__test.go:20:38: missing '','' in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074251
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    // For this implementation, we just compute the mean.\n    return mean_absolute_deviation_1(numbers)\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6adumoa3_test.go:17:12: undefined: mean_absolute_deviation_1

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074252
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var mean = mean(numbers)\n    var mad float64\n    for _, number := range\
    \ numbers {\n        mad += math.Abs(number - mean)\n    }\n    return mad / float64(len(numbers))\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk5ptxdf9_test.go:16:16: undefined: mean

    /tmp/tmpk5ptxdf9_test.go:19:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074252
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var mean float64\n    for _, number := range numbers {\n        mean\
    \ += number\n    }\n    mean /= float64(len(numbers))\n\n    var deviations []float64\n\
    \    for _, number := range numbers {\n        deviations += []float64{number\
    \ - mean}\n    }\n\n    var md float64\n    for _, deviation := range deviations\
    \ {\n        md += deviation\n    }\n\n    return md / float64(len(deviations))\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu6ec1okr_test.go:24:9: invalid operation: operator + not defined on deviations
    (variable of type []float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074252
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    mean := average(numbers)\n    return average(numbers) - mean\n}\n\nfunc\
    \ TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4_bfu3a6_test.go:16:13: undefined: average

    /tmp/tmp4_bfu3a6_test.go:17:12: undefined: average

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074252
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    mean := 0.0\n    for _, number := range numbers {\n        mean += number\n\
    \    }\n    return mean / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmp33sv9kk3_test.go:38: expected '%!s(float64=0.5)', got '%!s(float64=1.5)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmp33sv9kk3_test.go:38:\
    \ expected '%!s(float64=1)', got '%!s(float64=2.5)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmp33sv9kk3_test.go:38: expected '%!s(float64=1.2)', got '%!s(float64=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074252
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    // Compute the mean of the inputs and return it.\n    mean := 0.0\n \
    \   for _, number := range numbers {\n        mean += number\n    }\n    mean\
    \ /= float64(len(numbers))\n\n    // Compute the deviation from mean for all numbers\
    \ and return the average.\n    deviations := []float64{}\n    for _, number :=\
    \ range numbers {\n        deviations += []float64{number - mean}\n    }\n   \
    \ deviations := deviations[len(deviations)/2:]\n\n    // Compute the mean and\
    \ standard deviation of the deviations and\n    // return the average.\n    mean\
    \ := math.Abs(mean)\n    deviations := math.Abs(deviations)\n    mean /= float64(len(deviations))\n\
    \    deviations /= float64(len(deviations))\n    return mean + math.Sqrt(deviations)\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsizm86vw_test.go:26:9: invalid operation: operator + not defined on deviations
    (variable of type []float64)

    /tmp/tmpsizm86vw_test.go:28:16: no new variables on left side of :=

    /tmp/tmpsizm86vw_test.go:32:10: no new variables on left side of :=

    /tmp/tmpsizm86vw_test.go:32:13: undefined: math

    /tmp/tmpsizm86vw_test.go:33:16: no new variables on left side of :=

    /tmp/tmpsizm86vw_test.go:33:19: undefined: math

    /tmp/tmpsizm86vw_test.go:35:5: invalid operation: deviations /= float64(len(deviations))
    (mismatched types []float64 and float64)

    /tmp/tmpsizm86vw_test.go:36:19: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074252
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var diff float64\n    var meanOfNumbers float64\n    var sumOfDiffSquares\
    \ float64\n    var n int\n\n    n = len(numbers)\n\n    if n < 2 {\n        return\
    \ -1\n    }\n    meanOfNumbers = 0.0\n    sumOfDiffSquares = 0.0\n    for _, number\
    \ := range numbers {\n        sumOfDiffSquares += math.Pow(number - meanOfNumbers,\
    \ 2)\n        meanOfNumbers += number\n    }\n    meanOfNumbers /= n\n    sumOfDiffSquares\
    \ /= n\n    for _, number := range numbers {\n        diff += math.Pow(number\
    \ - meanOfNumbers, 2)\n    }\n    return math.Sqrt(diff / sumOfDiffSquares)\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp763ba03i_test.go:29:29: undefined: math

    /tmp/tmp763ba03i_test.go:32:5: invalid operation: meanOfNumbers /= n (mismatched
    types float64 and int)

    /tmp/tmp763ba03i_test.go:33:5: invalid operation: sumOfDiffSquares /= n (mismatched
    types float64 and int)

    /tmp/tmp763ba03i_test.go:35:17: undefined: math

    /tmp/tmp763ba03i_test.go:37:12: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074252
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) < 2 {\n        return float64(0)\n    }\n\n    // The\
    \ first number is the mean of the dataset. The MAD is the average\n    // absolute\
    \ difference between the numbers and the mean.\n    var mean float64 = numbers[0]\n\
    \    diff := make([]float64, len(numbers))\n    for i := 0; i < len(numbers);\
    \ i++ {\n        diff[i] = numbers[i] - mean\n        mean += diff[i] / float64(len(numbers))\n\
    \    }\n\n    // The MAD can be calculated as the average absolute difference\
    \ between\n    // the numbers and the mean divided by the standard deviation of\
    \ the\n    // numbers:\n    return mean / math.Sqrt(float64(len(numbers)))\n}\n\
    \nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpid1sx4by_test.go:32:19: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074252
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    mean := numbers[0]\n    sumOfSquares := 0.0\n    for _, number := range\
    \ numbers {\n        sumOfSquares += (number - mean) * (number - mean)\n     \
    \   mean += number\n    }\n    return sumOfSquares / float64(len(numbers))\n}\n\
    \nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmpvd4xy6x__test.go:40: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmpvd4xy6x__test.go:40:\
    \ expected '%!s(float64=1)', got '%!s(float64=2.5)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmpvd4xy6x__test.go:40: expected '%!s(float64=1.2)', got '%!s(float64=9.2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074252
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) < 2 {\n        return NAN\n    }\n    mean := sum(numbers)\
    \ / float64(len(numbers))\n    diff := []float64{}\n    for _, n := range numbers\
    \ {\n        diff = append(diff, math.Abs(n-mean))\n    }\n    return mean(diff)\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3w046zxp_test.go:17:16: undefined: NAN

    /tmp/tmp3w046zxp_test.go:19:13: undefined: sum

    /tmp/tmp3w046zxp_test.go:22:29: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074252
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64\n    var mean = 0.0\n    for _, n := range numbers {\n\
    \        sum += n * n\n        mean += n\n    }\n    return mean / float64(len(numbers))\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmp4r3g6ug1_test.go:40: expected '%!s(float64=0.5)', got '%!s(float64=1.5)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmp4r3g6ug1_test.go:40:\
    \ expected '%!s(float64=1)', got '%!s(float64=2.5)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmp4r3g6ug1_test.go:40: expected '%!s(float64=1.2)', got '%!s(float64=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074253
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) == 0 {\n        return 0.0\n    }\n    mean := mean(numbers)\n\
    \    diff := []float64{}\n    for _, number := range numbers {\n        diff =\
    \ append(diff, number - mean)\n    }\n    return mean(diff)\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9hl6t249_test.go:19:13: undefined: mean

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074252
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var mean float64\n    sum := 0.0\n    for _, number := range numbers\
    \ {\n        sum += math.Abs(number - mean)\n        mean = sum / float64(len(numbers))\n\
    \    }\n    return sum / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsnz_trrk_test.go:19:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074252
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    // calculate mean\n    mean := 0.0\n    for _, number := range numbers\
    \ {\n        mean += number\n    }\n    mean /= float64(len(numbers))\n\n    //\
    \ calculate deviations\n    deviations := make([]float64, len(numbers))\n    for\
    \ i := 0; i < len(numbers); i++ {\n        deviations[i] = numbers[i] - mean\n\
    \    }\n\n    // calculate MAD\n    var mad_sum float64\n    for _, number :=\
    \ range deviations {\n        mad_sum += absf(number)\n    }\n    return mad_sum\
    \ / float64(len(deviations))\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppt6ir8rm_test.go:32:20: undefined: absf

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074252
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    return mean_absolute_deviation_mean(numbers)\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwanyh05s_test.go:16:12: undefined: mean_absolute_deviation_mean

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074252
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    mean := mean(numbers)\n    return mean(numbers) - mean\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxynoebtl_test.go:16:13: undefined: mean

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074246
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64\n    var count int\n\n    for _, number := range numbers\
    \ {\n        sum += number\n        count++\n    }\n\n    if count == 0 {\n  \
    \      return float64(0)\n    }\n\n    return math.Sqrt(sum / float64(count))\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp97dh969v_test.go:28:12: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074252
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) == 0 {\n        return 0.0\n    }\n    mean := 0.0\n\
    \    for _, number := range numbers {\n        mean += number\n    }\n    mean\
    \ /= float64(len(numbers))\n    mads := make([]float64, len(numbers))\n    for\
    \ i, number := range numbers {\n        mads[i] = math.Abs(float64(number) - mean)\n\
    \    }\n    return math.Sqrt(float64(sum(mads))/float64(len(numbers))) / float64(len(numbers))\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8w9kcf2i_test.go:26:19: undefined: math

    /tmp/tmp8w9kcf2i_test.go:28:12: undefined: math

    /tmp/tmp8w9kcf2i_test.go:28:30: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074252
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    mean := sum(numbers) / float64(len(numbers))\n    deviations := make([]float64,\
    \ 0, len(numbers))\n    for _, number := range numbers {\n        deviations +=\
    \ math.Pow(number - mean, 2)\n    }\n    return math.Sqrt(sum(deviations) / float64(len(deviations)))\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp57cx89pq_test.go:16:13: undefined: sum

    /tmp/tmp57cx89pq_test.go:19:23: undefined: math

    /tmp/tmp57cx89pq_test.go:21:12: undefined: math

    /tmp/tmp57cx89pq_test.go:21:22: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074252
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) < 2 {\n        fmt.Println(\"need at least two numbers\
    \ to calculate the mean absolute deviation\")\n        return -1\n    }\n    mean\
    \ := 0.0\n    var sum float64 = 0\n    for _, number := range numbers {\n    \
    \    sum += number\n    }\n    for _, number := range numbers {\n        mean\
    \ += number\n    }\n    return float64(sum) / float64(len(numbers))\n}\n\nfunc\
    \ TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmpeokfxif__test.go:46: expected '%!s(float64=0.5)', got '%!s(float64=1.5)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmpeokfxif__test.go:46:\
    \ expected '%!s(float64=1)', got '%!s(float64=2.5)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmpeokfxif__test.go:46: expected '%!s(float64=1.2)', got '%!s(float64=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074253
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) < 1 {\n        return -1\n    }\n    mean := sum(numbers)\
    \ / float64(len(numbers))\n    deviations := make([]float64, len(numbers))\n \
    \   for i := range numbers {\n        deviations[i] = math.Abs(numbers[i] - mean)\n\
    \    }\n    return mean(deviations)\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8mkovgto_test.go:19:13: undefined: sum

    /tmp/tmp8mkovgto_test.go:22:25: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074253
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var meanSquared float64 = 0.0\n\n    for _,\
    \ value := range numbers {\n        sum += value\n        meanSquared += value\
    \ * value\n    }\n\n    meanSquared /= float64(len(numbers))\n\n    for _, value\
    \ := range numbers {\n        mean := sum / float64(len(numbers))\n        diffSum\
    \ := value - mean\n        diff := diffSum * diffSum\n        diff /= meanSquared\n\
    \        sum += diff\n    }\n\n    return sum / float64(len(numbers))\n}\n\nfunc\
    \ TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmprmp9wabg_test.go:52: expected '%!s(float64=0.5)', got '%!s(float64=1.5905)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmprmp9wabg_test.go:52:\
    \ expected '%!s(float64=1)', got '%!s(float64=2.6578406134257024)'\n    --- FAIL:\
    \ TestMean_Absolute_Deviation/test_num__2 (0.00s)\n        tmprmp9wabg_test.go:52:\
    \ expected '%!s(float64=1.2)', got '%!s(float64=3.173773823492661)'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074253
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) <= 0 {\n        return 0\n    }\n\n    var mean float64\n\
    \    var sumOfSquares float64\n    var deviation float64\n    var i int\n\n  \
    \  for i = 1; i < len(numbers); i++ {\n        mean = mean + numbers[i]\n    \
    \    sumOfSquares = sumOfSquares + numbers[i] * numbers[i]\n    }\n\n    deviation\
    \ = math.Sqrt(sumOfSquares/len(numbers))\n    for i = 0; i < len(numbers); i++\
    \ {\n        deviation = deviation - (numbers[i]-mean)*(numbers[i]-mean)\n   \
    \ }\n    return deviation/len(numbers)\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjd6nhnq1_test.go:30:17: undefined: math

    /tmp/tmpjd6nhnq1_test.go:30:27: invalid operation: sumOfSquares / len(numbers)
    (mismatched types float64 and int)

    /tmp/tmpjd6nhnq1_test.go:34:12: invalid operation: deviation / len(numbers) (mismatched
    types float64 and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074254
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var mean float64\n    var MAD float64\n    if len(numbers) == 0 {\n \
    \       return mean\n    }\n    if len(numbers) == 1 {\n        return numbers[0]\n\
    \    }\n    mean = mean(numbers)\n    MAD = mean_absolute_deviation(numbers)\n\
    \    return mean + MAD\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n\
    \  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy1_5juxt_test.go:24:12: invalid operation: cannot call non-function mean
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074254
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    mean := mean(numbers)\n    diff := []float64{}\n    for _, n := range\
    \ numbers {\n        diff = append(diff, math.Abs(n - mean))\n    }\n    return\
    \ mean(diff)\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate\
    \ := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmmx91edd_test.go:16:13: undefined: mean

    /tmp/tmpmmx91edd_test.go:19:29: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074254
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    mean := mean(numbers)\n    return mad(numbers, mean)\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpygxg62h5_test.go:16:13: undefined: mean

    /tmp/tmpygxg62h5_test.go:17:12: undefined: mad

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074117
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    return madev(numbers, mean)\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplh46d37e_test.go:16:12: undefined: madev

    /tmp/tmplh46d37e_test.go:16:27: undefined: mean

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074254
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var mean float64\n    sum := 0.0\n    for _, v := range numbers {\n \
    \       sum += v\n    }\n    mean = sum / float64(len(numbers))\n    return math.Abs(float64(numbers[0]-mean))\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpftncjp_h_test.go:22:12: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074254
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) == 0 {\n        return 0\n    }\n    // Compute the mean\
    \ of the dataset first.\n    var mean float64\n    for _, number := range numbers\
    \ {\n        mean += number\n    }\n    mean /= float64(len(numbers))\n\n    //\
    \ Now compute the deviations for each element in the dataset.\n    var deviations\
    \ []float64\n    for _, number := range numbers {\n        deviations += [(number\
    \ - mean) * (number - mean)]\n    }\n    return math.Sqrt(deviations[0] / float64(len(numbers)))\n\
    }\n`\n)\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpmrvoigkz_test.go:29:58: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074253
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) < 1 {\n        panic(\"Cannot calculate Mean Absolute\
    \ Deviation on an empty list\")\n    }\n    x := numbers[0]\n    mean := x\n \
    \   for _, value := range numbers {\n        mean += (value - mean) / float64(len(numbers))\n\
    \    }\n    return mean\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n\
    \  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmp1que1zo9_test.go:42: expected '%!s(float64=0.5)', got '%!s(float64=1.5)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmp1que1zo9_test.go:42:\
    \ expected '%!s(float64=1)', got '%!s(float64=2.265625)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmp1que1zo9_test.go:42: expected '%!s(float64=1.2)', got '%!s(float64=2.6384)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074254
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    // Sum up all deviations from the mean.\n    mean := sum(numbers)\n \
    \   numbers = numbers\n    numbers -= mean\n    // Calculate the mean absolute\
    \ deviation.\n    sum := 0.0\n    for _, number := range numbers {\n        sum\
    \ += math.Abs(number)\n    }\n    return sum / float64(len(numbers))\n}\n\nfunc\
    \ TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqha2m0jk_test.go:17:13: undefined: sum

    /tmp/tmpqha2m0jk_test.go:23:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074254
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    // Find the mean of the dataset.\n    mean := mean(numbers)\n\n    //\
    \ Find the mean abs deviation from mean for each element.\n    var mad float64\
    \ = 0\n    for _, number := range numbers {\n        mad += math.Abs(number -\
    \ mean)\n    }\n\n    return mad / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd2ak3eux_test.go:17:13: undefined: mean

    /tmp/tmpd2ak3eux_test.go:22:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074254
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var mean float64\n    for _, number := range numbers {\n        mean\
    \ += number\n    }\n    mean /= float64(len(numbers))\n\n    mad := 0.0\n    for\
    \ _, number := range numbers {\n        mad += math.Abs(number - mean)\n    }\n\
    \    return mad / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzfrcuhnf_test.go:24:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074254
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) < 1 {\n        return math.NaN()\n    }\n    numbers\
    \ := sortNumbers(numbers)\n    mean := mean(numbers)\n    return math.Abs(diffBetween(numbers,\
    \ mean))\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate :=\
    \ mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpiwtc3qz7_test.go:17:16: undefined: math

    /tmp/tmpiwtc3qz7_test.go:19:13: no new variables on left side of :=

    /tmp/tmpiwtc3qz7_test.go:19:16: undefined: sortNumbers

    /tmp/tmpiwtc3qz7_test.go:20:13: undefined: mean

    /tmp/tmpiwtc3qz7_test.go:21:12: undefined: math

    /tmp/tmpiwtc3qz7_test.go:21:21: undefined: diffBetween

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074254
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var mean float64\n    if len(numbers) == 0 {\n        return mean\n \
    \   }\n    mean := numbers[0]\n    for _, value := range numbers[1:] {\n     \
    \   mean += (value - mean) / float64(len(numbers))\n    }\n    return mean\n}\n\
    \nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpafm745bw_test.go:20:10: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074254
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var diff []float64\n    var sumOfSquares []float64\n    for _, number\
    \ := range numbers {\n        diff = append(diff, number-mean)\n        sumOfSquares\
    \ = append(sumOfSquares, number*(number-mean)*(number-mean))\n    }\n    return\
    \ mean(sumOfSquares)\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n\
    \  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr0u88yx7_test.go:19:36: undefined: mean

    /tmp/tmpr0u88yx7_test.go:20:60: undefined: mean

    /tmp/tmpr0u88yx7_test.go:22:12: undefined: mean

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074254
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) < 2 {\n        return 0.0\n    }\n    meanNumber := numbers[0]\n\
    \    for _, number := range numbers[1:] {\n        meanNumber = meanNumber + ((number\
    \ - meanNumber) / float64(len(numbers)))\n    }\n    mean = meanNumber / float64(len(numbers))\n\
    \    return math.Sqrt(float64(\n        float64(\n            sum([math.Abs(x\
    \ - mean) for x in numbers]) -\n                math.Sqrt(sum([math.Pow(x - mean,\
    \ 2) for x in numbers])))) /\n        float64(len(numbers)))\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp0itd5p7q_test.go:26:37: expected '']'', found ''for''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074253
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var avg float64\n    for _, n := range numbers {\n        avg += n -\
    \ avg\n    }\n    return avg / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmpp2lxjhav_test.go:38: expected '%!s(float64=0.5)', got '%!s(float64=1)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__2 (0.00s)\n        tmpp2lxjhav_test.go:38:\
    \ expected '%!s(float64=1.2)', got '%!s(float64=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    averageDiff := 0.0\n    for _, number := range numbers {\n        averageDiff\
    \ += math.Abs(number - mean)\n    }\n    return averageDiff / float64(len(numbers))\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj38l45tm_test.go:18:24: undefined: math

    /tmp/tmpj38l45tm_test.go:18:42: undefined: mean

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074254
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) < 2 {\n        return 0.0\n    }\n\n    mean := mean(numbers)\n\
    \    if mean == 0.0 {\n        return 0.0\n    }\n\n    return mean_absolute_deviation_sum(numbers,\
    \ mean)\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate :=\
    \ mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmrc17bbz_test.go:20:13: undefined: mean

    /tmp/tmpmrc17bbz_test.go:25:12: undefined: mean_absolute_deviation_sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    n := len(numbers)\n    if n <= 1 {\n        return 0.0\n    }\n    mean\
    \ := sum(numbers) / float64(n)\n    return sum([(number-mean)*(number-mean) for\
    \ number in numbers]) / float64(n)\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcauph6vh_test.go:21:45: expected '']'', found ''for''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074254
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    mean := sum(numbers) / float64(len(numbers))\n    return sum_of_squared_deviation(numbers,\
    \ mean)\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate :=\
    \ mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1dq6ss0q_test.go:16:13: undefined: sum

    /tmp/tmp1dq6ss0q_test.go:17:12: undefined: sum_of_squared_deviation

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074255
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var totalSum float64\n    var totalCount float64\n\n    for _, number\
    \ := range numbers {\n        totalSum += math.Abs(number - math.Trunc(number))\n\
    \        totalCount++\n    }\n\n    return float64(totalSum) / float64(totalCount)\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnonqio9v_test.go:20:21: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074255
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    numbers := make([]float64, len(numbers))\n    for i, n := range numbers\
    \ {\n        numbers[i] = n\n    }\n    mean := sum(numbers) / float64(len(numbers))\n\
    \    diff := make([]float64, len(numbers))\n    for i, n := range numbers {\n\
    \        diff[i] = n - mean\n    }\n    return sum(diff) / float64(len(diff))\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy8gxemyi_test.go:16:13: no new variables on left side of :=

    /tmp/tmpy8gxemyi_test.go:20:13: undefined: sum

    /tmp/tmpy8gxemyi_test.go:25:12: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074255
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) == 0 {\n        return math.NaN()\n    }\n    if len(numbers)\
    \ == 1 {\n        return numbers[0]\n    }\n\n    mean := float64(mean(numbers))\n\
    \    numbers := append(numbers, mean)\n    numbers := append(numbers, mean)\n\n\
    \    mean := sum(numbers) / float64(len(numbers))\n    numbers := append(numbers,\
    \ mean)\n    numbers := append(numbers, mean)\n\n    numbers = normalizeToUnitVariance(numbers)\n\
    \n    return math.Sqrt(math.Pow(mean-float64(mean(numbers)), 2))\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphea7bu8b_test.go:17:16: undefined: math

    /tmp/tmphea7bu8b_test.go:23:21: undefined: mean

    /tmp/tmphea7bu8b_test.go:24:13: no new variables on left side of :=

    /tmp/tmphea7bu8b_test.go:25:13: no new variables on left side of :=

    /tmp/tmphea7bu8b_test.go:27:10: no new variables on left side of :=

    /tmp/tmphea7bu8b_test.go:27:13: undefined: sum

    /tmp/tmphea7bu8b_test.go:28:13: no new variables on left side of :=

    /tmp/tmphea7bu8b_test.go:29:13: no new variables on left side of :=

    /tmp/tmphea7bu8b_test.go:31:15: undefined: normalizeToUnitVariance

    /tmp/tmphea7bu8b_test.go:33:12: undefined: math

    /tmp/tmphea7bu8b_test.go:33:12: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074255
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    return sum(numbers)/float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp44sll025_test.go:16:12: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074255
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    mean := mean(numbers)\n    numbers := make([]float64, len(numbers))\n\
    \    for idx, number := range numbers {\n        numbers[idx] = number-mean\n\
    \    }\n    sum := sum_of_squares(numbers)\n    mean := sum / float64(len(numbers))\n\
    \    diff := sum_of_squared_diff(numbers, mean)\n    return diff / float64(len(numbers))\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxoepl3cb_test.go:16:13: undefined: mean

    /tmp/tmpxoepl3cb_test.go:17:13: no new variables on left side of :=

    /tmp/tmpxoepl3cb_test.go:21:12: undefined: sum_of_squares

    /tmp/tmpxoepl3cb_test.go:22:10: no new variables on left side of :=

    /tmp/tmpxoepl3cb_test.go:23:13: undefined: sum_of_squared_diff

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074255
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) == 0 {\n        return math.NaN()\n    }\n\n    if len(numbers)\
    \ == 1 {\n        return numbers[0]\n    }\n\n    var mean float64\n    for i\
    \ := 1; i < len(numbers); i++ {\n        mean += numbers[i-1]\n    }\n    mean\
    \ /= float64(len(numbers))\n\n    var sumOfSquares float64\n    for i := 1; i\
    \ < len(numbers); i++ {\n        sumOfSquares += (numbers[i] - mean) * (numbers[i]\
    \ - mean)\n    }\n    return sumOfSquares / (float64(len(numbers)) - 1) * 0.5\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj1b7bt8l_test.go:17:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074256
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) < 1 {\n        return 0\n    }\n    avg := sum(numbers)\
    \ / float64(len(numbers))\n    diff := make([]float64, len(numbers))\n    for\
    \ i := 0; i < len(numbers); i++ {\n        diff[i] = numbers[i] - avg\n    }\n\
    \    mad, _ := mean_absolute_deviation(diff)\n    return mad\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkhluw4yw_test.go:19:12: undefined: sum

    /tmp/tmpkhluw4yw_test.go:24:15: assignment mismatch: 2 variables but mean_absolute_deviation
    returns 1 value

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074256
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) < 1 {\n        return math.NaN()\n    }\n    return math.Abs(mean_absolute_deviation_compute(numbers))\
    \ / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp48wasawr_test.go:17:16: undefined: math

    /tmp/tmp48wasawr_test.go:19:12: undefined: math

    /tmp/tmp48wasawr_test.go:19:21: undefined: mean_absolute_deviation_compute

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074256
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if numbers == nil {\n        return 0.0\n    }\n\n    var mean float64\n\
    \    if numbers == nil {\n        return 0.0\n    }\n\n    for _, number := range\
    \ numbers {\n        mean += number\n    }\n    mean /= float64(len(numbers))\n\
    \n    var sum float64\n    for _, number := range numbers {\n        sum += (number\
    \ - mean) * (number - mean)\n    }\n    return math.Sqrt(sum / float64(len(numbers)-1))\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp13xyqsgm_test.go:34:12: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074256
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    return float64(mean_absolute_deviation_test.Mean(numbers))\n}\n\nfunc\
    \ TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp87vxb19f_test.go:16:20: undefined: mean_absolute_deviation_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    mean := 0.0\n    for _, n := range numbers {\n        mean += float64(n)\n\
    \    }\n    return float64(mean) / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmpyleb0206_test.go:38: expected '%!s(float64=0.5)', got '%!s(float64=1.5)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmpyleb0206_test.go:38:\
    \ expected '%!s(float64=1)', got '%!s(float64=2.5)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmpyleb0206_test.go:38: expected '%!s(float64=1.2)', got '%!s(float64=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074256
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    mean := sum(numbers)/float64(len(numbers))\n    return sum(numbers*(numbers-mean))/float64(len(numbers)-1)\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpf8dhhe7l_test.go:16:13: undefined: sum

    /tmp/tmpf8dhhe7l_test.go:17:12: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074256
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    // Summation over the array\n    var sum float64 = 0.0\n    for _, num\
    \ := range numbers {\n        sum += math.Abs(num - mean)\n    }\n    return sum\
    \ / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvkhfky3p_test.go:19:16: undefined: math

    /tmp/tmpvkhfky3p_test.go:19:31: undefined: mean

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64\n    var n int\n    for _, number := range numbers {\n\
    \        sum += math.Abs(number-mean)\n        ++n\n    }\n    return sum/float64(n)\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpy8hh4dcc_test.go:20:9: expected statement, found ''++''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64\n    var mean float64\n    for _, x := range numbers\
    \ {\n        sum += x\n    }\n    mean = sum / float64(len(numbers))\n\n    var\
    \ diff float64\n    for _, x := range numbers {\n        diff += (x-mean)\n  \
    \  }\n\n    return diff / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmphjg5pyij_test.go:46: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmphjg5pyij_test.go:46:\
    \ expected '%!s(float64=1)', got '%!s(float64=0)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmphjg5pyij_test.go:46: expected '%!s(float64=1.2)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074257
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var mean float64\n    var MAD float64\n    var diff float64\n    for\
    \ i := range numbers {\n        diff := numbers[i] - mean\n        mean += diff\n\
    \        MAD += diff\n    }\n    return MAD / float64(len(numbers))\n}\n</code>\n\
    <|/ a dscore=5 tags=go |>\n<| a |>\nAnother approach that calculates Mean Absolute\
    \ Deviation in O(n).\n<code>\npackage main\n\nimport \"math\"\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp75sydrki_test.go:26:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074256
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) < 1 {\n        return 0.0\n    }\n\n    mean := 0.0\n\
    \    mean := numbers[0]\n    diff := 0.0\n\n    for _, num := range numbers {\n\
    \        diff += math.Abs(num - mean)\n        mean = mean + diff / float64(len(numbers))\n\
    \    }\n    return diff\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n\
    \  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxqgd1k_w_test.go:21:10: no new variables on left side of :=

    /tmp/tmpxqgd1k_w_test.go:25:17: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074256
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    mean := mean_(numbers)\n    return float64(mean_absolute_deviation_(numbers))\
    \ - mean\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate :=\
    \ mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoxh3g_u0_test.go:16:13: undefined: mean_

    /tmp/tmpoxh3g_u0_test.go:17:20: undefined: mean_absolute_deviation_

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074256
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) < 2 {\n        return NaN\n    }\n    mean := 0.0\n \
    \   var sumOfSquares float64 = 0.0\n    for _, number := range numbers {\n   \
    \     mean += number\n        sumOfSquares += (number - mean) * (number - mean)\n\
    \    }\n    return sumOfSquares / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7ffpxhy6_test.go:17:16: undefined: NaN

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074256
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    mean := mean(numbers)\n    return average(numbers) - mean\n}\n\nfunc\
    \ TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmparw_nhob_test.go:16:13: undefined: mean

    /tmp/tmparw_nhob_test.go:17:12: undefined: average

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074256
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    mean := mean(numbers)\n    diff := []float64{}\n    for _, n := range\
    \ numbers {\n        diff = append(diff, math.Abs(n-mean))\n    }\n    return\
    \ mean(diff)\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate\
    \ := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_l3kiz46_test.go:16:13: undefined: mean

    /tmp/tmp_l3kiz46_test.go:19:29: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074257
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if numbers == nil || len(numbers) == 0 {\n        return -1\n    }\n\
    \    number := numbers[0]\n    if len(numbers) == 1 {\n        return number\n\
    \    }\n    var total float64\n    for _, value := range numbers[1:] {\n     \
    \   total += (value-number)\n    }\n    meanValue := total / float64(len(numbers))\n\
    \    for _, value := range numbers {\n        number-=meanValue\n    }\n    return\
    \ meanValue\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate\
    \ := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgnnmsh4k_test.go:28:12: value declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074257
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    mean := sum(numbers) / float64(len(numbers))\n    return mean + mad(numbers)\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0xqqoiqs_test.go:16:13: undefined: sum

    /tmp/tmp0xqqoiqs_test.go:17:19: undefined: mad

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074257
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    mean := mean(numbers)\n    return mad(numbers, mean)\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpygxg62h5_test.go:16:13: undefined: mean

    /tmp/tmpygxg62h5_test.go:17:12: undefined: mad

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074117
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) < 1 {\n        return -1.0\n    }\n    mean := 0.0\n\
    \    var sumSum float64 = 0\n    for _, number := range numbers {\n        sum\
    \ += number\n    }\n    mean = sum / float64(len(numbers))\n    numbers := append([]float64(nil),\
    \ numbers...)\n    for _, number := range numbers {\n        sumSum += math.Abs(float64(number)\
    \ - mean)\n    }\n    return sumSum / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmi203nk1_test.go:22:9: undefined: sum

    /tmp/tmpmi203nk1_test.go:24:12: undefined: sum

    /tmp/tmpmi203nk1_test.go:25:13: no new variables on left side of :=

    /tmp/tmpmi203nk1_test.go:27:19: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074257
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    // Compute the mean of the numbers, which is their mean in this case.\n\
    \    var mean float64\n    if numbers == nil {\n        mean = 0.0\n    } else\
    \ {\n        mean = float64(numbers[0])\n    }\n\n    // Compute the sum of squared\
    \ deviations for every value in numbers.\n    var sum float64\n    for _, n :=\
    \ range numbers {\n        sum += (n - mean) * (n - mean)\n    }\n\n    // Compute\
    \ average of sums.\n    return sum / (float64(len(numbers))-1)\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmpuajxmbhg_test.go:49: expected '%!s(float64=0.5)', got '%!s(float64=1)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmpuajxmbhg_test.go:49:\
    \ expected '%!s(float64=1)', got '%!s(float64=4.666666666666667)'\n    --- FAIL:\
    \ TestMean_Absolute_Deviation/test_num__2 (0.00s)\n        tmpuajxmbhg_test.go:49:\
    \ expected '%!s(float64=1.2)', got '%!s(float64=7.5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074257
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    // The mean is computed by finding the mean value of the input array\n\
    \    // and dividing by the number of elements.\n    mean := sum(numbers) / float64(len(numbers))\n\
    \    // Mean Absolute Deviation\n    // MAD = average | x - x_mean |\n    mad\
    \ := 0.0\n    for _, n := range numbers {\n        mad += math.Abs(n - mean)\n\
    \    }\n    return mad / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcdves8zw_test.go:18:13: undefined: sum

    /tmp/tmpcdves8zw_test.go:23:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074257
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    sumDeviation := 0.0\n    mean := 0.0\n    for _, number := range numbers\
    \ {\n        sumDeviation += math.Abs(number - mean)\n        mean += number\n\
    \    }\n    if sumDeviation == 0 {\n        return math.NaN()\n    }\n    return\
    \ sumDeviation / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmph8myzk0j_test.go:19:25: undefined: math

    /tmp/tmph8myzk0j_test.go:23:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074257
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if numbers == nil {\n        return math.NaN()\n    }\n    mean := mean(numbers)\n\
    \    diff := []float64{}\n    for _, number := range numbers {\n        diff =\
    \ append(diff, number-mean)\n    }\n    return mean(diff)\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptwjvc8rz_test.go:17:16: undefined: math

    /tmp/tmptwjvc8rz_test.go:19:13: undefined: mean

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    avg := sum(numbers) / float64(len(numbers))\n    var diff []float64\n\
    \    for _, n := range numbers {\n        diff = append(diff, n - avg)\n    }\n\
    \    return avg(diff)\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n\
    \  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpksaru77j_test.go:16:12: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var mean float64\n    for _, value := range numbers {\n        mean +=\
    \ value\n    }\n    mean /= float64(len(numbers))\n    for _, value := range numbers\
    \ {\n        mean -= value\n    }\n    return mean / 2.0\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmp_18tdu7__test.go:42: expected '%!s(float64=0.5)', got '%!s(float64=-0.75)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmp_18tdu7__test.go:42:\
    \ expected '%!s(float64=1)', got '%!s(float64=-3.75)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmp_18tdu7__test.go:42: expected '%!s(float64=1.2)', got '%!s(float64=-6)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var mean float64\n    var mad float64\n    for _, number := range numbers\
    \ {\n        mean += number\n    }\n    mean = mean / float64(len(numbers))\n\
    \    for _, number := range numbers {\n        mad += math.Abs(number - mean)\n\
    \    }\n    return mad / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj4794i9r_test.go:23:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) == 0 {\n        return float64(0)\n    }\n\n    mean\
    \ := mean(numbers)\n    return mad(numbers, mean)\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5wj8wp2e_test.go:20:13: undefined: mean

    /tmp/tmp5wj8wp2e_test.go:21:12: undefined: mad

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) < 2 {\n        return 0.0\n    }\n    if len(numbers)\
    \ < 1 {\n        return math.NaN()\n    }\n    mean := mean(numbers)\n    return\
    \ mean + math.Abs(mean - mean(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvba05vpa_test.go:20:16: undefined: math

    /tmp/tmpvba05vpa_test.go:22:13: undefined: mean

    /tmp/tmpvba05vpa_test.go:23:19: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    total := 0\n    for _, number := range numbers {\n        total += math.Abs(number-mean)\n\
    \    }\n    return total / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl80rhrzr_test.go:18:18: undefined: math

    /tmp/tmpl80rhrzr_test.go:18:34: undefined: mean

    /tmp/tmpl80rhrzr_test.go:20:12: invalid operation: total / float64(len(numbers))
    (mismatched types int and float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var avg float64 = 0\n    for _, n := range numbers {\n        avg +=\
    \ math.Pow(n - avg, 2.0)\n    }\n    return avg / float64(len(numbers))\n}\n\n\
    func TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmzfxamal_test.go:18:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    return mean_absolute_deviation_test.MeanAbsoluteDeviation(numbers)\n\
    }\n\nvar mean_absolute_deviation_test = mean_absolute_deviation_test{}\n\nfunc\
    \ TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp7o4jgyc0_test.go:19:5:\
    \ initialization loop for mean_absolute_deviation_test\n\t/tmp/tmp7o4jgyc0_test.go:19:5:\
    \ mean_absolute_deviation_test refers to\n\t/tmp/tmp7o4jgyc0_test.go:19:5: mean_absolute_deviation_test\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    // Sum all the numbers and divide by the number of elements\n    sum_of_numbers\
    \ := 0.0\n    for _, number := range numbers {\n        sum_of_numbers += number\n\
    \    }\n    num_elements := len(numbers)\n\n    // Calculate the mean\n    mean_of_numbers\
    \ := sum_of_numbers / num_elements\n\n    // Calculate the difference\n    deltas\
    \ := make([]float64, num_elements)\n    for _, number := range numbers {\n   \
    \     deltas[num_elements-1-int(number)] = number - mean_of_numbers\n    }\n\n\
    \    // Calculate the MAD\n    mad_sum := 0.0\n    for i := 1; i < num_elements;\
    \ i++ {\n        mad_sum += deltas[i-1]\n    }\n    mad_average := mad_sum / num_elements\n\
    \n    return mad_average\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8y74oexy_test.go:24:24: invalid operation: sum_of_numbers / num_elements
    (mismatched types float64 and int)

    /tmp/tmp8y74oexy_test.go:37:20: invalid operation: mad_sum / num_elements (mismatched
    types float64 and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) == 0 {\n        return 0\n    }\n    mean := mean(numbers)\n\
    \    result := 0.0\n    for _, number := range numbers {\n        result += (number\
    \ - mean) * (number - mean)\n    }\n    return result / float64(len(numbers))\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptj4ygqrr_test.go:19:13: undefined: mean

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var mean float64 = 0\n    var mad float64 = 0\n    for _, v := range\
    \ numbers {\n        mean += v\n    }\n    mean = mean / float64(len(numbers))\n\
    \    for _, v := range numbers {\n        mad += math.Abs(v - mean)\n    }\n \
    \   return mad / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0xxzzwwc_test.go:23:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    // Compute the mean and sum it up\n    var sum float64\n    for _, number\
    \ := range numbers {\n        sum += number\n    }\n    mean := sum / float64(len(numbers))\n\
    \n    // Compute the squared sum of the differences to get a mean\n    // of the\
    \ squared differences\n    squares := 0.0\n    for _, number := range numbers\
    \ {\n        squares += (number - mean) * (number - mean)\n    }\n    variance\
    \ := squares / float64(len(numbers) - 1) // Variance\n\n    // Return the computed\
    \ value\n    return math.Sqrt(variance)\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphiepdzn7_test.go:32:12: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074259
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) == 0 {\n        return 0.0\n    }\n\n    var mean float64\n\
    \    for _, number := range numbers {\n        mean += number\n    }\n    return\
    \ mean / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmp4errrdjm_test.go:42: expected '%!s(float64=0.5)', got '%!s(float64=1.5)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmp4errrdjm_test.go:42:\
    \ expected '%!s(float64=1)', got '%!s(float64=2.5)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmp4errrdjm_test.go:42: expected '%!s(float64=1.2)', got '%!s(float64=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074259
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var diff float64\n    for _, number := range numbers {\n        diff\
    \ += math.Abs(number - math.Trunc(number))\n    }\n    return diff / float64(len(numbers))\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpm25fz0n4_test.go:18:17: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64\n    var count int\n    for _, v := range numbers {\n\
    \        sum += v\n        count++\n    }\n    return sum / float64(count)\n}\n\
    \nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmpzoeu5avk_test.go:40: expected '%!s(float64=0.5)', got '%!s(float64=1.5)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmpzoeu5avk_test.go:40:\
    \ expected '%!s(float64=1)', got '%!s(float64=2.5)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmpzoeu5avk_test.go:40: expected '%!s(float64=1.2)', got '%!s(float64=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074259
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if numbers == nil {\n        return 0.0\n    }\n    sum := 0.0\n    for\
    \ _, value := range numbers {\n        sum += math.Abs(value - mean)\n    }\n\
    \    return sum / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcs7etd9z_test.go:21:16: undefined: math

    /tmp/tmpcs7etd9z_test.go:21:33: undefined: mean

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074259
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    sumSqs := 0.0\n    n := 0\n    for _, number := range numbers {\n   \
    \     sumSqs += math.Pow(number - mean(numbers), 2)\n        ++n\n    }\n    return\
    \ math.Sqrt(sumSqs / n)\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n\
    \  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmprvgw9clr_test.go:20:9: expected statement, found ''++''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    numbers := make([]float64, len(numbers))\n    i := 0\n    for _, number\
    \ := range numbers {\n        numbers[i] = number\n        i++\n    }\n    mean\
    \ := mean(numbers)\n    return math.Sqrt(deviation(numbers, mean))\n}\n\nfunc\
    \ TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdl2yoemr_test.go:16:13: no new variables on left side of :=

    /tmp/tmpdl2yoemr_test.go:22:13: undefined: mean

    /tmp/tmpdl2yoemr_test.go:23:12: undefined: math

    /tmp/tmpdl2yoemr_test.go:23:22: undefined: deviation

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074259
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    // The first number is considered the centerpoint\n    centerpoint :=\
    \ numbers[0]\n    var sumSq float64 = 0\n    var deviation float64\n\n    for\
    \ _, number := range numbers[1:] {\n        sumSq += (number - centerpoint) *\
    \ (number - centerpoint)\n    }\n    deviation = math.Sqrt(sumSq / float64(len(numbers)-1))\n\
    \    return deviation\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n\
    \  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdti9redf_test.go:24:17: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074259
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var total float64 = 0\n    var sumOfSquares float64 = 0\n\n    for _,\
    \ num := range numbers {\n        total += num\n        sumOfSquares += num *\
    \ num\n    }\n\n    return total / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmpqunsxlte_test.go:42: expected '%!s(float64=0.5)', got '%!s(float64=1.5)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmpqunsxlte_test.go:42:\
    \ expected '%!s(float64=1)', got '%!s(float64=2.5)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmpqunsxlte_test.go:42: expected '%!s(float64=1.2)', got '%!s(float64=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074259
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if numbers == nil {\n        return float64(0)\n    }\n    length :=\
    \ len(numbers)\n    if length == 0 {\n        return float64(0)\n    }\n\n   \
    \ mean := mean(nil, numbers)\n    diff := make([]float64, length)\n\n    for i\
    \ := 0; i < length; i++ {\n        diff[i] = numbers[i] - mean\n    }\n\n    return\
    \ math.Abs(float64(math.Sqrt(float64(length)*\n        math.Pow(float64(math.Pow(float64(length)\
    \ - 1), 2.0)) +\n        float64(math.Pow(float64(diff[0]), 2.0)))))\n}\n\nfunc\
    \ TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp28wj0f75_test.go:24:13: undefined: mean

    /tmp/tmp28wj0f75_test.go:31:12: undefined: math

    /tmp/tmp28wj0f75_test.go:32:9: undefined: math

    /tmp/tmp28wj0f75_test.go:32:57: too many arguments in conversion to float64

    /tmp/tmp28wj0f75_test.go:33:17: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074259
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var mean float64\n    var mad_sum float64\n    for _, number := range\
    \ numbers {\n        mean += number\n        mad_sum += (fabs(number - mean))\
    \ / number\n    }\n    return mad_sum / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpetvjbyvh_test.go:20:21: undefined: fabs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074259
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if numbers == nil {\n        return 0\n    }\n    if len(numbers) < 2\
    \ {\n        return 0\n    }\n    mean := sum(numbers) / float64(len(numbers))\n\
    \    return math.Abs(mean-mean(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp9b5r_49_test.go:22:13: undefined: sum

    /tmp/tmpp9b5r_49_test.go:23:12: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074259
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    return mean(numbers)\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpffc9_rdt_test.go:16:12: undefined: mean

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074259
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) < 1 {\n        return 0\n    }\n\n    meanValue := mean(numbers)\n\
    \    return mad(numbers, meanValue)\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdvzqqvyo_test.go:20:18: undefined: mean

    /tmp/tmpdvzqqvyo_test.go:21:12: undefined: mad

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074259
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var mn float64\n    for _, x := range numbers {\n        mn += x\n  \
    \  }\n    return mn / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmpwwciupfp_test.go:38: expected '%!s(float64=0.5)', got '%!s(float64=1.5)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmpwwciupfp_test.go:38:\
    \ expected '%!s(float64=1)', got '%!s(float64=2.5)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmpwwciupfp_test.go:38: expected '%!s(float64=1.2)', got '%!s(float64=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074259
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) < 2 {\n        fmt.Println(\"[ERROR]: not enough numbers\
    \ to calculate MAD!\")\n        return -1.0;\n    }\n    numbers := sort(numbers)\n\
    \    var mean float64\n    for _, number := range numbers {\n        mean += number\n\
    \    }\n    mean = mean / float64(len(numbers))\n\n    var mad_sum float64\n \
    \   for _, number := range numbers {\n        mad_sum += math.Abs((number - mean))\n\
    \    }\n    return mad_sum / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwplzwuty_test.go:20:13: no new variables on left side of :=

    /tmp/tmpwplzwuty_test.go:20:16: undefined: sort

    /tmp/tmpwplzwuty_test.go:29:20: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074259
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0\n    var sum float64 = 0\n    for _, v := range numbers\
    \ {\n        sum += (float64(v) - float64(Mean(numbers))) / float64(Range(len(numbers)))\n\
    \    }\n    return sum\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n\
    \  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpnn7d1u7z_test.go:17:9:\
    \ sum redeclared in this block\n\t/tmp/tmpnn7d1u7z_test.go:16:9: other declaration\
    \ of sum\n/tmp/tmpnn7d1u7z_test.go:19:38: undefined: Mean\n/tmp/tmpnn7d1u7z_test.go:19:64:\
    \ undefined: Range\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074259
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) == 0 {\n        return 0.0\n    }\n\n    mean := mean(numbers)\n\
    \    return meanAbsoluteDeviation(numbers, mean)\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2tv6cqqn_test.go:20:13: undefined: mean

    /tmp/tmp2tv6cqqn_test.go:21:12: undefined: meanAbsoluteDeviation

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074259
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) < 1 {\n        return 0.0\n    }\n\n    mean := 0.0\n\
    \n    size := 0\n    for _, value := range numbers {\n        size += 1\n    \
    \    mean += value\n    }\n    mean /= float64(size)\n\n    diff := 0.0\n    for\
    \ _, value := range numbers {\n        diff += math.Abs(value - mean)\n    }\n\
    \    return diff / float64(size)\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0m5t67_i_test.go:31:17: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074259
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if numbers == nil {\n        return math.NaN()\n    }\n    if len(numbers)\
    \ == 0 {\n        return math.NaN()\n    }\n    n := float64(len(numbers))\n \
    \   mean := numbers[0]\n    for _, number := range numbers[1:] {\n        mean\
    \ += (number - mean) / n\n    }\n    return mean / float64(len(numbers))\n}\n\n\
    func TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvn69gkwi_test.go:17:16: undefined: math

    /tmp/tmpvn69gkwi_test.go:20:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074259
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    // the numbers we want to calculate the MAD for\n    numbers := numbers\n\
    \n    // the mean of this set of numbers\n    mean := mean(numbers)\n\n    //\
    \ the square sum of the difference of each number from this mean\n    sum := 0.0\n\
    \    for _, value := range numbers {\n        sum += math.Pow(value - mean, 2)\n\
    \    }\n\n    // the average of the square sum\n    averageSquareSum := sum /\
    \ float64(len(numbers))\n\n    // the average of the absolute difference between\
    \ each number\n    averageAbs := 0.0\n    for _, value := range numbers {\n  \
    \      averageAbs += math.Abs(value - mean)\n    }\n\n    // the MAD = average\
    \ | x - x_mean |\n    return math.Pow(averageAbs / averageSquareSum, 0.5)\n}\n\
    \nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprqwvdl2u_test.go:17:13: no new variables on left side of :=

    /tmp/tmprqwvdl2u_test.go:20:13: undefined: mean

    /tmp/tmprqwvdl2u_test.go:25:16: undefined: math

    /tmp/tmprqwvdl2u_test.go:34:23: undefined: math

    /tmp/tmprqwvdl2u_test.go:38:12: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074259
