language: go_test.go
name: HumanEval_89_encrypt
results:
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    \n    s := make([]string,\
    \ len(s))\n    for i, letter := range s {\n        snew, _ := encrypt(letter)\n\
    \        snew = snew + snew[len(snew)-3:]\n        snew = snew + snew[len(snew)-2:]\n\
    \        snew = snew + snew[len(snew)-1:]\n        snew = snew + snew[:len(snew)-4]\n\
    \        snew = snew + snew[:len(snew)-4]\n        snew[len(snew)-3] = letter\n\
    \        snew[len(snew)-2] = letter\n        snew[len(snew)-1] = letter\n    \
    \    snew[:len(snew)-4] = letter\n        snew[:len(snew)-4] = letter\n      \
    \  snew[len(snew)-4] = letter\n        snew[len(snew)-4] = letter\n        s[i]\
    \ = snew\n    }\n    \n    return string(s)\n}\n</cell>\n<cell>\n# Run the test\n\
    encrypt_test.TestEncryptDecrypt(encrypt)\n</cell>\n<text>\nExercise 3\nNow that\
    \ you've implemented a function to encrypt a string. Complete the function so\
    \ that it can encrypt a string encrypted with the function from Exercise 2. Do\
    \ this by modifying the function to accept an additional argument which indicates\
    \ the original alphabet to be used.\n\nFor example:\n>>> encrypt(\"asdfghjkl\"\
    , \"abc\")\n\"ewhjklnop\"\n>>> encrypt(\"gf\", \"abc\")\n\"kj\"\n>>> encrypt(\"\
    et\", \"abc\")\n\"ix\"\n>>> encrypt(\"asdfghjkl\", \"abcdefghijklmnop\")\n\"ewhjklnop\"\
    \n>>> encrypt(\"gf\", \"abcdefghijklmnop\")\n\"kj\"\n>>> encrypt(\"et\", \"abcdefghijklmnop\"\
    )\n\"ix\"\n>>> encrypt(\"asdfghjkl\", \"qwertyuiopasdfghjklzxcvbnm\")\n\"ewhjklnop\"\
    \n>>> encrypt(\"gf\", \"qwertyuiopasdfghjklzxcvbnm\")\n\"kj\"\n>>> encrypt(\"\
    et\", \"qwertyuiopasdfghjklzxcvbnm\")\n\"ix\"\n\n</text>\n<cell>\npackage encrypt_test\n\
    \nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc TestEncrypt(t *testing.T)\
    \ {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmphq7e2spk_test.go:43:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074343
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    letter := 'a'\n    letter\
    \ += 2\n    for i := 0; i < len(s); i++ {\n        s += letter\n        letter\
    \ = letter + 2\n    }\n    return s\n}\n\nfunc TestEncrypt(t *testing.T) {\n \
    \ candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected:\
    \ \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\"\
    \ },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"\
    et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected:\
    \ \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected:\
    \ \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpeeptprev_test.go:25:9: invalid operation: s += letter (mismatched types
    string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074344
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    fmt.Printf(\"\\nIn encrypt:\
    \ '%s'\\n\", s)\n    ans := \"\"\n    if len(s) > 0 {\n        l = len(s)\n  \
    \      ans = s[0:l-1] + encryptRotate(s[1:l-1], 2)\n    }\n    fmt.Printf(\"\\\
    nIn encrypt: '%s'\\n\", ans)\n    return ans\n}\n\nfunc TestEncrypt(t *testing.T)\
    \ {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyzqnqwdn_test.go:25:9: undefined: l

    /tmp/tmpyzqnqwdn_test.go:26:19: undefined: l

    /tmp/tmpyzqnqwdn_test.go:26:26: undefined: encryptRotate

    /tmp/tmpyzqnqwdn_test.go:26:44: undefined: l

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074344
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    var result string = \"\"\
    \n    for _, c := range s {\n        if c >= 'a' && c <= 'z' {\n            result\
    \ += string((c - 'a') + (c - 'a'))\n        } else {\n            result += string((c\
    \ - 'a') + (c - 'a'))\n        }\n    }\n    return result\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmp3splw0dg_test.go:53: expected 'lm', got '\x0E\x10'\n    --- FAIL:\
    \ TestEncrypt/test_num__1 (0.00s)\n        tmp3splw0dg_test.go:53: expected 'ewhjklnop',\
    \ got '\0$\x06\n            \f\x0E\x12\x14\x16'\n    --- FAIL: TestEncrypt/test_num__2\
    \ (0.00s)\n        tmp3splw0dg_test.go:53: expected 'kj', got '\f\n          \
    \  '\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmp3splw0dg_test.go:53:\
    \ expected 'ix', got '\b&'\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n  \
    \      tmp3splw0dg_test.go:53: expected 'jeiajeaijeiak', got '\n            \0\
    \b,\n            \0,\b\n            \0\b,\f'\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmp3splw0dg_test.go:53: expected 'lippsqcjvmirh', got '\x0E\
    \b\x16\x16\x1C\x180\n            \"\x10\b\x1A\x06'\n    --- FAIL: TestEncrypt/test_num__6\
    \ (0.00s)\n        tmp3splw0dg_test.go:53: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl',\
    \ got '\x06.2\x06\x16\x18\x1A\x10\x16\n            (\x0E\x18\x10\x16(\n      \
    \      \x0E\x16\x10\x0E(\n            \x1A\x18\x16\x10\x18\x1A(\n            \x0E\
    \x16\x10\x18\x1A(\n            \x0E\n            (\x04(\n            \x0E'\n \
    \   --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmp3splw0dg_test.go:53:\
    \ expected 'e', got '\0'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074345
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    n := len(s)\n    b := make([]byte,\
    \ n)\n    for i, val := range s {\n        // Rotate the alphabet by two.\n  \
    \      if i % 2 {\n            b[i] = val + val\n        } else {\n          \
    \  b[i] = val\n        }\n    }\n    return string(b)\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5s0ijb7a_test.go:26:12: non-boolean condition in if statement

    /tmp/tmp5s0ijb7a_test.go:27:20: cannot use val + val (value of type rune) as type
    byte in assignment

    /tmp/tmp5s0ijb7a_test.go:29:20: cannot use val (variable of type rune) as type
    byte in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074344
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet = \"ghijklmnopqrstuvwxyz\"\
    \n    for i := 0; i < len(alphabet); i++ {\n        alphabet[i] = alphabet[(i\
    \ + len(alphabet))%len(alphabet)]\n    }\n    alphabet += \"abcdefghijklmnopqrstuvwxyz\"\
    \n    for i := 0; i < len(alphabet); i++ {\n        alphabet[i] = alphabet[(i\
    \ + len(alphabet))%len(alphabet)]\n    }\n    alphabet += \"nopqrstuvwxyzabcdefghijklm\"\
    \n    for i := 0; i < len(alphabet); i++ {\n        alphabet[i] = alphabet[(i\
    \ + len(alphabet))%len(alphabet)]\n    }\n    alphabet += \"qw\"\n    for i :=\
    \ 0; i < len(alphabet); i++ {\n        alphabet[i] = alphabet[(i + len(alphabet))%len(alphabet)]\n\
    \    }\n    alphabet += \"dfgjkibnvuxsmrjbhtuorc\"\n    for i := 0; i < len(alphabet);\
    \ i++ {\n        alphabet[i] = alphabet[(i + len(alphabet))%len(alphabet)]\n \
    \   }\n    alphabet += \"mnbvcxzj\"\n    for i := 0; i < len(alphabet); i++ {\n\
    \        alphabet[i] = alphabet[(i + len(alphabet))%len(alphabet)]\n    }\n  \
    \  alphabet += \"opqrstuwxz\"\n    for i := 0; i < len(alphabet); i++ {\n    \
    \    alphabet[i] = alphabet[(i + len(alphabet))%len(alphabet)]\n    }\n    alphabet\
    \ += \"yznopqrstuvwxyz\"\n    for i := 0; i < len(alphabet); i++ {\n        alphabet[i]\
    \ = alphabet[(i + len(alphabet))%len(alphabet)]\n    }\n    alphabet += \"abcdefghijklmnopqrstuvwxyz\"\
    \n    for i := 0; i < len(alphabet); i++ {\n        alphabet[i] = alphabet[(i\
    \ + len(alphabet))%len(alphabet)]\n    }\n    alphabet += \"nopqrstuvwxyzabcdefghijklm\"\
    \n    for i := 0; i < len(alphabet); i++ {\n        alphabet[i] = alphabet[(i\
    \ + len(alphabet))%len(alphabet)]\n    }\n    alphabet += \"qw\"\n    for i :=\
    \ 0; i < len(alphabet); i++ {\n        alphabet[i] = alphabet[(i + len(alphabet))%len(alphabet)]\n\
    \    }\n    alphabet += \"dfgjkibnvuxsmrjbhtuorc\"\n    for i := 0; i < len(alphabet);\
    \ i++ {\n        alphabet[i] = alphabet[(i + len(alphabet))%len(alphabet\nfunc\
    \ TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpa_u3h9p6_test.go:68:64: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074343
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := \"abcdefghijklmnopqrstuvwxyz\"\
    \n    n := len(alphabet)\n    \n    result := \"\"\n    \n    for _, char := range\
    \ s {\n        result += alphabet[(alphabet.Index(char)%n) + 2*n]\n    }\n\n \
    \   return result\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0n4x3d1g_test.go:28:9: invalid operation: result += alphabet[(alphabet.Index(char)
    % n) + 2 * n] (mismatched types string and byte)

    /tmp/tmp0n4x3d1g_test.go:28:38: alphabet.Index undefined (type string has no field
    or method Index)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074344
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    shift := len(s) / 2\n \
    \   for _, c := range s {\n        switch {\n        case c >= 'a' && c <= 'z':\n\
    \            c += shift\n        case c >= 'A' && c <= 'Z':\n            c +=\
    \ shift * 2\n        }\n        s = string(c)\n    }\n    return s\n}\n\nfunc\
    \ TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1g46vbt9_test.go:26:13: invalid operation: c += shift (mismatched types
    rune and int)

    /tmp/tmp1g46vbt9_test.go:28:13: invalid operation: c += shift * 2 (mismatched
    types rune and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074344
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    cipherText := \"\"\n  \
    \  for i := 0; i < len(s); i++ {\n        index := i + 2\n        if index > len(s)-1\
    \ {\n            index -= len(s)\n        }\n        cipherText += alphabet[index][int(s[i])]\n\
    \    }\n    return cipherText\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkd51_z24_test.go:28:23: undefined: alphabet

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074344
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := \"abcdefghijklmnopqrstuvwxyz\"\
    \n    if len(alphabet) != 26 {\n        return \"\"\n    }\n    k := alphabet.Index(\"\
    a\")\n    encrypted := \"\"\n    for _, i := range s {\n        if i > 26 {\n\
    \            k = alphabet.Index(\"z\") - 2\n        } else {\n            k =\
    \ alphabet.Index(i) + 2\n        }\n        encrypted += alphabet[k]\n    }\n\
    \    return encrypted\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5t32f52f_test.go:26:19: alphabet.Index undefined (type string has no field
    or method Index)

    /tmp/tmp5t32f52f_test.go:30:26: alphabet.Index undefined (type string has no field
    or method Index)

    /tmp/tmp5t32f52f_test.go:32:26: alphabet.Index undefined (type string has no field
    or method Index)

    /tmp/tmp5t32f52f_test.go:34:9: invalid operation: encrypted += alphabet[k] (mismatched
    types string and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074344
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    result := \"\"\n\n    for\
    \ _, letter := range s {\n        result += string(rotation(letter)) + \"0\"\n\
    \    }\n\n    return result\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvlya3xg1_test.go:25:26: undefined: rotation

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074344
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := \"abcdefghijklmnopqrstuvwxyz\"\
    \n    result := \"\"\n    for _, c := range s {\n        result += alphabet[alphabet.Index(c)%len(alphabet)]\n\
    \    }\n    return result\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5f1pxz54_test.go:25:9: invalid operation: result += alphabet[alphabet.Index(c)
    % len(alphabet)] (mismatched types string and byte)

    /tmp/tmp5f1pxz54_test.go:25:37: alphabet.Index undefined (type string has no field
    or method Index)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074344
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    result := \"\"\n    for\
    \ _, letter := range s {\n        result += string((letter + 1) & 1) + string((letter\
    \ >> 1) & 1)\n    }\n    return result\n}\n\nfunc TestEncrypt(t *testing.T) {\n\
    \  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"\
    ), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"\
    ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     {\
    \ actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpyrcua3f1_test.go:49: expected 'lm', got '\x01\0\0\0'\n    --- FAIL:\
    \ TestEncrypt/test_num__1 (0.00s)\n        tmpyrcua3f1_test.go:49: expected 'ewhjklnop',\
    \ got '\0\0\0\x01\x01\0\x01\x01\0\x01\x01\0\x01\x01\0\x01\x01\0'\n    --- FAIL:\
    \ TestEncrypt/test_num__2 (0.00s)\n        tmpyrcua3f1_test.go:49: expected 'kj',\
    \ got '\0\x01\x01\x01'\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n      \
    \  tmpyrcua3f1_test.go:49: expected 'ix', got '\0\0\x01\0'\n    --- FAIL: TestEncrypt/test_num__4\
    \ (0.00s)\n        tmpyrcua3f1_test.go:49: expected 'jeiajeaijeiak', got '\x01\
    \x01\0\0\0\0\0\x01\x01\x01\0\0\0\x01\0\0\x01\x01\0\0\0\0\0\x01\0\x01'\n    ---\
    \ FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpyrcua3f1_test.go:49: expected\
    \ 'lippsqcjvmirh', got '\x01\0\0\0\x01\0\x01\0\0\x01\0\0\0\0\x01\x01\x01\x01\0\
    \0\0\0\x01\x01\x01\0'\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n       \
    \ tmpyrcua3f1_test.go:49: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl',\
    \ got '\x01\0\x01\0\x01\x01\x01\0\x01\0\0\0\x01\x01\0\0\x01\0\x01\x01\0\0\x01\0\
    \0\0\0\0\x01\0\0\0\x01\x01\x01\0\x01\0\0\0\x01\0\0\0\x01\x01\x01\x01\0\0\x01\0\
    \0\0\0\0\x01\x01\0\0\x01\x01\x01\0\x01\0\0\0\0\0\x01\x01\0\0\x01\x01\x01\0\x01\
    \x01\0\0\0\x01\0\0\x01\x01\x01\0'\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n\
    \        tmpyrcua3f1_test.go:49: expected 'e', got '\0\0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074345
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    // Your code here\n   \
    \ alphabet := []string{\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\"\
    , \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\"\
    , \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"}\n    rotated := []string{}\n\
    \    for i := 0; i < len(alphabet); i++ {\n        for j := 0; j < len(alphabet);\
    \ j++ {\n            rotated := append(rotated, alphabet[j+i*2])\n        }\n\
    \    }\n    for i := 0; i < len(s); i++ {\n        result := \"\"\n        for\
    \ _, letter := range s {\n            result := result + rotated[(alphabet.Index(letter)\
    \ + i) % 26]\n        }\n        fmt.Println(result)\n    }\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6gh9y82k_test.go:27:13: rotated declared but not used

    /tmp/tmp6gh9y82k_test.go:33:13: result declared but not used

    /tmp/tmp6gh9y82k_test.go:33:50: alphabet.Index undefined (type []string has no
    field or method Index)

    /tmp/tmp6gh9y82k_test.go:37:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074344
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := \"abcdefghijklmnopqrstuvwxyz\"\
    \n    alphabet = alphabet[:len(alphabet)/2] + alphabet[len(alphabet)/2:]\n   \
    \ alphabet = alphabet[:len(alphabet)/2] + alphabet[len(alphabet)/2:]\n    return\
    \ alphabet[alphabet.FindIndex(func(r rune) bool {\n        return r == 'z' ||\
    \ r == 'a'\n    })]\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqqxo5hdr_test.go:25:12:\
    \ cannot use alphabet[alphabet.FindIndex(func(r rune) bool {\u2026})] (value of\
    \ type byte) as type string in return statement\n/tmp/tmpqqxo5hdr_test.go:25:30:\
    \ alphabet.FindIndex undefined (type string has no field or method FindIndex)\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074344
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    fmt.Println(s)\n    sEncrypted\
    \ := \"\"\n    for i := 0; i < len(s); i++ {\n        sEncrypted += s[len(s)-i-1]\n\
    \    }\n    return sEncrypted\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc_15uc56_test.go:25:9: invalid operation: sEncrypted += s[len(s) - i -
    1] (mismatched types string and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074344
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    var c int\n    var ret\
    \ string\n    for _, v := range s {\n        ret = append(ret, rotatedAlphabet[(c+1)%26])\n\
    \        c = c+1\n    }\n    return string(ret)\n}\n\nfunc TestEncrypt(t *testing.T)\
    \ {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplyf3fs07_test.go:24:12: v declared but not used

    /tmp/tmplyf3fs07_test.go:25:22: first argument to append must be a slice; have
    ret (variable of type string)

    /tmp/tmplyf3fs07_test.go:25:27: undefined: rotatedAlphabet

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074344
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    r := make([]rune, len(s))\n\
    \    for i := range r {\n        r[i] = s[i]\n    }\n    r := rot13(r)\n    for\
    \ i := 0; i < len(r); i += 2 {\n        r[i] = r[i+1]\n    }\n    return string(r)\n\
    }\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp23f5deua_test.go:24:16: cannot use s[i] (value of type byte) as type rune
    in assignment

    /tmp/tmp23f5deua_test.go:26:7: no new variables on left side of :=

    /tmp/tmp23f5deua_test.go:26:10: undefined: rot13

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074344
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    result := \"\"\n    shift\
    \ := 0\n    key := []rune(s)\n\n    for i := 0; i < len(key); i++ {\n        shift\
    \ += 2\n        if shift > len(alphabet) {\n            shift = 0\n        }\n\
    \        if key[i] > alphabet[shift] {\n            result += alphabet[shift]\n\
    \            shift -= 2\n            continue\n        }\n        result += key[i]\n\
    \    }\n    return result\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp984spxf3_test.go:28:24: undefined: alphabet

    /tmp/tmp984spxf3_test.go:31:21: undefined: alphabet

    /tmp/tmp984spxf3_test.go:32:23: undefined: alphabet

    /tmp/tmp984spxf3_test.go:36:9: invalid operation: result += key[i] (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074344
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := \"abcdefghijklmnopqrstuvwxyz\"\
    \n    length := len(s)\n    shift := int(length/2)\n    output := \"\"\n\n   \
    \ // Iterate through each character in the string.\n    // For each character,\
    \ loop through the alphabet to \n    // find the index where the two characters\
    \ match.\n    // Then add the two indexes together to get the \n    // position\
    \ of the character in the encrypted alphabet.\n    for _, c := range s {\n   \
    \     a, b := alphabet.Index(c), alphabet.Index(s[shift])\n        output += alphabet[a+b]\n\
    \    }\n\n    return output\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbcb013at_test.go:33:26: alphabet.Index undefined (type string has no field
    or method Index)

    /tmp/tmpbcb013at_test.go:34:9: invalid operation: output += alphabet[a + b] (mismatched
    types string and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074344
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    \n    // Declare the alphabet\n\
    \    alphabet := []char{'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'}\n\
    \    \n    // Set the first letter of alphabet to 'x'\n    alphabet[0] = 'x'\n\
    \    \n    // Set all other letters of alphabet to 'y'\n    for i := 1; i < len(alphabet);\
    \ i++ {\n        alphabet[i] = 'y'\n    }\n    \n    // Create the new string\
    \ with the shifted alphabet\n    encrypted := \"\"\n    for _, val := range s\
    \ {\n        encrypted += alphabet[(alphabet.Index(val)+2)%len(alphabet)]\n  \
    \  }\n    \n    // Return the encrypted string\n    return encrypted\n}\n\nfunc\
    \ TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd0snmdcq_test.go:24:19: undefined: char

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074344
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    \n    // Define the rotated\
    \ alphabet as rotating each letter\n    // by two\n    rotated_alphabet := make([]string,\
    \ len(s))\n    for i := 0; i < len(s); i++ {\n        rotated_alphabet[i] = s[len(s)-1-i]\n\
    \    }\n    \n    // Encrypt the input\n    new_s := \"\"\n    for _, letter :=\
    \ range s {\n        index := rotated_alphabet[letter]\n        new_s = new_s\
    \ + string(index)\n    }\n    \n    return new_s\n}\n\nfunc TestEncrypt(t *testing.T)\
    \ {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp27ivjmh5_test.go:27:31: cannot use s[len(s) - 1 - i] (value of type byte)
    as type string in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074344
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return encryptImpl(s, alphabetRotate([]rune(alphabet)))\n\
    }\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2x9fy8x6_test.go:22:12: undefined: encryptImpl

    /tmp/tmp2x9fy8x6_test.go:22:27: undefined: alphabetRotate

    /tmp/tmp2x9fy8x6_test.go:22:49: undefined: alphabet

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074344
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    // Rotate the alphabet\
    \ by 2\n    alphabet = rotate(alphabet, 2)\n    // Create a string that is the\
    \ same length as the input\n    // and copy the first half of the alphabet\n \
    \   // into the string starting at position 0 (the second half\n    // starts\
    \ at position 1) and the first half of the input \n    // into the string starting\
    \ at position 1 (the second half\n    // starts at position 2) and copy the second\
    \ half of the \n    // input into the string starting at position 0\n    c :=\
    \ make([]string, len(s))\n    c[len(s)/2] = s[:len(s)/2]\n    c[len(s)/2] = s[len(s)/2:]\n\
    \    // Add the second half of the alphabet to the first half of the input\n \
    \   c[0] += alphabet\n    c[1] += s[:len(s)/2]\n    // Add the first half of the\
    \ alphabet to the second half of the input\n    c[2] += alphabet\n    return c[0]\
    \ + c[1]\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual:\
    \ candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"\
    gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\"\
    \ },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyhsxapox_test.go:23:16: undefined: rotate

    /tmp/tmpyhsxapox_test.go:23:23: undefined: alphabet

    /tmp/tmpyhsxapox_test.go:35:13: undefined: alphabet

    /tmp/tmpyhsxapox_test.go:38:13: undefined: alphabet

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074346
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    encrypted := \"\"\n   \
    \ for _, letter := range s {\n        encrypted += letter + encrypt(letter + letter)\n\
    \    }\n    return encrypted\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn4a38kfn_test.go:24:22: invalid operation: letter + encrypt(letter + letter)
    (mismatched types rune and string)

    /tmp/tmpn4a38kfn_test.go:24:39: cannot use letter + letter (value of type rune)
    as type string in argument to encrypt

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074346
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return s[2:] + s[:1] +\
    \ s[3:]\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual:\
    \ candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"\
    gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\"\
    \ },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\npanic: runtime error: slice bounds out of\
    \ range [3:2] [recovered]\n\tpanic: runtime error: slice bounds out of range [3:2]\n\
    \ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.encrypt(...)\n\t/tmp/tmpe76qvxkd_test.go:22\n\
    command-line-arguments_test.TestEncrypt(0x0?)\n\t/tmp/tmpe76qvxkd_test.go:32 +0x1d\n\
    testing.tRunner(0xc0001a0340, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074348
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    // Rotate alphabet by two\n\
    \    alphabet[alphSize-2] += alphabet[alphSize-2]\n    return rotate(s, alphabet[alphSize-2])\n\
    }\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7377xr7b_test.go:23:5: undefined: alphabet

    /tmp/tmp7377xr7b_test.go:23:14: undefined: alphSize

    /tmp/tmp7377xr7b_test.go:23:29: undefined: alphabet

    /tmp/tmp7377xr7b_test.go:23:38: undefined: alphSize

    /tmp/tmp7377xr7b_test.go:24:12: undefined: rotate

    /tmp/tmp7377xr7b_test.go:24:22: undefined: alphabet

    /tmp/tmp7377xr7b_test.go:24:31: undefined: alphSize

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074346
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []string{\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"\
    w\", \"x\", \"y\", \"z\", \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"\
    7\", \"8\", \"9\"}\n    s := strings.ToLower(s)\n    result := \"\"\n    for i,\
    \ _char := range s {\n        result += alphabet[((i+1)%len(alphabet))]\n    }\n\
    \    return result\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfyvgz8x__test.go:23:7: no new variables on left side of :=

    /tmp/tmpfyvgz8x__test.go:23:10: undefined: strings

    /tmp/tmpfyvgz8x__test.go:25:12: _char declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074346
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabets := []string{\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"\
    w\", \"x\", \"y\", \"z\"}\n    alphabets2 := []string{\"b\", \"c\", \"d\", \"\
    e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"\
    p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"\
    a\", \"b\"}\n    alphabets3 := []string{\"c\", \"d\", \"e\", \"f\", \"g\", \"\
    h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"\
    s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \"b\", \"c\"}\n \
    \   alphabets4 := []string{\"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"\
    k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"\
    v\", \"w\", \"x\", \"y\", \"z\", \"a\", \"b\", \"c\", \"d\"}\n    alphabets5 :=\
    \ []string{\"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"\
    , \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\"\
    , \"z\", \"a\", \"b\", \"c\", \"d\", \"e\"}\n    alphabets6 := []string{\"f\"\
    , \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\"\
    , \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \"b\"\
    , \"c\", \"d\", \"e\", \"f\"}\n    alphabets7 := []string{\"g\", \"h\", \"i\"\
    , \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\"\
    , \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \"b\", \"c\", \"d\", \"e\"\
    , \"f\", \"g\"}\n    alphabets8 := []string{\"h\", \"i\", \"j\", \"k\", \"l\"\
    , \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"\
    }\n    alphabets9 := []string{\"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\"\
    , \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"\
    , \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\"}\n    alphabets10\
    \ := []string{\"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"\
    s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \"b\", \"\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpe6ptv849_test.go:31:124: string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074346
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    var a []rune\n    for i\
    \ := 0; i < len(s); i++ {\n        a = append(a, s[len(s)-i])\n    }\n    return\
    \ strconv.Itoa(a[len(a)-1]%26)\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl0246d0k_test.go:24:23: cannot use s[len(s) - i] (value of type byte)
    as type rune in argument to append

    /tmp/tmpl0246d0k_test.go:26:12: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074347
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return encryptRec(s, \"\
    \", \"\")\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual:\
    \ candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"\
    gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\"\
    \ },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplowvq314_test.go:22:12: undefined: encryptRec

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074347
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    var encryptedText string\
    \ = \"\"\n    alphabet := \"abcdefghijklmnopqrstuvwxyz\"\n    for _, letter :=\
    \ range s {\n        encryptedText += alphabet[(alphabet.IndexOf(letter) + 2)\
    \ % len(alphabet)]\n    }\n    return encryptedText\n}\n\nfunc TestEncrypt(t *testing.T)\
    \ {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw8l2u9oo_test.go:25:9: invalid operation: encryptedText += alphabet[(alphabet.IndexOf(letter)
    + 2) % len(alphabet)] (mismatched types string and byte)

    /tmp/tmpw8l2u9oo_test.go:25:45: alphabet.IndexOf undefined (type string has no
    field or method IndexOf)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074347
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc\
    \ TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmp3253hd2n_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmp3253hd2n_test.go:45: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmp3253hd2n_test.go:45: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmp3253hd2n_test.go:45:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmp3253hd2n_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmp3253hd2n_test.go:45: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmp3253hd2n_test.go:45:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmp3253hd2n_test.go:45: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073932
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := \"abcdefghijklmnopqrstuvwxyz\"\
    \n    alphabet = alphabet[0 : len(alphabet)/2] + alphabet[len(alphabet)/2:]\n\
    \    alphabet = alphabet[0 : len(alphabet)/2] + alphabet[len(alphabet)/2:]\n \
    \   alphabet = alphabet[0 : len(alphabet)/2] + alphabet[len(alphabet)/2:]\n  \
    \  alphabet = alphabet[0 : len(alphabet)/2] + alphabet[len(alphabet)/2:]\n   \
    \ return fmt.Sprintf(\"%s\", rotate(s, alphabet))\n}\n\nfunc TestEncrypt(t *testing.T)\
    \ {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj4197h3p_test.go:27:30: undefined: rotate

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074347
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    switch len(s) {\n    case\
    \ 0:\n        return \"\\0\"\n    case 1:\n        return \"\\1\"\n    case 2:\n\
    \        return \"\\2\"\n    case 3:\n        return \"\\3\"\n    case 4:\n  \
    \      return \"\\4\"\n    case 5:\n        return \"\\5\"\n    case 6:\n    \
    \    return \"\\6\"\n    case 7:\n        return \"\\7\"\n    case 8:\n      \
    \  return \"\\8\"\n    case 9:\n        return \"\\9\"\n    case 10:\n       \
    \ return \"\\10\"\n    case 11:\n        return \"\\11\"\n    case 12:\n     \
    \   return \"\\12\"\n    case 13:\n        return \"\\13\"\n    case 14:\n   \
    \     return \"\\14\"\n    case 15:\n        return \"\\15\"\n    case 16:\n \
    \       return \"\\16\"\n    case 17:\n        return \"\\17\"\n    case 18:\n\
    \        return \"\\18\"\n    case 19:\n        return \"\\19\"\n    case 20:\n\
    \        return \"\\20\"\n    case 21:\n        return \"\\21\"\n    case 22:\n\
    \        return \"\\22\"\n    case 23:\n        return \"\\23\"\n    case 24:\n\
    \        return \"\\24\"\n    case 25:\n        return \"\\25\"\n    case 26:\n\
    \        return \"\\26\"\n    case 27:\n        return \"\\27\"\n    case 28:\n\
    \        return \"\\28\"\n    case 29:\n        return \"\\29\"\n    case 30:\n\
    \        return \"\\30\"\n    case 31:\n        return \"\\31\"\n    case 32:\n\
    \        return \"\\32\"\n    case 33:\n        return \"\\33\"\n    case 34:\n\
    \        return \"\\34\"\n    case 35:\n        return \"\\35\"\n    case 36:\n\
    \        return \"\\36\"\n    case 37:\n        return \"\\37\"\n    case 38:\n\
    \        return \"\\3\"\n    case 39:\n        return \"\\4\"\n    case 40:\n\
    \        return \"\\5\"\n    case 41:\n        return \"\\6\"\n    case 42:\n\
    \        return \"\\7\"\n    case 43:\n        return \"\\8\"\n    case 44:\n\
    \        return \"\\9\"\n    case 45:\n        return \"\\10\"\n    case 46:\n\
    \        return \"\\11\"\n    case 47:\n        return \"\\12\"\n    case 48:\n\
    \        return \"\\13\"\n    case 49:\n        return \"\\14\"\n    case 50:\n\
    \        return \"\\15\"\n    case 51:\n        return \"\\16\"\n    case 52:\n\
    \        return \"\\17\"\n    case 53:\n        return \"\\18\"\n    case 54:\n\
    \        return \"\\19\"\n    case 55:\n        return \"\\20\"\n    case 56:\n\
    \        return \"\\21\"\n    case 57:\n        return \"\\22\"\n    case 58:\n\
    \        return \"\\23\"\n    case 59:\n        return \"\\24\"\n    case 60:\n\
    \        return \"\\25\"\n    case 61:\n\nfunc TestEncrypt(t *testing.T) {\n \
    \ candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected:\
    \ \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\"\
    \ },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"\
    et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected:\
    \ \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected:\
    \ \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5o2496xf_test.go:24:19: illegal character U+0022 ''"'' in escape sequence

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074346
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    result := \"\"\n    for\
    \ _, v := range s {\n        if v >= 'a' && v <= 'z' {\n            result +=\
    \ v + v\n        } else {\n            result += v + v.CapitalLetter()\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnkrzut5v_test.go:25:13: invalid operation: result += v + v (mismatched
    types string and rune)

    /tmp/tmpnkrzut5v_test.go:27:29: v.CapitalLetter undefined (type rune has no field
    or method CapitalLetter)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074347
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    // TODO: Make this work\
    \ for any alphabet.\n    i := 0\n    j := 0\n    result := \"\"\n    for i < len(s)\
    \ {\n        j = (j + 2) & (len(s)-1) // Switch the characters in the alphabet.\n\
    \        result += s[j] // Append the character at the new position.\n       \
    \ i++\n    }\n    return result\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgadprnbv_test.go:28:9: invalid operation: result += s[j] (mismatched types
    string and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074347
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    var result []byte\n   \
    \ for _, char := range s {\n        result = append(result, rotate(char))\n  \
    \  }\n    return string(result)\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp70004ed__test.go:24:33: undefined: rotate

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074347
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := \"abcdefghijklmnopqrstuvwxyz\"\
    \n    s = strings.ToLower(s)\n    l := len(s)\n    ans := make([]string, l)\n\
    \    for i := 0; i < l; i++ {\n        ans[i] = alphabet[((alphabet.Index(s[i]))\
    \ + 2) % 26]\n    }\n    return strings.Join(ans, \"\")\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp44ildfqw_test.go:23:9: undefined: strings

    /tmp/tmp44ildfqw_test.go:27:18: cannot use alphabet[((alphabet.Index(s[i])) +
    2) % 26] (value of type byte) as type string in assignment

    /tmp/tmp44ildfqw_test.go:27:38: alphabet.Index undefined (type string has no field
    or method Index)

    /tmp/tmp44ildfqw_test.go:29:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074347
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    // Make sure the alphabet\
    \ is rotated correctly.\n    s := rot1(s)\n    s := rot2(s)\n    s := rot3(s)\n\
    \    s := rot4(s)\n    return s\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphs9llls7_test.go:23:7: no new variables on left side of :=

    /tmp/tmphs9llls7_test.go:23:10: undefined: rot1

    /tmp/tmphs9llls7_test.go:24:7: no new variables on left side of :=

    /tmp/tmphs9llls7_test.go:24:10: undefined: rot2

    /tmp/tmphs9llls7_test.go:25:7: no new variables on left side of :=

    /tmp/tmphs9llls7_test.go:25:10: undefined: rot3

    /tmp/tmphs9llls7_test.go:26:7: no new variables on left side of :=

    /tmp/tmphs9llls7_test.go:26:10: undefined: rot4

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074347
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    var sb strings.Builder\n\
    \    var alpha = \"abcdefghijklmnopqrstuvwxyz\"\n    var beta = \"nopqrstuvwxyzabcdefghijklm\"\
    \n    for _, c := range s {\n        i := strings.Index(alpha, c)\n        j :=\
    \ strings.Index(beta, c)\n        if i < j {\n            sb.WriteString(beta[j])\n\
    \            sb.WriteString(alpha[i])\n        } else {\n            sb.WriteString(beta[i])\n\
    \            sb.WriteString(alpha[j])\n        }\n    }\n    return sb.String()\n\
    }\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi1vo76sf_test.go:22:12: undefined: strings

    /tmp/tmpi1vo76sf_test.go:26:14: undefined: strings

    /tmp/tmpi1vo76sf_test.go:27:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074347
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    switch len(s) {\n    case\
    \ 0:\n        return \"\"\n    case 1:\n        return string(s[0])\n    case\
    \ 2:\n        return string(s[0]) + string(s[1])\n    case 3:\n        return\
    \ string(s[0]) + string(s[1]) + string(s[2])\n    default:\n        // Rotate\
    \ alphabet by two positions down. \n        i := len(alphabet) - 2\n        //\
    \ Swap characters and get new index\n        newIndex := rotate(i, i)\n      \
    \  // Get new character\n        ch := alphabet[i]\n        // Swap characters\n\
    \        alphabet[i] = alphabet[newIndex]\n        alphabet[newIndex] = ch\n \
    \       return encrypt(s[0:len(s)-1]) + alphabet[i] + encrypt(s[len(s)-1:])\n\
    \    }\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual:\
    \ candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"\
    gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\"\
    \ },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpddjc6ati_test.go:33:18: undefined: alphabet

    /tmp/tmpddjc6ati_test.go:35:21: undefined: rotate

    /tmp/tmpddjc6ati_test.go:37:15: undefined: alphabet

    /tmp/tmpddjc6ati_test.go:39:23: undefined: alphabet

    /tmp/tmpddjc6ati_test.go:40:9: undefined: alphabet

    /tmp/tmpddjc6ati_test.go:41:41: undefined: alphabet

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074347
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    var alphabet = []rune(\"\
    abcdefghijklmnopqrstuvwxyz\")\n    var result string = \"\"\n    for _, r := range\
    \ s {\n        result = (result + alphabet[(alphabet.Index(r)+2) % len(alphabet)])\n\
    \    }\n    return result\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyinpe67c_test.go:25:19: invalid operation: result + alphabet[(alphabet.Index(r)
    + 2) % len(alphabet)] (mismatched types string and rune)

    /tmp/tmpyinpe67c_test.go:25:47: alphabet.Index undefined (type []rune has no field
    or method Index)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074347
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    l := len(s)\n    // Create\
    \ an array of letters from the input string s.\n    letter := make([]string, l)\n\
    \    for i := 0; i < l; i++ {\n        letter[i] = string(s[i:i+1])\n    }\n \
    \   // Initialize a variable that will be used to store the current \n    // character\
    \ in the encryption process.\n    cur := letter[0]\n    // Initialize an array\
    \ that holds the encrypted letters.\n    enc := make([]string, l)\n    for i :=\
    \ 0; i < l; i++ {\n        // Determine if the current letter should be shifted\
    \ down\n        // by 2 places.\n        if cur == 'a' {\n            enc[i] =\
    \ 'd'\n        }\n        if cur == 'b' {\n            enc[i] = 'e'\n        }\n\
    \        if cur == 'c' {\n            enc[i] = 'f'\n        }\n        if cur\
    \ == 'd' {\n            enc[i] = 'h'\n        }\n        if cur == 'e' {\n   \
    \         enc[i] = 'j'\n        }\n        if cur == 'f' {\n            enc[i]\
    \ = 'k'\n        }\n        if cur == 'g' {\n            enc[i] = 'l'\n      \
    \  }\n        if cur == 'h' {\n            enc[i] = 'n'\n        }\n        if\
    \ cur == 'j' {\n            enc[i] = 'p'\n        }\n        if cur == 'k' {\n\
    \            enc[i] = 'q'\n        }\n        if cur == 'l' {\n            enc[i]\
    \ = 'r'\n        }\n        if cur == 'n' {\n            enc[i] = 's';\n     \
    \   }\n        if cur == 'p' {\n            enc[i] = 't'\n        }\n        if\
    \ cur == 'q' {\n            enc[i] = 'v'\n        }\n        if cur == 'r' {\n\
    \            enc[i] = 'w'\n        }\n        if cur == 's' {\n            enc[i]\
    \ = 'x'\n        }\n        if cur == 't' {\n            enc[i] = 'y'\n      \
    \  }\n        if cur == 'v' {\n            enc[i] = 'z'\n        }\n        if\
    \ cur == 'w' {\n            enc[i] = 'a'\n        }\n        if cur == 'x' {\n\
    \            enc[i] = 'b'\n        }\n        if cur == 'y' {\n            enc[i]\
    \ = 'c'\n        }\n        if cur == 'z' {\n            enc[i] = 'd'\n      \
    \  }\n        // Shift the current letter down.\n        cur = letter[i+2]\n \
    \   }\n    return string(enc)\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp9yi4qft_test.go:36:19: invalid operation: cur == ''a'' (mismatched types
    string and untyped rune)

    /tmp/tmpp9yi4qft_test.go:37:22: cannot use ''d'' (untyped rune constant 100) as
    string value in assignment

    /tmp/tmpp9yi4qft_test.go:39:19: invalid operation: cur == ''b'' (mismatched types
    string and untyped rune)

    /tmp/tmpp9yi4qft_test.go:40:22: cannot use ''e'' (untyped rune constant 101) as
    string value in assignment

    /tmp/tmpp9yi4qft_test.go:42:19: invalid operation: cur == ''c'' (mismatched types
    string and untyped rune)

    /tmp/tmpp9yi4qft_test.go:43:22: cannot use ''f'' (untyped rune constant 102) as
    string value in assignment

    /tmp/tmpp9yi4qft_test.go:45:19: invalid operation: cur == ''d'' (mismatched types
    string and untyped rune)

    /tmp/tmpp9yi4qft_test.go:46:22: cannot use ''h'' (untyped rune constant 104) as
    string value in assignment

    /tmp/tmpp9yi4qft_test.go:48:19: invalid operation: cur == ''e'' (mismatched types
    string and untyped rune)

    /tmp/tmpp9yi4qft_test.go:49:22: cannot use ''j'' (untyped rune constant 106) as
    string value in assignment

    /tmp/tmpp9yi4qft_test.go:49:22: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074347
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return encryptWithShift(s,\
    \ 0)\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual:\
    \ candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"\
    gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\"\
    \ },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvxzjp7bj_test.go:22:12: undefined: encryptWithShift

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074347
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    k := len(s)\n    l := len(alphabet)\n\
    \    ans := make([]string, k)\n    shift := 2\n    for i := 0; i < k; i++ {\n\
    \        c := s[i]\n        j := shift - 2\n        for {\n            ans[i]\
    \ = alphabet[(j+k) % l] + c\n            j /= 2\n            shift -= 1\n    \
    \        if shift == 0 {\n                break\n            }\n        }\n  \
    \  }\n    return strings.Join(ans, \"\")\n}\n\nfunc TestEncrypt(t *testing.T)\
    \ {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpf1bjfyec_test.go:23:14: undefined: alphabet

    /tmp/tmpf1bjfyec_test.go:30:22: undefined: alphabet

    /tmp/tmpf1bjfyec_test.go:38:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074347
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    // Write your code here.\n\
    \    result := \"\"\n    k := len(s)\n    for i := 0; i < len(s); i++ {\n    \
    \    if i+k-1 >= len(s) {\n            result = result + s[len(s)-i-1]\n     \
    \       break\n        }\n        result = result + s[len(s)-i-k]\n    }\n   \
    \ return result\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptdbi5v7j_test.go:27:22: invalid operation: result + s[len(s) - i - 1]
    (mismatched types string and byte)

    /tmp/tmptdbi5v7j_test.go:30:18: invalid operation: result + s[len(s) - i - k]
    (mismatched types string and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074347
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    r := make([]rune, len(s))\n\
    \    for i, r := range s {\n        r[i] = 'A' + (r-'A') % 26\n    }\n    return\
    \ string(r)\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpamgncs_x_test.go:23:9: i declared but not used

    /tmp/tmpamgncs_x_test.go:24:10: invalid operation: cannot index r (variable of
    type rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074347
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    var alpha []rune\n    for\
    \ _, r := range s {\n        alpha = append(alpha, r)\n    }\n    alphaSize :=\
    \ len(alpha)\n    for i := 0; i < alphaSize; i++ {\n        if i < alphaSize-1\
    \ {\n            alpha[i+1] = alpha[i]\n            alpha[i] = alpha[i+1]\n  \
    \          alphaSize--\n        } else {\n            alpha[i+1] = alpha[alphaSize-1]\n\
    \            alpha[alphaSize-1] = alpha[i]\n            alphaSize--\n        }\n\
    \    }\n    s := make([]rune, len(s))\n    for i, r := range s {\n        s[i]\
    \ = alpha[alphabet.Index(r)]\n    }\n    return string(s)\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9qfuctvi_test.go:38:7: no new variables on left side of :=

    /tmp/tmp9qfuctvi_test.go:38:10: cannot use make([]rune, len(s)) (value of type
    []rune) as type string in assignment

    /tmp/tmp9qfuctvi_test.go:40:9: cannot assign to s[i] (value of type byte)

    /tmp/tmp9qfuctvi_test.go:40:22: undefined: alphabet

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074347
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    var alphabet = [26]string{\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"\
    w\", \"x\", \"y\", \"z\"}\n    var alphabetLen = len(alphabet)\n\n    chars :=\
    \ make([]string, 0, len(s)*2)\n    for _, c := range s {\n        chars = append(chars,\
    \ alphabet[c%alphabetLen])\n        chars = append(chars, alphabet[((c + 1)%alphabetLen)%alphabetLen])\n\
    \    }\n    return strings.Join(chars, \"\")\n}\n\nfunc TestEncrypt(t *testing.T)\
    \ {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5hnnnm9d_test.go:27:40: invalid operation: c % alphabetLen (mismatched
    types rune and int)

    /tmp/tmp5hnnnm9d_test.go:28:41: invalid operation: (c + 1) % alphabetLen (mismatched
    types rune and int)

    /tmp/tmp5hnnnm9d_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074347
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    // TODO: Your code here.\n\
    }\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpm_8ydxdp_test.go:23:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074347
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []byte(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    s := []byte(s)\n    for i, a := range s {\n        s[i] = alphabet[((s[i]\
    \ - 'a') + i) % len(alphabet)]\n    }\n    return string(s)\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpf9q58iyb_test.go:23:7: no new variables on left side of :=

    /tmp/tmpf9q58iyb_test.go:23:10: cannot use []byte(s) (value of type []byte) as
    type string in assignment

    /tmp/tmpf9q58iyb_test.go:24:12: a declared but not used

    /tmp/tmpf9q58iyb_test.go:25:9: cannot assign to s[i] (value of type byte)

    /tmp/tmpf9q58iyb_test.go:25:26: invalid operation: (s[i] - ''a'') + i (mismatched
    types byte and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074347
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    result := \"\"\n    for\
    \ _, l := range s {\n        result += (alphabet[(alphabet.Index(l) + 2) % len(alphabet)]\
    \ + l)\n    }\n    return result\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq8xtj4cb_test.go:24:20: undefined: alphabet

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074347
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    i, j := 1, 0\n    for _, letter := range s {\n        alphabet[i] = alphabet[j-1]\n\
    \        alphabet[j-1] = letter\n        i++\n        j++\n        if i == len(alphabet)\
    \ {\n            i = 0\n            j++\n        }\n    }\n    return string(alphabet)\n\
    }\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.encrypt({0x51e235, 0x2})\n\t/tmp/tmpm4amkis9_test.go:25\
    \ +0x212\ncommand-line-arguments_test.TestEncrypt(0x0?)\n\t/tmp/tmpm4amkis9_test.go:44\
    \ +0x4d\ntesting.tRunner(0xc0001924e0, 0x528fe8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074349
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    result := \"\"\n    for\
    \ _, l := range s {\n        if l == ' ' {\n            result += \" \"\n    \
    \        continue\n        }\n        for _, b := range alphabet {\n         \
    \   if b == l {\n                result = result + alphabet[letterIndex+1] + alphabet[letterIndex+2]\n\
    \                letterIndex += 2\n                if letterIndex >= len(alphabet)\
    \ {\n                    letterIndex = 0\n                }\n                break\n\
    \            }\n        }\n    }\n    return result\n}\n\nfunc TestEncrypt(t *testing.T)\
    \ {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5ujcakrc_test.go:28:27: undefined: alphabet

    /tmp/tmp5ujcakrc_test.go:30:35: undefined: alphabet

    /tmp/tmp5ujcakrc_test.go:30:44: undefined: letterIndex

    /tmp/tmp5ujcakrc_test.go:30:61: undefined: alphabet

    /tmp/tmp5ujcakrc_test.go:30:70: undefined: letterIndex

    /tmp/tmp5ujcakrc_test.go:31:17: undefined: letterIndex

    /tmp/tmp5ujcakrc_test.go:32:20: undefined: letterIndex

    /tmp/tmp5ujcakrc_test.go:32:39: undefined: alphabet

    /tmp/tmp5ujcakrc_test.go:33:21: undefined: letterIndex

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074349
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    var c int\n    var res\
    \ string\n    for i, x := range s {\n        if x == 'z' || x == 'Z' {\n     \
    \       c += 3\n        } else {\n            c += 2\n        }\n        res =\
    \ res + string(rotate(alphabet[c-2], alphabet[c-1]))\n    }\n    return res\n\
    }\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpaez4fte3_test.go:24:9: i declared but not used

    /tmp/tmpaez4fte3_test.go:30:28: undefined: rotate

    /tmp/tmpaez4fte3_test.go:30:35: undefined: alphabet

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074349
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    result := \"\"\n    k :=\
    \ len(s)\n    for i := 0; i < k; i++ {\n        result += rotateAlphabet(s[i+1])\n\
    \    }\n    return result\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplswu4gdq_test.go:25:19: undefined: rotateAlphabet

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074349
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    // Your code here\n   \
    \ return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpz2whgmem_test.go:46: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpz2whgmem_test.go:46: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpz2whgmem_test.go:46: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpz2whgmem_test.go:46:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpz2whgmem_test.go:46: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpz2whgmem_test.go:46: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpz2whgmem_test.go:46:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpz2whgmem_test.go:46: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073932
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    result := \"\"\n    for\
    \ i := 0; i < len(s); i++ {\n        result += chr(s[len(s)-1-i] + 1)\n    }\n\
    \    return result\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpexz80ab7_test.go:24:19: undefined: chr

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074349
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    r := make([]rune, len(s)+1)\n\
    \    r[0] = 'a'\n    for i := 1; i < len(s); i++ {\n        r[i] = 'z' - s[i]\
    \ + 'a' \n    }\n    return string(r)\n}\n\nfunc TestEncrypt(t *testing.T) {\n\
    \  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"\
    ), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"\
    ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     {\
    \ actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp09izzumr_test.go:25:16: cannot use ''z'' - s[i] + ''a'' (value of type
    byte) as type rune in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074349
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    p := make([]string, len(s))\n\
    \    for i := 0; i < len(s); i++ {\n        if i < len(s)/2 {\n            p[i]\
    \ = alphabet[((s[i] - alphabet[(i%len(alphabet))])%26)] + alphabet[((s[i+1] -\
    \ alphabet[(i+1)%len(alphabet)])%26)]\n        } else {\n            p[i] = alphabet[(s[i]\
    \ - alphabet[(i%len(alphabet))])%26]\n        }\n    }\n    return string(p)\n\
    }\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfp7qn26p_test.go:25:20: undefined: alphabet

    /tmp/tmpfp7qn26p_test.go:27:20: undefined: alphabet

    /tmp/tmpfp7qn26p_test.go:30:19: cannot convert p (variable of type []string) to
    type string

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074349
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    var encrypted string =\
    \ \"\"\n    var index int = 0\n    for _, char := range s {\n        if char ==\
    \ 'a' || char == 'b' {\n            index += 1\n        }\n        encrypted +=\
    \ string(cipher[index])\n    }\n    return encrypted\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphrc5ke9__test.go:28:29: undefined: cipher

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074349
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    var alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encrypted = ''\n\n    for i := 0; i < len(s); i++ {\n        var index\
    \ int\n        var letter := s[i]\n        for index = 0; index < len(alphabet);\
    \ index++ {\n            letter = alphabet[index]\n            if letter == letter\
    \ {\n                letter = alphabet[(index + 1) % len(alphabet)]\n        \
    \        break\n            }\n        }\n        encrypted += letter\n    }\n\
    \n    return encrypted\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate :=\
    \ encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpxz6o69_w_test.go:23:21: illegal rune literal

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074348
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := \"abcdefghijklmnopqrstuvwxyz\"\
    \n    letters := make([]string, len(alphabet))\n    letters[0] = alphabet[0]\n\
    \    letters[1] = alphabet[1+len(alphabet)/2]\n    letters[2] = alphabet[2+len(alphabet)/2]\n\
    \    letters[3] = alphabet[3+len(alphabet)/2]\n    letters[4] = alphabet[4+len(alphabet)/2]\n\
    \    letters[5] = alphabet[5+len(alphabet)/2]\n    letters[6] = alphabet[6+len(alphabet)/2]\n\
    \    letters[7] = alphabet[7+len(alphabet)/2]\n    letters[8] = alphabet[8+len(alphabet)/2]\n\
    \    letters[9] = alphabet[9+len(alphabet)/2]\n    letters[10] = alphabet[10+len(alphabet)/2]\n\
    \    letters[11] = alphabet[11+len(alphabet)/2]\n    letters[12] = alphabet[12+len(alphabet)/2]\n\
    \    letters[13] = alphabet[13+len(alphabet)/2]\n    letters[14] = alphabet[14+len(alphabet)/2]\n\
    \    letters[15] = alphabet[15+len(alphabet)/2]\n    letters[16] = alphabet[16+len(alphabet)/2]\n\
    \    letters[17] = alphabet[17+len(alphabet)/2]\n    letters[18] = alphabet[18+len(alphabet)/2]\n\
    \    letters[19] = alphabet[19+len(alphabet)/2]\n    letters[20] = alphabet[20+len(alphabet)/2]\n\
    \    letters[21] = alphabet[21+len(alphabet)/2]\n    letters[22] = alphabet[22+len(alphabet)/2]\n\
    \    letters[23] = alphabet[23+len(alphabet)/2]\n    letters[24] = alphabet[24+len(alphabet)/2]\n\
    \    letters[25] = alphabet[25+len(alphabet)/2]\n    letters[26] = alphabet[26+len(alphabet)/2]\n\
    \    letters[27] = alphabet[27+len(alphabet)/2]\n    letters[28] = alphabet[28+len(alphabet)/2]\n\
    \    letters[29] = alphabet[29+len(alphabet)/2]\n    letters[30] = alphabet[30+len(alphabet)/2]\n\
    \    letters[31] = alphabet[31+len(alphabet)/2]\n    letters[32] = alphabet[32+len(alphabet)/2]\n\
    \    letters[33] = alphabet[33+len(alphabet)/2]\n    letters[34] = alphabet[34+len(alphabet)/2]\n\
    \    letters[35] = alphabet[35+len(alphabet)/2]\n    letters[36\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpuss74plh_test.go:60:15: expected '']'', found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074348
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    k := len(s)\n    var letter\
    \ string\n    for i := 0; i < k; {\n        letter = s[i]\n        if letter ==\
    \ 'i' {\n            letter = s[len(s)-1]\n        }\n        if letter == 'z'\
    \ {\n            letter = s[len(s)-2]\n        }\n        if letter == 'j' {\n\
    \            letter = s[len(s)-3]\n        }\n        i += 2\n        s[i] = letter\n\
    \    }\n    return s\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo_2t7ho4_test.go:25:18: cannot use s[i] (value of type byte) as type string
    in assignment

    /tmp/tmpo_2t7ho4_test.go:26:22: invalid operation: letter == ''i'' (mismatched
    types string and untyped rune)

    /tmp/tmpo_2t7ho4_test.go:27:22: cannot use s[len(s) - 1] (value of type byte)
    as type string in assignment

    /tmp/tmpo_2t7ho4_test.go:29:22: invalid operation: letter == ''z'' (mismatched
    types string and untyped rune)

    /tmp/tmpo_2t7ho4_test.go:30:22: cannot use s[len(s) - 2] (value of type byte)
    as type string in assignment

    /tmp/tmpo_2t7ho4_test.go:32:22: invalid operation: letter == ''j'' (mismatched
    types string and untyped rune)

    /tmp/tmpo_2t7ho4_test.go:33:22: cannot use s[len(s) - 3] (value of type byte)
    as type string in assignment

    /tmp/tmpo_2t7ho4_test.go:36:9: cannot assign to s[i] (value of type byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074349
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    l := len(s)\n    result\
    \ := make([]rune, l)\n\n    for i, c := range s {\n        result[i] = letters[(c\
    \ - shift[letter]) % len(letters)]\n    }\n\n    return string(result)\n}\n\n\
    func TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_n4vvmy3_test.go:26:21: undefined: letters

    /tmp/tmp_n4vvmy3_test.go:26:34: undefined: shift

    /tmp/tmp_n4vvmy3_test.go:26:40: undefined: letter

    /tmp/tmp_n4vvmy3_test.go:26:55: undefined: letters

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074349
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    result := \"\"\n    temp\
    \ := \"\"\n    for _, letter := range s {\n        temp = string(append(alphabet,\
    \ letter))\n        for i := len(temp); i > 0; i-- {\n            result += temp[i-2]\
    \ + temp[i-1]\n        }\n    }\n    return result\n}\n\nfunc TestEncrypt(t *testing.T)\
    \ {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpembuve5p_test.go:25:30: undefined: alphabet

    /tmp/tmpembuve5p_test.go:27:13: invalid operation: result += temp[i - 2] + temp[i
    - 1] (mismatched types string and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074349
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    // Initialize an alphabet\
    \ with the rotated letters as follows:\n    // A -> E\n    // B -> F\n    // C\
    \ -> G\n    // D -> H\n    // E -> A\n    // F-> B\n    // G-> C\n    // H-> D\n\
    \    // The alphabet should be in a list\n    alphabet = make([]rune, \"ABCDEFGHI\"\
    )\n    for i, r := range alphabet {\n        alphabet[i] = rotatedLetter[r]\n\
    \    }\n    alphabet = append(alphabet, rotatedLetter[0])\n    alphabet = append(alphabet,\
    \ rotatedLetter[3])\n\n    n := len(s)\n    result := make([]rune, n)\n    \n\
    \    // Encrypt each character of the string and add it to the result\n    for\
    \ i := 0; i < n; i++ {\n        result[i] = alphabet[s[i]]\n    }\n\n    // Print\
    \ out the encrypted string\n    return string(result)\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpng1e7kv1_test.go:32:5: undefined: alphabet

    /tmp/tmpng1e7kv1_test.go:32:29: cannot convert "ABCDEFGHI" (untyped string constant)
    to int

    /tmp/tmpng1e7kv1_test.go:33:23: undefined: alphabet

    /tmp/tmpng1e7kv1_test.go:34:9: undefined: alphabet

    /tmp/tmpng1e7kv1_test.go:34:23: undefined: rotatedLetter

    /tmp/tmpng1e7kv1_test.go:36:5: undefined: alphabet

    /tmp/tmpng1e7kv1_test.go:36:23: undefined: alphabet

    /tmp/tmpng1e7kv1_test.go:36:33: undefined: rotatedLetter

    /tmp/tmpng1e7kv1_test.go:37:23: undefined: alphabet

    /tmp/tmpng1e7kv1_test.go:37:33: undefined: rotatedLetter

    /tmp/tmpng1e7kv1_test.go:37:33: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074349
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet = alphabet[2:]\n    for i := 0; i < len(alphabet); i++ {\n   \
    \     alphabet[i] = alphabet[len(alphabet)-i-1]\n    }\n    for i := 0; i < len(s);\
    \ i++ {\n        alphabet[i] = alphabet[i+1]\n    }\n    return string(alphabet[s:s+len(s)])\n\
    }\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd7rwl2hw_test.go:30:28: invalid argument: index s (variable of type string)
    must be integer

    /tmp/tmpd7rwl2hw_test.go:30:30: invalid operation: s + len(s) (mismatched types
    string and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074349
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return encrypt([]rune(s),\
    \ len(s))\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual:\
    \ candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"\
    gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\"\
    \ },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4dvrhd3u_test.go:22:31:\
    \ too many arguments in call to encrypt\n\thave ([]rune, int)\n\twant (string)\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074349
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    var result string\n   \
    \ for _, letter := range s {\n        result += string(alphabet[alphabet.IndexOf(letter)])\n\
    \    }\n    return result\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4_ybyghz_test.go:24:26: undefined: alphabet

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074349
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    ans := \"\"\n    if len(s)\
    \ < 1 {\n        return s\n    }\n    for i := len(s) - 1; i >= 0; i-- {\n   \
    \     char := s[i]+s[i+1]\n        ans = ans + string(alphabet[rotl(int(char))])\
    \ + s[i] + s[i]\n    }\n    return ans\n}\n\nfunc TestEncrypt(t *testing.T) {\n\
    \  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"\
    ), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"\
    ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     {\
    \ actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2ruo_x29_test.go:28:28: undefined: alphabet

    /tmp/tmp2ruo_x29_test.go:28:37: undefined: rotl

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074349
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    var newS string = \"\"\n\
    \    var cur string\n    for _, char := range s {\n        cur = string([]byte(s))\n\
    \        cur = string(cur[0: len(cur)-2]) + string(cur[0: len(cur)-2] + cur[len(cur)-2:])\n\
    \        cur = string([]byte(cur[:len(cur)-2])) + string([]byte(cur[len(cur)-2:])\
    \ + cur[:len(cur)-2])\n        newS = newS + cur\n    }\n    return newS\n}\n\n\
    func TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpciwem_kr_test.go:24:12: char declared but not used

    /tmp/tmpciwem_kr_test.go:27:57: invalid operation: []byte(cur[len(cur) - 2:])
    + cur[:len(cur) - 2] (mismatched types []byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074349
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n\n    alphabet := append(alphabet, alphabet...)\n\
    \    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    alphabet := append(alphabet, alphabet...)\n    alphabet :=\
    \ append(alphabet, alphabet...)\n\n    shifted := []rune(s)\n\n    for i, c :=\
    \ range shifted {\n        shifted[i] = alphabet[(len(alphabet)-2)-((i%4)+2)]\n\
    \    }\n\n    return string(shifted)\n}\n\nfunc TestEncrypt(t *testing.T) {\n\
    \  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"\
    ), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"\
    ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     {\
    \ actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkbfl3mvi_test.go:23:14: no new variables on left side of :=

    /tmp/tmpkbfl3mvi_test.go:24:14: no new variables on left side of :=

    /tmp/tmpkbfl3mvi_test.go:25:14: no new variables on left side of :=

    /tmp/tmpkbfl3mvi_test.go:26:14: no new variables on left side of :=

    /tmp/tmpkbfl3mvi_test.go:28:14: no new variables on left side of :=

    /tmp/tmpkbfl3mvi_test.go:29:14: no new variables on left side of :=

    /tmp/tmpkbfl3mvi_test.go:30:14: no new variables on left side of :=

    /tmp/tmpkbfl3mvi_test.go:31:14: no new variables on left side of :=

    /tmp/tmpkbfl3mvi_test.go:32:14: no new variables on left side of :=

    /tmp/tmpkbfl3mvi_test.go:36:12: c declared but not used

    /tmp/tmpkbfl3mvi_test.go:36:12: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074349
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabetShift = alphabetShift\
    \ / 2\n    alphabet := \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n    encryptedString := \"\"\n    for _, l := range s {\n        char = alphabet[alphabet.FindIndex(func(x\
    \ rune) bool {\n            return x == l\n        })[alphabet.FindIndex(func(x\
    \ rune) bool {\n            return x > l\n        })[alphabet.FindIndex(func(x\
    \ rune) bool {\n            return x == alphabetShift\n        })]]\n        encryptedString\
    \ = encryptedString + char\n    }\n    return encryptedString\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpq0if1j_w_test.go:32:13: expected '']'', found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074348
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    x := make([]int, len(s)+1)\n\
    \    for i := range x {\n        x[i] = i\n    }\n    x[len(x)-1] = 64\n    k\
    \ := make([]int, len(x))\n    for i := range k {\n        k[i] = i*2\n    }\n\
    \    k := append(k, 64+len(s))\n    for i := 0; i < len(k); i++ {\n        k[i]\
    \ += len(s)\n    }\n    n := make([]int, len(k))\n    for i := range n {\n   \
    \     n[i] = k[i]\n    }\n    n := append(n, len(s))\n\n    l := len(n)\n    t\
    \ := make([]int, l)\n    i := 0\n    for i := 0; i < l; i++ {\n        t[i] =\
    \ n[i]\n    }\n    t[0] ^= 0xa09\n    j := 1\n    for i := 1; i < l; i++ {\n \
    \       t[i] ^= 0x6ed9 & ((t[i-1] >> 4) ^ t[i-1] & 0xf) \n    }\n    t[l] ^= 0xca4\n\
    \    s := make([]byte, l+1)\n    j := 0\n    for i := 0; i < l; i++ {\n      \
    \  s[j] = t[i]\n        j++\n        if j >= l {\n            j = j - l\n    \
    \    }\n    }\n    return string(s)\n}\n\nfunc TestEncrypt(t *testing.T) {\n \
    \ candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected:\
    \ \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\"\
    \ },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"\
    et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected:\
    \ \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected:\
    \ \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxupqqqy7_test.go:31:7: no new variables on left side of :=

    /tmp/tmpxupqqqy7_test.go:39:7: no new variables on left side of :=

    /tmp/tmpxupqqqy7_test.go:43:5: i declared but not used

    /tmp/tmpxupqqqy7_test.go:53:7: no new variables on left side of :=

    /tmp/tmpxupqqqy7_test.go:53:10: cannot use make([]byte, l + 1) (value of type
    []byte) as type string in assignment

    /tmp/tmpxupqqqy7_test.go:54:7: no new variables on left side of :=

    /tmp/tmpxupqqqy7_test.go:56:9: cannot assign to s[j] (value of type byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074349
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    // Return the original\
    \ string if it is smaller than the key.\n    if len(s) <= keySize {\n        return\
    \ s\n    }\n\n    key := make([]rune, keySize)\n    for i := range key {\n   \
    \     key[i] = letters[i + shift]\n    }\n\n    s := []rune(s) // Convert the\
    \ string to an array of runes.\n    key := make([]rune, len(s))\n    for i :=\
    \ range key {\n        key[i] = letters[i]\n    }\n    \n    var result string\
    \ = \"\"\n\n    // Perform the key transposition.\n    for i := 0; i < len(s);\
    \ i++ {\n        resultString := \"\"\n\n        // Perform the shift for each\
    \ character in the string.\n        // For every character in the string\n   \
    \     // perform a left shift by two multiplied by the character index.\n    \
    \    for j := 0; j < keySize/2; j++ {\n            // Find the corresponding character\
    \ in the key.\n            // The character index should be multiplied by two\n\
    \            // to account for the two shifts being applied per character.\n \
    \           resultString += key[(i * keySize) + j * 2]\n        }\n\n        //\
    \ Append the character to the result string.\n        result = result + resultString\n\
    \    }\n\n    return result\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4lq3pop8_test.go:23:18: undefined: keySize

    /tmp/tmp4lq3pop8_test.go:27:25: undefined: keySize

    /tmp/tmp4lq3pop8_test.go:29:18: undefined: letters

    /tmp/tmp4lq3pop8_test.go:29:30: undefined: shift

    /tmp/tmp4lq3pop8_test.go:32:7: no new variables on left side of :=

    /tmp/tmp4lq3pop8_test.go:32:10: cannot use []rune(s) (value of type []rune) as
    type string in assignment

    /tmp/tmp4lq3pop8_test.go:33:9: no new variables on left side of :=

    /tmp/tmp4lq3pop8_test.go:35:18: undefined: letters

    /tmp/tmp4lq3pop8_test.go:47:25: undefined: keySize

    /tmp/tmp4lq3pop8_test.go:51:38: undefined: keySize

    /tmp/tmp4lq3pop8_test.go:51:38: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074349
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabets := map[rune]rune{\n\
    \        'a':'g', 'a':'d', 'a':'f', 'a':'h',\n        'b':'k', 'b':'j', 'b':'l',\
    \ 'b':'o',\n        'c':'n', 'c':'p', 'c':'q', 'c':'r', 'c':'s',\n        'd':'t',\
    \ 'd':'w', 'd':'x', 'd':'y', 'd':'z',\n        'e':'p', 'e':'q', 'e':'r', 'e':'s',\
    \ 'e':'t',\n        'f':'x', 'f':'y', 'f':'z', 'g':'t', 'g':'w', 'g':'x',\n  \
    \      'h':'y', 'h':'z', 'i':'z', 'j':'z', 'k':'z', 'l':'z',\n        'm':'z',\
    \ 'n':'z', 'o':'z', 'p':'z', 'q':'z', 'r':'z',\n        's':'z', 't':'z', 'w':'z',\
    \ 'x':'z', 'y':'z', 'z':'z',\n    }\n    k := 0\n    newS := \"\"\n    for _,\
    \ letter := range s {\n        r := alphabets[letter]\n        newS += alphabets[alphabets[r]]\n\
    \        k += 2\n        alphabets[r] = alphabets[k-1]\n    }\n    return newS\n\
    }\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpon71pf61_test.go:23:18: duplicate key 97 in map literal

    /tmp/tmpon71pf61_test.go:24:18: duplicate key 98 in map literal

    /tmp/tmpon71pf61_test.go:25:18: duplicate key 99 in map literal

    /tmp/tmpon71pf61_test.go:26:18: duplicate key 100 in map literal

    /tmp/tmpon71pf61_test.go:27:18: duplicate key 101 in map literal

    /tmp/tmpon71pf61_test.go:28:18: duplicate key 102 in map literal

    /tmp/tmpon71pf61_test.go:28:45: duplicate key 103 in map literal

    /tmp/tmpon71pf61_test.go:29:18: duplicate key 104 in map literal

    /tmp/tmpon71pf61_test.go:37:9: invalid operation: newS += alphabets[alphabets[r]]
    (mismatched types string and rune)

    /tmp/tmpon71pf61_test.go:39:34: cannot use k - 1 (value of type int) as type rune
    in map index

    /tmp/tmpon71pf61_test.go:39:34: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074350
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []byte(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    result := \"\"\n\n    for _, char := range s {\n        for _, index :=\
    \ range alphabet {\n            if index == char {\n                result +=\
    \ alphabet[(alphabet.Index(char)+2)%26]\n            }\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqs12tfoi_test.go:27:25: invalid operation: index == char (mismatched types
    byte and rune)

    /tmp/tmpqs12tfoi_test.go:28:17: invalid operation: result += alphabet[(alphabet.Index(char)
    + 2) % 26] (mismatched types string and byte)

    /tmp/tmpqs12tfoi_test.go:28:46: alphabet.Index undefined (type []byte has no field
    or method Index)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074350
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    p := []rune(s)\n    for\
    \ i, r := range p {\n        var l int\n        for j := 0; j < 2; j += 1{\n \
    \           if j == 0 {\n                l = (r - 'A' + 1) % 26\n            }\
    \ else {\n                l = (r - 'a' + 1) % 26\n            }\n        }\n \
    \       p[i] = 'A' + l\n    }\n    return string(p)\n}\n\nfunc TestEncrypt(t *testing.T)\
    \ {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsbaaa6e0_test.go:27:21: cannot use (r - ''A'' + 1) % 26 (value of type
    rune) as type int in assignment

    /tmp/tmpsbaaa6e0_test.go:29:21: cannot use (r - ''a'' + 1) % 26 (value of type
    rune) as type int in assignment

    /tmp/tmpsbaaa6e0_test.go:32:16: cannot use ''A'' + l (value of type int) as type
    rune in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074350
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return fmt.Sprintf(\"%c%c%c%c%c%c%c%c%c%c%c%c%c%c\"\
    ,\n        'l','m','e','w','h','j','k','l','o','p','n','o','g')\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test

    /tmp/tmpxrw2bt1c_test.go:22:12: fmt.Sprintf format %c reads arg #14, but call
    has 13 args

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074351
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    result := \"\"\n    for\
    \ i, letter := range s {\n        if i == 0 {\n            result = letter + letter\n\
    \        } else {\n            result = letter + result[((int(i) - 2)*2)+1]\n\
    \        }\n    }\n    return result\n}\n\nfunc TestEncrypt(t *testing.T) {\n\
    \  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"\
    ), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"\
    ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     {\
    \ actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvng0jgsl_test.go:25:22: cannot use letter + letter (value of type rune)
    as type string in assignment

    /tmp/tmpvng0jgsl_test.go:27:22: invalid operation: letter + result[((int(i) -
    2) * 2) + 1] (mismatched types rune and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074350
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    result := make([]rune,\
    \ 0)\n    for i, letter := range s {\n        result += append(alphabet[letter-65],\
    \ alphabet[letter+65])\n    }\n    return string(result)\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpeovmnmg1_test.go:23:9: i declared but not used

    /tmp/tmpeovmnmg1_test.go:24:26: undefined: alphabet

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074350
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []string{\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"\
    w\", \"x\", \"y\", \"z\"}\n    s := s + make([]rune, len(alphabet)-1)\n    return\
    \ encryptInPlace(s, 0, alphabet)\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpekwywfeu_test.go:23:7: no new variables on left side of :=

    /tmp/tmpekwywfeu_test.go:23:10: invalid operation: s + make([]rune, len(alphabet)
    - 1) (mismatched types string and []rune)

    /tmp/tmpekwywfeu_test.go:24:12: undefined: encryptInPlace

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074351
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    ans := []string{}\n   \
    \ l := len(s)\n    for i := 0; i < l; i++ {\n        c := s[i]\n        j = (j+2)%26\n\
    \        ans = append(ans, alphabet_rotated[c])\n    }\n    return string(ans)\n\
    }\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptpa_b60t_test.go:26:14: undefined: j

    /tmp/tmptpa_b60t_test.go:27:27: undefined: alphabet_rotated

    /tmp/tmptpa_b60t_test.go:29:19: cannot convert ans (variable of type []string)
    to type string

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074351
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    encrypted := \"\"\n   \
    \ rotation := 0\n    for _, char := range s {\n        encrypted += alphabet[((char\
    \ + rotation) % 26)]\n        rotation += 2\n    }\n    return encrypted\n}\n\n\
    func TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplrg7cpnu_test.go:25:22: undefined: alphabet

    /tmp/tmplrg7cpnu_test.go:25:33: invalid operation: char + rotation (mismatched
    types rune and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074351
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := \"abcdefghijklmnopqrstuvwxyz\"\
    \n\n    // Rotate each letter on the alphabet by two.\n    for i := 0; i < len(s)/2;\
    \ i++ {\n        char := alphabet[((len(alphabet) - 1 - i) + len(alphabet)/2)%len(alphabet)]\n\
    \        alphabet = alphabet[:i] + char + alphabet[i:]\n    }\n\n    // Rotate\
    \ each letter on the alphabet by two until we get to the middle.\n    for i :=\
    \ 0; i < len(s)/2+1; i++ {\n        char := alphabet[(i + len(alphabet)/2)%len(alphabet)]\n\
    \        alphabet = alphabet[:i] + char + alphabet[i:]\n    }\n\n    // Add spaces\
    \ so the alphabet is two chars long.\n    alphabet += \" \"\n    alphabet += \"\
    \ \"\n\n    output := \"\"\n    for _, char := range s {\n        output += alphabet[(alphabet.index(char)\
    \ + len(alphabet)/2)%len(alphabet)]\n    }\n    return output\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8s60hz0e_test.go:27:28: invalid operation: alphabet[:i] + char (mismatched
    types string and byte)

    /tmp/tmp8s60hz0e_test.go:33:28: invalid operation: alphabet[:i] + char (mismatched
    types string and byte)

    /tmp/tmp8s60hz0e_test.go:42:9: invalid operation: output += alphabet[(alphabet.index(char)
    + len(alphabet) / 2) % len(alphabet)] (mismatched types string and byte)

    /tmp/tmp8s60hz0e_test.go:42:38: alphabet.index undefined (type string has no field
    or method index)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074351
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n\ta := make([]string, 26)\n\
    \tfor i := 0; i < 26; i++ {\n\t\ta[i] = fmt.Sprintf(\"%c\", i)\n\t}\n\tvar b []string\n\
    \tfor _, c := range s {\n\t\tif c == 'a' {\n\t\t\tb = append(b, a[len(a)-2])\n\
    \t\t\tb = append(b, a[len(a)-1])\n\t\t} else {\n\t\t\tb = append(b, a[0])\n\t\t\
    \tb = append(b, a[1])\n\t\t}\n\t}\n\treturn string(b)\n}\n</code>\n<|/ a |>\n\
    <| c |>\nThis fails for \"abcdefghijklmnop\" with an error of slice index out\
    \ of range\n<|/ c |>\n<| a tags=go,cryptography,string |>\nOne way to solve it\
    \ would be to use \"fmt.Sprintf\" in a loop like this - \n<code>\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp0af6xahr_test.go:38:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074350
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    var ret string = \"\"\n\
    \    for i := 0; i < len(s); i++ {\n        if s[i] != ' ' {\n            ret\
    \ += s[i] + s[i]\n        } else {\n            ret += s[i]\n        }\n    }\n\
    \    return ret\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcbry1sdl_test.go:25:13: invalid operation: ret += s[i] + s[i] (mismatched
    types string and byte)

    /tmp/tmpcbry1sdl_test.go:27:13: invalid operation: ret += s[i] (mismatched types
    string and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074351
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    )\n    if len(s)%2 == 1 {\n        s = fmt.Sprintf(\"%c%c\", alphabet.([]rune)(len(alphabet)/2,\
    \ alphabet.([]rune)(len(alphabet)/2+1))\n    }\n    s := s[len(s)/2-1:] + s[:len(s)/2]\n\
    \    return s\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpc30gxvcy_test.go:24:105: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074350
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    letters := []string{\"\"\
    , \"\"}\n    for i := 0; i < len(s); i++ {\n        letters[len(s)-i-1] = letters[len(s)-i-1]\
    \ + s[i]\n    }\n    letters[len(s)/2] = \"z\"\n    letters[len(s)/2] = letters[len(s)/2]\
    \ + letters[len(s)/2]\n\n    return string(letters)\n}\nfunc TestEncrypt(t *testing.T)\
    \ {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp18bhxuq__test.go:24:31: invalid operation: letters[len(s) - i - 1] + s[i]
    (mismatched types string and byte)

    /tmp/tmp18bhxuq__test.go:29:19: cannot convert letters (variable of type []string)
    to type string

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074351
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    // Initialize variable\n\
    \    var c string\n\n    // Set c = \"a\"\n    c = \"a\"\n    for i := 0; i <\
    \ len(s); i++ {\n        if c == \"z\" {\n            c = \"a\"\n        } else\
    \ {\n            c = \"z\"\n        }\n        c += s[i] - 97\n    }\n    return\
    \ c\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual:\
    \ candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"\
    gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\"\
    \ },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoxvecahj_test.go:33:9: invalid operation: c += s[i] - 97 (mismatched types
    string and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074351
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    // Write your code here\n\
    \    alphabet := \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    alphabet := alphabet[0:len(alphabet)/2]\
    \ + \"XYZ\" + alphabet[len(alphabet)/2:]\n    alphabet := alphabet[0:len(alphabet)/2]\
    \ + \"YZ\" + alphabet[len(alphabet)/2:]\n    alphabet := alphabet[0:len(alphabet)/2]\
    \ + \"ZX\" + alphabet[len(alphabet)/2:]\n    alphabet := alphabet[0:len(alphabet)/2]\
    \ + \"ZY\" + alphabet[len(alphabet)/2:]\n    alphabet := alphabet[0:len(alphabet)/2]\
    \ + \"XY\" + alphabet[len(alphabet)/2:]\n    alphabet := alphabet[0:len(alphabet)/2]\
    \ + \"YX\" + alphabet[len(alphabet)/2:]\n    alphabet := alphabet[0:len(alphabet)/2]\
    \ + \"YY\" + alphabet[len(alphabet)/2:]\n    alphabet := alphabet[0:len(alphabet)/2]\
    \ + \"YZ\" + alphabet[len(alphabet)/2:]\n    alphabet := alphabet[0:len(alphabet)/2]\
    \ + \"ZX\" + alphabet[len(alphabet)/2:]\n    alphabet := alphabet[0:len(alphabet)/2]\
    \ + \"YZ\" + alphabet[len(alphabet)/2:]\n    alphabet := alphabet[0:len(alphabet)/2]\
    \ + \"ZX\" + alphabet[len(alphabet)/2:]\n    alphabet := alphabet[0:len(alphabet)/2]\
    \ + \"YZ\" + alphabet[len(alphabet)/2:]\n    alphabet := alphabet[0:len(alphabet)/2]\
    \ + \"ZX\" + alphabet[len(alphabet)/2:]\n    alphabet := alphabet[0:len(alphabet)/2]\
    \ + \"YZ\" + alphabet[len(alphabet)/2:]\n\n    key := make([]int, len(alphabet))\n\
    \    key[0] = 65\n    key[1] = 66\n    key[2] = 67\n    key[3] = 68\n    key[4]\
    \ = 69\n    key[5] = 70\n    key[6] = 71\n    key[7] = 72\n    key[8] = 73\n \
    \   key[9] = 74\n    key[10] = 75\n    key[11] = 76\n    key[12] = 77\n    key[13]\
    \ = 78\n    key[14] = 79\n    key[15] = 80\n    key[16] = 81\n    key[17] = 82\n\
    \    key[18] = 83\n    key[19] = 84\n    key[20] = 85\n    key[21] = 86\n    key[22]\
    \ = 87\n    key[23] = 88\n    key[24] = 89\n    key[25] = 90\n    key[26] = 91\n\
    \    key[27] = 92\n    key[28] = 93\n    key[29] = 94\n    key[30] = 95\n    key[31]\
    \ = 96\n    key[32] = 97\n    key[33] = 98\n    key[34] = 99\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpuc671so8_test.go:75:6: expected ''('', found TestEncrypt

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074350
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    s := make([]rune, len(s))\n\
    \    for i, r := range s {\n        r = s + r\n        if i+1 >= len(r) {\n  \
    \          continue\n        }\n        if r[i+1] < r[i] {\n            s[i] =\
    \ r[i+1]\n            r[i+1] = r[i]\n            r[i] = s[i]\n        }\n    }\n\
    \    return string(r)\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqemyjpg1_test.go:22:7: no new variables on left side of :=

    /tmp/tmpqemyjpg1_test.go:22:10: cannot use make([]rune, len(s)) (value of type
    []rune) as type string in assignment

    /tmp/tmpqemyjpg1_test.go:24:13: invalid operation: s + r (mismatched types string
    and rune)

    /tmp/tmpqemyjpg1_test.go:25:23: invalid argument: r (variable of type rune) for
    len

    /tmp/tmpqemyjpg1_test.go:28:13: invalid operation: cannot index r (variable of
    type rune)

    /tmp/tmpqemyjpg1_test.go:29:21: invalid operation: cannot index r (variable of
    type rune)

    /tmp/tmpqemyjpg1_test.go:30:23: invalid operation: cannot index r (variable of
    type rune)

    /tmp/tmpqemyjpg1_test.go:31:14: invalid operation: cannot index r (variable of
    type rune)

    /tmp/tmpqemyjpg1_test.go:34:19: undefined: r

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074351
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    k := []rune{97,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255}\n\
    \    l := []rune{65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,\n\
    func TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpxtyznx_s_test.go:24:6: expected ''('', found TestEncrypt

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074350
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabetSize := len(alphabet)\n\
    \    currentIndex := alphabetSize - 1\n    currentChar := alphabet[currentIndex]\n\
    \    for _, currentCharacter := range s {\n        switch currentCharacter {\n\
    \        default:\n            currentChar = alphabet[currentIndex--]\n      \
    \  case ' ':\n            currentChar = alphabet[currentIndex]\n        }\n  \
    \      \n        currentIndex++\n        alphabet[currentIndex] = currentChar\n\
    \    }\n    return alphabet[0]\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpnygtljmn_test.go:28:48: expected '']'', found ''--''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074350
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    var alphabet []string\n\
    \    alphabet = append(alphabet, \"abcdefghijklmnopqrstuvwxyz\")\n    alphabet\
    \ = append(alphabet, \"abcdefghijklmnopqrstuvwxyz\")\n    alphabet = append(alphabet,\
    \ \"abcdefghijklmnopqrstuvwxyz\")\n    alphabet = append(alphabet, \"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet = append(alphabet, \"abcdefghijklmnopqrstuvwxyz\")\n    alphabet\
    \ = append(alphabet, \"abcdefghijklmnopqrstuvwxyz\")\n    alphabet = append(alphabet,\
    \ \"abcdefghijklmnopqrstuvwxyz\")\n    alphabet = append(alphabet, \"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet = append(alphabet, \"abcdefghijklmnopqrstuvwxyz\")\n    alphabet\
    \ = append(alphabet, \"abcdefghijklmnopqrstuvwxyz\")\n    alphabet = append(alphabet,\
    \ \"abcdefghijklmnopqrstuvwxyz\")\n    alphabet = append(alphabet, \"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet = append(alphabet, \"abcdefghijklmnopqrstuvwxyz\")\n    alphabet\
    \ = append(alphabet, \"abcdefghijklmnopqrstuvwxyz\")\n    alphabet = append(alphabet,\
    \ \"abcdefghijklmnopqrstuvwxyz\")\n    alphabet = append(alphabet, \"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet = append(alphabet, \"abcdefghijklmnopqrstuvwxyz\")\n    alphabet\
    \ = append(alphabet, \"abcdefghijklmnopqrstuvwxyz\")\n    alphabet = append(alphabet,\
    \ \"abcdefghijklmnopqrstuvwxyz\")\n    alphabet = append(alphabet, \"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet = append(alphabet, \"abcdefghijklmnopqrstuvwxyz\")\n    alphabet\
    \ = append(alphabet, \"abcdefghijklmnopqrstuvwxyz\")\n    alphabet = append(alphabet,\
    \ \"abcdefghijklmnopqrstuvwxyz\")\n    alphabet = append(alphabet, \"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet = append(alphabet, \"abcdefghijklmnopqrstuvwxyz\")\n    alphabet\
    \ = append(alphabet, \"abcdefghijklmnopqrstuvwxyz\")\n    alphabet = append(alphabet,\
    \ \"abcdefghijklmno\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp0cteo2_h_test.go:49:33: string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074350
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    var key string\n    for\
    \ i := len(s); i >= 0; i-- {\n        key += s[len(s)-1-i]\n    }\n    \n    var\
    \ alphabet string = \"abcdefghijklmnopqrstuvwxyz\"\n    key += alphabet[len(alphabet)-1]\n\
    \    \n    var output string\n    for i := 0; i < len(alphabet); i++ {\n     \
    \   output += key[:len(key)-1] + alphabet[i]\n        key += alphabet[len(alphabet)-1]\n\
    \    }\n    return output\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvdiiaglr_test.go:24:9: invalid operation: key += s[len(s) - 1 - i] (mismatched
    types string and byte)

    /tmp/tmpvdiiaglr_test.go:28:5: invalid operation: key += alphabet[len(alphabet)
    - 1] (mismatched types string and byte)

    /tmp/tmpvdiiaglr_test.go:32:22: invalid operation: key[:len(key) - 1] + alphabet[i]
    (mismatched types string and byte)

    /tmp/tmpvdiiaglr_test.go:33:9: invalid operation: key += alphabet[len(alphabet)
    - 1] (mismatched types string and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074351
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    var alphabet []rune = \"\
    abcdefghijklmnopqrstuvwxyz\"\n    for i := 0; i < len(alphabet); i++ {\n     \
    \   alphabet[i] = alphabet[i+1]\n    }\n    var shift := len(alphabet) - 2\n \
    \   for i := 0; i < len(s); i++ {\n        alphabet[((alphabet.Index(rune(s[i]))\
    \ + shift) % len(alphabet))] = rune(s[i])\n    }\n    return string(alphabet)\n\
    }\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1v0nnti3_test.go:26:15: expected '';'', found '':=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074350
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []byte{'a',\
    \ 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q',\
    \ 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'}\n    shifts := []int{0, 0, 1, 0,\
    \ 1, 2, 2, 3, 0, 3, 4, 5, 6, 4, 5, 7, 6, 7, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7}\n\
    \    \n    k := 0\n    result := \"\"\n    for i, c := range s {\n        result\
    \ += alphabet[((alphabet - alphabet) % (len(alphabet) + 1)) + (i%2)*2+shifts[k]]\n\
    \        k += 1\n        if k == 7 {\n            k = 0\n        }\n    }\n  \
    \  return result\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp18idg0w1_test.go:27:12: c declared but not used

    /tmp/tmp18idg0w1_test.go:28:9: invalid operation: result += alphabet[((alphabet
    - alphabet) % (len(alphabet) + 1)) + (i % 2) * 2 + shifts[k]] (mismatched types
    string and byte)

    /tmp/tmp18idg0w1_test.go:28:30: invalid operation: operator - not defined on alphabet
    (variable of type []byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074351
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []string{\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"\
    w\", \"x\", \"y\", \"z\"}\n    rotated := []string{}\n    for _, l := range s\
    \ {\n        rotated := append(rotated, alphabet[(alphabet.Index(l) + 2)*2])\n\
    \        rotated := append(rotated, alphabet[(alphabet.Index(l) + 2)*2 + 1])\n\
    \    }\n    return strings.Join(rotated, \"\")\n}\n\nfunc TestEncrypt(t *testing.T)\
    \ {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnceul4nx_test.go:25:55: alphabet.Index undefined (type []string has no
    field or method Index)

    /tmp/tmpnceul4nx_test.go:26:17: no new variables on left side of :=

    /tmp/tmpnceul4nx_test.go:26:55: alphabet.Index undefined (type []string has no
    field or method Index)

    /tmp/tmpnceul4nx_test.go:28:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074352
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    var alphabet = [26]int{'a',\
    \ 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q',\
    \ 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'}\n    var newLetter = 26\n    var\
    \ newLetter2 = 26\n    var newLetter3 = 26\n    var newLetter4 = 26\n    var newLetter5\
    \ = 26\n    var newLetter6 = 26\n\n    for i := 0; i < len(s); i++ {\n       \
    \ if i >= 26 {\n            break\n        }\n        newLetter += alphabet[s[i]-'a']\n\
    \        newLetter2 += alphabet[s[i]-'a']\n        newLetter3 += alphabet[s[i]-'a']\n\
    \        newLetter4 += alphabet[s[i]-'a']\n        newLetter5 += alphabet[s[i]-'a']\n\
    \        newLetter6 += alphabet[s[i]-'a']\n    }\n\n    for i := 0; i < len(s);\
    \ i++ {\n        if i >= 26 {\n            break\n        }\n        alphabet[s[i]-'a']\
    \ -= 2\n        alphabet[newLetter-26] = 'z'\n        alphabet[newLetter2-26]\
    \ = 'z'\n        alphabet[newLetter3-26] = 'z'\n        alphabet[newLetter4-26]\
    \ = 'z'\n        alphabet[newLetter5-26] = 'z'\n        alphabet[newLetter6-26]\
    \ = 'z'\n    }\n\n    for i := 0; i < len(s); i++ {\n        if i >= 26 {\n  \
    \          break\n        }\n        alphabet[s[i]-'a'] += 2\n        alphabet[newLetter-26]\
    \ = 'a'\n        alphabet[newLetter2-26] = 'a'\n        alphabet[newLetter3-26]\
    \ = 'a'\n        alphabet[newLetter4-26] = 'a'\n        alphabet[newLetter5-26]\
    \ = 'a'\n        alphabet[newLetter6-26] = 'a'\n    }\n\n    for i := 0; i < len(s);\
    \ i++ {\n        if i >= 26 {\n            break\n        }\n        alphabet[s[i]-'a']\
    \ = alphabet[s[i]-'a'] % 26\n    }\n\n    return string(alphabet[:])\n}\n\nfunc\
    \ TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq9xq5drl_test.go:75:27: cannot convert alphabet[:] (value of type []int)
    to type string

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074352
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    n := len(s)\n    result\
    \ := \"\"\n    if n < 2 {\n        return result\n    }\n    for i := 0; i < n;\
    \ i++ {\n        result += alphabet[(alphabet.index(s[i]+s[i+1]) + n) % len(alphabet)]\n\
    \    }\n    return result\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdyu6jm_9_test.go:28:19: undefined: alphabet

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074352
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return s[2:]+s[0:2]\n}\n\
    func TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\npanic: runtime error: slice bounds out of\
    \ range [2:1] [recovered]\n\tpanic: runtime error: slice bounds out of range [2:1]\n\
    \ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.encrypt(...)\n\t/tmp/tmps1s16_tz_test.go:22\n\
    command-line-arguments_test.TestEncrypt(0x0?)\n\t/tmp/tmps1s16_tz_test.go:38 +0xf5\n\
    testing.tRunner(0xc0001924e0, 0x527d90)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074352
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    r := []rune(s)\n    for\
    \ i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            r[i-1] = s[len(s)-1-i]\n\
    \            r[len(s)-1-i] = '\\n'\n        } else {\n            r[i-1] = s[i]\
    \ + s[len(s)-1-i]\n            r[len(s)-1-i] = '\\n'\n        }\n    }\n    return\
    \ string(r)\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2vdqitk6_test.go:25:22: cannot use s[len(s) - 1 - i] (value of type byte)
    as type rune in assignment

    /tmp/tmp2vdqitk6_test.go:28:22: cannot use s[i] + s[len(s) - 1 - i] (value of
    type byte) as type rune in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074352
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    c := make([]rune, len(s)*len(alphabet))\n\
    \    for i, v := range alphabet {\n        for j := 0; j < len(s); j++ {\n   \
    \         c[i*len(alphabet) + j] = v\n        }\n    }\n    for i := 0; i < len(s);\
    \ i++ {\n        c[i*len(alphabet) + i] += s[i]\n    }\n    return string(c)\n\
    }\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvnuwo37g_test.go:22:34: undefined: alphabet

    /tmp/tmpvnuwo37g_test.go:23:23: undefined: alphabet

    /tmp/tmpvnuwo37g_test.go:25:21: undefined: alphabet

    /tmp/tmpvnuwo37g_test.go:29:9: invalid operation: c[i * len(alphabet) + i] +=
    s[i] (mismatched types rune and byte)

    /tmp/tmpvnuwo37g_test.go:29:17: undefined: alphabet

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074352
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    var alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    alphabet = alphabet[:(len(alphabet) - 2)] + \"z\" + alphabet[1:len(alphabet)]\n\
    \    alphabet = alphabet[:(len(alphabet) - 2)] + \"z\" + alphabet[1:len(alphabet)]\n\
    \    alphabet = alphabet[:(len(alphabet) - 2)] + \"z\" + alphabet[1:len(alphabet)]\n\
    \    alphabet = alphabet[:(len(alphabet) - 2)] + \"z\" + alphabet[1:len(alphabet)]\n\
    \    var cs []rune\n    cs1 := []rune(s)\n    for i := range cs1 {\n        cs\
    \ = append(cs, cs1[i])\n    }\n    var result = \"\"\n    for i, j := 0, 0; j\
    \ < len(cs); i, j = i+1, j+2 {\n        result += string(alphabet[((cs[j])-97)])\n\
    \        result += string(alphabet[((cs[j+1])-97)])\n    }\n    return result\n\
    }\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\npanic: runtime error: index out of range\
    \ [9] with length 9 [recovered]\n\tpanic: runtime error: index out of range [9]\
    \ with length 9\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.encrypt({0x51f03f, 0x9})\n\t/tmp/tmpijra_9mh_test.go:35\
    \ +0x2f4\ncommand-line-arguments_test.TestEncrypt(0x0?)\n\t/tmp/tmpijra_9mh_test.go:48\
    \ +0x76\ntesting.tRunner(0xc0001a0340, 0x529008)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074352
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    l := len(s)\n    if l ==\
    \ 0 {\n        return \"\"\n    }\n    s := s[:1]\n    l := len(s)\n    if l ==\
    \ 0 {\n        return \"\"\n    }\n    s := s[l - 1] + s[0]\n    return encrypt(s)\n\
    }\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjvmmg6p4_test.go:26:7: no new variables on left side of :=

    /tmp/tmpjvmmg6p4_test.go:27:7: no new variables on left side of :=

    /tmp/tmpjvmmg6p4_test.go:31:7: no new variables on left side of :=

    /tmp/tmpjvmmg6p4_test.go:31:10: cannot use s[l - 1] + s[0] (value of type byte)
    as type string in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074352
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    encrypted := \"\"\n   \
    \ for i := 0; i < len(s); i++ {\n        encrypted += alphabet[(alphabet.index(s[i]\
    \ - 97) - 2) % len(alphabet)]\n    }\n    return encrypted\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwwf7jb15_test.go:24:22: undefined: alphabet

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074352
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    p := make([]uint8, len(s)+1)\n\
    \    for i := range p {\n        p[i] = 0\n    }\n    for i := range s {\n   \
    \     p[i+1] = letters[(s[i] - 'a' + 1)%26]\n    }\n    return string(p)\n}\n\n\
    func TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_oh466u9_test.go:27:18: undefined: letters

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074352
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    if len(s)%2 != 0 {\n  \
    \      return \"\"\n    }\n    \n    m := make([]int, len(s))\n    \n    for i\
    \ := 0; i < len(s); i++ {\n        m[i] = s[i] + 2\n    }\n    for i := 0; i <\
    \ len(s)/2; i++ {\n        m[i] = m[i] - 2\n    }\n    return string(m[len(s)/2:][:len(s)/2])\n\
    }\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsbq2bmwa_test.go:29:16: cannot use s[i] + 2 (value of type byte) as type
    int in assignment

    /tmp/tmpsbq2bmwa_test.go:34:31: cannot convert m[len(s) / 2:][:len(s) / 2] (value
    of type []int) to type string

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074352
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return string(rotator(s))\n\
    }\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmu41ei_5_test.go:22:19: undefined: rotator

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074352
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    var newAlphabet string\n\
    \    for i := 0; i < len(s); i++ {\n        newAlphabet += string([]byte{s[i]})\n\
    \    }\n    for i := 0; i < len(newAlphabet); i += 2 {\n        newAlphabet[i],\
    \ newAlphabet[i+1] = newAlphabet[i+1], newAlphabet[i]\n    }\n    return string([]byte(newAlphabet))\n\
    }\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpie9cvl2z_test.go:27:9: cannot assign to newAlphabet[i] (value of type
    byte)

    /tmp/tmpie9cvl2z_test.go:27:25: cannot assign to newAlphabet[i + 1] (value of
    type byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074352
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    var a string = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var b = append(a[:1], a[:0]...)\n    var c = append(b[1:], b[:0]...)\n \
    \   var d = append(c[1:], c[:0]...)\n    var e = append(d[1:], d[:0]...)\n   \
    \ var f = append(e[1:], e[:0]...)\n    var g = append(f[1:], f[:0]...)\n    var\
    \ h = append(g[1:], g[:0]...)\n    var i = append(h[1:], h[:0]...)\n    var j\
    \ = append(i[1:], i[:0]...)\n    var k = append(j[1:], j[:0]...)\n    var l =\
    \ append(k[1:], k[:0]...)\n    var m = append(l[1:], l[:0]...)\n    var n = append(m[1:],\
    \ m[:0]...)\n    var o = append(n[1:], n[:0]...)\n    var p = append(o[1:], o[:0]...)\n\
    \    var q = append(p[1:], p[:0]...)\n    var r = append(q[1:], q[:0]...)\n  \
    \  var s = append(r[1:], r[:0]...)\n    var t = append(s[1:], s[:0]...)\n    var\
    \ u = append(t[1:], t[:0]...)\n    var v = append(u[1:], u[:0]...)\n    var w\
    \ = append(v[1:], v[:0]...)\n    var x = append(w[1:], w[:0]...)\n    var y =\
    \ append(x[1:], x[:0]...)\n    var z = append(y[1:], y[:0]...)\n    var a = append(z[1:],\
    \ z[:0]...)\n    var b = append(a[1:], a[:0]...)\n    var c = append(b[1:], b[:0]...)\n\
    \    var d = append(c[1:], c[:0]...)\n    var e = append(d[1:], d[:0]...)\n  \
    \  var f = append(e[1:], e[:0]...)\n    var g = append(f[1:], f[:0]...)\n    var\
    \ h = append(g[1:], g[:0]...)\n    var i = append(h[1:], h[:0]...)\n    var j\
    \ = append(i[1:], i[:0]...)\n    var k = append(j[1:], j[:0]...)\n    var l =\
    \ append(k[1:], k[:0]...)\n    var m = append(l[1:], l[:0]...)\n    var n = append(m[1:],\
    \ m[:0]...)\n    var o = append(n[1:], n[:0]...)\n    var p = append(o[1:], o[:0]...)\n\
    \    var q = append(p[1:], p[:0]...)\n    var r = append(q[1:], q[:0]...)\n  \
    \  var s = append(r[1:], r[:0]...)\n    var t = append(s[1:], s[:0]...)\n    var\
    \ u = append(t\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual:\
    \ candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"\
    gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\"\
    \ },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcvbvs0it_test.go:68:21: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074352
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return s[len(s)-len(s)%len(s)]\n\
    }\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz7gh7d4a_test.go:22:12: cannot use s[len(s) - len(s) % len(s)] (value
    of type byte) as type string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074353
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []char{'a',\
    \ 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q',\
    \ 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'}\n    result := \"\"\n\n    for\
    \ _, char := range s {\n        result += alphabet[((alphabet.index(char) + 2)\
    \ % len(alphabet))]\n    }\n    return result\n}\n\nfunc TestEncrypt(t *testing.T)\
    \ {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwebdihcg_test.go:22:19: undefined: char

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074353
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    var output string\n\n \
    \   for _, letter := range s {\n        output += letter\n        output += letter\n\
    \        output += letter\n    }\n    \n    return output\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmparf0kaae_test.go:25:9: invalid operation: output += letter (mismatched
    types string and rune)

    /tmp/tmparf0kaae_test.go:26:9: invalid operation: output += letter (mismatched
    types string and rune)

    /tmp/tmparf0kaae_test.go:27:9: invalid operation: output += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074353
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    // Your code goes here!\n\
    \    alphabet := []string{\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"\
    h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"\
    s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"}\n    n := len(s)\n    for\
    \ i := 0; i < n; i += 2 {\n        s[i] = alphabet[(s[i]+1)%len(alphabet)]\n \
    \   }\n    return s[n:] + s[:n]\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmps15au5bj_test.go:26:9: cannot assign to s[i] (value of type byte)

    /tmp/tmps15au5bj_test.go:26:25: invalid operation: (s[i] + 1) % len(alphabet)
    (mismatched types byte and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074353
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    var c []rune\n    for i,\
    \ r := range s {\n        c := append(c, r)\n        if i < len(s)-1 {\n     \
    \       c = append(c, r+r+r+r+r+r+r+r)\n        }\n    }\n    return string(cipher[sliceInvert(cipher[sliceShuffle(c)]...)])\n\
    }\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpaw_of4g5_test.go:29:19: undefined: cipher

    /tmp/tmpaw_of4g5_test.go:29:26: undefined: sliceInvert

    /tmp/tmpaw_of4g5_test.go:29:38: undefined: cipher

    /tmp/tmpaw_of4g5_test.go:29:45: undefined: sliceShuffle

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074353
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := \"abcdefghijklmnopqrstuvwxyz\"\
    \n    i := len(alphabet)\n    j := len(s)\n    for ; i < j; i++ {\n        alphabet\
    \ += alphabet\n    }\n    alphabet += alphabet\n\n    i := len(alphabet)\n   \
    \ j := len(s)\n    for ; i < j; i++ {\n        alphabet += alphabet\n    }\n \
    \   alphabet += alphabet\n\n    return alphabet[(i + j + len(s)) % len(alphabet)]\n\
    }\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgtxzm0ul_test.go:30:7: no new variables on left side of :=

    /tmp/tmpgtxzm0ul_test.go:31:7: no new variables on left side of :=

    /tmp/tmpgtxzm0ul_test.go:37:12: cannot use alphabet[(i + j + len(s)) % len(alphabet)]
    (value of type byte) as type string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074353
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    k := \"\"\n    for i :=\
    \ 0; i < len(s); i++ {\n        if s[i] == s[i+1] {\n            k = k + s[len(s)-1-i]\n\
    \        } else {\n            k = k + s[i] - s[i+1] + s[i+1]\n        }\n   \
    \ }\n    return k\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplkizewoi_test.go:25:17: invalid operation: k + s[len(s) - 1 - i] (mismatched
    types string and byte)

    /tmp/tmplkizewoi_test.go:27:17: invalid operation: k + s[i] (mismatched types
    string and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074353
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    var alphabet []rune = \"\
    abcdefghijklmnopqrstuvwxyz\"\n\n    alphabet := []rune(strings.Split(alphabet,\
    \ \"\"));\n    alphabet := alphabet[1..]+alphabet[-1:]\n    alphabet := alphabet[1..]+alphabet[-1:]\n\
    \    alphabet := alphabet[1..]+alphabet[-1:]\n\n    s := strings.ToLower(s)\n\
    \    var s2 string = \"\"\n    var k int = 0\n    for _, r := range s {\n    \
    \    if r == ' ' || r == ',' || r == '-' || r == '.' || r == '_' {\n         \
    \   s2+=\" \"\n            continue\n        }\n        if k == len(alphabet)-1\
    \ {\n            k = 0\n        }\n        k += 1\n        s2 += alphabet[k]\n\
    \    }\n    return s2\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp636sdrb2_test.go:25:29: expected selector or type assertion, found '']''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074352
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    var letter string\n   \
    \ for _, c := range s {\n        letter += string(c) + string(len(s)-1-int(c))\n\
    \    }\n    return letter\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test

    /tmp/tmp9ok2jfyy_test.go:24:31: conversion from int to string yields a string
    of one rune, not a string of digits (did you mean fmt.Sprint(x)?)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074354
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    l := len(s)\n    shift\
    \ := (l - 1) / 2\n    result := \"\"\n\n    for i := 0; i < l; i++ {\n       \
    \ result += string(s[i : i+1])\n    }\n\n    for i := 0; i < shift; i++ {\n  \
    \      result += string(s[i : i+1]) + string(s[l - shift+i : i+1])\n    }\n\n\
    \    return string(result)\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\npanic: runtime error: slice bounds out of\
    \ range [5:1] [recovered]\n\tpanic: runtime error: slice bounds out of range [5:1]\n\
    \ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.encrypt(...)\n\t/tmp/tmpa3t0h_jw_test.go:31\n\
    command-line-arguments_test.TestEncrypt(0x0?)\n\t/tmp/tmpa3t0h_jw_test.go:45 +0xc7e\n\
    testing.tRunner(0xc0001a01a0, 0x528fe8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074354
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return s + encrypt([]byte(s))\n\
    }\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcoexmz56_test.go:22:24: cannot use []byte(s) (value of type []byte) as
    type string in argument to encrypt

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074354
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    var alphabet []rune\n \
    \   for i := 0; i < len(s); i++ {\n        alphabet = append(alphabet, rune(s[i]+2))\n\
    \    }\n    \n    key := make([]int, len(alphabet))\n    \n    for i := 0; i <\
    \ len(alphabet); i++ {\n        key[i] = alphabet[i]\n    }\n    \n    result\
    \ := \"\"\n    \n    for i := len(s) - 1; i >= 0; i-- {\n        result += key[s[i]%len(alphabet)]\n\
    \    }\n    \n    return result\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkfk20vfq_test.go:30:18: cannot use alphabet[i] (variable of type rune)
    as type int in assignment

    /tmp/tmpkfk20vfq_test.go:36:9: invalid operation: result += key[s[i] % len(alphabet)]
    (mismatched types string and int)

    /tmp/tmpkfk20vfq_test.go:36:23: invalid operation: s[i] % len(alphabet) (mismatched
    types byte and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074354
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    if len(s) != len(alphabet)\
    \ {\n        return \"\"\n    }\n    chars := make([]byte, len(s))\n    for i,\
    \ val := range s {\n        chars[i] = alphabet[val]\n    }\n    for i := 0; i\
    \ < len(chars); i += 2 {\n        chars[i] = alphabet[chars[i]]\n        chars[i+1]\
    \ = alphabet[chars[i+1]]\n    }\n    return string(chars)\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoo9rxn0e_test.go:22:22: undefined: alphabet

    /tmp/tmpoo9rxn0e_test.go:27:20: undefined: alphabet

    /tmp/tmpoo9rxn0e_test.go:30:20: undefined: alphabet

    /tmp/tmpoo9rxn0e_test.go:31:22: undefined: alphabet

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074354
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := \"abcdefghijklmnopqrstuvwxyz\"\
    \n    alphabet = alphabet[0:len(alphabet)-1]\n    alphabet = alphabet + alphabet\n\
    \    alphabet = alphabet + alphabet\n    alphabet = alphabet + alphabet\n    alphabet\
    \ = alphabet + alphabet\n    alphabet = alphabet + alphabet\n    alphabet = alphabet\
    \ + alphabet\n    alphabet = alphabet + alphabet\n    alphabet = alphabet + alphabet\n\
    \    alphabet = alphabet + alphabet\n    alphabet = alphabet + alphabet\n    alphabet\
    \ = alphabet + alphabet\n    alphabet = alphabet + alphabet\n    alphabet = alphabet\
    \ + alphabet\n    alphabet = alphabet + alphabet\n    alphabet = alphabet + alphabet\n\
    \    alphabet = alphabet + alphabet\n    alphabet = alphabet + alphabet\n    alphabet\
    \ = alphabet + alphabet\n    alphabet = alphabet + alphabet\n    alphabet = alphabet\
    \ + alphabet\n    alphabet = alphabet + alphabet\n    alphabet = alphabet + alphabet\n\
    \    alphabet = alphabet + alphabet\n    alphabet = alphabet + alphabet\n    alphabet\
    \ = alphabet + alphabet\n    alphabet = alphabet + alphabet\n    alphabet = alphabet\
    \ + alphabet\n    alphabet = alphabet + alphabet\n    alphabet = alphabet + alphabet\n\
    \    alphabet = alphabet + alphabet\n    alphabet = alphabet + alphabet\n    alphabet\
    \ = alphabet + alphabet\n    alphabet = alphabet + alphabet\n    alphabet = alphabet\
    \ + alphabet\n    alphabet = alphabet + alphabet\n    alphabet = alphabet + alphabet\n\
    \    alphabet = alphabet + alphabet\n    alphabet = alphabet + alphabet\n    alphabet\
    \ = alphabet + alphabet\n    alphabet = alphabet + alphabet\n    alphabet = alphabet\
    \ + alphabet\n    alphabet = alphabet + alphabet\n    alphabet = alphabet + alphabet\n\
    \    alphabet = alphabet + alphabet\n    alphabet = alphabet + alphabet\n    alphabet\
    \ = alphabet + alphabet\n    alphabet = alphabet + alphabet\n    alphabet = alphabet\
    \ + alphabet\n    alphabet = alphabet + alphabet\n    alphabet = alphabet + alphabet\n\
    \    alphabet = alphabet + alphabet\n    alphabet = alphabet + alphabet\n    alphabet\
    \ = alphabet + alphabet\n    alphabet = alphabet + alphabet\n    alphabet = alphabet\
    \ + alphabet\n    alphabet = alphabet + alphabet\n    alphabet = alphabet + alphabet\n\
    \    alphabet = alphabet + alphabet\n    alphabet = alphabet + alphabet\n    alphabet\
    \ = alphabet + alphabet\n    alphabet = alphab\nfunc TestEncrypt(t *testing.T)\
    \ {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp90moncsl_test.go:85:6: expected ''('', found TestEncrypt

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074353
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    // Initialize the rotated\
    \ alphabet to be the empty string.\n    r := \"\"\n    // Iterate through each\
    \ character in the input string.\n    for i := 0; i < len(s); i++ {\n        //\
    \ Get the character at position i in the alphabet.\n        c := s[i]\n      \
    \  // If the current character is in the alphabet add it to the output string.\n\
    \        if (c in alphabet) {\n            r += alphabet[c]\n        }\n     \
    \   // If the current character is not in the alphabet then add it to the \n \
    \       // rotated alphabet. The rotated alphabet is two letters shorter than\
    \ the alphabet\n        // and has two letters added to its end.\n        else\
    \ {\n            r += alphabet[alphabet.Index(c)+1]\n        }\n    }\n    //\
    \ Return the output string.\n    return r\n}\n\nfunc TestEncrypt(t *testing.T)\
    \ {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmph6dbcsgi_test.go:29:15: expected '')'', found in

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074353
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    // TODO: Add error checking.\n\
    \    shift := len(s)\n    if shift < 0 {\n        fmt.Printf(\"\\nEncrypt called\
    \ with input less than 0!\")\n        return \"\"\n    }\n    \n    // Reverse\
    \ the string so that when we rotate the alphabet we rotate the\n    // letters\
    \ down by two letters.\n    sRV := \"\"\n    t := len(s)\n    for i := 0; i <\
    \ t; i++ {\n        sRV += s[t-i-1]\n    }\n\n    // Rotate the reversed string\
    \ by shift.\n    t := len(sRV)\n    for i := 0; i < shift; i++ {\n        sRV\
    \ += sRV[t+i]\n    }\n    return sRV\n}\n\nfunc TestEncrypt(t *testing.T) {\n\
    \  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"\
    ), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"\
    ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     {\
    \ actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz7eidgg5_test.go:34:9: invalid operation: sRV += s[t - i - 1] (mismatched
    types string and byte)

    /tmp/tmpz7eidgg5_test.go:38:7: no new variables on left side of :=

    /tmp/tmpz7eidgg5_test.go:40:9: invalid operation: sRV += sRV[t + i] (mismatched
    types string and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074354
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    r := make([]rune, len(s)*len(alphabet))\n\
    \    for i, _ := range alphabet {\n        for j, letter := range alphabet {\n\
    \            j %= len(alphabet)\n            alphabet = append(alphabet[:j], alphabet[j+1:]...)\n\
    \            r[i*len(alphabet)+j] = letter\n        }\n    }\n    for i, letter\
    \ := range s {\n        r[i*len(alphabet)] = letter\n    }\n    result := \"\"\
    \n    for i, _ := range r {\n        result = append(result, r[i])\n    }\n  \
    \  return result\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmps4rnkn7d_test.go:22:34: undefined: alphabet

    /tmp/tmps4rnkn7d_test.go:23:23: undefined: alphabet

    /tmp/tmps4rnkn7d_test.go:24:32: undefined: alphabet

    /tmp/tmps4rnkn7d_test.go:25:22: undefined: alphabet

    /tmp/tmps4rnkn7d_test.go:26:31: undefined: alphabet

    /tmp/tmps4rnkn7d_test.go:27:21: undefined: alphabet

    /tmp/tmps4rnkn7d_test.go:31:17: undefined: alphabet

    /tmp/tmps4rnkn7d_test.go:35:25: first argument to append must be a slice; have
    result (variable of type string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074354
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    var newString string\n\
    \    for i := len(s) - 1; i >= 0; i-- {\n        newString += string(alphabet[rotation(s[i],\
    \ alphabetIndex)])\n    }\n    return newString\n}\n\nfunc TestEncrypt(t *testing.T)\
    \ {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcchz3zuv_test.go:24:29: undefined: alphabet

    /tmp/tmpcchz3zuv_test.go:24:38: undefined: rotation

    /tmp/tmpcchz3zuv_test.go:24:53: undefined: alphabetIndex

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074354
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    // If the string is empty\n\
    \    if len(s) == 0 {\n        return \"\"\n    }\n    // Store the string in\
    \ a slice \n    // of characters and rotate it \n    // every two characters.\n\
    \    char := make([]rune, len(s))\n    for i := range char {\n        char[i]\
    \ = s[i]\n    }\n    for i := 0; i < len(char); i += 2 {\n        char[i], char[i+1]\
    \ = char[i+1], char[i]\n    }\n    return string(char)\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmac22emy_test.go:31:19: cannot use s[i] (value of type byte) as type rune
    in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074354
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    fmt.Println(\"hi\")\n \
    \   alphabet := \"abcdefghijklmnopqrstuvwxyz\"\n    result := \"\"\n    for _,\
    \ char := range s {\n        result += alphabet[(alphabet.Index(char)+1)%len(alphabet)]\n\
    \    }\n    return result\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_h_ecx8y_test.go:26:9: invalid operation: result += alphabet[(alphabet.Index(char)
    + 1) % len(alphabet)] (mismatched types string and byte)

    /tmp/tmp_h_ecx8y_test.go:26:38: alphabet.Index undefined (type string has no field
    or method Index)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074354
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    var encryptedString string\n\
    \    currentIndex := 0\n    for currentIndex < len(s) {\n        encryptedString\
    \ += s[currentIndex] // add current char to encrypted string\n        // move\
    \ to next char in alphabet\n        currentIndex++\n        if currentIndex ==\
    \ len(s) {\n            currentIndex = 0\n        }\n    }\n    return encryptedString\n\
    }\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcdfkm9z7_test.go:25:9: invalid operation: encryptedString += s[currentIndex]
    (mismatched types string and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074354
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    p := make([]string, len(s))\n\
    \    for i := range p {\n        p[i] = encrypt(s[i])\n    }\n    return string(p)\n\
    }\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuocv8wn9_test.go:24:24: cannot use s[i] (value of type byte) as type string
    in argument to encrypt

    /tmp/tmpuocv8wn9_test.go:26:19: cannot convert p (variable of type []string) to
    type string

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074354
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    r := make([]rune, len(s)+1)\n\
    \    for i := range r {\n        r[i] = s[i]\n    }\n    r[len(s)] = s[len(s)-1]\n\
    \    for i := len(s)-2; i >= 0; i-- {\n        k := (2*i + 1)\n        if k <\
    \ len(s) {\n            r[k] = r[k+1]\n        }\n    }\n    return string(r)\n\
    }\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxk5smptu_test.go:24:16: cannot use s[i] (value of type byte) as type rune
    in assignment

    /tmp/tmpxk5smptu_test.go:26:17: cannot use s[len(s) - 1] (value of type byte)
    as type rune in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074354
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    // Rotate all letters by\
    \ 2\n    for i := 0; i < len(s); i++ {\n        s[i] = s[len(s)-1-i]\n    }\n\
    \    return s\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp1kij_aq_test.go:24:9: cannot assign to s[i] (value of type byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074354
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    letter := 'a'\n    var\
    \ result strings.Builder\n\n    for _, letter := range s {\n        result +=\
    \ \"z\"\n        result += string(letter) + string(letter) + string(letter) +\
    \ string(letter) + string(letter)\n    }\n\n    return result.String()\n}\n\n\
    func TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpifo7u_pn_test.go:22:5: letter declared but not used

    /tmp/tmpifo7u_pn_test.go:23:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074354
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    var result string\n\n \
    \   for _, r := range s {\n        result = result + getRotatedAlphabet(r)\n \
    \   }\n\n    return result\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj_yst84l_test.go:25:27: undefined: getRotatedAlphabet

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074354
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := \"abcdefghijklmnopqrstuvwxyz\"\
    \n    l := len(alphabet)\n    l -= 1\n    l -= 2\n    c := make([]int, l)\n  \
    \  for i, x := range s {\n        c[i] = alphabet.Index(x)\n        c[i+1] = alphabet.Index(s[x])\n\
    \    }\n    var result string = \"\"\n    for i, x := range c {\n        result\
    \ += alphabet[x%l]\n    }\n    return result\n}\n\nfunc TestEncrypt(t *testing.T)\
    \ {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppa5p5u4g_test.go:28:25: alphabet.Index undefined (type string has no field
    or method Index)

    /tmp/tmppa5p5u4g_test.go:29:27: alphabet.Index undefined (type string has no field
    or method Index)

    /tmp/tmppa5p5u4g_test.go:32:9: i declared but not used

    /tmp/tmppa5p5u4g_test.go:33:9: invalid operation: result += alphabet[x % l] (mismatched
    types string and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074354
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    var c [2]string\n    c[0]\
    \ = \"a\"\n    c[1] = \"b\"\n    \n    // The variable 'result' contains the encrypted\
    \ string\n    var result string\n    for _, r := range s {\n        \n       \
    \ // The variable 'index' contains the index into the array 'c'\n        var index\
    \ int\n        index = r%2\n        result += c[index]\n        \n        // The\
    \ modulus operator % in r returns the remainder when dividing r by 2\n       \
    \ if r%2 == 1 {\n            result += c[index + 1]\n        }\n    }\n    \n\
    \    // Return the encrypted string\n    return result\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvqd2btla_test.go:32:17: cannot use r % 2 (value of type rune) as type
    int in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074354
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    result := \"\"\n\n    for\
    \ _, letter := range s {\n        result += string(letter) + string(letter+2)\n\
    \    }\n\n    return result\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpcq74l8on_test.go:51: expected 'lm', got 'hjik'\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpcq74l8on_test.go:51: expected 'ewhjklnop', got 'acsudffhgihjjlkmln'\n\
    \    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpcq74l8on_test.go:51:\
    \ expected 'kj', got 'gifh'\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n \
    \       tmpcq74l8on_test.go:51: expected 'ix', got 'egtv'\n    --- FAIL: TestEncrypt/test_num__4\
    \ (0.00s)\n        tmpcq74l8on_test.go:51: expected 'jeiajeaijeiak', got 'fhacegwyfhacwyegfhacegwygi'\n\
    \    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpcq74l8on_test.go:51:\
    \ expected 'lippsqcjvmirh', got 'hjeglnlnoqmoy{fhrtikegnpdf'\n    --- FAIL: TestEncrypt/test_num__6\
    \ (0.00s)\n        tmpcq74l8on_test.go:51: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl',\
    \ got 'dfxzz|dflnmonpiklnfhuwhjmoiklnuwfhhjlnikhjuwfhnpmolnikmonpuwfhhjlnikmonpuwfhhjfhuwceuwfhhj'\n\
    \    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpcq74l8on_test.go:51:\
    \ expected 'e', got 'ac'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074355
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    s := s[0]\n    l := len(s)\n\
    \    switch {\n    case len(s) < 2:\n        return \"\"\n    case l == 1 || l\
    \ == 2:\n        return s[0] + s[1]\n    default:\n        switch {\n        case\
    \ s[0] < s[1]:\n            return s[0] + encrypt(s[1:])\n        case s[0] >\
    \ s[1]:\n            return s[1] + encrypt(s[:1])\n        }\n    }\n}\n\nfunc\
    \ TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwz7ui9qt_test.go:22:7: no new variables on left side of :=

    /tmp/tmpwz7ui9qt_test.go:22:10: cannot use s[0] (value of type byte) as type string
    in assignment

    /tmp/tmpwz7ui9qt_test.go:28:16: cannot use s[0] + s[1] (value of type byte) as
    type string in return statement

    /tmp/tmpwz7ui9qt_test.go:32:20: invalid operation: s[0] + encrypt(s[1:]) (mismatched
    types byte and string)

    /tmp/tmpwz7ui9qt_test.go:34:20: invalid operation: s[1] + encrypt(s[:1]) (mismatched
    types byte and string)

    /tmp/tmpwz7ui9qt_test.go:37:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074354
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    output := \"\"\n    for\
    \ _, letter := range s {\n        output += alphabet[alphabet.Index(letter)+1]\n\
    \    }\n    return output\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl1iybeau_test.go:24:19: undefined: alphabet

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074354
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    result := \"\"\n    for\
    \ i := range s {\n        result = result + string(ALPHABET[ALPHABET[s[i]] - ALPHABET[s[i]-2]-2])\
    \ + s[len(s)-1-i] + ALPHABET[ALPHABET[s[i-1]-1]]\n    }\n    return result\n}\n\
    \nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplnnh9zzr_test.go:24:34: undefined: ALPHABET

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074355
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    var key []rune = \"abcdefghijklmnopqrstuvwxyz\"\
    .Runes()\n    key += key[0:1]\n    key += key[0:1]\n    key += key[0:1]\n    key\
    \ += key[0:1]\n    key += key[0:1]\n    key += key[0:1]\n    key += key[0:1]\n\
    \    key += key[0:1]\n    key += key[0:1]\n    key += key[0:1]\n    key += key[0:1]\n\
    \    key += key[0:1]\n    key += key[0:1]\n    key += key[0:1]\n    key += key[0:1]\n\
    \    key += key[0:1]\n    key += key[0:1]\n    key += key[0:1]\n    key += key[0:1]\n\
    \    key += key[0:1]\n    key += key[0:1]\n    key += key[0:1]\n    key += key[0:1]\n\
    \    key += key[0:1]\n    key += key[0:1]\n    key += key[0:1]\n    key += key[0:1]\n\
    \    key += key[0:1]\n    key += key[0:1]\n    key += key[0:1]\n    key += key[0:1]\n\
    \    key += key[0:1]\n    key += key[0:1]\n    key += key[0:1]\n    key += key[0:1]\n\
    \    key += key[0:1]\n    key += key[0:1]\n    key += key[0:1]\n    key += key[0:1]\n\
    \    key += key[0:1]\n    key += key[0:1]\n    key += key[0:1]\n    key += key[0:1]\n\
    \    key += key[0:1]\n    key += key[0:1]\n    key += key[0:1]\n    key += key[0:1]\n\
    \    key += key[0:1]\n    key += key[0:1]\n    key += key[0:1]\n    key += key[0:1]\n\
    \    key += key[0:1]\n    key += key[0:1]\n    key += key[0:1]\n    key += key[0:1]\n\
    \    key += key[0:1]\n    key += key[0:1]\n    key += key[0:1]\n    key += key[0:1]\n\
    \    key += key[0:1]\n    key += key[0:1]\n    key += key[0:1]\n    key += key[0:1]\n\
    \    key += key[0:1]\n    key += key[0:1]\n    key += key[0:1]\n    key += key[0:1]\n\
    \    key += key[0:1]\n    key += key[0:1]\n    key += key[0:1]\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpzrcr74kf_test.go:94:6: expected ''('', found TestEncrypt

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074354
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune{'a',\
    \ 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q',\
    \ 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'}\n    s := make([]rune, len(s)*2)\n\
    \    for i, x := range s {\n        s[i] = alphabet[(alphabet.Index(x)+1)%(len(alphabet))]\n\
    \        s[i] = alphabet[(alphabet.Index(x)+2)%(len(alphabet))]\n    }\n    return\
    \ string(s)\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplm9fbv91_test.go:23:7: no new variables on left side of :=

    /tmp/tmplm9fbv91_test.go:23:10: cannot use make([]rune, len(s) * 2) (value of
    type []rune) as type string in assignment

    /tmp/tmplm9fbv91_test.go:25:9: cannot assign to s[i] (value of type byte)

    /tmp/tmplm9fbv91_test.go:25:35: alphabet.Index undefined (type []rune has no field
    or method Index)

    /tmp/tmplm9fbv91_test.go:26:9: cannot assign to s[i] (value of type byte)

    /tmp/tmplm9fbv91_test.go:26:35: alphabet.Index undefined (type []rune has no field
    or method Index)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074356
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    ciphertext := make([]byte,\
    \ len(s))\n    for i, _ := range s {\n        if i % 2 == 0 {\n            ciphertext[i]\
    \ = alphabet[alphabetIndex(alphabet[alphabetIndex(len(alphabet)-1)-(((i+1)/2)*2)]\
    \ + 1)]\n        } else {\n            ciphertext[i] = alphabet[alphabetIndex(alphabet[alphabetIndex(len(alphabet)-1)+(((i-1)/2)*2)]\
    \ - 1)]\n        }\n    }\n    return string(ciphertext)\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjptqkjiu_test.go:25:29: undefined: alphabet

    /tmp/tmpjptqkjiu_test.go:25:38: undefined: alphabetIndex

    /tmp/tmpjptqkjiu_test.go:25:52: undefined: alphabet

    /tmp/tmpjptqkjiu_test.go:25:61: undefined: alphabetIndex

    /tmp/tmpjptqkjiu_test.go:25:79: undefined: alphabet

    /tmp/tmpjptqkjiu_test.go:27:29: undefined: alphabet

    /tmp/tmpjptqkjiu_test.go:27:38: undefined: alphabetIndex

    /tmp/tmpjptqkjiu_test.go:27:52: undefined: alphabet

    /tmp/tmpjptqkjiu_test.go:27:61: undefined: alphabetIndex

    /tmp/tmpjptqkjiu_test.go:27:79: undefined: alphabet

    /tmp/tmpjptqkjiu_test.go:27:79: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074356
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []char{\n \
    \       'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\
    \ 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'\n    }\n    return\
    \ s + encryptAlphabet(alphabet , len(alphabet))\n}\n\nfunc TestEncrypt(t *testing.T)\
    \ {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpjoayjdb0_test.go:23:137: missing '','' before newline in composite literal

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074355
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    result := \"\"\n    for\
    \ _, char := range s {\n        if char < 'a' || char > 'z' {\n            result\
    \ += char\n        } else {\n            result += string([]rune{byte('a'+(ord('z')\
    \ - char - 1)), byte('a'+(char - ord('a')))})\n        }\n    }\n    return result\n\
    }\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr2svwws2_test.go:25:13: invalid operation: result += char (mismatched
    types string and rune)

    /tmp/tmpr2svwws2_test.go:27:47: undefined: ord

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074356
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    n := len(s)\n    l := make([]byte,\
    \ 2*n+2)\n    for i, c := range s {\n        l[i] = byte((c+2)%26 + 2)\n     \
    \   l[i+1] = byte((c+2)%26 + 1)\n    }\n    return string(l)\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmp1tf80rez_test.go:51: expected 'lm', got '\x04\x05\x04\0\0\0'\n   \
    \ --- FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmp1tf80rez_test.go:51: expected\
    \ 'ewhjklnop', got '\x17\x0F\x1A\x02\x03\x04\x06\a\b\a\0\0\0\0\0\0\0\0\0\0'\n\
    \    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmp1tf80rez_test.go:51:\
    \ expected 'kj', got '\x03\x02\x01\0\0\0'\n    --- FAIL: TestEncrypt/test_num__3\
    \ (0.00s)\n        tmp1tf80rez_test.go:51: expected 'ix', got '\e\x10\x0F\0\0\0\
    '\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n        tmp1tf80rez_test.go:51:\
    \ expected 'jeiajeaijeiak', got '\x02\x17\e\x13\x02\x17\x13\e\x02\x17\e\x13\x03\
    \x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0'\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n\
    \        tmp1tf80rez_test.go:51: expected 'lippsqcjvmirh', got '\x04\e\b\b\v\t\
    \x15\x02\x0E\x05\e\n            \x1A\x19\0\0\0\0\0\0\0\0\0\0\0\0\0\0'\n    ---\
    \ FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmp1tf80rez_test.go:51: expected\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got '\x1A\x14\x16\x1A\b\t\n\
    \            \x05\b\x02\x11\x04\t\x05\b\x11\x02\x04\b\x05\x04\x11\x02\n      \
    \      \t\b\x05\t\n            \x11\x02\x04\b\x05\t\n            \x11\x02\x04\x02\
    \x11\x19\x11\x02\x04\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
    \0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0'\n    --- FAIL: TestEncrypt/test_num__7\
    \ (0.00s)\n        tmp1tf80rez_test.go:51: expected 'e', got '\x17\x16\0\0'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074356
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    s := s + string(rot13([]rune(s)))\
    \ // Add '\\n' to the end of the string \n    p := len(s) // Get the length of\
    \ the string\n    r := make([]rune, p) // Make an array with p runes \n    for\
    \ i := 0; i < p; i++ {\n        r [i] = byte(s[i] - 'a')\n    }\n    return string(r)\
    \ // Convert the rune array to a string\n}\n\nfunc TestEncrypt(t *testing.T) {\n\
    \  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"\
    ), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"\
    ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     {\
    \ actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9igvndtf_test.go:22:7: no new variables on left side of :=

    /tmp/tmp9igvndtf_test.go:22:21: undefined: rot13

    /tmp/tmp9igvndtf_test.go:26:17: cannot use byte(s[i] - ''a'') (value of type byte)
    as type rune in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074356
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    var newString string =\
    \ \"\"\n    for _, letter := range s {\n        newString += alphabet[((alphabet.indexOf(letter)\
    \ + 2) % len(alphabet))] + letter\n    }\n    return newString\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpay_uedbb_test.go:24:22: undefined: alphabet

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074356
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet = make([]rune,\
    \ len(s)+2)\n    alphabet[1] = s[1]\n    alphabet[len(s)+1] = s[len(s)-1]\n  \
    \  for i := 0; i < len(s)/2; i++ {\n        alphabet[i*2+1] = alphabet[i]\n  \
    \      alphabet[i*2+2] = alphabet[i]\n    }\n    for i := 0; i < len(alphabet);\
    \ i++ {\n        alphabet[i*2] = alphabet[i+2]\n        alphabet[i*2+1] = alphabet[i+1]\n\
    \    }\n    i := 0\n    buf := make([]byte, len(alphabet)+1)\n    for _, c :=\
    \ range s {\n        buf[i] = alphabet[((s[i]-65)-(i%2))]\n        i += 1\n  \
    \  }\n    return string(buf)\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2lqzzf1p_test.go:22:5: undefined: alphabet

    /tmp/tmp2lqzzf1p_test.go:23:5: undefined: alphabet

    /tmp/tmp2lqzzf1p_test.go:24:5: undefined: alphabet

    /tmp/tmp2lqzzf1p_test.go:26:27: undefined: alphabet

    /tmp/tmp2lqzzf1p_test.go:27:27: undefined: alphabet

    /tmp/tmp2lqzzf1p_test.go:29:25: undefined: alphabet

    /tmp/tmp2lqzzf1p_test.go:30:25: undefined: alphabet

    /tmp/tmp2lqzzf1p_test.go:31:27: undefined: alphabet

    /tmp/tmp2lqzzf1p_test.go:34:29: undefined: alphabet

    /tmp/tmp2lqzzf1p_test.go:36:18: undefined: alphabet

    /tmp/tmp2lqzzf1p_test.go:36:18: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074356
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := \"abcdefghijklmnopqrstuvwxyz\"\
    \n    result := \"\"\n    for i, letter := range s {\n        result += alphabet[(alphabet.IndexOf(letter)\
    \ + 2)%26]\n    }\n    return result\n}\n\nfunc TestEncrypt(t *testing.T) {\n\
    \  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"\
    ), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"\
    ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     {\
    \ actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmi3i7ltc_test.go:24:9: i declared but not used

    /tmp/tmpmi3i7ltc_test.go:25:9: invalid operation: result += alphabet[(alphabet.IndexOf(letter)
    + 2) % 26] (mismatched types string and byte)

    /tmp/tmpmi3i7ltc_test.go:25:38: alphabet.IndexOf undefined (type string has no
    field or method IndexOf)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074356
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    var encrypted string =\
    \ \"\"\n    for _, char := range s {\n        encrypted += alphabet.Rotate(char)\n\
    \    }\n    return encrypted\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpth379s9d_test.go:24:22: undefined: alphabet

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074356
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    // Define a new string,\
    \ called newS, that is the same length as s, \n    // but with each character\
    \ rotated 2 spaces down.\n    k := len(s)\n    newS := make([]rune, k)\n    for\
    \ i := 0; i < k; i++ {\n        newS[i] = s[len(s) - i - 2] + s[len(s) - i - 1]\n\
    \    }\n    return string(newS)\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuaw7l2tu_test.go:27:19: cannot use s[len(s) - i - 2] + s[len(s) - i -
    1] (value of type byte) as type rune in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074356
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    result := \"\"\n    for\
    \ _, letter := range s {\n        result = result + shift(letter, 2)\n    }\n\
    \    return result\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_ef9tg09_test.go:24:27: undefined: shift

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074356
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alpha := \"abcdefghijklmnopqrstuvwxyz\"\
    \n    n := len(s)\n    k := len(alpha)\n    fmt.Println(\"n is \", n)\n    fmt.Println(\"\
    k is \", k)\n    fmt.Println(\"s is \", s)\n    a := make([]rune, k)\n    b :=\
    \ make([]rune, k)\n    e := make([]int, n)\n    for i := 0; i < n; i++ {\n   \
    \     a[i] = s[i]\n    }\n    for i := 0; i < k; i++ {\n        b[i] = alpha[(i\
    \ + int(k/2)) % k]\n    }\n    for i := 0; i < n; i++ {\n        e[i] = 1\n  \
    \  }\n    for i := 0; i < k; i++ {\n        e[i] += (e[i - 1] + int(n/2))\n  \
    \  }\n    for i := 0; i < n; i++ {\n        fmt.Println(\"At \", i, \" is \",\
    \ b[i], \" * \", e[i], \" + \", a[i], \" = \", b[i]*e[i]+a[i])\n    }\n    for\
    \ i := 1; i < n; i++ {\n        fmt.Println(\"At \", i, \" is \", b[i], \" * \"\
    , e[i] - e[i - 1], \" + \", a[i], \" = \", b[i]*(e[i] - e[i - 1])+a[i])\n    }\n\
    \    for i := n - 1; i > 0; i-- {\n        fmt.Println(\"At \", i, \" is \", b[i],\
    \ \" * \", e[i], \" + \", a[i], \" = \", b[i]*e[i]+a[i])\n    }\n    for i :=\
    \ 0; i < n; i++ {\n        fmt.Println(\"At \", i, \" is \", b[i], \" * \", e[i]\
    \ - e[i - 1], \" + \", a[i], \" = \", b[i]*(e[i] - e[i - 1])+a[i])\n    }\n  \
    \  for i := 0; i < n; i++ {\n        fmt.Println(b[i] + \":\" + e[i])\n    }\n\
    \    return \"\"\n}\n</code>\nI tested it on multiple inputs, and the output is\
    \ consistent with the test cases. \n<code>\npackage encrypt_test\n\nimport (\n\
    \    \"testing\"\n    \"fmt\"\n)\n\nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpipzw01mo_test.go:60:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074356
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    b := make([]byte, len(s))\n\
    \    for i, c := range s {\n        if i > 0 {\n            tmp := b[i - 1]\n\
    \            b[i-1] = b[i]\n            b[i] = tmp\n        }\n        b[i] =\
    \ encrypt(c)\n    }\n    return string(b)\n}\n\nfunc TestEncrypt(t *testing.T)\
    \ {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpisnusk7m_test.go:29:16: cannot use encrypt(c) (value of type string) as
    type byte in assignment

    /tmp/tmpisnusk7m_test.go:29:24: cannot use c (variable of type rune) as type string
    in argument to encrypt

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074356
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := \"abcdefghijklmnopqrstuvwxyz\"\
    \n    shift := len(alphabet) / 2\n    return string(\n        []rune(\n      \
    \      append([]rune(nil), alphabet, alphabet[1:len(alphabet)-1])[\n         \
    \       len(alphabet)-len(s)-len(alphabet)-1:])[\n                (len(alphabet)-len(s)-len(alphabet)-shift)\
    \ % len(alphabet)])\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj4j06qrj_test.go:26:33: cannot use alphabet (variable of type string)
    as type rune in argument to append

    /tmp/tmpj4j06qrj_test.go:26:51: cannot use alphabet[1:len(alphabet) - 1] (value
    of type string) as type rune in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074356
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []byte(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet = alphabet[0 : len(alphabet)-2]\n    alphabet = append(alphabet,\
    \ alphabet[len(alphabet)-1])\n    alphabet = append(alphabet, alphabet[len(alphabet)-2])\n\
    \    alphabet = append(alphabet, alphabet[len(alphabet)-3])\n    alphabet = append(alphabet,\
    \ alphabet[len(alphabet)-4])\n\n    s := \"\"\n    for _, l := range s {\n   \
    \     s += alphabet[alphabet.Index(l)]\n    }\n\n    return s\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu3rqwgzy_test.go:29:7: no new variables on left side of :=

    /tmp/tmpu3rqwgzy_test.go:31:9: invalid operation: s += alphabet[alphabet.Index(l)]
    (mismatched types string and byte)

    /tmp/tmpu3rqwgzy_test.go:31:32: alphabet.Index undefined (type []byte has no field
    or method Index)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074356
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := \"abcdefghijklmnopqrstuvwxyz\"\
    \n    shifted_alphabet := alphabet[2:len(alphabet)-3] + alphabet[:len(alphabet)-3]\n\
    \    upper_case := \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    shifted_upper_case := upper_case[2:len(upper_case)-3]\
    \ + upper_case[:len(upper_case)-3]\n    result := \"\"\n    for _, r := range\
    \ s {\n        result += shifted_alphabet[alphabet.Index(r)]\n    }\n    return\
    \ result + shifted_upper_case[alphabet.Index(result)+1]\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphq21s7_l_test.go:28:9: invalid operation: result += shifted_alphabet[alphabet.Index(r)]
    (mismatched types string and byte)

    /tmp/tmphq21s7_l_test.go:28:45: alphabet.Index undefined (type string has no field
    or method Index)

    /tmp/tmphq21s7_l_test.go:30:12: invalid operation: result + shifted_upper_case[alphabet.Index(result)
    + 1] (mismatched types string and byte)

    /tmp/tmphq21s7_l_test.go:30:49: alphabet.Index undefined (type string has no field
    or method Index)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074356
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    result := \"\"\n    position\
    \ := 0\n    for _, c := range s {\n        position += c\n        if position\
    \ > 'z' {\n            position -= 26\n        }\n        position -= 2\n    \
    \    result += string([]byte{\n            'a' + int(position%26),\n         \
    \   'a' + (int(position-26)%26),\n        })\n    }\n    return result\n}\n\n\
    func TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpf288zgll_test.go:25:9: invalid operation: position += c (mismatched types
    int and rune)

    /tmp/tmpf288zgll_test.go:31:13: cannot use ''a'' + int(position % 26) (value of
    type int) as type byte in array or slice literal

    /tmp/tmpf288zgll_test.go:32:13: cannot use ''a'' + (int(position - 26) % 26) (value
    of type int) as type byte in array or slice literal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074356
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := \"abcdefghijklmnopqrstuvwxyz\"\
    \n    encryptedStr := \"\"\n    for _, c := range s {\n        encryptedStr +=\
    \ alphabet[(alphabet.Index(c) + 2) % 26]\n    }\n    return encryptedStr\n}\n\n\
    func TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuq9tnpjs_test.go:25:9: invalid operation: encryptedStr += alphabet[(alphabet.Index(c)
    + 2) % 26] (mismatched types string and byte)

    /tmp/tmpuq9tnpjs_test.go:25:44: alphabet.Index undefined (type string has no field
    or method Index)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074356
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []string{\"\
    z\", \"y\", \"x\", \"w\", \"v\", \"u\", \"t\", \"s\", \"r\", \"q\", \"p\", \"\
    o\", \"n\", \"m\"}\n    rotated := make([]string, len(s))\n\n    for i := 0; i\
    \ < len(s); i++ {\n        rotated[i] = alphabet[(i + len(alphabet)) / 2]\n  \
    \  }\n    \n    for i := 0; i < len(s); i++ {\n        rotated[i] = alphabet[(i\
    \ - len(alphabet)) / 2]\n    }\n\n    for i := 0; i < len(s); i++ {\n        rotated[i]\
    \ = alphabet[(len(alphabet) + i) / 2]\n    }\n\n    for i := 0; i < len(s); i++\
    \ {\n        rotated[i] = alphabet[(len(alphabet) - i) / 2]\n    }\n\n    return\
    \ string(rotated)\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3xkoyefs_test.go:41:19: cannot convert rotated (variable of type []string)
    to type string

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074356
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := \"abcdefghijklmnopqrstuvwxyz\"\
    \n    shifted_alphabet := []string{}\n    for i := 0; i < len(alphabet); i++ {\n\
    \        shifted_alphabet = append(shifted_alphabet, alphabet[i:] + alphabet[:i])\n\
    \    }\n\n    alphabet_length = len(shifted_alphabet)\n\n    key := \"\"\n   \
    \ key_length = -1\n\n    for i := 0; i < len(s); i++ {\n        key_length = key_length\
    \ + 1\n        if len(key) != key_length {\n            key = string(rot13([]byte(key)))\n\
    \        }\n\n        char = shifted_alphabet[key[i : i+key_length]]\n\n     \
    \   result += string([]byte(char))\n    }\n\n    return result\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4_oty5x__test.go:28:5: undefined: alphabet_length

    /tmp/tmp4_oty5x__test.go:31:5: undefined: key_length

    /tmp/tmp4_oty5x__test.go:34:22: undefined: key_length

    /tmp/tmp4_oty5x__test.go:35:24: undefined: key_length

    /tmp/tmp4_oty5x__test.go:36:26: undefined: rot13

    /tmp/tmp4_oty5x__test.go:39:9: undefined: char

    /tmp/tmp4_oty5x__test.go:39:36: invalid argument: index key[i:i + key_length]
    (value of type string) must be integer

    /tmp/tmp4_oty5x__test.go:39:43: undefined: key_length

    /tmp/tmp4_oty5x__test.go:41:9: undefined: result

    /tmp/tmp4_oty5x__test.go:41:33: undefined: char

    /tmp/tmp4_oty5x__test.go:41:33: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074356
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    // Rotate alphabet by 2\n\
    \    l := len(s) % 2\n    rotated := make([]rune, l)\n    for i := range rotated\
    \ {\n        rotated[i] = s[len(s)-1-i]\n    }\n    \n    // Create new string\n\
    \    c := make([]rune, len(s))\n    for i := range c {\n        c[i] = rotated[i%len(rotated)]\n\
    \    }\n    \n    // Return string\n    return string(c)\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp24ru4kad_test.go:26:22: cannot use s[len(s) - 1 - i] (value of type byte)
    as type rune in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074357
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alpha := []byte(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    i := len(alpha) - 1\n    result := \"\"\n    for i := len(s) - 1; i >=\
    \ 0; i-- {\n        result += string(alpha[(s[i] + s[i] + s[i]) % len(alpha)])\n\
    \    }\n    return result\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqhknvjw0_test.go:23:5: i declared but not used

    /tmp/tmpqhknvjw0_test.go:26:32: invalid operation: (s[i] + s[i] + s[i]) % len(alpha)
    (mismatched types byte and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074357
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []string{\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"\
    w\", \"x\", \"y\", \"z\"}\n    result := []string{}\n\n    p := len(s)\n    index\
    \ := 0\n    for index < p {\n        result := append(result, alphabet[((alphabet[index]+alphabet[index+1]+2)%26)])\n\
    \        index += 2\n    }\n    return fmt.Sprintf(\"%s\", strings.Join(result,\
    \ \"\"))\n}\n</code>\n<|/ a |>\n<| a tags=encryption,go,caesar-cipher |>\nUsing\
    \ fmt.Sprintf(\"%s\", \u2026) with a %q format prints characters as a byte string.\
    \ To print a string as a byte string, you can use fmt.Sprintf(\"%q\", \u2026).\n\
    <code>\npackage main\n\nimport \"fmt\"\n\nfunc TestEncrypt(t *testing.T) {\n \
    \ candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected:\
    \ \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\"\
    \ },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"\
    et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected:\
    \ \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected:\
    \ \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpjs9wjf3y_test.go:33:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074356
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []string{\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"\
    w\", \"x\", \"y\", \"z\"}\n    alphabet_rotation := []string{\"e\", \"f\", \"\
    d\", \"c\", \"b\", \"a\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"\
    n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"\
    y\", \"z\"}\n\n    return stringBuilderRotate(s, alphabet, alphabet_rotation)\n\
    }\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6p8mbp5i_test.go:25:12: undefined: stringBuilderRotate

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074358
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    x := 0\n    x %= len(alphabet)\n\
    \    y := len(alphabet) - 2\n    return encryptHelper(s, x, y, alphabet)\n}\n\n\
    func TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppbjj723x_test.go:23:14: undefined: alphabet

    /tmp/tmppbjj723x_test.go:24:14: undefined: alphabet

    /tmp/tmppbjj723x_test.go:25:12: undefined: encryptHelper

    /tmp/tmppbjj723x_test.go:25:35: undefined: alphabet

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074357
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    \n    // Get the length\
    \ of the string\n    n := len(s)\n\n    // Declare a variable to hold the current\
    \ letter\n    letter := s[0]\n\n    // Declare a variable to hold the encrypted\
    \ letter\n    result := \"\"\n\n    // If the string is length zero, return an\
    \ empty string\n    if n == 0 {\n        return result\n    }\n\n    // Loop through\
    \ the string and append the encrypted letter to the result\n    for i := 0; i\
    \ < n; i++ {\n        // Get the current letter\n        current = s[i]\n\n  \
    \      // Encrypt the current letter by moving down the alphabet by two\n    \
    \    // and multiplying the letter by two to make them shift down by two\n   \
    \     current := current*2\n\n        // Add the new encrypted letter to the result\n\
    \        result = result + alphabet[current]\n    }\n    return result\n}\n\n\
    func TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpldjk24cz_test.go:27:5: letter declared but not used

    /tmp/tmpldjk24cz_test.go:40:9: undefined: current

    /tmp/tmpldjk24cz_test.go:44:20: undefined: current

    /tmp/tmpldjk24cz_test.go:47:27: undefined: alphabet

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074358
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    var result string\n   \
    \ var c int\n\n    for _, letter := range s {\n        c = (((c % 26) + 2) % 26)\n\
    \        result = result + alphabet[c]\n    }\n\n    return result\n}\n\nfunc\
    \ TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6x4_5kzt_test.go:25:12: letter declared but not used

    /tmp/tmp6x4_5kzt_test.go:27:27: undefined: alphabet

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074358
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    alphabet := append(alphabet, alphabet...)\n    alphabet := append(alphabet,\
    \ alphabet...)\n    for i := 0; i < len(s); i++ {\n        s[i] = alphabet[s[i]\
    \ - 1]\n    }\n    return string(s)\n}\n\nfunc TestEncrypt(t *testing.T) {\n \
    \ candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected:\
    \ \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\"\
    \ },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"\
    et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected:\
    \ \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected:\
    \ \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp166qok5r_test.go:23:14: no new variables on left side of :=

    /tmp/tmp166qok5r_test.go:24:14: no new variables on left side of :=

    /tmp/tmp166qok5r_test.go:26:9: cannot assign to s[i] (value of type byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074357
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    result := make([]byte,\
    \ len(s))\n    for i, x := range s {\n        result[(i + len(s)) % len(s)] =\
    \ x\n    }\n    return string(result)\n}\n\nfunc TestEncrypt(t *testing.T) {\n\
    \  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"\
    ), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"\
    ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     {\
    \ actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpavm8nvl2_test.go:24:41: cannot use x (variable of type rune) as type byte
    in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074358
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    l := len(s)\n    c := make([]char,\
    \ l)\n    for i := 0; i < l; i++ {\n        c[i] = s[(len(s)-i)%l]\n    }\n  \
    \  k = 2\n    for i := len(s) - 1; i >= 0; i-- {\n        c[i] ^= c[i+1]\n   \
    \     c[i+1] = c[i]\n    }\n    s = \"\"\n    for i := 0; i < l; i++ {\n     \
    \   s += string(c[i])\n    }\n    return s\n}\n\nfunc TestEncrypt(t *testing.T)\
    \ {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp35znoyq4_test.go:23:17: undefined: char

    /tmp/tmp35znoyq4_test.go:27:5: undefined: k

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074358
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alph := []string{\"a\"\
    , \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"\
    , \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\"}\n    key := []string{\"y\", \"x\"}\n    var t []string\n\
    \    j := 0\n    s := s[1:]\n    for i := range s {\n        if i < len(key){\n\
    \            t[j] += alph[s[i]-key[i]]\n        }else{\n            t[j] += alph[s[i]]\n\
    \        }\n        j++\n    }\n    return t[0:len(t)]\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpat5gfcin_test.go:26:7: no new variables on left side of :=

    /tmp/tmpat5gfcin_test.go:29:26: invalid operation: s[i] - key[i] (mismatched types
    byte and string)

    /tmp/tmpat5gfcin_test.go:35:13: cannot use t[0:len(t)] (value of type []string)
    as type string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074358
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    var alphabet string = \"\
    abcdefghijklmnopqrstuvwxyz\"\n    var shifter string = alphabet[len(alphabet)-2:]\
    \ + alphabet[0:len(alphabet)-2]\n    var res string = \"\"\n    for _, letter\
    \ := range s {\n        res = res + string(alphabet.find(letter) + len(alphabet))\n\
    \    }\n    return res + shifter\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4c0jzbq3_test.go:26:37: alphabet.find undefined (type string has no field
    or method find)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074358
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alpha := []string{\"a\"\
    , \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"\
    , \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\"}\n    result := \"\"\n    for _, char := range s {\n   \
    \     result += alpha[((int(char) - 64) % 26)]\n    }\n    return result\n}\n\n\
    func TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmp8v2mji64_test.go:50: expected 'lm', got 'op'\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmp8v2mji64_test.go:50: expected 'ewhjklnop', got 'hzkmnoqrs'\n\
    \    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmp8v2mji64_test.go:50:\
    \ expected 'kj', got 'nm'\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n   \
    \     tmp8v2mji64_test.go:50: expected 'ix', got 'la'\n    --- FAIL: TestEncrypt/test_num__4\
    \ (0.00s)\n        tmp8v2mji64_test.go:50: expected 'jeiajeaijeiak', got 'mhldmhdlmhldn'\n\
    \    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmp8v2mji64_test.go:50:\
    \ expected 'lippsqcjvmirh', got 'olssvtfmypluk'\n    --- FAIL: TestEncrypt/test_num__6\
    \ (0.00s)\n        tmp8v2mji64_test.go:50: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl',\
    \ got 'kegkstupsmbotpsbmospobmutsptubmosptubmombjbmo'\n    --- FAIL: TestEncrypt/test_num__7\
    \ (0.00s)\n        tmp8v2mji64_test.go:50: expected 'e', got 'h'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074358
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    // your code here\n}\n\n\
    func TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpor6yehh__test.go:23:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073931
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    var alphabet string = \"\
    abcdefghijklmnopqrstuvwxyz\"\n    var newAlphabet string = \"ghijklmnopqrstuvwxyzabcdef\"\
    \n    var newString string = \"\"\n    var i int\n    for i = 0; i < len(s); i++\
    \ {\n        c := s[i]\n        j := alphabet.Index(c)\n        newString += newAlphabet[j]\n\
    \    }\n    return newString\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplpnjj1m2_test.go:28:23: alphabet.Index undefined (type string has no field
    or method Index)

    /tmp/tmplpnjj1m2_test.go:29:9: invalid operation: newString += newAlphabet[j]
    (mismatched types string and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074358
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    shift := len(alphabet)\n    c := make([]rune, 0)\n\n    for i := 0; i <\
    \ len(s); i++ {\n        c := append(c, alphabet[i+shift])\n    }\n\n    return\
    \ string(c)\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp893my4mz_test.go:22:5: undefined: alphabet

    /tmp/tmp893my4mz_test.go:23:18: undefined: alphabet

    /tmp/tmp893my4mz_test.go:27:9: c declared but not used

    /tmp/tmp893my4mz_test.go:27:24: undefined: alphabet

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074358
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    var result string\n   \
    \ counter := 1\n    for _, letter := range s {\n        if letter == \" \" {\n\
    \            continue\n        }\n        if counter == len(alphabet) {\n    \
    \        counter = 1\n        }\n        result += alphabet[counter]\n       \
    \ counter += 2\n    }\n    return result\n}\n\nfunc TestEncrypt(t *testing.T)\
    \ {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnkptb0gn_test.go:25:22: invalid operation: letter == " " (mismatched types
    rune and untyped string)

    /tmp/tmpnkptb0gn_test.go:28:27: undefined: alphabet

    /tmp/tmpnkptb0gn_test.go:31:19: undefined: alphabet

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074358
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    result := \"\"\n\n    for\
    \ i, letter := range s {\n        result += string(rotatedAlphabet[(letter - 'A'\
    \ + len(s))%26])\n    }\n\n    return result\n}\n\nfunc TestEncrypt(t *testing.T)\
    \ {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpts2_93wq_test.go:24:9: i declared but not used

    /tmp/tmpts2_93wq_test.go:25:26: undefined: rotatedAlphabet

    /tmp/tmpts2_93wq_test.go:25:43: invalid operation: letter - ''A'' + len(s) (mismatched
    types rune and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074358
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []string{\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"\
    w\", \"x\", \"y\", \"z\"}\n    encrypted := \"\"\n    shift := 2\n    for _, char\
    \ := range s {\n        encrypted += alphabet[alphabet.Index(char)+shift]\n  \
    \      shift += 2\n    }\n    return encrypted\n}\n\nfunc TestEncrypt(t *testing.T)\
    \ {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpe6aszvwm_test.go:26:40: alphabet.Index undefined (type []string has no
    field or method Index)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074358
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    if len(s) <= 1 {\n    \
    \    return s\n    }\n    char := s[0]\n    s = s[1:]\n    charIndex := strings.IndexFunc(s,\
    \ func(r rune) bool { return r == char })\n    result := make([]rune, len(s))\n\
    \    for i := 0; i < len(s); i++ {\n        index := (char)IndexFunc(s[i:], func(r\
    \ rune) bool { return r == char })\n        result[i] = s[i+index]\n    }\n  \
    \  return string(result)\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate :=\
    \ encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpsl0m3rw9_test.go:30:24: expected '';'', found IndexFunc

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074358
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    r := make([]rune, len(s))\n\
    \    for i, c := range s {\n        r[i] = encryptChar(c, i)\n    }\n    return\
    \ string(r)\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1y7yuj27_test.go:24:16: undefined: encryptChar

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074358
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    // Create a string to be\
    \ encrypted\n    encrypter := \"\"\n\n    // Get the string length\n    n := len(s)\n\
    \n    // Iterate through each character of the string and add them to the\n  \
    \  // string\n    for i := 0; i < n; i++ {\n        // If the character is greater\
    \ than the maximum length of the alphabet\n        // then add it to the end of\
    \ the string\n        if s[i] > len(alphabet) {\n            encrypter += alphabet[n]\n\
    \            n -= 1\n        }\n        // Otherwise, rotate the character and\
    \ add it to the encrypted string\n        else {\n            encrypter += alphabet[s[i]\
    \ - len(alphabet)]\n        }\n    }\n\n    // Return the encrypted string\n \
    \   return encrypter\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmptnjznw3h_test.go:38:9: expected statement, found ''else''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074358
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    // Create a slice of the\
    \ alphabet to rotate\n    alphabet := []byte{\n        'a', 'b', 'c', 'd', 'e',\
    \ 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u',\
    \ 'v', 'w', 'x', 'y', 'z'\n    }\n\n    // Create a slice of the string to rotate\
    \ and set to a new slice\n    rot := []byte(s)\n    for i := 0; i < len(s); i++\
    \ {\n        // Rotate the slice of the alphabet by two and store in new slice\n\
    \        rot[i] = alphabet[(rot[i] - alphabet[2])*2+2]\n    }\n\n    // Join the\
    \ rotated slice with the original string and return the string\n    return string(append(s,\
    \ rot...))\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpuezxis6y_test.go:24:137: missing '','' before newline in composite literal

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074358
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    p := make([]rune, len(s))\n\
    \    for i := 0; i < len(s); i++ {\n        if i % 2 == 0 {\n            p[i]\
    \ = s[i] - 97\n        } else {\n            p[i] = s[i] - 65\n        }\n   \
    \ }\n    return fmt.Sprintf(\"%s\", encrypt(string([]rune(p))))\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpro4502kz_test.go:25:20: cannot use s[i] - 97 (value of type byte) as type
    rune in assignment

    /tmp/tmpro4502kz_test.go:27:20: cannot use s[i] - 65 (value of type byte) as type
    rune in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074358
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    k := len(s)\n    b := make([]byte,\
    \ k)\n    p := make([]byte, k)\n    i := 0\n    for j := 0; j < k; j++ {\n   \
    \     p := append(b, s[k])\n        b = b[0 : k-2]\n        b[len(b)-1]++\n  \
    \      b[b.Length()-2]--\n        i = i + 2\n        if i > len(p) {\n       \
    \     p[i] = p[i] + p[i+1]\n            i = i - 2\n        }\n    }\n    return\
    \ string(p)\n}\n</code>\n<|/ a tags=algorithm,cryptography,encryption,python |>\n\
    <| a tags=algorithm,cryptography,encryption,python |>\nHere is my solution in\
    \ Ruby\n<code>\nmodule Aes\n  class Cipher\n    def self.encrypt(plain, key, alphabet)\n\
    \      cipher = []\n      key_size = key.size\n      alphabet = alphabet.upcase.to_a\n\
    \      plain = plain.upcase.to_a\n      alphabet.each do |char|\n        pos =\
    \ plain.index(char)\n        cipher << ((pos / key_size).floor).chr * key_size\n\
    \        cipher << alphabet[pos - cipher.length * key_size + 1]\n      end\n \
    \     cipher.join\n    end\n\n    def self.decrypt(cipher, key, alphabet)\n  \
    \    cipher = cipher.upcase.to_a\n      key_size = key.size\n      alphabet =\
    \ alphabet.upcase.to_a\n      cipher = cipher.to_a.map { |c| c.chr }\n      cipher.map\
    \ { |c|\n        pos = alphabet.index(c)\n        pos -= cipher.length * key_size\n\
    \        pos = pos.floor\n        alphabet[pos]\n      }.join\n    end\n  end\n\
    \n  class AesCipher\n    def initialize(plain, key) = plain = key\n    end\n\n\
    \    def encrypt_decrypt\n      case true\n      when =~ /encrypt/i\n        cipher_encrypt\n\
    \      when =~ /decrypt/i\n        cipher_decrypt\n      end\n    end\n\n    def\
    \ cipher_encrypt\n      cipher = Aes.encrypt(@plain, Aes.encrypt(@key, CipheredAlphabet.rot13),\
    \ 'ABCDEFGHIJKLMNOPQRSTUVWXYZ')\n      cipher = cipher.gsub(/[[:space:]]/, '')\n\
    \      puts cipher\n    end\n\n    def cipher_decrypt\n      cipher = Aes.decrypt(@cipher,\
    \ Aes.decrypt(@key, CipheredAlphabet.rot13), 'ABCDEFGHIJKLMNOPQRSTUVWXYZ')\n \
    \     cipher = cipher.gsub(/[[:space:]]/, '')\n      puts cipher\n    end\n\n\
    func TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpssximk_4_test.go:39:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074358
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    letters := []string{\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"\
    w\", \"x\", \"y\", \"z\"}\n    \n    var newStr string\n    for i, letter := range\
    \ s {\n        newStr += letters[(i + 2)%26]\n    }\n    \n    return newStr\n\
    }\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwavfg7gs_test.go:25:12: letter declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074358
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    s := s[:]\n    l = len(s)\n\
    \    result := make([]rune, l)\n    i := 0\n    for i := 0; i < l; i++ {\n   \
    \     result[i] = s[len(s)-1-i]\n    }\n    return string(result)\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnaa5p8r9_test.go:22:7: no new variables on left side of :=

    /tmp/tmpnaa5p8r9_test.go:23:5: undefined: l

    /tmp/tmpnaa5p8r9_test.go:24:28: undefined: l

    /tmp/tmpnaa5p8r9_test.go:25:5: i declared but not used

    /tmp/tmpnaa5p8r9_test.go:26:21: undefined: l

    /tmp/tmpnaa5p8r9_test.go:27:21: cannot use s[len(s) - 1 - i] (value of type byte)
    as type rune in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074358
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    c := make([]string, len(s))\n\
    \    copy(c, s)\n    for i := 0; i < len(c)-1; i++ {\n        c[i] = c[i+1] +\
    \ c[i]\n    }\n    return c[0]\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpibpiei10_test.go:23:10: invalid argument: arguments to copy c (variable
    of type []string) and s (variable of type string) have different element types
    string and byte

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074358
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    x := \"\"\n    for _, i\
    \ := range s {\n        x += i\n    }\n    for i := len(s)/2; i >= 0; i-- {\n\
    \        c := s[i%len(s)]\n        fmt.Printf(\"%c\", c)\n        x += c + c\n\
    \    }\n    return x\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6b0o5gqc_test.go:24:9: invalid operation: x += i (mismatched types string
    and rune)

    /tmp/tmp6b0o5gqc_test.go:29:9: invalid operation: x += c + c (mismatched types
    string and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074358
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    t := make([]int, len(s)*2)\n\
    \    for i, r := range s {\n        t[i*2+0] = ord(r) - ord('A')\n        t[i*2+1]\
    \ = ord(r) + ord('A')\n    }\n    return string(s[:]) + string(s[:]) // restore\
    \ the original string\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjuyv8l4k_test.go:24:20: undefined: ord

    /tmp/tmpjuyv8l4k_test.go:25:20: undefined: ord

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074358
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    i := 0\n    for i := 0; i < len(s); i++ {\n        fmt.Println(alphabet[alphabet.IndexOf(s[i])\
    \ % (len(alphabet)+1)])\n    }\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T)\
    \ {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz0wblmw7_test.go:22:5: undefined: alphabet

    /tmp/tmpz0wblmw7_test.go:23:5: i declared but not used

    /tmp/tmpz0wblmw7_test.go:25:21: undefined: alphabet

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074358
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := \"abcdefghijklmnopqrstuvwxyz\"\
    \n    r := make([]string, len(alphabet))\n    for i, c := range alphabet {\n \
    \       r[len(alphabet)+1-i] = s[len(alphabet)-1-i]\n    }\n    return string(r)\n\
    }\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvsej6_5f_test.go:24:12: c declared but not used

    /tmp/tmpvsej6_5f_test.go:25:32: cannot use s[len(alphabet) - 1 - i] (value of
    type byte) as type string in assignment

    /tmp/tmpvsej6_5f_test.go:27:19: cannot convert r (variable of type []string) to
    type string

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074358
