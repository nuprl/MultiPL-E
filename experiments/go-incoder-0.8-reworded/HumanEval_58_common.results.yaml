language: go_test.go
name: HumanEval_58_common
results:
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0)\n    for i := 0; i <\
    \ len(l1); i++ {\n        if j < len(l2) && (l1[i] == l2[j]) {\n            j\
    \ = j + 1\n        }\n        result = append(result, l1[i])\n    }\n    return\
    \ result\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=go,arrays |>\nThere are lots\
    \ of ways to solve this problem. I find my approach the easiest. Basically I make\
    \ a new slice out of the items in the first array then iterate through the second\
    \ array and append it to the new slice if the new slice doesn't contain it. After\
    \ that you can return the new slice.\n<code>\npackage main\n\nimport \"fmt\"\n\
    \nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpeg4_9luu_test.go:23:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073857
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    if len(l1) < len(l2) {\n        l, l2 := l2, l1\n\
    \        l1, l2 = l2, l1\n    }\n    sort.Ints(l1)\n    sort.Ints(l2)\n    var\
    \ out []int\n    for _, b := range l1 {\n        if b == l2[0] {\n           \
    \ out = []int{b}\n            break\n        }\n        j = sort.Search(len(l2),\
    \ func(i int) bool {\n            return b > l2[i]\n        })\n        if j !=\
    \ len(l2) {\n            if out[len(out)-1] != l2[j] {\n                out[len(out)]\
    \ = l2[j]\n            }\n        } else {\n            out = []int{b}\n     \
    \   }\n    }\n    return out\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate\
    \ := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplitw9kwx_test.go:15:9: l declared but not used

    /tmp/tmplitw9kwx_test.go:18:5: undefined: sort

    /tmp/tmplitw9kwx_test.go:19:5: undefined: sort

    /tmp/tmplitw9kwx_test.go:26:9: undefined: j

    /tmp/tmplitw9kwx_test.go:26:13: undefined: sort

    /tmp/tmplitw9kwx_test.go:29:12: undefined: j

    /tmp/tmplitw9kwx_test.go:30:38: undefined: j

    /tmp/tmplitw9kwx_test.go:31:36: undefined: j

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073858
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    c := make([]int, 0, len(l1))\n    for _, l :=\
    \ range l1 {\n        if !contains(c, l) {\n            c := append(c, l)\n  \
    \      }\n    }\n    for _, l := range l2 {\n        if !contains(c, l) {\n  \
    \          c := append(c, l)\n        }\n    }\n    return sort(c)\n}\n\nfunc\
    \ TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653,\
    \ 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5, 3, 2,\
    \ 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv8u91yg4_test.go:16:13: undefined: contains

    /tmp/tmpv8u91yg4_test.go:17:13: c declared but not used

    /tmp/tmpv8u91yg4_test.go:21:13: undefined: contains

    /tmp/tmpv8u91yg4_test.go:22:13: c declared but not used

    /tmp/tmpv8u91yg4_test.go:25:12: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073858
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    s := make([]int, len(l1))\n    i := 0\n    for\
    \ _, v := range l1 {\n        if !contains(s, v) {\n            s[i] = v\n   \
    \     }\n        i++\n    }\n\n    s1 := make([]int, len(l2))\n    i1 := 0\n \
    \   for _, v := range l2 {\n        if !contains(s1, v) {\n            s1[i1]\
    \ = v\n            i1++\n        }\n    }\n\n    return s[i:]\n}\n\nfunc TestCommon(t\
    \ *testing.T) {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmhkyex78_test.go:17:13: undefined: contains

    /tmp/tmpmhkyex78_test.go:26:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073858
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    r := make([]int, 0)\n    j := 0\n    for i :=\
    \ 0; i < len(l1); i++ {\n        for j < len(l2); j++ {\n            if l1[i]\
    \ == l2[j] {\n                r, j = r, i+j\n            }\n        }\n    }\n\
    \    return r\n}\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5,\
    \ 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5popdy8n_test.go:17:26: expected boolean or range expression, found simple
    statement (missing parentheses around composite literal?)

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073857
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    s := make(map[int]bool, len(l1))\n    for _, v\
    \ := range l1 {\n        s[v] = true\n    }\n    for _, v := range l2 {\n    \
    \    if _, ok := s[v]; ok {\n            continue\n        }\n        s[v] = true\n\
    \        l1 = append(l1, v)\n    }\n    l2 = append(l2, 0)\n    for _, v := range\
    \ l1 {\n        if _, ok := s[v]; !ok {\n            l2 = append(l2, v)\n    \
    \    }\n    }\n    return l2\n}\n`\n)\n\nfunc TestCommon(t *testing.T) {\n  candidate\
    \ := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_ebzh5il_test.go:33:1: raw string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073857
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0)\n    var i int\n    var\
    \ j int\n    for i = 0; i < len(l1); i++ {\n        for j = 0; j < len(l2); j++\
    \ {\n            if l1[i] == l2[j] {\n                result = append(result,\
    \ l1[i])\n            }\n        }\n    }\n    return result\n}\n</code>\n<|/\
    \ a dscore=4 |>\n<| c |>\nThis solution is O(n*m) time complexity instead of O(n+m)\
    \ time complexity of other solutions.\n<|/ c |>\n<| c |>\nThis is still O(n*m),\
    \ but since m is small, we can do better than that. Think of two sorted arrays,\
    \ each element of each array represents a set of a numbers (for example, the elements\
    \ in `l1` are a set of numbers {1, 2, 3}, and `l2` is {4, 3, 2, 4}, then we can\
    \ get more efficient than O(n*m) since there are fewer sets in each array.\n<|/\
    \ c |>\n<| c |>\nYes, you are right. Just realized that since both list have the\
    \ same number of elements, we can optimize it a bit. Will update the answer.\n\
    <|/ c |>\n<| c |>\nO(n+m) complexity is still O(n^2).\n<|/ c |>\n<| a tags=algorithm,arrays,set,c#\
    \ |>\nYou can do it with single loop like this\n<code>\nvar set = new HashSet<int>();\n\
    var list = new List<int>(){1, 4, 3, 34, 653, 2, 5};\n\nfor (int i = 1; i < list.Count;\
    \ i++)\n{\n    if(set.Contains(list[i]) == false)\n    {\n        set.Add(list[i]);\n\
    \    }\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nYour solution is O(n^2) complexity,\
    \ while O(n+m) complexity solutions are better.\n<|/ c |>\n<| c |>\n: It's O(n\
    \ + m). Where n is the length of the first list and m is the number of elements\
    \ in the second list. That's what it means. But you're right that it's inefficient\
    \ since it has to check each element of list with each element of list. It should\
    \ be O(m).\n<|/ c |>\n<| a tags=algorithm,arrays,set,c# |>\nAn alternative approach\
    \ if you don't want to use the HashSet would be to build a Dictionary using your\
    \ initial list, and then use a loop to extract your unique values.\n<code>\nint\
    \ [] intArray = new int [] { 1, 4, 3, 34, 653, 2, 5 };\nDictionary<int, int> dictionary\
    \ = new Dictionary<int, int>();\n\nfor (int i = 0; i < intArray.Length; i++)\n\
    {\n    if (!dictionary.Contain\nfunc TestCommon(t *testing.T) {\n  candidate :=\
    \ common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpdgywyoqc_test.go:26:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073857
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    var result []int\n    commonL1(l1, l2, &result)\n\
    \    return result\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpph6lqht0_test.go:15:5: undefined: commonL1

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073858
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    j := 0\n    l := len(l1)\n    if len(l1) > len(l2)\
    \ {\n        l = len(l2)\n    }\n    common := make([]int, 0, l)\n    for i :=\
    \ 0; i < l; i++ {\n        if l[i] == l2[j] {\n            common = append(common,\
    \ l[i])\n            i++\n            j++\n            continue\n        }\n \
    \       if i == len(l1) {\n            break\n        }\n        if j == len(l2)\
    \ {\n            break\n        }\n        if l[i] > l2[j] {\n            i++\n\
    \        } else {\n            j++\n        }\n    }\n    return common\n}\n\n\
    func TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo0_o4flh_test.go:21:13: invalid operation: cannot index l (variable of
    type int)

    /tmp/tmpo0_o4flh_test.go:22:38: invalid operation: cannot index l (variable of
    type int)

    /tmp/tmpo0_o4flh_test.go:33:13: invalid operation: cannot index l (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073858
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    m := make(map[int]bool)\n    for _, n := range\
    \ l1 {\n        m[n] = true\n    }\n    result := []int{}\n    for _, n := range\
    \ l2 {\n        if _, ok := m[n]; ok {\n            result = append(result, n)\n\
    \        }\n    }\n    return result\n}\n</code>\n<|/ a dscore=4 |>\n<| c |>\n\
    What about `common([]int{8, 5}, {2, 3})`?\n<|/ c |>\n<| c |>\n`common([]int{8,\
    \ 5}, {2, 3})` returns `[]int{8, 5}` which is correct answer in this case.\n<|/\
    \ c |>\n<| c |>\nIt's worth noting that this implementation is unnecessarily slow.\
    \  It creates a new map in every iteration, and each map lookup requires O(n)\
    \ time, making it O(n^2).  Just create a map at the beginning and add to it if\
    \ you're adding to it.\n<|/ c |>\n<| c |>\nTo expand on the above, this implementation\
    \ is not *too* fast as it allocates a new `map[int]bool` for each list each time\
    \ it's called instead of just creating the map once at the beginning.  And it\
    \ also allocates a new slice each time it's called instead of just appending to\
    \ the existing slice if the list is long.\n<|/ c |>\n<| c |>\nWhat about `common([]int{1,\
    \ 5, 653}, {5, 7, 1, 5, 9, 653, 121})`? What would be the result?\n<|/ c |>\n\
    <| a dscore=4 |>\nHere's a solution that is both short and efficient:\n<code>\n\
    func TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpdt768lct_test.go:26:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073857
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    // Sort the lists.\n    sort.Sort(sort.IntSlice(l1))\n\
    \    sort.Sort(sort.IntSlice(l2))\n    for i := 1; i < len(l1); i++ {\n      \
    \  if l1[i-1] == l2[i-1] {\n            // Same element.\n        } else {\n \
    \           // Different elements. Return the previous one.\n            result\
    \ := l1[i-1]\n            break\n        }\n    }\n    return []int{result}\n\
    }\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp563sssb4_test.go:15:5: undefined: sort

    /tmp/tmp563sssb4_test.go:16:5: undefined: sort

    /tmp/tmp563sssb4_test.go:22:13: result declared but not used

    /tmp/tmp563sssb4_test.go:26:18: undefined: result

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073858
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0)\n    i, j := 0, 0\n \
    \   for i < len(l1) && j < len(l2) {\n        if l1[i] == l2[j] {\n          \
    \  result = append(result, l1[i])\n            i++\n            j++\n        }\
    \ else if l1[i] > l2[j] {\n            j++\n        } else {\n            i++\n\
    \        }\n    }\n    for i < len(l1) {\n        result = append(result, l1[i])\n\
    \    }\n    for j < len(l2) {\n        result = append(result, l2[j])\n    }\n\
    \    return result\n}\n</code>\n<|/ a tags=go,sorting,arrays |>\n<| a tags=go,sorting,arrays\
    \ dscore=0 |>\nThis solution has linear complexity but uses two maps to track\
    \ which elements are already in the result. As long as all elements are unique,\
    \ the complexity is O(n) and the space complexity is O(n) too.\n<code>\npackage\
    \ main\n\nimport (\n    \"bufio\"\n    \"fmt\"\n    \"os\"\n    \"strings\"\n\
    )\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpo9_jjs23_test.go:35:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073857
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    k := 0\n    l := 0\n    common := make([]int,\
    \ 0)\n    for len(l1) > 0 || len(l2) > 0 {\n        if l1 == nil {\n         \
    \   l1 = nil\n        }\n        if l2 == nil {\n            l2 = nil\n      \
    \  }\n        if l1 != nil && l2 != nil {\n            if l1[k] == l2[k] {\n \
    \               common = append(common, l1[k])\n                k++\n        \
    \        l2++\n                continue\n            }\n            if l1[k] <\
    \ l2[k] {\n                l1++\n            } else {\n                l2++\n\
    \            }\n        } else if l1 == nil {\n            l1 = nil\n        \
    \    l2 = nil\n        } else if l2 == nil {\n            l1 = nil\n         \
    \   l2 = nil\n        } else if l1[k] < l2[k] {\n            l1++\n        } else\
    \ {\n            l2++\n        }\n        k++\n    }\n    return common\n}\n`},\n\
    \t\t{name: \"sorted\", text: &text{src: `package common_test\n\nimport (\n   \
    \ \"testing\"\n)\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments\n/tmp/tmpw0z39axq_test.go:51:1: expected declaration,\
    \ found `},\n\t\t{name: \"sorted\", text: &text{src: `\n"
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073857
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    return commonHelper(l1, l2, nil)\n}\n\nfunc TestCommon(t\
    \ *testing.T) {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzu848dxg_test.go:14:12: undefined: commonHelper

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073858
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0, len(l1))\n    for _,\
    \ i := range l1 {\n        found := false\n        for _, j := range l2 {\n  \
    \          if i == j {\n                found = true\n                break\n\
    \            }\n        }\n        if found {\n            result = append(result,\
    \ i)\n        }\n    }\n    return result\n}\n\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmptqncq101_test.go:46: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=653) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmptqncq101_test.go:46: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmptqncq101_test.go:46: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    if len(l1) != len(l2) {\n        return nil\n\
    \    }\n    unique := make([]int, len(l1))\n    j := 0\n    for i := 0; i < len(l1);\
    \ i++ {\n        for k := 0; k < j; k++ {\n            if l1[i] == unique[k] {\n\
    \                break\n            }\n        }\n        if j == len(unique)\
    \ {\n            unique = append(unique, l1[i])\n            j = j + 1\n     \
    \   }\n    }\n    return unique\n}\n</code>\n<|/ a |>\n<| c |>\nThis does not\
    \ appear to be correct with the example: `common([]int{5, 3, 2, 8}, []int{3, 2})`.\
    \ It should return `[]int{2, 3}` but it returns `[]int{2, 3}` and `[]int{3, 2}`\n\
    <|/ c |>\n<| c |>\nThanks for pointing out, I fixed it. I think the code is now\
    \ correct.\n<|/ c |>\n<| c |>\nNow the code should work correctly.\n<|/ c |>\n\
    <| a |>\nYou can try with sort and unique combination as below-\n<code>\npackage\
    \ main\n\nimport (\n    \"fmt\"\n    \"sort\"\n)\n\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwzyi0l4b_test.go:32:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073857
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, len(l1)+len(l2)-1)\n   \
    \ for i := range l1 {\n        for j := range l2 {\n            if l1[i] == l2[j]\
    \ {\n                result[i] = l1[i]\n                break\n            }\n\
    \        }\n    }\n    for i := range l2 {\n        for j := range l1 {\n    \
    \        if l2[i] == l1[j] {\n                result[i+len(l1)] = l2[i]\n    \
    \            break\n            }\n        }\n    }\n    return result\n}\n\n\
    func TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\npanic: runtime error: index out of range\
    \ [5] with length 5 [recovered]\n\tpanic: runtime error: index out of range [5]\
    \ with length 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5136e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5136e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.common(...)\n\t/tmp/tmpaqa3z4_1_test.go:26\n\
    command-line-arguments_test.TestCommon(0x0?)\n\t/tmp/tmpaqa3z4_1_test.go:42 +0x6d2\n\
    testing.tRunner(0xc0001a0340, 0x529000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    r := make([]int, 0)\n    for _, v := range l1\
    \ {\n        if _, ok := l2[v]; ok {\n            r = append(r, v)\n        }\n\
    \    }\n    return r\n}\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp95601__0_test.go:16:21: assignment mismatch: 2 variables but 1 value

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073858
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    // Make l2 length less than l1 length.\n    len1\
    \ := len(l1)\n    if len(l2) > len1 {\n        l2 = append([]int{}, l2[:len1]...)\n\
    \    }\n    c := make([]int, 0, len1+len2)\n    j := 0\n    for i, v := range\
    \ l1 {\n        if j < len(c2) {\n            if v == c2[j] {\n              \
    \  c[j] = v\n                j++\n            } else {\n                c[j] =\
    \ c2[j]\n            }\n        }\n    }\n    for _, v := range l2 {\n       \
    \ if j < len(c2) {\n            if v == c2[j] {\n                c[j] = v\n  \
    \              j++\n            } else {\n                c[j] = c2[j]\n     \
    \       }\n        }\n    }\n    return c\n}\n\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppnhr09_y_test.go:19:30: undefined: len2

    /tmp/tmppnhr09_y_test.go:21:9: i declared but not used

    /tmp/tmppnhr09_y_test.go:22:20: undefined: c2

    /tmp/tmppnhr09_y_test.go:23:21: undefined: c2

    /tmp/tmppnhr09_y_test.go:27:24: undefined: c2

    /tmp/tmppnhr09_y_test.go:32:20: undefined: c2

    /tmp/tmppnhr09_y_test.go:33:21: undefined: c2

    /tmp/tmppnhr09_y_test.go:37:24: undefined: c2

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073858
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    m := make(map[int]\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpx8lim1ng_test.go:14:23: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073857
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    list := make([]int, 0, len(l2))\n    inter :=\
    \ make([]int, 0, len(l1))\n    j := 0\n\n    for i := 0; i < len(l1) && i < len(l2);\
    \ i++ {\n        if l1[i] != l2[i] {\n            inter = append(inter, l2[j])\n\
    \            list[j] = l1[i]\n            j++\n        }\n    }\n\n    return\
    \ append(inter, l1[j:]...)\n}\n</code>\n<|/ a tags=go,arrays,sorting |>\n<| a\
    \ dscore=2 |>\nJust for fun\n<code>\npackage main\n\nimport \"fmt\"\n\nfunc TestCommon(t\
    \ *testing.T) {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpx_tuj9f2_test.go:28:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073857
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    var res []int\n    m := make(map[int]int)\n  \
    \  for _, v := range l1 {\n        m[v]++\n    }\n    for _, v := range l2 {\n\
    \        if _, ok := m[v]; ok {\n            m[v]++\n        } else {\n      \
    \      res = append(res, v)\n            m[v] = 1\n        }\n    }\n    return\
    \ res\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5,\
    \ 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpmnbbwf2z_test.go:46: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=7) %!s(int=9) %!s(int=121)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpmnbbwf2z_test.go:46: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpmnbbwf2z_test.go:46:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0)\n    for i := 0; i <\
    \ len(l1); i++ {\n        if i == 0 {\n            result = append(result, l1[i])\n\
    \            continue\n        }\n        for j := i; j < len(l2); j++ {\n   \
    \         if l2[j] == l1[i] {\n                result = append(result, l1[i])\n\
    \            }\n        }\n    }\n    return append(result, l2...)\n}\n\nfunc\
    \ TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653,\
    \ 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5, 3, 2,\
    \ 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmp7c30sei9_test.go:45: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=653) %!s(int=5) %!s(int=7) %!s(int=1) %!s(int=5) %!s(int=9)\
    \ %!s(int=653) %!s(int=121)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmp7c30sei9_test.go:45: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n    \
    \    tmp7c30sei9_test.go:45: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got\
    \ '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=4)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmp7c30sei9_test.go:45: expected '[]', got '[%!s(int=4)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    // Create a copy for returning sorted unique common\
    \ elements.\n    l1 := make([]int, len(l1))\n    l2 := make([]int, len(l2))\n\
    \    copy(l1, l2)\n    // Sort the unique common elements.\n    sort.Sort(l1)\n\
    \    sort.Sort(l2)\n    // Filter out non-common elements.\n    common := make([]int,\
    \ 0, len(l1))\n    for _, n1 := range l1 {\n        for _, n2 := range l2 {\n\
    \            if n1 == n2 {\n                common = append(common, n1)\n    \
    \            break\n            }\n        }\n    }\n    return common\n}\n\n\
    func TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0_w7s4y6_test.go:15:8: no new variables on left side of :=

    /tmp/tmp0_w7s4y6_test.go:16:8: no new variables on left side of :=

    /tmp/tmp0_w7s4y6_test.go:19:5: undefined: sort

    /tmp/tmp0_w7s4y6_test.go:20:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073860
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    if len(l1) < len(l2) {\n        copy(l2, l1)\n\
    \        l2 = l2[:len(l1)]\n    }\n    var res []int\n    for i := 0; i < len(l2);\
    \ i++ {\n        ok := true\n        for j := 0; j < len(l1); j++ {\n        \
    \    if l2[i] != l1[j] {\n                ok = false\n                break\n\
    \            }\n        }\n        if ok {\n            ret = append(ret, l2[i])\n\
    \        }\n    }\n    return res\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate\
    \ := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa9b8bc09_test.go:28:26: undefined: ret

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073860
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0)\n    for i := 0; i <\
    \ len(l1); i++ {\n        if !in(l1[i], l2) {\n            result = append(result,\
    \ l1[i])\n        }\n    }\n    for i := 0; i < len(l2); i++ {\n        if !in(l2[i],\
    \ l1) {\n            result = append(result, l2[i])\n        }\n    }\n    return\
    \ removeDuplicates(result)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate\
    \ := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnbifujsy_test.go:16:13: undefined: in

    /tmp/tmpnbifujsy_test.go:21:13: undefined: in

    /tmp/tmpnbifujsy_test.go:25:12: undefined: removeDuplicates

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073860
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    var a, b []int\n    i := 0\n    for i < len(l1)\
    \ && i < len(l2) {\n        if l1[i] < l2[i] {\n            a = append(a, l1[i])\n\
    \            i++\n        } else {\n            b = append(b, l2[i])\n       \
    \     i++\n        }\n    }\n    if i == len(l1) {\n        a = append(a, l1...)\n\
    \    } else {\n        b = append(b, l2...)\n    }\n    a = append(a, []int{})\n\
    \    b = append(b, []int{})\n    sort.Ints(a)\n    sort.Ints(b)\n    a = append(a,\
    \ []int{})\n    b = append(b, []int{})\n    sort.Ints(a)\n    sort.Ints(b)\n \
    \   result := make([]int, 0, len(a)+len(b))\n    i = 0\n    for i < len(a) &&\
    \ i < len(b) {\n        if a[i]==b[i] {\n            result = append(result, a[i])\n\
    \            i++\n        } else if a[i] < b[i] {\n            result = append(result,\
    \ a[i])\n            i++\n        } else {\n            result = append(result,\
    \ b[i])\n            i++\n        }\n    }\n    for i < len(a) {\n        result\
    \ = append(result, a[i])\n    }\n    for i < len(b) {\n        result = append(result,\
    \ b[i])\n    }\n    return result\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate\
    \ := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo3_ve2yy_test.go:30:19: cannot use []int{} (value of type []int) as type
    int in argument to append

    /tmp/tmpo3_ve2yy_test.go:31:19: cannot use []int{} (value of type []int) as type
    int in argument to append

    /tmp/tmpo3_ve2yy_test.go:32:5: undefined: sort

    /tmp/tmpo3_ve2yy_test.go:33:5: undefined: sort

    /tmp/tmpo3_ve2yy_test.go:34:19: cannot use []int{} (value of type []int) as type
    int in argument to append

    /tmp/tmpo3_ve2yy_test.go:35:19: cannot use []int{} (value of type []int) as type
    int in argument to append

    /tmp/tmpo3_ve2yy_test.go:36:5: undefined: sort

    /tmp/tmpo3_ve2yy_test.go:37:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073860
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    m := map[int]int{}\n    for _, val := range l1\
    \ {\n        m[val]++\n    }\n    for _, val := range l2 {\n        m[val]--\n\
    \    }\n    var result []int\n    for v := range m {\n        if m[v] == 0 {\n\
    \            result = append(result, v)\n        }\n    }\n    return sort(result)\n\
    }\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6dpc211s_test.go:27:12: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073860
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    sort.Ints(l1)\n    sort.Ints(l2)\n    out := make([]int,\
    \ 0, len(l1))\n    for i, j := range l1 {\n        if j == l2[i] {\n         \
    \   out = append(out, j)\n        }\n    }\n    return out\n}\n\nfunc TestCommon(t\
    \ *testing.T) {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpww781mh9_test.go:14:5: undefined: sort

    /tmp/tmpww781mh9_test.go:15:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073860
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    l1Set := make(map[int]\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpw7vzgsmx_test.go:14:27: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073859
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0)\n    j := 0\n    k :=\
    \ 0\n    i := 0\n    for ; i < len(l1); i++ {\n        j := 0\n        for ; j\
    \ < len(l2); j++ {\n            if l1[i] == l2[j] {\n                result[k]\
    \ = l1[i]\n                k++\n            }\n        }\n    }\n    return result[:k]\n\
    }\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmps99xztor_test.go:15:5: j declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073860
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, len(l1))\n    j := 0\n \
    \   for i, a := range l1 {\n        for _, a2 := range l2 {\n            if a\
    \ == a2 {\n                result[j] = a\n                j++\n            }\n\
    \        }\n    }\n    return result[:j]\n}\n\nfunc TestCommon(t *testing.T) {\n\
    \  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4,\
    \ 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653}\
    \ },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2,\
    \ 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected:\
    \ []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3hyq1d2p_test.go:16:9: i declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073860
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    // Create a slice with unique elements present\
    \ in both input slices.\n    s := make([]int, 0, len(l1)+len(l2)-1)\n    i :=\
    \ 0\n    for i < len(l1) && i < len(l2) {\n        if l1[i] == l2[i] {\n     \
    \       s = append(s, l1[i])\n            i++\n            continue\n        }\n\
    \        // The element in the first slice is not in the second slice.\n     \
    \   if l1[i] == 0 {\n            s = append(s, l2[i])\n            i++\n     \
    \       continue\n        }\n        // The element in the second slice is not\
    \ in the first slice.\n        if l2[i] == 0 {\n            s = append(s, l1[i])\n\
    \            i++\n            continue\n        }\n        // The element in the\
    \ first slice is smaller than the element in the second slice.\n        if l1[i]\
    \ < l2[i] {\n            s = append(s, l1[i])\n            i++\n            continue\n\
    \        }\n        // The element in the second slice is smaller than the element\
    \ in the first slice.\n        if l1[i] > l2[i] {\n            s = append(s, l2[i])\n\
    \            i++\n            continue\n        }\n        // The element in the\
    \ first slice is equal to the element in the second slice.\n        s = append(s,\
    \ l1[i])\n        i++\n    }\n    // If no unique elements are found, append the\
    \ last element from one of the lists.\n    if i == 0 {\n        s = append(s,\
    \ l1[i])\n        i++\n    }\n    return s[0:i]\n}\n\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpkwqaydag_test.go:75: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=1) %!s(int=5) %!s(int=9) %!s(int=2) %!s(int=5)]'\n\
    \    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmpkwqaydag_test.go:75:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL:\
    \ TestCommon/test_num__2 (0.00s)\n        tmpkwqaydag_test.go:75: expected '[%!s(int=2)\
    \ %!s(int=3) %!s(int=4)]', got '[%!s(int=3) %!s(int=2) %!s(int=2)]'\n    --- FAIL:\
    \ TestCommon/test_num__3 (0.00s)\n        tmpkwqaydag_test.go:75: expected '[]',\
    \ got '[%!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073860
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    return append([]int{}, l1[:len(l1)-1], l2[:len(l2)-1],\
    \ l1[1:], l2[1:]...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp81_cg5zt_test.go:14:46:\
    \ too many arguments in call to append\n\thave ([]int, []int, []int, []int, []int)\n\
    \twant ([]int, ...int)\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073860
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    return append(\n        sort.IntSliceHelper(l1),\n\
    \        sort.IntSliceHelper(l2),\n    ).Unique()\n}\n\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptlolea53_test.go:15:9: undefined: sort

    /tmp/tmptlolea53_test.go:16:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073860
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    m := make(map[int]int, len(l1)+len(l2))\n    for\
    \ _, v := range l1 {\n        m[v]++\n    }\n    for _, v := range l2 {\n    \
    \    m[v]++\n    }\n    var res []int\n    for v := range m {\n        if m[v]\
    \ == 1 {\n            res = append(res, v)\n        }\n    }\n    return res\n\
    }\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmp92lgwyj6_test.go:46: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=2) %!s(int=4) %!s(int=9) %!s(int=3) %!s(int=34) %!s(int=7) %!s(int=121)]'\n\
    \    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmp92lgwyj6_test.go:46:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5) %!s(int=8)]'\n    --- FAIL:\
    \ TestCommon/test_num__2 (0.00s)\n        tmp92lgwyj6_test.go:46: expected '[%!s(int=2)\
    \ %!s(int=3) %!s(int=4)]', got '[%!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmp92lgwyj6_test.go:46: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073861
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0, len(l1))\n    for _,\
    \ lv := range l1 {\n        found := false\n        for _, rv2 := range l2 {\n\
    \            if rv2 == lv {\n                found = true\n                break\n\
    \            }\n        }\n        if !found {\n            result = append(result,\
    \ lv)\n        }\n    }\n    for _, lv := range l2 {\n        found := false\n\
    \        for _, rv := range l1 {\n            if rv == lv {\n                found\
    \ = true\n                break\n            }\n        }\n        if !found {\n\
    \            result = append(result, lv)\n        }\n    }\n    sort.Slice(result,\
    \ func(i, j int) bool {\n        return result[i] < result[j]\n    })\n    return\
    \ result\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5,\
    \ 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd4_0vh2f_test.go:39:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073860
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    common := make([]int, 0)\n    j := 0\n    for\
    \ i := 0; i < len(l1); i++ {\n        for ; j < len(l2); j++ {\n            if\
    \ l1[i] == l2[j] {\n                common = append(common, l1[i])\n         \
    \       break\n            }\n        }\n    }\n    return common\n}\n\nfunc TestCommon(t\
    \ *testing.T) {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmp0lriisqp_test.go:43: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmp0lriisqp_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmp0lriisqp_test.go:43: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073861
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    m := make(map[int]int, len(l1))\n    for i, val\
    \ := range l1 {\n        m[val] = i\n    }\n    sort.Ints(l2)\n    j := 0\n  \
    \  for _, val := range l2 {\n        if m[val] == j {\n            continue\n\
    \        }\n        l1Common := []int{}\n        for _, val := range l1 {\n  \
    \          if m[val] == j {\n                continue // Do not include duplicate\n\
    \            }\n            l1Common = append(l1Common, val)\n            m[val]\
    \ = j\n        }\n        j += 1\n        sortedL1 := l1Common[:len(l1Common)-1]\n\
    \        sortedL1 += append([]int{0}, sortedL1...)\n        return sortedL1\n\
    \    }\n    return nil\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj47rgbw7_test.go:18:5: undefined: sort

    /tmp/tmpj47rgbw7_test.go:34:9: invalid operation: operator + not defined on sortedL1
    (variable of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073860
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    sort.Ints(l1)\n    sort.Ints(l2)\n    j := 0\n\
    \    k := 0\n    result := make([]int, 0)\n    for j < len(l1) && k < len(l2)\
    \ {\n        if l1[j] == l2[k] {\n            j = j + 1\n            k = k + 1\n\
    \        } else {\n            if l1[j] < l2[k] {\n                result = append(result,\
    \ l1[j])\n                j = j + 1\n            } else {\n                result\
    \ = append(result, l2[k])\n                k = k + 1\n            }\n        }\n\
    \    }\n    for j < len(l1) {\n        result = append(result, l1[j])\n      \
    \  j = j + 1\n    }\n    for k < len(l2) {\n        result = append(result, l2[k])\n\
    \        k = k + 1\n    }\n    return result\n}\n</code>\n<|/ a |>\n<| c |>\n\
    What about a lot of data? Is there a more efficient way?\n<|/ c |>\n<| c |>\n\
    It would be more efficient to first sort the lists and then compare the two lists.\
    \ [This answer](https://stackoverflow.com/a/33136031/1267695) explains how. I\
    \ think you could do it in O(nlogn) time using that method.\n<|/ c |>\n<| c |>\n\
    I added an O(n) solution. Hope it helps.\n<|/ c |>\n<| c |>\nI think that is a\
    \ good solution for very small lists such as 10^6 but I am looking for something\
    \ with larger lists, 10^7 or more.\n<|/ c |>\n<| c |>\nAdded an O(nlogn) solution.\
    \ Hope it helps.\n<|/ c |>\n<| a dscore=5 |>\nThe python code for this would be:\n\
    <code>\ndef common_elem(l1, l2):\n    common_list = []\n    common_set = set(l1)\
    \ & set(l2)\n    for item in common_set:\n        common_list.append(item)\n \
    \   return common_list\n</code>\n<|/ a tags=set,go,list,algorithm,performance\
    \ |>\n<| c |>\nGreat solution! You just saved me a lot of time!\n<|/ c |>\n<|\
    \ c |>\nThis solution is very fast for large lists.\n<|/ c |>\n<| c |>\nFor some\
    \ reason this doesn't work if both l1 and l2 are empty lists.\n<|/ c |>\n<| c\
    \ |>\nGreat solution, but this fails for empty list cases.\n<|/ c |>\n<| c |>\n\
    `for item in common_set if item in l1: common_list.append(item)` works well for\
    \ this purpose.\n<|/ c |>\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp9xhxb0jr_test.go:43:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073860
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    var out []int\n    seen := make(map[int]bool)\n\
    \    for _, val := range l1 {\n        if _, exist := seen[val]; !exist {\n  \
    \          out = append(out, val)\n            seen[val] = true\n        }\n \
    \   }\n    for _, val := range l2 {\n        if _, exist := seen[val]; !exist\
    \ {\n            out = append(out, val)\n            seen[val] = true\n      \
    \  }\n    }\n    return append([]int{}, out...)\n}\n</code>\nThe code above is\
    \ inspired by this answer https://stackoverflow.com/a/18164419/817663 with my\
    \ comments about the code and why I used a map instead of a sort.\n<|/ a dscore=1\
    \ tags=algorithm,sorting,performance,go |>\n<| a tags=algorithm,sorting,performance,go\
    \ |>\nI ran this benchmark against the other answers on my machine and got:\n\
    <code>\nBenchmarkCommon-8           5000000               8.61 ns/op\nBenchmarkCommon-8\
    \           5000000               6.26 ns/op\nBenchmarkCommon-8           5000000\
    \               2.31 ns/op\nBenchmarkCommon-8           5000000              \
    \ 0.33 ns/op\nBenchmarkCommon-8           5000000               0.00 ns/op\nBenchmarkCommon-8\
    \           5000000               0.00 ns/op\nBenchmarkCommon-8           5000000\
    \               0.13 ns/op\nBenchmarkCommon-8           5000000              \
    \ 0.17 ns/op\nBenchmarkCommon-8           5000000               0.30 ns/op\nBenchmarkCommon-8\
    \           5000000               1.21 ns/op\nBenchmarkCommon-8           5000000\
    \               2.15 ns/op\nBenchmarkCommon-8           5000000              \
    \ 1.78 ns/op\nBenchmarkCommon-8           5000000               2.34 ns/op\nBenchmarkCommon-8\
    \           5000000               0.52 ns/op\nBenchmarkCommon-8           5000000\
    \               1.12 ns/op\nBenchmarkCommon-8           5000000              \
    \ 3.47 ns/op\nBenchmarkCommon-8           5000000               1.76 ns/op\nBenchmarkCommon-8\
    \           5000000               2.37 ns/op\nBenchmarkCommon-8           5000000\
    \               0.32 ns/op\nBenchmarkCommon-8           5000000              \
    \ 1.11 ns/op\nBenchmarkCommon-8           5000000               3.37 ns/op\nBenchmarkCommon-8\
    \           5000000               2.09 ns/op\nBenchmarkCommon-8           5000000\
    \               2.07 ns/op\nBenchmarkCommon-8           5000000              \
    \ 0.27 ns/op\nBenchmarkCommon-8           5000000               0.\nfunc TestCommon(t\
    \ *testing.T) {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp8r3i4f32_test.go:30:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073860
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    l := 0\n    for ; l < len(l1); l++ {\n       \
    \ for ; l < len(l2); l++ {\n            if l1[l] == l2[l] {\n                l1\
    \ := l1[:l]\n                l2 := l2[:l]\n                break\n           \
    \ }\n        }\n    }\n    return l1\n}\n\nfunc TestCommon(t *testing.T) {\n \
    \ candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4,\
    \ 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653}\
    \ },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2,\
    \ 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected:\
    \ []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprue37kg6_test.go:18:17: l1 declared but not used

    /tmp/tmprue37kg6_test.go:19:17: l2 declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073860
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0, len(l1))\n\n    for i,\
    \ l11item := range l1 {\n        for j, l12item := range l2 {\n            if\
    \ l11item == l12item {\n                fmt.Printf(\"i: %d, j: %d\\n\", i, j)\n\
    \                if i != j {\n                    result = append(result, l11item)\n\
    \                }\n            }\n        }\n    }\n    sort.Ints(result)\n \
    \   return result\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdouz0w46_test.go:26:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073861
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    m := make(map[int]bool, len(l1))\n    for _, val\
    \ := range l1 {\n        m[val] = true\n    }\n    sort.Ints(l2)\n    for _, val\
    \ := range l2 {\n        if m[val] {\n            delete(m, val)\n        } else\
    \ {\n            return append([]int{}, val...)\n        }\n    }\n    return\
    \ nil\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5,\
    \ 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp362dnikf_test.go:18:5: undefined: sort

    /tmp/tmp362dnikf_test.go:23:36: cannot use val (variable of type int) as type
    []int in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073861
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    m := make(map[int]bool, len(l1))\n    seen :=\
    \ make([]int, len(l2))\n    for _, v := range l2 {\n        m[v] = true\n    }\n\
    \n    for _, v := range l1 {\n        if _, ok := m[v]; !ok {\n            continue\n\
    \        }\n\n        seen = append(seen, v)\n        for _, v2 := range l2 {\n\
    \            if v2, ok := m[v2]; ok && v != v2 {\n                m[v] = false\n\
    \                break\n            }\n        }\n    }\n\n    return seen\n}\n\
    </code>\n<|/ a dscore=5 |>\n<| a dscore=4 |>\nThe simple and efficient solution\
    \ that works even if the elements themselves are sorted in O(n) time complexity\
    \ (thanks to for the idea):\n<code>\nfunc TestCommon(t *testing.T) {\n  candidate\
    \ := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmptlv8fdyf_test.go:36:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073860
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    k := 0\n    result := make([]int, 0)\n    for\
    \ len(l1) > 0 || len(l2) > 0 {\n        if l1 == nil && len(result) == 0 {\n \
    \           break\n        }\n        if l2 == nil && len(result) == 0 {\n   \
    \         break\n        }\n        if l1 == nil && l2 == nil {\n            break\n\
    \        }\n        i, ok := min(l1, len(l2))\n        if !ok {\n            break\n\
    \        }\n        if l2 == nil {\n            l2 = l2[:i]\n            k = k\
    \ + i\n        }\n        if l1 == nil {\n            l1 = l1[:i]\n          \
    \  k = k + i\n        }\n        if l1[i] == l2[i] {\n            copy(result,\
    \ l1)\n            copy(l1[:], l1[i+1:])\n            result = append(result,\
    \ l2[i])\n            l1 = l1[:i]\n            k = k - 1\n            l2 = l2[:i]\n\
    \            k = k - i - 1\n        }\n    }\n    if len(result) == 0 {\n    \
    \    return nil\n    }\n    return append(result, l1...)\n}\n\nfunc TestCommon(t\
    \ *testing.T) {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv4b90feb_test.go:26:18: undefined: min

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073861
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    m := map[int]int{}\n\n    for _, i := range l1\
    \ {\n        m[i] = 1\n    }\n\n    for _, j := range l2 {\n        m[j]++\n \
    \   }\n\n    out := []int{}\n\n    for _, k := range m {\n        if k == 1 {\n\
    \            out = append(out, k)\n        }\n    }\n\n    return append(out,\
    \ k...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5,\
    \ 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpiwhb1s2x_test.go:32:24: undefined: k

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073861
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    sort.Ints(l1)\n    sort.Ints(l2)\n    var result\
    \ []int\n    for i := 0; i < len(l1); i++ {\n        if i == len(l2) || l1[i]\
    \ != l2[i] {\n            result = append(result, l1[i])\n        }\n    }\n \
    \   return result\n}\n</code>\n<|/ a |>\n<| c |>\nHow would I use this code? Just\
    \ copy and paste it in the main func or import it in another file?\n<|/ c |>\n\
    <| c |>\nI used the code, but when I run this command \"go test common_test.go\"\
    \ I get the error \"go: finding package \"common_test\" in any of: /usr/local/go/src/common_test\
    \ C:\\Go\\src\\common_test\\common_test.go\nC:\\Go\\src\\common_test\\common_test.go:2:2:\
    \ cannot find package \"common_test\" in any of:\nC:\\Go\\src\\common_test C:\\\
    Go\\src\\common_test\\common_test.go\nC:\\Go\\src\\common_test\\common_test.go:2:2:\
    \ package \"common_test\" is not in GOROOT (C:\\Go)\nC:\\Go\\src\\common_test\\\
    common_test.go:2:2: package \"common_test\" not found in any of:\nC:\\Go\\src\\\
    common_test\nC:\\Go\\src\\common_test\\common_test.go:2:2: cannot find package\
    \ \"common_test\" in any of:\nC:\\Go\\src\\common_test C:\\Go\\src\\common_test\\\
    common_test.go\nC:\\Go\\src\\common_test\\common_test.go:2:2: package \"common_test\"\
    \ is not in GOROOT (C:\\Go)\nC:\\Go\\src\\common_test\\common_test.go:2:2: package\
    \ \"common_test\" not found in any of:\nC:\\Go\\src\\common_test\nC:\\Go\\src\\\
    common_test\\common_test.go:2:2: cannot find package \"common_test\" in any of:\n\
    C:\\Go\\src\\common_test C:\\Go\\src\\common_test\\common_test.go\nC:\\Go\\src\\\
    common_test\\common_test.go:2:2: package \"common_test\" is not in GOROOT (C:\\\
    Go)\nC:\\Go\\src\\common_test\\common_test.go:2:2: package \"common_test\" not\
    \ found in any of:\nC:\\Go\\src\\common_test\nC:\\Go\\src\\common_test\\common_test.go:2:2:\
    \ cannot find package \"common_test\" in any of:\nC:\\Go\\src\\common_test C:\\\
    Go\\src\\common_test\\common_test.\nfunc TestCommon(t *testing.T) {\n  candidate\
    \ := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5e48jp3r_test.go:24:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073861
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    return l1[:1]\n}\n\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpw__k26to_test.go:33: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmpw__k26to_test.go:33:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmpw__k26to_test.go:33: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=4)]'\n    --- FAIL: TestCommon/test_num__3 (0.00s)\n        tmpw__k26to_test.go:33:\
    \ expected '[]', got '[%!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660073862
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    c := make([]int, 0)\n    i := 0\n    for {\n \
    \       if i == len(l1) {\n            break\n        }\n        if i == len(l2)\
    \ {\n            break\n        }\n        if l1[i] == l2[i] {\n            i++\n\
    \            continue\n        }\n        c = append(c, l1[i])\n        i++\n\
    \    }\n    return c\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpo87w1863_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)]'\n\
    \    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmpo87w1863_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5) %!s(int=3)]'\n    --- FAIL:\
    \ TestCommon/test_num__2 (0.00s)\n        tmpo87w1863_test.go:49: expected '[%!s(int=2)\
    \ %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073862
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    var common = []int{}\n    for i, v := range l1\
    \ {\n        if !contains(common, v) && !contains(l2, v) {\n            common\
    \ = append(common, v)\n        }\n    }\n    return common\n}\n\nfunc TestCommon(t\
    \ *testing.T) {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcor5a673_test.go:15:9: i declared but not used

    /tmp/tmpcor5a673_test.go:16:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073862
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    sort.Ints(l1)\n    sort.Ints(l2)\n    var commonElements\
    \ []int\n    var lastCommonElement int\n    var i, j int\n\n    for i = 0; i <\
    \ len(l1); i++ {\n        if l1[len(l1)-i-1] == l1[len(l1)-i-1] {\n          \
    \  lastCommonElement = l1[len(l1)-i-1]\n        } else {\n            commonElements\
    \ = append(commonElements, lastCommonElement)\n            lastCommonElement =\
    \ l1[len(l1)-i-1]\n        }\n    }\n\n    for j = 0; j < len(l2); j++ {\n   \
    \     if l2[len(l2)-j-1] == l2[len(l2)-j-1] {\n            lastCommonElement =\
    \ l2[len(l2)-j-1]\n        } else {\n            commonElements = append(commonElements,\
    \ lastCommonElement)\n            lastCommonElement = l2[len(l2)-j-1]\n      \
    \  }\n    }\n\n    return commonElements\n}\n\nfunc TestCommon(t *testing.T) {\n\
    \  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4,\
    \ 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653}\
    \ },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2,\
    \ 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected:\
    \ []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpurhnrvxj_test.go:14:5: undefined: sort

    /tmp/tmpurhnrvxj_test.go:15:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073862
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    common1 := make([]int, 0, len(l1))\n    common2\
    \ := make([]int, 0, len(l2))\n    for _, i := range l1 {\n        if _, ok :=\
    \ common2[len(common2)-1]; ok {\n            common1, common2 = common2, common1[:len(common2)-1]\n\
    \        }\n        if common1[len(common1)-1] == i {\n            continue\n\
    \        }\n        common1 = append(common1, i)\n    }\n    for _, i := range\
    \ l2 {\n        if _, ok := common1[len(common1)-1]; ok {\n            common1,\
    \ common2 = common2, common1[:len(common2)-1]\n        }\n        if common2[len(common2)-1]\
    \ == i {\n            continue\n        }\n        common2 = append(common2, i)\n\
    \    }\n    return append(common1, common2...)\n}\n\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9rc5blwj_test.go:17:21: assignment mismatch: 2 variables but 1 value

    /tmp/tmp9rc5blwj_test.go:26:21: assignment mismatch: 2 variables but 1 value

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073862
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    l1Set := make(map[int]bool, len(l1))\n    l2Set\
    \ := make(map[int]bool, len(l2))\n\n    for _, v := range l1 {\n        l1Set[v]\
    \ = true\n    }\n\n    for _, v := range l2 {\n        l2Set[v] = true\n    }\n\
    \n    var common []int\n    for v := range l1Set {\n        if l2Set[v] {\n  \
    \          common = append(common, v)\n        }\n    }\n    return common\n}\n\
    </code>\n<|/ a dscore=3 |>\n<| c |>\nYour solution takes O(n) time. I was looking\
    \ for something that takes O(nlogn).\n<|/ c |>\n<| c |>\nI updated my answer to\
    \ demonstrate `O(nlogn)` complexity and other modifications you can make.\n<|/\
    \ c |>\n<| a tags=algorithm,arrays,go |>\nYou can get the count of common element\
    \ by using hashmap\n<code>\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpq_mwm1s9_test.go:33:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073861
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    m := make(map[int]int, len(l1)+len(l2))\n    for\
    \ _, v := range l1 {\n        m[v]++\n    }\n    for _, v := range l2 {\n    \
    \    m[v]++\n    }\n    result := make([]int, 0, len(m))\n    for _, v := range\
    \ m {\n        result = append(result, v)\n    }\n    return sortInts(result)\n\
    }\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzc8lnm6x_test.go:25:12: undefined: sortInts

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073862
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0)\n\n    for _, l1 := range\
    \ l1 {\n        for _, l2 := range l2 {\n            if l1 == l2 {\n         \
    \       copy(result, l1)\n                result = append(result, l1)\n      \
    \      }\n        }\n    }\n    sort.Ints(result)\n    return result\n}\n\nfunc\
    \ TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653,\
    \ 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5, 3, 2,\
    \ 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp35fqrn6r_test.go:19:22: invalid argument: copy expects slice arguments;
    found result (variable of type []int) and l1 (variable of type int)

    /tmp/tmp35fqrn6r_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073862
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    common := make([]int, 0, len(l1))\n    for _,\
    \ i := range l1 {\n        for _, j := range l2 {\n            if i == j {\n \
    \               common = append(common, i)\n            }\n        }\n    }\n\
    \    return common\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpm18mq5td_test.go:41: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=653) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpm18mq5td_test.go:41: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmpm18mq5td_test.go:41: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073862
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    set := make(map[int]bool)\n    result := make([]int,\
    \ 0)\n    for i, j := range l1 {\n        set[j] = true\n        if set[j] {\n\
    \            result = append(result, j)\n        }\n    }\n    for j, k := range\
    \ l2 {\n        set[k] = true\n        if set[k] {\n            result = append(result,\
    \ j)\n        }\n    }\n    return result\n}\n\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptx6_n1wn_test.go:16:9: i declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073862
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    if l1 == nil {\n        return l2\n    }\n   \
    \ if l2 == nil {\n        return l1\n    }\n    // Sort l1 and l2 to improve performance\
    \ of common function.\n    sort.Ints(l1)\n    sort.Ints(l2)\n\n    // The length\
    \ of l1 and l2 must be the same.\n    if len(l1) != len(l2) {\n        return\
    \ nil\n    }\n\n    result := make([]int, 0)\n    for i := 0; i < len(l1); i++\
    \ {\n        j := 0\n        for ; j < len(l2); j++ {\n            if l1[i] ==\
    \ l2[j] {\n                break\n            }\n        }\n\n        // If l2[j]\
    \ not found (no match), add it to result list.\n        if j == len(l2) {\n  \
    \          result = append(result, l1[i])\n        }\n    }\n    return result\n\
    }\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwvbr1n0z_test.go:21:5: undefined: sort

    /tmp/tmpwvbr1n0z_test.go:22:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073862
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0)\n    for _, item1 :=\
    \ range l1 {\n        for _, item2 := range l2 {\n            if item1 == item2\
    \ {\n                continue // continue in next iteration\n            }\n \
    \           result, hasFound := append(result, item1), true\n            for _,\
    \ item3 := range result {\n                if item1 != item3 {\n             \
    \       break // break in next iteration\n                }\n                if\
    \ item2 == item3 {\n                    hasFound = false\n                   \
    \ break // break in next iteration\n                }\n            }\n       \
    \     if !hasFound {\n                result, hasFound = append(result, item1),\
    \ true\n            }\n        }\n    }\n    return result\n}\n\nfunc TestCommon(t\
    \ *testing.T) {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpua4rcy64_test.go:54: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmpua4rcy64_test.go:54:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmpua4rcy64_test.go:54: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073863
- exit_code: null
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    var i int\n    result := []int{}\n    for i <\
    \ len(l1) && i < len(l2) {\n        if l1[i] == l2[i] {\n            result =\
    \ append(result, l1[i])\n            i++\n            continue\n        }\n  \
    \      if l1[i] > l2[i] {\n            break\n        }\n    }\n    return append(result,\
    \ l1...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5,\
    \ 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073875
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    var ret []int\n    for i := 0; i < len(l1); i++\
    \ {\n        for j := 0; j < len(l2); j++ {\n            if l1[i] == l2[j] {\n\
    \                ret = append(ret, l1[i])\n                break\n           \
    \ }\n        }\n    }\n    return ret\n}\n\nfunc TestCommon(t *testing.T) {\n\
    \  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4,\
    \ 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653}\
    \ },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2,\
    \ 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected:\
    \ []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpp3f_jbmq_test.go:42: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=653) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpp3f_jbmq_test.go:42: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmpp3f_jbmq_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073863
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    var a []int\n    var b []int\n\n    if len(l1)\
    \ > len(l2) {\n        a, b = l2, l1\n    } else {\n        a, b = l1, l2\n  \
    \  }\n\n    j := 0\n    count := 0\n\n    for i, v := range a {\n        if b[j]\
    \ != v {\n            break\n        }\n        count++\n        j++\n    }\n\n\
    \    if len(b) < len(a) {\n        return nil\n    }\n\n    var result []int\n\
    \    for i := range a {\n        if count == 0 {\n            break\n        }\n\
    \        if count > len(b) {\n            count = len(b)\n        }\n        if\
    \ count < len(a) {\n            count = len(a)\n        }\n        result = append(result,\
    \ a[i])\n    }\n\n    return result\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate\
    \ := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpogri51r7_test.go:26:9: i declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073862
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    // Initialize result slice\n    result := make([]int,\
    \ 0, len(l1))\n    sort.Sort(IntSlice(l1))\n    sort.Sort(IntSlice(l2))\n    for\
    \ i := 0; i < len(l1); i++ {\n        if l1[i] == l2[i] {\n            result\
    \ = append(result, l1[i])\n        }\n    }\n    return result\n}\nfunc TestCommon(t\
    \ *testing.T) {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp71wcykd0_test.go:16:5: undefined: sort

    /tmp/tmp71wcykd0_test.go:16:15: undefined: IntSlice

    /tmp/tmp71wcykd0_test.go:17:5: undefined: sort

    /tmp/tmp71wcykd0_test.go:17:15: undefined: IntSlice

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073862
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    s := make(map[int]int)\n    for i := range l1\
    \ {\n        if _, ok := l2[len(l2)-i]; ok {\n            s[l1[i]]++\n       \
    \ }\n    }\n    result := make([]int, 0)\n    for i := range s {\n        if s[i]\
    \ == 1 {\n            result = append(result, i)\n        }\n    }\n    return\
    \ result\n}\n</code>\n<|/ a dscore=4 tags=algorithm,go |>\n<| c |>\nThanks for\
    \ this code. I am going to try it. I have edited the question to make it clear\
    \ that I have already tried a solution with sorting. The idea of using map is\
    \ great. I am going to try your code.\n<|/ c |>\n<| c |>\nYes, that works! Thank\
    \ you so much. I was stuck trying to figure out how to sort the result (that was\
    \ not possible since the return type was a slice). But I am still confused why\
    \ my code didn't work. Anyway, I got it to work. Thanks again for sharing.\n<|/\
    \ c |>\n<| c |>\nThe idea is clearly the simplest and fastest way to find common\
    \ elements. But it has a limitation that its complexity is O(n2). I wonder why\
    \ there is no better solution? Anyway, thank you for your answer.\n<|/ c |>\n\
    <| c |>\nYou do realise that after sorting both lists there will be no common\
    \ element anymore? So you need to sort only the unique elements in order to find\
    \ the common one.\n<|/ c |>\n<| a dscore=3 tags=algorithm,go |>\nHere is a solution\
    \ using an intersection data \nfunc TestCommon(t *testing.T) {\n  candidate :=\
    \ common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgbgsa3_z_test.go:28:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073862
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    m, n := len(l1), len(l2)\n    ans := make([]int,\
    \ m*n)\n    for i := 0; i < m; i++ {\n        for j := 0; j < n; j++ {\n     \
    \       if l1[i] == l2[j] {\n                ans[i*n+j] = l1[i]\n            }\n\
    \        }\n    }\n    return ans\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate\
    \ := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpjrpr5bmd_test.go:42: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=653) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=5) %!s(int=0) %!s(int=0) %!s(int=5) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmpjrpr5bmd_test.go:42:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0) %!s(int=3) %!s(int=0)\
    \ %!s(int=0) %!s(int=2) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmpjrpr5bmd_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=4) %!s(int=3) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=2) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073863
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    s := make([]int, len(l1))\n    copy(s, l1)\n \
    \   sortCommon(s[:len(l1)], l2)\n    return s[:len(l1)]\n}\n\nfunc TestCommon(t\
    \ *testing.T) {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptkywk9ow_test.go:16:5: undefined: sortCommon

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073863
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    sorted := append(append([]int{}, l1, l2), l1...)\n\
    \    sorted = append(sorted, l2...)\n    return sorted[1:]\n}\n\nfunc TestCommon(t\
    \ *testing.T) {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptbo120kr_test.go:14:38: cannot use l1 (variable of type []int) as type
    int in argument to append

    /tmp/tmptbo120kr_test.go:14:42: cannot use l2 (variable of type []int) as type
    int in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073863
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    l := make(map[int]bool, len(l1)+len(l2))\n   \
    \ for _, x := range l1 {\n        l[x] = true\n    }\n    for _, x := range l2\
    \ {\n        if !l[x] {\n            delete(l, x)\n        }\n    }\n    return\
    \ make([]int, len(l))\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmptg1z0fs__test.go:42: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmptg1z0fs__test.go:42:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmptg1z0fs__test.go:42:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestCommon/test_num__3 (0.00s)\n        tmptg1z0fs__test.go:42:\
    \ expected '[]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073863
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    c := make([]int, 0)\n\n    for _, v1 := range\
    \ l1 {\n        for _, v2 := range l2 {\n            if v1 == v2 {\n         \
    \       c = append(c, v1)\n            }\n        }\n    }\n    return c\n}\n\n\
    func TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpcc3mqsev_test.go:42: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=653) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpcc3mqsev_test.go:42: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmpcc3mqsev_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073863
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0, len(l1)+len(l2)-1)\n\
    \    j := 0\n    for i := 0; i < len(l1); i++ {\n        for ; j < len(l2); j++\
    \ {\n            if l1[i] == l2[j] {\n                result++\n             \
    \   break\n            }\n        }\n    }\n    return result\n}\n\nfunc TestCommon(t\
    \ *testing.T) {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3i04u3v6_test.go:19:17: invalid operation: result++ (non-numeric type
    []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073863
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    c := make(map[int]bool)\n    result := make([]int,\
    \ 0)\n\n    for _, v := range l1 {\n        if !c[v] {\n            c[v] = true\n\
    \            result = append(result, v)\n        }\n    }\n\n    for _, v := range\
    \ l2 {\n        if !c[v] {\n            c[v] = true\n            result = append(result,\
    \ v)\n        }\n    }\n\n    return result\n}\n`\n\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3bbnqcmh_test.go:33:1: raw string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073862
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    var result []int\n    for _, v1i1 := range l1\
    \ {\n        for _, v2i2 := range l2 {\n            if v1 == v2i2 {\n        \
    \        result = append(result, v1i1)\n            }\n        }\n    }\n    return\
    \ uniqueSort(result)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnpbwtei1_test.go:17:16: undefined: v1

    /tmp/tmpnpbwtei1_test.go:22:12: undefined: uniqueSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073863
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    s := make([]int, len(l1))\n    m := make(map[int]bool,\
    \ len(l1))\n    for i := range l1 {\n        m[l1[i]] = true\n    }\n    for i\
    \ := range l2 {\n        if _, ok := m[l2[i]]; !ok {\n            s[len(s)-1]\
    \ = l2[i]\n            s = s[:len(s)-1]\n        }\n    }\n    return s\n}\n</code>\n\
    <|/ a tags=go |>\n<| a tags=go |>\nI made a variation on Alex Ott's answer, which\
    \ I called uniqueCommon:\n<code>\nfunc TestCommon(t *testing.T) {\n  candidate\
    \ := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpew1ua9b__test.go:27:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073863
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    j := 0\n    l1Len := len(l1)\n    l2Len := len(l2)\n\
    \    common := make([]int, 0, l2Len)\n    for i := 0; i < l1Len; i++ {\n     \
    \   if l1[i] != l2[j] {\n            common = append(common, l1[i])\n        }\n\
    \        j++\n        if j >= l2Len {\n            break\n        }\n    }\n \
    \   return common\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.common(...)\n\t/tmp/tmpas0ruhq6_test.go:19\n\
    command-line-arguments_test.TestCommon(0x0?)\n\t/tmp/tmpas0ruhq6_test.go:40 +0x3b7\n\
    testing.tRunner(0xc0001a01a0, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073864
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    if len(l1) < len(l2) {\n        l1, l2 = l2, l1\n\
    \    }\n    result := make([]int, 0, len(l1))\n    for i, v := range l1 {\n  \
    \      if _, ok := l2[i]; ok {\n            result = append(result, v)\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate\
    \ := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphdk22ss__test.go:19:21: assignment mismatch: 2 variables but 1 value

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073864
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    l1 := append([]int{}, l1...)\n    l2 := append([]int{},\
    \ l2...)\n    sort.Sort(ByIntSlice(l1))\n    sort.Sort(ByIntSlice(l2))\n    m\
    \ := len(l1)\n    n := len(l2)\n    r := make([]int, 0, m)\n\n    for i := 0;\
    \ i < m; i++ {\n        if l1[r[len(r)-1]] < l2[r[len(r)-1]] {\n            r\
    \ := append(r, l1[len(r)-1])\n        } else {\n            r := append(r, l2[len(r)-1])\n\
    \        }\n    }\n    return r\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate\
    \ := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8ci8f6j__test.go:14:8: no new variables on left side of :=

    /tmp/tmp8ci8f6j__test.go:15:8: no new variables on left side of :=

    /tmp/tmp8ci8f6j__test.go:16:5: undefined: sort

    /tmp/tmp8ci8f6j__test.go:16:15: undefined: ByIntSlice

    /tmp/tmp8ci8f6j__test.go:17:5: undefined: sort

    /tmp/tmp8ci8f6j__test.go:17:15: undefined: ByIntSlice

    /tmp/tmp8ci8f6j__test.go:19:5: n declared but not used

    /tmp/tmp8ci8f6j__test.go:24:13: r declared but not used

    /tmp/tmp8ci8f6j__test.go:26:13: r declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073864
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    set := make(map[int]bool)\n    result := make([]int,\
    \ 0, len(l1))\n    for _, v := range l1 {\n        if !set[v] {\n            result\
    \ = append(result, v)\n            set[v] = true\n        }\n    }\n    for _,\
    \ v := range l2 {\n        if !set[v] {\n            result = append(result, v)\n\
    \            set[v] = true\n        }\n    }\n    return sort(result)\n}\n\nfunc\
    \ TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653,\
    \ 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5, 3, 2,\
    \ 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp21cbkio_test.go:28:12: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073864
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0, len(l1))\n    seen :=\
    \ make(map[int]\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5,\
    \ 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpehj6s5jj_test.go:15:26: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073863
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    s := make([]int, 0)\n    for _, i := range l1\
    \ {\n        for _, j := range l2 {\n            if i == j {\n               \
    \ s = append(s, i)\n                break\n            }\n        }\n    }\n \
    \   return s\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpexk5ctq0_test.go:42: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=653) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpexk5ctq0_test.go:42: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmpexk5ctq0_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073865
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    // Sort to make sure order is preserved.\n   \
    \ sort.Ints(l1)\n    sort.Ints(l2)\n    result := make([]int, 0)\n    for i, j\
    \ := range l1 {\n        if i == j {\n            continue\n        }\n      \
    \  found := false\n        for k, l := range l2 {\n            if i == k {\n \
    \               continue\n            }\n            if l1 == l2 {\n         \
    \       continue\n            }\n            if l == j {\n                found\
    \ = true\n                break\n            }\n        }\n        if !found {\n\
    \            result = append(result, j)\n        }\n    }\n    return result\n\
    }\n</code>\nThe code has been tested with Go 1.6.\n<|/ a dscore=2 |>\n<| a dscore=2\
    \ |>\nThe fastest way is to sort both arrays and then simply iterate until you\
    \ find a match.\n<code>\npackage main\n\nimport (\n    \"fmt\"\n    \"sort\"\n\
    )\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvde3gk_p_test.go:41:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073863
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    c := make([]int, 0, len(l1))\n    for _, i :=\
    \ range l1 {\n        for _, j := range l2 {\n            if i == j {\n      \
    \          c++\n            }\n        }\n    }\n    return c[:len(c)/2]\n}\n\n\
    func TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsokjz2lx_test.go:18:17: invalid operation: c++ (non-numeric type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073864
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    m := make(map[int]int)\n    for i, _ := range\
    \ l1 {\n        m[l1[i]]++\n    }\n    for i := range l2 {\n        if _, ok :=\
    \ m[l2[i]]; ok {\n            l1 = append(l1, l2[i])\n            m[l2[i]]++\n\
    \        }\n    }\n    return l1[:len(l1)-1]\n}\n\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpqwe40ewy_test.go:43: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=5) %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpqwe40ewy_test.go:43: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmpqwe40ewy_test.go:43: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=2)]'\n\
    \    --- FAIL: TestCommon/test_num__3 (0.00s)\n        tmpqwe40ewy_test.go:43:\
    \ expected '[]', got '[%!s(int=4) %!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073865
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    m := make(map[int]\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpx8lim1ng_test.go:14:23: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073857
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0, len(l1))\n    for _,\
    \ v := range l1 {\n        if containsAny(result, l2, v) {\n            result\
    \ = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestCommon(t\
    \ *testing.T) {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1lb_sw7q_test.go:16:12: undefined: containsAny

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073864
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    i := 0\n    j := 0\n    c := make(map[int]bool)\n\
    \    for ; i < len(l1) && (j < len(l2)); i++ {\n        if l1[i] != l2[j] {\n\
    \            c[l1[i]] = true\n        }\n        if i == len(l1) && j == len(l2)\
    \ {\n            return l1[:i+1]\n        }\n        if c[l1[i]] {\n         \
    \   if j == len(l2) {\n                return l1[:i+1]\n            }\n      \
    \      j = j + 1\n        }\n    }\n    return l1[:i]\n}\n\nfunc TestCommon(t\
    \ *testing.T) {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpz0iiqebe_test.go:50: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)]'\n\
    \    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmpz0iiqebe_test.go:50:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5) %!s(int=3)]'\n    --- FAIL:\
    \ TestCommon/test_num__2 (0.00s)\n        tmpz0iiqebe_test.go:50: expected '[%!s(int=2)\
    \ %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073865
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    var sorted, j int\n    sorted = make([]int, len(l1))\n\
    \    for i = 0; i < len(l1); i++ {\n        sorted = append(sorted, l1[i])\n \
    \   }\n    for i = 0; i < len(l2); i++ {\n        sorted = append(sorted, l2[i])\n\
    \    }\n    for i = 0; i < len(l1); i++ {\n        sorted = append(sorted, l1[i])\n\
    \    }\n    for i = 0; i < len(l2); i++ {\n        sorted = append(sorted, l2[i])\n\
    \    }\n    for i = 0; i < len(l1); i++ {\n        if sorted[i] < sorted[j] {\n\
    \            sorted = append(sorted, l1[i])\n        } else {\n            sorted\
    \ = append(sorted, l2[i])\n        }\n    }\n    return sorted\n}\n</code>\n<|/\
    \ a dscore=1 tags=sorting,algorithm,merge,go |>\n<| a dscore=0 |>\nI didn't try\
    \ this in Go, but the idea should be clear:\n\nFind a way to partition the first\
    \ array (by some criteria, let's assume that all elements of the first array are\
    \ unique).\nFind the smallest element in the second array and remove it. If there\
    \ were no such element, then you have found the intersection of 2 sorted arrays.\n\
    Continue from 2.\n<|/ a tags=sorting,algorithm,merge,go |>\n<| a |>\nThe fastest\
    \ solution would be using std::set_intersection. \n<code>\n#include <set>\n#include\
    \ <algorithm>\n\ntemplate<typename T>\nstd::set<T> findIntersection(std::set<T>&\
    \ s1, std::set<T>& s2) {\n    std::set<T> result;\n    std::set_intersection(s1.begin(),\
    \ s1.end(), s2.begin(), s2.end(), std::inserter(result, result.end()));\n    return\
    \ result;\n}\n</code>\nHere's a benchmark: https://godbolt.org/z/g3sTzU\n<|/ a\
    \ dscore=0 tags=sorting,algorithm,merge,go |>\n<| a |>\n<code>\npackage main\n\
    \nimport (\n    \"bufio\"\n    \"fmt\"\n    \"strings\"\n    \"time\"\n)\n\nfunc\
    \ TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653,\
    \ 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5, 3, 2,\
    \ 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps625ful3_test.go:37:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073864
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    if len(l1) < len(l2) {\n        return nil\n \
    \   }\n    var result []int\n    j := 0\n    k := 0\n    for i := 0; i < len(l1);\
    \ i++ {\n        if l1[i] != l2[j] {\n            k = j\n        }\n        result\
    \ = append(result, l1[i])\n        if i == len(l2)-1 || l1[i] != l2[k] {\n   \
    \         j++\n        }\n    }\n    return append(result, l2[j])\n}\n\nfunc TestCommon(t\
    \ *testing.T) {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\npanic: runtime error: index out of range\
    \ [7] with length 7 [recovered]\n\tpanic: runtime error: index out of range [7]\
    \ with length 7\n\ngoroutine 34 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc00016a000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc00016a000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.common(...)\n\t/tmp/tmpb0qhis67_test.go:29\n\
    command-line-arguments_test.TestCommon(0x0?)\n\t/tmp/tmpb0qhis67_test.go:39 +0x64c\n\
    testing.tRunner(0xc000103380, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073865
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    m := make(map[int]\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpx8lim1ng_test.go:14:23: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073857
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    var l []int\n    if len(l1) != len(l2) {\n   \
    \     return nil\n    }\n    var result []int\n    for _, item1 := range l1 {\n\
    \        var found bool\n        for _, item2 := range l2 {\n            if item1\
    \ == item2 {\n                found = true\n                break\n          \
    \  }\n        }\n        if !found {\n            result = append(result, item1)\n\
    \        }\n    }\n    return append(result, l2...)\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\nThis was pretty much the only answer that helped me solve a very\
    \ similar problem.  Thank you!\n<|/ c |>\n<| a tags=go |>\nThis is my solution,\
    \ I hope it's clear to you.\n<code>\npackage main\n\nimport (\n    \"fmt\"\n \
    \   \"strings\"\n)\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpel9fjhzm_test.go:33:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073864
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    // sort the lists first\n    sortLists(l1)\n \
    \   sortLists(l2)\n    // iterate through the lists and compare each one\n   \
    \ for i, j := range l1 {\n        if j < l2[j] {\n            i := l2[j]\n   \
    \         l2[j] = i\n        }\n    }\n    // return the unique sorted common\
    \ elements\n    return l2[:len(l1)-1]\n}\n\nfunc TestCommon(t *testing.T) {\n\
    \  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4,\
    \ 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653}\
    \ },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2,\
    \ 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected:\
    \ []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdet1xzj1_test.go:15:5: undefined: sortLists

    /tmp/tmpdet1xzj1_test.go:16:5: undefined: sortLists

    /tmp/tmpdet1xzj1_test.go:18:9: i declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073865
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    c := make([]int, len(l1))\n    for i := range\
    \ c {\n        c[i] = 0\n    }\n\n    j := 0\n    for i := range l1 {\n      \
    \  c[j++] = l1[i]\n    }\n\n    for i := range l2 {\n        if c[j] == l2[i]\
    \ {\n            c[j]++\n        } else {\n            j = -1\n        }\n   \
    \ }\n\n    return c[len(c):]\n}\n`\n\nfunc TestCommon(t *testing.T) {\n  candidate\
    \ := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvb01fhrs_test.go:21:12: expected '']'', found ''++''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073864
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    s := make(map[int]\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpjl4xmrk3_test.go:14:23: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073864
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    m := map[int]int{}\n    result := []int{}\n  \
    \  for _, v := range l1 {\n        m[v]++\n    }\n    for _, v := range l2 {\n\
    \        if _, ok := m[v]; ok {\n            m[v]++\n        } else {\n      \
    \      result = append(result, v)\n        }\n    }\n    for k, v := range m {\n\
    \        if v == 0 {\n            result = append(result, k)\n        }\n    }\n\
    \    return result.sort()\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate :=\
    \ common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqrb96w6r_test.go:31:19: result.sort undefined (type []int has no field
    or method sort)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073865
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    len := len(l1)\n    i, j := 0, 1\n    result :=\
    \ make([]int, 0, len)\n    for i < len && j < len {\n        if l1[i] == l2[j]\
    \ {\n            result = append(result, l1[i])\n            i++\n           \
    \ j++\n        } else if l1[i] > l2[j] {\n            i++\n        } else {\n\
    \            j++\n        }\n    }\n    return result\n}\n</code>\n<|/ a tags=go,sorting,arrays,algorithm\
    \ dscore=0 |>\n<| a |>\nWe can do it in O(NlogN) by first sorting the array and\
    \ then applying merge sort on it to find the unique elements between two arrays.\n\
    <code>\npackage main\n\nimport \"fmt\"\n\nfunc TestCommon(t *testing.T) {\n  candidate\
    \ := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpjkcxfb46_test.go:30:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073865
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    c := make(map[int]\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5rb44q1n_test.go:14:23: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073865
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0)\n    sort.Sort(sort.IntSlice(l1))\n\
    \    sort.Sort(sort.IntSlice(l2))\n    for _, a1 := range l1 {\n        ok = false\n\
    \        for _, a2 := range l2 {\n            if a1 == a2 {\n                ok\
    \ = true\n                break\n            }\n        }\n        if !ok {\n\
    \            result = append(result, a1)\n        }\n    }\n    return result\n\
    }\n</code>\n<|/ a |>\n<| c |>\nI like the short and sweet solution but I think\
    \ there is a bug. Try running with \n`common([]int{5, 3, 2, 8}, []int{3, 2})`.\n\
    \nIt should return `[2, 3]` but it returns `[5, 3, 2]`. Because it skips the `5`\
    \ from the second list, it thinks that both lists are equal.\n<|/ c |>\n<| a dscore=3\
    \ tags=go |>\nA variation of the answer provided by Aidu:\n<code>\nfunc TestCommon(t\
    \ *testing.T) {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpb4p_s7q0_test.go:31:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073865
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    var i int\n    var j int\n    var common []int\n\
    \    for i = len(l1) - 1; i >= 0; i-- {\n        for j = len(l2) - 1; j >= 0;\
    \ j-- {\n            if (l1[i] == l2[j]) {\n                break\n          \
    \  }\n        }\n        if j == 0 {\n            common = append(common, l1[i])\n\
    \        }\n    }\n    return common\n}\n\nfunc TestCommon(t *testing.T) {\n \
    \ candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4,\
    \ 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653}\
    \ },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2,\
    \ 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected:\
    \ []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpoqokte_w_test.go:46: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmpoqokte_w_test.go:46:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=3)]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmpoqokte_w_test.go:46: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073866
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    out := make([]int, 0)\n    j := 0\n    for i <\
    \ len(l1) {\n        if j < len(l2) {\n            if l1[i] == l2[j] {\n     \
    \           out = append(out, l1[i])\n                j++\n            } else\
    \ {\n                j++\n            }\n        } else {\n            break\n\
    \        }\n    }\n    return out\n}\n</code>\n<|/ a dscore=5 |>\n<| a dscore=4\
    \ tags=go |>\nI wrote this little util function just for this purpose:\n<code>\n\
    func TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvre4i1iz_test.go:30:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073865
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    m := make(map[int]bool, len(l1))\n    var l3 []int\n\
    \    for _, v := range l1 {\n        m[v] = true\n    }\n    for _, v := range\
    \ l2 {\n        if _, ok := m[v]; !ok {\n            l3 = append(l3, v)\n    \
    \    }\n        m[v] = true\n    }\n    return l3\n}\n</code>\n<|/ a dscore=5\
    \ |>\n<| c |>\nYou have a lot of memory allocation here. Why?\n<|/ c |>\n<| c\
    \ |>\nTo store those numbers in memory. Since there are only a couple of numbers\
    \ in the set and they are already sorted, a map would work just fine.\n<|/ c |>\n\
    <| c |>\nYes, I see, but if you have more numbers in your list then map would\
    \ be better than array. Or maybe not. But map would be more memory efficient.\n\
    <|/ c |>\n<| c |>\nThe array is not sorted. The code above would not work, for\
    \ example, on {5,3,2,8,5,7,1,5,9}\n<|/ c |>\n<| c |>\nTo make it work as it should.\
    \ I think your answer deserves more upvotes.\n<|/ c |>\n<| a |>\nAs the set is\
    \ sorted, you can use two pointers, one to iterate over the first list, and one\
    \ to iterate over the second list.\nIn each iteration, if the current element\
    \ of the first list isn't in the second list, add it. If it is in the second list,\
    \ remove the current element from the second list.\nWhen you finish the loops,\
    \ either pointer will be at the end of the list. Go to that pointer and add an\
    \ element from the first list to the set, then remove that element from the first\
    \ list.\n<|/ a dscore=4 tags=go,algorithm |>\n<| a tags=go,algorithm dscore=4\
    \ |>\nThe solution from is definitely the most efficient, but since you're using\
    \ Go and most answers use that library already I thought I'd post an answer that\
    \ doesn't depend on that library and that uses the standard library (no extra\
    \ functions). It's a bit more verbose than the original solution but hopefully\
    \ easier to understand and maintain.\n<code>\npackage main\n\nimport \"fmt\"\n\
    \nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1_ptiw8l_test.go:27:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073865
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    s := make([]int, 0)\n    sa := make([]int, len(l2))\n\
    \n    for i := 0; i < len(l1); i++ {\n        sa[i] = i\n    }\n    for i := 0;\
    \ i < len(l2); i++ {\n        for j := 0; j < len(l1); j++ {\n            if l1[j]\
    \ == l2[i] {\n                s = append(s, l1[j])\n                sa[j] = i\n\
    \            }\n        }\n    }\n    return s\n}\n\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\npanic: runtime error: index out of range\
    \ [2] with length 2 [recovered]\n\tpanic: runtime error: index out of range [2]\
    \ with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.common(...)\n\t/tmp/tmpyfvh12lr_test.go:18\n\
    command-line-arguments_test.TestCommon(0x0?)\n\t/tmp/tmpyfvh12lr_test.go:39 +0x4f6\n\
    testing.tRunner(0xc0001924e0, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073866
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0)\n    common := make(map[int]bool)\n\
    \    for _, e := range l1 {\n        if common[e] {\n            continue\n  \
    \      }\n        common[e] = true\n        result = append(result, e)\n    }\n\
    \    for _, e := range l2 {\n        if common[e] {\n            continue\n  \
    \      }\n        common[e] = true\n        result = append(result, e)\n    }\n\
    \    return append(result, l1...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate\
    \ := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpsvexjufl_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34)\
    \ %!s(int=653) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpsvexjufl_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpsvexjufl_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpsvexjufl_test.go:49: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073866
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    var common = make([]int, 0)\n    l := len(l1)\n\
    \    if l < len(l2) {\n        l = len(l2)\n    }\n    for i := 0; i < l; i++\
    \ {\n        common := append(common, l1[i])\n        if i < l {\n           \
    \ common := append(common, l2[i])\n        }\n    }\n    return common\n}\n*/\n\
    var common = func(l1, l2 []int) []int {\n    var common = make([]int, 0)\n   \
    \ l := len(l1)\n    if l < len(l2) {\n        l = len(l2)\n    }\n    for i :=\
    \ 0; i < l; i++ {\n        common := append(common, l1[i])\n        if i < l {\n\
    \            common := append(common, l2[i])\n        }\n    }\n    return common\n\
    }\n\nvar common2 = func(l1 []int, l2 []int) []int {\n    common := make([]int,\
    \ 0)\n    l := len(l1)\n    if l < len(l2) {\n        l = len(l2)\n    }\n   \
    \ for i := 0; i < l; i++ {\n        if l1[i] == l2[i] {\n            common =\
    \ append(common, l1[i])\n        }\n    }\n    return common\n}\n\nfunc TestCommon(t\
    \ *testing.T) {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwqmlkyhn_test.go:27:1: expected declaration, found ''*''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073865
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    arr := make([]int, len(l1))\n    for i := range\
    \ l1 {\n        arr[i] = l1[i]\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(arr)))\n\
    \    for i := range l2 {\n        j := -1\n        for k := 0; k < len(arr); k++\
    \ {\n            if arr[k] == l2[i] {\n                j = k\n               \
    \ break\n            }\n        }\n        if j != -1 {\n            arr[j] =\
    \ l2[i]\n        }\n    }\n    j := 0\n    result := make([]int, 0, len(arr))\n\
    \    for k := range arr {\n        if j != k && arr[k] != arr[j] {\n         \
    \   result = append(result, arr[k])\n        }\n        j++\n    }\n    return\
    \ result\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5,\
    \ 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvqip4zea_test.go:18:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073866
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    var result []int\n    for i := range l1 {\n  \
    \      found = false\n        for j := range l2 {\n            if l1[i] == l2[j]\
    \ {\n                found = true\n                break\n            }\n    \
    \    }\n        if !found {\n            result = append(result, l1[i])\n    \
    \    }\n    }\n    return removeDuplicates(result)\n}\n\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqpprt6or_test.go:16:9: undefined: found

    /tmp/tmpqpprt6or_test.go:19:17: undefined: found

    /tmp/tmpqpprt6or_test.go:23:13: undefined: found

    /tmp/tmpqpprt6or_test.go:27:12: undefined: removeDuplicates

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073866
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0, len(l1))\n    for _,\
    \ el1 := range l1 {\n        for _, el2 := range l2 {\n            if el1 == el2\
    \ {\n                result = append(result, el1)\n                break\n   \
    \         }\n        }\n    }\n    return result\n}\n\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmp1osgti4a_test.go:42: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=653) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmp1osgti4a_test.go:42: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmp1osgti4a_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073867
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    // Initialize result list.\n    var res []int\n\
    \    // If either list is empty, return result list.\n    if len(l1) > 0 && len(l2)\
    \ > 0 {\n        // Initialize a map to record the first element of each list.\n\
    \        // If an element of l1 is not in the map, then it is the first element\
    \ in l1.\n        // If an element of l2 is not in the map, then it is the first\
    \ element in l2.\n        var m map[int]bool\n        // Initialize a variable\
    \ \"i\" to count the number of elements in l1 and l2.\n        var i int\n   \
    \     // Iterate through l1 and l2 and append the common elements to the result.\n\
    \        for k, v := range l1 {\n            m[v] = true\n            i++\n  \
    \      }\n        for k, v := range l2 {\n            if _, ok := m[v]; ok {\n\
    \                i++ // A common element has been found, so increment the count.\n\
    \            } else {\n                m[v] = true\n                res = append(res,\
    \ v)\n            }\n        }\n        // Add the remaining elements from l1.\n\
    \        for _, v := range l1 {\n            m[v] = true\n            i++\n  \
    \      }\n    }\n    // Return the result.\n    return res\n}\n\nfunc TestCommon(t\
    \ *testing.T) {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd5oz2_ej_test.go:25:13: k declared but not used

    /tmp/tmpd5oz2_ej_test.go:29:13: k declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073866
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0)\n    result := append(result,\
    \ l1...)\n    result := append(result, l2...)\n\n    sort.Sort(result)\n    return\
    \ result \n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5,\
    \ 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp245adbvl_test.go:15:12: no new variables on left side of :=

    /tmp/tmp245adbvl_test.go:16:12: no new variables on left side of :=

    /tmp/tmp245adbvl_test.go:18:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073866
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0, len(l1))\n    seen :=\
    \ make(map[int]bool)\n\n    for _, v := range l1 {\n        if seen[v] {\n   \
    \         continue\n        }\n        for _, v2 := range l2 {\n            if\
    \ seen[v2] {\n                continue\n            }\n            if v == v2\
    \ {\n                seen[v] = true\n                result = append(result, v)\n\
    \                break\n            }\n        }\n    }\n\n    return result\n\
    }\n</code>\n<|/ a tags=algorithm |>\n<| a tags=algorithm |>\nThis solution works\
    \ fine with all the test cases.\n<code>\ndef common_elements(a, b):\n    a_list\
    \ = list(a)\n    b_list = list(b)\n    \n    a_set = set(a_list)\n    b_set =\
    \ set(b_list)\n    \n    common_list = list(a_set.intersection(b_set))\n    \n\
    \    return common_list\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 tags=algorithm\
    \ |>\nThis problem can be solved using python library collections. We have to\
    \ first convert the list into set and then get the intersection between this sets.\n\
    <code>\ndef common(list1, list2):\n    list1 = set(list1)\n    list2 = set(list2)\n\
    \    common = list1 & list2\n    print(common)\n    return common\n</code>\n<|/\
    \ a |>\n<| a tags=algorithm |>\nPython solution using the intersection method:\n\
    <code>\ndef common(list1, list2):\n    list1, list2 = list(list1), list(list2)\n\
    \    list1_set = set(list1)\n    list2_set = set(list2)\n    common_elements =\
    \ set(list1_set.intersection(list2_set))\n    return common_elements\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nYou can improve this answer by explaining how this\
    \ works. Also, your second line can be replaced with `list1_set = set(list1)`,\
    \ which would have made this answer more useful.\n<|/ c |>\n<| a tags=algorithm\
    \ |>\n<code>\ndef common_elements(arr1, arr2):\n    \n    list1 = list(arr1)\n\
    \    list2 = list(arr2)\n    \n    list1_set = set(list1)\n    list2_set = set(list2)\n\
    \    \n    common_list = list1_set.intersection(list2_set)\n    \n    return common_list\n\
    </code>\n<|/ a dscore=0 |>\n<| a tags=algorithm |>\n<code>\ndef common(arr1, arr2):\n\
    \    list1 = list(arr1)\n    list2 = list(arr2)\n    \n    list1_set = set(list1)\n\
    \    list2_set = set(list\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpll4g5ned_test.go:35:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073866
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    c := make([]int, len(l1))\n    j := 0\n    for\
    \ i, a := range l1 {\n        for _, b := range l2 {\n            if a == b {\n\
    \                c[j] = a\n                j++\n            }\n        }\n   \
    \ }\n    return c[0:j]\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy9u52u33_test.go:16:9: i declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073866
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0, len(l1)+len(l2))\n  \
    \  j := 0\n    i := 0\n    for i < len(l1) && j < len(l2) {\n        if l1[i]\
    \ == l2[j] {\n            result = (append(result, l1[i])...)\n            i +=\
    \ 1\n            j += 1\n        } else if l1[i] < l2[j] {\n            j += 1\n\
    \        } else {\n            i += 1\n        }\n    }\n    if i == len(l1) {\n\
    \        return (append(result, l2[j])...)\n    }\n    if j == len(l2) {\n   \
    \     return (append(result, l1[i])...)\n    }\n    return result\n}\n</code>\n\
    <|/ a |>\n<| a |>\nAnother approach (inspired by Jason Dillon's answer) is to\
    \ compare each element of lists separately and take the smallest or biggest one:\n\
    <code>\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpuq2un4v2_test.go:19:44: expected '')'', found ''...''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073866
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    // sort l1 as lexicographically.\n    sort.Ints(l1)\n\
    \    // sort l2 as lexicographically.\n    sort.Ints(l2)\n    result := make([]int,\
    \ len(l1))\n    for i := 0; i < len(result); i++ {\n        // Check if l1[i -\
    \ 1] <= l2[i] and if so, append l2[i] to result.\n        if l1[i - 1] <= l2[i]\
    \ {\n            result[i] = l2[i]\n        }\n    }\n    return result\n}\n\n\
    func TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp80_u_30m_test.go:15:5: undefined: sort

    /tmp/tmp80_u_30m_test.go:17:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073867
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0)\n    for _, x := range\
    \ l1 {\n        if _, _, found := commonFinder(result, x, l2, false); !found {\n\
    \            result = append(result, x)\n        }\n    }\n    return result\n\
    }\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqpuw6k3e_test.go:16:27: undefined: commonFinder

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073867
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    c := make([]int, len(l1)) // init with unique\
    \ common elements\n    for i := 0; i < len(c1); i++ {\n        if l1[i] == l2[i]\
    \ {\n            c[i] = l1[i]\n        } else {\n            for j := 0; j < len(l2);\
    \ j++ {\n                if l1[i] != l2[j] {\n                    break\n    \
    \            }\n                if l1[i] == l2[j] {\n                    c[i]\
    \ = l1[i]\n                    break\n                }\n            }\n     \
    \   }\n    }\n    return c\n}\n</code>\n<|/ a tags=go |>\n<| c |>\nI find this\
    \ to be the best answer, but the solution is unnecessarily complicated. Just a\
    \ variation of Louis' answer is sufficient and should be much more efficient.\n\
    <|/ c |>\n<| c |>\nI agree, but as I stated it depends on the scenario. I personally\
    \ would have preferred this answer, and would have upvoted it. But the problem\
    \ with this approach is that it relies on the order of the items in the lists,\
    \ which is not necessarily true. Louis answer is a more general solution, that's\
    \ why I added the other answer.\n<|/ c |>\n<| c |>\nI don't mean to be a dick\
    \ but if you look over the answers you'll see that none of them are completely\
    \ wrong. Your answer is the best in most cases, and I appreciate the effort you\
    \ put into this answer. But, since I'm the only one to upvote this answer, I can't\
    \ mark it as accepted.\n<|/ c |>\n<| c |>\nI see, I guess that's why I wrote it\
    \ down in my answer :) I do agree with you that it is a valid answer, and it's\
    \ nice to see a lot of people like you who are trying to help people out :)\n\
    <|/ c |>\n<| c |>\nI realized that the function you wrote here would be quite\
    \ slow if either of the two lists has more than a hundred or so items in it. It's\
    \ O(n^2) because it makes a new array for every common element. Also, you didn't\
    \ mention that in your answer. My solution would be O(n*m), where n and m are\
    \ the lengths of the lists. This is O(n*m) because the outer loop is always O(n),\
    \ and the inner loop is O(m) because of the second if statement, which makes the\
    \ algorithm O(n+m).\n<|/ c |>\n<| a |>\nI believe this is the fastest way in go:\n\
    <code>\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6lrb6oq5_test.go:32:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073866
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    var result []int\n    for _, x := range l1 {\n\
    \        if in(x, l2) {\n            result = append(result, x)\n        }\n \
    \   }\n    for _, x := range l2 {\n        if in(x, result) {\n            result\
    \ = append(result, x)\n        }\n    }\n    return append(result, l1...)\n}\n\
    \nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5brm08al_test.go:16:12: undefined: in

    /tmp/tmp5brm08al_test.go:21:12: undefined: in

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073867
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0)\n    sort.Sort(sortableSliceInt64Slice(l1))\n\
    \    sort.Sort(sortableSliceInt64Slice(l2))\n\n    for _, i := range l1 {\n  \
    \      j := sort.Search(len(l2), func(idx int) bool { return l2[idx] >= i })\n\
    \        if j == len(l2) {\n            result = append(result, i)\n        }\
    \ else if l2[j] == i {\n            result = append(result, l2[j])\n        }\n\
    \    }\n\n    return result\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate\
    \ := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvx07y45o_test.go:15:5: undefined: sort

    /tmp/tmpvx07y45o_test.go:15:15: undefined: sortableSliceInt64Slice

    /tmp/tmpvx07y45o_test.go:16:5: undefined: sort

    /tmp/tmpvx07y45o_test.go:16:15: undefined: sortableSliceInt64Slice

    /tmp/tmpvx07y45o_test.go:19:14: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073867
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    if len(l1) != len(l2) {\n        return []int{}\n\
    \    }\n\n    len := len(l1)\n    result := make([]int, 0, len)\n    for i :=\
    \ 0; i < len; i++ {\n        if l1[i] == l2[i] {\n            result = append(result,\
    \ l1[i])\n        }\n    }\n\n    sort.Ints(result)\n\n    return result \n}\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your help, but you did not answer\
    \ my question. I am interested in the case where all elements are the same.\n\
    <|/ c |>\n<| c |>\nYour question was \"How do you do X\" which I answered, and\
    \ you just repeated that your requirement is \"How do you do X with less code?\"\
    . You did not actually answer the question (which is \"What is the minimum number\
    \ of lines of code required in order to implement the common method?\"). Did you\
    \ read the code I provided and follow it closely?\n<|/ c |>\n<| c |>\nIf you have\
    \ a solution with less code, post it! I am really interested to see your solution!\
    \ Thanks again!\n<|/ c |>\n<| c |>\nOk, I updated my answer with the code you\
    \ provided. Hope it helps!\n<|/ c |>\n<| c |>\nThe code you provided is very helpful,\
    \ but I did not say that I am interested in the case where all elements are the\
    \ same. I said that I am interested in cases where all elements are different.\
    \ Sorry that I did not make that clear.\n<|/ c |>\n<| a |>\nThis question was\
    \ asked a while ago, however I had to do the same thing again recently, and I\
    \ thought I'd share my solution:\n<code>\nfunc TestCommon(t *testing.T) {\n  candidate\
    \ := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5zkv9d12_test.go:30:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073866
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    m := make(map[int]bool)\n    for _, a := range\
    \ l1 {\n        m[a] = true\n    }\n    for _, a := range l2 {\n        if _,\
    \ ok := m[a]; ok {\n            continue\n        }\n        m[a] = true\n   \
    \ }\n    return append([]int{}, l1[0 : len(m)]...)\n}\n\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\npanic: runtime error: slice bounds out of\
    \ range [:10] with capacity 7 [recovered]\n\tpanic: runtime error: slice bounds\
    \ out of range [:10] with capacity 7\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513840,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513840, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.common(...)\n\t/tmp/tmp4ltecmpx_test.go:24\n\
    command-line-arguments_test.TestCommon(0xc000192680?)\n\t/tmp/tmp4ltecmpx_test.go:34\
    \ +0xb25\ntesting.tRunner(0xc000192680, 0x529160)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073867
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    var result []int\n\n    for _, elem1 := range\
    \ l1 {\n        if _, ok := l2Idx(elem1, l2); ok {\n            result = append(result,\
    \ elem1)\n        }\n    }\n    for _, elem2 := range l2 {\n        if _, ok :=\
    \ l1Idx(elem2, l1); ok {\n            result = append(result, elem2)\n       \
    \ }\n    }\n\n    return result\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate\
    \ := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqkiism5l_test.go:17:21: undefined: l2Idx

    /tmp/tmpqkiism5l_test.go:22:21: undefined: l1Idx

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073867
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    s := make(map[int]int)\n    for i, v := range\
    \ l1 {\n        if v, exists := s[v]; exists {\n            s[v]++\n        }\
    \ else {\n            s[v] = 1\n        }\n    }\n    for _, v := range l2 {\n\
    \        if v, exists := s[v]; exists {\n            s[v]++\n        } else {\n\
    \            s[v] = 1\n        }\n    }\n    return []int{v for v, count := range\
    \ s}\n}\n</code>\n<|/ a tags=optimization,go,sorting dscore=2 |>\n<| c |>\nYou\
    \ really don't need the count variable.  Just delete that for loop and your count\
    \ variable will be gone completely.\n<|/ c |>\n<| c |>\nThanks for pointing that\
    \ out; I did not realize `range` does not need the count variable.\n<|/ c |>\n\
    <| a dscore=2 |>\nHere's a way to get rid of the sort.Slice() call and still use\
    \ the sort.Stable interface (for improved performance):\n<code>\npackage main\n\
    \nimport (\n    \"container/list\"\n    \"sort\"\n    \"testing\"\n)\n\nfunc TestCommon(t\
    \ *testing.T) {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpn9cwol5g_test.go:29:20: missing '','' in composite literal

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073866
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    list := make([]int, 0, len(l1))\n    for _, elt\
    \ := range l1 {\n        if elt != 0 {\n            list = append(list, elt)\n\
    \        }\n    }\n    for _, elt := range l2 {\n        if elt != 0 {\n     \
    \       list = append(list, elt)\n        }\n    }\n    sort.Sort(ByInt64(list))\n\
    \    return list\n}\n</code>\n<|/ a tags=sorting,go |>\n<| a dscore=2 tags=sorting,go\
    \ |>\nYou can try this one:\n<code>\npackage main\n\nimport \"sort\"\nimport \"\
    time\"\n\ntype Rect \nfunc TestCommon(t *testing.T) {\n  candidate := common\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpzeno3ikc_test.go:28:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073866
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    m := map[int]bool{}\n    for _, i := range l1\
    \ {\n        m[i] = true\n    }\n    for _, i := range l2 {\n        if !m[i]\
    \ {\n            return nil\n        }\n    }\n    return append(l1, l2...)\n\
    }\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpvscuv4kp_test.go:42: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmpvscuv4kp_test.go:42:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=8)\
    \ %!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n    \
    \    tmpvscuv4kp_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got\
    \ '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=2) %!s(int=4)]'\n\
    \    --- FAIL: TestCommon/test_num__3 (0.00s)\n        tmpvscuv4kp_test.go:42:\
    \ expected '[]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073868
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    var unique []int\n    for _, e := range l1 {\n\
    \        if _, ok := l2[e - 1]; ok {\n            unique = append(unique, e)\n\
    \            l2 = append(l2, 0)\n        } else {\n            unique = append(unique,\
    \ 0)\n        }\n    }\n    return unique\n}\n\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0_a_0_s9_test.go:16:21: assignment mismatch: 2 variables but 1 value

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073867
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    if len(l1) < len(l2) {\n        len1 := len(l1)\n\
    \        len2 := len(l2)\n        result := make([]int, 0, len1)\n        for\
    \ i := 0; i < len1; i++ {\n            for j := i + 1; j < len2; j++ {\n     \
    \           if l1[i] == l2[j] {\n                    result = append(result, l1[i])\n\
    \                    result = append(result, l2[j])\n                }\n     \
    \       }\n        }\n        return result\n    }\n    len1 := len(l1)\n    len2\
    \ := len(l2)\n    result := make([]int, 0, len2)\n    for i := 0; i < len2; i++\
    \ {\n        for j := i + 1; j < len1; j++ {\n            if l2[i] == l1[j] {\n\
    \                result = append(result, l1[j])\n                result = append(result,\
    \ l2[i])\n            }\n        }\n    }\n    return result\n}\n\nfunc TestCommon(t\
    \ *testing.T) {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmp8qcvrore_test.go:58: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmp8qcvrore_test.go:58: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=3) %!s(int=2) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmp8qcvrore_test.go:58: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=3) %!s(int=3) %!s(int=2) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073868
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    sort.Ints(l1)\n    sort.Ints(l2)\n    commonSet\
    \ := make([]int, 0, len(l1))\n    commonSet := intersectInts(commonSet, l1)\n\
    \    commonSet = intersectInts(commonSet, l2)\n    commonSet = sortedUniqueInts(commonSet)\n\
    \    return commonSet\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0lu2vfh4_test.go:14:5: undefined: sort

    /tmp/tmp0lu2vfh4_test.go:15:5: undefined: sort

    /tmp/tmp0lu2vfh4_test.go:17:15: no new variables on left side of :=

    /tmp/tmp0lu2vfh4_test.go:17:18: undefined: intersectInts

    /tmp/tmp0lu2vfh4_test.go:18:17: undefined: intersectInts

    /tmp/tmp0lu2vfh4_test.go:19:17: undefined: sortedUniqueInts

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073868
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    m := make(map[int]bool)\n    for i, _ := range\
    \ l1 {\n        m[l1[i]] = true\n    }\n    for i, _ := range l2 {\n        if\
    \ _, ok := m[l2[i]]; !ok {\n            return nil\n        }\n    }\n    return\
    \ make([]int, 0, len(m))\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate :=\
    \ common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpsh75q5an_test.go:42: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmpsh75q5an_test.go:42:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmpsh75q5an_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073868
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    k := 0\n    result := make([]int, 0)\n    for\
    \ _, v := range l1 {\n        if v == l2[k] {\n            copy(result, l1[:k])\n\
    \            result = append(result, v)\n            copy(l1[k:], l2[k+1:][:len(l2[k+1:])-1])\n\
    \        } else {\n            k++\n        }\n    }\n    return result\n}\n</code>\n\
    <|/ a |>\n<| a dscore=1 |>\n<code>\npackage main\n\nimport (\n    \"bufio\"\n\
    \    \"fmt\"\n    \"os\"\n    \"strconv\"\n)\n\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpls9we_bv_test.go:27:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073867
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    c := make([]int, len(l1))\n    for i := range\
    \ l1 {\n        c[i] = l1[i]\n    }\n    sort.Sort(c)\n    c2 := make([]int, len(l2))\n\
    \    for i := range l2 {\n        c2[i] = l2[i]\n    }\n    sort.Sort(c2)\n  \
    \  for i := range c {\n        if c[i] != c2[i] {\n            break\n       \
    \ }\n    }\n    return c[0:i]\n}\n</code>\n<|/ a |>\n<| a dscore=3 |>\nAn alternative\
    \ to John Mahoney's solution which uses the sort package, but without using a\
    \ list to hold the sorted elements, is to sort the lists and then remove duplicates.\n\
    <code>\npackage main\n\nimport (\n    \"fmt\"\n    \"sort\"\n)\n\nfunc TestCommon(t\
    \ *testing.T) {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpoqp34l7q_test.go:31:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073867
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := []int{}\n    for _, a := range l1 {\n\
    \        for _, b := range l2 {\n            if a == b {\n                result\
    \ = append(result, a)\n            }\n        }\n    }\n    return result\n}\n\
    \nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmp2pptdycy_test.go:41: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=653) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmp2pptdycy_test.go:41: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmp2pptdycy_test.go:41: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073868
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    var res []int\n    l := min(len(l1), len(l2))\n\
    \    for i := 0; i < l; i++ {\n        if l1[i] == l2[i] {\n            continue\
    \ // no duplicates\n        }\n        res = append(res, l1[i])\n    }\n    return\
    \ res\n}\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5,\
    \ 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpf436y6km_test.go:15:10: undefined: min

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073868
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    c := make([]int, 0)\n    if len(l1) > len(l2)\
    \ {\n        l1, l2 = l2, l1\n    }\n    for _, b := range l1 {\n        if containsElement(b,\
    \ l2) {\n            c <- b\n        }\n    }\n    return c\n}\n\nfunc TestCommon(t\
    \ *testing.T) {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsv4pn080_test.go:19:12: undefined: containsElement

    /tmp/tmpsv4pn080_test.go:20:13: invalid operation: cannot send to non-channel
    c (variable of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073868
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    return commonFilter(l1, l2, func(item1, item2\
    \ int) bool {\n        return item1 == item2\n    })\n}\n\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_6gyctxv_test.go:14:12: undefined: commonFilter

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073868
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    c := make(map[int]int, len(l1))\n    for _, v\
    \ := range l1 {\n        c[v] = l1[c[v]]\n    }\n    for _, v := range l2 {\n\
    \        c[v] = l2[c[v]]\n    }\n    return sortedUnique(c)\n}\n\nfunc TestCommon(t\
    \ *testing.T) {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpago7ecu7_test.go:21:12: undefined: sortedUnique

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073868
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    s := make([]int, 0)\n    i := 0\n    for ; i <\
    \ len(l1) && i < len(l2); i++ {\n        if l1[i] != l2[i] {\n            s =\
    \ append(s, l1[i])\n        }\n    }\n    return s\n}\n\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpca4elv1z_test.go:40: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)]'\n\
    \    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmpca4elv1z_test.go:40:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5) %!s(int=3)]'\n    --- FAIL:\
    \ TestCommon/test_num__2 (0.00s)\n        tmpca4elv1z_test.go:40: expected '[%!s(int=2)\
    \ %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073868
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    m := map[int]int{}\n    for _, i := range l1 {\n\
    \        m[i] = 1\n    }\n    for _, i := range l2 {\n        m[i] = 1\n    }\n\
    \    s1 := []int{}\n    for k := range m {\n        s1 = append(s1, k)\n    }\n\
    \    return s1\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmph0utmfrp_test.go:44: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5) %!s(int=3)\
    \ %!s(int=7) %!s(int=9) %!s(int=121)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmph0utmfrp_test.go:44: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmph0utmfrp_test.go:44: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmph0utmfrp_test.go:44: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073868
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    m := map[int]int{}\n    for i, v := range l1 {\n\
    \        m[v]++\n    }\n\n    for i := range l2 {\n        if _, ok := m[l2[i]];\
    \ ok {\n            m[l2[i]]--\n            if m[l2[i]] == 0 {\n             \
    \   delete(m,l2[i])\n            }\n        }\n    }\n\n    return make([]int,len(m))\n\
    }\n`\n)\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5,\
    \ 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp8rv0_8gx_test.go:30:1: raw string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073867
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    c := make([]int, 0, len(l1))\n    d := make([]int,\
    \ 0, len(l2))\n    for i, j := range l1 {\n        if l2 != nil && l2 == l1[i+1:]\
    \ {\n            return l1[i:]\n        } else if j != l2[i] {\n            return\
    \ l1[i:]\n        } else {\n            c = append(c, j)\n        }\n    }\n \
    \   for i, j := range l2 {\n        if l1 != nil && l1 == l2[i+1:] {\n       \
    \     return l2[i:]\n        } else if j != l1[i] {\n            return l2[i:]\n\
    \        } else {\n            d = append(d, j)\n        }\n    }\n    return\
    \ c\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5,\
    \ 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl21yfzrp_test.go:17:25: invalid operation: l2 == l1[i + 1:] (slice can
    only be compared to nil)

    /tmp/tmpl21yfzrp_test.go:26:25: invalid operation: l1 == l2[i + 1:] (slice can
    only be compared to nil)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073868
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    return filterCommon(l1, l2)\n}\n\nfunc TestCommon(t\
    \ *testing.T) {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp264qoggk_test.go:14:12: undefined: filterCommon

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073869
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    var res []int\n    cnt := 0\n    for i := 0; i\
    \ < len(l1); i++ {\n        if l1[cnt] == l2[i] {\n            cnt++\n       \
    \ } else {\n            res = append(res, l1[cnt])\n            cnt = 1\n    \
    \    }\n    }\n    for i := 0; i < len(l2); i++ {\n        if l1[cnt] == l2[i]\
    \ {\n            cnt++\n        } else {\n            res = append(res, l2[i])\n\
    \        }\n    }\n    return res\n}\n</code>\n<|/ a tags=sorting,go |>\n<| c\
    \ |>\nThank you for your solution. I am trying it out now. But I am not sure about\
    \ performance of `sort`.\n<|/ c |>\n<| c |>\nThe performance of sort is O(n log\
    \ n), but your solution does it in O(n). Sorting is O(n*log(n)), so your solution\
    \ is O(n log(n) + n) = O(n log(n))\n<|/ c |>\n<| c |>\nThe first one is O(n+n+log(n))\
    \ and the second one is O(n+n+log(n))+O(n) which is O(n+n+log(n))\n<|/ c |>\n\
    <| a dscore=0 |>\nI have come up with solution which can handle any number of\
    \ list provided as parameters. \n<code>\npackage main\n\nimport (\n    \"fmt\"\
    \n    \"sort\"\n)\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpt8n_9ktd_test.go:33:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073868
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    var a []int\n    var j int\n    var k int\n  \
    \  for j, k = 0, len(l1)-1; k < len(l2); j++, k++ {\n        if l1[j] == l2[k]\
    \ {\n            a = append(a, l1[j])\n            l1 = l1[:j+1]\n           \
    \ l2 = l2[:k+1]\n        }\n    }\n    return a\n}\n</code>\n<|/ a tags=go dscore=4\
    \ |>\n<| a dscore=4 |>\nHere's a more efficient solution using slices, no sorting,\
    \ no copying.\n<code>\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpm5b1_brc_test.go:17:46: expected ''{'', found '',''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073868
- exit_code: null
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, len(l1))\n    i := 0\n \
    \   for i < len(l1) && (len(l1) > 0) && i < len(l2) && (len(l2) > 0) {\n     \
    \   if l1[i] == l2[i] {\n            result[i] = l1[i]\n            i++\n    \
    \        l1 = l1[:i]\n            l2 = l2[:i]\n        } else {\n            i\
    \ = 0\n        }\n    }\n    return result\n}\n\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073882
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    var s1 []int\n    for _, i := range l1 {\n   \
    \     if !contains(s2, i) {\n            s1 = append(s1, i)\n        }\n    }\n\
    \    var s2 []int\n    for _, i := range l2 {\n        if !contains(s1, i) {\n\
    \            s2 = append(s2, i)\n        }\n    }\n    return s1\n}\n\nfunc TestCommon(t\
    \ *testing.T) {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3kulyh0__test.go:16:13: undefined: contains

    /tmp/tmp3kulyh0__test.go:16:22: undefined: s2

    /tmp/tmp3kulyh0__test.go:22:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073869
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    var result []int\n    commonlen := 0\n    len\
    \ := len(l1)\n    if len(l1) > len(l2) {\n        len, _ = len(l2), len(l1)\n\
    \    }\n    for i := 0; i < len; i++ {\n        if l1[i] == l2[i] {\n        \
    \    continue\n        }\n        if l1[i] > l2[i] {\n            result[commonlen]\
    \ = l1[i]\n            commonlen++\n            continue\n        }\n        if\
    \ l2[i] > l1[i] {\n            result[commonlen] = l2[i]\n            commonlen++\n\
    \        }\n    }\n    return result[:commonlen]\n}\n\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9p_dw4k__test.go:17:8: invalid operation: cannot call non-function len
    (variable of type int)

    /tmp/tmp9p_dw4k__test.go:18:18: invalid operation: cannot call non-function len
    (variable of type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073869
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    // return l1 intersection l2\n    common := make([]int,\
    \ 0)\n    for _, l := range l1 {\n        if contains(l2, l) {\n            common\
    \ = append(common, l)\n        }\n    }\n    return common\n}\n\nfunc TestCommon(t\
    \ *testing.T) {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk3xttv4__test.go:17:12: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073869
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    m := map[int]bool{}\n    for _, v := range l1\
    \ {\n        m[v] = true\n    }\n    for _, v := range l2 {\n        if _, ok\
    \ := m[v]; ok {\n            return append([]int{}, v)\n        }\n        m[v]\
    \ = true\n    }\n    return l1\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate\
    \ := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmp1h0oxtij_test.go:43: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmp1h0oxtij_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=3)]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmp1h0oxtij_test.go:43: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=3)]'\n    --- FAIL: TestCommon/test_num__3 (0.00s)\n        tmp1h0oxtij_test.go:43:\
    \ expected '[]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073870
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    var common []int\n    seen := map[int]bool{}\n\
    \    for i, j := 0, 0; i < len(l1); i++ {\n        if seen[l1[i]] {\n        \
    \    break\n        }\n        for ; j < len(l2); j++ {\n            if l1[i]\
    \ == l2[j] {\n                common = append(common, l1[i])\n               \
    \ seen[l1[i]] = true\n                break\n            }\n        }\n    }\n\
    \    return common\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmp5g9z0mfa_test.go:47: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmp5g9z0mfa_test.go:47:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmp5g9z0mfa_test.go:47: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073870
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    m := make(map[int]int)\n    m <- len(l2)\n   \
    \ for _, v := range l2 {\n        m[v] = 1\n    }\n    for _, v := range l1 {\n\
    \        if _, ok := m[v]; !ok {\n            return nil\n        }\n        m[v]--\n\
    \    }\n    return []int{}\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate\
    \ := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpm4l6x0dc_test.go:15:5: invalid operation: cannot send to non-channel m
    (variable of type map[int]int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073869
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    if l1 == nil || l2 == nil {\n        return []int{}\n\
    \    }\n    if len(l1) != len(l2) {\n        return []int{}\n    }\n    result\
    \ := make([]int, 0)\n    for _, elem1 := range l1 {\n        if elem1 == elem2\
    \ {\n            continue\n        }\n        for _, elem2 := range l2 {\n   \
    \         if elem1 == elem2 {\n                continue\n            }\n     \
    \       if elem1 < elem2 {\n                continue\n            }\n        \
    \    result = append(result, elem1)\n            break\n        }\n    }\n   \
    \ return result\n}\n</code>\n<|/ a dscore=3 |>\n<| a tags=go,intersection,slice\
    \ dscore=3 |>\nFor anyone who is looking for some benchmarks, I found a benchmark\
    \ which showed a significant speedup for me for large lists, where I was finding\
    \ a single element in each list for a few million times (I needed to do this for\
    \ multiple lists and was only doing this for one list, so I didn't need to do\
    \ more than 1 million iterations). I was using benchmark/testing from the go testing\
    \ package.\nHere is a benchmark I wrote:\n<code>\npackage common\n\nimport (\n\
    \    \"testing\"\n    \"sort\"\n)\n\nfunc TestCommon(t *testing.T) {\n  candidate\
    \ := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp4lan_qla_test.go:38:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073869
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    var s []int\n    sort.Ints(l1)\n    sort.Ints(l2)\n\
    \    for i := 0; i < len(l1); i++ {\n        for j := 0; j < len(l2); j++ {\n\
    \            if l1[i] == l2[j] {\n                s = append(s, l1[i])\n     \
    \           break\n            }\n        }\n    }\n    return s\n}\n\nfunc TestCommon(t\
    \ *testing.T) {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmploavl77i_test.go:15:5: undefined: sort

    /tmp/tmploavl77i_test.go:16:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073870
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    m := map[int]int{}\n    for i, v := range l1 {\n\
    \        m[v]++\n    }\n    for i, v := range l2 {\n        if _, ok := m[v];\
    \ !ok {\n            return nil\n        }\n        m[v]--\n    }\n    var list\
    \ []int\n    for _, v := range m {\n        list = append(list, v)\n    }\n  \
    \  sort.Ints(list)\n    return list\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate\
    \ := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7jsk2yiy_test.go:15:9: i declared but not used

    /tmp/tmp7jsk2yiy_test.go:18:9: i declared but not used

    /tmp/tmp7jsk2yiy_test.go:28:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073870
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    if len(l1) != len(l2) {\n        return nil\n\
    \    }\n    s := make(map[int]bool, len(l1))\n    i := 0\n    for i = 0; l1 !=\
    \ nil && l2 != nil; i++ {\n        if s[i] == false {\n            s[i] = true\n\
    \            l1[i] = l2[i]\n        } else if s[i] == true {\n            l1[i]\
    \ = l2[i]\n        }\n    }\n    return l1\n}\n\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\npanic: runtime error: index out of range\
    \ [7] with length 7 [recovered]\n\tpanic: runtime error: index out of range [7]\
    \ with length 7\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513900,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513900, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.common(...)\n\t/tmp/tmpymtdnbiq_test.go:22\n\
    command-line-arguments_test.TestCommon(0x0?)\n\t/tmp/tmpymtdnbiq_test.go:37 +0x5b9\n\
    testing.tRunner(0xc0001a0340, 0x529220)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073870
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    c := make([]int, 0)\n\n    for _, v := range l1\
    \ {\n        for _, v2 := range l2 {\n            if v == v2 {\n             \
    \   c = append(c, v)\n                continue // inner loop\n            }\n\
    \        }\n    }\n\n    return c\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate\
    \ := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpmg3splru_test.go:44: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=653) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpmg3splru_test.go:44: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmpmg3splru_test.go:44: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073870
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    var i1, i2 int\n    var l3, l4 []int\n    for\
    \ {\n        i1 = l1[i1]\n        i2 = l2[i2]\n        if i1 == i2 {\n       \
    \     l3, l4 = append(l3, i1), append(l4, i2)\n            if i1 == len(l1)-1\
    \ {\n                break\n            }\n            i1++\n            i2++\n\
    \        } else {\n            break\n        }\n    }\n    return append(l1,\
    \ l4)\n}\n</code>\n<|/ a tags=sorting,algorithm,arrays,go |>\n<| a dscore=0 tags=sorting,algorithm,arrays,go\
    \ |>\n<code>\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5,\
    \ 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpdg7h16df_test.go:32:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073869
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    m := map[int]int{}\n    for _, v := range l2 {\n\
    \        m[v]++\n    }\n    for _, v := range l1 {\n        if _, ok := m[v];\
    \ !ok {\n            return nil\n        }\n        m[v]--\n    }\n    for v :=\
    \ range m {\n        // This code is not tested.\n        return append([]int{v},\
    \ m[v:]...)\n    }\n    return nil\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate\
    \ := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp63qmx72s_test.go:26:33: invalid operation: cannot slice m (variable of
    type map[int]int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073870
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    var res []int\n    size := min(len(l1), len(l2))\n\
    \n    j := 0\n    for i := 0; i < size; i++ {\n        if l1[i] == l2[j] {\n \
    \           j += 1\n            continue\n        }\n\n        if j < size &&\
    \ l1[i] < l2[j] {\n            res = append(res, l1[i])\n            i++\n   \
    \     } else {\n            res = append(res, l2[j])\n            j++\n      \
    \  }\n    }\n\n    return res\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate\
    \ := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpphq53_i7_test.go:15:13: undefined: min

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073870
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    m := make(map[int]int, len(l1)+len(l2))\n    for\
    \ i := 0; i < len(l1); i++ {\n        m[l1[i]]++\n    }\n    for i := 0; i < len(l2);\
    \ i++ {\n        m[l2[i]]++\n    }\n    c := make([]int, 0, len(m))\n    for k\
    \ := range m {\n        c = append(c, k)\n    }\n    sort.Ints(c)\n    return\
    \ c\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5,\
    \ 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp50m6l60i_test.go:25:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073870
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    i := 0\n    j := 0\n    result := make([]int,\
    \ 0, len(l1))\n\n    for ; i < len(l1); i++ {\n        for ; j < len(l2); j++\
    \ {\n            if l1[i] == l2[j] {\n                result = append(result,\
    \ l1[i])\n                break\n            }\n        }\n    }\n\n    return\
    \ result\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5,\
    \ 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmp9ujbwkpn_test.go:46: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmp9ujbwkpn_test.go:46:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmp9ujbwkpn_test.go:46: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073870
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    sort.Ints(l1)\n    sort.Ints(l2)\n    result :=\
    \ make([]int, 0, len(l1))\n    for _, i := range l1 {\n        if idx := sort.Search(len(l2),\
    \ func(i int) bool { return l2[len(l2)-i-1] <= i }); idx < len(l2) {\n       \
    \     if l2[idx] == i {\n                result = append(result, i)\n        \
    \    }\n        }\n    }\n    return append(result, l2[len(l2)-1])\n}\n</code>\n\
    I didn't want to do some O(n^2) sorting algorithm (which can be done in O(n +\
    \ m)). So I used the sort package to sort the list first and then use the same\
    \ sort function on the second list. Thus it only takes O(n + m) time. The last\
    \ step is to find the element in the second list that is equal to the largest\
    \ element in the first list.\nThis is still O(n + m) because it takes linear time\
    \ on top of that. But it will run in O(n + m) time. Even faster than the O(n^2)\
    \ sorting method.\n<|/ a |>\n<| c |>\nYour `common` function has bugs. It should\
    \ be `l1[sort.Search(len(l1), func(i int) bool { return l1[i] <= i })]`. Also\
    \ you can just use `sort.Search(len(l1), func(i int) bool { return l1[i] <= i\
    \ })` instead of `sort.Search(len(l1), func(i int) bool { return l2[len(l2)-i-1]\
    \ <= i })`\n<|/ c |>\n<| c |>\nI noticed that too. I changed it to `sort.Search()`.\
    \ Thanks for pointing it out. I am still a beginner in golang. Thanks again for\
    \ the suggestion!\n<|/ c |>\n<| a tags=algorithm,sorting,arrays,go,find dscore=1\
    \ |>\n<code>\npackage main\n\nimport (\n    \"fmt\"\n    \"sort\"\n)\n\nfunc TestCommon(t\
    \ *testing.T) {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmptx4g7doo_test.go:26:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073869
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, len(l1))\n    for i := range\
    \ result {\n        result[i] = -1\n    }\n    i := 0\n    for j := range l2 {\n\
    \        if result[l2[j]] != -1 {\n            continue\n        }\n        while\
    \ i < len(l1) && l1[i] == l2[j] {\n            result[l1[i]] = l2[j]\n       \
    \     i++\n            j++\n            if j == len(l2) {\n                break\n\
    \            }\n        }\n    }\n    for j := range result {\n        if result[j]\
    \ == -1 {\n            result[j] = l2[j]\n        }\n    }\n    return result\n\
    }\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpe1unisck_test.go:23:15: expected '';'', found i

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073870
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    var ret []int\n    len1 := len(l1)\n    len2 :=\
    \ len(l2)\n    \n    for i := 0; i < len1; i++ {\n        found := false\n   \
    \     for j := 0; j < len2; j++ {\n            if l1[i] == l2[j] {\n         \
    \       found = true\n                break\n            }\n        }\n      \
    \  if !found {\n            ret = append(ret, l1[i])\n        }\n    }\n    \n\
    \    return ret\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=go,algorithm dscore=2\
    \ |>\nA simple way to do that is to find the common elements in both of your lists,\
    \ sort them and check if they belong to the same set. This can be done in O(n+m)\
    \ time using a sort and a for loop.\n<|/ a |>\n<| a |>\nA slight variant on's\
    \ answer:\n<code>\npackage main\n\nimport (\n    \"fmt\"\n    \"sort\"\n)\n\n\
    func TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp237pxv97_test.go:33:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073870
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    // Return empty if both are empty.\n    if len(l1)\
    \ == 0 && len(l2) == 0 {\n        return []int{}\n    }\n    // Return empty if\
    \ one list is empty.\n    if len(l1) == 0 {\n        return []int{l2[0]}\n   \
    \ }\n    if len(l2) == 0 {\n        return []int{l1[0]}\n    }\n    // Add first\
    \ element from each list to a set.\n    s := make(map[int]bool)\n    for _, v\
    \ := range l1 {\n        s[v] = true\n    }\n    for _, v := range l2 {\n    \
    \    s[v] = true\n    }\n    // Return elements which only exist in both lists.\n\
    \    var result []int\n    for v := range s {\n        result = append(result,\
    \ v)\n    }\n    return append(result, l1[0])\n}\n`\n\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmprh59pixq_test.go:40:1: raw string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073870
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0)\n    len1 := len(l1)\n\
    \    len2 := len(l2)\n\n    var i, j, k int\n    for ; i < len1 && j < len2; i++\
    \ {\n        if l1[i] == l2[j] {\n            result = append(result, l1[i])\n\
    \            j++\n        } else {\n            if k > 0 {\n                k--\n\
    \            } else {\n                i++\n                j++\n            }\n\
    \        }\n    }\n    for ; i < len1; i++ {\n        result = append(result,\
    \ l1[i])\n    }\n    for ; j < len2; j++ {\n        result = append(result, l2[j])\n\
    \    }\n    return result\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis does not\
    \ answer the question. Here you find more about common subsequences and here the\
    \ algorithm to find it: https://en.wikipedia.org/wiki/Longest_common_subsequence_problem#Algorithm_to_find_longest_subsequence_with_equal-length_substrings\n\
    <|/ c |>\n<| c |>\nIt answers the question if you read it carefully ;) I answered\
    \ the question by linking Wikipedia page for the common subsequence problem, the\
    \ algorithm to find it and proposed a code snippet. It is not an attempt to find\
    \ a library function, but to demonstrate how to solve the problem by comparing\
    \ the performance of two different algorithms. I also gave a link to original\
    \ code. Thank you for pointing it out. Anyway I updated the answer according to\
    \ your feedback.\n<|/ c |>\n<| a dscore=1 |>\nHere's an O(n) solution that works\
    \ for strings and ints.\n<code>\ndef longest_common_substring(s1, s2):\n    #\
    \ Sort the strings first\n    sorted1, sorted2 = sorted([s1, s2])\n\n    ans =\
    \ \"\"\n\n    # Loop through all characters in the shortest string.\n    # If\
    \ the shorter string has less characters than the long string\n    # then skip\
    \ that iteration, else append the current char\n    # to ans\n    for i, char1\
    \ in enumerate(sorted1):\n        # Iterate through characters in string s2\n\
    \        for j, char2 in enumerate(sorted2):\n            # If characters match\
    \ between both strings, append\n            # the first char of shortest string\n\
    \            if char1 == char2:\n                ans += char1\n\n            #\
    \ If strings match but are in reverse order\n            # append the first char\
    \ of the longer string\n            elif char1 < char2:\n                ans +=\
    \ char2\n\n            # If strings match but are in reverse order and the\n \
    \           # chars are the same, append to the end of the string\n          \
    \  elif char1 == char2 and sorted1[i:i+len(sorted2)][::-1] == sorted2[j:j+len(sorted2)]:\n\
    \                ans += char1\n                break\n    return ans\nfunc TestCommon(t\
    \ *testing.T) {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpemm8qjrz_test.go:40:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073870
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := []int{}\n    for _, x := range l1 {\n\
    \        for _, y := range l2 {\n            if x == y {\n                result\
    \ = append(result, x)\n                break\n            }\n        }\n    }\n\
    \    return result\n}\n</code>\n<|/ a dscore=0 tags=go |>\n<| a |>\n<code>\npackage\
    \ main\n\nimport (\n    \"fmt\"\n)\n\ntype arr []int\n\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpjbydlpku_test.go:25:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073870
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    i := 0\n    j := 0\n    var result []int\n   \
    \ for i < len(l1) and j < len(l2) {\n        if l1[i] == l2[j] {\n           \
    \ result = append(result, l1[i])\n            i++\n            j++\n        }\
    \ else if l1[i] < l2[j] {\n            i++\n        } else {\n            j++\n\
    \        }\n    }\n    return result\n}\n</code>\n<|/ a dscore=3 |>\n<| c |>\n\
    While this code may answer the question, providing additional context regarding\
    \ why and/or how this code answers the question improves its long-term value.\n\
    <|/ c |>\n<| a tags=go,algorithm |>\nI implemented the answer using golang library\
    \ \"sort\"\n<code>\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpuu4d0gig_test.go:17:21: expected ''{'', found and

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073870
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    common := make([]int, 0)\n    commonSetsL1 :=\
    \ make(map[int]int)\n    commonSetsL2 := make(map[int]int)\n    for i := range\
    \ l1 {\n        if _, exists := commonSetsL1[l1[i]]; exists {\n            continue\n\
    \        }\n        commonSetsL1[l1[i]] = i\n    }\n    for i := range l2 {\n\
    \        if _, exists := commonSetsL2[l2[i]]; exists {\n            continue\n\
    \        }\n        commonSetsL2[l2[i]] = i\n    }\n    set := 0\n    for i :=\
    \ range commonSetsL1 {\n        if _, exists := commonSetsL2[i]; exists {\n  \
    \          continue\n        }\n        common = append(common, commonSetsL1[i])\n\
    \        set = i + 1\n    }\n    return common\n}\n\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzmv7j85a_test.go:29:5: set declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073871
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    c := make([]int, len(l1))\n    j := 0\n    k :=\
    \ 0\n    for i < len(l1) {\n        if j == len(l2) {\n            return c\n\
    \        }\n        if l1[i] == l2[j] {\n            c[k] = l1[i]\n          \
    \  j++\n            k++\n        } else {\n            j = 0\n            k =\
    \ k + 1\n        }\n    }\n    return c\n}\n`\n\tpkg, err := parser.ParseDir(filepath.Join(src,\
    \ \"../common\"), nil)\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\n\tfor _, f\
    \ := range pkg {\n\t\tt.Run(f.Name.Name(), func(t *testing.T) {\n\t\t\tfset :=\
    \ token.NewFileSet()\n\t\t\tf, err := parser.ParseFile(fset, fpath.Join(src, \"\
    ../common\", f.Name.Name()), nil, 0)\n\t\t\tif err != nil {\n\t\t\t\tt.Error(err)\n\
    \t\t\t\treturn\n\t\t\t}\n\n\t\t\tfor _, l := range f.Decls {\n\t\t\t\tswitch d\
    \ := l.(type) {\n\t\t\t\tcase *ast.FuncDecl:\n\t\t\t\t\tt.Run(d.Name.Name(), func(t\
    \ *testing.T) {\n\t\t\t\t\t\tc1 := common(f.Name.Name(), d.Name.Name())\n\t\t\t\
    \t\t\tc2 := common(d.Name.Name(), f.Name.Name())\n\t\t\t\t\t\tfor _, a := range\
    \ c2 {\n\t\t\t\t\t\t\tif !common.Contains(c1, c1) {\n\t\t\t\t\t\t\t\tt.Errorf(\"\
    common elements for %s vs. %s: \\n%v vs. %v\", f.Name.Name(), d.Name.Name(), c1,\
    \ c2)\n\t\t\t\t\t\t\t\treturn\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\
    \t\t\t}\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate\
    \ := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpxucap_r3_test.go:32:1: raw string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073870
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    l := len(l1)\n    list2 := make([]int, l)\n  \
    \  k := 0\n    for _, i := range l1 {\n        list2[k], k = i, k+1\n    }\n\n\
    \    list3 := make([]int, l)\n    i = 0\n    for _, i := range l2 {\n        list3[i],\
    \ i = i, i+1\n    }\n\n    result := make([]int, l)\n\n    for j := 0; j < l;\
    \ j++ {\n        if list1[j] != list2[j] {\n            j := j + 1\n         \
    \   for i := j; i < l; i++ {\n                result[i] = list2[j]\n         \
    \   }\n        }\n    }\n    return append(result, list2...)\n}\n</code>\n<|/\
    \ a dscore=1 |>\n<| a |>\nHere is my solution with O(N) complexity and O(N^2)\
    \ space complexity.\n<code>\nvar commonElements []int\n\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpib94hvoz_test.go:39:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073870
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    sc := make([]int, 0, len(l1)+len(l2))\n    last\
    \ := 0\n    for i := range l1 {\n        for j := range l2 {\n            if l1[i]\
    \ == l2[j] {\n                sc = append(sc, l1[i+last])\n                last\
    \ = i + 1\n            }\n        }\n    }\n    return sc\n}\n\nfunc TestCommon(t\
    \ *testing.T) {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\npanic: runtime error: index out of range\
    \ [11] with length 7 [recovered]\n\tpanic: runtime error: index out of range [11]\
    \ with length 7\n\ngoroutine 34 [running]:\ntesting.tRunner.func1.2({0x5136e0,\
    \ 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5136e0, 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.common(...)\n\t/tmp/tmpfkls6vhf_test.go:19\n\
    command-line-arguments_test.TestCommon(0x0?)\n\t/tmp/tmpfkls6vhf_test.go:34 +0x885\n\
    testing.tRunner(0xc0001991e0, 0x529000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073871
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    // Return sorted unique common elements.\n   \
    \ result := make([]int, len(l1))\n    commonIndex := 0\n    for i := 0; i < len(l1);\
    \ i++ {\n        for j := commonIndex; j < len(l2); j++ {\n            if l1[i]\
    \ == l2[j] {\n                result[commonIndex] = l1[i]\n                commonIndex++\n\
    \            }\n        }\n    }\n    return append([]int{}, result...)\n}\n\n\
    func TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpyhbow0_t_test.go:44: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=653) %!s(int=5) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmpyhbow0_t_test.go:44:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=3) %!s(int=2) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpyhbow0_t_test.go:44:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=2) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestCommon/test_num__3 (0.00s)\n        tmpyhbow0_t_test.go:44:\
    \ expected '[]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073872
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    s1 := make(map[int]bool, len(l1))\n    s2 := make(map[int]bool,\
    \ len(l2))\n    for _, v := range l1 {\n        if _, ok := s1[v]; ok {\n    \
    \        l1[len(l1)-1] = nil\n            break\n        }\n        s1[v] = true\n\
    \    }\n    for _, v := range l2 {\n        if _, ok := s2[v]; ok {\n        \
    \    l2[len(l2)-1] = nil\n            break\n        }\n        s2[v] = true\n\
    \    }\n    l := len(l1)\n    r := len(l2)\n    l -= r + 1\n    d := make([]int,\
    \ l, l)\n    for i := 0; i < l; i++ {\n        d[i] = l1[i] // Copy common elements\n\
    \        d [i+l] = l2[i] // Copy rest of list 2\n    }\n    sort.Ints(d)\n   \
    \ return d[l:r]\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnei7wby__test.go:18:29: cannot use nil as int value in assignment

    /tmp/tmpnei7wby__test.go:25:29: cannot use nil as int value in assignment

    /tmp/tmpnei7wby__test.go:38:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073871
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    l := make(map[int]bool)\n    for _, v := range\
    \ l1 {\n        l[v] = true\n    }\n    for _, v := range l2 {\n        if _,\
    \ ok := l[v]; ok {\n            l[v] = true\n        }\n    }\n    s := make([]int,\
    \ 0, len(l))\n    for v := range l {\n        s = append(s, v)\n    }\n    return\
    \ s\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5,\
    \ 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpa5zerva6_test.go:46: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5)]'\n\
    \    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmpa5zerva6_test.go:46:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=8) %!s(int=5) %!s(int=3) %!s(int=2)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpa5zerva6_test.go:46:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3 (0.00s)\n        tmpa5zerva6_test.go:46:\
    \ expected '[]', got '[%!s(int=3) %!s(int=2) %!s(int=8) %!s(int=4)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073872
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    var ret []int\n    len := len(l1)\n    if len(l2)\
    \ < len {\n        len = len(l2)\n    }\n\n    var j int\n    for i := 0; i <\
    \ len; i++ {\n        if l1 == l2[i:] {\n            ret = append(ret, l1[i])\n\
    \        }\n        if l1 > l2 {\n            j = i\n            for ; i < len;\
    \ i++ {\n                if l1[i] == l2[j:] {\n                    ret = append(ret,\
    \ l1[i])\n                }\n            }\n        } else {\n            i =\
    \ len - len(l2)\n            for ; j < len; j++ {\n                if l2[j] ==\
    \ l1[i:] {\n                    ret = append(ret, l2[j])\n                }\n\
    \            }\n        }\n    }\n\n    return ret\n}\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpde2v65gg_test.go:16:8: invalid operation: cannot call non-function len
    (variable of type int)

    /tmp/tmpde2v65gg_test.go:17:15: invalid operation: cannot call non-function len
    (variable of type int)

    /tmp/tmpde2v65gg_test.go:22:12: invalid operation: l1 == l2[i:] (slice can only
    be compared to nil)

    /tmp/tmpde2v65gg_test.go:25:12: invalid operation: l1 > l2 (operator > not defined
    on slice)

    /tmp/tmpde2v65gg_test.go:28:31: invalid operation: l1[i] == l2[j:] (mismatched
    types int and []int)

    /tmp/tmpde2v65gg_test.go:33:23: invalid operation: cannot call non-function len
    (variable of type int)

    /tmp/tmpde2v65gg_test.go:35:31: invalid operation: l2[j] == l1[i:] (mismatched
    types int and []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073871
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    var a []int\n    var b []int\n    for k := range\
    \ l1 {\n        a = append(a, k)\n    }\n    for k := range l2 {\n        b =\
    \ append(b, k)\n    }\n    sort.SliceStable(a, b) // stable sort, don't change\
    \ original list\n    for _, k := range a[:len(b)] {\n        if k != b[sort.SearchInt64s(b,\
    \ k)]-1 {\n            return nil\n        }\n    }\n    return a[:len(b)]\n}\n\
    \nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplq551_u6_test.go:22:5: undefined: sort

    /tmp/tmplq551_u6_test.go:24:19: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073871
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    common := make([]int, 0)\n    unique := make([]int,\
    \ 0)\n    for _, val := range l1 {\n        if _, ok := common[val]; !ok {\n \
    \           common[val] = 1\n            unique = append(unique, val)\n      \
    \  }\n    }\n    for _, val := range l2 {\n        if _, ok := common[val]; !ok\
    \ {\n            common[val] = 1\n            unique = append(unique, val)\n \
    \       }\n    }\n    return unique\n}\n</code>\n<|/ a tags=go |>\n<| a |>\nHere\
    \ is the simple solution using hashmap\n<code>\npackage main\n\nimport \"fmt\"\
    \n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmprio5to3s_test.go:30:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073871
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    var out []int\n    out := append(out, l1...)\n\
    \    out := append(out, l2...)\n    sort.Ints(out)\n    return out\n}\n</code>\n\
    <|/ a dscore=1 tags=python,c#,algorithm |>\n<| a tags=python,c#,algorithm |>\n\
    <code>\npublic static int[] ArrayCommon(int[] a, int[] b) {\n    int n = Math.Min(a.Length,\
    \ b.Length);\n\n    for (int i = 0; i < n; i++) {\n        if (a[i] != b[i]) break;\n\
    \    }\n\n    if (i == n) return new int[0];\n\n    int[] r = new int[a.Length];\n\
    \n    for (int i = 0; i < n; i++) {\n        if (a[i] == b[i]) r[i / 2] = a[i];\n\
    \    }\n\n    return r;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=python,c#,algorithm\
    \ dscore=0 |>\nMy answer would be to first calculate the length of their respective\
    \ lists, and then loop through both and find an element, then put those together.\n\
    <|/ a |>\n<| c |>\nThe length of the common list may be uneven so you have to\
    \ check and see if the length is more than the index\n<|/ c |>\n<| a |>\nI didn't\
    \ test it in c# but in python you can try like this:\n<code>\ndef common(l1,l2):\n\
    \    m=min(len(l1),len(l2))\n    for i,j in zip(l1,l2):\n        if i==j:\n  \
    \         return [i*2]\n</code>\n<|/ a dscore=0 tags=python,c#,algorithm |>\n\
    <| c |>\nI thought I said \"in python\"\n<|/ c |>\n<| c |>\nIn python you can\
    \ write it easily.\n<|/ c |>\n<| c |>\nCan you do it in a single line please?\n\
    <|/ c |>\n<| c |>\nNo i tried in c# but couldn't find it\n<|/ c |>\n<| a |>\n\
    I believe this would do the job:\n<code>\nint[] listA = { 4, 8, 2, 7 };\nint[]\
    \ listB = { 4, 8, 2, 7 };\nint[] commonValues = new List<int>();\n\nfor (int i\
    \ = 0; i < listA.Length; i++)\n{\n    for (int j = 0; j < listB.Length; j++)\n\
    \    {\n        if (listA[i] == listB[j])\n        {\n            commonValues.Add(listA[i]);\n\
    \            break;\n        }\n    }\n}\n</code>\n<|/ a tags=python,c#,algorithm\
    \ dscore=0 |>\n<| c |>\nIf this code is working, can you please explain the code?\n\
    \nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp9aayiaea_test.go:20:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073871
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    s := map[int]bool{}\n    for _, v := range l1\
    \ {\n        s[v] = true\n    }\n    for _, v := range l2 {\n        if !s[v]\
    \ {\n            s[v] = true\n        } else {\n            delete(s, v)\n   \
    \     }\n    }\n    return make([]int, 0, len(s))\n}\n</code>\n<|/ a |>\n<| c\
    \ |>\nNice implementation!  Could it be improved somehow if we were to return\
    \ the common elements sorted, like \"[4, 3, 5] instead of []int{4,3,5}\"?\n<|/\
    \ c |>\n<| c |>\n, sure, I'll add an implementation with that functionality.\n\
    <|/ c |>\n<| a dscore=0 |>\nHere's an updated version which supports sets of unequal\
    \ length as well.\n<code>\npackage main\n\nimport (\n    \"fmt\"\n    \"sort\"\
    \n)\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgy9s0jdr_test.go:27:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073871
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    seen := make(map[int]\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpj7asfqlg_test.go:14:26: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073871
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    var ret []int\n    for i, v := range l1 {\n  \
    \      if _, ok := l2[i]; ok {\n            ret = append(ret, v)\n        }\n\
    \    }\n    for i, v := range l2 {\n        if _, ok := l1[i]; ok {\n        \
    \    ret = append(ret, v)\n        }\n    }\n    return ret\n}\n\nfunc TestCommon(t\
    \ *testing.T) {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4e0fgn81_test.go:16:21: assignment mismatch: 2 variables but 1 value

    /tmp/tmp4e0fgn81_test.go:21:21: assignment mismatch: 2 variables but 1 value

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073872
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    var result []int\n    found := make(map[int]int)\n\
    \    for i, j := 0, 0; i < len(l1) && j < len(l2); {\n        if l1[i] == l2[j]\
    \ {\n            found[l1[i]]++\n            found[l2[j]]++\n            i++\n\
    \            j++\n        } else if l1[i] > l2[j] {\n            if i+1 < len(l1)\
    \ {\n                i++\n            } else {\n                break\n      \
    \      }\n        } else {\n            if j+1 < len(l2) {\n                j++\n\
    \            } else {\n                break\n            }\n        }\n    }\n\
    \    for k := range found {\n        result = append(result, k)\n    }\n    sort.Ints(result)\n\
    \    return result\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmqhreat7_test.go:39:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073872
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, len(l1))\n\n    for i :=\
    \ 0; i < len(l1); i++ {\n        j := i\n        for ; j < len(l2); j++ {\n  \
    \          if l1[i] == l2[j] {\n                result[i] = l1[i]\n          \
    \      i++\n                j++\n                break\n            }\n      \
    \  }\n        if j < len(l2) {\n            result[i] = l2[j]\n        }\n   \
    \ }\n\n    return result\n}\n</code>\n<|/ a |>\n<| a |>\nThe fastest way is to\
    \ do some tricks. \nThis algorithm is similar to mergesort:\n\nSort the two lists\
    \ once, let us call them list_1 and list_2. \nThen merge two sorted lists one\
    \ by one with O(1) complexity (as long as we do not modify the list itself). \n\
    If at some point we found two equal elements from both lists, we append the one\
    \ from list_1 to the list from list_2.\nWhen we find two equal elements from one\
    \ list, and we found the same element in the other list - we are done! So we append\
    \ the element from list_1 to the final list - which is our answer.\nOtherwise,\
    \ we need to find one element from list_1, and one element from list_2, find it\
    \ (the one with smaller index) and compare them. Find the element in list_2 that\
    \ is the smallest - and append it to the list.\n\nExample:\n<code>\nlist_1 = [1,2,3,4,5]\n\
    list_2 = [1,3,5,7,9,10,12]\n</code>\nWe will sort the lists now. \n<code>\nlist_1\
    \ = [1,2,3,4,5]\nlist_2 = [1,3,5,7,9,10,12]\n\nlist_1 = list_1.sort()\nlist_2\
    \ = list_2.sort()\n\nlist_1 = [1,2,3,4,5]\nlist_2 = [1,3,5,7,9,10,12]\n</code>\n\
    We will merge the lists now:\n<code>\nlist_1 = [1,2,3,4,5]\nlist_2 = [1,3,5,7,9,10,12]\n\
    \nlist_1 = list_1.sort()\nlist_2 = list_2.sort()\n\nlist_1 = [1,2,3,4,5]\nlist_2\
    \ = [1,3,5,7,9,10,12]\n\nlist_1 = list_1.sort()\nlist_2 = list_2.sort()\n\nlist_1\
    \ = [1,2,3,4,5]\nlist_2 = [1,3,5,7,9,10,12]\n\nlist_1 = list_1.sort()\nlist_2\
    \ = list_2.sort()\n\nlist_1 = [1,2,3,4,5]\nlist_2 = [1,3,5,7,9,10,12]\n\nlist_1\
    \ = list_1.sort()\nlist_2 = list_2.sort()\n\nlist_1 = [1,2,3,4,5]\nlist_2 = [1,3,5,7,9,10,12]\n\
    \nlist_1 = list_1.sort()\nlist_2 = list_2.sort()\n\nlist_1 = [1,2,3,4,5]\nlist_2\
    \ = [1,3,5,7,9,\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5,\
    \ 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpr52_aiw0_test.go:33:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073871
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    m := make(map[int]\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpx8lim1ng_test.go:14:23: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073857
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    m, n := len(l1), len(l2)\n\n    c := make([]int,\
    \ 0)\n    m := 0\n    n := 0\n    for i < m && i < n {\n        if l1[i] == l2[i]\
    \ {\n            c[count]++\n        }\n    }\n\n    for i < m {\n        c[count]++\n\
    \    }\n\n    for i < n {\n        c[count]++\n    }\n\n    for i < m && i < n\
    \ {\n        if l1[m] == l2[m] {\n            c[count]++\n        }\n    }\n\n\
    \    return c\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwn740d7j_test.go:17:7: no new variables on left side of :=

    /tmp/tmpwn740d7j_test.go:18:7: no new variables on left side of :=

    /tmp/tmpwn740d7j_test.go:19:9: undefined: i

    /tmp/tmpwn740d7j_test.go:20:15: undefined: i

    /tmp/tmpwn740d7j_test.go:21:15: undefined: count

    /tmp/tmpwn740d7j_test.go:25:9: undefined: i

    /tmp/tmpwn740d7j_test.go:26:11: undefined: count

    /tmp/tmpwn740d7j_test.go:29:9: undefined: i

    /tmp/tmpwn740d7j_test.go:30:11: undefined: count

    /tmp/tmpwn740d7j_test.go:33:9: undefined: i

    /tmp/tmpwn740d7j_test.go:33:9: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073872
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    var result []int\n    j := 0\n    result := append(result,\
    \ l1...)\n    for true {\n        if j == len(l2) {\n            return result\n\
    \        }\n        if l1[j] != l2[j] {\n            j = j + 1\n            continue\n\
    \        }\n        result = append(result, l1[j])\n        j = j + 1\n    }\n\
    \    return nil\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nthanks Jay. I'm new to\
    \ golang and I really don't know what the append function does or why you used\
    \ it here.\n<|/ c |>\n<| c |>\n`append` function returns the result of `append`\
    \ function and stores in `result` variable. `append` function appends element\
    \ at the end of `result` variable. See the link https://golang.org/pkg/builtin/#append\
    \ for more details.\n<|/ c |>\n<| a tags=go,arrays dscore=0 |>\n<code>\npackage\
    \ main\n\nimport \"fmt\"\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpzwilw4yf_test.go:30:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073871
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    var res []int\n    for _, l1 := range l1 {\n \
    \       for _, l2 := range l2 {\n            if l1 == l2 {\n                res\
    \ = append(res, l1)\n            }\n        }\n    }\n    return res\n}\n\nfunc\
    \ TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653,\
    \ 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5, 3, 2,\
    \ 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpe5nayu5w_test.go:41: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=653) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpe5nayu5w_test.go:41: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmpe5nayu5w_test.go:41: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073872
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    sc := make([]int, 0, len(l1))\n    dup := make([]int,\
    \ 0, len(l1))\n    for _, i := range l1 {\n        if _, ok := dup[len(sc)-len(dup)-1];\
    \ ok {\n            dup = append(dup, i)\n        } else {\n            sc = append(sc,\
    \ i)\n        }\n    }\n    sort.Ints(sc)\n    dsort.Ints(dup)\n    return sc\n\
    }\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp94kvkjsw_test.go:17:21: assignment mismatch: 2 variables but 1 value

    /tmp/tmp94kvkjsw_test.go:23:5: undefined: sort

    /tmp/tmp94kvkjsw_test.go:24:5: undefined: dsort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073872
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    c := make(map[int]int)\n    for i, v := range\
    \ l1 {\n        c[v] = i\n    }\n    for i, v := range l2 {\n        if _, ok\
    \ := c[v]; !ok {\n            c[v] = i\n        }\n    }\n    result := make([]int,\
    \ len(c))\n    for i, v := range c {\n        result[i] = v\n    }\n    sort.Ints(result)\n\
    \    return result\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphhf1e_cj_test.go:27:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073872
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    // create result slice to hold common elements\n\
    \    result := make([]int, 0)\n\n    // find common elements in both lists\n \
    \   for _, el1 := range l1 {\n        for _, el2 := range l2 {\n            if\
    \ el1 == el2 {\n                result = append(result, el1)\n               \
    \ break\n            }\n        }\n    }\n\n    // return the sorted unique common\
    \ elements\n    return append(result, l2...)\n}\n\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmp3r09fqxu_test.go:47: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=653) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=1) %!s(int=5)\
    \ %!s(int=9) %!s(int=653) %!s(int=121)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmp3r09fqxu_test.go:47: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmp3r09fqxu_test.go:47: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=4)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073872
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    l := make([]int, 0, len(l1)+len(l2)-1)\n    l\
    \ := append(l, l1...)\n    l = append(l, l2...)\n    sort.Ints(l)\n    return\
    \ l[0:len(l):len(l)]\n}\n</code>\n<|/ a tags=go,algorithm,set |>\n<| c |>\nNot\
    \ bad. Thanks for taking the time to put this together.\n<|/ c |>\n<| a dscore=1\
    \ |>\nFor those who will search how to sort arrays in golang in an efficient way,\
    \ here is the code:\n<code>\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbe7apvha_test.go:20:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073872
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    var result []int\n    for _, elem1 := range l1\
    \ {\n        for _, elem2 := range l2 {\n            if elem1 == elem2 {\n   \
    \             result = append(result, elem1)\n                break\n        \
    \    }\n        }\n    }\n    return result\n}\n\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmp4e8tomzx_test.go:42: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=653) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmp4e8tomzx_test.go:42: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmp4e8tomzx_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073872
- exit_code: null
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0)\n    size := len(l1)\n\
    \    for i := 0; i < size; i++ {\n        found:\n        for j := 0; j < size;\
    \ j++ {\n            if l1[i] == l2[j] {\n                result = append(result,\
    \ l1[i])\n                goto found\n            }\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5,\
    \ 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073886
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    var common []int\n    var i1, i2 int\n\n    //\
    \ Find common elements.\n    for i1 = 0; i1 < len(l1); i1++ {\n        for i2\
    \ = 0; i2 < len(l2); i2++ {\n            if l1[i1] == l2[i2] {\n             \
    \   common = append(common, l1[i1])\n                common = append(common, l2[i2])\n\
    \            }\n        }\n    }\n\n    // Sort common elements.\n    for i =\
    \ 1; i < len(common); i++ {\n        for j = i; j < len(common); j++ {\n     \
    \       if common[i] > common[j] {\n                common[i], common[j] = common[j],\
    \ common[i]\n            }\n        }\n    }\n    return common\n}\n\nfunc TestCommon(t\
    \ *testing.T) {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7d_aqacf_test.go:28:9: undefined: i

    /tmp/tmp7d_aqacf_test.go:29:13: undefined: j

    /tmp/tmp7d_aqacf_test.go:29:17: undefined: i

    /tmp/tmp7d_aqacf_test.go:30:23: undefined: i

    /tmp/tmp7d_aqacf_test.go:30:35: undefined: j

    /tmp/tmp7d_aqacf_test.go:31:35: undefined: j

    /tmp/tmp7d_aqacf_test.go:31:47: undefined: j

    /tmp/tmp7d_aqacf_test.go:31:58: undefined: i

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073872
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    // Sort the lists.\n    i := 0\n    j = len(l1)\n\
    \    for ; i < j; i++ {\n        if l1[i] < l2[i] {\n            j := i\n    \
    \        i := i + 1\n            for ; j < j; j++ {\n                if l1[j]\
    \ == l2[j] {\n                    continue // l1 is equal to l2\n            \
    \    }\n            }\n            l1, l2 = append([]int{}, l1[:i]...), append([]int{},\
    \ l2[:j]...)\n            j -= i\n        }\n    }\n    return append([]int{},\
    \ l1[:i]...) // l1 has at least as many elements as l2\n}\n`\n        )\n\n  \
    \      runTest(\n            suite, `\npackage common_test\n\nimport (\n    \"\
    testing\"\n    \"fmt\"\n)\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments\n/tmp/tmp_g_hacp7_test.go:32:1: expected declaration,\
    \ found `\n        )\n\n        runTest(\n            suite, `\n"
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073872
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    var sc []int\n\n    for i := range l1 {\n    \
    \    for j := range l2 {\n            if l1[i] == l2[j] {\n                sc\
    \ = append(sc, l2[j])\n                delete(l2, j)\n                break\n\
    \            }\n        }\n    }\n\n    return sc\n}\n\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpytwmdrvh_test.go:20:24: invalid argument: l2 (variable of type []int)
    is not a map

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073872
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := make([]int, 0, len(l1))\n    for _,\
    \ x := range l1 {\n        if !Contains(result, x) {\n            result = append(result,\
    \ x)\n        }\n    }\n    for _, x := range l2 {\n        if !Contains(result,\
    \ x) {\n            result = append(result, x)\n        }\n    }\n    return append(result,\
    \ l1...)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5,\
    \ 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppkhrhaiy_test.go:16:13: undefined: Contains

    /tmp/tmppkhrhaiy_test.go:21:13: undefined: Contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073872
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    l := make([]int, len(l1))\n    for i := 0; i <\
    \ len(l1); i++ {\n        l[i] = l1[i]\n    }\n\n    j := 0\n    for i := 0; i\
    \ < len(l2); i++ {\n        for k := 0; k < len(l); k++ {\n            if l[k]\
    \ == l2[i] {\n                j = k\n                break\n            }\n  \
    \      }\n    }\n    return l[0:j+1]\n}\n</code>\n<|/ a |>\n<| a |>\nThe solution\
    \ is pretty simple: you just have to sort the two lists and then compare the two\
    \ slices to get the intersection.\n<code>\nfunc TestCommon(t *testing.T) {\n \
    \ candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4,\
    \ 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653}\
    \ },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2,\
    \ 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected:\
    \ []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpg2csv1f0_test.go:30:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073872
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    if len(l1) != len(l2) {\n        return nil\n\
    \    }\n    common := make([]int, 0)\n    for _, x := range l1 {\n        if _,\
    \ present := l2[len(l2)-x-1]; !present {\n            common = append(common,\
    \ x)\n        }\n    }\n    return common\n}\n\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpm0oxl6fk_test.go:19:26: assignment mismatch: 2 variables but 1 value

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073872
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    var i int\n    result := make([]int, len(l1))\n\
    \    for ; i < len(l1)-1 && i < len(l2)-1; i++ {\n        if l1[i] == l2[i] {\n\
    \            result[i] = l1[i]\n        } else {\n            j := i + 1\n   \
    \         for ; j < len(l1) && l1[j] == l2[j]; j++ {\n            }\n        \
    \    if j != len(l1) {\n                result[i] = l1[j]\n            } else\
    \ {\n                j := i + 1\n                for ; j < len(l2) && l2[j] ==\
    \ l1[j]; j++ {\n                }\n                if j != len(l2) {\n       \
    \             result[i] = l2[j]\n                } else {\n                  \
    \  fmt.Println(\"Error in common_test.common: can't find common element\")\n \
    \                   result[i] = -1\n                }\n            }\n       \
    \ }\n    }\n    return result\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate\
    \ := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpi_e_rfs2_test.go:57: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=4) %!s(int=3) %!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5) %!s(int=0)]'\n\
    \    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmpi_e_rfs2_test.go:57:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=3) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpi_e_rfs2_test.go:57:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=3) %!s(int=2) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestCommon/test_num__3 (0.00s)\n        tmpi_e_rfs2_test.go:57:\
    \ expected '[]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073873
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    d := make(map[int]int, len(l1)+len(l2))\n    for\
    \ _, v := range l1 {\n        d[v]++\n    }\n    for _, v := range l2 {\n    \
    \    if _, ok := d[v]; !ok {\n            return nil\n        }\n        d[v]--\n\
    \    }\n    var c []int\n    for v := range d {\n        c = append(c, v)\n  \
    \  }\n    return c\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpd_mhy0hj_test.go:47: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmpd_mhy0hj_test.go:47:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=2) %!s(int=8) %!s(int=5) %!s(int=3)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpd_mhy0hj_test.go:47:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3 (0.00s)\n        tmpd_mhy0hj_test.go:47:\
    \ expected '[]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073873
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    if len(l1) > len(l2) {\n        return nil\n \
    \   }\n    result := make([]int, 0)\n    for i, e := range l1 {\n        found\
    \ = false\n        for _, f := range l2 {\n            if e == f {\n         \
    \       found = true\n                break\n            }\n        }\n      \
    \  if !found {\n            result = append(result, e)\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpikhtc_e5_test.go:18:9: i declared but not used

    /tmp/tmpikhtc_e5_test.go:19:9: undefined: found

    /tmp/tmpikhtc_e5_test.go:22:17: undefined: found

    /tmp/tmpikhtc_e5_test.go:26:13: undefined: found

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073872
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    l1 := removeDuplicates(l1)\n    l2 := removeDuplicates(l2)\n\
    \    for i := 0; i < len(l1); i++ {\n        j := i\n        for j < len(l2) &&\
    \ (l1[i] == l2[j]); j++ {\n        }\n        if j == len(l2) {\n            return\
    \ append([]int{}, l1[:i], l1[i+1:]...)\n        } else {\n            l2 := l2[j:]\n\
    \        }\n    }\n    return l1\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate\
    \ := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpg7pxojxm_test.go:18:46: expected boolean or range expression, found simple
    statement (missing parentheses around composite literal?)

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073872
