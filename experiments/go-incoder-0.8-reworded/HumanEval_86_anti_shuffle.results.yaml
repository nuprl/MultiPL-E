language: go_test.go
name: HumanEval_86_anti_shuffle
results:
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var result string = \"\"\n    var i int\n    var length int\n\n    for length\
    \ = 0, i = 0; i < len(s); i++ {\n        length += 1\n\n        if s[i] == ' '\
    \ || s[i] == '.' || s[i] == '!' || s[i] == '?' || s[i] == ';' || s[i] == '-' {\n\
    \            length++\n        }\n    }\n\n    for j = 0; j < length; j++) {\n\
    \        result += string(s[j] + 1, j + 1)\n    }\n\n    return result\n}\n\n\
    func TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual:\
    \ candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"\
    ), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\"\
    \ },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\"\
    \ },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpiua92ehc_test.go:25:23: expected ''=='', found ''=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075203
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    ss := []string{}\n    for _, w := range strings.Split(s, \" \") {\n     \
    \   ss := append(ss, fmt.Sprintf(\"%c\", asciiValue(w)))\n    }\n    sort.Strings(ss)\n\
    \    return strings.Join(ss, \" \")\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkg7vdhoo_test.go:22:23: undefined: strings

    /tmp/tmpkg7vdhoo_test.go:23:9: ss declared but not used

    /tmp/tmpkg7vdhoo_test.go:23:44: undefined: asciiValue

    /tmp/tmpkg7vdhoo_test.go:25:5: undefined: sort

    /tmp/tmpkg7vdhoo_test.go:26:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075204
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // Write your code here\n    words := strings.Split(s, \" \")\n    sort.Strings(words)\n\
    \    for _, word := range words {\n        s := \"\"\n        for _, char := range\
    \ word {\n            s += string(unicode.ToLower(char))\n        }\n        s\
    \ = s + \" \"\n    }\n    return s\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n\
    \  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpllaa8vra_test.go:22:14: undefined: strings

    /tmp/tmpllaa8vra_test.go:23:5: undefined: sort

    /tmp/tmpllaa8vra_test.go:27:25: undefined: unicode

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075204
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    w := strings.Split(s, \" \")\n    i := 0\n    j := len(w) - 1\n    k := -1\n\
    \    v := 0\n    out := \"\"\n    for i <= len(w) {\n        while j >= 0 {\n\
    \            if w[k] > w[j] {\n                v += 1\n                j --\n\
    \            } else {\n                j -= 1\n            }\n        }\n    \
    \    if v != 0 {\n            out += string(k+1) + string(v+1) + \" \"\n     \
    \       v = -1\n        }\n        i++\n        k = j\n    }\n    return out\n\
    }\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual:\
    \ candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"\
    ), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\"\
    \ },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\"\
    \ },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmphv__1x_j_test.go:28:15: expected '';'', found j

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075203
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var output string\n    // Get the first character of the sentence and store\
    \ it in a variable.\n    char := s[0]\n\n    // Iterate over the characters of\
    \ the string in order (from first to last).\n    for i := 1; i < len(s); i++ {\n\
    \        // Check that the character is equal to the one in the sentence, if not\
    \ add it to the output.\n        if s[i] != char {\n            output = output\
    \ + char\n            char = s[i]\n        }\n    }\n    // Add the last character\
    \ at the end of the string.\n    output = output + char\n\n    // Return the string.\n\
    \    return output\n}\n</code>\n<|/ a dscore=2 tags=algorithm,go |>\n<| c |>\n\
    This isn't O(n) time though.  See comments in the other answers.\n<|/ c |>\n<|\
    \ c |>\nIt is not O(n) time because there are only two characters to check and\
    \ the loop runs only once.\n<|/ c |>\n<| c |>\nNot really.  O(n) means to iterate\
    \ through the string once.\n<|/ c |>\n<| c |>\nThe way this answer works you iterate\
    \ over the string twice (`for i := 0; i < len(s); i++`) which is not O(n). See\
    \ my answer.\n<|/ c |>\n<| c |>\nIt depends on whether you count it as a O(n)\
    \ or O(2n) algorithm. Of course your solution is O(n), but my solution iterates\
    \ on the string only once (with two characters to check). This is a O(n) solution\
    \ because your algorithm is O(n) and my algorithm iterates on the string only\
    \ once.\n<|/ c |>\n<| a dscore=0 tags=algorithm,go |>\nYou can use slice to create\
    \ list of words and then shuffle it randomly.\n<code>\npackage main\n\nimport\
    \ (\n    \"fmt\"\n    \"math/rand\"\n    \"strings\"\n)\n\nfunc TestAnti_Shuffle(t\
    \ *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"),\
    \ expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\"\
    \ },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual:\
    \ candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6q8otj1p_test.go:39:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075203
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    n := len(s)\n    r := \"\"\n    for i := 0; i < n; i++ {\n        if s[i]\
    \ >= 'a' && s[i] <= 'z' {\n            r = r + s[n-i-1] + s[i]\n        } else\
    \ {\n            r = r + s[i]\n        }\n    }\n    return r\n}\n\nfunc TestAnti_Shuffle(t\
    \ *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"),\
    \ expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\"\
    \ },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual:\
    \ candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn4w13voi_test.go:25:17: invalid operation: r + s[n - i - 1] (mismatched
    types string and byte)

    /tmp/tmpn4w13voi_test.go:27:17: invalid operation: r + s[i] (mismatched types
    string and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075204
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var rev_s string\n    var new_s string\n    var new_s_len int\n    for i\
    \ := 0; i < len(s); i++ {\n        rev_s = \"\"\n        for j := len(s) - 1;\
    \ j > i; j-- {\n            rev_s = rev_s + s[j]\n        }\n        new_s_len\
    \ = 1\n        for j := 0; j < len(rev_s); j++ {\n            if rev_s[j] >= 'A'\
    \ && rev_s[j] <= 'Z' {\n                new_s_len += 1\n            } else {\n\
    \                new_s_len += 2\n            }\n        }\n        new_s = new_s\
    \ + rev_s[:new_s_len]\n    }\n    return new_s\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy9d2h6et_test.go:27:21: invalid operation: rev_s + s[j] (mismatched types
    string and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075204
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var words []string\n    var result []string\n\n    for _, word := range strings.Split(s,\
    \ \" \") {\n        word = strings.Replace(word, \".\", \"\", -1)\n        word\
    \ = strings.Replace(word, \"!\", \"\", -1)\n        word = strings.Replace(word,\
    \ \",\", \"\", -1)\n        word = strings.Replace(word, \"?\", \"\", -1)\n  \
    \      word = strings.ToUpper(word)\n        word = strings.Replace(word, \"-\"\
    , \"\", -1)\n        word = strings.Replace(word, \"*\", \"\", -1)\n        word\
    \ = strings.Replace(word, \"/\", \"\", -1)\n        word = strings.Replace(word,\
    \ \"+\", \"\", -1)\n        word = strings.Replace(word, \" \", \"\", -1)\n  \
    \      word = strings.ToLower(word)\n        word = strings.Replace(word, \" \
    \ \", \"\", -1)\n        word = strings.Replace(word, \";\", \"\", -1)\n     \
    \   word = strings.Replace(word, \"-\", \"\", -1)\n        word = strings.Replace(word,\
    \ \"(\", \"\", -1)\n        word = strings.Replace(word, \")\", \"\", -1)\n  \
    \      word = strings.Replace(word, \"[\", \"\", -1)\n        word = strings.Replace(word,\
    \ \"]\", \"\", -1)\n        word = strings.Replace(word, \"{\", \"\", -1)\n  \
    \      word = strings.Replace(word, \"}\", \"\", -1)\n        word = strings.Replace(word,\
    \ \"'\", \"\", -1)\n        word = strings.Replace(word, \".\", \"\", -1)\n  \
    \      word = strings.Replace(word, \"!\", \"\", -1)\n        word = strings.Replace(word,\
    \ \",\", \"\", -1)\n        word = strings.Replace(word, \"?\", \"\", -1)\n  \
    \      word = strings.Replace(word, \"-\", \"\", -1)\n        word = strings.Replace(word,\
    \ \"*\", \"\", -1)\n        word = strings.Replace(word, \"/\", \"\", -1)\n  \
    \      word = strings.Replace(word, \"+\", \"\", -1)\n        word = strings.Replace(word,\
    \ \" \", \"\", -1)\n        word = strings.Replace(word, \"  \", \"\", -1)\n \
    \       word = strings.Replace(word, \";\", \"\", -1)\n        word = strings.Replace(word,\
    \ \"'\", \"\", -1)\n        word = strings.Replace(word, \"]\", \"\", -1)\n  \
    \      word = strings.Replace(word, \"}\", \"\", -1)\n        word = strings.Replace(word,\
    \ \"{\", \"\", -1)\n        word = strings.Replace(word, \"[\", \"\", -1)\n  \
    \      word = strings.Replace(word, \" \", \"\", -1)\n        word = strings.Replace(word,\
    \ \";\", \"\", -1)\n        word = strings.Replace(word, \"-\", \"\", -1)\n  \
    \      word = strings.Replace(word, \"/\", \"\", -1)\n        word = strings.Replace(word,\
    \ \"*\", \"\", -1)\n        word = strings.\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_asv2a_u_test.go:68:1: expected selector or type assertion, found ''func''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075203
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // TODO: Write you code here.\n    return s\n}\n\nfunc TestAnti_Shuffle(t\
    \ *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"),\
    \ expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\"\
    \ },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual:\
    \ candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__1\
    \ (0.00s)\n        tmp70xbrqve_test.go:44: expected 'ehllo', got 'hello'\n   \
    \ --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n        tmp70xbrqve_test.go:44:\
    \ expected 'bemnru', got 'number'\n    --- FAIL: TestAnti_Shuffle/test_num__4\
    \ (0.00s)\n        tmp70xbrqve_test.go:44: expected 'Hello !!!Wdlor', got 'Hello\
    \ World!!!'\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n        tmp70xbrqve_test.go:44:\
    \ expected '.Hi My aemn is Meirst .Rboot How aer ?ouy', got 'Hi. My name is Mister\
    \ Robot. How are you?'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075204
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // Create a map to store ascii values for each character\n    var ascii [256]int\n\
    \    // Store the length of original string\n    len := len(s)\n    // Initialize\
    \ a variable to store a new string\n    result := \"\"\n    // Store the ascii\
    \ value for each character in ascii map\n    for _, v := range s {\n        ascii[v]++\n\
    \    }\n    // Initialize another variable to store a word and store it in result\
    \ variable\n    word := \"\"\n    // Iterate through ascii map and store every\
    \ character in 'word'\n    for i := 0; i < 256; i++ {\n        word += string([]byte{byte(i)})\n\
    \    }\n    // Iterate through the string and replace each character with a new\n\
    \    // character which has ascii value greater than the previous\n    for i :=\
    \ 0; i < len; i++ {\n        result += (ascii[s[i]] - ascii[word[i]]) > 1 ? string([]byte{byte(s[i]\
    \ - 1)}) : s[i]\n    }\n    // Return the result\n    return result\n}\n\nfunc\
    \ TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"\
    hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected:\
    \ \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n \
    \    { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n\
    \     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp7pl53ce2_test.go:40:54: illegal character U+003F ''?''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075203
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    ans := s\n    ans = strings.ReplaceAll(ans, \"e\", \"h\")\n    ans = strings.ReplaceAll(ans,\
    \ \"l\", \"p\")\n    ans = strings.ReplaceAll(ans, \"o\", \"q\")\n    ans = strings.ReplaceAll(ans,\
    \ \"w\", \"q\")\n    ans = strings.ReplaceAll(ans, \"r\", \"o\")\n    ans = strings.ReplaceAll(ans,\
    \ \"b\", \"q\")\n    ans = strings.ReplaceAll(ans, \"d\", \"p\")\n    ans = strings.ReplaceAll(ans,\
    \ \"!\", \"q\")\n    ans = strings.ReplaceAll(ans, \" \", \"z\")\n    return ans\n\
    }\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual:\
    \ candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"\
    ), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\"\
    \ },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\"\
    \ },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpap5qs_ur_test.go:22:11: undefined: strings

    /tmp/tmpap5qs_ur_test.go:23:11: undefined: strings

    /tmp/tmpap5qs_ur_test.go:24:11: undefined: strings

    /tmp/tmpap5qs_ur_test.go:25:11: undefined: strings

    /tmp/tmpap5qs_ur_test.go:26:11: undefined: strings

    /tmp/tmpap5qs_ur_test.go:27:11: undefined: strings

    /tmp/tmpap5qs_ur_test.go:28:11: undefined: strings

    /tmp/tmpap5qs_ur_test.go:29:11: undefined: strings

    /tmp/tmpap5qs_ur_test.go:30:11: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075204
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // Split the string by whitespace\n    words := strings.Split(s, \" \")\n\
    \n    // Sort the words in ascending order\n    sort.Strings(words)\n\n    //\
    \ Join the words together\n    // Note: You should keep the order of words and\
    \ blank spaces in the sentence.\n    return strings.Join(words, \"\")\n}\n\nfunc\
    \ TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"\
    hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected:\
    \ \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n \
    \    { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n\
    \     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplmx_6cvz_test.go:22:14: undefined: strings

    /tmp/tmplmx_6cvz_test.go:25:5: undefined: sort

    /tmp/tmplmx_6cvz_test.go:29:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075204
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Fields(s)\n    for i := 0; i < len(words); i++ {\n     \
    \   j := i + 1\n        for j < len(words) {\n            if words[j] <= words[i]\
    \ {\n                j += 1\n                continue\n            }\n       \
    \     break\n        }\n\n        words[i], words[j] = words[j], words[i]\n  \
    \  }\n\n    result := \"\"\n    for _, word := range words {\n        result =\
    \ result + word + \" \"\n    }\n    result = strings.TrimSpace(result)\n    return\
    \ result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpm4nkszlx_test.go:21:14: undefined: strings

    /tmp/tmpm4nkszlx_test.go:39:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075204
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpaaebxnxu_test.go:43: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpaaebxnxu_test.go:43: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var new_s string = \"\"\n    word := \"\"\n    space := \"\"\n    for _,\
    \ c := range s {\n        if unicode.IsSpace(c) {\n            if word != \"\"\
    \ {\n                new_s += space + word\n                space = \"\"\n   \
    \             word = \"\"\n            }\n        } else {\n            if word\
    \ == \"\" {\n                word += c\n            } else {\n               \
    \ if unicode.IsUpper(c) {\n                    word += string(c)\n           \
    \     } else {\n                    word = word + string(c)\n                }\n\
    \            }\n        }\n    }\n    if word != \"\" {\n        new_s += space\
    \ + word\n    }\n    return new_s\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n\
    \  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9mp2c8_i_test.go:25:12: undefined: unicode

    /tmp/tmp9mp2c8_i_test.go:33:17: invalid operation: word += c (mismatched types
    string and rune)

    /tmp/tmp9mp2c8_i_test.go:35:20: undefined: unicode

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075204
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var words []string\n    for _, word := range strings.Fields(s) {\n      \
    \  word = strings.Replace(word, \" \", \"<SP>\", -1)\n        word = strings.Replace(word,\
    \ \"<SP>\", \" \", -1)\n        words = append(words, word)\n    }\n    sort.Strings(words)\n\
    \    return strings.Join(words, \"<SP>\")\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvuv_h6ok_test.go:22:26: undefined: strings

    /tmp/tmpvuv_h6ok_test.go:23:16: undefined: strings

    /tmp/tmpvuv_h6ok_test.go:24:16: undefined: strings

    /tmp/tmpvuv_h6ok_test.go:27:5: undefined: sort

    /tmp/tmpvuv_h6ok_test.go:28:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075204
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    lastWord := \"\"\
    \n    for _, w := range words {\n        if w == \"\" {\n            lastWord\
    \ = w // ignore blank space\n        } else {\n            char = strings.Map(func(c\
    \ rune) rune {\n                switch {\n                case strings.ContainsRune(\"\
    !\", c):\n                    return '!' // if character is ! change it to !\n\
    \                case strings.ContainsRune(\"?\", c):\n                    return\
    \ '?' // if character is ? change it to ?\n                case strings.ContainsRune(\"\
    ,\", c):\n                    return ',' // if character is , change it to ,\n\
    \                case strings.ContainsRune(\":\", c):\n                    return\
    \ ':' // if character is : change it to :\n                default:\n        \
    \            return c\n                }\n            }, w) // replace all characters\
    \ with their ascii values\n            result += char + lastWord\n        }\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5w2sql0n_test.go:21:14: undefined: strings

    /tmp/tmp5w2sql0n_test.go:28:13: undefined: char

    /tmp/tmp5w2sql0n_test.go:28:20: undefined: strings

    /tmp/tmp5w2sql0n_test.go:30:22: undefined: strings

    /tmp/tmp5w2sql0n_test.go:32:22: undefined: strings

    /tmp/tmp5w2sql0n_test.go:34:22: undefined: strings

    /tmp/tmp5w2sql0n_test.go:36:22: undefined: strings

    /tmp/tmp5w2sql0n_test.go:42:23: undefined: char

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075204
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    return fmt.Sprintf(\"%s\", strings.Map(func(x rune) rune {\n        i, _\
    \ := x.Int()\n        if i <= 127 { // space character should be lower case\n\
    \            return x.String()\n        }\n        x := x + 32\n        if x >=\
    \ 127 { // upper case letter should be lower case\n            x -= 32\n     \
    \   }\n        return string([]rune{'a'+x, 'a'+x})\n    }, []rune(s)))\n}\n\n\
    func TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual:\
    \ candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"\
    ), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\"\
    \ },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\"\
    \ },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpmnelooev_test.go:21:30:\
    \ undefined: strings\n/tmp/tmpmnelooev_test.go:22:19: x.Int undefined (type rune\
    \ has no field or method Int)\n/tmp/tmpmnelooev_test.go:24:22: x.String undefined\
    \ (type rune has no field or method String)\n/tmp/tmpmnelooev_test.go:26:11: no\
    \ new variables on left side of :=\n/tmp/tmpmnelooev_test.go:30:16: cannot use\
    \ string([]rune{\u2026}) (value of type string) as type rune in return statement\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075204
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    ans := \"\"\n    w := make([]rune, 0)\n    for _, r := range s {\n      \
    \  if !isLetter(r) {\n            w = append(w, r)\n            continue\n   \
    \     }\n        ans += string(r)\n        w := append(w, \" \")\n    }\n    for\
    \ i := len(s); i > 0; i-- {\n        r := s[len(s)-i-1]\n        if !isLetter(r)\
    \ {\n            ans = s[len(s)-i-1] + ans\n            continue\n        }\n\
    \        ans = s[len(s)-i-1] + string(r)\n    }\n    return ans\n}\n\nfunc TestAnti_Shuffle(t\
    \ *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"),\
    \ expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\"\
    \ },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual:\
    \ candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqdnj9sy2_test.go:24:13: undefined: isLetter

    /tmp/tmpqdnj9sy2_test.go:29:9: w declared but not used

    /tmp/tmpqdnj9sy2_test.go:29:24: cannot use " " (untyped string constant) as rune
    value in argument to append

    /tmp/tmpqdnj9sy2_test.go:33:13: undefined: isLetter

    /tmp/tmpqdnj9sy2_test.go:34:19: invalid operation: s[len(s) - i - 1] + ans (mismatched
    types byte and string)

    /tmp/tmpqdnj9sy2_test.go:37:15: invalid operation: s[len(s) - i - 1] + string(r)
    (mismatched types byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075204
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var ordered = []rune(s)\n    var j int\n    for i := 0; i < len(s); i++ {\n\
    \        if ordered[i] != ' ' {\n            ordered[j] = ordered[i]\n       \
    \     j++\n        }\n    }\n    for i := j; i < len(s); i++ {\n        ordered[i]\
    \ = s[i-j]\n    }\n    return string(ordered)\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg7f35hfe_test.go:30:22: cannot use s[i - j] (value of type byte) as type
    rune in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075204
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    n := len(s)\n    i := 0\n    j := n - 1\n    x := []rune(s)\n    q := 0\n\
    \    l := 0\n    for i < j {\n        if x[i] > x[j] {\n            q = x[i]\n\
    \            x[i] = x[j]\n            x[j] = q\n            i++\n            j--\n\
    \        } else {\n            q = x[j]\n            x[j] = x[i]\n           \
    \ x[i] = q\n            j--\n        }\n    }\n    s = string(x)\n    fmt.Println(\"\
    Anti-Shuffle of '\" + s + \"' is \" + s)\n    return s\n}\n\nfunc TestAnti_Shuffle(t\
    \ *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"),\
    \ expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\"\
    \ },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual:\
    \ candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsg7sfqfk_test.go:26:5: l declared but not used

    /tmp/tmpsg7sfqfk_test.go:29:17: cannot use x[i] (variable of type rune) as type
    int in assignment

    /tmp/tmpsg7sfqfk_test.go:31:20: cannot use q (variable of type int) as type rune
    in assignment

    /tmp/tmpsg7sfqfk_test.go:35:17: cannot use x[j] (variable of type rune) as type
    int in assignment

    /tmp/tmpsg7sfqfk_test.go:37:20: cannot use q (variable of type int) as type rune
    in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075204
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // Write your code here!\n    return s\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__1\
    \ (0.00s)\n        tmptnk_k6rd_test.go:44: expected 'ehllo', got 'hello'\n   \
    \ --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n        tmptnk_k6rd_test.go:44:\
    \ expected 'bemnru', got 'number'\n    --- FAIL: TestAnti_Shuffle/test_num__4\
    \ (0.00s)\n        tmptnk_k6rd_test.go:44: expected 'Hello !!!Wdlor', got 'Hello\
    \ World!!!'\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n        tmptnk_k6rd_test.go:44:\
    \ expected '.Hi My aemn is Meirst .Rboot How aer ?ouy', got 'Hi. My name is Mister\
    \ Robot. How are you?'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075204
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var newString []rune\n    splitByWords := strings.Split(s, \" \")\n\n   \
    \ // We will keep a list of all the words arranged in descending order.\n    //\
    \ This list will also contain blank spaces. \n    wordList := make([]string, len(splitByWords))\n\
    \n    // Populate the wordList by getting the ascii value of the letters of each\
    \ word.\n    // So if we have a string like \"I love programming\" we will get:\n\
    \    // [97 98 99 32]\n    for i := range splitByWords {\n        wordAsc := []rune(strings.ToUpper(splitByWords[i]))\n\
    \        for j := range wordAsc {\n            wordAsc[j] = rune(i + 97)\n   \
    \     }\n        wordList = append(wordList, string(wordAsc))\n    }\n\n    //\
    \ We will now sort the words in wordList in descending order (from most to least).\n\
    \    // We will use the 'sort' package to sort the list in descending order.\n\
    \    // https://golang.org/pkg/sort/\n    sort.Sort(sort.Reverse(sort.StringSlice(wordList)))\n\
    \n    // We will now replace the letters in wordList with the sorted version.\n\
    \    for i := range wordList {\n        newString = append(newString, wordList[i])\n\
    \    }\n\n    // We will now replace all the spaces with '!' since they are also\
    \ sorted in the descending order.\n    for i := range newString {\n        if\
    \ newString[i] == ' ' {\n            newString[i] = '!'\n        }\n    }\n\n\
    \    // Now we need to convert the new string to a string using rune.\n    //\
    \ The 'rune' package is similar to 'int'. You can read more about it here:\n \
    \   // https://golang.org/pkg/unicode/\n    return string(newString)\n}\n\nfunc\
    \ TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"\
    hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected:\
    \ \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n \
    \    { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n\
    \     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu30orj4l_test.go:22:21: undefined: strings

    /tmp/tmpu30orj4l_test.go:32:27: undefined: strings

    /tmp/tmpu30orj4l_test.go:42:5: undefined: sort

    /tmp/tmpu30orj4l_test.go:46:39: cannot use wordList[i] (variable of type string)
    as type rune in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075204
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var chars string\n    var j int\n    var k int\n\n    for i := 0; i < len(s);\
    \ i++ {\n        if s[i] != ' ' {\n            chars += s[i]\n            j =\
    \ i\n        }\n    }\n\n    chars = chars + \" \"\n\n    for k = len(s) - 1;\
    \ k >= 0; k-- {\n        if s[k] < chars[j] {\n            chars = chars[0 : len(chars)-1]\
    \ + s[k]\n            j = len(s) - 1\n        } else {\n            j = k\n  \
    \      }\n    }\n    return chars\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n\
    \  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw4y2mym0_test.go:27:13: invalid operation: chars += s[i] (mismatched types
    string and byte)

    /tmp/tmpw4y2mym0_test.go:36:26: invalid operation: chars[0:len(chars) - 1] + s[k]
    (mismatched types string and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075204
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    if len(s) == 0 {\n        return s\n    }\n\n    var ordered = make([]string,\
    \ len(s))\n    var reordered = make([]string, len(s))\n\n    pos := 0\n    for\
    \ _, v := range s {\n        ordered[pos] = v\n        pos = pos + 1\n    }\n\n\
    \    pos := 0\n    for pos <= len(s)-1 {\n        v := ordered[pos]\n        for\
    \ pos := pos - 1; pos >= 0; pos-- {\n            if ordered[pos] > v {\n     \
    \           reordered[pos] = ordered[pos]\n                ordered[pos] = v\n\
    \                break\n            }\n        }\n    }\n\n    return reordered\n\
    }\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual:\
    \ candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"\
    ), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\"\
    \ },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\"\
    \ },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6858q4ti_test.go:30:24: cannot use v (variable of type rune) as type string
    in assignment

    /tmp/tmp6858q4ti_test.go:34:9: no new variables on left side of :=

    /tmp/tmp6858q4ti_test.go:46:12: cannot use reordered (variable of type []string)
    as type string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075205
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    for _, r := range s {\n        if r == ' ' {\n   \
    \         result = result + r\n        }\n        if r > 'Z' {\n            result\
    \ = result + r + r\n        }\n        if r < 'A' {\n            result = result\
    \ + r + r\n        }\n    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmps_lu6jtj_test.go:24:22: invalid operation: result + r (mismatched types
    string and rune)

    /tmp/tmps_lu6jtj_test.go:27:22: invalid operation: result + r (mismatched types
    string and rune)

    /tmp/tmps_lu6jtj_test.go:30:22: invalid operation: result + r (mismatched types
    string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075205
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    letters := []rune(s)\n    sort.Sort(sort.Reverse(sort.StringSlice(letters)))\n\
    \    return string(letters)\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0cl_3ogl_test.go:22:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075205
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    letters := []string{}\n    s := strings.TrimSpace(s)\n    for _, v := range\
    \ s {\n        letters = append(letters, v)\n    }\n    sort.Strings(letters)\n\
    \n    l := len(s)\n    for i := 0; i < l; i++ {\n        j := i\n        for ;\
    \ j < l && letters[j-1] > letters[j]; j++ {\n        }\n        letters[j-1],\
    \ letters[j] = letters[j], letters[j-1]\n    }\n    return strings.Join(letters,\
    \ \" \")\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0ichykp8_test.go:22:7: no new variables on left side of :=

    /tmp/tmp0ichykp8_test.go:22:10: undefined: strings

    /tmp/tmp0ichykp8_test.go:24:35: cannot use v (variable of type rune) as type string
    in argument to append

    /tmp/tmp0ichykp8_test.go:26:5: undefined: sort

    /tmp/tmp0ichykp8_test.go:35:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075205
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var words []string\n    words := strings.Split(s, \" \")\n    sort.Strings(words)\n\
    \    return strings.Join(words, \"\")\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4es2o_av_test.go:22:11: no new variables on left side of :=

    /tmp/tmp4es2o_av_test.go:22:14: undefined: strings

    /tmp/tmp4es2o_av_test.go:23:5: undefined: sort

    /tmp/tmp4es2o_av_test.go:24:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075205
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    arr := strings.Fields(s)\n    n := len(arr)\n\n    // Create a map of first\
    \ character to last character of the array\n    // and reverse the array because\
    \ we want each character in the\n    // original array to be replaced with the\
    \ character after it in\n    // the reversed array\n    swapMap := make(map[rune]rune)\n\
    \    for i := 0; i < n; i++ {\n        swapMap[arr[i]] = arr[n - 1 - i]\n    }\n\
    \n    // Replace each character in the original array with the character after\
    \ it in the reversed array\n    for i := 0; i < n; i++ {\n        arr[i] = swapMap[arr[i]]\n\
    \    }\n\n    // Join the elements of the array back together using a space delimiter\n\
    \    return strings.Join(arr, \" \")\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyval31vi_test.go:21:12: undefined: strings

    /tmp/tmpyval31vi_test.go:39:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075206
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var words []string\n    for _, v := range strings.Split(s, \" \") {\n   \
    \     words = append(words, v)\n    }\n    var result []string\n    for _, w :=\
    \ range words {\n        for i := 0; i < len(w); i++ {\n            index := int(w[i])\n\
    \            if index > 7 {\n                index = 7\n            }\n      \
    \      result[strings.Index(result, \"\")] = w[:i] + string(index)\n        }\n\
    \    }\n    return strings.Join(result, \"\")\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3n9ifrzv_test.go:22:23: undefined: strings

    /tmp/tmp3n9ifrzv_test.go:32:20: undefined: strings

    /tmp/tmp3n9ifrzv_test.go:35:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075206
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Fields(s)\n    l := len(words)\n    antiShuffled := make([]string,\
    \ 0, l)\n    var lastWord string\n    var j int\n    for i := 0; i < l; i++ {\n\
    \        j := rand.Intn(len(words))\n        antiShuffled = append(antiShuffled,\
    \ words[j])\n        words = words[:j]\n        words = append(words, lastWord)\n\
    \        lastWord = antiShuffled[len(antiShuffled)-1]\n    }\n    fmt.Println(\"\
    anti_shuffle:\", s, antiShuffled, len(antiShuffled))\n    return strings.Join(antiShuffled,\"\
    \ \")\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnkd7c9wz_test.go:21:14: undefined: strings

    /tmp/tmpnkd7c9wz_test.go:25:9: j declared but not used

    /tmp/tmpnkd7c9wz_test.go:27:14: undefined: rand

    /tmp/tmpnkd7c9wz_test.go:34:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075206
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var result strings.Builder\n    var j int\n    for _, v := range s {\n  \
    \      // If the new character is less than the current one, move it up.\n   \
    \     if v < s[j] {\n            j = j - 1\n        }\n        // If the new character\
    \ is greater than the current one, move it down.\n        if v > s[j] {\n    \
    \        j = j + 1\n        }\n        // If the new character is the same as\
    \ the current one, do nothing.\n        if v == s[j] {\n            continue\n\
    \        }\n        result.WriteString(s[k])\n    }\n    return result.String()\n\
    }\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual:\
    \ candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"\
    ), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\"\
    \ },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\"\
    \ },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprbxw0o4f_test.go:21:16: undefined: strings

    /tmp/tmprbxw0o4f_test.go:25:16: invalid operation: v < s[j] (mismatched types
    rune and byte)

    /tmp/tmprbxw0o4f_test.go:29:16: invalid operation: v > s[j] (mismatched types
    rune and byte)

    /tmp/tmprbxw0o4f_test.go:33:17: invalid operation: v == s[j] (mismatched types
    rune and byte)

    /tmp/tmprbxw0o4f_test.go:36:30: undefined: k

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075206
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var result string = \"\"\n    words := strings.Split(s, \" \")\n    words\
    \ := removeDuplicates(words)\n    sort.Strings(words)\n    for _, word := range\
    \ words {\n        result += word + \" \"\n    }\n    return strings.Trim(result,\
    \ \" \")\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5w0bnsv4_test.go:22:14: undefined: strings

    /tmp/tmp5w0bnsv4_test.go:23:11: no new variables on left side of :=

    /tmp/tmp5w0bnsv4_test.go:23:14: undefined: removeDuplicates

    /tmp/tmp5w0bnsv4_test.go:24:5: undefined: sort

    /tmp/tmp5w0bnsv4_test.go:28:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075206
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    chars := make([]string, 0)\n    for\
    \ _, word := range words {\n        chars = append(chars, []rune(word)...)\n \
    \   }\n    sort.Sort(sort.Reverse(sort.StringSlice(chars)))\n    chars = append(chars,\
    \ []rune(\"\")...)\n    return strings.Join(chars, \"\")\n}\n\nfunc TestAnti_Shuffle(t\
    \ *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"),\
    \ expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\"\
    \ },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual:\
    \ candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7gqh85qo_test.go:21:14: undefined: strings

    /tmp/tmp7gqh85qo_test.go:26:5: undefined: sort

    /tmp/tmp7gqh85qo_test.go:27:27: cannot use []rune("") (value of type []rune) as
    type []string in argument to append

    /tmp/tmp7gqh85qo_test.go:28:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075206
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    for _, word := range strings.Split(s, \" \") {\n \
    \       for _, c := range word {\n            if int(c) < 97 {\n             \
    \   result += string([]rune{'!', 'o', 'l', 'l', c})\n            } else {\n  \
    \              result += string([]rune{'!', 'o', 'r', 'r', c})\n            }\n\
    \        }\n        result += \" \"\n    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t\
    \ *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"),\
    \ expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\"\
    \ },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual:\
    \ candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpycu9vqpg_test.go:22:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075206
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    n := len(s)\n    var res string\n    var i int\n    for ; i < n; i++ {\n\
    \        var j int\n        for ; j < i; j++ {\n            if s[j] < s[i] {\n\
    \                var res string\n                for k := j; k < n; k++ {\n  \
    \                  res += s[k]\n                }\n                res = res +\
    \ s[j] // add back letter from lower index\n                for k := j + 1; k\
    \ < n; k++ {\n                    res += s[k]\n                }\n           \
    \     res = res + s[i] // add back letter from higher index\n                for\
    \ k := j; k < n; k++ {\n                    res += s[k]\n                }\n \
    \               res = res + s[j] // add back letter from lower index\n       \
    \         for k := j + 1; k < n; k++ {\n                    res += s[k]\n    \
    \            }\n                res = res + s[i] // add back letter from higher\
    \ index\n                res += s[j] // add back letter from lower index\n   \
    \             for k := j; k < n; k++ {\n                    res += s[k]\n    \
    \            }\n                res = res + s[j] // add back letter from higher\
    \ index\n                for k := j + 1; k < n; k++ {\n                    res\
    \ += s[k]\n                }\n                res = res + s[i] // add back letter\
    \ from higher index\n                for k := j; k < n; k++ {\n              \
    \      res += s[k]\n                }\n                res = res + s[j] // add\
    \ back letter from lower index\n                for k := j + 1; k < n; k++ {\n\
    \                    res += s[k]\n                }\n                res = res\
    \ + s[i]\n                res = res + s[j]\n                res = res + s[i]\n\
    \                res = res + s[j]\n                res = res + s[i]\n        \
    \        res = res + s[j]\n                res = res + s[i]\n                res\
    \ = res + s[j]\n                res = res + s[i]\n                res = res +\
    \ s[j]\n                res = res + s[i]\n                res = res + s[j]\n \
    \               res = res + s[i]\n                res = res + s[j]\n         \
    \       res = res + s[i]\n                res = res + s[j]\n                res\
    \ = res + s[i]\n                res = res + s[j]\n                res = res +\
    \ s[i]\n                res = res + s[j]\n                res = res + s[i]\n \
    \               res = res + s[j]\n                res = res + s[i]\n         \
    \       res = res + s[j]\n                res = res + s[i]\n                res\
    \ = res + s[j]\n                res = res + s[i]\n                res = res +\
    \ s[j]\n                res = res + s[i]\n                res = res + s[j]\n \
    \               res = res + s[i]\n                res = res + s[j]\n         \
    \       res = res + s[i]\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpc3gic4hg_test.go:95:6: expected ''('', found TestAnti_Shuffle

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075205
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // Your code here\n    chars := map[rune]rune{'a': 'e', 'e': 'a', 'i': 'o',\
    \ 'o': 'i', 'u': 'u', 'y': 'r', 'd': 't', 'r': 'y', 's': 's', 't': 'd', 'h': 'h',\
    \ 'g': 'f', 'f': 'g', 'j': 'z', 'z': 'j', 'x': 'x', 'c': 'v', 'v': 'c', 'b': 'b',\
    \ 'n': 'n', 'm': 'm', 'p': 'p', 'v': 'v', ':': '.', '-': '_', '?': '?'}\n    s\
    \ := make([]rune, len(s))\n    for i, r := range s {\n        s[i] = chars[r]\n\
    \    }\n\n    return string(s)\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n \
    \ candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpajjy8tx3_test.go:22:248: duplicate key 118 in map literal

    /tmp/tmpajjy8tx3_test.go:23:7: no new variables on left side of :=

    /tmp/tmpajjy8tx3_test.go:23:10: cannot use make([]rune, len(s)) (value of type
    []rune) as type string in assignment

    /tmp/tmpajjy8tx3_test.go:25:9: cannot assign to s[i] (value of type byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075206
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // Write a function that takes a string and returns an ordered version of\
    \ it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> anti_shuffle(\"Hi\")\n    // \"Hi\"\n    // >>> anti_shuffle(\"hello\"\
    )\n    // \"ehllo\"\n    // >>> anti_shuffle(\"Hello World!!!\")\n    // \"Hello\
    \ !!!Wdlor\"\n    // >>> anti_shuffle(\"Hello World !@#$%^&*()[]\")\n    // \"\
    Hello World !@#$%^&*()[]\"\n\n    // Return \"\" if no input is given\n    if\
    \ len(s) == 0 {\n        return \"\"\n    }\n\n    var result string = \"\"\n\
    \    current := s[0]\n    prev := \"\"\n    for _, c := range s {\n        if\
    \ c == current {\n            result += prev\n            prev = \"\"\n      \
    \      current = \"\"\n        } else {\n            prev += c\n            current\
    \ = c\n        }\n    }\n    result += prev\n\n    return result\n}\n\nfunc TestAnti_Shuffle(t\
    \ *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"),\
    \ expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\"\
    \ },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual:\
    \ candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0qifszes_test.go:45:17: invalid operation: c == current (mismatched types
    rune and byte)

    /tmp/tmp0qifszes_test.go:48:23: cannot use "" (untyped string constant) as byte
    value in assignment

    /tmp/tmp0qifszes_test.go:50:13: invalid operation: prev += c (mismatched types
    string and rune)

    /tmp/tmp0qifszes_test.go:51:23: cannot use c (variable of type rune) as type byte
    in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075206
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var output string\n    words := strings.Split(s, \" \")\n    sort.Strings(words)\n\
    \    for _, word := range words {\n        output += string([]rune(word)[rand.Intn(len(word))])\n\
    \    }\n    return output\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkgc8l9h0_test.go:22:14: undefined: strings

    /tmp/tmpkgc8l9h0_test.go:23:5: undefined: sort

    /tmp/tmpkgc8l9h0_test.go:25:39: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075206
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var output []rune\n\n    // Split string into words\n    for _, word := range\
    \ strings.Fields(s) {\n        for _, c := range word {\n            output =\
    \ append(output, c)\n        }\n    }\n    output = append(output, rune(' '))\n\
    \    fmt.Println(\"anti_shuffle input\", s)\n    fmt.Println(\"anti_shuffle output\"\
    , string(output))\n\n    // Build new string by ordering characters\n    for _,\
    \ char := range output {\n        char := char + char\n        output := append(output,\
    \ char)\n    }\n    fmt.Println(\"anti_shuffle output\", string(output))\n   \
    \ return string(output)\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp64eb0sh8_test.go:24:26: undefined: strings

    /tmp/tmp64eb0sh8_test.go:36:9: output declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075206
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    splittedWords := strings.Split(s, \" \")\n    orderedWords := make([]string,\
    \ 0)\n    letters := []int{65, 97, 122, 48}\n    for _, word := range splittedWords\
    \ {\n        orderedWord = make([]string, 0)\n        for _, letter := range word\
    \ {\n            orderedWord := append(orderedWord, string(letters[int(letter)])+string(letters[int(letter)]))\n\
    \        }\n        orderedWords = append(orderedWords, strings.Join(orderedWord,\
    \ \"\"))\n    }\n    return strings.Join(orderedWords, \" \")\n}\n\nfunc TestAnti_Shuffle(t\
    \ *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"),\
    \ expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\"\
    \ },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual:\
    \ candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgjy6nrp6_test.go:21:22: undefined: strings

    /tmp/tmpgjy6nrp6_test.go:25:9: undefined: orderedWord

    /tmp/tmpgjy6nrp6_test.go:27:35: undefined: orderedWord

    /tmp/tmpgjy6nrp6_test.go:29:45: undefined: strings

    /tmp/tmpgjy6nrp6_test.go:29:58: undefined: orderedWord

    /tmp/tmpgjy6nrp6_test.go:31:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075206
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var buf bytes.Buffer\n    var words []string\n    letters := map[rune]rune{'a':\
    \ 0, 'b': 1, 'c': 2, 'd': 3, 'e': 4,\n        'f': 5, 'g': 6, 'h': 7, 'i': 8,\
    \ 'j': 9, 'k': 10, 'l': 11,\n        'm': 12, 'n': 13, 'o': 14, 'p': 15, 'q':\
    \ 16, 'r': 17, 's': 18,\n        't': 19, 'u': 20, 'v': 21, 'w': 22, 'x': 23,\
    \ 'y': 24, 'z': 25,\n    }\n    for _, l := range s {\n        if letters[l] <\
    \ 26 {\n            letters[l] += 2\n        } else {\n            letters[l]++\n\
    \        }\n        if letters[l] > 25 {\n            letters[l] -= 2\n      \
    \  }\n    }\n    for _, l := range s {\n        if letters[l] < 26 {\n       \
    \     letters[l] += 2\n        } else {\n            letters[l]++\n        }\n\
    \        if letters[l] > 25 {\n            letters[l] -= 2\n        }\n      \
    \  if l != ' ' {\n            words = append(words, string(l))\n        }\n  \
    \  }\n    for _, w := range words {\n        buf.WriteRune(lcase(w.ToLower()))\n\
    \    }\n    return buf.String()\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n\
    \  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj1rxnel5_test.go:21:13: undefined: bytes

    /tmp/tmpj1rxnel5_test.go:52:23: undefined: lcase

    /tmp/tmpj1rxnel5_test.go:52:31: w.ToLower undefined (type string has no field
    or method ToLower)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075206
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // Use a map for storing the characters\n    charMap := make(map[rune]bool)\n\
    \    for _, r := range s {\n        if !charMap[r] {\n            charMap[r] =\
    \ true\n            s = strings.Replace(s, \"_\", string([]rune{r}), -1)\n   \
    \     }\n    }\n    return s\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplnp0kx_2_test.go:26:17: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075206
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    s := strings.Map(func(c rune) rune {\n        if strings.IndexRune(\" \"\
    , c) > strings.IndexRune(\" \", c + 1) {\n            return ' '\n        } else\
    \ {\n            return c\n        }\n    }, s)\n    return s\n}\n\nfunc TestAnti_Shuffle(t\
    \ *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"),\
    \ expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\"\
    \ },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual:\
    \ candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvslqjn72_test.go:21:7: no new variables on left side of :=

    /tmp/tmpvslqjn72_test.go:21:10: undefined: strings

    /tmp/tmpvslqjn72_test.go:22:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075206
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    words2 := make([]string, 0)\n    for\
    \ _, v := range words {\n        w := strings.Replace(v, \"_\", \" \", -1)\n \
    \       words2 = append(words2, w)\n    }\n    for i := len(words2) - 1; i > 0;\
    \ i-- {\n        for j := i; j > 0; j-- {\n            if words2[j] < words2[j-1]\
    \ {\n                words2[j], words2[j-1] = words2[j-1], words2[j]\n       \
    \     }\n        }\n    }\n    return strings.Join(words2, \" \")\n}\n\nfunc TestAnti_Shuffle(t\
    \ *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"),\
    \ expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\"\
    \ },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual:\
    \ candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkuo0b8mj_test.go:21:14: undefined: strings

    /tmp/tmpkuo0b8mj_test.go:24:14: undefined: strings

    /tmp/tmpkuo0b8mj_test.go:34:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075207
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var words []string\n    var result string\n    for _, word := range strings.Split(s,\
    \ \" \") {\n        word = strings.ToUpper(word)\n        words = append(words,\
    \ word)\n    }\n\n    for _, word := range words {\n        result = result +\
    \ word\n        for _, chr := range word {\n            result += chr\n      \
    \  }\n        result = result + \" \"\n    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t\
    \ *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"),\
    \ expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\"\
    \ },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual:\
    \ candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpira_uqju_test.go:23:26: undefined: strings

    /tmp/tmpira_uqju_test.go:24:16: undefined: strings

    /tmp/tmpira_uqju_test.go:31:13: invalid operation: result += chr (mismatched types
    string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075207
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    for _, word := range strings.Fields(s) {\n       \
    \ // convert ASCII value to int\n        char := string([]byte(word))\n      \
    \  char := string([]byte(strconv.Itoa(int(char))))\n\n        // swap chars\n\
    \        result += char\n    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t\
    \ *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"),\
    \ expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\"\
    \ },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual:\
    \ candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuin3o1ma_test.go:22:26: undefined: strings

    /tmp/tmpuin3o1ma_test.go:25:14: no new variables on left side of :=

    /tmp/tmpuin3o1ma_test.go:25:31: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075208
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    if len(s)%2 != 0 {\n        fmt.Printf(\"Anti shuffle error: string must\
    \ be even length\\n\")\n    }\n    out := \"\"\n    count := 0\n    temp := \"\
    \"\n    end := len(s)/2\n    for i := 0; i < end; i++ {\n        count += len(s[i])\n\
    \        if count > len(s[i+1]) {\n            temp = s[i]\n            s[i] =\
    \ s[i+1]\n            s[i+1] = temp\n        }\n    }\n    for i := 0; i < end;\
    \ i++ {\n        temp = s[i]\n        count -= len(s[i])\n        for j := i +\
    \ 1; j < end; j++ {\n            if s[i] != s[j] {\n                count += len(s[j])\n\
    \                temp = s[i]\n                s[i] = s[j]\n                s[j]\
    \ = temp\n                count--\n            }\n        }\n        if count\
    \ > len(s[i+1]) {\n            temp = s[i]\n            s[i] = s[i+1]\n      \
    \      s[i+1] = temp\n        }\n        out += s[i]\n    }\n    return out\n\
    }\n</code>\nAnd the test results:\n<code>\npackage anti_shuffle_test\n\nimport\
    \ (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc TestAnti_Shuffle(t *testing.T) {\n\
    \  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6wv5r4dr_test.go:57:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075207
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var s1 string\n    var s2 string\n    var s3 string\n    var s4 string\n\
    \    var s5 string\n    var s6 string\n    var s7 string\n    var s8 string\n\
    \    var s9 string\n    var s10 string\n    var s11 string\n    var s12 string\n\
    \    var s13 string\n    var s14 string\n    var s15 string\n    var s16 string\n\
    \    var s17 string\n    var s18 string\n    var s19 string\n    var s20 string\n\
    \    var s21 string\n    var s22 string\n    var s23 string\n    var s24 string\n\
    \    var s25 string\n    var s26 string\n    var s27 string\n    var s28 string\n\
    \    var s29 string\n    var s30 string\n    var s31 string\n    var s32 string\n\
    \    var s33 string\n    var s34 string\n    var s35 string\n    var s36 string\n\
    \    var s37 string\n    var s38 string\n    var s39 string\n    var s40 string\n\
    \    var s41 string\n    var s42 string\n    var s43 string\n    var s44 string\n\
    \    var s45 string\n    var s46 string\n    var s47 string\n    var s48 string\n\
    \    var s49 string\n    var s50 string\n    var s51 string\n    var s52 string\n\
    \    var s53 string\n    var s54 string\n    var s55 string\n    var s56 string\n\
    \    var s57 string\n    var s58 string\n    var s59 string\n    var s60 string\n\
    \    var s61 string\n    var s62 string\n    var s63 string\n    var s64 string\n\
    \    var s65 string\n    var s66 string\n    var s67 string\n    var s68 string\n\
    \    var s69 string\n    var s70 string\n    var s71 string\n    var s72 string\n\
    \    var s73 string\n    var s74 string\n    var s75 string\n    var s76 string\n\
    \    var s77 string\n    var s78 string\n    var s79 string\n    var s80 string\n\
    \    var s81 string\n    var s82 string\n    var s83 string\n    var s84 string\n\
    \    var s85 string\n    var s86 string\n    var s87 string\n    var s88 string\n\
    \    var s89 string\n    var s90 string\n    var s91 string\n    var s92 string\n\
    \    var s93 string\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpfl406oft_test.go:114:6: expected ''('', found TestAnti_Shuffle

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075207
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    result := \"\"\n    words := strings.Split(s, \" \")\n\n    for _, w := range\
    \ words {\n        // Create slice of letters in ascending order\n        var\
    \ a []rune\n        ascii := make([]rune, len(w))\n        for i := range w {\n\
    \            ascii[i] = w[i]\n        }\n\n        // Go through the slices in\
    \ order\n        for i, j := 0, len(a)-1; i < j; i, j = i+1, j-1 {\n         \
    \   // If letters are the same length, shift them\n            if i != len(a)\
    \ || j != len(a[i]) {\n                a[i], a[j] = a[j], a[i]\n             \
    \   continue\n            }\n            if a[i] > a[j] {\n                //\
    \ If letters are in order swap them\n                a[i], a[j] = a[j], a[i]\n\
    \            }\n        }\n\n        // Reverse the letters\n        a = append(a[0:j],\
    \ a[j+1:]...)\n\n        // Append the letters to result\n        for _, l :=\
    \ range a {\n            result = result + string(l)\n        }\n    }\n\n   \
    \ return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp164q1zaj_test.go:22:14: undefined: strings

    /tmp/tmp164q1zaj_test.go:35:40: invalid argument: a[i] (variable of type rune)
    for len

    /tmp/tmp164q1zaj_test.go:46:24: undefined: j

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075208
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    list := strings.Split(s, \" \")\n    buf := make([]byte, len(s))\n\n    for\
    \ i := range list {\n        j := strings.Index(list, list[i])\n        buf[i]\
    \ = list[i]\n        if j != -1 {\n            list[i] = list[j]\n           \
    \ list[j] = buf[i]\n        }\n    }\n    return strings.Join(list, \" \")\n}\n\
    \nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual:\
    \ candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"\
    ), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\"\
    \ },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\"\
    \ },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4w4p6ctl_test.go:21:13: undefined: strings

    /tmp/tmp4w4p6ctl_test.go:25:14: undefined: strings

    /tmp/tmp4w4p6ctl_test.go:32:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075208
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    letters := make([]string, len(s))\n    for i := range letters {\n       \
    \ letters[i] = s[i]\n    }\n    for i := 0; i < len(letters); i++ {\n        for\
    \ j := 0; j < len(letters); j++ {\n            if i+j < len(letters) {\n     \
    \           if letters[i+j] > letters[j] {\n                    letters[j] = letters[i+j]\n\
    \                }\n            }\n        }\n    }\n    return strings.Join(letters,\
    \ \"\")\n}\n</code>\n<|/ a |>\n<| c |>\nI implemented this solution for my problem\
    \ and it works flawlessly. I tested it for 3 out of 5 test cases and it worked\
    \ fine.\n<|/ c |>\n<| a |>\nHere's a one-liner that doesn't do any looping or\
    \ string splitting, which makes it a bit simpler:\n<code>\nfunc TestAnti_Shuffle(t\
    \ *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"),\
    \ expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\"\
    \ },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual:\
    \ candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmppz7oy3da_test.go:36:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075207
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    // Create a map of letter position\
    \ in string to a letter value\n    pos := map[int]string{\n        0:   \"\",\n\
    \        1:   \"a\",\n        2:   \"b\",\n        3:   \"c\",\n        4:   \"\
    d\",\n        5:   \"e\",\n        6:   \"f\",\n        7:   \"g\",\n        8:\
    \   \"h\",\n        9:   \"i\",\n        10: \"j\",\n        11: \"k\",\n    \
    \    12: \"l\",\n        13: \"m\",\n        14: \"n\",\n        15: \"o\",\n\
    \        16: \"p\",\n        17: \"q\",\n        18: \"r\",\n        19: \"s\"\
    ,\n        20: \"t\",\n        21: \"u\",\n        22: \"v\",\n        23: \"\
    w\",\n        24: \"x\",\n        25: \"y\",\n        26: \"z\",\n    }\n    for\
    \ _, word := range words {\n        for _, c := range word {\n            pos[c]\
    \ = word\n        }\n    }\n    sort.Sort(sort.Reverse(sortFunc(pos)))\n\n   \
    \ // Recon\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmplr44o9an_test.go:60:6: expected ''('', found TestAnti_Shuffle

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075208
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result += \"!\"\n        for _, char := range word {\n\
    \            result += string([]byte{byte(97 - int(char))})\n        }\n     \
    \   result += \" \"\n    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfrcdfxhy_test.go:21:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075209
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var new_s = \"\"\n    spaces := \"\"\n    for _, r := range s {\n       \
    \ if unicode.IsSpace(r) {\n            spaces = spaces + \" \"\n        } else\
    \ {\n            new_s = new_s + spaces\n            new_s = new_s + strings.ToUpper(r)\n\
    \            spaces = \"\"\n        }\n    }\n    return new_s\n}\n\nfunc TestAnti_Shuffle(t\
    \ *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"),\
    \ expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\"\
    \ },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual:\
    \ candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbyq89omu_test.go:24:12: undefined: unicode

    /tmp/tmpbyq89omu_test.go:28:29: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075209
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var words = []string{}\n    for _, letter := range s {\n        switch letter\
    \ {\n        case ' ':\n        default:\n            words = append(words, letter)\n\
    \        }\n    }\n\n    words := make([]string, len(words)-1)\n    for i := 0;\
    \ i < len(words)-1; i++ {\n        words[i] = words[i+1]\n    }\n\n    fmt.Println(words)\n\
    \n    return strings.Join(words, \" \")\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5wyyn2ey_test.go:26:35: cannot use letter (variable of type rune) as type
    string in argument to append

    /tmp/tmp5wyyn2ey_test.go:30:11: no new variables on left side of :=

    /tmp/tmp5wyyn2ey_test.go:37:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075209
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var new_word string\n    words := strings.Split(s, \" \")\n    sorted_words\
    \ := make([]string, 0)\n    for _, word := range words {\n        sorted_words\
    \ = append(sorted_words, strings.Join([]string{string([]byte(word))}, \"\"))\n\
    \    }\n    for _, word := range sorted_words {\n        sorted_words = append(sorted_words,\
    \ strings.Repeat(word, len(word)))\n    }\n    for _, word := range sorted_words\
    \ {\n        sorted_words = append(sorted_words, strings.Repeat(string([]byte{word[0]}),\
    \ len(word)-1))\n    }\n    for _, word := range sorted_words {\n        sorted_words\
    \ = append(sorted_words, strings.Repeat(string([]byte{word[len(word) - 1]}), len(word)))\n\
    \    }\n    new_word = strings.Join(sorted_words, \" \")\n    return new_word\n\
    }\n</code>\n<|/ a dscore=1 tags=string,algorithm,language-agnostic |>\n<| a dscore=0\
    \ tags=string,algorithm,language-agnostic |>\nA slight variation on's approach.\
    \ Instead of using all letters, use \"e\" and \"i\" instead of \"o\" and \"u\"\
    . Sort each word separately, and concatenate them. \n<code>\n#include <stdio.h>\n\
    #include <string.h>\n\nint main(void)\n{\n    int eI[] = {\"e\", \"i\"};\n   \
    \ char input[15];\n    char output[15];\n    int len = sizeof(input) - 1;\n  \
    \  char *c;\n    char *pch;\n    int i = 0;\n\n    while (1)\n    {\n        printf(\"\
    Enter word: \");\n        scanf(\"%s\", input);\n        pch = strtok(input, \"\
    \ \");\n        while (pch != NULL)\n        {\n            char *pp = pch;\n\
    \            strcpy(output[i++], pch);\n            pch = strtok(NULL, \" \");\n\
    \            if (strcmp(pp, pch) < 0)\n            {\n                strcpy(output[i++],\
    \ eI[strcmp(pp, pch)]);\n            }\n        }\n        strcpy(output[i], input[i]);\n\
    \        output[i++] = '\\0';\n        printf(\"%s\\n\", output);\n        if\
    \ (strcmp(output, \"exit\") == 0)\n            break;\n    }\n    return 0;\n\
    }\n</code>\n<|/ a |>\n<| a dscore=0 |>\nYou can do this in O(n) using recursion.\
    \ At each call of the function, split the string into substring based on spaces(O(n)),\
    \ then compare the substring with all the substrings of previous calls(O(n)).\
    \ If they match, you know there is no repeated word (O(n)). Otherwise, you can\
    \ combine them and repeat until \nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpldcsky92_test.go:39:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075208
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var result string = \"\"\n    i := 0\n    for _, c := range s {\n       \
    \ if c != ' ' {\n            result = result + c\n        } else {\n         \
    \   j = i\n            for k = i; k < len(s); k++ {\n                if s[k] >\
    \ s[i] {\n                    j = k\n                }\n            }\n      \
    \      result = result + s[j] + s[i+1:]\n            i = j + 1\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfvx7eugm_test.go:25:22: invalid operation: result + c (mismatched types
    string and rune)

    /tmp/tmpfvx7eugm_test.go:27:13: undefined: j

    /tmp/tmpfvx7eugm_test.go:28:17: undefined: k

    /tmp/tmpfvx7eugm_test.go:29:22: undefined: k

    /tmp/tmpfvx7eugm_test.go:30:21: undefined: j

    /tmp/tmpfvx7eugm_test.go:30:25: undefined: k

    /tmp/tmpfvx7eugm_test.go:33:22: invalid operation: result + s[j] (mismatched types
    string and byte)

    /tmp/tmpfvx7eugm_test.go:33:33: undefined: j

    /tmp/tmpfvx7eugm_test.go:34:17: undefined: j

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075209
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Fields(s)\n    words2 := make([]string, len(words))\n  \
    \  for i, _ := range words {\n        words2[i] = anti_shuffle(words[i])\n   \
    \ }\n    return strings.Join(words2, \" \")\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7rvg3iit_test.go:21:14: undefined: strings

    /tmp/tmp7rvg3iit_test.go:26:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075209
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    l := []rune(s)\n    length := len(s)\n    anti_shuffled := \"\"\n    anti_shuffled_length\
    \ := 0\n    anti_shuffled_string := \"\"\n\n    for i := 0; i < length; i++ {\n\
    \        word := string(l[i])\n        l := []rune(word)\n\n        for j := 1;\
    \ j < len(l); j++ {\n            if l[j-1] >= l[j] {\n                l[j-1],\
    \ l[j] = l[j], l[j-1]\n            }\n        }\n\n        anti_shuffled_length\
    \ = j\n        anti_shuffled_string += string(l)\n    }\n\n    anti_shuffled =\
    \ anti_shuffled_string\n\n    for i := 0; i < len(anti_shuffled); i++ {\n    \
    \    if anti_shuffled_length == 0 {\n            anti_shuffled = anti_shuffled[:i]\
    \ + \"-\"\n            anti_shuffled = anti_shuffled + \"-\"\n            anti_shuffled\
    \ = anti_shuffled + anti_shuffled[i+1:]\n            break\n        }\n\n    \
    \    if anti_shuffled[i] == '-' {\n            anti_shuffled = anti_shuffled[:i]\
    \ + \"-\"\n            anti_shuffled = anti_shuffled + \"-\"\n            anti_shuffled\
    \ = anti_shuffled + anti_shuffled[i+1:]\n            break\n        }\n\n    \
    \    if anti_shuffled_length < length {\n            if anti_shuffled[i-1] ==\
    \ '-' && anti_shuffled_length == i+1 {\n                anti_shuffled = anti_shuffled[:i]\
    \ + \"-\"\n                anti_shuffled = anti_shuffled + \"-\"\n           \
    \     anti_shuffled = anti_shuffled + anti_shuffled[i+1:]\n                break\n\
    \            }\n            if anti_shuffled_length < length {\n             \
    \   anti_shuffled = anti_shuffled[:i] + \"-\"\n                anti_shuffled =\
    \ anti_shuffled + \"-\"\n                anti_shuffled = anti_shuffled + anti_shuffled[i+1:]\n\
    \                break\n            }\n        }\n    }\n\n    return anti_shuffled\n\
    }\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual:\
    \ candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"\
    ), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\"\
    \ },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\"\
    \ },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmvutalbx_test.go:37:32: undefined: j

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075209
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    for _, word := range words {\n    \
    \    j := len(word)\n        for i := 0; i < len(word); i++ {\n            j /=\
    \ len(word)\n        }\n        if j > 0 {\n            j %= len(word)\n     \
    \       for i := 0; i < len(word); i++ {\n                words[i] = word[j:]\
    \ + word[:i]\n            }\n        }\n    }\n    return strings.Join(words,\
    \ \" \")\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo_j2dovc_test.go:21:14: undefined: strings

    /tmp/tmpo_j2dovc_test.go:34:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075209
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    splits := strings.Split(s, \" \")\n    words := make([]string, len(splits))\n\
    \    for i := range splits {\n        words[i] = splits[i]\n    }\n    words :=\
    \ anti_shuffle_test.SortFunc(words)\n    return strings.Join(words, \" \")\n}\n\
    \nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual:\
    \ candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"\
    ), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\"\
    \ },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\"\
    \ },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmps10kfgbb_test.go:21:15: undefined: strings

    /tmp/tmps10kfgbb_test.go:26:11: no new variables on left side of :=

    /tmp/tmps10kfgbb_test.go:26:14: undefined: anti_shuffle_test

    /tmp/tmps10kfgbb_test.go:27:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075209
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // Start by converting all the non-letters to lowercase letters.\n    letters\
    \ := make([]rune, 0, len(s))\n    for _, r := range s {\n        if !IsLetter(r)\
    \ {\n            letters = append(letters, r)\n            continue\n        }\n\
    \        r := strings.ToLower(r)\n        letters = append(letters, r)\n    }\n\
    \    // Find out what all the letters are in ascending order.\n    lettersInOrder\
    \ := []rune{}\n    for _, r := range letters {\n        switch {\n        case\
    \ r >= 'a' && r <= 'z':\n            lettersInOrder = append(lettersInOrder, r)\n\
    \        case r >= 'A' && r <= 'Z':\n            lettersInOrder = append(lettersInOrder,\
    \ r)\n        case r >= '0' && r <= '9':\n            lettersInOrder = append(lettersInOrder,\
    \ r)\n        }\n    }\n    // Re-arrange letters based on the order.\n    lettersInOrder\
    \ = lettersInOrder[:len(lettersInOrder)]\n    rearranged := make([]rune, 0, len(s))\n\
    \    for _, r := range letters {\n        if !IsLetter(r) {\n            rearranged\
    \ = append(rearranged, r)\n            continue\n        }\n        for i := 0;\
    \ i < len(lettersInOrder); i++ {\n            if lettersInOrder[i] >= r && lettersInOrder[i]\
    \ <= r+rune(lettersInOrder[i+1]) {\n                letter := lettersInOrder[i]\n\
    \                lettersInOrder[i] = lettersInOrder[i+1]\n                lettersInOrder[i+1]\
    \ = letter\n            }\n        }\n        for _, r := range rearranged {\n\
    \            if lettersInOrder[r] >= r && lettersInOrder[r] <= r+rune(lettersInOrder[r+1])\
    \ {\n                letter := lettersInOrder[r]\n                lettersInOrder[r]\
    \ = lettersInOrder[r+1]\n                lettersInOrder[r+1] = letter\n      \
    \      }\n        }\n    }\n    return string(rearranged)\n}\n\nfunc TestAnti_Shuffle(t\
    \ *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"),\
    \ expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\"\
    \ },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual:\
    \ candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwkng34bo_test.go:24:13: undefined: IsLetter

    /tmp/tmpwkng34bo_test.go:28:14: undefined: strings

    /tmp/tmpwkng34bo_test.go:47:13: undefined: IsLetter

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075209
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    var newWords []string\n    words :=\
    \ append(words, \"\")\n    for i := range words {\n        j := strings.Index(words[i],\
    \ \"\")\n        var temp string\n        for k := 0; k < len(words[i]); k++ {\n\
    \            temp += string(asciiValue[words[i][k]] - asciiValue[words[i][j]])\n\
    \        }\n        newWords = append(newWords, temp)\n    }\n    return strings.Join(newWords,\
    \ \" \")\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp67_hv0op_test.go:21:14: undefined: strings

    /tmp/tmp67_hv0op_test.go:23:11: no new variables on left side of :=

    /tmp/tmp67_hv0op_test.go:25:14: undefined: strings

    /tmp/tmp67_hv0op_test.go:28:28: undefined: asciiValue

    /tmp/tmp67_hv0op_test.go:32:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075209
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    fmt.Println(s)\n    words := strings.Split(s, \" \")\n    result := \"\"\n\
    \n    for _, word := range words {\n        if result != \"\" {\n            result\
    \ += \" \"\n        }\n\n        fmt.Println(word)\n        result += \"_\" +\
    \ strings.Replace(word, \"A\", \"B\", 1)\n        result += \"_\" + strings.Replace(word,\
    \ \"C\", \"D\", 1)\n        result += \"_\" + strings.Replace(word, \"E\", \"\
    F\", 1)\n        result += \"_\" + strings.Replace(word, \"G\", \"H\", 1)\n  \
    \      result += \"_\" + strings.Replace(word, \"I\", \"J\", 1)\n        result\
    \ += \"_\" + strings.Replace(word, \"K\", \"L\", 1)\n        result += \"_\" +\
    \ strings.Replace(word, \"M\", \"N\", 1)\n        result += \"_\" + strings.Replace(word,\
    \ \"O\", \"P\", 1)\n        result += \"_\" + strings.Replace(word, \"Q\", \"\
    R\", 1)\n        result += \"_\" + strings.Replace(word, \"S\", \"T\", 1)\n  \
    \      result += \"_\" + strings.Replace(word, \"U\", \"V\", 1)\n        result\
    \ += \"_\" + strings.Replace(word, \"W\", \"X\", 1)\n        result += \"_\" +\
    \ strings.Replace(word, \"Y\", \"Z\", 1)\n    }\n\n    return result\n}\n\nfunc\
    \ TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"\
    hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected:\
    \ \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n \
    \    { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n\
    \     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2_8h7mai_test.go:22:14: undefined: strings

    /tmp/tmp2_8h7mai_test.go:31:25: undefined: strings

    /tmp/tmp2_8h7mai_test.go:32:25: undefined: strings

    /tmp/tmp2_8h7mai_test.go:33:25: undefined: strings

    /tmp/tmp2_8h7mai_test.go:34:25: undefined: strings

    /tmp/tmp2_8h7mai_test.go:35:25: undefined: strings

    /tmp/tmp2_8h7mai_test.go:36:25: undefined: strings

    /tmp/tmp2_8h7mai_test.go:37:25: undefined: strings

    /tmp/tmp2_8h7mai_test.go:38:25: undefined: strings

    /tmp/tmp2_8h7mai_test.go:39:25: undefined: strings

    /tmp/tmp2_8h7mai_test.go:39:25: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075209
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    words := append(words, \"\")\n    words\
    \ := append(words, \"\")\n    words := append(words, \"\")\n    words := append(words,\
    \ \"\")\n    words := append(words, \"\")\n    words := append(words, \"\")\n\
    \    words := append(words, \"\")\n    words := append(words, \"\")\n    words\
    \ := append(words, \"\")\n    words := append(words, \"\")\n    words := append(words,\
    \ \"\")\n    words := append(words, \"\")\n    words := append(words, \"\")\n\
    \    words := append(words, \"\")\n    words := append(words, \"\")\n    words\
    \ := append(words, \"\")\n    words := append(words, \"\")\n    words := append(words,\
    \ \"\")\n    words := append(words, \"\")\n    words := append(words, \"\")\n\
    \    words := append(words, \"\")\n    words := append(words, \"\")\n    words\
    \ := append(words, \"\")\n    words := append(words, \"\")\n    words := append(words,\
    \ \"\")\n    words := append(words, \"\")\n    words := append(words, \"\")\n\
    \    words := append(words, \"\")\n    words := append(words, \"\")\n    words\
    \ := append(words, \"\")\n    words := append(words, \"\")\n    words := append(words,\
    \ \"\")\n    words := append(words, \"\")\n    words := append(words, \"\")\n\
    \    words := append(words, \"\")\n    words := append(words, \"\")\n    words\
    \ := append(words, \"\")\n    words := append(words, \"\")\n    words := append(words,\
    \ \"\")\n    words := append(words, \"\")\n    words := append(words, \"\")\n\
    \    words := append(words, \"\")\n    words := append(words, \"\")\n    words\
    \ := append(words, \"\")\n    words := append(words, \"\")\n    words := append(words,\
    \ \"\")\n    words := append(words, \"\")\n    words := append(words, \"\")\n\
    \    words := append(words, \"\")\n    words := append(words, \"\")\n    words\
    \ := append(words, \"\")\n    words := append(words, \"\")\n    words := append(words,\
    \ \"\")\n    words := append(words, \"\")\n    words := append(words, \"\")\n\
    \    words := append(words, \"\")\n    words := append(words, \"\")\n    words\
    \ := append(words, \"\")\n    words := append(words, \"\")\n    words := append(words,\
    \ \"\")\n    words := append(words, \"\")\n    words := append(words, \"\")\n\
    \    words := append(words, \"\")\n    words := append(words, \"\")\n    words\
    \ := append(words, \"\")\n    words := append(words, \"\")\n    words := append(words,\
    \ \"\")\n    words := append(words, \"\")\n    words := append(words, \"\")\n\
    \    words := append(words, \"\")\n    words := append(words, \"\")\n    words\
    \ := append(words, \"\")\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate :=\
    \ anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpond62jfe_test.go:94:6: expected ''('', found TestAnti_Shuffle

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075208
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    result := \"\"\n    words := strings.Split(s, \" \")\n    for _, word :=\
    \ range words {\n        // Iterate over the characters of the word and use them\
    \ to\n        // sort the characters based on their ASCII value.\n        result\
    \ += \"\\\"\" + strings.Join(strings.Fields(word), \"\") + \"\\\"\"\n    }\n \
    \   return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate :=\
    \ anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzlootpqh_test.go:22:14: undefined: strings

    /tmp/tmpzlootpqh_test.go:26:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075209
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    orderedWords := make([]string, 0)\n\
    \    for _, word := range words {\n        orderedWords = append(orderedWords,\
    \ fmt.Sprintf(\"%c\", string([]byte(word))))\n    }\n    sort.Strings(orderedWords)\n\
    \    return strings.Join(orderedWords, \" \")\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy0gc98sa_test.go:21:14: undefined: strings

    /tmp/tmpy0gc98sa_test.go:26:5: undefined: sort

    /tmp/tmpy0gc98sa_test.go:27:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075209
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    if len(words) == 0 {\n        return\
    \ s\n    }\n\n    length := len(words)\n    r := make([]byte, length)\n    d :=\
    \ make([]byte, length)\n    for i := 0; i < length; i++ {\n        r[i] = words[i]\n\
    \    }\n\n    k := 0\n    pos := 0\n    j := 0\n    for i := 0; i < length; i++\
    \ {\n        j, pos = position(r[i], pos, d)\n        if j == -1 {\n         \
    \   k = k + 1\n            r[k] = r[i]\n        }\n    }\n    return string(r)\n\
    }\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual:\
    \ candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"\
    ), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\"\
    \ },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\"\
    \ },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg8tnowu3_test.go:21:14: undefined: strings

    /tmp/tmpg8tnowu3_test.go:37:18: undefined: position

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075209
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    l := make([]string, len(s))\n    for i := 0; i < len(s); i++ {\n        l\
    \ := append(l, []rune(s[i])...)\n    }\n    j := 0\n    for i := 0; i < len(l);\
    \ i += 2 {\n        j += 1\n        l[i], l[j] = l[j], l[i]\n    }\n    return\
    \ string(l)\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmxr6_eo0_test.go:23:9: l declared but not used

    /tmp/tmpmxr6_eo0_test.go:23:31: cannot convert s[i] (value of type byte) to type
    []rune

    /tmp/tmpmxr6_eo0_test.go:30:19: cannot convert l (variable of type []string) to
    type string

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075209
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Fields(s)\n    sort.Strings(words)\n    fmt.Println(words)\n\
    \    return strings.Join(words, \" \")\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpol0lbm03_test.go:21:14: undefined: strings

    /tmp/tmpol0lbm03_test.go:22:5: undefined: sort

    /tmp/tmpol0lbm03_test.go:24:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075209
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // Convert all chars to ASCII value, convert into array then sort it\n  \
    \  // return string(s)\n    return string([]byte(s))\n}\n\nfunc TestAnti_Shuffle(t\
    \ *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"),\
    \ expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\"\
    \ },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual:\
    \ candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__1\
    \ (0.00s)\n        tmpzfx1z0ye_test.go:45: expected 'ehllo', got 'hello'\n   \
    \ --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n        tmpzfx1z0ye_test.go:45:\
    \ expected 'bemnru', got 'number'\n    --- FAIL: TestAnti_Shuffle/test_num__4\
    \ (0.00s)\n        tmpzfx1z0ye_test.go:45: expected 'Hello !!!Wdlor', got 'Hello\
    \ World!!!'\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n        tmpzfx1z0ye_test.go:45:\
    \ expected '.Hi My aemn is Meirst .Rboot How aer ?ouy', got 'Hi. My name is Mister\
    \ Robot. How are you?'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075210
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    fmt.Println(s)\n    output := \"\"\n    words := strings.Split(s, \" \")\n\
    \    for _, word := range words {\n        ascii := []int{0, 0, 0}\n        for\
    \ _, c := range word {\n            ascii[c.(int) - 'a'] = 1\n        }\n    \
    \    // fmt.Println(ascii)\n        for _, c := range ascii {\n            if\
    \ c > 0 {\n                output += string([]rune{'a', 'b', 'c'})[c - 1]\n  \
    \          }\n        }\n    }\n    return output\n}\n\nfunc TestAnti_Shuffle(t\
    \ *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"),\
    \ expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\"\
    \ },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual:\
    \ candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2nlra98w_test.go:23:14:\
    \ undefined: strings\n/tmp/tmp2nlra98w_test.go:32:17: invalid operation: output\
    \ += string([]rune{\u2026})[c - 1] (mismatched types string and byte)\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075210
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    arr := strings.Split(s, \" \")\n    sort.Sort(stringSlice(arr))\n    var\
    \ result string = \"\"\n    for _, s := range arr {\n        result += s + \"\
    \ \"\n    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n \
    \ candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsg94ow2a_test.go:21:12: undefined: strings

    /tmp/tmpsg94ow2a_test.go:22:5: undefined: sort

    /tmp/tmpsg94ow2a_test.go:22:15: undefined: stringSlice

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075210
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // your code\n\n    return s\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n\
    \  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__1\
    \ (0.00s)\n        tmp_ao6lwgh_test.go:45: expected 'ehllo', got 'hello'\n   \
    \ --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n        tmp_ao6lwgh_test.go:45:\
    \ expected 'bemnru', got 'number'\n    --- FAIL: TestAnti_Shuffle/test_num__4\
    \ (0.00s)\n        tmp_ao6lwgh_test.go:45: expected 'Hello !!!Wdlor', got 'Hello\
    \ World!!!'\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n        tmp_ao6lwgh_test.go:45:\
    \ expected '.Hi My aemn is Meirst .Rboot How aer ?ouy', got 'Hi. My name is Mister\
    \ Robot. How are you?'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075211
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := make([]string, len(words))\n\
    \    for i, word := range words {\n        result[i] = string([]rune(word))\n\
    \    }\n\n    // Sort the array of string\n    for i := 1; i < len(result); i++\
    \ {\n        j := i\n        for j > 0 && result[j-1] > result[j] {\n        \
    \    j := j - 1\n        }\n        s := result[j] + \" \" + result[i]\n     \
    \   result[j] = s\n    }\n    return strings.Join(result, \" \")\n}\n\nfunc TestAnti_Shuffle(t\
    \ *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"),\
    \ expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\"\
    \ },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual:\
    \ candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbhd16gb3_test.go:21:14: undefined: strings

    /tmp/tmpbhd16gb3_test.go:31:13: j declared but not used

    /tmp/tmpbhd16gb3_test.go:36:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075210
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var output []rune\n    var counter int\n    for _, item := range strings.Fields(s)\
    \ {\n        if item != \" \" {\n            output = append(output, item)\n \
    \           counter++\n        }\n    }\n    for _, item := range strings.Fields(strings.Join(output,\
    \ \"\")) {\n        counter--\n        if counter == 0 {\n            output =\
    \ append(output, item)\n        }\n    }\n    return strings.Join(output, \"\"\
    )\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmps48_rqu5_test.go:23:26: undefined: strings

    /tmp/tmps48_rqu5_test.go:29:26: undefined: strings

    /tmp/tmps48_rqu5_test.go:35:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075210
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var new_word string = \"\"\n    words := strings.Split(s, \" \")\n    for\
    \ _, w := range words {\n        char := string([]rune(w)[1 : len([]rune(w)-1)])\n\
    \        ascii_char := []rune(w)[0]\n        char_pos := ascii_char - 48\n   \
    \     new_word += string([]rune(w))[char_pos : char_pos+len(char)] + char\n  \
    \  }\n    return new_word\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpavn10a3g_test.go:22:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075210
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    r := \"\"\n    for _, letter := range s {\n        if letter == ' ' {\n \
    \           letter = '.'\n        }\n        if letter == '.' {\n            letter\
    \ = ' '\n        }\n        if letter == '!' {\n            letter = '?'\n   \
    \     }\n        if letter == '?' {\n            letter = '!'\n        }\n   \
    \     if letter == '.' {\n            letter = ' '\n        }\n        r = r +\
    \ letter\n    }\n    return r\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpue3a274l_test.go:38:13: invalid operation: r + letter (mismatched types
    string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075211
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var newS string = \"\"\n    words := strings.Fields(s)\n    var prevAsc int\n\
    \    for _, word := range words {\n        if word == \"\" {\n            continue\n\
    \        }\n        wordAsc := int(word[0])\n        if prevAsc < wordAsc {\n\
    \            prevAsc = wordAsc\n            newS += string([]byte{\n         \
    \       byte(prevAsc + 65),\n                byte(prevAsc + 97),\n           \
    \ })\n        } else {\n            newS += string([]byte{\n                byte(prevAsc\
    \ - 97),\n                byte(prevAsc + 65),\n            })\n        }\n   \
    \     newS += string([]byte(word))\n    }\n    return newS\n}\n</code>\n<|/ a\
    \ tags=go dscore=2 |>\n<| c |>\nYour solution is very elegant, but it's too slow\
    \ for huge strings. In fact, it's an O(n^2) solution.\n<|/ c |>\n<| a dscore=1\
    \ |>\nHere is a solution for you, basically you scan through the string and replace\
    \ each character in the string with either the first character of the alphabet\
    \ or the character following it.\n<code>\npackage main\n\nimport (\n    \"bufio\"\
    \n    \"fmt\"\n    \"io\"\n    \"log\"\n    \"os\"\n    \"strings\"\n    \"unicode\"\
    \n)\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6ap6gmws_test.go:45:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075210
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // Write your code here\n    res := \"\"\n    i := len(s)\n    for i >=1;\
    \ i-- {\n        char := s[i]\n        if char != ' ' {\n            res = char\
    \ + res\n        } else {\n            j = i\n            for ; j < len(s) &&\
    \ s[j] != ' '; j++ {\n            }\n            if j != i {\n               \
    \ res = char + res\n            } else {\n                res = char + res\n \
    \           }\n        }\n    }\n    return res\n}\n\nfunc TestAnti_Shuffle(t\
    \ *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"),\
    \ expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\"\
    \ },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual:\
    \ candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpzmefgp27_test.go:24:16: expected boolean or range expression, found simple
    statement (missing parentheses around composite literal?)

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075210
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var result []rune\n    var position int\n    for len(s) > 0 {\n        start\
    \ := position\n        end := strings.Index(s, \" \")\n        if end < 0 {\n\
    \            end = len(s)\n        }\n        result = append(result, s[start:end])\n\
    \        s = strings.TrimPrefix(s, s[start:end])\n        position = end\n   \
    \ }\n    result = append(result, s[position:])\n    return string(result)\n}\n\
    \nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual:\
    \ candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"\
    ), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\"\
    \ },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\"\
    \ },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbqytpyy4_test.go:25:16: undefined: strings

    /tmp/tmpbqytpyy4_test.go:29:34: cannot use s[start:end] (value of type string)
    as type rune in argument to append

    /tmp/tmpbqytpyy4_test.go:30:13: undefined: strings

    /tmp/tmpbqytpyy4_test.go:33:30: cannot use s[position:] (value of type string)
    as type rune in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075211
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var words []string\n\n    split := strings.Split(s, \" \")\n    for i :=\
    \ 0; i < len(split); i++ {\n        var j int\n        var res string\n      \
    \  for j = i; j < len(split); j++ {\n            if split[j] != \"\\n\" && split[j]\
    \ != \" \" {\n                res = res + split[j]\n                break\n  \
    \          }\n        }\n\n        for j = i; j < len(split); j++ {\n        \
    \    if split[j] == \" \" || split[j] == \"\\n\" {\n                continue\n\
    \            }\n            res = res + split[j]\n        }\n\n        if split[i]\
    \ != \" \" {\n            res = res + split[i]\n        }\n\n        words = append(words,\
    \ res)\n    }\n\n    fmt.Println(words)\n\n    return strings.Join(words, \"_\"\
    )\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgdels_ms_test.go:23:14: undefined: strings

    /tmp/tmpgdels_ms_test.go:50:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075211
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var words []string\n    var newStr string\n    str := []rune(s)\n\n    for\
    \ _, v := range str {\n        // get the ascii value of this character\n    \
    \    var ascii int\n        ascii = int(v)\n        \n        // find the character\
    \ that ascii value greater than ascii value of first character and place it before\
    \ the character that ascii value less than ascii value of first character\n  \
    \      if ascii-1 > 0 {\n            words[len(words)-1] = words[len(words)-1][0:len(words[len(words)-1])-1]\
    \ + string([]rune{'a', ascii})\n        }\n        if ascii+1 > 0 {\n        \
    \    words[len(words)-1] = words[len(words)-1][0:len(words[len(words)-1])-1] +\
    \ string([]rune{'z', ascii})\n        }\n\n        // place the character ascii\
    \ value greater than ascii value of first character in the end of words[len(words)-1]\n\
    \        if ascii+1 > 0 {\n            words[len(words)-1] = words[len(words)-1][0:len(words[len(words)-1])-1]\
    \ + string([]rune{'a', ascii})\n        }\n    }\n\n    newStr = strings.Join(words,\
    \ \"\")\n\n    return newStr\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5b9dfmrt_test.go:32:106: cannot use ascii (variable of type int) as type
    rune in array or slice literal

    /tmp/tmp5b9dfmrt_test.go:35:106: cannot use ascii (variable of type int) as type
    rune in array or slice literal

    /tmp/tmp5b9dfmrt_test.go:40:106: cannot use ascii (variable of type int) as type
    rune in array or slice literal

    /tmp/tmp5b9dfmrt_test.go:44:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075211
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    if len(s) <= 1 {\n        return s\n    }\n    var output string\n    temp\
    \ := \"\"\n    for i, letter := range s {\n        if letter == ' ' {\n      \
    \      output = output + temp\n            temp = letter\n        } else {\n \
    \           temp = temp + letter\n        }\n    }\n    output = output + temp\n\
    \    return output\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate :=\
    \ anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjsn2_uo9_test.go:26:9: i declared but not used

    /tmp/tmpjsn2_uo9_test.go:29:20: cannot use letter (variable of type rune) as type
    string in assignment

    /tmp/tmpjsn2_uo9_test.go:31:20: invalid operation: temp + letter (mismatched types
    string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075211
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    for i := 0; i < len(words); i++ {\n\
    \        j := i\n        for ; j < len(words); j++ {\n            if words[j]\
    \ > words[j+1] {\n                words[j], words[j+1] = words[j+1], words[j]\n\
    \            }\n        }\n    }\n\n    return strings.Join(words, \" \")\n}\n\
    \nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual:\
    \ candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"\
    ), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\"\
    \ },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\"\
    \ },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkzp4_xhv_test.go:21:14: undefined: strings

    /tmp/tmpkzp4_xhv_test.go:31:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075211
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Fields(s)\n    res := strings.NewReplacer(\n        \"A\"\
    , \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\",\n        \"K\"\
    , \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\",\n        \"U\"\
    , \"V\", \"W\", \"X\", \"Y\", \"Z\", \"a\", \"b\", \"c\", \"d\",\n        \"e\"\
    , \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\",\n        \"o\"\
    , \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\",\n        \"y\"\
    , \"z\", \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\",\n        \"8\"\
    , \"9\",\n    )\n    return res.Replace(words)\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0cmwf5ul_test.go:21:14: undefined: strings

    /tmp/tmp0cmwf5ul_test.go:22:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075211
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    if len(s) < 2 {\n        return s\n    }\n\n    var result string\n    var\
    \ index int\n    var c rune\n    wordIndex := 1\n    for index := len(s) - 1;\
    \ index >= 0; index-- {\n        c = s[index]\n        if c == ' ' || c == '\\\
    t' || c == '\\n' {\n            wordIndex++\n        } else {\n            result\
    \ = result + string(s[index+1 : index+wordIndex]) + c\n            wordIndex =\
    \ 0\n        }\n    }\n    result = result + string(s[index+1 : index+wordIndex])\n\
    \    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate :=\
    \ anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpej7akg2x_test.go:30:13: cannot use s[index] (value of type byte) as type
    rune in assignment

    /tmp/tmpej7akg2x_test.go:34:22: invalid operation: result + string(s[index + 1:index
    + wordIndex]) + c (mismatched types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075211
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    words := make([]string, len(words))\n\
    \    for index, element := range words {\n        words[index] = anti_shuffle(element)\n\
    \    }\n    return strings.Join(words, \" \")\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplra3866b_test.go:21:14: undefined: strings

    /tmp/tmplra3866b_test.go:22:11: no new variables on left side of :=

    /tmp/tmplra3866b_test.go:26:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075211
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    \n    letters := make([]rune, len(s))\n    for i, r := range s {\n      \
    \  letters[i] = rune(r) \n    }\n\n    // Iterate through the array of letters,\
    \ creating a new array of\n    // letters based on the ascii values of the letters\
    \ in the original\n    // array and swapping the letters.\n    // For example:\n\
    \    // >>> a = \"abcd\"\n    // >>> print \"\".join(sorted(a))\n    // abcd\n\
    \    // >>> print \"\".join(sorted(a, reverse=True))\n    // dcba\n    \n    var\
    \ index int\n    for i := range letters {\n        index := int(letters[i])\n\
    \        for j := 0; j < index; j++ {\n            letters[i+j] = letters[i]\n\
    \        }\n    }\n    \n    return string(letters)\n}\n\nfunc TestAnti_Shuffle(t\
    \ *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"),\
    \ expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\"\
    \ },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual:\
    \ candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpspjuqy1i_test.go:37:9: index declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075211
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var res []rune\n    var i int\n    for _, word := range strings.Split(s,\
    \ \" \") {\n        word = strings.ToLower(word)\n        j := len(word)\n   \
    \     for i = 1; i < j; i++ {\n            if word[i-1] <= word[i] {\n       \
    \         j = i\n            } else {\n                res = append(res, word[i-1])\n\
    \                res = append(res, word[i])\n                break\n         \
    \   }\n        }\n    }\n    return string(res)\n}\n\nfunc TestAnti_Shuffle(t\
    \ *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"),\
    \ expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\"\
    \ },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual:\
    \ candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzmub7n5y_test.go:23:26: undefined: strings

    /tmp/tmpzmub7n5y_test.go:24:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075212
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var rv string = \"\"\n    var i int\n    var j int\n    for i = 0; i < (len(s)+1);\
    \ i++ {\n        var newWord string = \"\"\n        for j = i; j > (-1); j-- {\n\
    \            if s[i] == s[j] {\n                newWord += s[j]\n            \
    \    i = j\n                break\n            }\n        }\n        if newWord\
    \ == \"\" {\n            newWord = s[i]\n        }\n        rv += newWord + \"\
    \ \"\n    }\n    return rv\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplj9gc6i6_test.go:28:17: invalid operation: newWord += s[j] (mismatched
    types string and byte)

    /tmp/tmplj9gc6i6_test.go:34:23: cannot use s[i] (value of type byte) as type string
    in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075212
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    result := \"\"\n    words := strings.Split(s, \" \")\n    for _, word :=\
    \ range words {\n        for _, char := range word {\n            result += string(char\
    \ + char[strings.Index(word, char)+1] + char[:strings.Index(word, char)])\n  \
    \      }\n        result += \" \"\n    }\n    return result\n}\n</code>\n<|/ a\
    \ |>\n<| a tags=shuffle,algorithm,string dscore=0 |>\n<code>\n#include <iostream>\n\
    #include <cstring>\n#include <cstdlib>\nusing namespace std;\nconst int maxLength\
    \ = 15;\nint main()\n{\n    char s[maxLength];\n    cout << \"Enter your string:\
    \ \";\n    cin >> s;\n    char temp[maxLength];\n    for (int i = 0; i < maxLength;\
    \ i++)\n        temp[i] = s[i];\n    bool flag = false;\n    for (int i = maxLength\
    \ - 1; i >= 0; i--)\n    {\n        flag = true;\n        for (int j = 0; j <\
    \ maxLength - 1; j++)\n        {\n            if (temp[j] == temp[j + 1])\n  \
    \          {\n                flag = false;\n            }\n        }\n      \
    \  if (flag)\n        {\n            swap(temp[i], temp[maxLength - 1]);\n   \
    \         flag = false;\n        }\n    }\n    cout << temp << endl;\n    system(\"\
    pause\");\n    return 0;\n}\n</code>\n<|/ a |>\n<| a tags=shuffle,algorithm,string\
    \ |>\n<code>\npublic static void shuffle(String s){\n    String temp = \"\";\n\
    \    for(int i=s.length()-1;i>=0;i--){\n        for(int j=0;j<s.length();j++){\n\
    \            if(s.charAt(j)==' '){\n                temp=s.substring(0,j)+s.charAt(i+1)+s.substring(i+2,s.length());\n\
    \                i=i+2;\n                break;\n            }\n        }\n  \
    \  }\n    System.out.println(temp);\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    The output of this program is not as expected.\n<|/ c |>\n<| c |>\nThis code does\
    \ not compile or make sense. Why do you use `break` when `i` doesn't get incremented\
    \ after `temp` gets set to `s.substring(i+2,s.length())`?\n<|/ c |>\n<| a tags=shuffle,algorithm,string\
    \ dscore=0 |>\n<code>\npackage com.kam.konan.konan.util;\n\nimport java.util.Random;\n\
    \npublic class StringUtil {\n\n    /**\n     * \n     * s\n     *            the\
    \ string to be shuffled\n     * shuffled\n     *            the string shuffled\n\
    \     */\n    public static String shuffleString(String s) {\n        char[] arr\
    \ = s.toCharArray();\n        char[] \nfunc TestAnti_Shuffle(t *testing.T) {\n\
    \  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1_94vzc9_test.go:31:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075211
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var ret string\n    spacePos := 0\n    wordPos := 0\n    for i := 0; i <\
    \ len(s); i++ {\n        if s[i] == ' ' {\n            spacePos = i\n        }\n\
    \    }\n    for i := spacePos; i > 0; i-- {\n        for j := 1; j < i; j++ {\n\
    \            if s[j-1] > s[j] {\n                ret += s[j-1] + s[j]\n      \
    \          s[j-1] = s[j]\n                s[j] = ret\n                ret = \"\
    \"\n                break\n            }\n        }\n    }\n    for i := 0; i\
    \ < len(s); i++ {\n        if s[i] == ' ' {\n            wordPos = i\n       \
    \     break\n        }\n    }\n    for i := wordPos; i > 0; i-- {\n        for\
    \ j := 1; j < i; j++ {\n            if s[j-1] > s[j] {\n                ret +=\
    \ s[j-1] + s[j]\n                s[j-1] = s[j]\n                s[j] = ret\n \
    \               ret = \"\"\n                break\n            }\n        }\n\
    \    }\n    return ret\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyk4vo5xl_test.go:32:17: invalid operation: ret += s[j - 1] + s[j] (mismatched
    types string and byte)

    /tmp/tmpyk4vo5xl_test.go:33:17: cannot assign to s[j - 1] (value of type byte)

    /tmp/tmpyk4vo5xl_test.go:34:17: cannot assign to s[j] (value of type byte)

    /tmp/tmpyk4vo5xl_test.go:49:17: invalid operation: ret += s[j - 1] + s[j] (mismatched
    types string and byte)

    /tmp/tmpyk4vo5xl_test.go:50:17: cannot assign to s[j - 1] (value of type byte)

    /tmp/tmpyk4vo5xl_test.go:51:17: cannot assign to s[j] (value of type byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075212
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    var result strings.Builder\n    for\
    \ _, word := range words {\n        ascii := []byte(word)\n        j := 0\n  \
    \      for i := 0; i < len(ascii); i++ {\n            if j == len(word) {\n  \
    \              result.WriteByte(' ')\n                j = 0\n            } else\
    \ {\n                if ascii[i] >= 97 && ascii[i] <= 122 {\n                \
    \    result.WriteByte(ascii[i])\n                } else {\n                  \
    \  result.WriteByte(ascii[i] - 64)\n                }\n                j++\n \
    \           }\n        }\n        result.WriteByte(\" \")\n    }\n    return result.String()\n\
    }\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual:\
    \ candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"\
    ), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\"\
    \ },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\"\
    \ },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_34tevuw_test.go:21:14: undefined: strings

    /tmp/tmp_34tevuw_test.go:22:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075212
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // TODO: Fill in the blanks below\n    output := \"\"\n    words := strings.Split(s,\
    \ \" \")\n    for _, word := range words {\n        chars := strings.Split(word,\
    \ \"\")\n        count := len(chars)\n        output += chars[0]\n        for\
    \ i := 1; i < count; i++ {\n            chars[i-1] += chars[i]\n            chars[i]\
    \ = \"\"\n        }\n    }\n    return output\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqsxyjg9l_test.go:23:14: undefined: strings

    /tmp/tmpqsxyjg9l_test.go:25:18: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075213
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // Write your code here\n\n    var output []string\n    words := strings.Split(s,\
    \ \" \")\n\n    for i, word := range words {\n        if i == len(words)-1 {\n\
    \            output = append(output, word)\n        } else {\n            j :=\
    \ i + 1\n            for ; j < len(words) {\n                if words[j] > word\
    \ {\n                    break\n                } else {\n                   \
    \ output = append(output, words[j])\n                    j = j + 1\n         \
    \       }\n            }\n            output = append(output, word)\n        }\n\
    \    }\n\n    return strings.Join(output, \" \")\n}\n\nfunc TestAnti_Shuffle(t\
    \ *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"),\
    \ expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\"\
    \ },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual:\
    \ candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpzrtbpwlr_test.go:31:34: expected '';'', found ''{''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075212
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    res := \"\"\n    for _, word := range\
    \ words {\n        fmt.Print(word)\n        for i := range word {\n          \
    \  letter, _ := strconv.Atoi(word[i])\n            res += letter\n        }\n\
    \        fmt.Print(\" \")\n    }\n    return res\n}\n\nfunc TestAnti_Shuffle(t\
    \ *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"),\
    \ expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\"\
    \ },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual:\
    \ candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjxlj44vc_test.go:21:14: undefined: strings

    /tmp/tmpjxlj44vc_test.go:26:26: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075213
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // your implementation here\n    var ans string = \"\"\n    words := strings.Fields(s)\n\
    \    // Sorting the words based on ASCII values\n    sort.Strings(words)\n   \
    \ for _, w := range words {\n        ans = ans + fmt.Sprintf(\"%c%c\", w, \" \"\
    )\n    }\n    return ans\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp62j6w3w2_test.go:23:14: undefined: strings

    /tmp/tmp62j6w3w2_test.go:25:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075213
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    orderedWords := make([]string, 0)\n\
    \    for _, word := range words {\n        orderedWords = append(orderedWords,\
    \ strings.ToLower(fmt.Sprintf(\"%s\", word)))\n    }\n\n    sort.Strings(orderedWords)\n\
    \n    return strings.Join(orderedWords, \" \")\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5t1lick__test.go:21:14: undefined: strings

    /tmp/tmp5t1lick__test.go:24:45: undefined: strings

    /tmp/tmp5t1lick__test.go:27:5: undefined: sort

    /tmp/tmp5t1lick__test.go:29:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075213
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var wordSplit []string\n    var resultWord string\n    wordSplit := strings.Split(s,\
    \ \" \")\n\n    for _, word := range wordSplit {\n        resultWord = resultWord\
    \ + word\n    }\n\n    return resultWord\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8jjjkk2m_test.go:23:15: no new variables on left side of :=

    /tmp/tmp8jjjkk2m_test.go:23:18: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075213
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var rev []rune\n    var len int = len(s)\n    var word string\n    var i\
    \ int\n\n    for i = 0; i < len(s); i++ {\n        word = s[len-1-i:] + s[:len-1-i]\
    \ + s[i:]\n        rev = append(rev, word)\n    }\n\n    k := 0\n    s := \"\"\
    \n    for _, v := range rev {\n        s = s + string(v)\n        k += 1\n   \
    \     if k == len(rev) {\n            k %= len(rev)\n            k += 1\n    \
    \    }\n    }\n\n    return s\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprsxuv8yv_test.go:26:20: invalid operation: cannot call non-function len
    (variable of type int)

    /tmp/tmprsxuv8yv_test.go:28:27: cannot use word (variable of type string) as type
    rune in argument to append

    /tmp/tmprsxuv8yv_test.go:32:7: no new variables on left side of :=

    /tmp/tmprsxuv8yv_test.go:36:17: invalid operation: cannot call non-function len
    (variable of type int)

    /tmp/tmprsxuv8yv_test.go:37:18: invalid operation: cannot call non-function len
    (variable of type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075213
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    result := \"\"\n    for _, letter := range s {\n        if letter == \" \"\
    \ {\n            result = result + letter\n        } else {\n            result\
    \ = result + string(unicode.ToLower(letter))\n        }\n    }\n    return result\n\
    }\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual:\
    \ candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"\
    ), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\"\
    \ },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\"\
    \ },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppsxa3x9u_test.go:23:22: invalid operation: letter == " " (mismatched types
    rune and untyped string)

    /tmp/tmppsxa3x9u_test.go:24:22: invalid operation: result + letter (mismatched
    types string and rune)

    /tmp/tmppsxa3x9u_test.go:26:38: undefined: unicode

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075213
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    ans := \"\"\n    words := strings.Fields(s)\n    var words []string\n   \
    \ for _, word := range words {\n        words = append(words, word)\n    }\n \
    \   for _, word := range words {\n        for _, char := range word {\n      \
    \      if char < 97 || char > 122 {\n                continue\n            }\n\
    \            ans = ans + string([]byte{char - 96})\n        }\n    }\n    return\
    \ ans\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpm2jzm5k1_test.go:22:14:\
    \ undefined: strings\n/tmp/tmpm2jzm5k1_test.go:23:9: words redeclared in this\
    \ block\n\t/tmp/tmpm2jzm5k1_test.go:22:5: other declaration of words\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075213
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    words := make([]string, len(words))\n\
    \    for i, w := range words {\n        if w == \"\" {\n            continue\n\
    \        }\n        // find length of original word\n        n, err := strconv.Atoi(w[0\
    \ : len(w)-1])\n        if err != nil {\n            continue\n        }\n   \
    \     // sort and insert at correct location\n        j := n - 1\n        for\
    \ ; j >= 0 && j >= len(words)-i-1; j-- {\n            if words[j] > w {\n    \
    \            break\n            }\n        }\n        words[j+1] = w\n    }\n\
    \    return strings.Join(words, \" \")\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvwyyd6tc_test.go:21:14: undefined: strings

    /tmp/tmpvwyyd6tc_test.go:22:11: no new variables on left side of :=

    /tmp/tmpvwyyd6tc_test.go:28:19: undefined: strconv

    /tmp/tmpvwyyd6tc_test.go:41:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075213
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var words []string\n    for _, word := range strings.Fields(s) {\n      \
    \  word = strings.ToLower(word)\n        words = append(words, word)\n    }\n\
    \    sort.Strings(words)\n    return strings.Join(words, \" \")\n}\n\nfunc TestAnti_Shuffle(t\
    \ *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"),\
    \ expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\"\
    \ },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual:\
    \ candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2tcwgppj_test.go:22:26: undefined: strings

    /tmp/tmp2tcwgppj_test.go:23:16: undefined: strings

    /tmp/tmp2tcwgppj_test.go:26:5: undefined: sort

    /tmp/tmp2tcwgppj_test.go:27:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075213
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    for i := range s {\n        if i == 0 || s[i-1] != ' ' {\n            s[i]\
    \ = s[i] + s[i]\n        }\n    }\n    s = strings.Replace(s, \"  \", \" \", -1)\n\
    \    s = strings.Replace(s, \" \", \"\", -1)\n    return s\n}\n\nfunc TestAnti_Shuffle(t\
    \ *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"),\
    \ expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\"\
    \ },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual:\
    \ candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_in7wt9c_test.go:23:13: cannot assign to s[i] (value of type byte)

    /tmp/tmp_in7wt9c_test.go:26:9: undefined: strings

    /tmp/tmp_in7wt9c_test.go:27:9: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075213
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    result := \"\"\n\n    chars := []rune(s)\n    if len(chars) == 0 {\n    \
    \    return \"\"\n    }\n\n    // Initialize two character pointers. One to the\
    \ current character and one to its successor.\n    p1 := chars[0]\n    p2 := chars[0]\n\
    \n    // Iterate through characters in the string.\n    for i := 1; i < len(chars);\
    \ i++ {\n        // Compare the current character with the next one\n        if\
    \ chars[i] > chars[i-1] {\n            // The character after the previous one\
    \ was greater than the current one, so swap them\n            chars[i], chars[i-1]\
    \ = chars[i-1], chars[i]\n        }\n\n        // Swap next character with the\
    \ current character if current character is greater than the next one.\n     \
    \   if chars[i] == chars[i-1] {\n            p1 = p2\n            p2 = chars[i]\n\
    \        }\n\n        // Add the current character to the result string\n    \
    \    result += string(p1)\n        result += string(p2)\n\n        // Move to\
    \ the next character\n        p1 = p2\n        p2 = chars[i]\n    }\n\n    return\
    \ result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmp7w2knld9_test.go:77: expected 'Hi', got 'HH'\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmp7w2knld9_test.go:77: expected\
    \ 'ehllo', got 'hhheeeee'\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n\
    \        tmp7w2knld9_test.go:77: expected 'bemnru', got 'nnnnnmmbbb'\n    ---\
    \ FAIL: TestAnti_Shuffle/test_num__3 (0.00s)\n        tmp7w2knld9_test.go:77:\
    \ expected 'abcd', got 'aaaaaa'\n    --- FAIL: TestAnti_Shuffle/test_num__4 (0.00s)\n\
    \        tmp7w2knld9_test.go:77: expected 'Hello !!!Wdlor', got 'HHHHHHHHHHH \
    \              '\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n       \
    \ tmp7w2knld9_test.go:77: expected '.Hi My aemn is Meirst .Rboot How aer ?ouy',\
    \ got 'HHHHH..                                                               \
    \          '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075214
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    s := \"\"\n    for _, word := range\
    \ words {\n        if len(word) > 1 {\n            s += string([]rune(word)[rand.Intn(len(word))])\
    \ + \" \"\n        }\n    }\n    return s\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv74xa88h_test.go:21:14: undefined: strings

    /tmp/tmpv74xa88h_test.go:22:7: no new variables on left side of :=

    /tmp/tmpv74xa88h_test.go:25:38: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075214
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    charMap := map[rune]rune{}\n    for _, r := range s {\n        if r == '.'\
    \ {\n            break\n        }\n        charMap[r] = r\n    }\n    char :=\
    \ charMap\n    char.Ordered(s)\n    return char.String()\n}\n</code>\n<|/ a dscore=4\
    \ tags=go,string |>\n<| a tags=go,string |>\nYou can use a map to implement this.\
    \ \n<code>\npackage main\n\nimport (\n    \"fmt\"\n    \"strings\"\n)\n\nfunc\
    \ TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"\
    hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected:\
    \ \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n \
    \    { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n\
    \     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5fz2s4nx_test.go:32:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075213
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var result []rune\n    var words []string\n    var words rune\n    for _,\
    \ r := range s {\n        switch r {\n        case ' ':\n            continue\n\
    \        case 'a':\n            words = []string{\"a\", \"e\", \"i\", \"o\", \"\
    u\"}\n        case 'e':\n            words = []string{\"a\", \"i\", \"o\", \"\
    u\", \"w\"}\n        case 'i':\n            words = []string{\"e\", \"i\", \"\
    o\", \"u\", \"w\"}\n        case 'o':\n            words = []string{\"e\", \"\
    i\", \"u\", \"o\", \"w\"}\n        case 'u':\n            words = []string{\"\
    e\", \"i\", \"o\", \"u\", \"w\"}\n        case 'w':\n            words = []string{\"\
    o\", \"u\", \"w\"}\n        case 'd':\n            words = []string{\"o\", \"\
    u\", \"w\", \"d\"}\n        }\n        for _, w := range words {\n           \
    \ result = append(result, w)\n        }\n    }\n    result := strings.Join(result,\
    \ \" \")\n    return strings.ToLower(result)\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpv6m0pier_test.go:23:9:\
    \ words redeclared in this block\n\t/tmp/tmpv6m0pier_test.go:22:9: other declaration\
    \ of words\n/tmp/tmpv6m0pier_test.go:44:37: cannot use w (variable of type string)\
    \ as type rune in argument to append\n/tmp/tmpv6m0pier_test.go:47:12: no new variables\
    \ on left side of :=\n/tmp/tmpv6m0pier_test.go:47:15: undefined: strings\n/tmp/tmpv6m0pier_test.go:48:12:\
    \ undefined: strings\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075214
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    \n    // Return blank string when there are no characters\n    if len(s)\
    \ == 0 {\n        return s\n    }\n\n    // Return blank string when there are\
    \ only white space\n    if len(s) == 1 {\n        return s\n    }\n\n    // Return\
    \ string when only single characters are present\n    if len(s) < 2 {\n      \
    \  return s\n    }\n\n    // Start with first character and append the character\
    \ followed by the next character\n    var out string = \"\"\n    out += s[0:1]\n\
    \    out += s[1:]\n    \n    // Iterate through remaining characters and append\
    \ the character followed by the char with the smallest ascii value\n    for i\
    \ := 2; i < len(s); i++ {\n        current := s[i]\n        current := current[0:1]\n\
    \        \n        i := i - 1\n        j := i - 1\n        \n        // Keep moving\
    \ left while j doesn't cross over the next character\n        while (j > -1) &&\
    \ (s[j] >= current[0]) {\n            current += s[j]\n            j = j - 1\n\
    \        }\n        \n        // Keep moving right while j doesn't cross over\
    \ the current character\n        while (j > -1) && (s[j] < current[0]) {\n   \
    \         out += s[j]\n            j = j - 1\n        }\n        \n        out\
    \ += s[i]\n    }\n    \n    return out\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmplsam7w_t_test.go:51:48: expected '';'', found ''{''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075213
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // write your code here\n    l := len(s)\n    if l > 1 {\n        for i :=\
    \ 0; i < l/2; i++ {\n            j := l - 1\n            var temp int\n      \
    \      for k := 0; k < l; k++ {\n                if s[k] < s[k+1] {\n        \
    \            temp = s[k]\n                    s[k] = s[k+1]\n                \
    \    s[k+1] = temp\n                    j--\n                }\n            }\n\
    \        }\n    }\n    return s\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n\
    \  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3ibqdffh_test.go:29:28: cannot use s[k] (value of type byte) as type int
    in assignment

    /tmp/tmp3ibqdffh_test.go:30:21: cannot assign to s[k] (value of type byte)

    /tmp/tmp3ibqdffh_test.go:31:21: cannot assign to s[k + 1] (value of type byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075214
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    if len(s) < 1 {\n        return s\n    }\n    words := strings.Fields(s)\n\
    \    var output string\n    for _, word := range words {\n        for i := range\
    \ word {\n            output += string(bytes.IndexByte([]byte(word[:i]), 97))\n\
    \        }\n    }\n    return output\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjc8zyuxy_test.go:24:14: undefined: strings

    /tmp/tmpjc8zyuxy_test.go:28:30: undefined: bytes

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075214
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var output string = \"\"\n    words := strings.Split(s, \" \")\n    for _,\
    \ w := range words {\n        output += w\n    }\n    return output\n}\n\nfunc\
    \ TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"\
    hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected:\
    \ \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n \
    \    { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n\
    \     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqnw1xsqw_test.go:22:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075214
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    ordered := \"\"\n    for i, w := range\
    \ words {\n        if i != 0 {\n            ordered += \" \"\n        }\n    \
    \    for _, c := range strings.ToLower(w) {\n            ordered += string([]rune{65,\
    \ 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84,\
    \ 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103,\
    \ 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119,\
    \ 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135,\
    \ 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151,\
    \ 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167,\
    \ 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183,\
    \ 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199,\
    \ 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215,\
    \ 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231,\
    \ 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247,\
    \ 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263,\
    \ 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279,\
    \ 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295,\
    \ 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 30\nfunc TestAnti_Shuffle(t\
    \ *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"),\
    \ expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\"\
    \ },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual:\
    \ candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpq4x1vuv1_test.go:28:1220: missing '','' before newline in composite literal

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075213
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    result := \"\"\n    i := 0\n    n := len(s)\n\n    for ; i < n; i++ {\n \
    \       // Find current character and its ascii value.\n        // Ascii value\
    \ of a character is its numerical representation.\n        // ASCII value of a\
    \ character is its numerical representation.\n        // ASCII value of a character\
    \ is its numerical representation.\n        // ASCII value of a character is its\
    \ numerical representation.\n        // ASCII value of a character is its numerical\
    \ representation.\n        // ASCII value of a character is its numerical representation.\n\
    \        // ASCII value of a character is its numerical representation.\n    \
    \    // ASCII value of a character is its numerical representation.\n        //\
    \ ASCII value of a character is its numerical representation.\n        // ASCII\
    \ value of a character is its numerical representation.\n        // ASCII value\
    \ of a character is its numerical representation.\n        // ASCII value of a\
    \ character is its numerical representation.\n        // ASCII value of a character\
    \ is its numerical representation.\n        // ASCII value of a character is its\
    \ numerical representation.\n        // ASCII value of a character is its numerical\
    \ representation.\n        // ASCII value of a character is its numerical representation.\n\
    \        // ASCII value of a character is its numerical representation.\n    \
    \    // ASCII value of a character is its numerical representation.\n        //\
    \ ASCII value of a character is its numerical representation.\n        // ASCII\
    \ value of a character is its numerical representation.\n        // ASCII value\
    \ of a character is its numerical representation.\n        // ASCII value of a\
    \ character is its numerical representation.\n        // ASCII value of a character\
    \ is its numerical representation.\n        // ASCII value of a character is its\
    \ numerical representation.\n        // ASCII value of a character is its numerical\
    \ representation.\n        // ASCII value of a character is its numerical representation.\n\
    \        // ASCII value of a character is its numerical representation.\n    \
    \    // ASCII value of a character is its numerical representation.\n        //\
    \ ASCII value of a character is its numerical representation.\n        // ASCII\
    \ value of a character is its numerical representation.\n        // ASCII value\
    \ of a character is its numerical representation.\n        // ASCII value of a\
    \ character is its numerical representation.\n        // ASCII value of a character\
    \ is its numerical representation.\n        // ASCII value of a character is its\
    \ numerical representation.\n        // ASCII value of a character is its numerical\
    \ representation.\n        // ASCII value of a character is its numerical representation.\n\
    \        // ASCII value of a character is its numerical representation.\n    \
    \    // ASCII value of a character is its numerical representation.\n        //\
    \ ASCII value of a character is its numerical representation.\n        // ASCII\
    \ value of a character is its numerical representation.\n        // ASCII value\
    \ of a character is its numerical representation.\n        // ASCII value of a\
    \ character is its numerical representation.\n        // ASCII value of a character\
    \ is its numerical representation.\n        // ASCII value of a character is its\
    \ numerical representation.\n        // ASCII value of a character is its numerical\
    \ representation.\n        // ASCII value of a character is its numerical representation.\n\
    \        // ASCII value of a character is its numerical representation.\n    \
    \    // ASCII value of a character is its numerical \nfunc TestAnti_Shuffle(t\
    \ *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"),\
    \ expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\"\
    \ },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual:\
    \ candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp0nzukrk6_test.go:75:6: expected ''('', found TestAnti_Shuffle

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075213
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var a string\n\n    for _, word := range strings.Split(s, \" \") {\n    \
    \    var b string\n        for _, char := range word {\n            a += string([]rune(char)[unicode.IsUpper(char)])\n\
    \        }\n        b := \"\"\n        for _, b := range a {\n            b +=\
    \ string([]rune(b)[unicode.IsLower(b)])\n        }\n        a = b\n    }\n   \
    \ return a\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp90z54q2x_test.go:23:26: undefined: strings

    /tmp/tmp90z54q2x_test.go:26:38: undefined: unicode

    /tmp/tmp90z54q2x_test.go:28:11: no new variables on left side of :=

    /tmp/tmp90z54q2x_test.go:30:32: cannot convert b (variable of type rune) to type
    []rune

    /tmp/tmp90z54q2x_test.go:30:35: undefined: unicode

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075214
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    arr := make([]string, len(s))\n    for idx, v := range s {\n        arr[idx]\
    \ = v\n    }\n\n    i := 0\n    j := len(arr) - 1\n    for i < len(arr) {\n  \
    \      if i > j {\n            break\n        }\n        if arr[i] > arr[j] {\n\
    \            arr[i], arr[j] = arr[j], arr[i]\n        }\n        i++\n       \
    \ j--\n    }\n    return strings.Join(arr, \" \")\n}\n\nfunc TestAnti_Shuffle(t\
    \ *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"),\
    \ expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\"\
    \ },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual:\
    \ candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk6unxfo8_test.go:23:20: cannot use v (variable of type rune) as type string
    in assignment

    /tmp/tmpk6unxfo8_test.go:38:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075215
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // Store all the characters in a new string\n    // by converting the string\
    \ into character array (go string).\n    ss := string(s)\n\n    // Create an array\
    \ of character arrays, one for each\n    // word.\n    ss := strings.Split(ss,\
    \ \" \")\n\n    // Write a function with 2 parameters: word and array index.\n\
    \    // Return a value based on the index.\n    // You will need to store the\
    \ result and display it.\n    return func(word string, index int) string {\n \
    \       // Create a slice to store current word.\n        current := []rune(word)\n\
    \        // Write a function that removes a character from a word and\n      \
    \  // return the new word.\n        // You will need to store the result and display\
    \ it.\n        remove := func(index int) string {\n            // Write a function\
    \ that takes a character and\n            // return ascii value\n            ascii\
    \ := func(char rune) int {\n                return int(char)\n            }\n\
    \            // Write a function that takes an ascii value and\n            //\
    \ return the character value where it was\n            // originally placed in.\n\
    \            move := func(ascii int) rune {\n                return rune((ascii\
    \ + 65) % 26 + 65)\n            }\n\n            // Create a new slice to store\
    \ current character.\n            // It will be the new word but we don't store\
    \ it.\n            current := []rune(word)\n            // Remove a character\
    \ from the word, update the\n            // current word with the new word.\n\
    \            current[index] = current[index+1]\n            current[index+1] =\
    \ move(current[index+1])\n            return string(current)\n        }\n\n  \
    \      // Write a function that takes a word and\n        // returns the new word.\n\
    \        // You will need to store the result and display it.\n        split :=\
    \ func(word string) string {\n            // Write a function that takes a character\
    \ and\n            // return ascii value\n            ascii := func(char rune)\
    \ int {\n                return int(char)\n            }\n            // Write\
    \ a function that takes an ascii value and\n            // return the character\
    \ value where it was\n            // originally placed in.\n            move :=\
    \ func(ascii int) rune {\n                return rune((ascii + 65) % 26 + 65)\n\
    \            }\n            current := []rune(word)\n            result := []rune(\"\
    \")\n            // While the last word has not been removed.\n            for\
    \ len(current) > 0 {\n                // Write a function that removes a character\n\
    \                // from the current word and return\n                // the new\
    \ word.\n                // You will need to store the result and display it.\n\
    \                result := append(result, remove(len(current)-1))\n          \
    \      // Remove the last character from the current word.\n                current\
    \ = current[:len(current)-1]\n            }\n            return string(result)\n\
    \        }\n\n        // Write a function that takes a \nfunc TestAnti_Shuffle(t\
    \ *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"),\
    \ expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\"\
    \ },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual:\
    \ candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpk5s2dc1n_test.go:92:6: expected ''('', found TestAnti_Shuffle

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075214
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var a []rune\n    for _, v := range s {\n        a = append(a, v)\n    }\n\
    \n    var sorted []rune\n    for _, v := range a {\n        sorted = append(sorted,\
    \ v)\n    }\n    sort.Sort(sort.Reverse(sort.StringSlice(sorted)))\n\n    var\
    \ reordered []rune\n    for _, v := range sorted {\n        reordered = append(reordered,\
    \ v)\n    }\n\n    return string(reordered)\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp46aibi4b_test.go:30:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075215
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    wordBreak := []string{}\n    splits := strings.Split(s, \" \")\n\n    for\
    \ _, w := range splits {\n        for _, c := range w {\n            asci := int(c)\
    \ - int(97)\n            if asci < 0 {\n                asci += 26\n         \
    \   }\n            if asci > 9 {\n                asci -= 9\n            }\n \
    \           wordBreak = append(wordBreak, string([]rune{int(c) + asci, ' '}))\n\
    \        }\n    }\n\n    return strings.Join(wordBreak, \" \")\n}\n\nfunc TestAnti_Shuffle(t\
    \ *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"),\
    \ expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\"\
    \ },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual:\
    \ candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7o07en66_test.go:22:15: undefined: strings

    /tmp/tmp7o07en66_test.go:37:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075215
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    result := \"\"\n    words := strings.Split(s, \" \")\n    for _, word :=\
    \ range words {\n        sorted_word := \"\"\n        for index, char := range\
    \ word {\n            sorted_word = sorted_word + string([]byte{byte(char), byte(97+index)})\n\
    \        }\n        result = result + sorted_word + \" \"\n    }\n    return result\n\
    }\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual:\
    \ candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"\
    ), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\"\
    \ },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\"\
    \ },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmph8msre8u_test.go:22:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075215
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // TODO: Complete this function\n    \n    return s\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\nI added a detailed example in my answer.\n<|/ c |>\n<| a dscore=0\
    \ |>\nThe solution from was really helpful to me. However I did not get what he\
    \ did with these lines :\n<code>\nvar alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    .ToLower()\nvar nums = \"123456789\".ToLower()\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp0ow6nhjk_test.go:25:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075215
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // Split the sentence into words based on a blank space delimiter.\n    words\
    \ := strings.Split(s, \" \")\n    words := make([]string, 0)\n    for _, word\
    \ := range words {\n        // Remove all characters from word where its ascii\
    \ value is less than 128.\n        word, _ = removeAsciiChar(word)\n        //\
    \ Add the word back in a sorted manner.\n        words = append(words, word)\n\
    \    }\n    // Join the sorted words back into one string.\n    return strings.Join(words,\
    \ \"\")\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdbh8e42i_test.go:22:14: undefined: strings

    /tmp/tmpdbh8e42i_test.go:23:11: no new variables on left side of :=

    /tmp/tmpdbh8e42i_test.go:26:19: undefined: removeAsciiChar

    /tmp/tmpdbh8e42i_test.go:31:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075216
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words = strings.Split(s, \" \")\n    result := \"\"\n\n    for _, word :=\
    \ range words {\n        i := strings.Count(word, \" \")\n        j := strings.Count(word,\
    \ \"-\")\n        k := strings.Count(word, \"_\")\n        l := strings.Count(word,\
    \ \".\")\n        m := strings.Count(word, \"/\") + (strings.Count(word, \"(\"\
    ) + strings.Count(word, \")\"))\n\n        result += string([]rune(word)[i:])\
    \ + string([]rune(word)[:i]) + \" \"\n        result += string([]rune(word)[:j])\
    \ + string([]rune(word)[:j+1]) + \" \"\n        result += string([]rune(word)[:k])\
    \ + string([]rune(word)[:k+1]) + \" \"\n        result += string([]rune(word)[:l])\
    \ + string([]rune(word)[:l+1]) + \" \"\n        result += string([]rune(word)[:m])\
    \ + string([]rune(word)[:m+1]) + \" \"\n    }\n\n    return result\n}\n\nfunc\
    \ TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"\
    hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected:\
    \ \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n \
    \    { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n\
    \     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxxia3axj_test.go:21:5: undefined: words

    /tmp/tmpxxia3axj_test.go:21:13: undefined: strings

    /tmp/tmpxxia3axj_test.go:24:26: undefined: words

    /tmp/tmpxxia3axj_test.go:25:14: undefined: strings

    /tmp/tmpxxia3axj_test.go:26:14: undefined: strings

    /tmp/tmpxxia3axj_test.go:27:14: undefined: strings

    /tmp/tmpxxia3axj_test.go:28:14: undefined: strings

    /tmp/tmpxxia3axj_test.go:29:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075216
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    for _, word := range strings.Split(s, \" \") {\n \
    \       // Convert all letters in string to ascii value\n        asciiValue :=\
    \ 0\n        for _, char := range word {\n            asciiValue += byte(char)\n\
    \        }\n\n        // Swap the letters based on the ascii value\n        if\
    \ asciiValue > 90\n            asciiValue += 26\n        if asciiValue < 65\n\
    \            asciiValue -= 26\n\n        // Convert ascii value to character\n\
    \        char := chr[asciiValue]\n\n        // Swap the character\n        result\
    \ = append(result, char)\n    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t\
    \ *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"),\
    \ expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\"\
    \ },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual:\
    \ candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp7dnzm1s7_test.go:31:13: expected boolean expression, found assignment
    (missing parentheses around composite literal?)

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075215
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var orderedStr string\n    arr := make([]rune, len(s))\n\n    for i := 0;\
    \ i < len(s); i++ {\n        arr[i] = rune(i)\n    }\n\n    for i := 0; i < len(s);\
    \ i++ {\n        index := i\n\n        for j := i+1; j < len(s); j++ {\n     \
    \       if arr[j] < arr[index] {\n                index = j\n            }\n \
    \       }\n\n        if i != index {\n            orderedStr += string(arr[index])\n\
    \            arr[index] = arr[i]\n            arr[i] = rune(i)\n        }\n  \
    \  }\n\n    return orderedStr\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmp_qeyd56q_test.go:66: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmp_qeyd56q_test.go:66: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmp_qeyd56q_test.go:66: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmp_qeyd56q_test.go:66: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmp_qeyd56q_test.go:66: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmp_qeyd56q_test.go:66: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075217
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Fields(s)\n    words := []string{}\n    for _, w := range\
    \ words {\n        sort.Strings(w)\n        words = append(words, w)\n    }\n\
    \    return strings.Join(words, \" \")\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcdfn_84k_test.go:21:14: undefined: strings

    /tmp/tmpcdfn_84k_test.go:22:11: no new variables on left side of :=

    /tmp/tmpcdfn_84k_test.go:24:9: undefined: sort

    /tmp/tmpcdfn_84k_test.go:27:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075216
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var newstring string\n    var ascii int\n    var newword string\n    for\
    \ _, v := range s {\n        ascii = int(v) - 98 // ascii value of a character\n\
    \        // if ascii of last character of current word is greater than ascii of\
    \ current word\n        // then move the last character of current word to next\
    \ word\n        if ascii > len(newword) {\n            newword += v\n        }\
    \ else {\n            newword += newstring[ascii]\n            newstring += v\n\
    \        }\n    }\n    return newstring\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz7l1kx5i_test.go:29:13: invalid operation: newword += v (mismatched types
    string and rune)

    /tmp/tmpz7l1kx5i_test.go:31:13: invalid operation: newword += newstring[ascii]
    (mismatched types string and byte)

    /tmp/tmpz7l1kx5i_test.go:32:13: invalid operation: newstring += v (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075216
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // Write your code here\n    l := len(s)\n    b := make([]byte, 0, l*2)\n\
    \    j := 0\n    i := 0\n    for i < l {\n        if j > 0 {\n            b :=\
    \ append(b, ' ')\n        }\n        b = append(b, s[i])\n        if i == l {\n\
    \            break\n        }\n        j += 1\n        if s[i] == ' ' {\n    \
    \        j += 1\n        }\n        if s[i] > ' ' && s[i] < 'Z' {\n          \
    \  c := s[i]\n            s := s[i+1]\n            for k < len(s) {\n        \
    \        if s[k] > c {\n                    b = append(b, s[k])\n            \
    \        k += 1\n                }\n            }\n        }\n        i += 1\n\
    \    }\n    return string(b)\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphqqgki2w_test.go:28:13: b declared but not used

    /tmp/tmphqqgki2w_test.go:41:17: undefined: k

    /tmp/tmphqqgki2w_test.go:41:25: invalid argument: s (variable of type byte) for
    len

    /tmp/tmphqqgki2w_test.go:42:21: invalid operation: cannot index s (variable of
    type byte)

    /tmp/tmphqqgki2w_test.go:43:36: invalid operation: cannot index s (variable of
    type byte)

    /tmp/tmphqqgki2w_test.go:44:21: undefined: k

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075216
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Fields(s)\n    // Convert the string into an ordered string\
    \ of characters.\n    result := \"\"\n    for _, word := range words {\n     \
    \   asciiVal := utf8.RuneCountInString(word)\n        for i := 0; i < asciiVal;\
    \ i++ {\n            result += word[len(word)-asciiVal+i] + \" \"\n        }\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpixnhqcnt_test.go:21:14: undefined: strings

    /tmp/tmpixnhqcnt_test.go:25:21: undefined: utf8

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075216
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    words := strings.Split(s, \" \") //\
    \ to convert string array to string slice\n    sort.Strings(words)\n    words\
    \ := strings.Join(words, \" \")\n    return words\n}\nfunc TestAnti_Shuffle(t\
    \ *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"),\
    \ expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\"\
    \ },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual:\
    \ candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7o8uhjzg_test.go:21:14: undefined: strings

    /tmp/tmp7o8uhjzg_test.go:22:11: no new variables on left side of :=

    /tmp/tmp7o8uhjzg_test.go:22:14: undefined: strings

    /tmp/tmp7o8uhjzg_test.go:23:5: undefined: sort

    /tmp/tmp7o8uhjzg_test.go:24:11: no new variables on left side of :=

    /tmp/tmp7o8uhjzg_test.go:24:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075216
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var words []string = strings.Split(s, \" \")\n    var res string\n    for\
    \ _, w := range words {\n        var c int\n        for _, r := range w {\n  \
    \          c = r\n        }\n        if c>97 {\n            c -= 26\n        }\n\
    \        c += 65\n        res += string(c)\n    }\n    return res\n}\n\nfunc TestAnti_Shuffle(t\
    \ *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"),\
    \ expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\"\
    \ },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual:\
    \ candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb4gy06lj_test.go:21:26: undefined: strings

    /tmp/tmpb4gy06lj_test.go:26:17: cannot use r (variable of type rune) as type int
    in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075216
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var word string\n    var newWord string\n    var ascii int\n    var i int\n\
    \    var j int\n    var k int\n    var l int\n    var m int\n    var n int\n\n\
    \    for i = 0; i < len(s); i++ {\n        // find ascii value of current character\n\
    \        ascii = s[i]\n        // find new character with ascii value\n      \
    \  newWord = s[i]\n        // create a list of possible combinations of ascii\
    \ values\n        for l = 0; l < 128; l++ {\n            // create new list\n\
    \            j = k\n            k = k + l\n            for m = 0; m < l; m++ {\n\
    \                // append word\n                word = word[:j] + newWord + word[j:]\n\
    \            }\n        }\n        // sort the word list\n        sort.Strings(word)\n\
    \        // append word\n        s = s[:i] + newWord + s[i+1:]\n    }\n    return\
    \ s\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzumish8i_test.go:29:9: n declared but not used

    /tmp/tmpzumish8i_test.go:33:17: cannot use s[i] (value of type byte) as type int
    in assignment

    /tmp/tmpzumish8i_test.go:35:19: cannot use s[i] (value of type byte) as type string
    in assignment

    /tmp/tmpzumish8i_test.go:47:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075216
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Fields(s)\n    for i := range words {\n        j := i\n\
    \        for j > 0 {\n            if words[j-1] > words[j] {\n               \
    \ words[j], words[j-1] = words[j-1], words[j]\n            } else {\n        \
    \        break\n            }\n            j--\n        }\n    }\n    return strings.Join(words,\
    \ \" \")\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp82l1dpu1_test.go:21:14: undefined: strings

    /tmp/tmp82l1dpu1_test.go:33:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075216
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var newWord = \"\"\n    var lastAscii = -1\n    for _, word := range strings.Split(s,\
    \ \" \") {\n        ascii := 0\n        for _, char := range word {\n        \
    \    ascii += byte(char)\n        }\n        ascii /= len(word)\n        if lastAscii\
    \ > ascii {\n            newWord += word[lastAscii]\n            lastAscii = ascii\n\
    \        } else {\n            newWord += string([]byte{byte(ascii), byte(ascii)})\n\
    \        }\n    }\n    return newWord\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwygqewy6_test.go:23:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075216
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    var res string\n    for _, word :=\
    \ range words {\n        letters := []rune(word)\n        var i int\n        for\
    \ i = 0, i = len(letters); i < len(letters); i++ {\n            if letters[i]\
    \ > 127 {\n                letters[i] -= 256\n            }\n        }\n     \
    \   res = append(res, string(letters))\n    }\n    return res\n}\n\nfunc TestAnti_Shuffle(t\
    \ *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"),\
    \ expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\"\
    \ },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual:\
    \ candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpb98qcvnn_test.go:26:22: expected ''=='', found ''=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075216
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    fmt.Println(s)\n    letters := make([]byte, len(s)+1)\n    letters[0] = '\\\
    0'\n    letters[1] = ' '\n    letters[len(s)] = '\\0'\n    for i, letter := range\
    \ s {\n        letters[i+2] = letter\n    }\n    letters[len(s)+1] = ' '\n   \
    \ fmt.Println(letters)\n    letters = letters[:len(s)+1]\n    letters = append(letters,\
    \ ' ')\n    letters = append(letters, '\\0')\n    fmt.Println(letters)\n    for\
    \ i, letter := range letters {\n        if i == 0 {\n            letters[i] =\
    \ letter\n        } else {\n            letters[i] = letters[i-1]\n        }\n\
    \    }\n    fmt.Println(letters)\n    return string(letters)\n}\n\nfunc TestAnti_Shuffle(t\
    \ *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"),\
    \ expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\"\
    \ },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual:\
    \ candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpjzqvs00o_test.go:23:21: illegal character U+0027 '''''' in escape sequence

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075216
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var ret string\n    var words []string\n    for _, w := range strings.Split(s,\
    \ \" \") {\n        words = append(words, w)\n    }\n\n    // Sort\n    for i\
    \ := 0; i < len(words)-1; i++ {\n        for j := i + 1; j < len(words); j++ {\n\
    \            // Check for space\n            if words[i] == \"\" && words[j] !=\
    \ \"\" {\n                if words[j] < words[i] {\n                    ret +=\
    \ words[j]\n                    words[j] = \"\"\n                }\n         \
    \   } else if words[i] != \"\" && words[j] == \"\" {\n                if words[i]\
    \ < words[j] {\n                    ret += words[i]\n                    words[i]\
    \ = \"\"\n                }\n            }\n        }\n    }\n    return ret +\
    \ \" \" + strings.Join(words, \" \")\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd7hynm75_test.go:23:23: undefined: strings

    /tmp/tmpd7hynm75_test.go:44:24: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075217
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var w []string\n    for _, v := range strings.Split(s, \" \") {\n       \
    \ v = strings.Replace(v, \"-\", \"\", -1)\n        w = append(w, v)\n    }\n \
    \   sort.Strings(w)\n    s = strings.Join(w, \" \")\n    return s\n}\n\nfunc TestAnti_Shuffle(t\
    \ *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"),\
    \ expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\"\
    \ },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual:\
    \ candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_s43qowr_test.go:22:23: undefined: strings

    /tmp/tmp_s43qowr_test.go:23:13: undefined: strings

    /tmp/tmp_s43qowr_test.go:26:5: undefined: sort

    /tmp/tmp_s43qowr_test.go:27:9: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075217
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var output bytes.Buffer\n    for _, word := range strings.Fields(s) {\n \
    \       for _, c := range word {\n            key := int(c)\n            if key\
    \ >= 97 && key <= 122 {\n                key += 32\n            }\n          \
    \  output.WriteRune(key)\n        }\n        output.WriteRune(' ')\n    }\n  \
    \  return output.String()\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptaq5a0y2_test.go:21:16: undefined: bytes

    /tmp/tmptaq5a0y2_test.go:22:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075217
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    output := \"\"\n    words := strings.Split(s, \" \")\n    for _, word :=\
    \ range words {\n        for _, ch := range word {\n            value := int(ch)\
    \ - int(97)\n            if value > 0 {\n                value = value - 1\n \
    \           }\n            output += string((value)+97)\n        }\n        output\
    \ += \" \"\n    }\n    return strings.Trim(output, \" \")\n}\n\nfunc TestAnti_Shuffle(t\
    \ *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"),\
    \ expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\"\
    \ },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual:\
    \ candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4ctao8y9_test.go:22:14: undefined: strings

    /tmp/tmp4ctao8y9_test.go:33:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075217
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var words []string\n    spaces := strings.Split(s, \" \")\n    for _, v :=\
    \ range spaces {\n        for i := range v {\n            if v[i] != \" \" {\n\
    \                sort.Strings(v)\n                j := sort.SearchStrings(v, v[i])\n\
    \                if j != i {\n                    words[j] = v[i]\n          \
    \      }\n            }\n        }\n    }\n    return strings.Join(words, \" \"\
    )\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3mka7s14_test.go:22:15: undefined: strings

    /tmp/tmp3mka7s14_test.go:26:17: undefined: sort

    /tmp/tmp3mka7s14_test.go:27:22: undefined: sort

    /tmp/tmp3mka7s14_test.go:34:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075217
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Fields(s)\n    n := len(words)\n    anti_shuffled := make([]byte,\
    \ len(s))\n    for i := 0; i < len(anti_shuffled); i++ {\n        anti_shuffled[i]\
    \ = '?'\n    }\n    for _, v := range words {\n        for i := 0; i < len(anti_shuffled);\
    \ i++ {\n            switch {\n            case anti_shuffled[i] == ' ':\n   \
    \             anti_shuffled[i] = v\n            case anti_shuffled[i] == '?':\n\
    \                anti_shuffled[i] = v\n            }\n        }\n    }\n    return\
    \ string(anti_shuffled)\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp09dc75ch_test.go:21:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075218
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    words := make([]string, len(words))\n\
    \n    for i, w := range words {\n        words[i] = strings.Replace(w, \" \",\
    \ \"\", -1)\n    }\n\n    for i, w := range words {\n        words[i] = strings.Replace(w,\
    \ \" \", \"\", -1)\n        words[i] = strings.ToLower(words[i])\n    }\n\n  \
    \  return strings.Join(words, \" \")\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpf91fqp6w_test.go:21:14: undefined: strings

    /tmp/tmpf91fqp6w_test.go:22:11: no new variables on left side of :=

    /tmp/tmpf91fqp6w_test.go:25:20: undefined: strings

    /tmp/tmpf91fqp6w_test.go:29:20: undefined: strings

    /tmp/tmpf91fqp6w_test.go:30:20: undefined: strings

    /tmp/tmpf91fqp6w_test.go:33:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075218
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    s := s.Replace(\" \", \"\")\n    p := map[string]string{}\n    for _, v :=\
    \ range strings.Split(s, \" \") {\n        p[v] = v\n    }\n    for k := range\
    \ p {\n        for i := 0; i < len(k); i++ {\n            k := k[:i] + \"!\" +\
    \ k[i:]\n        }\n        p[k] = \"\"\n    }\n    for k := range p {\n     \
    \   for i := len(k) - 1; i >= 0; i-- {\n            k := k[:i] + \"!\" + k[i:]\n\
    \        }\n        p[k] = \"\"\n    }\n    return strings.Join(strings.Split(s,\
    \ \" \"), \" \")\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpf8l3wdvp_test.go:21:7: no new variables on left side of :=

    /tmp/tmpf8l3wdvp_test.go:21:12: s.Replace undefined (type string has no field
    or method Replace)

    /tmp/tmpf8l3wdvp_test.go:23:23: undefined: strings

    /tmp/tmpf8l3wdvp_test.go:28:13: k declared but not used

    /tmp/tmpf8l3wdvp_test.go:34:13: k declared but not used

    /tmp/tmpf8l3wdvp_test.go:38:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075218
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    if len(s) <= 1 {\n        return s\n    }\n\n    arr := make([]rune, len(s))\n\
    \    for i := 0; i < len(arr); i++ {\n        arr[i] = s[i]\n    }\n\n    // Sort\
    \ the string based on the ASCII value of the character\n    sort.Sort(sort.StringSlice(arr))\n\
    \n    // Replace all characters in string with their sorted value based on ASCII\
    \ value.\n    for i := 0; i < len(arr); i++ {\n        arr[i] = string(arr[i])\n\
    \    }\n\n    // Recon\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate :=\
    \ anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmptzevaz61_test.go:39:6: expected ''('', found TestAnti_Shuffle

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075217
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        sorted_chars := strings.Split(word, \"\")\n        sorted_chars\
    \ = append(sorted_chars, \"\")\n        sorted_chars = append(sorted_chars, \"\
    \")\n        sorted_chars = append(sorted_chars, \"\")\n        sorted_chars =\
    \ append(sorted_chars, \"\")\n        sorted_chars = append(sorted_chars, \"\"\
    )\n        sorted_chars = append(sorted_chars, \"\")\n        sorted_chars = append(sorted_chars,\
    \ \"\")\n        sorted_chars = append(sorted_chars, \"\")\n        sorted_chars\
    \ = append(sorted_chars, \"\")\n        sorted_chars = append(sorted_chars, \"\
    \")\n        sorted_chars = append(sorted_chars, \"\")\n        sorted_chars =\
    \ append(sorted_chars, \"\")\n        sorted_chars = append(sorted_chars, \"\"\
    )\n        sorted_chars = append(sorted_chars, \"\")\n        sorted_chars = append(sorted_chars,\
    \ \"\")\n        sorted_chars = append(sorted_chars, \"\")\n        sorted_chars\
    \ = append(sorted_chars, \"\")\n        sorted_chars = append(sorted_chars, \"\
    \")\n        sorted_chars = append(sorted_chars, \"\")\n        sorted_chars =\
    \ append(sorted_chars, \"\")\n        sorted_chars = append(sorted_chars, \"\"\
    )\n        sorted_chars = append(sorted_chars, \"\")\n        sorted_chars = append(sorted_chars,\
    \ \"\")\n        sorted_chars = append(sorted_chars, \"\")\n        sorted_chars\
    \ = append(sorted_chars, \"\")\n        sorted_chars = append(sorted_chars, \"\
    \")\n        sorted_chars = append(sorted_chars, \"\")\n        sorted_chars =\
    \ append(sorted_chars, \"\")\n        sorted_chars = append(sorted_chars, \"\"\
    )\n        sorted_chars = append(sorted_chars, \"\")\n        sorted_chars = append(sorted_chars,\
    \ \"\")\n        sorted_chars = append(sorted_chars, \"\")\n        sorted_chars\
    \ = append(sorted_chars, \"\")\n        sorted_chars = append(sorted_chars, \"\
    \")\n        sorted_chars = append(sorted_chars, \"\")\n        sorted_chars =\
    \ append(sorted_chars, \"\")\n        sorted_chars = append(sorted_chars, \"\"\
    )\n        sorted_chars = append(sorted_chars, \"\")\n        sorted_chars = append(sorted_chars,\
    \ \"\")\n        sorted_chars = append(sorted_chars, \"\")\n        sorted_chars\
    \ = append(sorted_chars, \"\")\n        sorted_chars = append(sorted_chars, \"\
    \")\n        sorted_chars = append(sorted_chars, \"\")\n        sorted_chars =\
    \ append(sorted_chars, \"\")\n        sorted_chars = append(sorted_chars, \"\"\
    )\n        sorted_chars = append(sorted_chars, \"\")\n        sorted_chars = append(sorted_chars,\
    \ \"\")\n        sorted_chars = append(sorted_chars, \"\")\nfunc TestAnti_Shuffle(t\
    \ *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"),\
    \ expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\"\
    \ },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual:\
    \ candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpb6sdu8wt_test.go:73:6: expected ''('', found TestAnti_Shuffle

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075217
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var l int\n    var r int\n    var t int\n\n    for i := 0; i < len(s); i++\
    \ {\n        l = i\n        for j = i+1; j < len(s); j++ {\n            t = s[j]\n\
    \            r = r + s[j]\n            s[j] = s[r]\n            s[r] = t\n   \
    \     }\n    }\n\n    return s\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n \
    \ candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp05i7e97r_test.go:21:9: l declared but not used

    /tmp/tmp05i7e97r_test.go:27:13: undefined: j

    /tmp/tmp05i7e97r_test.go:28:17: cannot use s[j] (value of type byte) as type int
    in assignment

    /tmp/tmp05i7e97r_test.go:28:19: undefined: j

    /tmp/tmp05i7e97r_test.go:29:17: invalid operation: r + s[j] (mismatched types
    int and byte)

    /tmp/tmp05i7e97r_test.go:29:23: undefined: j

    /tmp/tmp05i7e97r_test.go:30:13: cannot assign to s[j] (value of type byte)

    /tmp/tmp05i7e97r_test.go:30:15: undefined: j

    /tmp/tmp05i7e97r_test.go:31:13: cannot assign to s[r] (value of type byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075218
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    l := len(s)\n    result := \"\"\n    char := make([]string, l)\n    for i\
    \ := 0; i < l; i++ {\n        char[i] = s[i]\n    }\n    for i := 0; i < l-1;\
    \ i++ {\n        switch {\n        case char[i] < char[i+1]:\n            char[i],\
    \ char[i+1] = char[i+1], char[i]\n        case char[i] == char[i+1]:\n       \
    \     if char[i] == ' ' {\n                if i != 0 {\n                    result\
    \ += \"  \"\n                }\n            } else {\n                result +=\
    \ char[i]\n            }\n        }\n    }\n    return result + char[len(char)-1]\n\
    }\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual:\
    \ candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"\
    ), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\"\
    \ },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\"\
    \ },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz3ni50h5_test.go:25:19: cannot use s[i] (value of type byte) as type string
    in assignment

    /tmp/tmpz3ni50h5_test.go:32:27: invalid operation: char[i] == '' '' (mismatched
    types string and untyped rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075218
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    wordsSorted := strings.Split(s, \" \")\n    wordsSorted = sort(wordsSorted)\n\
    \    return strings.Join(wordsSorted, \" \")\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmgmrk9yr_test.go:21:20: undefined: strings

    /tmp/tmpmgmrk9yr_test.go:22:19: undefined: sort

    /tmp/tmpmgmrk9yr_test.go:23:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075219
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    res := []rune(s)\n    for i := range res {\n        if s[i] == ' ' {\n  \
    \          j := i\n            for ++j < len(s) {\n                res[j] = s[j-1]\n\
    \            }\n            break\n        }\n        res[i] = s[i+1]\n    }\n\
    \    return string(res)\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5y_xu3js_test.go:25:17: expected operand, found ''++''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075218
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    if len(s) <= 1 {\n        return s\n    }\n    chars := []rune(s)\n    var\
    \ new_char rune\n    var index int = 0\n    var index int = 0\n    var index int\
    \ = 0\n    for index = 0; index < len(chars); index++ {\n        if chars[index]\
    \ == ' ' || chars[index] == '\\t' || chars[index] == '\\r' || chars[index] ==\
    \ '\\n' {\n            new_char = ' '\n        } else {\n            new_char\
    \ = chars[index]\n        }\n        for index++; index < len(chars); index++\
    \ {\n            if chars[index] > new_char {\n                if chars[index]\
    \ == ' ' || chars[index] == '\\t' || chars[index] == '\\r' || chars[index] ==\
    \ '\\n' {\n                    new_char = chars[index]\n                } else\
    \ {\n                    new_char = ' '\n                }\n            }\n  \
    \      }\n        chars[index] = new_char\n    }\n    return string(chars)\n}\n\
    \nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual:\
    \ candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"\
    ), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\"\
    \ },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\"\
    \ },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpp7sbo0fl_test.go:27:9:\
    \ index redeclared in this block\n\t/tmp/tmpp7sbo0fl_test.go:26:9: other declaration\
    \ of index\n/tmp/tmpp7sbo0fl_test.go:28:9: index redeclared in this block\n\t\
    /tmp/tmpp7sbo0fl_test.go:26:9: other declaration of index\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075219
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var orderedWord string = \"\"\n    // Write the code here\n\n    \n    return\
    \ orderedWord\n}\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmp40q3lasl_test.go:46: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmp40q3lasl_test.go:46: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmp40q3lasl_test.go:46: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmp40q3lasl_test.go:46: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmp40q3lasl_test.go:46: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmp40q3lasl_test.go:46: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075219
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    letters := []string{}\n    words = s.split(\" \")\n    letter := \"\"\n \
    \   for _, word := range words {\n        letter = word[0]\n        letters =\
    \ append(letters, letter)\n    }\n    return s\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl513odfm_test.go:22:5: undefined: words

    /tmp/tmpl513odfm_test.go:22:15: s.split undefined (type string has no field or
    method split)

    /tmp/tmpl513odfm_test.go:24:26: undefined: words

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075219
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    sortingMap := map[int]rune{}\n    for _, char := range s {\n        sortingMap[int(char)]\
    \ = char\n    }\n    for k, v := range sortingMap {\n        s = strings.Replace(s,\
    \ \"_\"+string(v)+\"_\", \"_\"+string(k)+\"_\", 1)\n    }\n    return s\n}\n\n\
    func TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual:\
    \ candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"\
    ), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\"\
    \ },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\"\
    \ },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqf907i5v_test.go:26:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075219
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // Your code goes here\n    \n    \n    return s\n}\n\nfunc TestAnti_Shuffle(t\
    \ *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"),\
    \ expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\"\
    \ },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual:\
    \ candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__1\
    \ (0.00s)\n        tmp6nyk86pb_test.go:46: expected 'ehllo', got 'hello'\n   \
    \ --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n        tmp6nyk86pb_test.go:46:\
    \ expected 'bemnru', got 'number'\n    --- FAIL: TestAnti_Shuffle/test_num__4\
    \ (0.00s)\n        tmp6nyk86pb_test.go:46: expected 'Hello !!!Wdlor', got 'Hello\
    \ World!!!'\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n        tmp6nyk86pb_test.go:46:\
    \ expected '.Hi My aemn is Meirst .Rboot How aer ?ouy', got 'Hi. My name is Mister\
    \ Robot. How are you?'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075219
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    result := \"\"\n    prev := ' '\n    for _, v := range s {\n        if v\
    \ == prev {\n            continue\n        }\n        result += v\n        prev\
    \ = v\n    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n\
    \  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp15je8rq2_test.go:27:9: invalid operation: result += v (mismatched types
    string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075219
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // Code goes here\n    \n    s := s\n    chars := make([]rune, len(s))\n\
    \    for i, c := range s {\n        chars[i] = c\n    }\n\n    charsMap := make(map[int]rune)\n\
    \    for i, c := range chars {\n        charsMap[c] = i\n    }\n    charsSorted\
    \ := make([]rune, len(chars))\n    for i, c := range chars {\n        charsSorted[i]\
    \ = charsMap[c]\n    }\n\n    s := \"\"\n    for _, v := range charsSorted {\n\
    \        if v != 0 {\n            s += string(v)\n        }\n    }\n    return\
    \ s\n}\n</code>\n<|/ a dscore=2 tags=algorithm,string,swift |>\n<| a dscore=2\
    \ tags=algorithm,string,swift |>\nOne way I did it:\n<code>\nfunc TestAnti_Shuffle(t\
    \ *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"),\
    \ expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\"\
    \ },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual:\
    \ candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpfmbajxez_test.go:46:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075218
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    t := make([]rune, len(s))\n    for i := 0; i < len(s); i++ {\n        t[i]\
    \ = s[i]\n    }\n\n    // Get all letters with ascii values less than 128\n  \
    \  var l []rune\n    for _, c := range s {\n        if c >= 'a' && c <= 'z' {\n\
    \            l = append(l, c)\n        }\n    }\n    // Sort letters\n    for\
    \ j := 1; j < len(l); j++ {\n        for i := j; i < len(l); i++ {\n         \
    \   if l[j-1] > l[i] {\n                j := i\n            }\n        }\n   \
    \     var t rune\n        if j != 0 {\n            t = l[j-1]\n        }\n   \
    \     l[j-1] = l[j]\n        l[j] = t\n    }\n\n    // Rebuild string\n    var\
    \ s2 string = \"\"\n    for _, c := range l {\n        s2 = s2 + string(c)\n \
    \   }\n    return s2\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzlzewku3_test.go:23:16: cannot use s[i] (value of type byte) as type rune
    in assignment

    /tmp/tmpzlzewku3_test.go:37:17: j declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075219
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var words []string\n    words := strings.Split(s, \" \")\n\n    var temp\
    \ string\n    var i int\n\n    for i = 0; i < len(words[0]); i++ {\n        for\
    \ j = i+1; j < len(words[0]); j++ {\n            if words[i][0] < words[j][0]\
    \ {\n                temp = words[i]\n                words[i] = words[j]\n  \
    \              words[j] = temp\n            }\n        }\n    }\n\n    return\
    \ strings.Join(words, \" \")\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmgnuu4f6_test.go:22:11: no new variables on left side of :=

    /tmp/tmpmgnuu4f6_test.go:22:14: undefined: strings

    /tmp/tmpmgnuu4f6_test.go:28:13: undefined: j

    /tmp/tmpmgnuu4f6_test.go:29:36: undefined: j

    /tmp/tmpmgnuu4f6_test.go:31:34: undefined: j

    /tmp/tmpmgnuu4f6_test.go:32:23: undefined: j

    /tmp/tmpmgnuu4f6_test.go:37:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075219
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Fields(s)\n    for i, word := range words {\n        j :=\
    \ i\n        for {\n            if j == len(words) {\n                break\n\
    \            }\n            if strings.ToLower(words[j])+words[j+1] != word+words[j+1]\
    \ {\n                break\n            }\n            j++\n        }\n      \
    \  if i != j {\n            words[i], words[j] = words[j], words[i]\n        }\n\
    \    }\n    return strings.Join(words, \" \")\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphnzcwv1h_test.go:21:14: undefined: strings

    /tmp/tmphnzcwv1h_test.go:28:16: undefined: strings

    /tmp/tmphnzcwv1h_test.go:37:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075220
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var out string\n    var j int\n    j := 0\n    c := 0\n    for {\n      \
    \  if j == len(s) {\n            break\n        }\n        if s[j] == ' ' {\n\
    \            out+=\" \"\n        }\n        if s[j] < 97 || s[j] > 122 {\n   \
    \         out+=\" \"\n        }\n        out+=string(s[j])\n        j++\n    }\n\
    \    return out\n}\n</code>\n<|/ a |>\n<| c |>\nThis code works, but I believe\
    \ that there are better solutions that may be faster than this one.\n<|/ c |>\n\
    <| c |>\nI am not going to argue, I think this code is more straightforward and\
    \ easy to read. I am also not going to write a benchmark just to say that it is\
    \ faster. :D\n<|/ c |>\n<| c |>\nI added a benchmark of all the provided solutions\
    \ (including mine, your and's solutions) and the difference between them is huge\
    \ (>30% slower). It's really hard to believe that using such a naive approach\
    \ this task is really impossible in linear time.\n<|/ c |>\n<| a dscore=2 |>\n\
    My solution is very simple, use two pointers for swapping.\n<code>\nfunc TestAnti_Shuffle(t\
    \ *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"),\
    \ expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\"\
    \ },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual:\
    \ candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp0nmu9597_test.go:40:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075219
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    ss := []string{}\n    for _, word := range strings.Fields(s) {\n        ss\
    \ := append(ss, strings.Fields(word)...)\n    }\n    sort.Strings(ss)\n    ss\
    \ := strings.Join(ss, \" \")\n    return ss\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp649ozjtk_test.go:22:26: undefined: strings

    /tmp/tmp649ozjtk_test.go:23:9: ss declared but not used

    /tmp/tmp649ozjtk_test.go:23:26: undefined: strings

    /tmp/tmp649ozjtk_test.go:25:5: undefined: sort

    /tmp/tmp649ozjtk_test.go:26:8: no new variables on left side of :=

    /tmp/tmp649ozjtk_test.go:26:11: undefined: strings

    /tmp/tmp649ozjtk_test.go:27:12: cannot use ss (variable of type []string) as type
    string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075220
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    chars := []rune(s)\n    var result string\n    for i := 0; i < len(chars);\
    \ i++ {\n        r := chars[i]\n        if r >= ' ' {\n            chars[i] =\
    \ r + r + r\n        }\n    }\n    for i := 0; i < len(chars); i++ {\n       \
    \ if chars[i] <= ' ' {\n            result += chars[i]\n        } else {\n   \
    \         result += string(rand.Intn(97) + rand.Intn(97) + rand.Intn(97))\n  \
    \      }\n    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n\
    \  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7xvcct8f_test.go:31:13: invalid operation: result += chars[i] (mismatched
    types string and rune)

    /tmp/tmp7xvcct8f_test.go:33:30: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075220
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // Implement function here.\n    words := strings.Split(s, \" \")\n    res\
    \ := \"\"\n    for _, word := range words {\n        for i := 0; i < len(word);\
    \ i++ {\n            letter := word[i]\n            if letter == '.' || letter\
    \ == '!' || letter == '?' || letter == ' ' {\n                res += letter\n\
    \                continue\n            }\n            index = -1\n           \
    \ if i > 0 {\n                index = strings.Index(strings.Reverse(word)[i-1],\
    \ letter)\n            }\n            if index != -1 {\n                index\
    \ -= i\n                letter = word[index]\n            }\n            res +=\
    \ letter\n        }\n    }\n    return res\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdkbb9f7t_test.go:22:14: undefined: strings

    /tmp/tmpdkbb9f7t_test.go:31:13: undefined: index

    /tmp/tmpdkbb9f7t_test.go:33:17: undefined: index

    /tmp/tmpdkbb9f7t_test.go:33:25: undefined: strings

    /tmp/tmpdkbb9f7t_test.go:35:16: undefined: index

    /tmp/tmpdkbb9f7t_test.go:36:17: undefined: index

    /tmp/tmpdkbb9f7t_test.go:37:31: undefined: index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075220
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // write code here\n    return s\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__1\
    \ (0.00s)\n        tmpf97vt_xh_test.go:44: expected 'ehllo', got 'hello'\n   \
    \ --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n        tmpf97vt_xh_test.go:44:\
    \ expected 'bemnru', got 'number'\n    --- FAIL: TestAnti_Shuffle/test_num__4\
    \ (0.00s)\n        tmpf97vt_xh_test.go:44: expected 'Hello !!!Wdlor', got 'Hello\
    \ World!!!'\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n        tmpf97vt_xh_test.go:44:\
    \ expected '.Hi My aemn is Meirst .Rboot How aer ?ouy', got 'Hi. My name is Mister\
    \ Robot. How are you?'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075220
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var result string = \"\"\n\n    for _, word := range strings.Split(s, \"\
    \ \") {\n        result += \"A\" + strings.Map(func(c rune) rune {\n         \
    \   return int(c) - 96\n        }, word)\n\n        // We append a space for each\
    \ word except the last one.\n        if strings.LastIndex(word, \" \") == 0 {\n\
    \            result += \" \"\n        }\n    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t\
    \ *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"),\
    \ expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\"\
    \ },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual:\
    \ candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptlsn7lwi_test.go:23:26: undefined: strings

    /tmp/tmptlsn7lwi_test.go:24:25: undefined: strings

    /tmp/tmptlsn7lwi_test.go:25:20: cannot use int(c) - 96 (value of type int) as
    type rune in return statement

    /tmp/tmptlsn7lwi_test.go:29:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075220
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var out bytes.Buffer\n    words := strings.Fields(s)\n    for _, word :=\
    \ range words {\n        chars := make([]byte, len(word))\n        for i := range\
    \ chars {\n            chars[i] = byte(word[i])\n        }\n        charsSorted\
    \ := chars\n        charsSorted[0] ^= byte(words[0])\n        charsSorted[len(charsSorted)-1]\
    \ ^= byte(words[len(words)-1])\n        charsSorted[0] ^= byte(words[len(words)-1])\n\
    \        charsSorted[len(charsSorted)-1] ^= byte(words[0])\n        for i := range\
    \ charsSorted {\n            out.WriteByte(charsSorted[i])\n        }\n    }\n\
    \    return out\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpf0wd19ns_test.go:21:13: undefined: bytes

    /tmp/tmpf0wd19ns_test.go:22:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075220
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    for i := 0; i < len(s); i++ {\n        for j := 0; j < len(s); j++ {\n  \
    \          if s[i] >= s[j] {\n                s[i], s[j] = s[j], s[i]\n      \
    \      }\n        }\n    }\n    return s\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpm0sy0ma8_test.go:24:17: cannot assign to s[i] (value of type byte)

    /tmp/tmpm0sy0ma8_test.go:24:23: cannot assign to s[j] (value of type byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075220
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // write your code here\n    words := strings.Split(s, \" \")\n    result\
    \ := \"\"\n    for _, v := range words {\n        result += strings.Replace(v,\
    \ v, \"\", -1)\n    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbz6qk1w7_test.go:22:14: undefined: strings

    /tmp/tmpbz6qk1w7_test.go:25:19: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075221
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    n := len(s)\n    if n < 2 {\n        return s\n    }\n\n    // First pass\
    \ - find all the spaces and words and store them in a map.\n    space := make(map[int]string)\n\
    \    word := make(map[string]int)\n    var index int\n    for i := 0; i < len(s);\
    \ i++ {\n        if s[i] == ' ' {\n            if index <= 0 {\n             \
    \   index = i\n            }\n            if _, ok := space[index-1]; ok {\n \
    \               space[index-1] += s[i]\n            }\n        }\n        if s[i]\
    \ == ' ' {\n            if i == 0 {\n                space[index] = s[i]\n   \
    \         } else {\n                word[s[len(s)-i]] = index\n            }\n\
    \        }\n    }\n\n    // Second pass - replace all spaces with their anti-shuffled\
    \ characters.\n    var out string\n    for k := range space {\n        out +=\
    \ space[k]\n    }\n\n    // Third pass - replace all words with their anti-shuffled\
    \ characters.\n    for k := range word {\n        out += word[k]\n    }\n\n  \
    \  return out\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpexmc6ca7_test.go:36:17: invalid operation: space[index - 1] += s[i] (mismatched
    types string and byte)

    /tmp/tmpexmc6ca7_test.go:41:32: cannot use s[i] (value of type byte) as type string
    in assignment

    /tmp/tmpexmc6ca7_test.go:43:22: cannot use s[len(s) - i] (value of type byte)
    as type string in map index

    /tmp/tmpexmc6ca7_test.go:56:9: invalid operation: out += word[k] (mismatched types
    string and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075221
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    sort.Strings(words)\n    out := strings.Join(words,\
    \ \" \")\n    return out\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpe7efhoni_test.go:21:14: undefined: strings

    /tmp/tmpe7efhoni_test.go:22:5: undefined: sort

    /tmp/tmpe7efhoni_test.go:23:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075221
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    i := 0\n    j := len(s)-1\n    l := 0\n    r := len(s)\n    for ; r != 0;\
    \ {\n        if (s[i] == s[j]) {\n            i++\n            j--\n         \
    \   l++\n            r--\n        } else {\n            if ((s[i] == 32) && (s[j]\
    \ == 32)) {\n                if ((s[i] == 32) && (r > j)) {\n                \
    \    i++\n                    r--\n                } else {\n                \
    \    if ((s[j] == 32) && (l < i)) {\n                        j--\n           \
    \             l++\n                    }\n                }\n            }\n \
    \           s[j] = s[i]\n            i++\n            j--\n            l++\n \
    \           r--\n        }\n    }\n    return s\n}\n\nfunc TestAnti_Shuffle(t\
    \ *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"),\
    \ expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\"\
    \ },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual:\
    \ candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4nn_cndp_test.go:43:13: cannot assign to s[j] (value of type byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075221
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, word :=\
    \ range words {\n        result = result + string(runetoa(strconv.Atoi(word[0])))\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphsxdgtha_test.go:21:14: undefined: strings

    /tmp/tmphsxdgtha_test.go:24:34: undefined: runetoa

    /tmp/tmphsxdgtha_test.go:24:42: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075221
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    result := \"\"\n    words := strings.Split(s, \" \")\n    for _, word :=\
    \ range words {\n        result += \"A\" + string([]byte(word))\n    }\n    return\
    \ result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpys3n76o9_test.go:22:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075221
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words = strings.Split(s, \" \")\n    result := \"\"\n    i := 0\n    for\
    \ _, v := range words {\n        letters := []rune(v)\n        for _, l := range\
    \ letters {\n            result += string(l) + string(letters[len(letters)-1-(i+1)%len(letters)])\n\
    \            i++\n        }\n    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t\
    \ *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"),\
    \ expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\"\
    \ },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual:\
    \ candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpazll3x2s_test.go:21:5: undefined: words

    /tmp/tmpazll3x2s_test.go:21:13: undefined: strings

    /tmp/tmpazll3x2s_test.go:24:23: undefined: words

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075221
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    b := make([]rune, len(s))\n    var k int\n    var i int\n\n    for k, i =\
    \ 0; i < len(s); i++ {\n        b[i] = s[i]\n        if i == len(s)-1 {\n    \
    \        break\n        }\n        if s[k] > s[i+1] {\n            b[i], b[i+1]\
    \ = b[i+1], s[i]\n        }\n    }\n\n    return string(b)\n}\n\nfunc TestAnti_Shuffle(t\
    \ *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"),\
    \ expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\"\
    \ },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual:\
    \ candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmph_zfi1dw_test.go:25:16: assignment mismatch: 2 variables but 1 value

    /tmp/tmph_zfi1dw_test.go:26:16: cannot use s[i] (value of type byte) as type rune
    in assignment

    /tmp/tmph_zfi1dw_test.go:31:36: cannot use s[i] (value of type byte) as type rune
    in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075221
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    result := \"\"\n    length := len(s)\n    result += \"^\" + s[0:length-1]\n\
    \    for i := 0; i < length-1; i++ {\n        result += \"-\"\n    }\n    result\
    \ += \"^\" + s[length-1]\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqpfb69s9_test.go:27:15: invalid operation: "^" + s[length - 1] (mismatched
    types untyped string and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075221
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var buffer bytes.Buffer\n    words := strings.Split(s, \" \")\n    for _,\
    \ word := range words {\n        buffer.WriteString(word)\n        buffer.WriteString(\"\
    \ \")\n    }\n    buffer.WriteString(\" \")\n    return buffer.String()\n}\n\n\
    func TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual:\
    \ candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"\
    ), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\"\
    \ },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\"\
    \ },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3yljwv96_test.go:21:16: undefined: bytes

    /tmp/tmp3yljwv96_test.go:22:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075221
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    result := \"\"\n    for _, w := range\
    \ words {\n        result += string([]byte(w)[byte('A'):byte('z')])\n    }\n \
    \   return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate :=\
    \ anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz9jjacrh_test.go:21:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075221
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // Write code here\n    \n    return s\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__1\
    \ (0.00s)\n        tmp5jkyc6xc_test.go:45: expected 'ehllo', got 'hello'\n   \
    \ --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n        tmp5jkyc6xc_test.go:45:\
    \ expected 'bemnru', got 'number'\n    --- FAIL: TestAnti_Shuffle/test_num__4\
    \ (0.00s)\n        tmp5jkyc6xc_test.go:45: expected 'Hello !!!Wdlor', got 'Hello\
    \ World!!!'\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n        tmp5jkyc6xc_test.go:45:\
    \ expected '.Hi My aemn is Meirst .Rboot How aer ?ouy', got 'Hi. My name is Mister\
    \ Robot. How are you?'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075222
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    output := \"\"\n    wordSlice := strings.Split(s, \" \")\n    for _, word\
    \ := range wordSlice {\n        asciiValue := 0\n        for _, char := range\
    \ word {\n            asciiValue += int(char)\n        }\n        for _, char\
    \ := range word {\n            if char == ' ' {\n                continue\n  \
    \          }\n            asciiValue -= int(char)\n        }\n        if asciiValue\
    \ > 0 {\n            continue\n        }\n        output += word\n    }\n    return\
    \ output\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpncfatjn7_test.go:22:18: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075222
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var rev string\n    var i int\n    var j int\n    var k int\n    var l int\n\
    \    var m int\n    var n int\n    var o int\n    for i = 0; i <= (len(s) - 2);\
    \ i += 2 {\n        k = i\n        for l = 0; l < len(s); l++ {\n            m\
    \ = k\n            n = m\n            o = n\n            for j = 0; j < len(s)\
    \ - 2; j++ {\n                if s[j] > s[k] {\n                    k = j\n  \
    \              }\n            }\n            n = o\n            k = m\n      \
    \  }\n        rev += s[k]\n    }\n    rev += s[i]\n    for l = 0; l < len(s);\
    \ l++ {\n        m = l\n        n = m\n        o = n\n        for j = 0; j < len(s)\
    \ - 1; j++ {\n            if s[j] < s[l] {\n                m = j\n          \
    \  }\n        }\n        n = o\n        m = l\n    }\n    rev += s[n]\n    return\
    \ rev\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpooylns44_test.go:43:9: invalid operation: rev += s[k] (mismatched types
    string and byte)

    /tmp/tmpooylns44_test.go:45:5: invalid operation: rev += s[i] (mismatched types
    string and byte)

    /tmp/tmpooylns44_test.go:58:5: invalid operation: rev += s[n] (mismatched types
    string and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075222
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    sort.Strings(words)\n    output :=\
    \ \"\"\n    prev := \"\"\n    for _, word := range words {\n        output +=\
    \ word\n        current := \"\"\n        for _, letter := range word {\n     \
    \       current += letter\n            current += strings.ToUpper(letter)\n  \
    \      }\n        if current != prev {\n            output += \" \"\n        }\n\
    \        prev = current\n    }\n    return output\n}\n\nfunc TestAnti_Shuffle(t\
    \ *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"),\
    \ expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\"\
    \ },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual:\
    \ candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuscdh1c9_test.go:21:14: undefined: strings

    /tmp/tmpuscdh1c9_test.go:22:5: undefined: sort

    /tmp/tmpuscdh1c9_test.go:30:24: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075222
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    var index int\n    var letters, blankSpace bool\n\
    \    for index, letter = range s {\n        // check for letters and blank space\n\
    \        if letters && blankSpace {\n            // new word created\n       \
    \     result = result + letter\n        }\n        if letters {\n            //\
    \ new letter created\n            result = result + letter\n            letters\
    \ = false\n        }\n        if letter == ' ' {\n            // new blank space\
    \ created\n            result = result + letter\n            blankSpace = false\n\
    \        }\n        // check for new word\n        if letter != ' ' {\n      \
    \      // new letter created\n            result = result + letter\n         \
    \   letters = true\n        }\n        // check for new blank space\n        if\
    \ letter == ' ' {\n            // new blank space created\n            result\
    \ = result + letter\n            blankSpace = true\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpljdkuyt8_test.go:22:9: index declared but not used

    /tmp/tmpljdkuyt8_test.go:24:16: undefined: letter

    /tmp/tmpljdkuyt8_test.go:28:31: undefined: letter

    /tmp/tmpljdkuyt8_test.go:32:31: undefined: letter

    /tmp/tmpljdkuyt8_test.go:35:12: undefined: letter

    /tmp/tmpljdkuyt8_test.go:37:31: undefined: letter

    /tmp/tmpljdkuyt8_test.go:41:12: undefined: letter

    /tmp/tmpljdkuyt8_test.go:43:31: undefined: letter

    /tmp/tmpljdkuyt8_test.go:47:12: undefined: letter

    /tmp/tmpljdkuyt8_test.go:49:31: undefined: letter

    /tmp/tmpljdkuyt8_test.go:22:9: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075222
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var words []string\n    var result []rune\n    for _, letter := range s {\n\
    \        bytes = make([]byte, unicode.MaxRune)\n        unicode.UTF8.GetRune(letter,\
    \ bytes)\n        if bytes.Compare(bytes) <= 0 {\n            words = append(words,\
    \ letter)\n        } else {\n            result = append(result, letter)\n   \
    \     }\n    }\n    for _, word := range words {\n        result[len(result)-1]\
    \ = word\n        result = append(result, ' ')\n    }\n    return string(result)\n\
    }\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual:\
    \ candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"\
    ), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\"\
    \ },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\"\
    \ },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx4hhdmir_test.go:24:9: undefined: bytes

    /tmp/tmpx4hhdmir_test.go:24:30: undefined: unicode

    /tmp/tmpx4hhdmir_test.go:25:9: undefined: unicode

    /tmp/tmpx4hhdmir_test.go:25:38: undefined: bytes

    /tmp/tmpx4hhdmir_test.go:26:12: undefined: bytes

    /tmp/tmpx4hhdmir_test.go:27:35: cannot use letter (variable of type rune) as type
    string in argument to append

    /tmp/tmpx4hhdmir_test.go:33:33: cannot use word (variable of type string) as type
    rune in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075222
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    ans := \"\"\n    for _, word := range\
    \ words {\n        t := \"\"\n        for i := 0; i < len(word); i++ {\n     \
    \       t += string(unicode.ToLower(word[i]))\n        }\n        ans += t\n \
    \   }\n    return ans\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpazidur0q_test.go:21:14: undefined: strings

    /tmp/tmpazidur0q_test.go:26:25: undefined: unicode

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075222
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    result := \"\"\n    for _, letter := range s {\n        if letter == ' '\
    \ {\n            result = result + letter + letter\n        } else {\n       \
    \     result += string([]byte(letter)[len(letter)-1]) + letter\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkhzeg782_test.go:24:22: invalid operation: result + letter (mismatched
    types string and rune)

    /tmp/tmpkhzeg782_test.go:26:37: cannot convert letter (variable of type rune)
    to type []byte

    /tmp/tmpkhzeg782_test.go:26:49: invalid argument: letter (variable of type rune)
    for len

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075222
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    words := make([]string, len(words))\n\
    \    for i, w := range words {\n        w := w\n        // Sort alphabetically\
    \ on ASCII value of each character\n        sort.StringSlice(w).Sort()\n     \
    \   words[i] = w\n    }\n    return strings.Join(words, \" \")\n}\n\nfunc TestAnti_Shuffle(t\
    \ *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"),\
    \ expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\"\
    \ },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual:\
    \ candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgvsxcmvs_test.go:21:14: undefined: strings

    /tmp/tmpgvsxcmvs_test.go:22:11: no new variables on left side of :=

    /tmp/tmpgvsxcmvs_test.go:26:9: undefined: sort

    /tmp/tmpgvsxcmvs_test.go:29:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075222
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    var prev string\n\n    for _, w := range strings.Split(s,\
    \ \" \") {\n        l = len(w)\n        if l < 4 {\n            prev = \"\"\n\
    \        } else {\n            prev = w[:1]\n        }\n\n        for _, c :=\
    \ range w {\n            ascii := int(c)\n            ascii += 127\n         \
    \   if ascii < 65 {\n                ascii += 32\n            }\n            if\
    \ ascii > 122 {\n                ascii -= 32\n            }\n            result\
    \ += string(rshift(ascii, prev))\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"\
    hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected:\
    \ \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n \
    \    { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n\
    \     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn8ng9btq_test.go:24:23: undefined: strings

    /tmp/tmpn8ng9btq_test.go:25:9: undefined: l

    /tmp/tmpn8ng9btq_test.go:26:12: undefined: l

    /tmp/tmpn8ng9btq_test.go:41:30: undefined: rshift

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075222
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var result string = \"\"\n    for _, char := range s {\n        result +=\
    \ string{char}\n    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnmevf2dh_test.go:23:19: invalid composite literal type string

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075222
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var output string\n    for _, word := range strings.Split(s, \" \") {\n \
    \       word = strings.Replace(word, \"\", \"*\", -1)\n        word += \" \"\n\
    \        for _, character := range word {\n            output += string([]byte{byte(character),\
    \ byte(256 - byte(character))})\n        }\n    }\n    return output\n}\n\nfunc\
    \ TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"\
    hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected:\
    \ \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n \
    \    { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n\
    \     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6ba6r7qj_test.go:22:26: undefined: strings

    /tmp/tmp6ba6r7qj_test.go:23:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075222
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // Write your function here\n    \n    for i := 0; i < len(s); i++ {\n  \
    \      if s[i] != \" \" {\n            s[i] = 'z'\n        }\n    }\n    \n  \
    \  var c int\n    for i := 0; i < len(s); i++ {\n        if s[i] == 'z' {\n  \
    \          c += s[i+1] - s[i] + 1\n            s[i+1] = s[i] + c\n        }\n\
    \    }\n    return s\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuz3k6o0g_test.go:24:20: invalid operation: s[i] != " " (mismatched types
    byte and untyped string)

    /tmp/tmpuz3k6o0g_test.go:25:13: cannot assign to s[i] (value of type byte)

    /tmp/tmpuz3k6o0g_test.go:32:13: invalid operation: c += s[i + 1] - s[i] + 1 (mismatched
    types int and byte)

    /tmp/tmpuz3k6o0g_test.go:33:22: invalid operation: s[i] + c (mismatched types
    byte and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075222
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := strings.Split(s, \" \")\n    wordList := []string{}\n    for _,\
    \ word := range words {\n        ascii := make([]int, len(word))\n        for\
    \ _, char := range word {\n            ascii[char] = char\n        }\n       \
    \ sort.Ints(ascii)\n        ascii = 0\n        word := \"\"\n        for _, char\
    \ := range word {\n            word = word + string(char+ascii[0])\n        }\n\
    \        wordList = append(wordList, word)\n    }\n    return strings.Join(wordList,\
    \ \" \")\n}\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprfay9dkx_test.go:21:14: undefined: strings

    /tmp/tmprfay9dkx_test.go:28:9: undefined: sort

    /tmp/tmprfay9dkx_test.go:29:17: cannot use 0 (untyped int constant) as []int value
    in assignment

    /tmp/tmprfay9dkx_test.go:32:34: invalid operation: char + ascii[0] (mismatched
    types rune and int)

    /tmp/tmprfay9dkx_test.go:36:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075222
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    w := []rune(s)\n    r := make([]rune, 0, len(s))\n    for i := 0; i < len(w);\
    \ i++ {\n        c := w[i]\n        if c < 65 {\n            r += append(r, c)\n\
    \        } else if c < 123 {\n            r += append(r, c-26)\n        } else\
    \ {\n            r += append(r, c-26+26)\n        }\n    }\n    return string(r)\n\
    }\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual:\
    \ candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"\
    ), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\"\
    \ },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\"\
    \ },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjjktsoua_test.go:26:13: invalid operation: operator + not defined on r
    (variable of type []rune)

    /tmp/tmpjjktsoua_test.go:28:13: invalid operation: operator + not defined on r
    (variable of type []rune)

    /tmp/tmpjjktsoua_test.go:30:13: invalid operation: operator + not defined on r
    (variable of type []rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075222
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // your code here\n    if len(s) == 0 {\n        return s\n    }\n\n    if\
    \ len(s) == 1 {\n        return \"\"\n    }\n\n    result := \"\"\n    for i :=\
    \ 0; i < len(s); i++ {\n        for j := 0; j < len(s); j++ {\n            if\
    \ j > i {\n                if s[j] < s[i] {\n                    s = s[len(s)-i:len(s)-j]\n\
    \                }\n                result += s[j]\n                j--\n    \
    \        } else {\n                result += s[i]\n                break\n   \
    \         }\n        }\n    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t\
    \ *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"),\
    \ expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\"\
    \ },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual:\
    \ candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpytt1fh19_test.go:37:17: invalid operation: result += s[j] (mismatched
    types string and byte)

    /tmp/tmpytt1fh19_test.go:40:17: invalid operation: result += s[i] (mismatched
    types string and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075222
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // TODO: implement the anti_shuffle function here\n    return s\n}\n\nfunc\
    \ TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"\
    hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected:\
    \ \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n \
    \    { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n\
    \     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__1\
    \ (0.00s)\n        tmp0xbql5o0_test.go:44: expected 'ehllo', got 'hello'\n   \
    \ --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n        tmp0xbql5o0_test.go:44:\
    \ expected 'bemnru', got 'number'\n    --- FAIL: TestAnti_Shuffle/test_num__4\
    \ (0.00s)\n        tmp0xbql5o0_test.go:44: expected 'Hello !!!Wdlor', got 'Hello\
    \ World!!!'\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n        tmp0xbql5o0_test.go:44:\
    \ expected '.Hi My aemn is Meirst .Rboot How aer ?ouy', got 'Hi. My name is Mister\
    \ Robot. How are you?'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075222
