language: go_test.go
name: HumanEval_7_filter_by_substring
results:
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    result := []string{}\n    for _,\
    \ s := range strings {\n        if strings.Contains(s, substring) {\n        \
    \    result = append(result, s)\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestFilter_By_Substring(t *testing.T) {\n  candidate := filter_by_substring\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"grunt\"\
    , \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_lkisl88_test.go:16:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074192
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    result := make([]string, 0, len(strings))\n\
    \    for _, s := range strings {\n        if strings.Contains(s, substring) {\n\
    \            result = append(result, s)\n        }\n    }\n    return result\n\
    }\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate := filter_by_substring\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"grunt\"\
    , \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6nn59rwf_test.go:16:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074472
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    filteredStrings := []string{}\n\
    \    for _, s := range strings {\n        if strings.Contains(s, substring) {\n\
    \            filteredStrings = append(filteredStrings, s)\n        }\n    }\n\
    \    return filteredStrings\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n\
    \  candidate := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp9qe5c2i_test.go:16:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074353
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    for _, s := range strings {\n  \
    \      if strings.Contains(s, substring) {\n            strings = append(strings,\
    \ s)\n        }\n    }\n    return strings\n}\n\nfunc TestFilter_By_Substring(t\
    \ *testing.T) {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]string{}, \"john\"), expected: []string{} },\n     {\
    \ actual: candidate([]string{\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n  \
    \   { actual: candidate([]string{\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"} },\n     { actual: candidate([]string{\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"}, \"run\"), expected: []string{\"grunt\", \"prune\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnsk4xpll_test.go:15:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074472
- exit_code: 1
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    var results []string\n    for _,\
    \ s := range strings {\n        if substring in s {\n            results = append(results,\
    \ s)\n        }\n    }\n    return results\n}\n\nfunc TestFilter_By_Substring(t\
    \ *testing.T) {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]string{}, \"john\"), expected: []string{} },\n     {\
    \ actual: candidate([]string{\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n  \
    \   { actual: candidate([]string{\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"} },\n     { actual: candidate([]string{\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"}, \"run\"), expected: []string{\"grunt\", \"prune\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpf8lcn45y_test.go:16:22: expected '';'', found in

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074472
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    var filtered = make([]string, 0)\n\
    \    for _, s := range strings {\n        if strings.Contains(s, substring) {\n\
    \            filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate := filter_by_substring\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"grunt\"\
    , \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpksv4wj72_test.go:16:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074472
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    var filtered []string\n    for _,\
    \ s := range strings {\n        if strings.Contains(s, substring) {\n        \
    \    filtered = append(filtered, s)\n        }\n    }\n    return filtered\n}\n\
    \nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate := filter_by_substring\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"grunt\"\
    , \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9vjpbrb4_test.go:16:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074192
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    var ret []string\n    for _, s :=\
    \ range strings {\n        if strings.Contains(s, substring) {\n            ret\
    \ = append(ret, s)\n        }\n    }\n    return ret\n}\n\nfunc TestFilter_By_Substring(t\
    \ *testing.T) {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]string{}, \"john\"), expected: []string{} },\n     {\
    \ actual: candidate([]string{\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n  \
    \   { actual: candidate([]string{\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"} },\n     { actual: candidate([]string{\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"}, \"run\"), expected: []string{\"grunt\", \"prune\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1r7gqe13_test.go:16:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074472
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    result := []string{}\n    for _,\
    \ v := range strings {\n        if strings.Contains(v, substring) {\n        \
    \    result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestFilter_By_Substring(t *testing.T) {\n  candidate := filter_by_substring\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"grunt\"\
    , \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9gc6ep_1_test.go:16:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074318
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    if len(substring) == 0 {\n     \
    \   return strings\n    }\n\n    filteredStrings := []string{}\n    for _, str\
    \ := range strings {\n        if strings.Contains(str, substring) {\n        \
    \    filteredStrings = append(filteredStrings, str)\n        }\n    }\n\n    return\
    \ filteredStrings\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp28up5k68_test.go:20:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074472
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    filteredStrings := make([]string,\
    \ 0)\n    filteredStrings = append(filteredStrings, strings...)\n    for _, string\
    \ := range strings {\n        if strings.Contains(string, substring) {\n     \
    \       filteredStrings = append(filteredStrings, string)\n        }\n    }\n\
    \    return filteredStrings\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n\
    \  candidate := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgkoelr66_test.go:17:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074472
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    return strings.filter(func(s string)\
    \ bool {\n        return strings.Contains(s, substring)\n    })\n}\n\nfunc TestFilter_By_Substring(t\
    \ *testing.T) {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]string{}, \"john\"), expected: []string{} },\n     {\
    \ actual: candidate([]string{\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n  \
    \   { actual: candidate([]string{\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"} },\n     { actual: candidate([]string{\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"}, \"run\"), expected: []string{\"grunt\", \"prune\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpssew2gx2_test.go:14:20: strings.filter undefined (type []string has no
    field or method filter)

    /tmp/tmpssew2gx2_test.go:15:24: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074472
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    for i := 0; i < len(strings); i++\
    \ {\n        if strings.Contains(strings[i], substring) {\n            strings\
    \ = append(strings, strings.Remove(strings[i], i, 1)...)\n        }\n    }\n \
    \   return strings\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmy48b_dt_test.go:15:20: strings.Contains undefined (type []string has
    no field or method Contains)

    /tmp/tmpmy48b_dt_test.go:16:47: strings.Remove undefined (type []string has no
    field or method Remove)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074472
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    filteredStrings := make([]string,\
    \ 0)\n\n    found := false\n    for _, string := range strings {\n        if strings.Contains(string,\
    \ substring) {\n            found = true\n            break\n        }\n    }\n\
    \    if !found {\n        return filteredStrings\n    }\n\n    for _, string :=\
    \ range strings {\n        if !strings.Contains(string, substring) {\n       \
    \     filteredStrings = append(filteredStrings, string)\n        }\n    }\n\n\
    \    return filteredStrings\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n\
    \  candidate := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9ew2p6ol_test.go:18:20: strings.Contains undefined (type []string has
    no field or method Contains)

    /tmp/tmp9ew2p6ol_test.go:28:21: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074472
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    result := []string{}\n    for _,\
    \ string := range strings {\n        if strings.Contains(string, substring) {\n\
    \            result = append(result, string)\n        }\n    }\n    return result\n\
    }\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate := filter_by_substring\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"grunt\"\
    , \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphfci5xuy_test.go:16:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074353
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    var filteredStrings []string\n \
    \   for _, s := range strings {\n        if strings.Contains(s, substring) {\n\
    \            filteredStrings = append(filteredStrings, s)\n        }\n    }\n\
    \    return filteredStrings\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n\
    \  candidate := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptouov3_u_test.go:16:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074472
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    var filtered []string\n\n    for\
    \ _, s := range strings {\n        if strings.Contains(s, substring) {\n     \
    \       filtered = append(filtered, s)\n        }\n    }\n\n    return filtered\n\
    }\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate := filter_by_substring\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"grunt\"\
    , \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk6r9t1u2_test.go:17:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074472
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    filtered := []string{}\n    for\
    \ _, value := range strings {\n        if strings.Contains(value, substring) {\n\
    \            filtered = append(filtered, value)\n        }\n    }\n    return\
    \ filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate :=\
    \ filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcuqkxwz__test.go:16:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074472
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    filteredStrings := []string{}\n\
    \    for _, string := range strings {\n        if strings.Contains(string, substring)\
    \ {\n            filteredStrings = append(filteredStrings, string)\n        }\n\
    \    }\n    return filteredStrings\n}\n\nfunc TestFilter_By_Substring(t *testing.T)\
    \ {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu5s8mir5_test.go:16:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074353
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    return strings.Filter(func(s string)\
    \ bool {\n        return strings.Contains(s, substring)\n    })\n}\n\nfunc TestFilter_By_Substring(t\
    \ *testing.T) {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]string{}, \"john\"), expected: []string{} },\n     {\
    \ actual: candidate([]string{\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n  \
    \   { actual: candidate([]string{\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"} },\n     { actual: candidate([]string{\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"}, \"run\"), expected: []string{\"grunt\", \"prune\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx3pk931q_test.go:14:20: strings.Filter undefined (type []string has no
    field or method Filter)

    /tmp/tmpx3pk931q_test.go:15:24: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074472
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    matches := []string{}\n    for _,\
    \ s := range strings {\n        if strings.Contains(s, substring) {\n        \
    \    matches = append(matches, s)\n        }\n    }\n    return matches\n}\n\n\
    func TestFilter_By_Substring(t *testing.T) {\n  candidate := filter_by_substring\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"grunt\"\
    , \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcdi34d9__test.go:16:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074472
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    m := make(map[string]bool)\n   \
    \ for _, s := range strings {\n        m[s] = true\n    }\n    for _, s := range\
    \ strings.ToLower(substring) {\n        m[s] = true\n    }\n\n    var result []string\n\
    \    for k := range m {\n        result = append(result, k)\n    }\n\n    return\
    \ result\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate := filter_by_substring\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"grunt\"\
    , \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8n83ypzi_test.go:18:31: strings.ToLower undefined (type []string has no
    field or method ToLower)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074472
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    var result []string\n    for _,\
    \ v := range strings {\n        if substring == \"\" {\n            result = append(result,\
    \ v)\n        } else {\n            if strings.Contains(v, substring) {\n    \
    \            result = append(result, v)\n            }\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnb9qjho3_test.go:19:24: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074472
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    strings := make([]string, 0, len(strings))\n\
    \    for _, element := range strings {\n        if strings.Contains(element, substring)\
    \ {\n            strings = append(strings, element)\n        }\n    }\n    return\
    \ strings\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate := filter_by_substring\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"grunt\"\
    , \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8r366gqk_test.go:14:13: no new variables on left side of :=

    /tmp/tmp8r366gqk_test.go:16:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074472
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    out := []string{}\n    for _, v\
    \ := range strings {\n        if strings.Contains(v, substring) {\n          \
    \  out = append(out, v)\n        }\n    }\n    return out;\n}\n\nfunc TestFilter_By_Substring(t\
    \ *testing.T) {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]string{}, \"john\"), expected: []string{} },\n     {\
    \ actual: candidate([]string{\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n  \
    \   { actual: candidate([]string{\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"} },\n     { actual: candidate([]string{\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"}, \"run\"), expected: []string{\"grunt\", \"prune\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmph6l08xug_test.go:16:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074472
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    var filtered_strings []string\n\
    \    idx := -1\n    for _, s := range strings {\n        idx += 1\n        if\
    \ strings.Contains(s, substring) {\n            filtered_strings = append(filtered_strings,\
    \ s)\n        }\n    }\n    return filtered_strings\n}\n\nfunc TestFilter_By_Substring(t\
    \ *testing.T) {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]string{}, \"john\"), expected: []string{} },\n     {\
    \ actual: candidate([]string{\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n  \
    \   { actual: candidate([]string{\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"} },\n     { actual: candidate([]string{\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"}, \"run\"), expected: []string{\"grunt\", \"prune\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw2o7hih5_test.go:18:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074472
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    var filtered []string\n\n    for\
    \ _, s := range strings {\n        if strings.Contains(s, substring) {\n     \
    \       filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate := filter_by_substring\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"grunt\"\
    , \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpopp7__j4_test.go:17:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074472
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    filteredStrings := make([]string,\
    \ 0, len(strings))\n    for _, string := range strings {\n        if strings.Contains(string,\
    \ substring) {\n            filteredStrings = append(filteredStrings, string)\n\
    \        }\n    }\n    return filteredStrings\n}\n\nfunc TestFilter_By_Substring(t\
    \ *testing.T) {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]string{}, \"john\"), expected: []string{} },\n     {\
    \ actual: candidate([]string{\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n  \
    \   { actual: candidate([]string{\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"} },\n     { actual: candidate([]string{\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"}, \"run\"), expected: []string{\"grunt\", \"prune\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7o05b33k_test.go:16:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074472
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    result := []string{}\n    for _,\
    \ s := range strings {\n        if strings.Contains(s, substring) {\n        \
    \    result = append(result, s)\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestFilter_By_Substring(t *testing.T) {\n  candidate := filter_by_substring\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"grunt\"\
    , \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_lkisl88_test.go:16:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074192
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    var result []string\n\n    for _,\
    \ s := range strings {\n        if strings.Contains(s, substring) {\n        \
    \    result = append(result, s)\n        }\n    }\n\n    return result\n}\n\n\
    func TestFilter_By_Substring(t *testing.T) {\n  candidate := filter_by_substring\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"grunt\"\
    , \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxc2w5p6h_test.go:17:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074472
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    for _, s := range strings {\n  \
    \      if strings.Contains(s, substring) {\n            return strings\n     \
    \   }\n    }\n    return nil\n}\n\nfunc TestFilter_By_Substring(t *testing.T)\
    \ {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnph02kec_test.go:15:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074474
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    result := []string{}\n    for _,\
    \ s := range strings {\n        if strings.Contains(s, substring) {\n        \
    \    result = append(result, s)\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestFilter_By_Substring(t *testing.T) {\n  candidate := filter_by_substring\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"grunt\"\
    , \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_lkisl88_test.go:16:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074192
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    return filter_by_substring2(strings,\
    \ substring, false)\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6ohpt4tz_test.go:14:12: undefined: filter_by_substring2

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074474
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    // Initialize result slice\n   \
    \ var result []string\n\n    // Loop through all the strings\n    for _, s :=\
    \ range strings {\n        // Check if given string contains given substring\n\
    \        if strings.Contains(s, substring) {\n            result = append(result,\
    \ s)\n        }\n    }\n\n    return result\n}\n\nfunc TestFilter_By_Substring(t\
    \ *testing.T) {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]string{}, \"john\"), expected: []string{} },\n     {\
    \ actual: candidate([]string{\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n  \
    \   { actual: candidate([]string{\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"} },\n     { actual: candidate([]string{\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"}, \"run\"), expected: []string{\"grunt\", \"prune\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwqcz3xab_test.go:20:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074474
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    filtered := []string{}\n    for\
    \ _, s := range strings {\n        if strings.Contains(s, substring) {\n     \
    \       filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate := filter_by_substring\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"grunt\"\
    , \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpt4i45i6y_test.go:16:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074192
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    result := make([]string, 0)\n  \
    \  for _, s := range strings {\n        if strings.Contains(s, substring) {\n\
    \            result = append(result, s)\n        }\n    }\n    return result\n\
    }\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate := filter_by_substring\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"grunt\"\
    , \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8v_8ft5o_test.go:16:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074474
- exit_code: 1
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    filtered := make([]string, 0)\n\
    \    for _, string := range strings {\n        if substring == string {\n    \
    \        filtered = append(filtered, string)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate := filter_by_substring\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"grunt\"\
    , \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Substring (0.00s)\n    --- FAIL: TestFilter_By_Substring/test_num__1\
    \ (0.00s)\n        tmp70wdi40h_test.go:39: expected '[xxx xxxAAA xxx]', got '[xxx\
    \ xxx]'\n    --- FAIL: TestFilter_By_Substring/test_num__2 (0.00s)\n        tmp70wdi40h_test.go:39:\
    \ expected '[xxx aaaxxy xxxAAA xxx]', got '[]'\n    --- FAIL: TestFilter_By_Substring/test_num__3\
    \ (0.00s)\n        tmp70wdi40h_test.go:39: expected '[grunt prune]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074474
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    var result []string\n    for _,\
    \ s := range strings {\n        if strings.Contains(s, substring) {\n        \
    \    result = append(result, s)\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestFilter_By_Substring(t *testing.T) {\n  candidate := filter_by_substring\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"grunt\"\
    , \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpe378xzgg_test.go:16:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074192
- exit_code: 1
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    // Write your code here\n\n    return\
    \ strings\n}\n</code>\n<|/ a tags=slice,go |>\n<| c |>\nI understand what you're\
    \ saying, but I don't think this is what the OP was after.  He wants to filter\
    \ an input list of strings only for the ones that contain a certain substring.\n\
    <|/ c |>\n<| c |>\nThis is exactly what I needed. Thank you so much. I was struggling\
    \ with understanding the slice methods and was getting confused about the difference\
    \ between slices and arrays. Now I understand that []string is an array of strings\
    \ and string is a string. Thank you.\n<|/ c |>\n<| a tags=slice,go dscore=0 |>\n\
    Try this\n<code>\npackage main\n\nimport (\n    \"fmt\"\n    \"strings\"\n)\n\n\
    func TestFilter_By_Substring(t *testing.T) {\n  candidate := filter_by_substring\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"grunt\"\
    , \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp9owke37y_test.go:18:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074474
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    var new_strings []string\n    for\
    \ _, s := range strings {\n        if strings.Contains(s, substring) {\n     \
    \       new_strings = append(new_strings, s)\n        }\n    }\n    return new_strings\n\
    }\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate := filter_by_substring\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"grunt\"\
    , \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpguovsufx_test.go:16:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074326
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    filtered := make([]string, 0)\n\
    \    for _, s := range strings {\n        if strings.Contains(s, substring) {\n\
    \            filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate := filter_by_substring\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"grunt\"\
    , \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5hedhdkf_test.go:16:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074353
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    r := make([]string, 0, len(strings))\n\
    \    for _, s := range strings {\n        if strings.Contains(s, substring) {\n\
    \            r = append(r, s)\n        }\n    }\n    return r\n}\n\nfunc TestFilter_By_Substring(t\
    \ *testing.T) {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]string{}, \"john\"), expected: []string{} },\n     {\
    \ actual: candidate([]string{\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n  \
    \   { actual: candidate([]string{\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"} },\n     { actual: candidate([]string{\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"}, \"run\"), expected: []string{\"grunt\", \"prune\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpm9m6tz93_test.go:16:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074474
- exit_code: 1
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    filtered := make([]string, 0, len(strings))\n\
    \    for _, string := range strings {\n        if substring == string {\n    \
    \        filtered = append(filtered, string)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate := filter_by_substring\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"grunt\"\
    , \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Substring (0.00s)\n    --- FAIL: TestFilter_By_Substring/test_num__1\
    \ (0.00s)\n        tmpz1vifuxh_test.go:39: expected '[xxx xxxAAA xxx]', got '[xxx\
    \ xxx]'\n    --- FAIL: TestFilter_By_Substring/test_num__2 (0.00s)\n        tmpz1vifuxh_test.go:39:\
    \ expected '[xxx aaaxxy xxxAAA xxx]', got '[]'\n    --- FAIL: TestFilter_By_Substring/test_num__3\
    \ (0.00s)\n        tmpz1vifuxh_test.go:39: expected '[grunt prune]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074474
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    var result []string\n    for _,\
    \ s := range strings {\n        if strings.Contains(s, substring) {\n        \
    \    result = append(result, s)\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestFilter_By_Substring(t *testing.T) {\n  candidate := filter_by_substring\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"grunt\"\
    , \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpe378xzgg_test.go:16:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074192
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    filteredStrings := []string{}\n\
    \    for _, string := range strings {\n        if strings.Contains(string, substring)\
    \ {\n            filteredStrings = append(filteredStrings, string)\n        }\n\
    \    }\n    return filteredStrings\n}\n\nfunc TestFilter_By_Substring(t *testing.T)\
    \ {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu5s8mir5_test.go:16:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074353
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    var res []string\n    for _, s :=\
    \ range strings {\n        if strings.Contains(s, substring) {\n            res\
    \ = append(res, s)\n        }\n    }\n    return res\n}\n\nfunc TestFilter_By_Substring(t\
    \ *testing.T) {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]string{}, \"john\"), expected: []string{} },\n     {\
    \ actual: candidate([]string{\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n  \
    \   { actual: candidate([]string{\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"} },\n     { actual: candidate([]string{\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"}, \"run\"), expected: []string{\"grunt\", \"prune\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyeql6_bs_test.go:16:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074474
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    var filtered []string\n    for _,\
    \ s := range strings {\n        if strings.Contains(s, substring) {\n        \
    \    filtered = append(filtered, s)\n        }\n    }\n    return filtered\n}\n\
    \nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate := filter_by_substring\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"grunt\"\
    , \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9vjpbrb4_test.go:16:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074192
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    var res []string\n    for _, s :=\
    \ range strings {\n        if strings.Contains(s, substring) {\n            res\
    \ = append(res, s)\n        }\n    }\n    return res\n}\n\nfunc TestFilter_By_Substring(t\
    \ *testing.T) {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]string{}, \"john\"), expected: []string{} },\n     {\
    \ actual: candidate([]string{\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n  \
    \   { actual: candidate([]string{\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"} },\n     { actual: candidate([]string{\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"}, \"run\"), expected: []string{\"grunt\", \"prune\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyeql6_bs_test.go:16:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074474
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    filteredStrings := []string{}\n\
    \    for _, value := range strings {\n        if strings.Contains(value, substring)\
    \ {\n            filteredStrings = append(filteredStrings, value)\n        }\n\
    \    }\n    return filteredStrings\n}\n\nfunc TestFilter_By_Substring(t *testing.T)\
    \ {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx45s2z2x_test.go:16:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074474
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    if substring == \"\" {\n       \
    \ return strings\n    }\n\n    foundString := false\n    found := false\n    result\
    \ := []string{}\n\n    for _, string := range strings {\n        if foundString\
    \ && strings.Contains(string, substring) {\n            found = true\n       \
    \     continue\n        }\n        if strings.Contains(string, substring) {\n\
    \            foundString = true\n            continue\n        }\n\n        if\
    \ !found && !strings.Contains(string, \".\") {\n            result = append(result,\
    \ string)\n        }\n    }\n\n    return result\n}\n\nfunc TestFilter_By_Substring(t\
    \ *testing.T) {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]string{}, \"john\"), expected: []string{} },\n     {\
    \ actual: candidate([]string{\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n  \
    \   { actual: candidate([]string{\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"} },\n     { actual: candidate([]string{\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"}, \"run\"), expected: []string{\"grunt\", \"prune\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr44sk8fr_test.go:23:35: strings.Contains undefined (type []string has
    no field or method Contains)

    /tmp/tmpr44sk8fr_test.go:27:20: strings.Contains undefined (type []string has
    no field or method Contains)

    /tmp/tmpr44sk8fr_test.go:32:31: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074474
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    filteredStrings := []string{}\n\
    \    for _, string := range strings {\n        if strings.Contains(string, substring)\
    \ {\n            filteredStrings = append(filteredStrings, string)\n        }\n\
    \    }\n    return filteredStrings\n}\n\nfunc TestFilter_By_Substring(t *testing.T)\
    \ {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu5s8mir5_test.go:16:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074353
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    result := make([]string, 0, len(strings))\n\
    \    for _, s := range strings {\n        if strings.Contains(s, substring) {\n\
    \            result = append(result, s)\n        }\n    }\n    return result\n\
    }\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate := filter_by_substring\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"grunt\"\
    , \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6nn59rwf_test.go:16:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074472
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    return filter(strings, func(s string)\
    \ bool {\n        return strings.Contains(s, substring)\n    })\n}\n\nfunc TestFilter_By_Substring(t\
    \ *testing.T) {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]string{}, \"john\"), expected: []string{} },\n     {\
    \ actual: candidate([]string{\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n  \
    \   { actual: candidate([]string{\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"} },\n     { actual: candidate([]string{\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"}, \"run\"), expected: []string{\"grunt\", \"prune\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq2fy2jia_test.go:14:12: undefined: filter

    /tmp/tmpq2fy2jia_test.go:15:24: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074474
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    filteredStrings := []string{}\n\
    \    for _, s := range strings {\n        if strings.Contains(s, substring) {\n\
    \            filteredStrings = append(filteredStrings, s)\n        }\n    }\n\
    \    return filteredStrings\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n\
    \  candidate := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp9qe5c2i_test.go:16:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074353
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    for _, s := range strings {\n  \
    \      if substring == \"\" || strings.Contains(s, substring) {\n            strings\
    \ = append(strings, s)\n        }\n    }\n    return strings\n}\n\nfunc TestFilter_By_Substring(t\
    \ *testing.T) {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]string{}, \"john\"), expected: []string{} },\n     {\
    \ actual: candidate([]string{\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n  \
    \   { actual: candidate([]string{\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"} },\n     { actual: candidate([]string{\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"}, \"run\"), expected: []string{\"grunt\", \"prune\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkx725lh5_test.go:15:39: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074474
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    for _, s := range strings {\n  \
    \      if strings.Contains(s, substring) {\n            fmt.Println(\"true\")\n\
    \        } else {\n            fmt.Println(\"false\")\n        }\n    }\n    return\
    \ strings\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate := filter_by_substring\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"grunt\"\
    , \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpm21j9gj8_test.go:15:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074474
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    var filtered_strings []string\n\
    \    for _, s := range strings {\n        if strings.Contains(s, substring) {\n\
    \            filtered_strings = append(filtered_strings, s)\n        }\n    }\n\
    \    return filtered_strings\n}\n\nfunc TestFilter_By_Substring(t *testing.T)\
    \ {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7fuh0_cm_test.go:16:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074192
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    var filtered = make([]string, 0)\n\
    \n    for _, s := range strings {\n        if strings.Contains(s, substring) {\n\
    \            filtered = append(filtered, s)\n        }\n    }\n\n    return filtered\n\
    }\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate := filter_by_substring\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"grunt\"\
    , \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3w8c8047_test.go:17:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074474
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    result := []string{}\n    for _,\
    \ s := range strings {\n        if strings.Contains(s, substring) {\n        \
    \    result = append(result, s)\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestFilter_By_Substring(t *testing.T) {\n  candidate := filter_by_substring\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"grunt\"\
    , \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_lkisl88_test.go:16:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074192
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    res := make([]string, 0)\n\n   \
    \ for _, str := range strings {\n        if strings.Contains(str, substring) {\n\
    \            res = append(res, str)\n        }\n    }\n\n    return res\n}\n\n\
    func TestFilter_By_Substring(t *testing.T) {\n  candidate := filter_by_substring\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"grunt\"\
    , \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3aopf7og_test.go:17:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074474
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    var result []string\n    for _,\
    \ s := range strings {\n        if strings.Contains(s, substring) {\n        \
    \    result = append(result, s)\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestFilter_By_Substring(t *testing.T) {\n  candidate := filter_by_substring\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"grunt\"\
    , \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpe378xzgg_test.go:16:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074192
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    var filtered_strings []string\n\
    \    for _, string := range strings {\n        if strings.Contains(string, substring)\
    \ {\n            filtered_strings = append(filtered_strings, string)\n       \
    \ }\n    }\n    return filtered_strings\n}\n\nfunc TestFilter_By_Substring(t *testing.T)\
    \ {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoqm5g8r__test.go:16:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074353
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    return strings.FilterStringSlice(func(s\
    \ string) bool {\n        return strings.Contains(s, substring)\n    })\n}\n\n\
    func TestFilter_By_Substring(t *testing.T) {\n  candidate := filter_by_substring\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"grunt\"\
    , \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkrx84mg__test.go:14:20: strings.FilterStringSlice undefined (type []string
    has no field or method FilterStringSlice)

    /tmp/tmpkrx84mg__test.go:15:24: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074474
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    return filter(strings, func(name\
    \ string) bool {\n        return strings.Contains(name, substring)\n    })\n}\n\
    \nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate := filter_by_substring\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"grunt\"\
    , \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6up3rwi7_test.go:14:12: undefined: filter

    /tmp/tmp6up3rwi7_test.go:15:24: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074474
- exit_code: 1
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    result := []string{}\n    for _,\
    \ string := range strings {\n        if substring == string {\n            result\
    \ = append(result, string)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Substring(t\
    \ *testing.T) {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]string{}, \"john\"), expected: []string{} },\n     {\
    \ actual: candidate([]string{\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n  \
    \   { actual: candidate([]string{\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"} },\n     { actual: candidate([]string{\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"}, \"run\"), expected: []string{\"grunt\", \"prune\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Substring (0.00s)\n    --- FAIL: TestFilter_By_Substring/test_num__1\
    \ (0.00s)\n        tmptk3dd_dh_test.go:39: expected '[xxx xxxAAA xxx]', got '[xxx\
    \ xxx]'\n    --- FAIL: TestFilter_By_Substring/test_num__2 (0.00s)\n        tmptk3dd_dh_test.go:39:\
    \ expected '[xxx aaaxxy xxxAAA xxx]', got '[]'\n    --- FAIL: TestFilter_By_Substring/test_num__3\
    \ (0.00s)\n        tmptk3dd_dh_test.go:39: expected '[grunt prune]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074474
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    filtered := []string{}\n    for\
    \ _, s := range strings {\n        if strings.Contains(s, substring) {\n     \
    \       filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate := filter_by_substring\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"grunt\"\
    , \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpt4i45i6y_test.go:16:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074192
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    if len(strings) == 0 {\n       \
    \ return strings\n    }\n    filteredSet := make([]string, 0)\n    for _, str\
    \ := range strings {\n        if strings.Contains(str, substring) {\n        \
    \    filteredSet = append(filteredSet, str)\n        }\n    }\n    return filteredSet\n\
    }\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate := filter_by_substring\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"grunt\"\
    , \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw9tzivfi_test.go:19:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074474
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    var result = make([]string, 0)\n\
    \    for _, s := range strings {\n        if strings.Contains(s, substring) {\n\
    \            result = append(result, s)\n        }\n    }\n    return result\n\
    }\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate := filter_by_substring\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"grunt\"\
    , \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo1d4n12h_test.go:16:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074474
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    result := []string{}\n    for _,\
    \ string := range strings {\n        if strings.Index(string, substring) != -1\
    \ {\n            result = append(result, string)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate := filter_by_substring\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"grunt\"\
    , \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4lyvdh3k_test.go:16:20: strings.Index undefined (type []string has no
    field or method Index)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074474
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    if strings == nil {\n        return\
    \ nil\n    }\n\n    result := make([]string, 0)\n\n    for _, s := range strings\
    \ {\n        if strings.Contains(s, substring) {\n            result = append(result,\
    \ s)\n        }\n    }\n\n    return result\n}\n\nfunc TestFilter_By_Substring(t\
    \ *testing.T) {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]string{}, \"john\"), expected: []string{} },\n     {\
    \ actual: candidate([]string{\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n  \
    \   { actual: candidate([]string{\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"} },\n     { actual: candidate([]string{\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"}, \"run\"), expected: []string{\"grunt\", \"prune\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmph7r1d1ly_test.go:21:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074474
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    result := []string{}\n    for _,\
    \ s := range strings {\n        if strings.Contains(s, substring) {\n        \
    \    result = append(result, s)\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestFilter_By_Substring(t *testing.T) {\n  candidate := filter_by_substring\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"grunt\"\
    , \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_lkisl88_test.go:16:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074192
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    for _, s := range strings {\n  \
    \      if strings.Contains(s, substring) {\n            strings = append(strings[:i],\
    \ strings[i+1:]...)\n        }\n    }\n    return strings\n}\n\nfunc TestFilter_By_Substring(t\
    \ *testing.T) {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]string{}, \"john\"), expected: []string{} },\n     {\
    \ actual: candidate([]string{\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n  \
    \   { actual: candidate([]string{\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"} },\n     { actual: candidate([]string{\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"}, \"run\"), expected: []string{\"grunt\", \"prune\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo_mh49js_test.go:15:20: strings.Contains undefined (type []string has
    no field or method Contains)

    /tmp/tmpo_mh49js_test.go:16:39: undefined: i

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074475
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    idx := -1\n    for idx < len(strings)\
    \ {\n        if strings[idx] == substring {\n            break\n        }\n  \
    \  }\n    if idx < 0 {\n        return strings\n    }\n\n    output := []string{}\n\
    \    for i := idx + 1; i < len(strings); i++ {\n        output += []string{strings[i]}\n\
    \    }\n\n    return output\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n\
    \  candidate := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnnt19kkd_test.go:26:9: invalid operation: operator + not defined on output
    (variable of type []string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074475
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    var filtered = make([]string, 0)\n\
    \    for _, s := range strings {\n        if strings.Contains(s, substring) {\n\
    \            filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate := filter_by_substring\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"grunt\"\
    , \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpksv4wj72_test.go:16:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074472
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    var filtered []string\n    for _,\
    \ s := range strings {\n        if strings.Contains(s, substring) {\n        \
    \    filtered = append(filtered, s)\n        }\n    }\n    return filtered\n}\n\
    \nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate := filter_by_substring\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"grunt\"\
    , \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9vjpbrb4_test.go:16:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074192
- exit_code: 1
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    var ret []string\n    for _, string\
    \ := range strings {\n        if string == substring {\n            ret = append(ret,\
    \ string)\n        }\n    }\n    return ret\n}\n\nfunc TestFilter_By_Substring(t\
    \ *testing.T) {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]string{}, \"john\"), expected: []string{} },\n     {\
    \ actual: candidate([]string{\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n  \
    \   { actual: candidate([]string{\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"} },\n     { actual: candidate([]string{\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"}, \"run\"), expected: []string{\"grunt\", \"prune\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Substring (0.00s)\n    --- FAIL: TestFilter_By_Substring/test_num__1\
    \ (0.00s)\n        tmprfn3m5tf_test.go:39: expected '[xxx xxxAAA xxx]', got '[xxx\
    \ xxx]'\n    --- FAIL: TestFilter_By_Substring/test_num__2 (0.00s)\n        tmprfn3m5tf_test.go:39:\
    \ expected '[xxx aaaxxy xxxAAA xxx]', got '[]'\n    --- FAIL: TestFilter_By_Substring/test_num__3\
    \ (0.00s)\n        tmprfn3m5tf_test.go:39: expected '[grunt prune]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074476
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    result := []string{}\n    for _,\
    \ s := range strings {\n        if strings.Contains(s, substring) {\n        \
    \    result = append(result, s)\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestFilter_By_Substring(t *testing.T) {\n  candidate := filter_by_substring\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"grunt\"\
    , \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_lkisl88_test.go:16:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074192
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    var output_strings = make([]string,\
    \ 0)\n    strings := strings.ToLower(\"abc\")\n    strings := strings.ToLower(\"\
    bacd\")\n    strings := strings.ToLower(\"cde\")\n    strings := strings.ToLower(\"\
    array\")\n    strings := strings.ToLower(\"string\")\n    for _, string := range\
    \ strings {\n        if strings.Contains(string, substring) {\n            output_strings\
    \ = append(output_strings, string)\n        }\n    }\n    return output_strings\n\
    }\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate := filter_by_substring\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"grunt\"\
    , \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsqm8blrc_test.go:15:13: no new variables on left side of :=

    /tmp/tmpsqm8blrc_test.go:15:24: strings.ToLower undefined (type []string has no
    field or method ToLower)

    /tmp/tmpsqm8blrc_test.go:16:13: no new variables on left side of :=

    /tmp/tmpsqm8blrc_test.go:16:24: strings.ToLower undefined (type []string has no
    field or method ToLower)

    /tmp/tmpsqm8blrc_test.go:17:13: no new variables on left side of :=

    /tmp/tmpsqm8blrc_test.go:17:24: strings.ToLower undefined (type []string has no
    field or method ToLower)

    /tmp/tmpsqm8blrc_test.go:18:13: no new variables on left side of :=

    /tmp/tmpsqm8blrc_test.go:18:24: strings.ToLower undefined (type []string has no
    field or method ToLower)

    /tmp/tmpsqm8blrc_test.go:19:13: no new variables on left side of :=

    /tmp/tmpsqm8blrc_test.go:19:24: strings.ToLower undefined (type []string has no
    field or method ToLower)

    /tmp/tmpsqm8blrc_test.go:19:13: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074476
- exit_code: 1
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    var result []string = strings\n\
    \    for _, s := range strings {\n        if substring == s {\n            result\
    \ = append(result, s)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Substring(t\
    \ *testing.T) {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]string{}, \"john\"), expected: []string{} },\n     {\
    \ actual: candidate([]string{\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n  \
    \   { actual: candidate([]string{\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"} },\n     { actual: candidate([]string{\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"}, \"run\"), expected: []string{\"grunt\", \"prune\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Substring (0.00s)\n    --- FAIL: TestFilter_By_Substring/test_num__1\
    \ (0.00s)\n        tmpmxhhut0m_test.go:39: expected '[xxx xxxAAA xxx]', got '[xxx\
    \ asd xxy john doe xxxAAA xxx xxx xxx]'\n    --- FAIL: TestFilter_By_Substring/test_num__2\
    \ (0.00s)\n        tmpmxhhut0m_test.go:39: expected '[xxx aaaxxy xxxAAA xxx]',\
    \ got '[xxx asd aaaxxy john doe xxxAAA xxx]'\n    --- FAIL: TestFilter_By_Substring/test_num__3\
    \ (0.00s)\n        tmpmxhhut0m_test.go:39: expected '[grunt prune]', got '[grunt\
    \ trumpet prune gruesome]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074476
- exit_code: 1
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    // Write your code here\n    return\
    \ strings\n}\n</code>\n<|/ a tags=go |>\n<| c |>\n`strings.HasPrefix()` is better\
    \ than `strings.HasSubstring()`\n<|/ c |>\n<| a dscore=4 |>\nTo find out if a\
    \ string starts with a specific substring you can do this:\n<code>\nfunc TestFilter_By_Substring(t\
    \ *testing.T) {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]string{}, \"john\"), expected: []string{} },\n     {\
    \ actual: candidate([]string{\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n  \
    \   { actual: candidate([]string{\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"} },\n     { actual: candidate([]string{\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"}, \"run\"), expected: []string{\"grunt\", \"prune\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp9wl7qjdq_test.go:17:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074475
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    filteredStrings := make([]string,\
    \ 0, len(strings))\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filteredStrings = append(filteredStrings, s)\n   \
    \     }\n    }\n    return filteredStrings\n}\n\nfunc TestFilter_By_Substring(t\
    \ *testing.T) {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]string{}, \"john\"), expected: []string{} },\n     {\
    \ actual: candidate([]string{\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n  \
    \   { actual: candidate([]string{\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"} },\n     { actual: candidate([]string{\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"}, \"run\"), expected: []string{\"grunt\", \"prune\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpktiv7fvj_test.go:16:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074476
- exit_code: 1
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    for _, s := range strings {\n  \
    \      if substring != \"\" && substring != s {\n            continue\n      \
    \  }\n        \n        return strings\n    }\n\n    return []string{}\n}\n\n\
    func TestFilter_By_Substring(t *testing.T) {\n  candidate := filter_by_substring\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"grunt\"\
    , \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Substring (0.00s)\n    --- FAIL: TestFilter_By_Substring/test_num__1\
    \ (0.00s)\n        tmpal3m_w86_test.go:41: expected '[xxx xxxAAA xxx]', got '[xxx\
    \ asd xxy john doe xxxAAA xxx]'\n    --- FAIL: TestFilter_By_Substring/test_num__2\
    \ (0.00s)\n        tmpal3m_w86_test.go:41: expected '[xxx aaaxxy xxxAAA xxx]',\
    \ got '[]'\n    --- FAIL: TestFilter_By_Substring/test_num__3 (0.00s)\n      \
    \  tmpal3m_w86_test.go:41: expected '[grunt prune]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074476
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    i := 0\n    for _, str := range\
    \ strings {\n        if strings.Contains(str, substring) {\n            strings[i]\
    \ = str\n            i += 1\n        }\n    }\n    return strings[:i]\n}\n\nfunc\
    \ TestFilter_By_Substring(t *testing.T) {\n  candidate := filter_by_substring\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"grunt\"\
    , \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0ehj0xk3_test.go:16:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074476
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    for _, s := range strings {\n  \
    \      if strings.Contains(s, substring) {\n            return strings\n     \
    \   }\n    }\n\n    return nil\n}\n\nfunc TestFilter_By_Substring(t *testing.T)\
    \ {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb212sy3f_test.go:15:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074476
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    var output = []string{}\n    for\
    \ _, s := range strings {\n        if strings.Contains(s, substring) {\n     \
    \       output = append(output, s)\n        }\n    }\n    return output\n}\n\n\
    func TestFilter_By_Substring(t *testing.T) {\n  candidate := filter_by_substring\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"grunt\"\
    , \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp27fbsjx7_test.go:16:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074476
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    filteredStrings := []string{}\n\
    \    for _, string := range strings {\n        if strings.Contains(string, substring)\
    \ {\n            filteredStrings = append(filteredStrings, string)\n        }\n\
    \    }\n    return filteredStrings\n}\n\nfunc TestFilter_By_Substring(t *testing.T)\
    \ {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu5s8mir5_test.go:16:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074353
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    for _, s := range strings {\n  \
    \      if strings.Contains(s, substring) {\n            return strings\n     \
    \   }\n    }\n\n    return strings\n}\n\nfunc TestFilter_By_Substring(t *testing.T)\
    \ {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp71kusita_test.go:15:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074476
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    var result []string\n    result\
    \ := append(result, strings...)\n    result := FilterBySubstring(result, substring)\n\
    \    return result\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnhnnzilu_test.go:15:12: no new variables on left side of :=

    /tmp/tmpnhnnzilu_test.go:16:12: no new variables on left side of :=

    /tmp/tmpnhnnzilu_test.go:16:15: undefined: FilterBySubstring

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074476
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    // return strings if substring not\
    \ in strings\n    if len(substring) == 0 {\n        return strings\n    }\n\n\
    \    // Find a substring starting at position 0\n    pos := strings.Index(substring,\
    \ strings[0])\n    if pos == -1 {\n        return strings\n    }\n\n    // Return\
    \ all strings that match\n    matches := strings.Split(substring, \".\")\n   \
    \ filtered := make([]string, 0)\n    for _, s := range strings {\n        // Append\
    \ the portion of the string that matches the filter\n        if strings.Contains(s,\
    \ matches[0]) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \n    // Append the portion of the string that didn't match the filter\n    if\
    \ len(matches) == 1 {\n        filtered = append(filtered, strings[pos+len(matches[0]):])\n\
    \    }\n\n    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T)\
    \ {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgjg_wksz_test.go:20:20: strings.Index undefined (type []string has no
    field or method Index)

    /tmp/tmpgjg_wksz_test.go:26:24: strings.Split undefined (type []string has no
    field or method Split)

    /tmp/tmpgjg_wksz_test.go:30:20: strings.Contains undefined (type []string has
    no field or method Contains)

    /tmp/tmpgjg_wksz_test.go:37:44: cannot use strings[pos + len(matches[0]):] (value
    of type []string) as type string in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074476
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    strings = make([]string, 0, len(strings))\n\
    \    for _, s := range strings {\n        if strings.Contains(s, substring) {\n\
    \            strings = append(strings, s)\n        }\n    }\n    return strings\n\
    }\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate := filter_by_substring\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"grunt\"\
    , \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyj_udyvl_test.go:16:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074476
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    ret := []string{}\n    for _, string\
    \ := range strings {\n        if strings.Contains(string, substring) {\n     \
    \       ret = append(ret, string)\n        }\n    }\n    return ret\n}\n\nfunc\
    \ TestFilter_By_Substring(t *testing.T) {\n  candidate := filter_by_substring\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"grunt\"\
    , \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp31oku9nu_test.go:16:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074476
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    for _, s := range strings {\n  \
    \      if strings.Contains(s, substring) {\n            return strings\n     \
    \   }\n    }\n    return nil\n}\n\nfunc TestFilter_By_Substring(t *testing.T)\
    \ {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnph02kec_test.go:15:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074474
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    filteredString := []string{}\n\n\
    \    for _, s := range strings {\n        if strings.Contains(s, substring) {\n\
    \            filteredString = append(filteredString, s)\n        }\n    }\n\n\
    \    return filteredString\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n\
    \  candidate := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpumvres46_test.go:17:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074476
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    result := make([]string, 0)\n  \
    \  for _, string := range strings {\n        if strings.Contains(string, substring)\
    \ {\n            result = append(result, string)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate := filter_by_substring\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"grunt\"\
    , \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp728lhz5n_test.go:16:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074476
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    var filtered []string\n    for _,\
    \ s := range strings {\n        if strings.Contains(s, substring) {\n        \
    \    filtered = append(filtered, s)\n        }\n    }\n    return filtered\n}\n\
    \nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate := filter_by_substring\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"grunt\"\
    , \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9vjpbrb4_test.go:16:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074192
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    return strings.Filter(func(str string)\
    \ bool {\n        return strings.Contains(str, substring)\n    })\n}\n\nfunc TestFilter_By_Substring(t\
    \ *testing.T) {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]string{}, \"john\"), expected: []string{} },\n     {\
    \ actual: candidate([]string{\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n  \
    \   { actual: candidate([]string{\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"} },\n     { actual: candidate([]string{\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"}, \"run\"), expected: []string{\"grunt\", \"prune\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8idrnw2b_test.go:14:20: strings.Filter undefined (type []string has no
    field or method Filter)

    /tmp/tmp8idrnw2b_test.go:15:24: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074476
- exit_code: 1
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    found := make(map[string]\nfunc\
    \ TestFilter_By_Substring(t *testing.T) {\n  candidate := filter_by_substring\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"grunt\"\
    , \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpfoz3nr6n_test.go:14:30: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074476
- exit_code: 1
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    var filtered []string\n    for _,\
    \ str := range strings {\n        if str == substring {\n            filtered\
    \ = append(filtered, str)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_By_Substring(t\
    \ *testing.T) {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]string{}, \"john\"), expected: []string{} },\n     {\
    \ actual: candidate([]string{\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n  \
    \   { actual: candidate([]string{\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"} },\n     { actual: candidate([]string{\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"}, \"run\"), expected: []string{\"grunt\", \"prune\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Substring (0.00s)\n    --- FAIL: TestFilter_By_Substring/test_num__1\
    \ (0.00s)\n        tmp3k0wfyot_test.go:39: expected '[xxx xxxAAA xxx]', got '[xxx\
    \ xxx]'\n    --- FAIL: TestFilter_By_Substring/test_num__2 (0.00s)\n        tmp3k0wfyot_test.go:39:\
    \ expected '[xxx aaaxxy xxxAAA xxx]', got '[]'\n    --- FAIL: TestFilter_By_Substring/test_num__3\
    \ (0.00s)\n        tmp3k0wfyot_test.go:39: expected '[grunt prune]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074476
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    for _, s := range strings {\n  \
    \      if strings.Contains(s, substring) {\n            strings = append(strings,\
    \ s)\n        }\n    }\n    return strings\n}\n\nfunc TestFilter_By_Substring(t\
    \ *testing.T) {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]string{}, \"john\"), expected: []string{} },\n     {\
    \ actual: candidate([]string{\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n  \
    \   { actual: candidate([]string{\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"} },\n     { actual: candidate([]string{\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"}, \"run\"), expected: []string{\"grunt\", \"prune\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnsk4xpll_test.go:15:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074472
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    result := []string{}\n    for _,\
    \ string := range strings {\n        if strings.Contains(string, substring) {\n\
    \            result = append(result, string)\n        }\n    }\n    return result\n\
    }\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate := filter_by_substring\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"grunt\"\
    , \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphfci5xuy_test.go:16:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074353
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    filtered_strings := []string{}\n\
    \    for _, s := range strings {\n        if strings.Contains(s, substring) {\n\
    \            filtered_strings = append(filtered_strings, s)\n        }\n    }\n\
    \    return filtered_strings\n}\n\nfunc TestFilter_By_Substring(t *testing.T)\
    \ {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuh56_xva_test.go:16:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074316
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    // TODO: Should use more sophisticated\
    \ algorithm here\n    var filteredStrings []string\n    for _, string := range\
    \ strings {\n        if strings.Contains(string, substring) {\n            filteredStrings\
    \ = append(filteredStrings, string)\n        }\n    }\n    return filteredStrings\n\
    }\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate := filter_by_substring\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"grunt\"\
    , \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnwo14gjy_test.go:17:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074476
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    result := []string{}\n    for _,\
    \ str := range strings {\n        if strings.Contains(str, substring) {\n    \
    \        result = append(result, str)\n        }\n    }\n    return result\n}\n\
    \nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate := filter_by_substring\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"grunt\"\
    , \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsinu3stv_test.go:16:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074252
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    var filtered_strings = make([]string,\
    \ 0)\n    for _, string := range strings {\n        if strings.Contains(string,\
    \ substring) {\n            filtered_strings = append(filtered_strings, string)\n\
    \        }\n    }\n    return filtered_strings\n}\n\nfunc TestFilter_By_Substring(t\
    \ *testing.T) {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]string{}, \"john\"), expected: []string{} },\n     {\
    \ actual: candidate([]string{\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n  \
    \   { actual: candidate([]string{\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"} },\n     { actual: candidate([]string{\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"}, \"run\"), expected: []string{\"grunt\", \"prune\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3guelofe_test.go:16:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074476
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    filtered_strings := make([]string,\
    \ 0)\n    for _, string := range strings {\n        if strings.Contains(string,\
    \ substring) {\n            filtered_strings = append(filtered_strings, string)\n\
    \        }\n    }\n    return filtered_strings\n}\n\nfunc TestFilter_By_Substring(t\
    \ *testing.T) {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]string{}, \"john\"), expected: []string{} },\n     {\
    \ actual: candidate([]string{\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n  \
    \   { actual: candidate([]string{\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"} },\n     { actual: candidate([]string{\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"}, \"run\"), expected: []string{\"grunt\", \"prune\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbkpcwe_f_test.go:16:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074477
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    filteredStrings := []string{}\n\
    \    for _, s := range strings {\n        if strings.Contains(s, substring) {\n\
    \            filteredStrings = append(filteredStrings, s)\n        }\n    }\n\
    \    return filteredStrings\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n\
    \  candidate := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp9qe5c2i_test.go:16:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074353
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    var result []string\n    for _,\
    \ s := range strings {\n        if strings.Contains(s, substring) {\n        \
    \    result = append(result, s)\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestFilter_By_Substring(t *testing.T) {\n  candidate := filter_by_substring\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"grunt\"\
    , \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpe378xzgg_test.go:16:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074192
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    var ret []string\n    for _, s :=\
    \ range strings {\n        if strings.Contains(s, substring) {\n            ret\
    \ = append(ret, s)\n        }\n    }\n    return ret\n}\n\nfunc TestFilter_By_Substring(t\
    \ *testing.T) {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]string{}, \"john\"), expected: []string{} },\n     {\
    \ actual: candidate([]string{\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n  \
    \   { actual: candidate([]string{\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"} },\n     { actual: candidate([]string{\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"}, \"run\"), expected: []string{\"grunt\", \"prune\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1r7gqe13_test.go:16:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074472
- exit_code: 1
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    filteredStrings := []string{}\n\
    \    for _, string := range strings {\n        if substring == string {\n    \
    \        filteredStrings = append(filteredStrings, string)\n        }\n    }\n\
    \    return filteredStrings\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n\
    \  candidate := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Substring (0.00s)\n    --- FAIL: TestFilter_By_Substring/test_num__1\
    \ (0.00s)\n        tmph6oltyqs_test.go:39: expected '[xxx xxxAAA xxx]', got '[xxx\
    \ xxx]'\n    --- FAIL: TestFilter_By_Substring/test_num__2 (0.00s)\n        tmph6oltyqs_test.go:39:\
    \ expected '[xxx aaaxxy xxxAAA xxx]', got '[]'\n    --- FAIL: TestFilter_By_Substring/test_num__3\
    \ (0.00s)\n        tmph6oltyqs_test.go:39: expected '[grunt prune]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074477
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    if substring==\"\" {\n        return\
    \ strings\n    }\n\n    return strings.Filter(func(s string) bool {\n        return\
    \ strings.Contains(s, substring)\n    })\n}\n\nfunc TestFilter_By_Substring(t\
    \ *testing.T) {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]string{}, \"john\"), expected: []string{} },\n     {\
    \ actual: candidate([]string{\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n  \
    \   { actual: candidate([]string{\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"} },\n     { actual: candidate([]string{\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"}, \"run\"), expected: []string{\"grunt\", \"prune\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1zlxsuxe_test.go:18:20: strings.Filter undefined (type []string has no
    field or method Filter)

    /tmp/tmp1zlxsuxe_test.go:19:24: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074477
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    result := make([]string, 0)\n  \
    \  found := false\n    for _, string := range strings {\n        if found {\n\
    \            break\n        }\n        if strings.Contains(string, substring)\
    \ {\n            result = append(result, string)\n            found = true\n \
    \       }\n    }\n    return result\n}\n\nfunc TestFilter_By_Substring(t *testing.T)\
    \ {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3lqsvmqj_test.go:20:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074477
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    var result []string\n    found :=\
    \ false\n    for _, s := range strings {\n        if strings.Contains(s, substring)\
    \ {\n            result = append(result, s)\n            found = true\n      \
    \  }\n    }\n    if !found {\n        result = nil\n    }\n    return result\n\
    }\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate := filter_by_substring\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"grunt\"\
    , \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpicqm1dgw_test.go:17:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074478
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    var filtered []string\n\n    for\
    \ _, s := range strings {\n        if strings.Contains(s, substring) {\n     \
    \       filtered = append(filtered, s)\n        }\n    }\n\n    return filtered\n\
    }\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate := filter_by_substring\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"grunt\"\
    , \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk6r9t1u2_test.go:17:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074472
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    var result []string\n    for _,\
    \ s := range strings {\n        if strings.Contains(s, substring) {\n        \
    \    result = append(result, s)\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestFilter_By_Substring(t *testing.T) {\n  candidate := filter_by_substring\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"grunt\"\
    , \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpe378xzgg_test.go:16:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074192
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    filtered := []string{}\n    for\
    \ _, s := range strings {\n        if strings.Contains(s, substring) {\n     \
    \       filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate := filter_by_substring\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"grunt\"\
    , \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpt4i45i6y_test.go:16:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074192
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    return filter_by_substring_test(strings,\
    \ substring, true)\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplc3myvpq_test.go:14:12: undefined: filter_by_substring_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074478
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    filtered := []string{}\n    for\
    \ _, v := range strings {\n        if strings.Contains(v, substring) {\n     \
    \       filtered = append(filtered, v)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate := filter_by_substring\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"grunt\"\
    , \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp76_4604d_test.go:16:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074478
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    var filteredStrings []string\n \
    \   for _, string := range strings {\n        if strings.Contains(string, substring)\
    \ {\n            filteredStrings = append(filteredStrings, string)\n        }\n\
    \    }\n    return filteredStrings\n}\n\nfunc TestFilter_By_Substring(t *testing.T)\
    \ {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7q_bxgn4_test.go:16:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074316
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    filtered := make([]string, 0)\n\
    \    for _, s := range strings {\n        if strings.Contains(s, substring) {\n\
    \            filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate := filter_by_substring\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"grunt\"\
    , \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5hedhdkf_test.go:16:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074353
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    var filtered = []string{}\n    for\
    \ _, v := range strings {\n        if strings.Contains(v, substring) {\n     \
    \       filtered = append(filtered, v)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate := filter_by_substring\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"grunt\"\
    , \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptivp7yb9_test.go:16:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074478
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    for _, s := range strings {\n  \
    \      if strings.Contains(s, substring) {\n            strings = append(strings,\
    \ s)\n        }\n    }\n    return strings\n}\n\nfunc TestFilter_By_Substring(t\
    \ *testing.T) {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]string{}, \"john\"), expected: []string{} },\n     {\
    \ actual: candidate([]string{\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n  \
    \   { actual: candidate([]string{\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"} },\n     { actual: candidate([]string{\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"}, \"run\"), expected: []string{\"grunt\", \"prune\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnsk4xpll_test.go:15:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074472
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    if substring == \"\" {\n       \
    \ return strings\n    }\n    var filteredStrings []string\n    for _, str := range\
    \ strings {\n        if strings.Contains(str, substring) {\n            filteredStrings\
    \ = append(filteredStrings, str)\n        }\n    }\n    return filteredStrings\n\
    }\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate := filter_by_substring\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"grunt\"\
    , \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkiyfajwz_test.go:19:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074478
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    filtered := []string{}\n    for\
    \ _, string := range strings {\n        if strings.Contains(string, substring)\
    \ {\n            filtered = append(filtered, string)\n        }\n    }\n    return\
    \ filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate :=\
    \ filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpip9b9j9k_test.go:16:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074478
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    if substring == \"\" {\n       \
    \ return strings\n    }\n    filteredList := []string{}\n    for _, str := range\
    \ strings {\n        if strings.Contains(str, substring) {\n            filteredList\
    \ = append(filteredList, str)\n        }\n    }\n    return filteredList\n}\n\n\
    func TestFilter_By_Substring(t *testing.T) {\n  candidate := filter_by_substring\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"grunt\"\
    , \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnmt3f3p4_test.go:19:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074478
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    return filter_by_substring_test(strings,\
    \ substring, false)\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnolv9gsv_test.go:14:12: undefined: filter_by_substring_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074478
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    var filtered_strings []string\n\
    \    for _, string := range strings {\n        if strings.Contains(string, substring)\
    \ {\n            filtered_strings = append(filtered_strings, string)\n       \
    \ }\n    }\n    return filtered_strings\n}\n\nfunc TestFilter_By_Substring(t *testing.T)\
    \ {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoqm5g8r__test.go:16:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074353
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    return filter_by_substring_recursive(strings,\
    \ \"\", []string{}, substring, false)\n}\n\nfunc TestFilter_By_Substring(t *testing.T)\
    \ {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp03qwpj42_test.go:14:12: undefined: filter_by_substring_recursive

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074478
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    var result []string\n    for _,\
    \ s := range strings {\n        if strings.Contains(s, substring) {\n        \
    \    result = append(result, s)\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestFilter_By_Substring(t *testing.T) {\n  candidate := filter_by_substring\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"grunt\"\
    , \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpe378xzgg_test.go:16:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074192
- exit_code: 1
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    result := []string{}\n    for _,\
    \ string := range strings {\n        if substring == string {\n            result\
    \ = append(result, string)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Substring(t\
    \ *testing.T) {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]string{}, \"john\"), expected: []string{} },\n     {\
    \ actual: candidate([]string{\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n  \
    \   { actual: candidate([]string{\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"} },\n     { actual: candidate([]string{\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"}, \"run\"), expected: []string{\"grunt\", \"prune\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Substring (0.00s)\n    --- FAIL: TestFilter_By_Substring/test_num__1\
    \ (0.00s)\n        tmptk3dd_dh_test.go:39: expected '[xxx xxxAAA xxx]', got '[xxx\
    \ xxx]'\n    --- FAIL: TestFilter_By_Substring/test_num__2 (0.00s)\n        tmptk3dd_dh_test.go:39:\
    \ expected '[xxx aaaxxy xxxAAA xxx]', got '[]'\n    --- FAIL: TestFilter_By_Substring/test_num__3\
    \ (0.00s)\n        tmptk3dd_dh_test.go:39: expected '[grunt prune]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074474
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    filteredStrings := []string{}\n\n\
    \    for _, string := range strings {\n        if strings.Contains(string, substring)\
    \ {\n            filteredStrings = append(filteredStrings, string)\n        }\n\
    \    }\n\n    return filteredStrings\n}\n\nfunc TestFilter_By_Substring(t *testing.T)\
    \ {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp83ga8r_3_test.go:17:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074478
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    filteredStrings := []string{}\n\
    \    for _, string := range strings {\n        if strings.Contains(string, substring)\
    \ {\n            filteredStrings = append(filteredStrings, string)\n        }\n\
    \    }\n    return filteredStrings\n}\n\nfunc TestFilter_By_Substring(t *testing.T)\
    \ {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu5s8mir5_test.go:16:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074353
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    return filter_by_substring_test(strings,\
    \ substring)\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate :=\
    \ filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq3tavbpg_test.go:14:12: undefined: filter_by_substring_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074478
- exit_code: 1
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    return strings\n}\n\nfunc TestFilter_By_Substring(t\
    \ *testing.T) {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]string{}, \"john\"), expected: []string{} },\n     {\
    \ actual: candidate([]string{\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n  \
    \   { actual: candidate([]string{\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"} },\n     { actual: candidate([]string{\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"}, \"run\"), expected: []string{\"grunt\", \"prune\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Substring (0.00s)\n    --- FAIL: TestFilter_By_Substring/test_num__1\
    \ (0.00s)\n        tmpwxoerqm3_test.go:33: expected '[xxx xxxAAA xxx]', got '[xxx\
    \ asd xxy john doe xxxAAA xxx]'\n    --- FAIL: TestFilter_By_Substring/test_num__2\
    \ (0.00s)\n        tmpwxoerqm3_test.go:33: expected '[xxx aaaxxy xxxAAA xxx]',\
    \ got '[xxx asd aaaxxy john doe xxxAAA xxx]'\n    --- FAIL: TestFilter_By_Substring/test_num__3\
    \ (0.00s)\n        tmpwxoerqm3_test.go:33: expected '[grunt prune]', got '[grunt\
    \ trumpet prune gruesome]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074478
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    result := []string{}\n    for _,\
    \ string := range strings {\n        if strings.Contains(string, substring) {\n\
    \            result = append(result, string)\n        }\n    }\n    return result\n\
    }\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate := filter_by_substring\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"grunt\"\
    , \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphfci5xuy_test.go:16:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074353
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    filteredStrings := make([]string,\
    \ 0)\n    for _, s := range strings {\n        if strings.Contains(s, substring)\
    \ {\n            filteredStrings = append(filteredStrings, s)\n        }\n   \
    \ }\n    return filteredStrings\n}\n\nfunc TestFilter_By_Substring(t *testing.T)\
    \ {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk5wxf4qq_test.go:16:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074353
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    for _, s := range strings {\n  \
    \      if substring != \"\" && strings.Contains(s, substring) {\n            continue\n\
    \        }\n        fmt.Println(\"string\", s, \"substring\", substring)\n   \
    \ }\n    return strings\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n \
    \ candidate := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptjsp4_5z_test.go:15:39: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074478
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    filtered := []string{}\n    for\
    \ _, v := range strings {\n        if strings.Contains(v, substring) {\n     \
    \       filtered = append(filtered, v)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate := filter_by_substring\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"grunt\"\
    , \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp76_4604d_test.go:16:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074478
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    result := []string{}\n    for _,\
    \ s := range strings {\n        if strings.Contains(s, substring) {\n        \
    \    result = append(result, s)\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestFilter_By_Substring(t *testing.T) {\n  candidate := filter_by_substring\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"grunt\"\
    , \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_lkisl88_test.go:16:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074192
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    result := []string{}\n    for _,\
    \ string := range strings {\n        if strings.Contains(string, substring) {\n\
    \            result = append(result, string)\n        }\n    }\n    return result\n\
    }\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate := filter_by_substring\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"grunt\"\
    , \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphfci5xuy_test.go:16:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074353
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    filtered := []string{}\n\n    for\
    \ _, s := range strings {\n        if strings.Contains(s, substring) {\n     \
    \       filtered = append(filtered, s)\n        }\n    }\n\n    return filtered\n\
    }\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate := filter_by_substring\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"grunt\"\
    , \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyot_c42q_test.go:17:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074478
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    var result []string\n    for _,\
    \ s := range strings {\n        if strings.Contains(s, substring) {\n        \
    \    result = append(result, s)\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestFilter_By_Substring(t *testing.T) {\n  candidate := filter_by_substring\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"grunt\"\
    , \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpe378xzgg_test.go:16:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074192
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    out := []string{}\n    for _, s\
    \ := range strings {\n        if strings.Contains(s, substring) {\n          \
    \  out = append(out, s)\n        }\n    }\n    return out\n}\n\nfunc TestFilter_By_Substring(t\
    \ *testing.T) {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]string{}, \"john\"), expected: []string{} },\n     {\
    \ actual: candidate([]string{\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n  \
    \   { actual: candidate([]string{\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"} },\n     { actual: candidate([]string{\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"}, \"run\"), expected: []string{\"grunt\", \"prune\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprb9xs5jb_test.go:16:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074478
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    result := make([]string, 0)\n  \
    \  for _, string := range strings {\n        if substring == \"\" {\n        \
    \    result = append(result, string)\n            continue\n        }\n      \
    \  if strings.Contains(string, substring) {\n            result = append(result,\
    \ string)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Substring(t\
    \ *testing.T) {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]string{}, \"john\"), expected: []string{} },\n     {\
    \ actual: candidate([]string{\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n  \
    \   { actual: candidate([]string{\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"} },\n     { actual: candidate([]string{\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"}, \"run\"), expected: []string{\"grunt\", \"prune\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphik5yg57_test.go:20:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074478
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    ret := make([]string, 0, len(strings))\n\
    \    for _, str := range strings {\n        if strings.Contains(str, substring)\
    \ {\n            ret = append(ret, str)\n        }\n    }\n    return ret\n}\n\
    \nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate := filter_by_substring\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"grunt\"\
    , \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3xi3ice1_test.go:16:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074478
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    result := []string{}\n    for _,\
    \ string := range strings {\n        if strings.Contains(string, substring) {\n\
    \            result = append(result, string)\n        }\n    }\n    return result\n\
    }\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate := filter_by_substring\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"grunt\"\
    , \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphfci5xuy_test.go:16:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074353
- exit_code: 1
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    filtered := make([]string, 0)\n\
    \    for _, string := range strings {\n        if substring == string {\n    \
    \        filtered = append(filtered, string)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate := filter_by_substring\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"grunt\"\
    , \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Substring (0.00s)\n    --- FAIL: TestFilter_By_Substring/test_num__1\
    \ (0.00s)\n        tmp70wdi40h_test.go:39: expected '[xxx xxxAAA xxx]', got '[xxx\
    \ xxx]'\n    --- FAIL: TestFilter_By_Substring/test_num__2 (0.00s)\n        tmp70wdi40h_test.go:39:\
    \ expected '[xxx aaaxxy xxxAAA xxx]', got '[]'\n    --- FAIL: TestFilter_By_Substring/test_num__3\
    \ (0.00s)\n        tmp70wdi40h_test.go:39: expected '[grunt prune]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074474
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    filteredStrings := []string{}\n\
    \    for _, string := range strings {\n        if strings.Contains(string, substring)\
    \ {\n            filteredStrings = append(filteredStrings, string)\n        }\n\
    \    }\n    return filteredStrings\n}\n\nfunc TestFilter_By_Substring(t *testing.T)\
    \ {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu5s8mir5_test.go:16:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074353
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    result := []string{}\n    for _,\
    \ str := range strings {\n        if strings.Contains(str, substring) {\n    \
    \        result = append(result, str)\n        }\n    }\n    return result\n}\n\
    \nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate := filter_by_substring\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"grunt\"\
    , \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsinu3stv_test.go:16:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074252
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    ret := make([]string, 0, len(strings))\n\
    \    for _, s := range strings {\n        if strings.Contains(s, substring) {\n\
    \            ret = append(ret, s)\n        }\n    }\n    return ret\n}\n\nfunc\
    \ TestFilter_By_Substring(t *testing.T) {\n  candidate := filter_by_substring\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"grunt\"\
    , \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz1z0_abx_test.go:16:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074478
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    for _, s := range strings {\n  \
    \      if strings.Contains(s, substring) {\n            return append(strings,\
    \ s)\n        }\n    }\n    return strings\n}\n\nfunc TestFilter_By_Substring(t\
    \ *testing.T) {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]string{}, \"john\"), expected: []string{} },\n     {\
    \ actual: candidate([]string{\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n  \
    \   { actual: candidate([]string{\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"} },\n     { actual: candidate([]string{\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"}, \"run\"), expected: []string{\"grunt\", \"prune\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc4z8ca4n_test.go:15:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074478
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    result := []string{}\n    switch\
    \ {\n    case len(strings) == 0:\n        return result\n    case len(substring)\
    \ == 0:\n        return strings\n    case strings.Contains(substring, strings[0]):\n\
    \        result = append(result, strings[0])\n    case strings.Contains(substring,\
    \ strings[1]):\n        result = append(result, strings[1])\n    case strings.Contains(substring,\
    \ strings[2]):\n        result = append(result, strings[2])\n    default:\n  \
    \      return strings\n    }\n\n    return result\n}\n\nfunc TestFilter_By_Substring(t\
    \ *testing.T) {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]string{}, \"john\"), expected: []string{} },\n     {\
    \ actual: candidate([]string{\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n  \
    \   { actual: candidate([]string{\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"} },\n     { actual: candidate([]string{\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"}, \"run\"), expected: []string{\"grunt\", \"prune\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfwfgndm2_test.go:20:18: strings.Contains undefined (type []string has
    no field or method Contains)

    /tmp/tmpfwfgndm2_test.go:22:18: strings.Contains undefined (type []string has
    no field or method Contains)

    /tmp/tmpfwfgndm2_test.go:24:18: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074479
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    filteredStrings := []string{}\n\
    \    for _, s := range strings {\n        if strings.Contains(s, substring) {\n\
    \            filteredStrings = append(filteredStrings, s)\n        }\n    }\n\
    \    return filteredStrings\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n\
    \  candidate := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp9qe5c2i_test.go:16:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074353
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    // TODO: Implement me!\n    return\
    \ strings.Slice()\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnns2g6g8_test.go:15:20: strings.Slice undefined (type []string has no
    field or method Slice)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074479
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    var result []string\n    for _,\
    \ s := range strings {\n        if strings.Contains(s, substring) {\n        \
    \    result = append(result, s)\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestFilter_By_Substring(t *testing.T) {\n  candidate := filter_by_substring\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"grunt\"\
    , \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpe378xzgg_test.go:16:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074192
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    filtered := make([]string, 0, len(strings))\n\
    \    for _, s := range strings {\n        if strings.Contains(s, substring) {\n\
    \            filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate := filter_by_substring\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"grunt\"\
    , \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuf8j98se_test.go:16:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074479
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    var filtered_strings []string\n\
    \    for _, s := range strings {\n        if strings.Contains(s, substring) {\n\
    \            filtered_strings = append(filtered_strings, s)\n        }\n    }\n\
    \    return filtered_strings\n}\n\nfunc TestFilter_By_Substring(t *testing.T)\
    \ {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7fuh0_cm_test.go:16:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074192
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    var res []string\n\n    for _, s\
    \ := range strings {\n        if strings.Contains(s, substring) {\n          \
    \  res = append(res, s)\n        }\n    }\n\n    return res\n}\n\nfunc TestFilter_By_Substring(t\
    \ *testing.T) {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]string{}, \"john\"), expected: []string{} },\n     {\
    \ actual: candidate([]string{\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n  \
    \   { actual: candidate([]string{\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"} },\n     { actual: candidate([]string{\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"}, \"run\"), expected: []string{\"grunt\", \"prune\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnif_gw12_test.go:17:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074479
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    result := []string{}\n\n    for\
    \ _, s := range strings {\n        if strings.Contains(s, substring) {\n     \
    \       result = append(result, s)\n        }\n    }\n\n    return result\n}\n\
    \nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate := filter_by_substring\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"grunt\"\
    , \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1k4s02jt_test.go:17:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074479
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    out := []string{}\n\n    for _,\
    \ s := range strings {\n        if strings.Contains(s, substring) {\n        \
    \    out = append(out, s)\n        }\n    }\n\n    return out\n}\n\nfunc TestFilter_By_Substring(t\
    \ *testing.T) {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]string{}, \"john\"), expected: []string{} },\n     {\
    \ actual: candidate([]string{\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n  \
    \   { actual: candidate([]string{\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"} },\n     { actual: candidate([]string{\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"}, \"run\"), expected: []string{\"grunt\", \"prune\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu1kiypk6_test.go:17:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074480
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    filtered := make([]string, 0, len(strings))\n\
    \    for _, s := range strings {\n        if strings.Contains(s, substring) {\n\
    \            filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate := filter_by_substring\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"grunt\"\
    , \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuf8j98se_test.go:16:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074479
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    var filtered []string\n    for _,\
    \ string := range strings {\n        if strings.Contains(string, substring) {\n\
    \            filtered = append(filtered, string)\n        }\n    }\n    return\
    \ filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate :=\
    \ filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5cwd9dxd_test.go:16:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074480
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    var filtered_strings []string\n\n\
    \    for _, string := range strings {\n        if strings.Contains(string, substring)\
    \ {\n            filtered_strings = append(filtered_strings, string)\n       \
    \ }\n    }\n\n    return filtered_strings\n}\n\nfunc TestFilter_By_Substring(t\
    \ *testing.T) {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]string{}, \"john\"), expected: []string{} },\n     {\
    \ actual: candidate([]string{\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n  \
    \   { actual: candidate([]string{\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"} },\n     { actual: candidate([]string{\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"}, \"run\"), expected: []string{\"grunt\", \"prune\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpod_m6jop_test.go:17:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074480
- exit_code: 1
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    var output []string\n\n    for _,\
    \ string := range strings {\n        if substring == string {\n            output\
    \ = append(output, string)\n        }\n    }\n    return output\n}\n\nfunc TestFilter_By_Substring(t\
    \ *testing.T) {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]string{}, \"john\"), expected: []string{} },\n     {\
    \ actual: candidate([]string{\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n  \
    \   { actual: candidate([]string{\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"} },\n     { actual: candidate([]string{\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"}, \"run\"), expected: []string{\"grunt\", \"prune\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Substring (0.00s)\n    --- FAIL: TestFilter_By_Substring/test_num__1\
    \ (0.00s)\n        tmpvr606v_p_test.go:40: expected '[xxx xxxAAA xxx]', got '[xxx\
    \ xxx]'\n    --- FAIL: TestFilter_By_Substring/test_num__2 (0.00s)\n        tmpvr606v_p_test.go:40:\
    \ expected '[xxx aaaxxy xxxAAA xxx]', got '[]'\n    --- FAIL: TestFilter_By_Substring/test_num__3\
    \ (0.00s)\n        tmpvr606v_p_test.go:40: expected '[grunt prune]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074480
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    result := []string{}\n    for _,\
    \ string := range strings {\n        if strings.Contains(string, substring) {\n\
    \            result = append(result, string)\n        }\n    }\n    return result\n\
    }\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate := filter_by_substring\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"grunt\"\
    , \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphfci5xuy_test.go:16:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074353
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    filteredStrings := make([]string,\
    \ 0)\n    for _, s := range strings {\n        if substring == \"\" || strings.Contains(s,\
    \ substring) {\n            filteredStrings = append(filteredStrings, s)\n   \
    \     }\n    }\n    return filteredStrings\n}\n\nfunc TestFilter_By_Substring(t\
    \ *testing.T) {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]string{}, \"john\"), expected: []string{} },\n     {\
    \ actual: candidate([]string{\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n  \
    \   { actual: candidate([]string{\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"} },\n     { actual: candidate([]string{\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"}, \"run\"), expected: []string{\"grunt\", \"prune\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfnvpvfbq_test.go:16:39: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074480
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    var result []string\n    for _,\
    \ s := range strings {\n        if strings.Contains(s, substring) {\n        \
    \    result = append(result, s)\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestFilter_By_Substring(t *testing.T) {\n  candidate := filter_by_substring\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"grunt\"\
    , \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpe378xzgg_test.go:16:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074192
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    var result []string\n    for _,\
    \ s := range strings {\n        if substring != \"\" && strings.Contains(s, substring)\
    \ {\n            result = append(result, s)\n        }\n    }\n    return result\n\
    }\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate := filter_by_substring\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"grunt\"\
    , \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9ga7biyq_test.go:16:39: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074480
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    var result []string\n    for _,\
    \ s := range strings {\n        if strings.Contains(s, substring) {\n        \
    \    result = append(result, s)\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestFilter_By_Substring(t *testing.T) {\n  candidate := filter_by_substring\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"grunt\"\
    , \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpe378xzgg_test.go:16:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074192
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    out := make([]string, 0, len(strings))\n\
    \    for _, s := range strings {\n        if substring == \"\" {\n           \
    \ out = append(out, s)\n            continue\n        }\n        if strings.Contains(s,\
    \ substring) {\n            out = append(out, s)\n        }\n    }\n    return\
    \ out\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate := filter_by_substring\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"grunt\"\
    , \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7gh2d163_test.go:20:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074480
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    return strings.filter(func(s string)\
    \ bool {\n        return strings.Contains(s, substring)\n    })\n}\n\nfunc TestFilter_By_Substring(t\
    \ *testing.T) {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]string{}, \"john\"), expected: []string{} },\n     {\
    \ actual: candidate([]string{\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n  \
    \   { actual: candidate([]string{\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"} },\n     { actual: candidate([]string{\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"}, \"run\"), expected: []string{\"grunt\", \"prune\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpssew2gx2_test.go:14:20: strings.filter undefined (type []string has no
    field or method filter)

    /tmp/tmpssew2gx2_test.go:15:24: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074472
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    if len(substring) == 0 {\n     \
    \   return strings\n    }\n\n    i := 0\n    j := 0\n    output := []string{}\n\
    \    for i < len(strings) {\n        for j < len(substring) {\n            if\
    \ strings[i] != substring[j] {\n                break\n            }\n       \
    \     j++\n        }\n        if j == len(substring) {\n            output = append(output,\
    \ strings[i])\n            i++\n            j = 0\n        }\n    }\n    return\
    \ output\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate := filter_by_substring\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"grunt\"\
    , \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk2q6bd8__test.go:23:30: invalid operation: strings[i] != substring[j]
    (mismatched types string and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074480
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    var output []string\n    for _,\
    \ s := range strings {\n        if strings.Contains(s, substring) {\n        \
    \    output = append(output, s)\n        }\n    }\n    return output\n}\n\nfunc\
    \ TestFilter_By_Substring(t *testing.T) {\n  candidate := filter_by_substring\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"grunt\"\
    , \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2h1q60gz_test.go:16:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074318
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    var filtered []string\n    for _,\
    \ s := range strings {\n        if strings.Contains(s, substring) {\n        \
    \    filtered = append(filtered, s)\n        }\n    }\n    return filtered\n}\n\
    \nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate := filter_by_substring\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"grunt\"\
    , \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9vjpbrb4_test.go:16:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074192
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    var output []string\n    for _,\
    \ str := range strings {\n        if strings.Contains(str, substring) {\n    \
    \        output = append(output, str)\n        }\n    }\n    return output\n}\n\
    \nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate := filter_by_substring\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"grunt\"\
    , \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7vv9orj7_test.go:16:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074480
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    for _, str := range strings {\n\
    \        if strings.Contains(str, substring) {\n            strings = append(strings,\
    \ str)\n        }\n    }\n    return strings\n}\n\nfunc TestFilter_By_Substring(t\
    \ *testing.T) {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]string{}, \"john\"), expected: []string{} },\n     {\
    \ actual: candidate([]string{\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n  \
    \   { actual: candidate([]string{\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"} },\n     { actual: candidate([]string{\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"}, \"run\"), expected: []string{\"grunt\", \"prune\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl9_pamin_test.go:15:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074480
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    var filtered []string\n    for _,\
    \ s := range strings {\n        if strings.Contains(s, substring) {\n        \
    \    filtered = append(filtered, s)\n        }\n    }\n    return filtered\n}\n\
    \nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate := filter_by_substring\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"grunt\"\
    , \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9vjpbrb4_test.go:16:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074192
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    result := make([]string, 0)\n  \
    \  for _, s := range strings {\n        if strings.Contains(s, substring) {\n\
    \            result = append(result, s)\n        }\n    }\n    return result\n\
    }\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate := filter_by_substring\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"grunt\"\
    , \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8v_8ft5o_test.go:16:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074474
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    result := make([]string, 0)\n  \
    \  for _, s := range strings {\n        if strings.Contains(s, substring) {\n\
    \            result = append(result, s)\n        }\n    }\n    return result\n\
    }\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate := filter_by_substring\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"grunt\"\
    , \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8v_8ft5o_test.go:16:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074474
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    result := []string{}\n    for _,\
    \ s := range strings {\n        if strings.Contains(s, substring) {\n        \
    \    result = append(result, s)\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestFilter_By_Substring(t *testing.T) {\n  candidate := filter_by_substring\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"grunt\"\
    , \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_lkisl88_test.go:16:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074192
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    filtered := make([]string, 0, len(strings))\n\
    \    for _, string := range strings {\n        if strings.Contains(string, substring)\
    \ {\n            filtered = append(filtered, string)\n        }\n    }\n    return\
    \ filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate :=\
    \ filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb4tuoot5_test.go:16:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074480
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    result := []string{}\n    for _,\
    \ str := range strings {\n        if strings.Contains(str, substring) {\n    \
    \        result = append(result, str)\n        }\n    }\n    return result\n}\n\
    \nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate := filter_by_substring\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"grunt\"\
    , \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsinu3stv_test.go:16:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074252
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    filteredStrings := []string{}\n\n\
    \    for _, string := range strings {\n        if strings.Contains(string, substring)\
    \ {\n            filteredStrings = append(filteredStrings, string)\n        }\n\
    \    }\n\n    return filteredStrings\n}\n\nfunc TestFilter_By_Substring(t *testing.T)\
    \ {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp83ga8r_3_test.go:17:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074478
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    return filter_by_substring_inplace(\"\
    \", strings, substring)\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n \
    \ candidate := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2e9ws700_test.go:14:12: undefined: filter_by_substring_inplace

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074480
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    var result []string\n    for _,\
    \ s := range strings {\n        if strings.Contains(s, substring) {\n        \
    \    result = append(result, s)\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestFilter_By_Substring(t *testing.T) {\n  candidate := filter_by_substring\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"grunt\"\
    , \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpe378xzgg_test.go:16:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074192
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    stringList := make([]string, 0,\
    \ len(strings))\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            stringList = append(stringList, s)\n        }\n  \
    \  }\n    return stringList\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n\
    \  candidate := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpt3dmg6c6_test.go:16:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074480
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    return strings.Filter(func(s string)\
    \ bool {\n        return strings.Contains(s, substring)\n    })\n}\n\nfunc TestFilter_By_Substring(t\
    \ *testing.T) {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]string{}, \"john\"), expected: []string{} },\n     {\
    \ actual: candidate([]string{\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n  \
    \   { actual: candidate([]string{\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"} },\n     { actual: candidate([]string{\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"}, \"run\"), expected: []string{\"grunt\", \"prune\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx3pk931q_test.go:14:20: strings.Filter undefined (type []string has no
    field or method Filter)

    /tmp/tmpx3pk931q_test.go:15:24: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074472
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    i := 0\n    len := len(strings)\n\
    \    filtered_strings := make([]string, len)\n    for ; i+1 < len; i++ {\n   \
    \     if strings.HasPrefix(strings[i], substring) {\n            filtered_strings\
    \ = append(filtered_strings, strings[i])\n        }\n    }\n    if i < len {\n\
    \        filtered_strings = append(filtered_strings, strings[i+1])\n    }\n  \
    \  return filtered_strings\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n\
    \  candidate := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmps5v4wqyf_test.go:18:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074480
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    ret := []string{}\n    for _, v\
    \ := range strings {\n        if strings.Contains(v, substring) {\n          \
    \  ret = append(ret, v)\n        }\n    }\n    return ret\n}\n\nfunc TestFilter_By_Substring(t\
    \ *testing.T) {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]string{}, \"john\"), expected: []string{} },\n     {\
    \ actual: candidate([]string{\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n  \
    \   { actual: candidate([]string{\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"} },\n     { actual: candidate([]string{\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"}, \"run\"), expected: []string{\"grunt\", \"prune\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyxlnu3zg_test.go:16:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074322
- exit_code: 1
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    i := 0\n    for j := 0; j < len(strings);\
    \ j++ {\n        if strings[j] == substring {\n            i++\n            continue\n\
    \        }\n        i = i\n        break\n    }\n    if i == len(strings) {\n\
    \        return nil\n    }\n    result := make([]string, 0, len(strings)-i)\n\
    \    for k := 0; k < i; k++ {\n        result = append(result, strings[k])\n \
    \   }\n    return result\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n\
    \  candidate := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Substring (0.00s)\n    --- FAIL: TestFilter_By_Substring/test_num__1\
    \ (0.00s)\n        tmp7woxrxu7_test.go:49: expected '[xxx xxxAAA xxx]', got '[xxx]'\n\
    \    --- FAIL: TestFilter_By_Substring/test_num__2 (0.00s)\n        tmp7woxrxu7_test.go:49:\
    \ expected '[xxx aaaxxy xxxAAA xxx]', got '[]'\n    --- FAIL: TestFilter_By_Substring/test_num__3\
    \ (0.00s)\n        tmp7woxrxu7_test.go:49: expected '[grunt prune]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074481
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    // We don't want to filter when\
    \ there are no strings, an empty array []string{} will be returned\n    if len(strings)\
    \ == 0 {\n        return strings\n    }\n    filtered := make([]string, len(strings))\n\
    \    for i, s := range strings {\n        if strings.Contains(s, substring) {\n\
    \            filtered[i] = s\n        }\n    }\n    return filtered\n}\n\nfunc\
    \ TestFilter_By_Substring(t *testing.T) {\n  candidate := filter_by_substring\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"grunt\"\
    , \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdb5b861d_test.go:20:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074480
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    return strings.FilterBySubstring(substring)\n\
    }\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate := filter_by_substring\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"grunt\"\
    , \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4h8phr_u_test.go:14:20: strings.FilterBySubstring undefined (type []string
    has no field or method FilterBySubstring)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074480
- exit_code: 1
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    if len(strings) == 0 {\n       \
    \ return strings\n    }\n    if len(strings) == 1 && strings[0] == substring {\n\
    \        return nil\n    }\n    var filteredStrings []string\n    for _, string\
    \ := range strings {\n        if string == substring {\n            filteredStrings\
    \ = append(filteredStrings, string)\n        }\n    }\n    return filteredStrings\n\
    }\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate := filter_by_substring\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"grunt\"\
    , \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Substring (0.00s)\n    --- FAIL: TestFilter_By_Substring/test_num__1\
    \ (0.00s)\n        tmpf07hvz8z_test.go:45: expected '[xxx xxxAAA xxx]', got '[xxx\
    \ xxx]'\n    --- FAIL: TestFilter_By_Substring/test_num__2 (0.00s)\n        tmpf07hvz8z_test.go:45:\
    \ expected '[xxx aaaxxy xxxAAA xxx]', got '[]'\n    --- FAIL: TestFilter_By_Substring/test_num__3\
    \ (0.00s)\n        tmpf07hvz8z_test.go:45: expected '[grunt prune]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074481
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    for _, s := range strings {\n  \
    \      if strings.Contains(s, substring) {\n            return append(strings[:],\
    \ strings...)\n        }\n    }\n    return strings\n}\n\nfunc TestFilter_By_Substring(t\
    \ *testing.T) {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]string{}, \"john\"), expected: []string{} },\n     {\
    \ actual: candidate([]string{\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n  \
    \   { actual: candidate([]string{\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"} },\n     { actual: candidate([]string{\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"}, \"run\"), expected: []string{\"grunt\", \"prune\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg67b2w19_test.go:15:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074481
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    var filtered []string\n\n    for\
    \ _, string := range strings {\n        if substring == \"\" || strings.Contains(string,\
    \ substring) {\n            filtered = append(filtered, string)\n        }\n \
    \   }\n\n    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T)\
    \ {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjpuynlae_test.go:17:39: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074481
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    var filtered = []string{}\n    for\
    \ _, s := range strings {\n        if strings.Contains(s, substring) {\n     \
    \       filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate := filter_by_substring\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"grunt\"\
    , \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4ov9zxg1_test.go:16:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074481
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    for _, s := range strings {\n  \
    \      if strings.Contains(s, substring) {\n            return append(strings,\
    \ s)\n        }\n    }\n    return []string{}\n}\n\nfunc TestFilter_By_Substring(t\
    \ *testing.T) {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]string{}, \"john\"), expected: []string{} },\n     {\
    \ actual: candidate([]string{\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n  \
    \   { actual: candidate([]string{\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"} },\n     { actual: candidate([]string{\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"}, \"run\"), expected: []string{\"grunt\", \"prune\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpe3rk3nzk_test.go:15:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074481
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    var filtered_strings []string\n\
    \    for _, string := range strings {\n        if strings.Contains(string, substring)\
    \ {\n            filtered_strings = append(filtered_strings, string)\n       \
    \ }\n    }\n    return filtered_strings\n}\n\nfunc TestFilter_By_Substring(t *testing.T)\
    \ {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoqm5g8r__test.go:16:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074353
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    result := make([]string, 0)\n  \
    \  for _, string := range strings {\n        if strings.Contains(string, substring)\
    \ {\n            result = append(result, string)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate := filter_by_substring\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"grunt\"\
    , \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp728lhz5n_test.go:16:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074476
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    if len(strings) == 0 {\n       \
    \ return nil\n    }\n    filteredStrings := make([]string, 0, len(strings))\n\
    \    for _, string := range strings {\n        if strings.Contains(string, substring)\
    \ {\n            filteredStrings = append(filteredStrings, string)\n        }\n\
    \    }\n    return filteredStrings\n}\n\nfunc TestFilter_By_Substring(t *testing.T)\
    \ {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpalvo1t4v_test.go:19:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074481
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n//\
    \ >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"\
    a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings\
    \ []string, substring string) []string {\n    filtered := []string{}\n    for\
    \ _, str := range strings {\n        if strings.Contains(str, substring) {\n \
    \           filtered = append(filtered, str)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate := filter_by_substring\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"grunt\"\
    , \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptwcyepg5_test.go:16:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074316
