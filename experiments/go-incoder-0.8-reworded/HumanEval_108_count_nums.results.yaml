language: go_test.go
name: HumanEval_108_count_nums
results:
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n\n    sumDigits\
    \ := 0\n    arrFirstNum := arr[0]\n    for _, num := range arr[1:] {\n       \
    \ if num == -arrFirstNum {\n            sumDigits -= 1\n        } else {\n   \
    \         sumDigits += int(num/arrFirstNum)\n            arrFirstNum = num\n \
    \       }\n    }\n    return sumDigits\n}\n\nfunc TestCount_Nums(t *testing.T)\
    \ {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     {\
    \ actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual:\
    \ candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12,\
    \ 23, 34, -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\npanic: runtime error: integer divide\
    \ by zero [recovered]\n\tpanic: runtime error: integer divide by zero\n\ngoroutine\
    \ 34 [running]:\ntesting.tRunner.func1.2({0x5038a0, 0x5f29a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5038a0, 0x5f29a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.count_nums(...)\n\t/tmp/tmpy00ut6yj_test.go:29\n\
    command-line-arguments_test.TestCount_Nums(0x0?)\n\t/tmp/tmpy00ut6yj_test.go:46\
    \ +0x7fc\ntesting.tRunner(0xc000199040, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074623
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    return count_nums_test.CountNums(arr)\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpag7uyurx_test.go:19:12: undefined: count_nums_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074622
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    // code here\n    for i := 0; i < len(arr); i++ {\n      \
    \  if arr[i] == -1 {\n            arr[i] = arr[i]%10\n        }\n    }\n    var\
    \ nums int = 0\n    for _, i := range arr {\n        for _, b := range i {\n \
    \           if b > 0 {\n                nums++\n            }\n        }\n   \
    \ }\n    return nums\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate :=\
    \ count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyy4qh5ys_test.go:27:27: cannot range over i (variable of type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074622
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    sum := 0\n\
    \    for _, num := range arr {\n        sum += num\n        if sum > 9 {\n   \
    \         sum -= 10\n        }\n    }\n    return len(arr)-len(map[int]int{}[sum])\n\
    }\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual:\
    \ candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkkxcu95b_test.go:29:25: invalid argument: map[int]int{}[sum] (map index
    expression of type int) for len

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074622
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    fmt.Println(arr)\n    ans := 0\n    for _, v := range arr\
    \ {\n        ans += count_nums_internal(v, 0)\n    }\n    return ans\n}\n\nfunc\
    \ TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -2, 0}), expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}),\
    \ expected: 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected:\
    \ 5 },\n     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n\
    \     { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n  \
    \   { actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuwkx7lay_test.go:22:16: undefined: count_nums_internal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074622
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    x := 0\n    for _, e := range arr {\n        x += e\n    \
    \    if x >= 10 {\n            x -= 10\n            x += e\n        }\n    }\n\
    \    return x\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpcqhm934g_test.go:50: expected '%!s(int=0)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpcqhm934g_test.go:50:\
    \ expected '%!s(int=6)', got '%!s(int=9)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpcqhm934g_test.go:50: expected '%!s(int=5)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpcqhm934g_test.go:50:\
    \ expected '%!s(int=4)', got '%!s(int=333)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpcqhm934g_test.go:50: expected '%!s(int=5)', got '%!s(int=-48)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074623
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if arr[0]\
    \ < 0 {\n        return count_nums(arr[1:])\n    }\n    var ret int = 0\n    for\
    \ _, d := range arr {\n        ret += int(d >= 0)\n        if ret > 0 {\n    \
    \        break\n        }\n    }\n    return ret\n}\n\nfunc TestCount_Nums(t *testing.T)\
    \ {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     {\
    \ actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual:\
    \ candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12,\
    \ 23, 34, -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq3rzd1y2_test.go:27:20: cannot convert d >= 0 (untyped bool value) to
    type int

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074622
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    // Your code here\n    length := len(arr)\n    var res int\
    \ = 0\n    \n    for _, num := range arr {\n        if num < 0 {\n           \
    \ num := num * -1\n        }\n        \n        var digit int\n        for digit\
    \ = 0; num > 0; num%10 == 0 {\n            digit++\n            num /= 10\n  \
    \      }\n        \n        res += digit\n    }\n    \n    return res\n}\n\nfunc\
    \ TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -2, 0}), expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}),\
    \ expected: 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected:\
    \ 5 },\n     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n\
    \     { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n  \
    \   { actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0_jbpmnq_test.go:20:5: length declared but not used

    /tmp/tmp0_jbpmnq_test.go:25:13: num declared but not used

    /tmp/tmp0_jbpmnq_test.go:29:33: num % 10 == 0 (untyped bool value) is not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074622
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, x := range arr {\n        if x > 0\
    \ {\n            count++\n        } else {\n            count += int(math.Abs(x%10)*math.Pow(float64(10),\
    \ len(arr) - 1 - count))\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkpnjkinw_test.go:24:26: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074622
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, x := range arr {\n        if x < 0\
    \ {\n            count += count_nums([]int{x, -x})\n        } else {\n       \
    \     count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0350\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x5203b6?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\nruntime.(*mcache).nextFree(0x2b764246e108?,\
    \ 0x5?)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/malloc.go:876 +0x205\
    \ fp=0xc0201e0360 sp=0xc0201e0358 pc=0x40c5e5\nruntime.mallocgc(0x10, 0x4feae0,\
    \ 0x1)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/malloc.go:1085 +0x4e5\
    \ fp=0xc0201e03d8 sp=0xc0201e0360 pc=0x40cae5\nruntime.newobject(0x1000000000000?)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/runtime/malloc.go:1259 +0x27 fp=0xc0201e0400\
    \ sp=0xc0201e03d8 pc=0x40d027\ncommand-line-arguments_test.count_nums({0xc008489ff0,\
    \ 0x2, 0x40d027?})\n\t/tmp/tmpinexexwo_test.go:22 +0x59 fp=0xc0201e0440 sp=0xc0201e0400\
    \ pc=0x4ef6b9\ncommand-line-arguments_test.count_nums({0xc008489fe0, 0x2, 0x40d027?})\n\
    \t/tmp/tmpinexexwo_test.go:22 +0x75 fp=0xc0201e0480 sp=0xc0201e0440 pc=0x4ef6d5\n\
    command-line-arguments_test.count_nums({0xc008489fd0, 0x2, 0x40d027?})\n\t/tmp/tmpinexexwo_test.go:22\
    \ +0x75 fp=0xc0201e04c0 sp=0xc0201e0480 pc=0x4ef6d5\ncommand-line-arguments_test.count_nums({0xc008489fc0,\
    \ 0x2, 0x40d027?})\n\t/tmp/tmpinexexwo_test.go:22 +0x75 fp=0xc0201e0500 sp=0xc0201e04c0\
    \ pc=0x4ef6d5\ncommand-line-arguments_test.count_nums({0xc008489fb0, 0x2, 0x40d027?})\n\
    \t/tmp/tmpinexexwo_test.go:22 +0x75 fp=0xc0201e0540 sp=0xc0201e0500 pc=0x4ef6d5\n\
    command-line-arguments_test.count_nums({0xc008489fa0, 0x2, 0x40d027?})\n\t/tmp/tmpinexexwo_test.go:22\
    \ +0x75 fp=0xc0201e0580 sp=0xc0201e0540 pc=0x4ef6d5\ncommand-line-arguments_test.count_nums({0xc008489f90,\
    \ 0x2, 0x40d027?})\n\t/tmp/tmpinexexwo_test.go:22 +0x75 fp=0xc0201e05c0 sp=0xc0201e0580\
    \ pc=0x4ef6d5\ncommand-line-arguments_test.count_nums({0xc008489f80, 0x"
  timestamp: 1660074624
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    ans := 0\n    for _, v := range arr {\n        ans += count_nums([]int{v})\n\
    \        if v < 0 {\n            ans += count_nums([]int{-v, 1})\n        }\n\
    \    }\n    return ans\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate\
    \ := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual:\
    \ candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100,\
    \ 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34,\
    \ -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0390\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x5203b6?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\nruntime.newobject(0x4fe600?)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/malloc.go:1258\
    \ +0x3b fp=0xc0201e03a0 sp=0xc0201e0398 pc=0x40d03b\ncommand-line-arguments_test.count_nums({0xc003cf9a08,\
    \ 0x1, 0xc0201e0420?})\n\t/tmp/tmpx8i1qcmo_test.go:21 +0x68 fp=0xc0201e03e8 sp=0xc0201e03a0\
    \ pc=0x4ef6c8\ncommand-line-arguments_test.count_nums({0xc003cf9a00, 0x1, 0xc0201e0468?})\n\
    \t/tmp/tmpx8i1qcmo_test.go:21 +0x7d fp=0xc0201e0430 sp=0xc0201e03e8 pc=0x4ef6dd\n\
    command-line-arguments_test.count_nums({0xc003cf99f8, 0x1, 0xc0201e04b0?})\n\t\
    /tmp/tmpx8i1qcmo_test.go:21 +0x7d fp=0xc0201e0478 sp=0xc0201e0430 pc=0x4ef6dd\n\
    command-line-arguments_test.count_nums({0xc003cf99f0, 0x1, 0xc0201e04f8?})\n\t\
    /tmp/tmpx8i1qcmo_test.go:21 +0x7d fp=0xc0201e04c0 sp=0xc0201e0478 pc=0x4ef6dd\n\
    command-line-arguments_test.count_nums({0xc003cf99e8, 0x1, 0xc0201e0540?})\n\t\
    /tmp/tmpx8i1qcmo_test.go:21 +0x7d fp=0xc0201e0508 sp=0xc0201e04c0 pc=0x4ef6dd\n\
    command-line-arguments_test.count_nums({0xc003cf99e0, 0x1, 0xc0201e0588?})\n\t\
    /tmp/tmpx8i1qcmo_test.go:21 +0x7d fp=0xc0201e0550 sp=0xc0201e0508 pc=0x4ef6dd\n\
    command-line-arguments_test.count_nums({0xc003cf99d8, 0x1, 0xc0201e05d0?})\n\t\
    /tmp/tmpx8i1qcmo_test.go:21 +0x7d fp=0xc0201e0598 sp=0xc0201e0550 pc=0x4ef6dd\n\
    command-line-arguments_test.count_nums({0xc003cf99d0, 0x1, 0xc0201e0618?})\n\t\
    /tmp/tmpx8i1qcmo_test.go:21 +0x7d fp=0xc0201e05e0 sp=0xc0201e0598 pc=0x4ef6dd\n\
    command-line-arguments_test.count_nums({0xc003cf99c8, 0x1, 0xc0201e0660?})\n\t\
    /tmp/tmpx8i1qcmo_test.go:21 +0x7d fp=0xc0201e0628 sp=0xc0201e05e0 pc=0x4ef6dd\n\
    command-line-arguments_test.count_nums({0xc003"
  timestamp: 1660074624
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    var result int\n    for _, num := range arr {\n        result\
    \ += count_nums_recur(num)\n    }\n    return result\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpznqluunv_test.go:21:19: undefined: count_nums_recur

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074622
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    for _, n := range arr {\n        if n < 0 {\n            n\
    \ = -n\n        }\n        digits, _ := strconv.Atoi(fmt.Sprintf(\"%v\", n))\n\
    \        total := 0\n        for i := 0; i < digits; i++ {\n            total\
    \ += int(arr[i])\n        }\n        if total > 0 {\n            return digits\
    \ + 1\n        }\n    }\n    return 0\n}\n\nfunc TestCount_Nums(t *testing.T)\
    \ {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     {\
    \ actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual:\
    \ candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12,\
    \ 23, 34, -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9tavc8pd_test.go:23:22: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074622
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    current :=\
    \ arr[0]\n    sum := 0\n    signDigit := current\n    if current < 0 {\n     \
    \   current = -current\n        signDigit = 1\n    }\n\n    for _, elem := range\
    \ arr[1:] {\n        if elem < 0 {\n            elem = -elem\n            signDigit\
    \ = 1\n        }\n        sum += current + elem\n        current = elem % 10\n\
    \    }\n    return sum + signDigit\n}\nfunc TestCount_Nums(t *testing.T) {\n \
    \ candidate := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     {\
    \ actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual:\
    \ candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12,\
    \ 23, 34, -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmp8pua7x4p_test.go:60: expected '%!s(int=0)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmp8pua7x4p_test.go:60:\
    \ expected '%!s(int=6)', got '%!s(int=31)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmp8pua7x4p_test.go:60: expected '%!s(int=5)', got '%!s(int=51)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmp8pua7x4p_test.go:60:\
    \ expected '%!s(int=4)', got '%!s(int=225)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmp8pua7x4p_test.go:60: expected '%!s(int=5)', got '%!s(int=189)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074623
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    fmt.Println(arr)\n    // Your code here\n\n    sum := 0\n\
    \    sign := false\n    for _, v := range arr {\n        if v < 0 {\n        \
    \    v = -v\n            sign = true\n        }\n        if v < 10 {\n       \
    \     sum += int(v)\n        } else {\n            if sum > 0 {\n            \
    \    if sign {\n                    return sum\n                } else {\n   \
    \                 sum = 0\n                }\n            } else {\n         \
    \       sum = 10\n            }\n            sum += int(v)\n        }\n    }\n\
    \    return sum\n}\n</code>\n<|/ a tags=go |>\n<| a |>\n<code>\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp8mmfc8h9_test.go:46:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074621
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, num := range arr {\n        count +=\
    \ 1\n        // if num < 0 {\n        //     count += count_nums([]int{-num})\n\
    \        // } else {\n        count += count_nums([]int{num})\n        // }\n\
    \    }\n    return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate\
    \ := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual:\
    \ candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100,\
    \ 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34,\
    \ -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0388\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x520356?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\nruntime.mallocgc(0x8?, 0x4fe600?, 0x1?)\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/runtime/malloc.go:909 +0x91d fp=0xc0201e0398\
    \ sp=0xc0201e0390 pc=0x40cf1d\nruntime.newobject(0x1000000000000?)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/malloc.go:1259\
    \ +0x27 fp=0xc0201e03c0 sp=0xc0201e0398 pc=0x40d027\ncommand-line-arguments_test.count_nums({0xc0043ec120,\
    \ 0x1, 0x40d027?})\n\t/tmp/tmpq1m42kye_test.go:25 +0x47 fp=0xc0201e0400 sp=0xc0201e03c0\
    \ pc=0x4ef6a7\ncommand-line-arguments_test.count_nums({0xc0043ec118, 0x1, 0x40d027?})\n\
    \t/tmp/tmpq1m42kye_test.go:25 +0x5c fp=0xc0201e0440 sp=0xc0201e0400 pc=0x4ef6bc\n\
    command-line-arguments_test.count_nums({0xc0043ec110, 0x1, 0x40d027?})\n\t/tmp/tmpq1m42kye_test.go:25\
    \ +0x5c fp=0xc0201e0480 sp=0xc0201e0440 pc=0x4ef6bc\ncommand-line-arguments_test.count_nums({0xc0043ec108,\
    \ 0x1, 0x40d027?})\n\t/tmp/tmpq1m42kye_test.go:25 +0x5c fp=0xc0201e04c0 sp=0xc0201e0480\
    \ pc=0x4ef6bc\ncommand-line-arguments_test.count_nums({0xc0043ec100, 0x1, 0x40d027?})\n\
    \t/tmp/tmpq1m42kye_test.go:25 +0x5c fp=0xc0201e0500 sp=0xc0201e04c0 pc=0x4ef6bc\n\
    command-line-arguments_test.count_nums({0xc0043ec0f8, 0x1, 0x40d027?})\n\t/tmp/tmpq1m42kye_test.go:25\
    \ +0x5c fp=0xc0201e0540 sp=0xc0201e0500 pc=0x4ef6bc\ncommand-line-arguments_test.count_nums({0xc0043ec0f0,\
    \ 0x1, 0x40d027?})\n\t/tmp/tmpq1m42kye_test.go:25 +0x5c fp=0xc0201e0580 sp=0xc0201e0540\
    \ pc=0x4ef6bc\ncommand-line-arguments_test.count_nums({0xc0043ec0e8, 0x1, 0x40d027?})\n\
    \t/tmp/tmpq1m42kye_test.go:25 +0x5c fp=0xc0201e05c0 sp=0xc0201e0580 pc=0x4ef6bc\n\
    command-line-arguments_test.count_nums({0xc0043ec0e0, 0x1, 0x40d027?})"
  timestamp: 1660074624
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, number := range arr {\n        if number\
    \ < 0 {\n            sign, digit := getFirstDigit(number)\n            count +=\
    \ sign - digit\n        } else {\n            digit, sign := getDigit(number)\n\
    \            count += sign - digit\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -2, 0}), expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}),\
    \ expected: 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected:\
    \ 5 },\n     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n\
    \     { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n  \
    \   { actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphcbwgh32_test.go:22:28: undefined: getFirstDigit

    /tmp/tmphcbwgh32_test.go:25:28: undefined: getDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074622
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n\n    result\
    \ := 0\n    current := arr[0]\n    for i := 0; i < len(arr); i++ {\n        current\
    \ += arr[i]\n        if current >= 10 {\n            result += current / 10\n\
    \            current %= 10\n        } else {\n            result += 1\n      \
    \  }\n    }\n\n    return result\n}\n\nfunc TestCount_Nums(t *testing.T) {\n \
    \ candidate := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     {\
    \ actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual:\
    \ candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12,\
    \ 23, 34, -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpkl4pwyte_test.go:58: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpkl4pwyte_test.go:58:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpkl4pwyte_test.go:58: expected '%!s(int=5)', got '%!s(int=7)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpkl4pwyte_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=24)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpkl4pwyte_test.go:58: expected '%!s(int=5)', got '%!s(int=11)'\n\
    \    --- FAIL: TestCount_Nums/test_num__6 (0.00s)\n        tmpkl4pwyte_test.go:58:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074623
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    // Write your code here.\n    for _, v := range arr {\n  \
    \      if v < 0 {\n            v = -v\n        }\n    }\n    return len(arr)\n\
    }\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual:\
    \ candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpe_kuky1c_test.go:48: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpe_kuky1c_test.go:48:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpe_kuky1c_test.go:48: expected '%!s(int=5)', got '%!s(int=7)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpe_kuky1c_test.go:48:\
    \ expected '%!s(int=4)', got '%!s(int=6)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpe_kuky1c_test.go:48: expected '%!s(int=5)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCount_Nums/test_num__6 (0.00s)\n        tmpe_kuky1c_test.go:48:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074623
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    n := len(arr)\n    if n <= 0 {\n        return 0\n    }\n\
    \    sum := 0\n    for i := 0; i < n; i++ {\n        if arr[i] >= 0 {\n      \
    \      sum += arr[i]\n        }\n    }\n    return sum\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmpjlm97bnc_test.go:52: expected '%!s(int=6)', got '%!s(int=16)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmpjlm97bnc_test.go:52:\
    \ expected '%!s(int=5)', got '%!s(int=22)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmpjlm97bnc_test.go:52: expected '%!s(int=4)', got '%!s(int=200)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmpjlm97bnc_test.go:52:\
    \ expected '%!s(int=5)', got '%!s(int=69)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074623
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    // init a counter which will be returned\n    var counter\
    \ int = 0\n    // iterate through all numbers in the array\n    for _, number\
    \ := range arr {\n        // if number is positive\n        if number >= 0 {\n\
    \            // add the first positive digit to counter\n            counter++\n\
    \            // check if there is a digit that needs to be removed\n         \
    \   if number != 0 {\n                // subtract the number of digits in the\
    \ number\n                counter -= len(strconv.Itoa(int(number)))\n        \
    \    }\n        } else {\n            // if number is negative first digit\n \
    \           if number < 0 {\n                // subtract the first digit and check\
    \ if number is positive\n                if number != 0 {\n                  \
    \  counter--\n                    if number != 0 {\n                        counter\
    \ -= len(strconv.Itoa(int(number)))\n                    }\n                }\n\
    \            } else {\n                // subtract the first signed digit and\
    \ check if number is positive\n                if number != 0 {\n            \
    \        counter--\n                    if number != 0 {\n                   \
    \     counter -= len(strconv.Itoa(int(number)))\n                    }\n     \
    \           }\n            }\n        }\n    }\n    // return the counter\n  \
    \  return counter\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6qbovda9_test.go:30:32: undefined: strconv

    /tmp/tmp6qbovda9_test.go:39:40: undefined: strconv

    /tmp/tmp6qbovda9_test.go:47:40: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074622
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    lenArr := len(arr)\n\n    if lenArr == 0 {\n        return\
    \ 0\n    }\n\n    sumDigits := 0\n    i := 0\n\n    for i < lenArr {\n       \
    \ digitAsInt := arr[i]\n        if digitAsInt < 0 {\n            digitAsInt =\
    \ digitAsInt * -1\n        }\n\n        sumDigits += digitAsInt\n\n        if\
    \ sumDigits > 9 {\n            sumDigits -= 10\n            i++\n            continue\n\
    \        }\n\n        if sumDigits == 0 {\n            return 1\n        }\n\n\
    \        i++\n    }\n\n    return 0\n}\nfunc TestCount_Nums(t *testing.T) {\n\
    \  candidate := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     {\
    \ actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual:\
    \ candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12,\
    \ 23, 34, -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmpj20bxzui_test.go:71: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmpj20bxzui_test.go:71:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmpj20bxzui_test.go:71: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmpj20bxzui_test.go:71:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__7\
    \ (0.00s)\n        tmpj20bxzui_test.go:71: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074623
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    var sum int\n    for _, v := range arr {\n        sum += intToDigit(abs(v))\
    \ // +sign of v is added automatically\n    }\n    if sum == 0 {\n        return\
    \ 0 // if sum is 0, means there is no digit > 0, return 0\n    }\n    return sum\n\
    }\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual:\
    \ candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg99xvywu_test.go:21:16: undefined: intToDigit

    /tmp/tmpg99xvywu_test.go:21:27: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074622
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    // Your code goes here\n    var count int = 0\n    for _,\
    \ nbr := range arr {\n        if nbr < 0 {\n            nbr *= -1\n        }\n\
    \        if nbr == 0 {\n            count++\n        } else {\n            count\
    \ += nbr / 10\n            nbr %= 10\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -2, 0}), expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}),\
    \ expected: 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected:\
    \ 5 },\n     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n\
    \     { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n  \
    \   { actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpy_bbcxew_test.go:55: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpy_bbcxew_test.go:55:\
    \ expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpy_bbcxew_test.go:55: expected '%!s(int=5)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpy_bbcxew_test.go:55:\
    \ expected '%!s(int=4)', got '%!s(int=19)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpy_bbcxew_test.go:55: expected '%!s(int=5)', got '%!s(int=16)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmpy_bbcxew_test.go:55:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074625
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    // If there are no elements, return 0\n    if len(arr) ==\
    \ 0 {\n        return 0\n    }\n\n    // Store a map of digits to index\n    digits\
    \ := make(map[int]int, len(arr))\n    for i, v := range arr {\n        // Reset\
    \ the map if the current digit is a negative value\n        if v < 0 {\n     \
    \       digits[i] = 0\n        } else {\n            // Get the absolute value\
    \ of the digit\n            absDigit := v\n            if absDigit < 10 {\n  \
    \              absDigit = absDigit - absDigit % 10\n            }\n          \
    \  // Store the absolute value as the first digit in the map\n            digits[i]\
    \ = absDigit\n        }\n    }\n\n    // Iterate through the map and count the\
    \ numbers that have a sum > 0\n    var sum = 0\n    for digit, i := range digits\
    \ {\n        if i > 0 {\n            sum += digit\n        }\n    }\n\n    return\
    \ sum\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\nHere is a solution that\
    \ uses an extra map to track seen digits:\n<code>\npackage main\n\nimport (\n\
    \    \"fmt\"\n    \"strings\"\n)\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate\
    \ := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual:\
    \ candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100,\
    \ 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34,\
    \ -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpe68yedt__test.go:51:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074625
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    // Write code here\n\n    var totalNum int = 0\n    for _,\
    \ num := range arr {\n        if num < 0 {\n            totalNum++\n         \
    \   continue\n        }\n        for d := 0; num > 0; d += num%10 {\n        \
    \    num /= 10\n        }\n        totalNum += d\n    }\n    return totalNum\n\
    }\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual:\
    \ candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplr_4fdxz_test.go:30:21: undefined: d

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074626
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v > 0\
    \ {\n            count += int(v)\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -2, 0}), expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}),\
    \ expected: 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected:\
    \ 5 },\n     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n\
    \     { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n  \
    \   { actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmpe6qcwel7_test.go:48: expected '%!s(int=6)', got '%!s(int=16)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmpe6qcwel7_test.go:48:\
    \ expected '%!s(int=5)', got '%!s(int=22)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmpe6qcwel7_test.go:48: expected '%!s(int=4)', got '%!s(int=200)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmpe6qcwel7_test.go:48:\
    \ expected '%!s(int=5)', got '%!s(int=69)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074626
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    sum := 0\n    for _, val := range arr {\n        if val <\
    \ 0 {\n            val := val - val%10 + 10\n        }\n        sum += val\n \
    \   }\n    return sum\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate :=\
    \ count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplpk9s72w_test.go:22:13: val declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074626
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    result := 0\n    for _, v := range arr {\n        result +=\
    \ 1\n        if v < 0 {\n            digitOfV, _ := v.Int64()\n            v =\
    \ -digitOfV\n        }\n        for i := 0; v > 0 && i < 10; i++ {\n         \
    \   v -= int(v%10) // Take the last digit\n        }\n        if v == 0 {\n  \
    \          break\n        }\n    }\n    return result\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5y9f2ewl_test.go:23:30: v.Int64 undefined (type int has no field or method
    Int64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074626
- exit_code: null
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    i := 0\n    len := len(arr)\n    for i < len {\n        k\
    \ := 0\n        for ; i < len && arr[i] > 0; i++ {\n            k += arr[i]%10\n\
    \            arr[i] = arr[i]/10\n        }\n        if k > 0 {\n            i++\n\
    \        }\n    }\n    return i\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate\
    \ := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual:\
    \ candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100,\
    \ 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34,\
    \ -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074637
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, elem := range arr {\n        if elem\
    \ < 0 {\n            elem = -elem\n        }\n        count += int(elem / 10)\n\
    \    }\n    return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate\
    \ := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual:\
    \ candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100,\
    \ 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34,\
    \ -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmp3b13hur5_test.go:49: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmp3b13hur5_test.go:49:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmp3b13hur5_test.go:49: expected '%!s(int=4)', got '%!s(int=19)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmp3b13hur5_test.go:49:\
    \ expected '%!s(int=5)', got '%!s(int=15)'\n    --- FAIL: TestCount_Nums/test_num__6\
    \ (0.00s)\n        tmp3b13hur5_test.go:49: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmp3b13hur5_test.go:49:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074627
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    var sum = 0\n    var cnt int\n    for _, v := range arr {\n\
    \        if v < 0 {\n            v *= -1\n            sum += v\n            cnt++\n\
    \        } else {\n            sum += v\n        }\n    }\n    return cnt\n}\n\
    `},\n\t\t{`package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual:\
    \ candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments\n/tmp/tmpvi9md352_test.go:32:1: expected declaration,\
    \ found `},\n\t\t{`\n"
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074625
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    // base case: count the number of digits\n    if arr == nil\
    \ || len(arr) == 0 {\n        return 0\n    }\n\n    counter := 0\n    for _,\
    \ n := range arr {\n        counter += countDigits(n)\n    }\n    return counter\n\
    }\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual:\
    \ candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2n7dkh49_test.go:26:20: undefined: countDigits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074626
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    x := 0\n    for _, v := range arr {\n        if v > 0 {\n\
    \            x++\n        }\n    }\n    return x\n}\n\nfunc TestCount_Nums(t *testing.T)\
    \ {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     {\
    \ actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual:\
    \ candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12,\
    \ 23, 34, -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmp9fus7ys5_test.go:48: expected '%!s(int=5)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074627
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    if len(arr) < 1 {\n        return 0\n    }\n    // Convert\
    \ each number to string.\n    strArr := []string{}\n    for _, v := range arr\
    \ {\n        strArr = append(strArr, fmt.Sprint(v))\n    }\n    s := strArr[0]\n\
    \    for i := 1; i < len(strArr); i++ {\n        s += strArr[i]\n    }\n    //\
    \ Count how many numbers in strArr has digits > 0.\n    result := 0\n    for _,\
    \ v := range strArr {\n        if v == \"0\" {\n            continue\n       \
    \ }\n        n, err := strconv.Atoi(v)\n        if err != nil {\n            return\
    \ result\n        }\n        result += n\n    }\n    return result\n}\n\nfunc\
    \ TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -2, 0}), expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}),\
    \ expected: 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected:\
    \ 5 },\n     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n\
    \     { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n  \
    \   { actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppocp36nz_test.go:37:19: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074626
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    return 0\n}\nfunc TestCount_Nums(t *testing.T) {\n  candidate\
    \ := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual:\
    \ candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100,\
    \ 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34,\
    \ -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmpfr4s6fxm_test.go:41: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmpfr4s6fxm_test.go:41:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmpfr4s6fxm_test.go:41: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmpfr4s6fxm_test.go:41:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__6\
    \ (0.00s)\n        tmpfr4s6fxm_test.go:41: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmpfr4s6fxm_test.go:41:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074627
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    n := 0\n    for _, val := range arr {\n        n += count_num(val)\n\
    \    }\n    return n\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate :=\
    \ count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphkbv5wpx_test.go:21:14: undefined: count_num

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074627
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    var cnt int\n\n    for _, v := range arr {\n        if v <\
    \ 0 {\n            cnt += 1\n        } else {\n            v /= 10\n         \
    \   cnt += int(v == 0)\n        }\n    }\n\n    return cnt\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk6dhcfpq_test.go:26:24: cannot convert v == 0 (untyped bool value) to
    type int

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074627
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    // Write your code here\n    n := 0\n    for _, e := range\
    \ arr {\n        if e > 0 {\n            n += int(math.Abs(float64(e)))\n    \
    \    }\n    }\n    return n\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate\
    \ := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual:\
    \ candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100,\
    \ 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34,\
    \ -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvfguuhjl_test.go:23:22: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074627
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    var sum = 0\n    for _, n := range arr {\n        sum += n\n\
    \    }\n    if sum < 0 {\n        sum *= -1\n    }\n    return sum\n}\n\nfunc\
    \ TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -2, 0}), expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}),\
    \ expected: 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected:\
    \ 5 },\n     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n\
    \     { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n  \
    \   { actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpchb2zujp_test.go:49: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpchb2zujp_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=14)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpchb2zujp_test.go:49: expected '%!s(int=5)', got '%!s(int=16)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpchb2zujp_test.go:49:\
    \ expected '%!s(int=4)', got '%!s(int=192)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpchb2zujp_test.go:49: expected '%!s(int=5)', got '%!s(int=32)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074627
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    sum_digits := 0\n    for _, number := range arr {\n      \
    \  if number < 0 {\n            sign, num, _ := parseIntWithNegative(number)\n\
    \            sum_digits += sign\n        } else {\n            sum_digits += int(number)\n\
    \        }\n    }\n    return sum_digits\n}\n\nfunc TestCount_Nums(t *testing.T)\
    \ {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     {\
    \ actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual:\
    \ candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12,\
    \ 23, 34, -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2kdo0qsk_test.go:22:29: undefined: parseIntWithNegative

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074627
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n\n    // If the\
    \ first number in the array is negative, then the first digit\n    // will be\
    \ negative.\n    if arr[0] < 0 {\n        arr[0] *= -1\n    }\n\n    var digits\
    \ = 0\n    for _, n := range arr {\n        digits = digits+n%10\n    }\n\n  \
    \  return digits\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmp6jdg6gde_test.go:57: expected '%!s(int=0)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmp6jdg6gde_test.go:57:\
    \ expected '%!s(int=6)', got '%!s(int=14)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmp6jdg6gde_test.go:57: expected '%!s(int=5)', got '%!s(int=16)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmp6jdg6gde_test.go:57:\
    \ expected '%!s(int=4)', got '%!s(int=2)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmp6jdg6gde_test.go:57: expected '%!s(int=5)', got '%!s(int=-2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074627
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    sumDigits := 0\n    for _, num := range arr {\n        if\
    \ num > 0 {\n            sumDigits += int(num % 10)\n        }\n    }\n    return\
    \ sumDigits\n}\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmptunzvmiq_test.go:47: expected '%!s(int=6)', got '%!s(int=16)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmptunzvmiq_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=22)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmptunzvmiq_test.go:47: expected '%!s(int=4)', got '%!s(int=10)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmptunzvmiq_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074627
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    l := len(arr)\n    if l == 0 {\n        return 0\n    }\n\n\
    \    sumDigits := 0\n    negDigits := 0\n    for _, x := range arr {\n       \
    \ if x < 0 {\n            negDigits += x-x%10\n        } else {\n            sumDigits\
    \ += x-x%10\n        }\n    }\n    \n    // Now we can just count them:\n    if\
    \ sumDigits > 0 {\n        return l + sumDigits + negDigits\n    } else {\n  \
    \      return l + negDigits\n    }\n}\n\nfunc TestCount_Nums(t *testing.T) {\n\
    \  candidate := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     {\
    \ actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual:\
    \ candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12,\
    \ 23, 34, -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpace_xalx_test.go:62: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpace_xalx_test.go:62:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpace_xalx_test.go:62: expected '%!s(int=5)', got '%!s(int=7)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpace_xalx_test.go:62:\
    \ expected '%!s(int=4)', got '%!s(int=196)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpace_xalx_test.go:62: expected '%!s(int=5)', got '%!s(int=-24)'\n\
    \    --- FAIL: TestCount_Nums/test_num__6 (0.00s)\n        tmpace_xalx_test.go:62:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074628
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    var total int\n    for _, value := range arr {\n        //\
    \ Skip the negative number since it has a first negative digit.\n        if value\
    \ < 0 {\n            value = -value\n        }\n        // The first digit of\
    \ each number is the sum of the digit.\n        total += value%10\n    }\n   \
    \ return total\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmp1ry5ttlp_test.go:51: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmp1ry5ttlp_test.go:51:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmp1ry5ttlp_test.go:51: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmp1ry5ttlp_test.go:51:\
    \ expected '%!s(int=4)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmp1ry5ttlp_test.go:51: expected '%!s(int=5)', got '%!s(int=20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074628
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    // Initialize sum & counter variables.\n    var sum, counter\
    \ int\n    // Iterate through each element of array\n    for _, v := range arr\
    \ {\n        // If current element is positive, add it to sum\n        // and\
    \ increment counter by 1\n        if v > 0 {\n            sum += v\n         \
    \   counter++\n        }\n        // If current element is negative, add it to\
    \ sum\n        // but keep track of first positive element\n        if v < 0 {\n\
    \            // Negate current element\n            neg := -v\n            //\
    \ Check if negated element is positive\n            if neg > 0 {\n           \
    \     // Add negated element to sum\n                sum += neg\n            \
    \    // If negative element was the first positive element,\n                //\
    \ then its sum is now positive\n                if counter == 0 {\n          \
    \          counter = 1\n                }\n                // Else increment counter\
    \ by 1\n            } else {\n                // If negative element was not the\
    \ first positive\n                // element, then its sum is still negative\n\
    \                counter -= 1\n            }\n        }\n    }\n    // Return\
    \ number of elements with sum greater than 0\n    return counter\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpc9p3xtuz_test.go:75: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmpc9p3xtuz_test.go:75:\
    \ expected '%!s(int=5)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074628
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    return countNums(arr, 0, len(arr))\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8dbxyoj2_test.go:19:12: undefined: countNums

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074628
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    var count int\n\n    for _, value := range arr {\n       \
    \ count += sum_digits(value)\n    }\n\n    return count\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzozvyb54_test.go:22:18: undefined: sum_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074628
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    // Write code here\n    sumDigits := func(n int) int {\n \
    \       x := n\n        for i := 1; i < 9; i++ {\n            x -= x/10\n    \
    \    }\n        return x\n    }\n    sum := 0\n    for _, i := range arr {\n \
    \       if i >= 0 {\n            sum += count_digits(i)\n        }\n    }\n  \
    \  return sumDigits(sum)\n}\nfunc TestCount_Nums(t *testing.T) {\n  candidate\
    \ := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual:\
    \ candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100,\
    \ 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34,\
    \ -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjnd101it_test.go:30:20: undefined: count_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074629
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, value := range arr {\n        if value\
    \ == 0 {\n            count++\n        } else {\n            count += countNums(value)\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n\
    \  candidate := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     {\
    \ actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual:\
    \ candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12,\
    \ 23, 34, -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2midqcwn_test.go:24:22: undefined: countNums

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074629
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    n := 0\n    for _, v := range arr {\n        if v < 0 {\n\
    \            v = -v\n        }\n        n += count_digits(v)\n    }\n    return\
    \ n\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual:\
    \ candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpybpsu7gt_test.go:24:14: undefined: count_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074629
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n\n    var count\
    \ int\n    for _, i := range arr {\n        count += count_nums_recursive(i)\n\
    \    }\n\n    return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate\
    \ := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual:\
    \ candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100,\
    \ 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34,\
    \ -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpf_j2mttp_test.go:25:18: undefined: count_nums_recursive

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074629
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    for _, v := range arr {\n        if v < 0 {\n            v\
    \ *= -1\n        }\n        if v%10 != 0 {\n            return len(arr)\n    \
    \    }\n    }\n    return 0\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate\
    \ := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual:\
    \ candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100,\
    \ 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34,\
    \ -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpzv0hm_9u_test.go:50: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpzv0hm_9u_test.go:50:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpzv0hm_9u_test.go:50: expected '%!s(int=5)', got '%!s(int=7)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpzv0hm_9u_test.go:50:\
    \ expected '%!s(int=4)', got '%!s(int=6)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpzv0hm_9u_test.go:50: expected '%!s(int=5)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCount_Nums/test_num__6 (0.00s)\n        tmpzv0hm_9u_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    sum := 0\n    for _, v := range arr {\n        sum += v\n\
    \        if sum > 0 {\n            break\n        }\n    }\n    return sum\n}\n\
    \nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual:\
    \ candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpc_vbw_we_test.go:49: expected '%!s(int=0)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpc_vbw_we_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=1)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpc_vbw_we_test.go:49: expected '%!s(int=5)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpc_vbw_we_test.go:49:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpc_vbw_we_test.go:49: expected '%!s(int=5)', got '%!s(int=12)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    return 0\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate\
    \ := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual:\
    \ candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100,\
    \ 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34,\
    \ -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmpnc75qh2b_test.go:42: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmpnc75qh2b_test.go:42:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmpnc75qh2b_test.go:42: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmpnc75qh2b_test.go:42:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__6\
    \ (0.00s)\n        tmpnc75qh2b_test.go:42: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmpnc75qh2b_test.go:42:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074420
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    m := map[int]int{}\n\
    \    for _, val := range arr {\n        m[val]++\n    }\n    for num, nr := range\
    \ m {\n        if nr > 0 {\n            if num > 0 {\n                return nr\n\
    \            } else {\n                num -= int64(nr%10)\n            }\n  \
    \      }\n    }\n    return 0\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate\
    \ := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual:\
    \ candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100,\
    \ 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34,\
    \ -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7mvd0fdr_test.go:31:17: invalid operation: num -= int64(nr % 10) (mismatched
    types int and int64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        count += int(v)\n    }\n    return\
    \ count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmp13zjoyhb_test.go:49: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmp13zjoyhb_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmp13zjoyhb_test.go:49: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmp13zjoyhb_test.go:49:\
    \ expected '%!s(int=4)', got '%!s(int=208)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmp13zjoyhb_test.go:49: expected '%!s(int=5)', got '%!s(int=170)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    result := 0\n    for _, x := range arr {\n        // If negative,\
    \ convert to its first signed digit.\n        if x < 0 {\n            x -= x%10\n\
    \        }\n\n        // x is now the sum of the digits of x.\n        result\
    \ += (x % 10)\n\n        // Remove first digit.\n        x /= 10\n    }\n    return\
    \ result\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmpe9nw21da_test.go:55: expected '%!s(int=6)', got '%!s(int=16)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmpe9nw21da_test.go:55:\
    \ expected '%!s(int=5)', got '%!s(int=22)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmpe9nw21da_test.go:55: expected '%!s(int=4)', got '%!s(int=10)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmpe9nw21da_test.go:55:\
    \ expected '%!s(int=5)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074631
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    sums := make([]int,\
    \ len(arr))\n    for i, v := range arr {\n        if v < 0 {\n            sums[i]\
    \ = -v\n        } else {\n            sums[i] = v % 10 + int(v / 10)\n       \
    \ }\n    }\n    return sum(sums)\n}\n\nfunc TestCount_Nums(t *testing.T) {\n \
    \ candidate := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     {\
    \ actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual:\
    \ candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12,\
    \ 23, 34, -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvfnr5wu2_test.go:30:12: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074630
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    var count int = 0\n    for _, num := range arr {\n       \
    \ count += count_nums(num) // recurse\n    }\n    return count\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx_fh0ist_test.go:21:29: cannot use num (variable of type int) as type
    []int in argument to count_nums

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    result := 0\n    for _, num := range arr {\n        d := (num\
    \ >> 3) & 0x07\n        if (num < 0 && (d > 0 || d == 3)) ||\n            (num\
    \ > 0 && d == 0) {\n            result += int(num)\n        } else {\n       \
    \     result += int(d) + count_nums([]int{num})\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0390\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x520356?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 34 [running]:\nruntime.newobject(0x4fe600?)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/malloc.go:1258\
    \ +0x3b fp=0xc0201e03a0 sp=0xc0201e0398 pc=0x40d03b\ncommand-line-arguments_test.count_nums({0xc003d71a08,\
    \ 0x1, 0xc0201e0420?})\n\t/tmp/tmpo0ml6ja8_test.go:26 +0x7b fp=0xc0201e03e8 sp=0xc0201e03a0\
    \ pc=0x4ef6db\ncommand-line-arguments_test.count_nums({0xc003d71a00, 0x1, 0xc0201e0468?})\n\
    \t/tmp/tmpo0ml6ja8_test.go:26 +0x90 fp=0xc0201e0430 sp=0xc0201e03e8 pc=0x4ef6f0\n\
    command-line-arguments_test.count_nums({0xc003d719f8, 0x1, 0xc0201e04b0?})\n\t\
    /tmp/tmpo0ml6ja8_test.go:26 +0x90 fp=0xc0201e0478 sp=0xc0201e0430 pc=0x4ef6f0\n\
    command-line-arguments_test.count_nums({0xc003d719f0, 0x1, 0xc0201e04f8?})\n\t\
    /tmp/tmpo0ml6ja8_test.go:26 +0x90 fp=0xc0201e04c0 sp=0xc0201e0478 pc=0x4ef6f0\n\
    command-line-arguments_test.count_nums({0xc003d719e8, 0x1, 0xc0201e0540?})\n\t\
    /tmp/tmpo0ml6ja8_test.go:26 +0x90 fp=0xc0201e0508 sp=0xc0201e04c0 pc=0x4ef6f0\n\
    command-line-arguments_test.count_nums({0xc003d719e0, 0x1, 0xc0201e0588?})\n\t\
    /tmp/tmpo0ml6ja8_test.go:26 +0x90 fp=0xc0201e0550 sp=0xc0201e0508 pc=0x4ef6f0\n\
    command-line-arguments_test.count_nums({0xc003d719d8, 0x1, 0xc0201e05d0?})\n\t\
    /tmp/tmpo0ml6ja8_test.go:26 +0x90 fp=0xc0201e0598 sp=0xc0201e0550 pc=0x4ef6f0\n\
    command-line-arguments_test.count_nums({0xc003d719d0, 0x1, 0xc0201e0618?})\n\t\
    /tmp/tmpo0ml6ja8_test.go:26 +0x90 fp=0xc0201e05e0 sp=0xc0201e0598 pc=0x4ef6f0\n\
    command-line-arguments_test.count_nums({0xc003d719c8, 0x1, 0xc0201e0660?})\n\t\
    /tmp/tmpo0ml6ja8_test.go:26 +0x90 fp=0xc0201e0628 sp=0xc0201e05e0 pc=0x4ef6f0\n\
    command-line-arguments_test.count_nums({0xc00"
  timestamp: 1660074632
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, num0 := range arr {\n        if num0\
    \ < 0 {\n            count += num0 % 10\n        } else {\n            count +=\
    \ num0\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t *testing.T)\
    \ {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     {\
    \ actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual:\
    \ candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12,\
    \ 23, 34, -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpav3xg3f1_test.go:50: expected '%!s(int=0)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpav3xg3f1_test.go:50:\
    \ expected '%!s(int=6)', got '%!s(int=14)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpav3xg3f1_test.go:50: expected '%!s(int=5)', got '%!s(int=16)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpav3xg3f1_test.go:50:\
    \ expected '%!s(int=4)', got '%!s(int=192)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpav3xg3f1_test.go:50: expected '%!s(int=5)', got '%!s(int=58)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074631
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    var n int\n    for _, v := range arr {\n        if v >= 0\
    \ {\n            n += 1 + count_nums(arr[:len(arr)-1])\n        }\n        if\
    \ v < 0 {\n            n += count_nums([]int{-v})\n        }\n    }\n    return\
    \ n\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual:\
    \ candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpatdwsa47_test.go:51: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpatdwsa47_test.go:51:\
    \ expected '%!s(int=6)', got '%!s(int=6073)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpatdwsa47_test.go:51: expected '%!s(int=5)', got '%!s(int=6073)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpatdwsa47_test.go:51:\
    \ expected '%!s(int=4)', got '%!s(int=810)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpatdwsa47_test.go:51: expected '%!s(int=5)', got '%!s(int=614)'\n\
    \    --- FAIL: TestCount_Nums/test_num__6 (0.00s)\n        tmpatdwsa47_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074631
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    l := len(arr)\n    sum := 0\n    for _, v := range arr {\n\
    \        sum += v\n    }\n    return sum\n}\n\nfunc TestCount_Nums(t *testing.T)\
    \ {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     {\
    \ actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual:\
    \ candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12,\
    \ 23, 34, -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsg9q1ih1_test.go:19:5: l declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    fmt.Println(arr)\n    var result int\n    for _, x := range\
    \ arr {\n        fmt.Println(\"x: \", x)\n        if x > 0 {\n            result\
    \ += x\n        } else {\n            x /= 10\n            if x > 0 {\n      \
    \          result += x\n            }\n        }\n    }\n    return result\n}\n\
    \nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual:\
    \ candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "[]\n[-1 -2 0]\nx:  -1\nx:  -2\nx:  0\n[1 1 2 -2 3 4 5]\nx:  1\nx:  1\n\
    x:  2\nx:  -2\nx:  3\nx:  4\nx:  5\n[1 6 9 -6 0 1 5]\nx:  1\nx:  6\nx:  9\nx:\
    \  -6\nx:  0\nx:  1\nx:  5\n[1 100 98 -7 1 -1]\nx:  1\nx:  100\nx:  98\nx:  -7\n\
    x:  1\nx:  -1\n[12 23 34 -45 -56 0]\nx:  12\nx:  23\nx:  34\nx:  -45\nx:  -56\n\
    x:  0\n[0 1]\nx:  0\nx:  1\n[1]\nx:  1\n--- FAIL: TestCount_Nums (0.00s)\n   \
    \ --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpi4rjl6j8_test.go:55:\
    \ expected '%!s(int=6)', got '%!s(int=16)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpi4rjl6j8_test.go:55: expected '%!s(int=5)', got '%!s(int=22)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpi4rjl6j8_test.go:55:\
    \ expected '%!s(int=4)', got '%!s(int=200)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpi4rjl6j8_test.go:55: expected '%!s(int=5)', got '%!s(int=69)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074631
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        count += v % 10\n    }\n    return\
    \ count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpmzcejido_test.go:49: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpmzcejido_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpmzcejido_test.go:49: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpmzcejido_test.go:49:\
    \ expected '%!s(int=4)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpmzcejido_test.go:49: expected '%!s(int=5)', got '%!s(int=20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074632
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        if v%10 != 0 {\n            count\
    \ += v / 10\n        } else {\n            count += v\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmpivioz_qv_test.go:53: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmpivioz_qv_test.go:53:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmpivioz_qv_test.go:53: expected '%!s(int=4)', got '%!s(int=109)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmpivioz_qv_test.go:53:\
    \ expected '%!s(int=5)', got '%!s(int=15)'\n    --- FAIL: TestCount_Nums/test_num__6\
    \ (0.00s)\n        tmpivioz_qv_test.go:53: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmpivioz_qv_test.go:53:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074632
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, num := range arr {\n        // If number\
    \ is negative and first digit of number is negative,\n        // then number is\
    \ negative.\n        if num < 0 && num%10 < 0 {\n            num = num - num%10\n\
    \        }\n        for d := 0; d < len(num); d++ {\n            count += int(num[d])\n\
    \        }\n    }\n    return count\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\n\
    Nice job. Very nicely commented.\n<|/ c |>\n<| c |>\nI didn't think of that.\n\
    <|/ c |>\n<| a dscore=0 tags=go |>\nHere is an algorithm you can use, it's pretty\
    \ straightforward. \nStart by adding up all the digits, start with the least significant\
    \ digit, add 1 to that digit, if it is a negative number just subtract the value\
    \ from the number, if it is a positive number add 1 to that number. \nHere is\
    \ an implementation in Javascript. \n<code>\nfunc TestCount_Nums(t *testing.T)\
    \ {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     {\
    \ actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual:\
    \ candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12,\
    \ 23, 34, -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpxc55k83f_test.go:32:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074631
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n\n    if len(arr)\
    \ == 1 {\n        if arr[0] < 0 {\n            return -1\n        }\n        return\
    \ arr[0]\n    }\n\n    if arr[0] != 0 {\n        return arr[0]\n    }\n\n    sign\
    \ := len(arr) - 1\n    return count_nums(arr[1:]) - count_nums(arr[:sign]) + arr[len(arr)\
    \ - 1]\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpqsdjwokp_test.go:58: expected '%!s(int=0)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpqsdjwokp_test.go:58:\
    \ expected '%!s(int=6)', got '%!s(int=1)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpqsdjwokp_test.go:58: expected '%!s(int=5)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpqsdjwokp_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpqsdjwokp_test.go:58: expected '%!s(int=5)', got '%!s(int=12)'\n\
    \    --- FAIL: TestCount_Nums/test_num__6 (0.00s)\n        tmpqsdjwokp_test.go:58:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074632
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    // count the numbers which have a sum of digits > 0\n    n\
    \ := 0\n    for _, v := range arr {\n        n += count_nums(nums(arr[:], v))\n\
    \    }\n    return n\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate :=\
    \ count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpht7kpsgv_test.go:22:25: undefined: nums

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074632
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    sum := 0\n    for _, v := range arr {\n        if v >= 0 {\n\
    \            sum += v\n        } else if v < 0 {\n            sum += int(v / 10)\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestCount_Nums(t *testing.T) {\n\
    \  candidate := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     {\
    \ actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual:\
    \ candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12,\
    \ 23, 34, -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmps0bw0ekt_test.go:50: expected '%!s(int=6)', got '%!s(int=16)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmps0bw0ekt_test.go:50:\
    \ expected '%!s(int=5)', got '%!s(int=22)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmps0bw0ekt_test.go:50: expected '%!s(int=4)', got '%!s(int=200)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmps0bw0ekt_test.go:50:\
    \ expected '%!s(int=5)', got '%!s(int=60)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074632
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    total := 0\n    for _, i := range arr {\n        total +=\
    \ i\n    }\n    return total\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate\
    \ := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual:\
    \ candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100,\
    \ 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34,\
    \ -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmprudgp_jd_test.go:46: expected '%!s(int=0)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmprudgp_jd_test.go:46:\
    \ expected '%!s(int=6)', got '%!s(int=14)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmprudgp_jd_test.go:46: expected '%!s(int=5)', got '%!s(int=16)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmprudgp_jd_test.go:46:\
    \ expected '%!s(int=4)', got '%!s(int=192)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmprudgp_jd_test.go:46: expected '%!s(int=5)', got '%!s(int=-32)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074632
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    ans := 0\n    for _, v := range arr {\n        if v < 0 {\n\
    \            ans += 1\n            v = v*(-1)\n        }\n        var sum int\n\
    \        sum |= (v >> 0) & 0x1\n        sum += (v >> 1) & 0x1\n        sum +=\
    \ (v >> 2) & 0x1\n        sum += (v >> 3) & 0x1\n        sum += (v >> 4) & 0x1\n\
    \        sum += (v >> 5) & 0x1\n        sum += (v >> 6) & 0x1\n        sum +=\
    \ (v >> 7) & 0x1\n        sum += (v >> 8) & 0x1\n        sum += (v >> 9) & 0x1\n\
    \        sum += (v >> 10) & 0x1\n        sum += (v >> 11) & 0x1\n        sum +=\
    \ (v >> 12) & 0x1\n        sum += (v >> 13) & 0x1\n        sum += (v >> 14) &\
    \ 0x1\n        sum += (v >> 15) & 0x1\n        ans += sum\n    }\n    return ans\n\
    }\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual:\
    \ candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpg0vj0nxo_test.go:67: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpg0vj0nxo_test.go:67:\
    \ expected '%!s(int=6)', got '%!s(int=10)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpg0vj0nxo_test.go:67: expected '%!s(int=5)', got '%!s(int=11)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpg0vj0nxo_test.go:67:\
    \ expected '%!s(int=4)', got '%!s(int=14)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpg0vj0nxo_test.go:67: expected '%!s(int=5)', got '%!s(int=17)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074633
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    var result int\n\n    for _, v := range arr {\n        result\
    \ *= 10\n        result += v\n    }\n\n    if result < 0 {\n        result = result\
    \ * -1\n    }\n\n    return result\n}\n\nfunc TestCount_Nums(t *testing.T) {\n\
    \  candidate := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     {\
    \ actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual:\
    \ candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12,\
    \ 23, 34, -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmp4lorubw8_test.go:53: expected '%!s(int=0)', got '%!s(int=120)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmp4lorubw8_test.go:53:\
    \ expected '%!s(int=6)', got '%!s(int=1118345)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmp4lorubw8_test.go:53: expected '%!s(int=5)', got '%!s(int=1684015)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmp4lorubw8_test.go:53:\
    \ expected '%!s(int=4)', got '%!s(int=1197309)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmp4lorubw8_test.go:53: expected '%!s(int=5)', got '%!s(int=1458940)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074633
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    sum := 0\n    for _, num := range arr {\n        sum += int(num\
    \ / 10)\n        sum -= int(num % 10)\n    }\n    return sum\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpt_g4il92_test.go:47: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpt_g4il92_test.go:47:\
    \ expected '%!s(int=6)', got '%!s(int=-14)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpt_g4il92_test.go:47: expected '%!s(int=5)', got '%!s(int=-16)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpt_g4il92_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=17)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpt_g4il92_test.go:47: expected '%!s(int=5)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestCount_Nums/test_num__6 (0.00s)\n        tmpt_g4il92_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestCount_Nums/test_num__7\
    \ (0.00s)\n        tmpt_g4il92_test.go:47: expected '%!s(int=1)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074633
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    sign := 1\n    for _, item := range arr {\n\
    \        if item > 0 {\n            item -= sign * 10\n        }\n        sum\
    \ += item\n        if sum > 0 {\n            count++\n            sum -= item\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n\
    \  candidate := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     {\
    \ actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual:\
    \ candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12,\
    \ 23, 34, -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp92kfhra0_test.go:25:9: undefined: sum

    /tmp/tmp92kfhra0_test.go:26:12: undefined: sum

    /tmp/tmp92kfhra0_test.go:28:13: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074633
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    return count_nums_helper(arr, 0, len(arr))\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6iaaxy_d_test.go:19:12: undefined: count_nums_helper

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074633
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    var cnt int\n    for _, v := range arr {\n        if v > 0\
    \ {\n            cnt++\n        }\n    }\n    return cnt\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpn6hn10ic_test.go:48: expected '%!s(int=5)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074634
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    counter :=\
    \ 0\n    digits := 0\n    for _, num := range arr {\n        digits = digits*(len(strconv.Itoa(num))-1)\n\
    \        counter += int(digits)\n        digits = 0\n    }\n    return counter\n\
    }\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual:\
    \ candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpww_kkegz_test.go:25:30: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074633
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v *= -1\n        }\n        if v > 0 {\n            count +=\
    \ int(v)\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t *testing.T)\
    \ {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     {\
    \ actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual:\
    \ candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12,\
    \ 23, 34, -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmp9xxjqlqi_test.go:51: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmp9xxjqlqi_test.go:51:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmp9xxjqlqi_test.go:51: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmp9xxjqlqi_test.go:51:\
    \ expected '%!s(int=4)', got '%!s(int=208)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmp9xxjqlqi_test.go:51: expected '%!s(int=5)', got '%!s(int=170)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074634
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    var n int = 0\n    for _, value := range arr {\n        if\
    \ value > 0 {\n            if value%10 != 0 {\n                n = n + 1\n   \
    \         }\n        }\n    }\n    return n\n}\n\nfunc TestCount_Nums(t *testing.T)\
    \ {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     {\
    \ actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual:\
    \ candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12,\
    \ 23, 34, -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmp0imhqkse_test.go:50: expected '%!s(int=4)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmp0imhqkse_test.go:50:\
    \ expected '%!s(int=5)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074634
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    if arr == nil || len(arr) == 0 {\n        return 0\n    }\n\
    \    n := 0\n    sum := 0\n    for _, v := range arr {\n        if v > 0 {\n \
    \           sum += int(v)\n        }\n    }\n    if sum > 0 {\n        n = len(arr)\
    \ - sum\n    }\n    if n < len(arr) {\n        n = len(arr)\n    }\n    return\
    \ n\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual:\
    \ candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpe_5jd8c9_test.go:58: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpe_5jd8c9_test.go:58:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpe_5jd8c9_test.go:58: expected '%!s(int=5)', got '%!s(int=7)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpe_5jd8c9_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=6)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpe_5jd8c9_test.go:58: expected '%!s(int=5)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCount_Nums/test_num__6 (0.00s)\n        tmpe_5jd8c9_test.go:58:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074634
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    n := 0\n    for _, v := range arr {\n        n += count_nums([]int{v})\n\
    \    }\n    return n\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate :=\
    \ count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0388\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x520356?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\nruntime.mallocgc(0x8?, 0x4fe600?, 0x1?)\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/runtime/malloc.go:909 +0x91d fp=0xc0201e0398\
    \ sp=0xc0201e0390 pc=0x40cf1d\nruntime.newobject(0x1000000000000?)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/malloc.go:1259\
    \ +0x27 fp=0xc0201e03c0 sp=0xc0201e0398 pc=0x40d027\ncommand-line-arguments_test.count_nums({0xc004514120,\
    \ 0x1, 0x40d027?})\n\t/tmp/tmpd8_g1box_test.go:21 +0x47 fp=0xc0201e0400 sp=0xc0201e03c0\
    \ pc=0x4ef6a7\ncommand-line-arguments_test.count_nums({0xc004514118, 0x1, 0x40d027?})\n\
    \t/tmp/tmpd8_g1box_test.go:21 +0x5c fp=0xc0201e0440 sp=0xc0201e0400 pc=0x4ef6bc\n\
    command-line-arguments_test.count_nums({0xc004514110, 0x1, 0x40d027?})\n\t/tmp/tmpd8_g1box_test.go:21\
    \ +0x5c fp=0xc0201e0480 sp=0xc0201e0440 pc=0x4ef6bc\ncommand-line-arguments_test.count_nums({0xc004514108,\
    \ 0x1, 0x40d027?})\n\t/tmp/tmpd8_g1box_test.go:21 +0x5c fp=0xc0201e04c0 sp=0xc0201e0480\
    \ pc=0x4ef6bc\ncommand-line-arguments_test.count_nums({0xc004514100, 0x1, 0x40d027?})\n\
    \t/tmp/tmpd8_g1box_test.go:21 +0x5c fp=0xc0201e0500 sp=0xc0201e04c0 pc=0x4ef6bc\n\
    command-line-arguments_test.count_nums({0xc0045140f8, 0x1, 0x40d027?})\n\t/tmp/tmpd8_g1box_test.go:21\
    \ +0x5c fp=0xc0201e0540 sp=0xc0201e0500 pc=0x4ef6bc\ncommand-line-arguments_test.count_nums({0xc0045140f0,\
    \ 0x1, 0x40d027?})\n\t/tmp/tmpd8_g1box_test.go:21 +0x5c fp=0xc0201e0580 sp=0xc0201e0540\
    \ pc=0x4ef6bc\ncommand-line-arguments_test.count_nums({0xc0045140e8, 0x1, 0x40d027?})\n\
    \t/tmp/tmpd8_g1box_test.go:21 +0x5c fp=0xc0201e05c0 sp=0xc0201e0580 pc=0x4ef6bc\n\
    command-line-arguments_test.count_nums({0xc0045140e0, 0x1, 0x40d027?})"
  timestamp: 1660074636
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    sum := 0\n\
    \    for _, d := range arr {\n        sum += int(d > 0)\n    }\n    return len(arr)\
    \ - sum\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv3uxbqk0_test.go:24:20: cannot convert d > 0 (untyped bool value) to type
    int

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074634
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    var i int\n    for _, v := range arr {\n        if v == 0\
    \ {\n            i++\n        }\n    }\n    return i\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmphwp1dnq8_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmphwp1dnq8_test.go:48:\
    \ expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmphwp1dnq8_test.go:48: expected '%!s(int=5)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmphwp1dnq8_test.go:48:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmphwp1dnq8_test.go:48: expected '%!s(int=5)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmphwp1dnq8_test.go:48:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074635
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    sign := make([]int, 0, len(arr))\n    for _, num := range\
    \ arr {\n        sign = append(sign, num)\n    }\n\n    n := 0\n    for _, v :=\
    \ range sign {\n        n = n+v*v\n    }\n    return n\n}\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmp2l6m_c0h_test.go:50: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmp2l6m_c0h_test.go:50:\
    \ expected '%!s(int=6)', got '%!s(int=60)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmp2l6m_c0h_test.go:50: expected '%!s(int=5)', got '%!s(int=180)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmp2l6m_c0h_test.go:50:\
    \ expected '%!s(int=4)', got '%!s(int=19656)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmp2l6m_c0h_test.go:50: expected '%!s(int=5)', got '%!s(int=6990)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074635
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, item := range arr {\n        if item\
    \ < 0 {\n            item = item * -1\n        }\n        if item > 0 {\n    \
    \        digitSums := 0\n            for digit := 0; item != 0; item /= 10 {\n\
    \                digitSums += digit\n            }\n            count += digitSums\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n\
    \  candidate := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     {\
    \ actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual:\
    \ candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12,\
    \ 23, 34, -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmpxhub6qwe_test.go:55: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmpxhub6qwe_test.go:55:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmpxhub6qwe_test.go:55: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmpxhub6qwe_test.go:55:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__6\
    \ (0.00s)\n        tmpxhub6qwe_test.go:55: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmpxhub6qwe_test.go:55:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074635
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    if len(arr) < 2 {\n        return 0\n    }\n    var count\
    \ = 0\n    var sum = 0\n    for _, v := range arr {\n        if v > 0 {\n    \
    \        sum += v\n        } else {\n            sum += -v\n        }\n      \
    \  if sum >= 10 {\n            count++\n            sum -= 10\n        }\n   \
    \ }\n    return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate :=\
    \ count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmp9m27kbri_test.go:58: expected '%!s(int=6)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmp9m27kbri_test.go:58:\
    \ expected '%!s(int=5)', got '%!s(int=2)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmp9m27kbri_test.go:58: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmp9m27kbri_test.go:58:\
    \ expected '%!s(int=5)', got '%!s(int=6)'\n    --- FAIL: TestCount_Nums/test_num__6\
    \ (0.00s)\n        tmp9m27kbri_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmp9m27kbri_test.go:58:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074636
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    var result int\n    for _, num := range arr {\n        if\
    \ num < 0 {\n            num = -num\n        }\n        result += (int(num)-int(num%10))/10\n\
    \    }\n    return result\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate\
    \ := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual:\
    \ candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100,\
    \ 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34,\
    \ -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmpc6gfo1dh_test.go:49: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmpc6gfo1dh_test.go:49:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmpc6gfo1dh_test.go:49: expected '%!s(int=4)', got '%!s(int=19)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmpc6gfo1dh_test.go:49:\
    \ expected '%!s(int=5)', got '%!s(int=15)'\n    --- FAIL: TestCount_Nums/test_num__6\
    \ (0.00s)\n        tmpc6gfo1dh_test.go:49: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmpc6gfo1dh_test.go:49:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074636
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    for _, num\
    \ := range arr {\n        if num < 0 {\n            sign, num := num, -1 * num\n\
    \            for i := 0; i < len(sign); i++ {\n                if sign[i] > 0\
    \ {\n                    sign[i], num = -sign[i], num*10 + int(sign[i])\n    \
    \            } else {\n                    sign[i], num = -sign[i]*10, num/10\n\
    \                }\n            }\n        }\n        for i := 0; i < len(num);\
    \ i++ {\n            count := 0\n            sign := len(num) - 1 - i\n      \
    \      sum := 0\n            for j := 0; j < len(num); j++ {\n               \
    \ sum += int(num[j]) * sign\n            }\n            if sum > 0 {\n       \
    \         count++\n            }\n            if count == 1 {\n              \
    \  return 1\n            }\n        }\n    }\n    return 0\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsmxcatxm_test.go:25:33: invalid argument: sign (variable of type int)
    for len

    /tmp/tmpsmxcatxm_test.go:26:24: invalid operation: cannot index sign (variable
    of type int)

    /tmp/tmpsmxcatxm_test.go:27:41: invalid operation: cannot index sign (variable
    of type int)

    /tmp/tmpsmxcatxm_test.go:29:41: invalid operation: cannot index sign (variable
    of type int)

    /tmp/tmpsmxcatxm_test.go:33:29: invalid argument: num (variable of type int) for
    len

    /tmp/tmpsmxcatxm_test.go:35:25: invalid argument: num (variable of type int) for
    len

    /tmp/tmpsmxcatxm_test.go:37:33: invalid argument: num (variable of type int) for
    len

    /tmp/tmpsmxcatxm_test.go:38:31: invalid operation: cannot index num (variable
    of type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074635
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    arr := arr[1:]\n\
    \    sum_digits := make([]int, len(arr))\n    var sum_digits []int\n\n    for\
    \ _, num := range arr {\n        sum_digits += signDigits(num)\n    }\n\n    return\
    \ len(sum_digits)\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpftfjcok5_test.go:22:9:\
    \ no new variables on left side of :=\n/tmp/tmpftfjcok5_test.go:24:9: sum_digits\
    \ redeclared in this block\n\t/tmp/tmpftfjcok5_test.go:23:5: other declaration\
    \ of sum_digits\n/tmp/tmpftfjcok5_test.go:27:23: undefined: signDigits\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074636
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    if len(arr) < 1 {\n        return 0\n    }\n\n    first :=\
    \ arr[0]\n    if first < 0 {\n        first = -first\n    }\n\n    if first ==\
    \ 0 {\n        return len(arr) - 1\n    }\n\n    result := 0\n    lastDigit :=\
    \ 0\n    for _, v := range arr[1:] {\n        c := int(v)\n        result += c\
    \ / 10 * lastDigit\n        lastDigit = c%10\n\n        if lastDigit == 0 {\n\
    \            break\n        }\n    }\n    return result\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmpgf8448uj_test.go:66: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmpgf8448uj_test.go:66:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmpgf8448uj_test.go:66: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmpgf8448uj_test.go:66:\
    \ expected '%!s(int=5)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__7\
    \ (0.00s)\n        tmpgf8448uj_test.go:66: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074636
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    // write code here\n    \n    for i:=0; i<len(arr); i++{\n\
    \        if arr[i] < 0{\n            arr[i] = arr[i]/10\n        }\n    }\n  \
    \  \n    sum := 0\n    for i:=0; i<len(arr); i++{\n        sum += arr[i]\n   \
    \ }\n    \n    return sum\n}\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\ndef\
    \ count_nums(x):\n    n=0\n    count=0\n    for i in x:\n        if x[i]>=0:\n\
    \            count+=i\n        else:\n            count+=x[i]\n            n+=1\n\
    \    return count\n</code>\n<|/ a tags=python,counting,sum dscore=0 |>\n<| c |>\n\
    While this code may answer the question, providing additional context regarding\
    \ how and/or why it solves the problem would improve the answer's long-term value.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\ndef count_nums(arr):\n  sum_nums = 0\n  for\
    \ i in arr:\n    if i >= 0:\n      sum_nums += i\n    else:\n      sum_nums +=\
    \ i ** -1\n  return sum_nums\n</code>\n<|/ a tags=python,counting,sum |>\n<| c\
    \ |>\nWhile this code may answer the question, providing additional context regarding\
    \ why and/or how this code answers the question improves its long-term value.\n\
    <|/ c |>\n<| a tags=python,counting,sum |>\n<code>\ndef count_nums(arr):\n   \
    \ sum = 0\n    for num in arr:\n        if num < 0:\n            num *= -1\n \
    \       sum += num\n    return sum\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\n<code>\ndef count_nums(arr):\n    sum = 0\n    for i in arr:\n        if\
    \ i >= 0:\n            sum += i\n        else:\n            sum += i ** -1\n \
    \   return sum\n</code>\n<|/ a tags=python,counting,sum |>\n<| c |>\nWhile this\
    \ code may answer the question, providing additional context regarding how and/or\
    \ why it solves the problem would improve the answer's long-term value.\n<|/ c\
    \ |>\n<| a tags=python,counting,sum dscore=0 |>\n<code>\ndef count_nums(arr):\n\
    \    sum_nums = 0\n    for i in arr:\n        if i >= 0:\n            sum_nums\
    \ += i\n        else:\n            sum_nums += i ** -1\n    return sum_nums\n\
    </code>\n<|/ a |>\n<| c |>\nWhile this code may answer the question, providing\
    \ additional \nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6hy10w7h_test.go:34:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074635
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    var ret int\
    \ = 0\n    for _, i := range arr {\n        if i < 0 {\n            i += 36\n\
    \        }\n        s += i\n        if s > 9 {\n            ret++\n          \
    \  s = 0\n        }\n    }\n    return ret\n}\n</code>\n<|/ a dscore=1 tags=go\
    \ |>\n<| a tags=go |>\n<code>\npackage main\n\nimport (\n    \"fmt\"\n    \"sort\"\
    \n    \"strings\"\n)\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpl8d0fsdh_test.go:35:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074635
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    result := 0\n    for _, val := range arr {\n        if val\
    \ < 0 {\n            result -= val\n        } else {\n            result += val\n\
    \        }\n    }\n    return result\n}\n\nfunc TestCount_Nums(t *testing.T) {\n\
    \  candidate := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     {\
    \ actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual:\
    \ candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12,\
    \ 23, 34, -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpfuixwzn9_test.go:50: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpfuixwzn9_test.go:50:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpfuixwzn9_test.go:50: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpfuixwzn9_test.go:50:\
    \ expected '%!s(int=4)', got '%!s(int=208)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpfuixwzn9_test.go:50: expected '%!s(int=5)', got '%!s(int=170)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074637
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    return count_nums_impl(arr, 0, 0)\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp25kcu0_a_test.go:19:12: undefined: count_nums_impl

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074636
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    return count_nums_helper(arr, make(map[int]int), false)\n\
    }\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual:\
    \ candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplzbng1bb_test.go:19:12: undefined: count_nums_helper

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074637
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n            sum += v%10\n        }\n        else {\n\
    \            sum += v%10\n        }\n        if sum > 9 {\n            count++\n\
    \            sum -= 10\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvhmhy7k0_test.go:25:9: expected statement, found ''else''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074636
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        count +=\
    \ count_nums_helper(arr)\n    }\n    return count\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzab7u2c7_test.go:20:12: v declared but not used

    /tmp/tmpzab7u2c7_test.go:21:18: undefined: count_nums_helper

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074637
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    sum := 0\n    n := len(arr)\n    for _, v := range arr {\n\
    \        sum += int(v)\n    }\n    for _, v := range arr {\n        if v < 0 {\n\
    \            sum += int(v)*(-1)\n        }\n    }\n    return sum\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoceua7tk_test.go:20:5: n declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074637
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    // Write your code here\n    var sum int\n    for _, val :=\
    \ range arr {\n        if val < 0 {\n            sum += int(val)\n        } else\
    \ {\n            sum += int(val%10)\n        }\n    }\n    return sum\n}\n\nfunc\
    \ TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -2, 0}), expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}),\
    \ expected: 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected:\
    \ 5 },\n     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n\
    \     { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n  \
    \   { actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpdrb72jz9_test.go:51: expected '%!s(int=0)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpdrb72jz9_test.go:51:\
    \ expected '%!s(int=6)', got '%!s(int=14)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpdrb72jz9_test.go:51: expected '%!s(int=5)', got '%!s(int=16)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpdrb72jz9_test.go:51:\
    \ expected '%!s(int=4)', got '%!s(int=2)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpdrb72jz9_test.go:51: expected '%!s(int=5)', got '%!s(int=-92)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074639
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    sum := 0\n\
    \    for _, v := range arr {\n        if v > 0 {\n            sum += v\n     \
    \   }\n    }\n    return sum\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate\
    \ := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual:\
    \ candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100,\
    \ 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34,\
    \ -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmp1tyabsuc_test.go:51: expected '%!s(int=6)', got '%!s(int=16)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmp1tyabsuc_test.go:51:\
    \ expected '%!s(int=5)', got '%!s(int=22)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmp1tyabsuc_test.go:51: expected '%!s(int=4)', got '%!s(int=200)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmp1tyabsuc_test.go:51:\
    \ expected '%!s(int=5)', got '%!s(int=69)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074639
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    return count_nums_helper(arr)\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpso09jbc1_test.go:19:12: undefined: count_nums_helper

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074638
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    return sum(arr) - first(arr)\n}\n\nfunc TestCount_Nums(t *testing.T)\
    \ {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     {\
    \ actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual:\
    \ candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12,\
    \ 23, 34, -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppx_mglko_test.go:19:12: undefined: sum

    /tmp/tmppx_mglko_test.go:19:23: undefined: first

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    n := 0\n    for _, v := range arr {\n        // If this is\
    \ a negative number\n        if v < 0 {\n            // then multiply by 10\n\
    \            v *= 10\n\n            // subtract the last digit\n            v\
    \ -= arr[n-1]\n        } else {\n            // Otherwise just add v to the total\n\
    \            n += int(v)\n        }\n    }\n\n    return n\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.count_nums(...)\n\t/tmp/tmpbst0r9hb_test.go:27\n\
    command-line-arguments_test.TestCount_Nums(0x0?)\n\t/tmp/tmpbst0r9hb_test.go:45\
    \ +0x746\ntesting.tRunner(0xc0001a01a0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074639
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    sum := 0\n    for _, v := range arr {\n        sum += v\n\
    \    }\n\n    if sum == 0 {\n        return 0\n    }\n    if sum < 0 {\n     \
    \   num = -1\n    } else {\n        num = 0\n    }\n\n    for i, v := range arr\
    \ {\n        if v < 0 {\n            if v < num {\n                num = -v\n\
    \            }\n        } else if num != 0 {\n            break\n        } else\
    \ {\n            num = v\n        }\n    }\n\n    return num\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqp_u2hke_test.go:28:9: undefined: num

    /tmp/tmpqp_u2hke_test.go:30:9: undefined: num

    /tmp/tmpqp_u2hke_test.go:33:9: i declared but not used

    /tmp/tmpqp_u2hke_test.go:35:20: undefined: num

    /tmp/tmpqp_u2hke_test.go:36:17: undefined: num

    /tmp/tmpqp_u2hke_test.go:38:19: undefined: num

    /tmp/tmpqp_u2hke_test.go:41:13: undefined: num

    /tmp/tmpqp_u2hke_test.go:45:12: undefined: num

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074639
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    m := make(map[int]int)\n\n    for _, v := range arr {\n  \
    \      m[v]++\n    }\n\n    for v := range m {\n        if v > 0 {\n         \
    \   return v\n        }\n    }\n    return 0\n}\n\nfunc TestCount_Nums(t *testing.T)\
    \ {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     {\
    \ actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual:\
    \ candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12,\
    \ 23, 34, -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmpj9flcpw1_test.go:53: expected '%!s(int=6)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmpj9flcpw1_test.go:53:\
    \ expected '%!s(int=5)', got '%!s(int=1)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmpj9flcpw1_test.go:53: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmpj9flcpw1_test.go:53:\
    \ expected '%!s(int=5)', got '%!s(int=34)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074639
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    result := 0\n    arr2 := []int{}\n    for i := 0; i < len(arr);\
    \ i++ {\n        arr2 = append(arr2, arr[i])\n    }\n    arr3 = append(arr2, 0)\n\
    \n    for i := len(arr3) - 2; i >= 0; i-- {\n        result += (arr3[i] + arr3[i\
    \ + 1] + arr3[i + 2]) % 10\n    }\n\n    return result\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2kxmv1lv_test.go:24:5: undefined: arr3

    /tmp/tmp2kxmv1lv_test.go:26:18: undefined: arr3

    /tmp/tmp2kxmv1lv_test.go:27:20: undefined: arr3

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074639
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    sumDigits := 0\n    if len(arr) < 1 {\n        return 0\n\
    \    }\n    for _, v := range arr {\n        digitSum := 0\n        switch {\n\
    \        case v >= 0:\n            digitSum = digitSum + int(v)\n        case\
    \ v < 0:\n            digitSum = digitSum - int(v)\n        }\n        if digitSum\
    \ > 0 {\n            sumDigits++\n        }\n    }\n    return sumDigits\n}\n\n\
    func TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -2, 0}), expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}),\
    \ expected: 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected:\
    \ 5 },\n     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n\
    \     { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n  \
    \   { actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmp9xiwxtpi_test.go:58: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmp9xiwxtpi_test.go:58:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmp9xiwxtpi_test.go:58: expected '%!s(int=5)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmp9xiwxtpi_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074639
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    // initialize count\n    var count int = 0\n\n    // initialize\
    \ sum variable\n    var sum int = 0\n\n    // iterate through array, starting\
    \ at last element and incrementing\n    // sum each time, while adding digits\
    \ in front of current number.\n    for i := len(arr) - 1; i >= 0; i-- {\n    \
    \    sum += arr[i]\n        count += intPow10(sum)\n    }\n\n    // return count\
    \ if the total sum of digits > 0\n    return count\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_66k65g0_test.go:29:18: undefined: intPow10

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074639
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    // Initialize our result counter.\n    var result int\n\n\
    \    // Go through the entire array, add each number to the result counter\n \
    \   // if the sum of the digits is greater than zero.\n    for _, x := range arr\
    \ {\n        result += count_digits(x)\n    }\n\n    // Return the result.\n \
    \   return result\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgk1c6go2_test.go:25:19: undefined: count_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074639
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    counts := make(map[int]int, len(arr))\n    sums := make([]int,\
    \ len(arr))\n    for _, v := range arr {\n        sums[v%10]++\n        counts[v]++\n\
    \    }\n    i := 0\n    for j, v := range counts {\n        if v > 0 {\n     \
    \       sums[j] = v\n            i++\n        }\n    }\n    return i\n}\n\nfunc\
    \ TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -2, 0}), expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}),\
    \ expected: 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected:\
    \ 5 },\n     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n\
    \     { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n  \
    \   { actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513760, 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513760, 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.count_nums(...)\n\t/tmp/tmpgftkcw2s_test.go:22\n\
    command-line-arguments_test.TestCount_Nums(0xc0001a0340?)\n\t/tmp/tmpgftkcw2s_test.go:43\
    \ +0x13dd\ntesting.tRunner(0xc0001a0340, 0x529080)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074641
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, n := range arr {\n        count +=\
    \ count_nums([]int{n})\n    }\n    return count\n}\n\nfunc TestCount_Nums(t *testing.T)\
    \ {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     {\
    \ actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual:\
    \ candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12,\
    \ 23, 34, -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020170388\
    \ stack=[0xc020170000, 0xc040170000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x520356?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 20 [running]:\nruntime.mallocgc(0x8?, 0x4fe600?, 0x1?)\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/runtime/malloc.go:909 +0x91d fp=0xc020170398\
    \ sp=0xc020170390 pc=0x40cf1d\nruntime.newobject(0x1000000000000?)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/malloc.go:1259\
    \ +0x27 fp=0xc0201703c0 sp=0xc020170398 pc=0x40d027\ncommand-line-arguments_test.count_nums({0xc00433a120,\
    \ 0x1, 0x40d027?})\n\t/tmp/tmpy6erfuoa_test.go:21 +0x47 fp=0xc020170400 sp=0xc0201703c0\
    \ pc=0x4ef6a7\ncommand-line-arguments_test.count_nums({0xc00433a118, 0x1, 0x40d027?})\n\
    \t/tmp/tmpy6erfuoa_test.go:21 +0x5c fp=0xc020170440 sp=0xc020170400 pc=0x4ef6bc\n\
    command-line-arguments_test.count_nums({0xc00433a110, 0x1, 0x40d027?})\n\t/tmp/tmpy6erfuoa_test.go:21\
    \ +0x5c fp=0xc020170480 sp=0xc020170440 pc=0x4ef6bc\ncommand-line-arguments_test.count_nums({0xc00433a108,\
    \ 0x1, 0x40d027?})\n\t/tmp/tmpy6erfuoa_test.go:21 +0x5c fp=0xc0201704c0 sp=0xc020170480\
    \ pc=0x4ef6bc\ncommand-line-arguments_test.count_nums({0xc00433a100, 0x1, 0x40d027?})\n\
    \t/tmp/tmpy6erfuoa_test.go:21 +0x5c fp=0xc020170500 sp=0xc0201704c0 pc=0x4ef6bc\n\
    command-line-arguments_test.count_nums({0xc00433a0f8, 0x1, 0x40d027?})\n\t/tmp/tmpy6erfuoa_test.go:21\
    \ +0x5c fp=0xc020170540 sp=0xc020170500 pc=0x4ef6bc\ncommand-line-arguments_test.count_nums({0xc00433a0f0,\
    \ 0x1, 0x40d027?})\n\t/tmp/tmpy6erfuoa_test.go:21 +0x5c fp=0xc020170580 sp=0xc020170540\
    \ pc=0x4ef6bc\ncommand-line-arguments_test.count_nums({0xc00433a0e8, 0x1, 0x40d027?})\n\
    \t/tmp/tmpy6erfuoa_test.go:21 +0x5c fp=0xc0201705c0 sp=0xc020170580 pc=0x4ef6bc\n\
    command-line-arguments_test.count_nums({0xc00433a0e0, 0x1, 0x40d027?}"
  timestamp: 1660074642
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for i, v := range arr {\n        if v >= 0\
    \ {\n            if v%10 == 0 {\n                count++\n            }\n    \
    \    } else {\n            if v%10 < 0 {\n                count++\n          \
    \  }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t *testing.T)\
    \ {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     {\
    \ actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual:\
    \ candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12,\
    \ 23, 34, -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprjf_oeoa_test.go:20:9: i declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074640
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    if arr == nil || len(arr) == 0 {\n        return 0\n    }\n\
    \n    var a uint64\n    var b uint64\n    var c uint64\n    var d uint64\n   \
    \ var e uint64\n    var f uint64\n    var g uint64\n\n    for _, v := range arr\
    \ {\n        c += uint64(v % 10)\n        v /= 10\n        b += uint64(v % 10)\n\
    \        v /= 10\n        a += uint64(v % 10)\n        v /= 10\n        d += uint64(v\
    \ % 10)\n        v /= 10\n        e += uint64(v % 10)\n        v /= 10\n     \
    \   f += uint64(v % 10)\n        g += uint64(v % 10)\n    }\n\n    return count_numsSum(arr,\
    \ 0, c, b, a, d, e, f, g) > 0 ?\n        count_numsSum(arr, 0, c, b, a, d, e,\
    \ f, g) + 1 :\n        count_numsSum(arr, 0, c, b, a, d, e, f, g)\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmprc7hmryb_test.go:46:59: illegal character U+003F ''?''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    // Your code here\n    sum := 0\n    for _, num:= range arr\
    \ {\n        sum += int(num)\n    }\n    return sum\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpw9t42y___test.go:47: expected '%!s(int=0)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpw9t42y___test.go:47:\
    \ expected '%!s(int=6)', got '%!s(int=14)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpw9t42y___test.go:47: expected '%!s(int=5)', got '%!s(int=16)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpw9t42y___test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=192)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpw9t42y___test.go:47: expected '%!s(int=5)', got '%!s(int=-32)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074643
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    return count_nums_(arr)\n}\n\nfunc TestCount_Nums(t *testing.T)\
    \ {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     {\
    \ actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual:\
    \ candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12,\
    \ 23, 34, -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsohyxt42_test.go:19:12: undefined: count_nums_

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074642
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    sum := 0\n    n := len(arr)\n    if n == 0 {\n        return\
    \ 0\n    }\n    for _, v := range arr {\n        if v < 0 {\n            sum +=\
    \ v\n        }\n        sum += v % 10\n    }\n    return sum\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpt5iyj97n_test.go:53: expected '%!s(int=0)', got '%!s(int=-6)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpt5iyj97n_test.go:53:\
    \ expected '%!s(int=6)', got '%!s(int=12)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpt5iyj97n_test.go:53: expected '%!s(int=5)', got '%!s(int=10)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpt5iyj97n_test.go:53:\
    \ expected '%!s(int=4)', got '%!s(int=-6)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpt5iyj97n_test.go:53: expected '%!s(int=5)', got '%!s(int=-103)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074643
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    sum := 0\n    for _, num := range arr {\n        sum += int(num\
    \ > 0)\n    }\n    return sum\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate\
    \ := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual:\
    \ candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100,\
    \ 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34,\
    \ -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa5qnhwvr_test.go:21:20: cannot convert num > 0 (untyped bool value) to
    type int

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074642
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    var sum int\n    var n1 int\n    for _, n := range arr {\n\
    \        if n < 0 {\n            n1 = n\n            n = -n\n        }\n     \
    \   sum += n%10\n        n1 /= 10\n    }\n    if n1 != 0 {\n        return sum\
    \ + count_nums(arr[1:])\n    } else {\n        return sum\n    }\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmp_lavu_th_test.go:56: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmp_lavu_th_test.go:56:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmp_lavu_th_test.go:56: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmp_lavu_th_test.go:56:\
    \ expected '%!s(int=4)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmp_lavu_th_test.go:56: expected '%!s(int=5)', got '%!s(int=20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074644
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    result := 0\n    for _, i := range arr {\n        if i >=\
    \ 0 {\n            result += i\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -2, 0}), expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}),\
    \ expected: 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected:\
    \ 5 },\n     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n\
    \     { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n  \
    \   { actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmpm60h05ua_test.go:48: expected '%!s(int=6)', got '%!s(int=16)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmpm60h05ua_test.go:48:\
    \ expected '%!s(int=5)', got '%!s(int=22)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmpm60h05ua_test.go:48: expected '%!s(int=4)', got '%!s(int=200)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmpm60h05ua_test.go:48:\
    \ expected '%!s(int=5)', got '%!s(int=69)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074644
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    s := 0\n    for _, val := range arr {\n        if val < 0\
    \ {\n            s += val % 10\n            val = val / 10\n        }\n      \
    \  for _, b := range val {\n            if b > 0 {\n                s += b\n \
    \           }\n        }\n    }\n    return s\n}\n\nfunc TestCount_Nums(t *testing.T)\
    \ {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     {\
    \ actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual:\
    \ candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12,\
    \ 23, 34, -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3qdh29cs_test.go:25:27: cannot range over val (variable of type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074642
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    sum := 0\n    for _, v := range arr {\n        if v >= 0 {\n\
    \            sum += int(v)\n        }\n    }\n    return sum\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmpezvrxppa_test.go:48: expected '%!s(int=6)', got '%!s(int=16)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmpezvrxppa_test.go:48:\
    \ expected '%!s(int=5)', got '%!s(int=22)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmpezvrxppa_test.go:48: expected '%!s(int=4)', got '%!s(int=200)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmpezvrxppa_test.go:48:\
    \ expected '%!s(int=5)', got '%!s(int=69)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074644
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    return count_nums_test.CountNums(arr)\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpag7uyurx_test.go:19:12: undefined: count_nums_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074622
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    for _, num := range arr {\n        if num < 0 {\n        \
    \    if num < 0 {\n                num *= -1\n            }\n            firstSignedDigit\
    \ := num / 10\n            num %= 10\n            if num > 0 {\n             \
    \   return 0\n            }\n            if firstSignedDigit > 0 {\n         \
    \       return 0\n            }\n        }\n    }\n    return len(arr)\n}\n\n\
    func TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -2, 0}), expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}),\
    \ expected: 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected:\
    \ 5 },\n     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n\
    \     { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n  \
    \   { actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmpou85lxqv_test.go:57: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmpou85lxqv_test.go:57:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmpou85lxqv_test.go:57: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmpou85lxqv_test.go:57:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__6\
    \ (0.00s)\n        tmpou85lxqv_test.go:57: expected '%!s(int=1)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074644
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    sum := 0\n    for _, i := range arr {\n        sum += i\n\
    \    }\n\n    return sum\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate\
    \ := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual:\
    \ candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100,\
    \ 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34,\
    \ -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmppyhaalv1_test.go:47: expected '%!s(int=0)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmppyhaalv1_test.go:47:\
    \ expected '%!s(int=6)', got '%!s(int=14)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmppyhaalv1_test.go:47: expected '%!s(int=5)', got '%!s(int=16)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmppyhaalv1_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=192)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmppyhaalv1_test.go:47: expected '%!s(int=5)', got '%!s(int=-32)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074644
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    result := 0\n    for _, v := range arr {\n        result +=\
    \ count_nums([]int{v})\n    }\n    return result\n}\n\nfunc TestCount_Nums(t *testing.T)\
    \ {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     {\
    \ actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual:\
    \ candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12,\
    \ 23, 34, -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0388\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x520356?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\nruntime.mallocgc(0x8?, 0x4fe600?, 0x1?)\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/runtime/malloc.go:909 +0x91d fp=0xc0201e0398\
    \ sp=0xc0201e0390 pc=0x40cf1d\nruntime.newobject(0x1000000000000?)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/malloc.go:1259\
    \ +0x27 fp=0xc0201e03c0 sp=0xc0201e0398 pc=0x40d027\ncommand-line-arguments_test.count_nums({0xc004478110,\
    \ 0x1, 0x40d027?})\n\t/tmp/tmp4hq62l11_test.go:21 +0x47 fp=0xc0201e0400 sp=0xc0201e03c0\
    \ pc=0x4ef6a7\ncommand-line-arguments_test.count_nums({0xc004478108, 0x1, 0x40d027?})\n\
    \t/tmp/tmp4hq62l11_test.go:21 +0x5c fp=0xc0201e0440 sp=0xc0201e0400 pc=0x4ef6bc\n\
    command-line-arguments_test.count_nums({0xc004478100, 0x1, 0x40d027?})\n\t/tmp/tmp4hq62l11_test.go:21\
    \ +0x5c fp=0xc0201e0480 sp=0xc0201e0440 pc=0x4ef6bc\ncommand-line-arguments_test.count_nums({0xc0044780f8,\
    \ 0x1, 0x40d027?})\n\t/tmp/tmp4hq62l11_test.go:21 +0x5c fp=0xc0201e04c0 sp=0xc0201e0480\
    \ pc=0x4ef6bc\ncommand-line-arguments_test.count_nums({0xc0044780f0, 0x1, 0x40d027?})\n\
    \t/tmp/tmp4hq62l11_test.go:21 +0x5c fp=0xc0201e0500 sp=0xc0201e04c0 pc=0x4ef6bc\n\
    command-line-arguments_test.count_nums({0xc0044780e8, 0x1, 0x40d027?})\n\t/tmp/tmp4hq62l11_test.go:21\
    \ +0x5c fp=0xc0201e0540 sp=0xc0201e0500 pc=0x4ef6bc\ncommand-line-arguments_test.count_nums({0xc0044780e0,\
    \ 0x1, 0x40d027?})\n\t/tmp/tmp4hq62l11_test.go:21 +0x5c fp=0xc0201e0580 sp=0xc0201e0540\
    \ pc=0x4ef6bc\ncommand-line-arguments_test.count_nums({0xc0044780d8, 0x1, 0x40d027?})\n\
    \t/tmp/tmp4hq62l11_test.go:21 +0x5c fp=0xc0201e05c0 sp=0xc0201e0580 pc=0x4ef6bc\n\
    command-line-arguments_test.count_nums({0xc0044780d0, 0x1, 0x40d027?})"
  timestamp: 1660074645
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    if arr == nil {\n        return 0\n    }\n    count := 0\n\
    \    for _, val := range arr {\n        if val < 0 {\n            digit, ok :=\
    \ divMod(val, 10)\n            if ok {\n                count--\n            }\n\
    \        } else {\n            count++\n        }\n    }\n    return count\n}\n\
    \nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual:\
    \ candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkfe_eqq8_test.go:25:26: undefined: divMod

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            sum += v\n        } else {\n            sum += v % 10\n     \
    \   }\n        if sum > 0 {\n            count++\n        }\n    }\n    return\
    \ count\n}\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0ol3z_bm_test.go:22:13: undefined: sum

    /tmp/tmp0ol3z_bm_test.go:24:13: undefined: sum

    /tmp/tmp0ol3z_bm_test.go:26:12: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    len := len(arr)\n    count := 0\n    for i := 0; i < len;\
    \ i++ {\n        sum := arr[i]\n        for j := 0; j < 9; j++ {\n           \
    \ if sum > 0 {\n                sum -= (sum % 10)\n            } else {\n    \
    \            break\n            }\n        }\n        if sum == 0 {\n        \
    \    count++\n        }\n    }\n    return count\n}\nfunc TestCount_Nums(t *testing.T)\
    \ {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     {\
    \ actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual:\
    \ candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12,\
    \ 23, 34, -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpj6xvc92r_test.go:56: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmpj6xvc92r_test.go:56:\
    \ expected '%!s(int=5)', got '%!s(int=6)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmpj6xvc92r_test.go:56: expected '%!s(int=4)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmpj6xvc92r_test.go:56:\
    \ expected '%!s(int=5)', got '%!s(int=1)'\n    --- FAIL: TestCount_Nums/test_num__6\
    \ (0.00s)\n        tmpj6xvc92r_test.go:56: expected '%!s(int=1)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074644
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    for _, v := range arr {\n        if v < 0 {\n            v\
    \ = -v\n        }\n        if v > 9 {\n            return int(v / 10)\n      \
    \  }\n    }\n    return 0\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate\
    \ := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual:\
    \ candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100,\
    \ 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34,\
    \ -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmp2icplbi9_test.go:50: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmp2icplbi9_test.go:50:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmp2icplbi9_test.go:50: expected '%!s(int=4)', got '%!s(int=10)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmp2icplbi9_test.go:50:\
    \ expected '%!s(int=5)', got '%!s(int=1)'\n    --- FAIL: TestCount_Nums/test_num__6\
    \ (0.00s)\n        tmp2icplbi9_test.go:50: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmp2icplbi9_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074644
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    // Your code here\n    var sum = 0\n    for _, v := range\
    \ arr {\n        sum += v\n    }\n    return sum % 10\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmp4z4nq74m_test.go:47: expected '%!s(int=0)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmp4z4nq74m_test.go:47:\
    \ expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmp4z4nq74m_test.go:47: expected '%!s(int=5)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmp4z4nq74m_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=2)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmp4z4nq74m_test.go:47: expected '%!s(int=5)', got '%!s(int=-2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074644
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    for _, i := range arr {\n        if i < 0 {\n            i\
    \ -= int(((i / 10) + 1) * 10)\n        }\n        if i < 0 {\n            i *=\
    \ -1\n        }\n    }\n    return len(arr)\n}\n\nfunc TestCount_Nums(t *testing.T)\
    \ {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     {\
    \ actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual:\
    \ candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12,\
    \ 23, 34, -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpn2buopik_test.go:50: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpn2buopik_test.go:50:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpn2buopik_test.go:50: expected '%!s(int=5)', got '%!s(int=7)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpn2buopik_test.go:50:\
    \ expected '%!s(int=4)', got '%!s(int=6)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpn2buopik_test.go:50: expected '%!s(int=5)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCount_Nums/test_num__6 (0.00s)\n        tmpn2buopik_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074644
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, n := range arr {\n        if n > 0\
    \ {\n            if n > 9 {\n                count += count_nums(arr[:len(arr)-1])\n\
    \            }\n            if n > 99 {\n                count += count_nums(arr[:len(arr)-1])\n\
    \            }\n            if n > 999 {\n                count += count_nums(arr[:len(arr)-1])\n\
    \            }\n            count += n\n        }\n    }\n    return count\n}\n\
    \nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual:\
    \ candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmp0aimvb77_test.go:57: expected '%!s(int=6)', got '%!s(int=16)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmp0aimvb77_test.go:57:\
    \ expected '%!s(int=5)', got '%!s(int=22)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmp0aimvb77_test.go:57: expected '%!s(int=4)', got '%!s(int=16307)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmp0aimvb77_test.go:57:\
    \ expected '%!s(int=5)', got '%!s(int=7539)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074644
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    var count = 0\n    for _, v := range arr {\n        if v >=\
    \ 0 {\n            continue\n        }\n        count += count_first_dig(v, arr)\n\
    \    }\n    return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate\
    \ := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual:\
    \ candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100,\
    \ 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34,\
    \ -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyn2_sj3q_test.go:24:18: undefined: count_first_dig

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    // We only\
    \ care about the last element because it's always >= 0.\n    val := arr[len(arr)-1]\n\
    \    if val < 0 {\n        val = -val\n    }\n    // If arr is [1, 1, 1, ...],\
    \ then there are only 3 numbers which sum to\n    // the fourth element, which\
    \ is 1 + 1 + 1 + ... + 1 = 4.\n    // Otherwise, the number we're looking for\
    \ is 1 + arr[0] + arr[1] + ... + arr[val-1].\n    // For example, arr = [1, 2,\
    \ 3] has 4 numbers sum to 3. arr = [1, 2] has 1 number\n    // sum to 2. arr =\
    \ [] has no numbers.\n    if val == 0 {\n        return len(arr) + 1\n    }\n\
    \    // Otherwise, find the cumulative sum of digits of arr[val-1]...\n    sumDigits\
    \ := 0\n    for i := val - 1; i >= 0; i-- {\n        sumDigits += int(arr[i])\n\
    \    }\n    return sumDigits + count_nums(arr[:val])\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0390\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x520356?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.count_nums({0xc0401dfdc0?,\
    \ 0x1?, 0x7?})\n\t/tmp/tmp6jmv2g12_test.go:18 +0xc5 fp=0xc0201e03a0 sp=0xc0201e0398\
    \ pc=0x4ef725\ncommand-line-arguments_test.count_nums({0xc0401dfdc0?, 0x0?, 0x0?})\n\
    \t/tmp/tmp6jmv2g12_test.go:40 +0x85 fp=0xc0201e03d0 sp=0xc0201e03a0 pc=0x4ef6e5\n\
    command-line-arguments_test.count_nums({0xc0401dfdc0?, 0x0?, 0x0?})\n\t/tmp/tmp6jmv2g12_test.go:40\
    \ +0x85 fp=0xc0201e0400 sp=0xc0201e03d0 pc=0x4ef6e5\ncommand-line-arguments_test.count_nums({0xc0401dfdc0?,\
    \ 0x0?, 0x0?})\n\t/tmp/tmp6jmv2g12_test.go:40 +0x85 fp=0xc0201e0430 sp=0xc0201e0400\
    \ pc=0x4ef6e5\ncommand-line-arguments_test.count_nums({0xc0401dfdc0?, 0x0?, 0x0?})\n\
    \t/tmp/tmp6jmv2g12_test.go:40 +0x85 fp=0xc0201e0460 sp=0xc0201e0430 pc=0x4ef6e5\n\
    command-line-arguments_test.count_nums({0xc0401dfdc0?, 0x0?, 0x0?})\n\t/tmp/tmp6jmv2g12_test.go:40\
    \ +0x85 fp=0xc0201e0490 sp=0xc0201e0460 pc=0x4ef6e5\ncommand-line-arguments_test.count_nums({0xc0401dfdc0?,\
    \ 0x0?, 0x0?})\n\t/tmp/tmp6jmv2g12_test.go:40 +0x85 fp=0xc0201e04c0 sp=0xc0201e0490\
    \ pc=0x4ef6e5\ncommand-line-arguments_test.count_nums({0xc0401dfdc0?, 0x0?, 0x0?})\n\
    \t/tmp/tmp6jmv2g12_test.go:40 +0x85 fp=0xc0201e04f0 sp=0xc0201e04c0 pc=0x4ef6e5\n\
    command-line-arguments_test.count_nums({0xc0401dfdc0?, 0x0?, 0x0?})\n\t/tmp/tmp6jmv2g12_test.go:40\
    \ +0x85 fp=0xc0201e0520 sp=0xc0201e04f0 pc=0x4ef6e5\ncommand-line-arguments_test.count_nums({0xc0401dfdc0?,\
    \ 0x0?, 0x0?})\n\t/tmp/tmp6jmv2g12_test.go:40 +0x85 fp=0xc0201e0550 sp=0xc0201e0520\
    \ pc=0x4ef6e5\ncommand-line-arguments_test.count_nums({0xc0401dfdc0?, 0x0?, 0x0?})\n\
    \t/tmp/tmp6jmv2g12_test.go:40 +0x85 fp="
  timestamp: 1660074645
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    var sum =\
    \ 0\n    for _, v := range arr {\n        sum += getNum(v)\n    }\n    return\
    \ sum\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplo3agb91_test.go:24:16: undefined: getNum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    var sumDigits int\n    for _, value := range arr {\n     \
    \   if value == 0 {\n            sumDigits++\n        } else {\n            sumDigits\
    \ += value%10\n            value /= 10\n        }\n    }\n    return sumDigits\n\
    }\n</cell>\n<cell>\n%%file count_nums_test.go\n\npackage count_nums_test\n\nimport\
    \ (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc TestCount_Nums(t *testing.T) {\n\
    \  candidate := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     {\
    \ actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual:\
    \ candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12,\
    \ 23, 34, -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpw1zek77p_test.go:30:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    count :=\
    \ 0\n    signed := false\n    for _, v := range arr {\n        if v >= 0 {\n \
    \           if signed {\n                count += 1\n            } else {\n  \
    \              signed = true\n            }\n        } else {\n            if\
    \ signed {\n                count -= v\n            } else {\n               \
    \ signed = false\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -2, 0}), expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}),\
    \ expected: 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected:\
    \ 5 },\n     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n\
    \     { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n  \
    \   { actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmp5zpuwiye_test.go:62: expected '%!s(int=6)', got '%!s(int=7)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmp5zpuwiye_test.go:62:\
    \ expected '%!s(int=5)', got '%!s(int=11)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmp5zpuwiye_test.go:62: expected '%!s(int=4)', got '%!s(int=11)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmp5zpuwiye_test.go:62:\
    \ expected '%!s(int=5)', got '%!s(int=104)'\n    --- FAIL: TestCount_Nums/test_num__7\
    \ (0.00s)\n        tmp5zpuwiye_test.go:62: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074645
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    var sum int\n    var lastSum int\n    \n    for _, v := range\
    \ arr {\n        lastSum = sum\n        sum += v\n        if lastSum > 0 {\n \
    \           break\n        }\n    }\n    return sum\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmp7a7jzyog_test.go:52: expected '%!s(int=0)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmp7a7jzyog_test.go:52:\
    \ expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmp7a7jzyog_test.go:52: expected '%!s(int=5)', got '%!s(int=7)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmp7a7jzyog_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=101)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmp7a7jzyog_test.go:52: expected '%!s(int=5)', got '%!s(int=35)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074645
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    n := 0\n    for _, v := range arr {\n        if v >= 0 {\n\
    \            n = n + count_nums([]int{v})\n        } else {\n            n +=\
    \ count_digits(v)\n        }\n    }\n    return n\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprc0r0pmv_test.go:24:18: undefined: count_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074644
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    sum := arr[0]\n\
    \    count := 1\n    for _, num := range arr[1:] {\n        if num < 0 {\n   \
    \         num ^= num << 1\n            num ^= num >> 3\n        }\n        sum\
    \ += num\n        if sum > 9 {\n            count += int(sum / 10)\n         \
    \   sum %= 10\n        } else {\n            count++\n        }\n    }\n    return\
    \ count\n}\n</code>\n<|/ a tags=go,arrays |>\n<| a |>\nJust to add to David's\
    \ answer above, if you want a solution which does not require using strings.\n\
    <code>\npackage main\n\nimport \"fmt\"\n\nfunc TestCount_Nums(t *testing.T) {\n\
    \  candidate := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     {\
    \ actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual:\
    \ candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12,\
    \ 23, 34, -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpsr_ar760_test.go:39:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    n := arr[0]\n\
    \    for _, v := range arr {\n        if v > 0 {\n            n += v\n       \
    \ }\n    }\n    return n\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate\
    \ := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual:\
    \ candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100,\
    \ 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34,\
    \ -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpjt57yuj__test.go:51: expected '%!s(int=0)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpjt57yuj__test.go:51:\
    \ expected '%!s(int=6)', got '%!s(int=17)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpjt57yuj__test.go:51: expected '%!s(int=5)', got '%!s(int=23)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpjt57yuj__test.go:51:\
    \ expected '%!s(int=4)', got '%!s(int=201)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpjt57yuj__test.go:51: expected '%!s(int=5)', got '%!s(int=81)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmpjt57yuj__test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074647
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    ans := 0\n    for _, n := range arr {\n        if n < 0 {\n\
    \            n = -n\n            ans += 1\n        }\n        ans += n%10\n  \
    \      n/=10\n    }\n    return ans\n}\n\nfunc TestCount_Nums(t *testing.T) {\n\
    \  candidate := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     {\
    \ actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual:\
    \ candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12,\
    \ 23, 34, -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpqd21amho_test.go:51: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpqd21amho_test.go:51:\
    \ expected '%!s(int=6)', got '%!s(int=19)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpqd21amho_test.go:51: expected '%!s(int=5)', got '%!s(int=29)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpqd21amho_test.go:51:\
    \ expected '%!s(int=4)', got '%!s(int=20)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpqd21amho_test.go:51: expected '%!s(int=5)', got '%!s(int=22)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074647
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    return count_nums(arr[1:])\
    \ + count_nums(arr[:1]) + arr[arr[0]%10]\n}\n\nfunc TestCount_Nums(t *testing.T)\
    \ {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     {\
    \ actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual:\
    \ candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12,\
    \ 23, 34, -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0390\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x520356?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.count_nums({0xc0401dfd58,\
    \ 0x0, 0x0})\n\t/tmp/tmpz885effh_test.go:18 +0xfa fp=0xc0201e03a0 sp=0xc0201e0398\
    \ pc=0x4ef75a\ncommand-line-arguments_test.count_nums({0xc0401dfd58, 0x1, 0x1})\n\
    \t/tmp/tmpz885effh_test.go:22 +0x5e fp=0xc0201e03d0 sp=0xc0201e03a0 pc=0x4ef6be\n\
    command-line-arguments_test.count_nums({0xc0401dfd58, 0x1, 0x1})\n\t/tmp/tmpz885effh_test.go:22\
    \ +0x77 fp=0xc0201e0400 sp=0xc0201e03d0 pc=0x4ef6d7\ncommand-line-arguments_test.count_nums({0xc0401dfd58,\
    \ 0x1, 0x1})\n\t/tmp/tmpz885effh_test.go:22 +0x77 fp=0xc0201e0430 sp=0xc0201e0400\
    \ pc=0x4ef6d7\ncommand-line-arguments_test.count_nums({0xc0401dfd58, 0x1, 0x1})\n\
    \t/tmp/tmpz885effh_test.go:22 +0x77 fp=0xc0201e0460 sp=0xc0201e0430 pc=0x4ef6d7\n\
    command-line-arguments_test.count_nums({0xc0401dfd58, 0x1, 0x1})\n\t/tmp/tmpz885effh_test.go:22\
    \ +0x77 fp=0xc0201e0490 sp=0xc0201e0460 pc=0x4ef6d7\ncommand-line-arguments_test.count_nums({0xc0401dfd58,\
    \ 0x1, 0x1})\n\t/tmp/tmpz885effh_test.go:22 +0x77 fp=0xc0201e04c0 sp=0xc0201e0490\
    \ pc=0x4ef6d7\ncommand-line-arguments_test.count_nums({0xc0401dfd58, 0x1, 0x1})\n\
    \t/tmp/tmpz885effh_test.go:22 +0x77 fp=0xc0201e04f0 sp=0xc0201e04c0 pc=0x4ef6d7\n\
    command-line-arguments_test.count_nums({0xc0401dfd58, 0x1, 0x1})\n\t/tmp/tmpz885effh_test.go:22\
    \ +0x77 fp=0xc0201e0520 sp=0xc0201e04f0 pc=0x4ef6d7\ncommand-line-arguments_test.count_nums({0xc0401dfd58,\
    \ 0x1, 0x1})\n\t/tmp/tmpz885effh_test.go:22 +0x77 fp=0xc0201e0550 sp=0xc0201e0520\
    \ pc=0x4ef6d7\ncommand-line-arguments_test.count_nums({0xc0401dfd58, 0x1, 0x1})\n\
    \t/tmp/tmpz885effh_test.go:22 +0x77 fp=0xc0201e0580 sp=0xc0201e0550 pc=0"
  timestamp: 1660074648
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    for _, v := range arr {\n        if v < 0 {\n            v\
    \ *= -1\n        }\n    }\n    return len(arr) - len(filterNums(arr))\n}\n\nfunc\
    \ TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -2, 0}), expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}),\
    \ expected: 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected:\
    \ 5 },\n     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n\
    \     { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n  \
    \   { actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbqz18mus_test.go:24:27: undefined: filterNums

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074647
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    return count_nums_impl(arr)\n}\n\nfunc TestCount_Nums(t *testing.T)\
    \ {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     {\
    \ actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual:\
    \ candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12,\
    \ 23, 34, -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz542mjyt_test.go:19:12: undefined: count_nums_impl

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074647
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    c := 0\n    sign := false\n    for _, v := range arr {\n \
    \       if v < 0 {\n            sign = true\n            v = -v\n        }\n \
    \       c += v\n    }\n    if sign {\n        return -1 * c\n    }\n    return\
    \ c\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual:\
    \ candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmp_vgkvppa_test.go:54: expected '%!s(int=0)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmp_vgkvppa_test.go:54:\
    \ expected '%!s(int=6)', got '%!s(int=-18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmp_vgkvppa_test.go:54: expected '%!s(int=5)', got '%!s(int=-28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmp_vgkvppa_test.go:54:\
    \ expected '%!s(int=4)', got '%!s(int=-208)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmp_vgkvppa_test.go:54: expected '%!s(int=5)', got '%!s(int=-170)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074647
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    acc := 0\n\
    \    for _, n := range arr {\n        acc += n\n        if acc > 10 {\n      \
    \      acc = 0\n        }\n    }\n    return acc\n}\n\nfunc TestCount_Nums(t *testing.T)\
    \ {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     {\
    \ actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual:\
    \ candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12,\
    \ 23, 34, -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpsoux0ge0_test.go:52: expected '%!s(int=0)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpsoux0ge0_test.go:52:\
    \ expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpsoux0ge0_test.go:52: expected '%!s(int=5)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpsoux0ge0_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=-7)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpsoux0ge0_test.go:52: expected '%!s(int=5)', got '%!s(int=-101)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074647
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    // code here\n    arrLen := len(arr)\n    if arrLen <= 0 {\n\
    \        return 0\n    }\n    var ret int\n    for i := 0; i < arrLen; i++ {\n\
    \        n := arr[i]\n        if n < 0 {\n            firstSignedDigit := (-n)\
    \ / 9\n            firstSignedDigit -= int(math.Floor(firstSignedDigit))\n   \
    \         n += firstSignedDigit * 9\n        }\n        ret += int(math.Pow(float64(n),\
    \ float64(arrLen-1)))\n    }\n    return ret\n}\n\nfunc TestCount_Nums(t *testing.T)\
    \ {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     {\
    \ actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual:\
    \ candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12,\
    \ 23, 34, -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7rpa66xm_test.go:29:37: undefined: math

    /tmp/tmp7rpa66xm_test.go:32:20: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074647
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    sum_digits := map[int]int{}\n    for _, num := range arr {\n\
    \        for digit := num / 10; digit > 0; digit-- {\n            sum_digits[digit]++\n\
    \        }\n    }\n    for k, v := range sum_digits {\n        if v > 0 {\n  \
    \          return k\n        }\n    }\n    return 0\n}\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmpzdvyi10b_test.go:52: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmpzdvyi10b_test.go:52:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmpzdvyi10b_test.go:52: expected '%!s(int=4)', got '%!s(int=10)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmpzdvyi10b_test.go:52:\
    \ expected '%!s(int=5)', got '%!s(int=1)'\n    --- FAIL: TestCount_Nums/test_num__6\
    \ (0.00s)\n        tmpzdvyi10b_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmpzdvyi10b_test.go:52:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074648
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, num := range arr {\n        count +=\
    \ count_nums_impl(num)\n    }\n    return count\n}\n\nfunc TestCount_Nums(t *testing.T)\
    \ {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     {\
    \ actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual:\
    \ candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12,\
    \ 23, 34, -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4kpkk7t0_test.go:21:18: undefined: count_nums_impl

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074647
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    result := 0\n    for _, n := range arr {\n        if n >=\
    \ 0 {\n            digitIndex := 1\n            sumDigits := 0\n            //\
    \ Get first digit in the number.\n            // If it is negative, add it to\
    \ the sumDigits variable.\n            firstDigit := int(n%10)\n            if\
    \ firstDigit >= 0 {\n                sumDigits += firstDigit\n            }\n\
    \            // Get the rest of the digits.\n            for digitIndex := 1;\
    \ digitIndex < 10; digitIndex++ {\n                nextDigit := int(n/10)\n  \
    \              if nextDigit > 0 {\n                    sumDigits += nextDigit\n\
    \                }\n                // Divide the number by 10 and get the next\
    \ digit.\n                n = int(n/10)\n            }\n            // Check to\
    \ see if the sum of digits are greater than 0.\n            if sumDigits > 0 {\n\
    \                result += sumDigits\n            }\n        } else {\n      \
    \      // If the number is negative, then get the first signed digit.\n      \
    \      // Note that this digit will be negative.\n            firstSignedDigit\
    \ := int(n%10)\n            n /= 10\n            // Add the sign to the result.\n\
    \            result += firstSignedDigit * 10 + n\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptocjw_y1_test.go:22:13: digitIndex declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074647
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    counts := make([]int, 0)\n    for _, num := range arr {\n\
    \        if num < 0 {\n            sum, temp := num, num\n            for _, c\
    \ := range string(temp) {\n                sum -= int(c) * 10\n            }\n\
    \            if sum > 0 {\n                counts = append(counts, sum)\n    \
    \        }\n        } else {\n            counts = append(counts, num)\n     \
    \   }\n    }\n    return len(counts)\n}\n\nfunc TestCount_Nums(t *testing.T) {\n\
    \  candidate := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     {\
    \ actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual:\
    \ candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12,\
    \ 23, 34, -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test

    /tmp/tmpcfuof6ac_test.go:23:31: conversion from int to string yields a string
    of one rune, not a string of digits (did you mean fmt.Sprint(x)?)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074648
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    var sum = 0\n    for _, num := range arr {\n        if num\
    \ > 0 {\n            sum += num\n        } else if num < 0 {\n            sum\
    \ += num%10\n            num = num/10\n        } else {\n            sum++\n \
    \       }\n    }\n    return sum\n}\n\nfunc TestCount_Nums(t *testing.T) {\n \
    \ candidate := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     {\
    \ actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual:\
    \ candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12,\
    \ 23, 34, -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpuc1aiwz6_test.go:53: expected '%!s(int=0)', got '%!s(int=-2)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpuc1aiwz6_test.go:53:\
    \ expected '%!s(int=6)', got '%!s(int=14)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpuc1aiwz6_test.go:53: expected '%!s(int=5)', got '%!s(int=17)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpuc1aiwz6_test.go:53:\
    \ expected '%!s(int=4)', got '%!s(int=192)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpuc1aiwz6_test.go:53: expected '%!s(int=5)', got '%!s(int=59)'\n\
    \    --- FAIL: TestCount_Nums/test_num__6 (0.00s)\n        tmpuc1aiwz6_test.go:53:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074648
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    m := map[int]int{}\n    for _, i := range arr {\n        if\
    \ i < 0 {\n            i *= -1\n        }\n        if _, ok := m[i]; ok {\n  \
    \          m[i] += 1 // multiple count\n        } else {\n            m[i] = 1\n\
    \        }\n    }\n    return len(m)\n}\n</code>\n<|/ a |>\n<| c |>\nWow, thanks\
    \ for this. I just looked at this and am thinking of ways to improve it, but this\
    \ is great and very readable.\n<|/ c |>\n<| c |>\nThanks. I think the problem\
    \ with your code is that it uses a map, which requires O(N) memory. I'm looking\
    \ for a solution using sets, which are O(N) memory.\n<|/ c |>\n<| c |>\nSets are\
    \ implemented as hashtables with `O(1)` lookup and insertion.  That should be\
    \ faster than the map solution.\n<|/ c |>\n<| c |>\nHm... I checked again, and\
    \ apparently you're wrong. The map solution is actually slower than the set solution\
    \ (which I thought was the case).\n<|/ c |>\n<| c |>\nMy test code: `timeit -s\
    \ -n 10000000 count_nums_map.py` `user  system elapsed \n`0.19` ``user  system\
    \ elapsed \n`0.00` `user  system elapsed \n`0.01` `user  system elapsed \n`0.00`\
    \ `user  system elapsed \n`0.00` `user  system elapsed \n`0.00` `user  system\
    \ elapsed \n`0.00` `user  system elapsed \n`0.01` `user  system elapsed \n`0.01`\
    \ `user  system elapsed \n`0.00` `user  system elapsed \n`0.00` `user  system\
    \ elapsed \n`0.00` `user  system elapsed \n`0.00` `user  system elapsed \n`0.00`\
    \ `user  system elapsed \n`0.00` `user  system elapsed \n`0.00` `user  system\
    \ elapsed \n`0.00` `user  system elapsed \n`0.00` `user  system elapsed \n`0.00`\
    \ `user  system elapsed \n`0.01` `user  system elapsed \n`0.00` `user  system\
    \ elapsed \n`0.00` `user  system elapsed \n`0.00` `user  system elapsed \n`0.00`\
    \ `user  system elapsed \n`0.00` `user  system elapsed \n`0.00` `user  system\
    \ elapsed \n`0.00` `user  system elapsed \n`0.00` `user  system elapsed \n`0.00`\
    \ `user  system elapsed \n`\nfunc TestCount_Nums(t *testing.T) {\n  candidate\
    \ := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual:\
    \ candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100,\
    \ 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34,\
    \ -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvjfk_i36_test.go:32:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074646
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    result := 0\n    for _, num := range arr {\n        result\
    \ += sum_digits(num)\n    }\n    return result\n}\n\nfunc TestCount_Nums(t *testing.T)\
    \ {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     {\
    \ actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual:\
    \ candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12,\
    \ 23, 34, -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjf7_6f9t_test.go:21:19: undefined: sum_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074647
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    // code here\n    x := 0\n    for _, v := range arr {\n  \
    \      if v > 0 {\n            x += v\n        }\n    }\n    return x\n}\n\nfunc\
    \ TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -2, 0}), expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}),\
    \ expected: 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected:\
    \ 5 },\n     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n\
    \     { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n  \
    \   { actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmp8pimjs9l_test.go:49: expected '%!s(int=6)', got '%!s(int=16)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmp8pimjs9l_test.go:49:\
    \ expected '%!s(int=5)', got '%!s(int=22)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmp8pimjs9l_test.go:49: expected '%!s(int=4)', got '%!s(int=200)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmp8pimjs9l_test.go:49:\
    \ expected '%!s(int=5)', got '%!s(int=69)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074648
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    // Initialize a sum that will hold the number of elements\
    \ with a sum\n    // of digits > 0.\n    sum := 0\n    \n    // Loop over all\
    \ elements in arr.\n    for _, v := range arr {\n        // If v is negative,\
    \ then\n        // the sign digit is negative - so add it to the sum.\n      \
    \  if v < 0 {\n            sum += v\n        } else {\n            // Otherwise,\
    \ sum the digits of the number v and add to sum.\n            sum += int(v % 10)\n\
    \            v = v / 10\n        }\n    }\n\n    return sum\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmp07s5mu8o_test.go:59: expected '%!s(int=0)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmp07s5mu8o_test.go:59:\
    \ expected '%!s(int=6)', got '%!s(int=14)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmp07s5mu8o_test.go:59: expected '%!s(int=5)', got '%!s(int=16)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmp07s5mu8o_test.go:59:\
    \ expected '%!s(int=4)', got '%!s(int=2)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmp07s5mu8o_test.go:59: expected '%!s(int=5)', got '%!s(int=-92)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074648
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    total := 0\n    for _, num := range arr {\n        if num\
    \ < 0 {\n            num = -num\n        }\n        if num > 0 {\n           \
    \ total += int(num / 10)\n        }\n    }\n    return total\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmpskcpag2__test.go:51: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmpskcpag2__test.go:51:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmpskcpag2__test.go:51: expected '%!s(int=4)', got '%!s(int=19)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmpskcpag2__test.go:51:\
    \ expected '%!s(int=5)', got '%!s(int=15)'\n    --- FAIL: TestCount_Nums/test_num__6\
    \ (0.00s)\n        tmpskcpag2__test.go:51: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmpskcpag2__test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074648
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    return count_nums_helper(arr, 0, 0)\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphff3ip0a_test.go:19:12: undefined: count_nums_helper

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074648
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for i, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        total := 0\n        for j, _ := range\
    \ strconv.Itoa(int(v)) {\n            total += int(j)\n        }\n        if total\
    \ == 0 {\n            continue\n        }\n        count += total\n    }\n   \
    \ return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpafq2_c3i_test.go:20:9: i declared but not used

    /tmp/tmpafq2_c3i_test.go:25:27: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074648
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n\n    result\
    \ := 0\n    for _, number := range arr {\n        if number > 0 {\n          \
    \  result += 1\n        }\n        result += count_nums(number*10)\n    }\n  \
    \  return result\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa8sm4xhe_test.go:28:30: cannot use number * 10 (value of type int) as
    type []int in argument to count_nums

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074648
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr)\
    \ == 1 {\n        if arr[0] < 0 {\n            return -1\n        }\n        return\
    \ 0\n    }\n    sum := 0\n    for _, v := range arr {\n        if v < 0 {\n  \
    \          v = -v\n        }\n        if v > 9 {\n            sum += 10 - v\n\
    \        } else {\n            sum += v\n        }\n    }\n    return sum\n}\n\
    \nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual:\
    \ candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpemc9azrg_test.go:62: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpemc9azrg_test.go:62:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpemc9azrg_test.go:62: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpemc9azrg_test.go:62:\
    \ expected '%!s(int=4)', got '%!s(int=-168)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpemc9azrg_test.go:62: expected '%!s(int=5)', got '%!s(int=-120)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmpemc9azrg_test.go:62:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074649
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n\n    var result\
    \ int\n    var sumOfDigits int\n    for _, val := range arr {\n        if val\
    \ < 0 {\n            val = -val\n            sumOfDigits += val / 10\n       \
    \     val = val % 10\n        }\n        sumOfDigits += val / 10\n        result\
    \ = 10*result + val % 10\n    }\n\n    return result - sumOfDigits\n}\n\nfunc\
    \ TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -2, 0}), expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}),\
    \ expected: 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected:\
    \ 5 },\n     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n\
    \     { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n  \
    \   { actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpyrk44coj_test.go:58: expected '%!s(int=0)', got '%!s(int=120)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpyrk44coj_test.go:58:\
    \ expected '%!s(int=6)', got '%!s(int=1122345)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpyrk44coj_test.go:58: expected '%!s(int=5)', got '%!s(int=1696015)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpyrk44coj_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=108692)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpyrk44coj_test.go:58: expected '%!s(int=5)', got '%!s(int=234545)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074649
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    n := len(arr)\n    if n == 0 {\n        return 0\n    }\n\
    \    // Initialize a variable to store the number of digits of the sum.\n    count\
    \ := 0\n    for i := 0; i < n; i++ {\n        // For each number, we add its digits\
    \ to count.\n        count += count_digits(arr[i])\n    }\n    return count\n\
    }\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual:\
    \ candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpeo6rwsf__test.go:27:18: undefined: count_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074650
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        count += int(v)\n    }\n    return\
    \ count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmp13zjoyhb_test.go:49: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmp13zjoyhb_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmp13zjoyhb_test.go:49: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmp13zjoyhb_test.go:49:\
    \ expected '%!s(int=4)', got '%!s(int=208)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmp13zjoyhb_test.go:49: expected '%!s(int=5)', got '%!s(int=170)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    // Initialize sum variable to 0.\n    var sum int = 0\n  \
    \  for _, i := range arr {\n        // If the number has a single digit then no\
    \ numbers will have sum digit\n        // greater than 0.\n        if i >= 0 {\n\
    \            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmphlgxy1py_test.go:51: expected '%!s(int=6)', got '%!s(int=16)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmphlgxy1py_test.go:51:\
    \ expected '%!s(int=5)', got '%!s(int=22)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmphlgxy1py_test.go:51: expected '%!s(int=4)', got '%!s(int=200)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmphlgxy1py_test.go:51:\
    \ expected '%!s(int=5)', got '%!s(int=69)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074651
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    result := 0\n    for _, item := range arr {\n        if item\
    \ < 0 {\n            item *= -1\n        }\n        digit := item / 10\n     \
    \   if digit > 0 {\n            result += digit + 1\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmp0g4ncf5d_test.go:52: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmp0g4ncf5d_test.go:52:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmp0g4ncf5d_test.go:52: expected '%!s(int=4)', got '%!s(int=21)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmp0g4ncf5d_test.go:52:\
    \ expected '%!s(int=5)', got '%!s(int=20)'\n    --- FAIL: TestCount_Nums/test_num__6\
    \ (0.00s)\n        tmp0g4ncf5d_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmp0g4ncf5d_test.go:52:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074651
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    result := 0\n    for _, v := range arr {\n        if v > 0\
    \ {\n            if v <= 9 {\n                result++\n            } else {\n\
    \                result += int(v / 10)\n                result -= int(v%10) *\
    \ 10\n            }\n        }\n    }\n    return result\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmpjpqn9f9j_test.go:53: expected '%!s(int=4)', got '%!s(int=-59)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmpjpqn9f9j_test.go:53:\
    \ expected '%!s(int=5)', got '%!s(int=-84)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074651
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    sum := 0\n    for _, v := range arr {\n        sum += v\n\
    \    }\n    return sum\n}\nfunc TestCount_Nums(t *testing.T) {\n  candidate :=\
    \ count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpjb4977pq_test.go:45: expected '%!s(int=0)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpjb4977pq_test.go:45:\
    \ expected '%!s(int=6)', got '%!s(int=14)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpjb4977pq_test.go:45: expected '%!s(int=5)', got '%!s(int=16)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpjb4977pq_test.go:45:\
    \ expected '%!s(int=4)', got '%!s(int=192)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpjb4977pq_test.go:45: expected '%!s(int=5)', got '%!s(int=-32)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074652
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    sum := 0\n    for _, v := range arr {\n        sum += v\n\
    \    }\n    return sum\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate\
    \ := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual:\
    \ candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100,\
    \ 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34,\
    \ -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpix1d5tkb_test.go:46: expected '%!s(int=0)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpix1d5tkb_test.go:46:\
    \ expected '%!s(int=6)', got '%!s(int=14)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpix1d5tkb_test.go:46: expected '%!s(int=5)', got '%!s(int=16)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpix1d5tkb_test.go:46:\
    \ expected '%!s(int=4)', got '%!s(int=192)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpix1d5tkb_test.go:46: expected '%!s(int=5)', got '%!s(int=-32)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    num := arr[0]\n\
    \    for _, n := range arr[1:] {\n        if num%10 != n%10 {\n            return\
    \ len(arr)\n        }\n        num /= 10\n    }\n    return len(arr)\n}\n\nfunc\
    \ TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -2, 0}), expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}),\
    \ expected: 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected:\
    \ 5 },\n     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n\
    \     { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n  \
    \   { actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpxrummtk8_test.go:52: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpxrummtk8_test.go:52:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpxrummtk8_test.go:52: expected '%!s(int=5)', got '%!s(int=7)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpxrummtk8_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=6)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpxrummtk8_test.go:52: expected '%!s(int=5)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCount_Nums/test_num__6 (0.00s)\n        tmpxrummtk8_test.go:52:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074652
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    // Initialize a variable to store the number of elements whose\
    \ sum is > 0.\n    // Initialize a variable 'ans' to store the number of elements\
    \ whose sum is > 0\n    var ans int\n\n    // Iterate over the elements in the\
    \ array\n    for _, x := range arr {\n        // Initialize a variable to store\
    \ a sum of digits in each of the digits\n        // Initialize a variable 'sum'\
    \ to store a sum of digits in each of the digits\n        var sum int\n\n    \
    \    // Iterate over the digits of a given number\n        for _, y := range strconv.Atoi(string(x))\
    \ {\n            sum += y\n        }\n\n        // Check if sum of digits in x\
    \ is > 0\n        if sum > 0 {\n            // If sum greater than 0, increment\
    \ the counter of elements with sum > 0\n            ans++\n        }\n    }\n\
    \    // Return number of elements with sum > 0\n    return ans\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjb1ikxya_test.go:30:27: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074651
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    k := 0\n    sum := 0\n    for _, v := range arr {\n      \
    \  sum += v\n        if sum > 0 {\n            k = k + 1\n            sum = 0\n\
    \        }\n    }\n    return k\n}\nfunc TestCount_Nums(t *testing.T) {\n  candidate\
    \ := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual:\
    \ candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100,\
    \ 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34,\
    \ -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmp6vg1c780_test.go:50: expected '%!s(int=5)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmp6vg1c780_test.go:50:\
    \ expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmp6vg1c780_test.go:50: expected '%!s(int=5)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074652
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    arr2 := make([]int, len(arr))\n    for i := 0; i < len(arr);\
    \ i++ {\n        arr2[i] = int(arr[i]/10)\n        arr2[i] %= 10\n    }\n    sum\
    \ := 0\n    for i := 0; i < len(arr2); i++ {\n        if arr2[i] > 0 {\n     \
    \       sum += arr2[i]\n        }\n    }\n    return sum\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmpuy5qtwtb_test.go:53: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmpuy5qtwtb_test.go:53:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmpuy5qtwtb_test.go:53: expected '%!s(int=4)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmpuy5qtwtb_test.go:53:\
    \ expected '%!s(int=5)', got '%!s(int=6)'\n    --- FAIL: TestCount_Nums/test_num__6\
    \ (0.00s)\n        tmpuy5qtwtb_test.go:53: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmpuy5qtwtb_test.go:53:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074652
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    if arr == nil {\n        return 0\n    }\n    return count_nums(arr[1:])\
    \ + count_nums(arr[:len(arr)-1]) + count_nums(arr[len(arr):])\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\npanic: runtime error: slice bounds out\
    \ of range [1:0] [recovered]\n\tpanic: runtime error: slice bounds out of range\
    \ [1:0]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.count_nums({0xc0000c44e8?, 0x4b3193?, 0x0?})\n\
    \t/tmp/tmpgbyq3818_test.go:22 +0xf1\ncommand-line-arguments_test.TestCount_Nums(0x0?)\n\
    \t/tmp/tmpgbyq3818_test.go:32 +0x4b\ntesting.tRunner(0xc0001a0340, 0x528f40)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074652
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    // Write code here\n    ret := 0\n    for _, num := range\
    \ arr {\n        if num > 0 {\n            digit, number := signDigit(num)\n \
    \           if digit > 0 {\n                ret += number\n            }\n   \
    \     }\n    }\n    return ret\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate\
    \ := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual:\
    \ candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100,\
    \ 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34,\
    \ -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpql0bqcd6_test.go:23:30: undefined: signDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074651
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    var ret int\n    for _, v := range arr {\n        v %= 10\n\
    \        ret = ret + v\n    }\n    if ret > 0 {\n        ret = 1\n    }\n    return\
    \ ret\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmphjglkl8x_test.go:50: expected '%!s(int=0)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmphjglkl8x_test.go:50:\
    \ expected '%!s(int=6)', got '%!s(int=1)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmphjglkl8x_test.go:50: expected '%!s(int=5)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmphjglkl8x_test.go:50:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmphjglkl8x_test.go:50: expected '%!s(int=5)', got '%!s(int=-2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074652
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    sum := 0\n    for _, num := range arr {\n        if num >\
    \ 0 {\n            sum += num\n        }\n    }\n    return sum\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmp_a8piynx_test.go:48: expected '%!s(int=6)', got '%!s(int=16)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmp_a8piynx_test.go:48:\
    \ expected '%!s(int=5)', got '%!s(int=22)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmp_a8piynx_test.go:48: expected '%!s(int=4)', got '%!s(int=200)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmp_a8piynx_test.go:48:\
    \ expected '%!s(int=5)', got '%!s(int=69)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074652
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    count :=\
    \ 0\n    for _, value := range arr {\n        count += count_nums([]int{value})\n\
    \    }\n    return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate\
    \ := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual:\
    \ candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100,\
    \ 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34,\
    \ -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160388\
    \ stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x520356?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 18 [running]:\nruntime.mallocgc(0x8?, 0x4fe600?, 0x1?)\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/runtime/malloc.go:909 +0x91d fp=0xc020160398\
    \ sp=0xc020160390 pc=0x40cf1d\nruntime.newobject(0x1000000000000?)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/malloc.go:1259\
    \ +0x27 fp=0xc0201603c0 sp=0xc020160398 pc=0x40d027\ncommand-line-arguments_test.count_nums({0xc00445a118,\
    \ 0x1, 0x40d027?})\n\t/tmp/tmpxruqbxmc_test.go:24 +0x65 fp=0xc020160400 sp=0xc0201603c0\
    \ pc=0x4ef6c5\ncommand-line-arguments_test.count_nums({0xc00445a110, 0x1, 0x40d027?})\n\
    \t/tmp/tmpxruqbxmc_test.go:24 +0x7a fp=0xc020160440 sp=0xc020160400 pc=0x4ef6da\n\
    command-line-arguments_test.count_nums({0xc00445a108, 0x1, 0x40d027?})\n\t/tmp/tmpxruqbxmc_test.go:24\
    \ +0x7a fp=0xc020160480 sp=0xc020160440 pc=0x4ef6da\ncommand-line-arguments_test.count_nums({0xc00445a100,\
    \ 0x1, 0x40d027?})\n\t/tmp/tmpxruqbxmc_test.go:24 +0x7a fp=0xc0201604c0 sp=0xc020160480\
    \ pc=0x4ef6da\ncommand-line-arguments_test.count_nums({0xc00445a0f8, 0x1, 0x40d027?})\n\
    \t/tmp/tmpxruqbxmc_test.go:24 +0x7a fp=0xc020160500 sp=0xc0201604c0 pc=0x4ef6da\n\
    command-line-arguments_test.count_nums({0xc00445a0f0, 0x1, 0x40d027?})\n\t/tmp/tmpxruqbxmc_test.go:24\
    \ +0x7a fp=0xc020160540 sp=0xc020160500 pc=0x4ef6da\ncommand-line-arguments_test.count_nums({0xc00445a0e8,\
    \ 0x1, 0x40d027?})\n\t/tmp/tmpxruqbxmc_test.go:24 +0x7a fp=0xc020160580 sp=0xc020160540\
    \ pc=0x4ef6da\ncommand-line-arguments_test.count_nums({0xc00445a0e0, 0x1, 0x40d027?})\n\
    \t/tmp/tmpxruqbxmc_test.go:24 +0x7a fp=0xc0201605c0 sp=0xc020160580 pc=0x4ef6da\n\
    command-line-arguments_test.count_nums({0xc00445a0d8, 0x1, 0x40d027?}"
  timestamp: 1660074653
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    sumDigits := make(map[int]int, len(arr))\n    for _, n :=\
    \ range arr {\n        n := abs(n)\n        digit := n/10\n        sumDigits[digit]++\n\
    \    }\n    return sumDigits[len(sumDigits)-1]\n}\n\nfunc TestCount_Nums(t *testing.T)\
    \ {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     {\
    \ actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual:\
    \ candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12,\
    \ 23, 34, -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqgqsuxux_test.go:21:14: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074652
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n            count += int(math.Abs(v) > 10)\n        }\
    \ else {\n            count += int(v > 0)\n        }\n    }\n    return count\n\
    }\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual:\
    \ candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp80lhc_4w_test.go:23:26: undefined: math

    /tmp/tmp80lhc_4w_test.go:25:26: cannot convert v > 0 (untyped bool value) to type
    int

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074652
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    n := len(arr)\n    if n == 0 {\n        return 0\n    }\n\n\
    \    arr0 := arr[0]\n    if arr0 < 0 {\n        arr0 = -arr0\n    }\n    arr1\
    \ := arr[1]\n    if arr1 < 0 {\n        arr1 = -arr1\n    }\n    arr2 := arr[2]\n\
    \    if arr2 < 0 {\n        arr2 = -arr2\n    }\n\n    result := 0\n    arr2 +=\
    \ arr2\n    if arr2 > 9 {\n        arr2 -= 10\n        result++\n    }\n\n   \
    \ result += (arr0 - arr1) * (arr0 - arr1) + arr2\n    return result\n}\n\nfunc\
    \ TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -2, 0}), expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}),\
    \ expected: 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected:\
    \ 5 },\n     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n\
    \     { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n  \
    \   { actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\npanic: runtime error: index out of range\
    \ [2] with length 2 [recovered]\n\tpanic: runtime error: index out of range [2]\
    \ with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.count_nums({0xc0000c4538?, 0x4b3193?, 0x0?})\n\
    \t/tmp/tmpnrfao6wl_test.go:32 +0xa5\ncommand-line-arguments_test.TestCount_Nums(0x0?)\n\
    \t/tmp/tmpnrfao6wl_test.go:61 +0x318\ntesting.tRunner(0xc0001964e0, 0x528f40)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074652
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    sumOfDigits := 0\n    for _, val := range arr {\n        sumOfDigits\
    \ += val\n    }\n    return sumOfDigits > 0\n}\n\nfunc TestCount_Nums(t *testing.T)\
    \ {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     {\
    \ actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual:\
    \ candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12,\
    \ 23, 34, -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_4mb1oxu_test.go:23:12: cannot use sumOfDigits > 0 (untyped bool value)
    as int value in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074652
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    n := 0\n    for _, v := range arr {\n        if v < 0 {\n\
    \            n += count_nums([]int{-v})\n        } else {\n            n += count_nums([]int{v})\n\
    \        }\n    }\n    return n\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate\
    \ := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual:\
    \ candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100,\
    \ 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34,\
    \ -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0388\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x520356?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\nruntime.mallocgc(0x8?, 0x4fe600?, 0x1?)\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/runtime/malloc.go:909 +0x91d fp=0xc0201e0398\
    \ sp=0xc0201e0390 pc=0x40cf1d\nruntime.newobject(0x1000000000000?)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/malloc.go:1259\
    \ +0x27 fp=0xc0201e03c0 sp=0xc0201e0398 pc=0x40d027\ncommand-line-arguments_test.count_nums({0xc004318108,\
    \ 0x1, 0x40d027?})\n\t/tmp/tmptjqg7b76_test.go:24 +0x9b fp=0xc0201e0400 sp=0xc0201e03c0\
    \ pc=0x4ef6fb\ncommand-line-arguments_test.count_nums({0xc004318100, 0x1, 0x40d027?})\n\
    \t/tmp/tmptjqg7b76_test.go:24 +0xb0 fp=0xc0201e0440 sp=0xc0201e0400 pc=0x4ef710\n\
    command-line-arguments_test.count_nums({0xc0043180f8, 0x1, 0x40d027?})\n\t/tmp/tmptjqg7b76_test.go:24\
    \ +0xb0 fp=0xc0201e0480 sp=0xc0201e0440 pc=0x4ef710\ncommand-line-arguments_test.count_nums({0xc0043180f0,\
    \ 0x1, 0x40d027?})\n\t/tmp/tmptjqg7b76_test.go:24 +0xb0 fp=0xc0201e04c0 sp=0xc0201e0480\
    \ pc=0x4ef710\ncommand-line-arguments_test.count_nums({0xc0043180e8, 0x1, 0x40d027?})\n\
    \t/tmp/tmptjqg7b76_test.go:24 +0xb0 fp=0xc0201e0500 sp=0xc0201e04c0 pc=0x4ef710\n\
    command-line-arguments_test.count_nums({0xc0043180e0, 0x1, 0x40d027?})\n\t/tmp/tmptjqg7b76_test.go:24\
    \ +0xb0 fp=0xc0201e0540 sp=0xc0201e0500 pc=0x4ef710\ncommand-line-arguments_test.count_nums({0xc0043180d8,\
    \ 0x1, 0x40d027?})\n\t/tmp/tmptjqg7b76_test.go:24 +0xb0 fp=0xc0201e0580 sp=0xc0201e0540\
    \ pc=0x4ef710\ncommand-line-arguments_test.count_nums({0xc0043180d0, 0x1, 0x40d027?})\n\
    \t/tmp/tmptjqg7b76_test.go:24 +0xb0 fp=0xc0201e05c0 sp=0xc0201e0580 pc=0x4ef710\n\
    command-line-arguments_test.count_nums({0xc0043180c8, 0x1, 0x40d027?})"
  timestamp: 1660074654
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    var result int\n    for _, nums := range arr {\n        result\
    \ += count_nums_inner(nums)\n    }\n    return result\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr7157fcz_test.go:21:19: undefined: count_nums_inner

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074652
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    switch len(arr) {\n    case 0:\n        return\
    \ 0\n    case 1:\n        if arr[0] < 0 {\n            arr[0] *= -1\n        \
    \    count++\n        }\n    case 2:\n        if arr[0]+arr[1] > 0 {\n       \
    \     count++\n        }\n    case 3:\n        if arr[0]+arr[1]+arr[2] > 0 {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmp3ghn79xh_test.go:60: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmp3ghn79xh_test.go:60:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmp3ghn79xh_test.go:60: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmp3ghn79xh_test.go:60:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__7\
    \ (0.00s)\n        tmp3ghn79xh_test.go:60: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074652
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, numInArr := range arr {\n        if\
    \ numInArr >= 0 {\n            count += count_nums([]int{numInArr})\n        }\n\
    \    }\n    return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate\
    \ := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual:\
    \ candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100,\
    \ 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34,\
    \ -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0388\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x520356?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\nruntime.mallocgc(0x8?, 0x4fe600?, 0x1?)\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/runtime/malloc.go:909 +0x91d fp=0xc0201e0398\
    \ sp=0xc0201e0390 pc=0x40cf1d\nruntime.newobject(0x1000000000000?)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/malloc.go:1259\
    \ +0x27 fp=0xc0201e03c0 sp=0xc0201e0398 pc=0x40d027\ncommand-line-arguments_test.count_nums({0xc00435c110,\
    \ 0x1, 0x40d027?})\n\t/tmp/tmpb27pvsxf_test.go:22 +0x54 fp=0xc0201e0400 sp=0xc0201e03c0\
    \ pc=0x4ef6b4\ncommand-line-arguments_test.count_nums({0xc00435c108, 0x1, 0x40d027?})\n\
    \t/tmp/tmpb27pvsxf_test.go:22 +0x69 fp=0xc0201e0440 sp=0xc0201e0400 pc=0x4ef6c9\n\
    command-line-arguments_test.count_nums({0xc00435c100, 0x1, 0x40d027?})\n\t/tmp/tmpb27pvsxf_test.go:22\
    \ +0x69 fp=0xc0201e0480 sp=0xc0201e0440 pc=0x4ef6c9\ncommand-line-arguments_test.count_nums({0xc00435c0f8,\
    \ 0x1, 0x40d027?})\n\t/tmp/tmpb27pvsxf_test.go:22 +0x69 fp=0xc0201e04c0 sp=0xc0201e0480\
    \ pc=0x4ef6c9\ncommand-line-arguments_test.count_nums({0xc00435c0f0, 0x1, 0x40d027?})\n\
    \t/tmp/tmpb27pvsxf_test.go:22 +0x69 fp=0xc0201e0500 sp=0xc0201e04c0 pc=0x4ef6c9\n\
    command-line-arguments_test.count_nums({0xc00435c0e8, 0x1, 0x40d027?})\n\t/tmp/tmpb27pvsxf_test.go:22\
    \ +0x69 fp=0xc0201e0540 sp=0xc0201e0500 pc=0x4ef6c9\ncommand-line-arguments_test.count_nums({0xc00435c0e0,\
    \ 0x1, 0x40d027?})\n\t/tmp/tmpb27pvsxf_test.go:22 +0x69 fp=0xc0201e0580 sp=0xc0201e0540\
    \ pc=0x4ef6c9\ncommand-line-arguments_test.count_nums({0xc00435c0d8, 0x1, 0x40d027?})\n\
    \t/tmp/tmpb27pvsxf_test.go:22 +0x69 fp=0xc0201e05c0 sp=0xc0201e0580 pc=0x4ef6c9\n\
    command-line-arguments_test.count_nums({0xc00435c0d0, 0x1, 0x40d027?})"
  timestamp: 1660074654
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    if arr == nil {\n        return 0\n    }\n    for _, v :=\
    \ range arr {\n        if v < 0 {\n            v /= 10\n        }\n        if\
    \ v == 0 {\n            continue // ignore leading zeroes\n        }\n       \
    \ for i := 0; i < 9; i++ {\n            if int(v)+i < 0 {\n                break\
    \ // ignore digits that are already zero\n            }\n            if int(v)+i\
    \ > 9 {\n                continue // ignore numbers with more than 9 digits\n\
    \            }\n            if int(v)+i == int(arr[0]) {\n                break\n\
    \            }\n        }\n        return v\n    }\n    return 0\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmpmeeiks3m_test.go:65: expected '%!s(int=6)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmpmeeiks3m_test.go:65:\
    \ expected '%!s(int=5)', got '%!s(int=1)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmpmeeiks3m_test.go:65: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmpmeeiks3m_test.go:65:\
    \ expected '%!s(int=5)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074653
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, n := range arr {\n        count +=\
    \ count_nums_test(n)\n    }\n    return count\n}\n\nfunc TestCount_Nums(t *testing.T)\
    \ {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     {\
    \ actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual:\
    \ candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12,\
    \ 23, 34, -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp00zl0bak_test.go:21:18: undefined: count_nums_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074653
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    return len(arr) - count_nums_(arr)\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwys0es2x_test.go:19:23: undefined: count_nums_

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074653
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    sum_digits := 0\n    for _, num := range arr {\n        if\
    \ num < 0 {\n            sum_digits -= num%10\n            num /= 10\n       \
    \ } else {\n            sum_digits += num%10\n            num /= 10\n        }\n\
    \    }\n    return sum_digits\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate\
    \ := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual:\
    \ candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100,\
    \ 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34,\
    \ -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpjr7dwgd8_test.go:52: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpjr7dwgd8_test.go:52:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpjr7dwgd8_test.go:52: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpjr7dwgd8_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpjr7dwgd8_test.go:52: expected '%!s(int=5)', got '%!s(int=20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074653
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    return 0\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate\
    \ := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual:\
    \ candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100,\
    \ 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34,\
    \ -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmpnc75qh2b_test.go:42: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmpnc75qh2b_test.go:42:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmpnc75qh2b_test.go:42: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmpnc75qh2b_test.go:42:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__6\
    \ (0.00s)\n        tmpnc75qh2b_test.go:42: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Nums/test_num__7 (0.00s)\n        tmpnc75qh2b_test.go:42:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074420
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    var total int\n    for _, value := range arr {\n        if\
    \ value != 0 {\n            total += count_nums([]int{value})\n        }\n   \
    \ }\n    return total\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate :=\
    \ count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0388\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x520356?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\nruntime.mallocgc(0x8?, 0x4fe600?, 0x1?)\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/runtime/malloc.go:909 +0x91d fp=0xc0201e0398\
    \ sp=0xc0201e0390 pc=0x40cf1d\nruntime.newobject(0x1000000000000?)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/malloc.go:1259\
    \ +0x27 fp=0xc0201e03c0 sp=0xc0201e0398 pc=0x40d027\ncommand-line-arguments_test.count_nums({0xc004304110,\
    \ 0x1, 0x40d027?})\n\t/tmp/tmpl1z230fi_test.go:22 +0x54 fp=0xc0201e0400 sp=0xc0201e03c0\
    \ pc=0x4ef6b4\ncommand-line-arguments_test.count_nums({0xc004304108, 0x1, 0x40d027?})\n\
    \t/tmp/tmpl1z230fi_test.go:22 +0x69 fp=0xc0201e0440 sp=0xc0201e0400 pc=0x4ef6c9\n\
    command-line-arguments_test.count_nums({0xc004304100, 0x1, 0x40d027?})\n\t/tmp/tmpl1z230fi_test.go:22\
    \ +0x69 fp=0xc0201e0480 sp=0xc0201e0440 pc=0x4ef6c9\ncommand-line-arguments_test.count_nums({0xc0043040f8,\
    \ 0x1, 0x40d027?})\n\t/tmp/tmpl1z230fi_test.go:22 +0x69 fp=0xc0201e04c0 sp=0xc0201e0480\
    \ pc=0x4ef6c9\ncommand-line-arguments_test.count_nums({0xc0043040f0, 0x1, 0x40d027?})\n\
    \t/tmp/tmpl1z230fi_test.go:22 +0x69 fp=0xc0201e0500 sp=0xc0201e04c0 pc=0x4ef6c9\n\
    command-line-arguments_test.count_nums({0xc0043040e8, 0x1, 0x40d027?})\n\t/tmp/tmpl1z230fi_test.go:22\
    \ +0x69 fp=0xc0201e0540 sp=0xc0201e0500 pc=0x4ef6c9\ncommand-line-arguments_test.count_nums({0xc0043040e0,\
    \ 0x1, 0x40d027?})\n\t/tmp/tmpl1z230fi_test.go:22 +0x69 fp=0xc0201e0580 sp=0xc0201e0540\
    \ pc=0x4ef6c9\ncommand-line-arguments_test.count_nums({0xc0043040d8, 0x1, 0x40d027?})\n\
    \t/tmp/tmpl1z230fi_test.go:22 +0x69 fp=0xc0201e05c0 sp=0xc0201e0580 pc=0x4ef6c9\n\
    command-line-arguments_test.count_nums({0xc0043040d0, 0x1, 0x40d027?})"
  timestamp: 1660074655
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    if arr == nil {\n        return 0\n    }\n    acc := 0\n \
    \   for _, elem := range arr {\n        if elem < 0 {\n            sign, pos :=\
    \ elem%10, elem/10\n            acc += sign * count_nums([]int{sign * pos})\n\
    \        } else {\n            acc += elem\n        }\n    }\n    return acc\n\
    }\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual:\
    \ candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__2\
    \ (0.00s)\n        tmpljyi3_83_test.go:54: expected '%!s(int=6)', got '%!s(int=16)'\n\
    \    --- FAIL: TestCount_Nums/test_num__3 (0.00s)\n        tmpljyi3_83_test.go:54:\
    \ expected '%!s(int=5)', got '%!s(int=22)'\n    --- FAIL: TestCount_Nums/test_num__4\
    \ (0.00s)\n        tmpljyi3_83_test.go:54: expected '%!s(int=4)', got '%!s(int=200)'\n\
    \    --- FAIL: TestCount_Nums/test_num__5 (0.00s)\n        tmpljyi3_83_test.go:54:\
    \ expected '%!s(int=5)', got '%!s(int=-211)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074653
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    for _, v := range arr {\n        if v < 0 {\n            switch\
    \ {\n            case v < -13:\n                return -1\n            case v\
    \ == -13:\n                return 1\n            default:\n                continue\n\
    \            }\n        } else {\n            switch {\n            case v < -22:\n\
    \                return -1\n            case v == -22:\n                return\
    \ 1\n            case v < -23:\n                return -1\n            case v\
    \ == -23:\n                return 2\n            case v < -24:\n             \
    \   return -1\n            case v == -24:\n                return 3\n        \
    \    case v < -25:\n                return -1\n            case v == -25:\n  \
    \              return 4\n            case v < -26:\n                return -1\n\
    \            case v == -26:\n                return 5\n            case v < -27:\n\
    \                return -1\n            case v == -27:\n                return\
    \ 6\n            case v < -28:\n                return -1\n            case v\
    \ == -28:\n                return 7\n            case v < -29:\n             \
    \   return -1\n            case v == -29:\n                return 8\n        \
    \    case v < -30:\n                return -1\n            case v == -30:\n  \
    \              return 9\n            case v < -31:\n                return -1\n\
    \            case v == -31:\n                return 10\n            case v < -32:\n\
    \                return -1\n            case v == -32:\n                return\
    \ 11\n            case v < -33:\n                return -1\n            case v\
    \ == -33:\n                return 12\n            case v < -34:\n            \
    \    return -1\n            case v == -34:\n                return 13\n      \
    \      case v < -35:\n                return -1\n            case v == -35:\n\
    \                return 14\n            case v < -36:\n                return\
    \ -1\n            case v == -36:\n                return 15\n            case\
    \ v < -37:\n                return -1\n            case v == -37:\n          \
    \      return 16\n            case v < -38:\n                return -1\n     \
    \       case v == -38:\n                return 17\n            case v < -39:\n\
    \                return -1\n            case v == -39:\n                return\
    \ 18\n            case v < -40:\n                return -1\n            case v\
    \ == -40:\n                return 19\n            case v < -41:\n            \
    \    return -1\n            case v == -41:\n                return 20\n      \
    \      case v < -42:\n                return -1\n            case v == -42:\n\
    \                return 21\n            case v < -43:\n                return\
    \ -1\n            case v == -43:\n                return 22\n            case\
    \ v < -44:\n                return -1\n            case v == -44:\n          \
    \      return 23\n            case v < -45:\n                return -1\n     \
    \       case v == -45:\n                return \nfunc TestCount_Nums(t *testing.T)\
    \ {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     {\
    \ actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual:\
    \ candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12,\
    \ 23, 34, -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5unfxqkd_test.go:127:6: expected ''('', found TestCount_Nums

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074653
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    // Write code here\n    n := 0\n    r := int64(0)\n    for\
    \ _, v := range arr {\n        r = r * 10 + v\n        if r >= 0 {\n         \
    \   n++\n        }\n    }\n    return n\n}\n\nfunc TestCount_Nums(t *testing.T)\
    \ {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     {\
    \ actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual:\
    \ candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12,\
    \ 23, 34, -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8x42ml0g_test.go:23:13: invalid operation: r * 10 + v (mismatched types
    int64 and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074653
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    // code here\n    result := 0\n    for _, i := range arr {\n\
    \        result += len(nums(i))\n    }\n    return result\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp36oc_ryo_test.go:22:23: undefined: nums

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074653
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    result := 0\n    for _, x := range arr {\n        result +=\
    \ x / 10\n        if x > 0 {\n            result += (x % 10) / 2\n        }\n\
    \    }\n    return result\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate\
    \ := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual:\
    \ candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100,\
    \ 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34,\
    \ -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpcki_9_f0_test.go:49: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpcki_9_f0_test.go:49:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpcki_9_f0_test.go:49: expected '%!s(int=5)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Nums/test_num__6 (0.00s)\n        tmpcki_9_f0_test.go:49:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestCount_Nums/test_num__7\
    \ (0.00s)\n        tmpcki_9_f0_test.go:49: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074653
