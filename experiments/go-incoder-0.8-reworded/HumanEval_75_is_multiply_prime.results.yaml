language: go_test.go
name: HumanEval_75_is_multiply_prime
results:
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    if a > 100 {\n        return false\n\
    \    }\n    \n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n        \
    \    return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0\
    \ (0.00s)\n        tmpc_jzscyt_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmpc_jzscyt_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2\
    \ (0.00s)\n        tmpc_jzscyt_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmpc_jzscyt_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5\
    \ (0.00s)\n        tmpc_jzscyt_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmpc_jzscyt_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 2
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    sum := 0\n    for i := 2; i <= a; i++\
    \ {\n        if (a%i == 0) && is_prime(i) {\n            sum += i\n        }\n\
    \    }\n    if sum == 3 {\n        return true\n    }\n    return false\n}\n\n\
    func TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphm5gu00m_test.go:18:26: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    // Write your code here\n    if a <\
    \ 2 {\n        return true\n    }\n    if a > 100 {\n        return false\n  \
    \  }\n    for i := 2; i < a; i++ {\n        if i*i == a{\n            return false\n\
    \        }\n        if a == i*(i + 1) {\n            return true\n        }\n\
    \    }\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__2\
    \ (0.00s)\n        tmpqtybkc9f_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmpqtybkc9f_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5\
    \ (0.00s)\n        tmpqtybkc9f_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmpqtybkc9f_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 2
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    if a < 100 {\n        return false\n\
    \    }\n    \n    divisor_is_prime := true\n    \n    for divisor := 3; divisor\
    \ <= a; divisor++ {\n        if isPrime(divisor) == false {\n            divisor_is_prime\
    \ = false\n        }\n    }\n    \n    if divisor_is_prime == true {\n       \
    \ return true\n    }\n    \n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7r1cumb8_test.go:23:12: undefined: isPrime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    a /= 2\n    for i:= 3; i < a; i++ {\n\
    \        if (a%i==0) {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0\
    \ (0.00s)\n        tmp2v0u8uff_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp2v0u8uff_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__3\
    \ (0.00s)\n        tmp2v0u8uff_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp2v0u8uff_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5\
    \ (0.00s)\n        tmp2v0u8uff_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp2v0u8uff_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    sum := 0\n    for i := 2; i < a; i++\
    \ {\n        if a % i == 0 {\n            sum += i\n        }\n    }\n    switch\
    \ {\n        case sum == 2 || sum == 3 || sum == 5:\n            return true\n\
    \        case sum == a:\n            return false\n    }\n    return false\n}\n\
    \nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpl3qvpqxu_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpl3qvpqxu_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpl3qvpqxu_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpl3qvpqxu_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpl3qvpqxu_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    return a%3 == 0\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__2\
    \ (0.00s)\n        tmps3c48_kz_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmps3c48_kz_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__6\
    \ (0.00s)\n        tmps3c48_kz_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__7 (0.00s)\n        tmps3c48_kz_test.go:41:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__8\
    \ (0.00s)\n        tmps3c48_kz_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmps3c48_kz_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    for i := 2; i < 100; i++ {\n       \
    \ if (a%i == 0) {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmp7ez9s2m__test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7ez9s2m__test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmp7ez9s2m__test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7ez9s2m__test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmp7ez9s2m__test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    if a < 100 {\n        return false\n\
    \    }\n    \n    for i := 2; i < a; i++ {\n        for j := i * i; j < a; j +=\
    \ i {\n            if j%a != 0 {\n                return false\n            }\n\
    \        }\n    }\n    \n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T)\
    \ {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: false },\n     { actual: candidate(30), expected: true },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105),\
    \ expected: true },\n     { actual: candidate(126), expected: false },\n     {\
    \ actual: candidate(729), expected: false },\n     { actual: candidate(891), expected:\
    \ false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpka4h24op_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpka4h24op_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpka4h24op_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpka4h24op_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpka4h24op_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    if a%2 == 0 {\n        return false\n\
    \    }\n    for i := 3; i <= 100; i+=2 {\n        if i*a == a {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmp9bf8p0zz_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp9bf8p0zz_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmp9bf8p0zz_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp9bf8p0zz_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmp9bf8p0zz_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    b := a\n    if a < 3 {\n        return\
    \ false\n    }\n    for i := 3; i <= b; i++ {\n        if b%i == 0 {\n       \
    \     return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpg758dw3x_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpg758dw3x_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpg758dw3x_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpg758dw3x_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpg758dw3x_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    if a < 100 {\n        return false\n\
    \    }\n    i := 1\n    for i <= a && is_multiply_prime(i) {\n        i++\n  \
    \  }\n    return i%a == 0\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n \
    \ candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: false },\n     { actual: candidate(30), expected: true },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105),\
    \ expected: true },\n     { actual: candidate(126), expected: false },\n     {\
    \ actual: candidate(729), expected: false },\n     { actual: candidate(891), expected:\
    \ false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpexgfhyvv_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpexgfhyvv_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpexgfhyvv_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpexgfhyvv_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpexgfhyvv_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 2
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    \n    var result = false\n    var a\
    \ int = a\n\n    // First step calculates all prime numbers less than a by dividing\
    \ by a and checks if remainder is 0, if so its prime number\n    for a != 1 {\n\
    \        if a % 2 == 0 {\n            for i = 2; i < a; i++ {\n              \
    \  if a % i == 0 {\n                    result = false\n                    break\n\
    \                }\n            }\n        } else { \n            for i = 2; i\
    \ < a; i++ {\n                if a % i != 0 {\n                    result = false\n\
    \                    break\n                }\n            }\n        }\n    \
    \    a++\n    }\n\n    // Second step checks if a is a multiplication of 3 prime\
    \ numbers and returns true or false\n    if result == true {\n        for i =\
    \ 2; i < a; i++ {\n            if a % i == 0 {\n                result = false\n\
    \                break\n            }\n        }\n    }\n\n    return result\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphp0ed1gj_test.go:18:9:\
    \ a redeclared in this block\n\t/tmp/tmphp0ed1gj_test.go:15:24: other declaration\
    \ of a\n/tmp/tmphp0ed1gj_test.go:23:17: undefined: i\n/tmp/tmphp0ed1gj_test.go:24:24:\
    \ undefined: i\n/tmp/tmphp0ed1gj_test.go:30:17: undefined: i\n/tmp/tmphp0ed1gj_test.go:31:24:\
    \ undefined: i\n/tmp/tmphp0ed1gj_test.go:42:13: undefined: i\n/tmp/tmphp0ed1gj_test.go:43:20:\
    \ undefined: i\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    return a < 100 && a >= 3\n}\n\nfunc\
    \ TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0\
    \ (0.00s)\n        tmpvlw3ziir_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__3 (0.00s)\n        tmpvlw3ziir_test.go:41:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpvlw3ziir_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpvlw3ziir_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpvlw3ziir_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    if a%3 != 0 {\n        return false\n\
    \    }\n    var prime [3]int\n    prime[1] = 2\n    prime[2] = 2\n    for i :=\
    \ 3; i <= 100; i++ {\n        for j := 1; j < i; j++ {\n            if a%i ==\
    \ 0 {\n                if prime[j] <= i {\n                    prime[j] += i\n\
    \                }\n                return true\n            }\n        }\n  \
    \  }\n    return false\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\nHere\
    \ is a simple recursive solution.\n<code>\nvar isMultiplyPrime = func(n int) bool\
    \ {\n    if n < 4 {\n        return true\n    }\n    primes := []int{2, 3, 5,\
    \ 7}\n    for _, p := range primes {\n        if n == p*p && isMultiplyPrime(p*p-1)\
    \ {\n            return true\n        }\n    }\n    return false\n}\n</code>\n\
    <|/ a tags=math,primes,go |>\n<| c |>\nThe complexity here is O(log(N)) instead\
    \ of O(N) where N is the number to test, because of the nested loop.\n<|/ c |>\n\
    <| c |>\nYeah I did notice that, but it's still O(N) because of the nested loop.\n\
    <|/ c |>\n<| c |>\nIn theory it should be O(N) but I'm sure that my testing program\
    \ is wrong. I've used this algorithm in a program for a contest and got stuck\
    \ on a number that is a multiple of 5 but not a multiple of 7 or a multiple of\
    \ 3. It returned false in O(N).\n<|/ c |>\n<| c |>\n`for _, p := range primes`\
    \ loops over prime numbers. `p*p-1` loops over all possible factors of a number.\
    \ But `p*p-1` can never be smaller than 4, so you know it will never be larger\
    \ than a prime number, so that's why I added that check.\n<|/ c |>\n<| c |>\n\
    I see. I didn't realize that my program wasn't testing every possibility. Thanks!\n\
    <|/ c |>\n<| a dscore=0 |>\nHere is a simple method using Sieve of Eratosthenes\n\
    <code>\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbn1yy2mc_test.go:34:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073821
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    if a > 100 {\n        fmt.Println(\"\
    a must be less than 100\")\n        return false\n    }\n    \n    for i := 3;\
    \ i < a; i++ {\n        if a % i == 0 {\n            for j := i + i; j < a; j\
    \ += i {\n                if a % j == 0 {\n                    return true\n \
    \               }\n            }\n        }\n    }\n    return false\n}\n\nfunc\
    \ TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "a must be less than 100\na must be less than 100\na must be less than 100\n\
    a must be less than 100\na must be less than 100\na must be less than 100\n---\
    \ FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__2\
    \ (0.00s)\n        tmpofa0xqxm_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmpofa0xqxm_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5\
    \ (0.00s)\n        tmpofa0xqxm_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmpofa0xqxm_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    c := 0\n    d := 0\n    e := 0\n   \
    \ f := 0\n    g1 := 0\n    g2 := 0\n    g3 := 0\n\n    for i := 2; i < a; i++\
    \ {\n        c = 1\n        d = 0\n        e = 0\n        f = 0\n        g1 =\
    \ 0\n        g2 = 0\n        g3 = 0\n        for j := 1; j < i; j++ {\n      \
    \      d = d + 2\n            if (i%j == 0) || (j%i == 0) {\n                c\
    \ = c * 2\n            }\n            if ((j%i) == 0) {\n                e = e\
    \ + 1\n            }\n            if ((i%j) == 0) {\n                f = f + 1\n\
    \            }\n            if ((i%j) == (j%i)) {\n                g1 = g1 + 1\n\
    \            }\n            if ((i%j) == (j%(i + 1))) {\n                g2 =\
    \ g2 + 1\n            }\n            if ((i%j) == (j%(i + 2))) {\n           \
    \     g3 = g3 + 1\n            }\n        }\n        if (c == 1) {\n         \
    \   if ((a == i + 1) || (a == i + 2)) {\n                d = d + 1\n         \
    \   }\n            if ((a == i + 3) || (a == i + 4)) {\n                e = e\
    \ + 1\n            }\n            if ((a == i + 5) || (a == i + 6)) {\n      \
    \          f = f + 1\n            }\n            if ((a == i + 7) || (a == i +\
    \ 8)) {\n                g1 = g1 + 1\n            }\n            if ((a == i +\
    \ 9) || (a == i + 10)) {\n                g2 = g2 + 1\n            }\n       \
    \     if ((a == i + 11) || (a == i + 12)) {\n                g3 = g3 + 1\n   \
    \         }\n            if ((a == i + 13) || (a == i + 14)) {\n             \
    \   g2 = g2 + 1\n            }\n            if ((a == i + 15) || (a == i + 16))\
    \ {\n                g3 = g3 + 1\n            }\n        }\n        if ((a % i\
    \ == 0) && ((c == 1) || (d > 3))) {\n            if ((a == i + 1) || (a == i +\
    \ 2)) {\n                g1 = g1 + 1\n            }\n            if ((a == i +\
    \ 3) || (a == i + 4)) {\n                g2 = g2 + 1\n            }\n        \
    \    if ((a == i + 5) || (a == i + 6)) {\n                g3 = g3 + 1\n      \
    \      }\n            if ((a == i + 7) || (a == i + 8)) {\n                g3\
    \ = g3 + 1\n            }\n            if ((a == i + 9) || (a == i + 10)) {\n\
    \                g2 = g2 + 1\n            }\n            if ((a == i + 11) ||\
    \ (a == i + 12)) {\n                g1 = g1 + 1\n            }\n            if\
    \ ((a == i + 13) || (a == i + 14)) {\n                g1 = \nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpu5_noc33_test.go:100:6: expected ''('', found TestIs_Multiply_Prime

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073821
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    b := a*a\n    if b == a {\n        return\
    \ false\n    }\n    \n    for i := 2; i < b; i++ {\n        if a % i == 0 {\n\
    \            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpao2swiqr_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpao2swiqr_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpao2swiqr_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpao2swiqr_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpao2swiqr_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    var aa int = a\n    var b int = a\n\
    \    var c int = a\n    for  i := 0; i < 3; i++ {\n        if i > 0 {\n      \
    \      c += a\n        }\n        if c > 100 {\n            return false\n   \
    \     }\n        if a % 2 != 0 {\n            c -= 2\n        }\n        a = c\n\
    \        b += 1\n        if b > aa {\n            b = a\n            aa += b\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T)\
    \ {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: false },\n     { actual: candidate(30), expected: true },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105),\
    \ expected: true },\n     { actual: candidate(126), expected: false },\n     {\
    \ actual: candidate(729), expected: false },\n     { actual: candidate(891), expected:\
    \ false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0\
    \ (0.00s)\n        tmpywb2c2od_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmpywb2c2od_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__3\
    \ (0.00s)\n        tmpywb2c2od_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmpywb2c2od_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5\
    \ (0.00s)\n        tmpywb2c2od_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmpywb2c2od_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 2
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    // your code here\n    a := a % 30\n\
    \    if a<100 {\n        for i := 2; i <= a/2; i++ {\n            if a == i*i*i\
    \ {\n                return true\n            }\n        }\n    }\n    return\
    \ false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp89cx2j78_test.go:17:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    \n    c := 2 // first prime number\n\
    \    for a > 100 {\n        if a % c == 0 {\n            return false\n      \
    \  }\n        c++\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T)\
    \ {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: false },\n     { actual: candidate(30), expected: true },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105),\
    \ expected: true },\n     { actual: candidate(126), expected: false },\n     {\
    \ actual: candidate(729), expected: false },\n     { actual: candidate(891), expected:\
    \ false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0\
    \ (0.00s)\n        tmpebbuplvd_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__3 (0.00s)\n        tmpebbuplvd_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpebbuplvd_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpebbuplvd_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpebbuplvd_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 2
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    sqrt_a := sqrt(a)\n    fmt.Println(sqrt_a)\n\
    \n    for i := 1; i <= sqrt_a; i++ {\n        count := 0\n        prime_test :=\
    \ is_prime(i)\n        fmt.Println(prime_test)\n        for j := 1; j < i; j++\
    \ {\n            if prime_test == true && i % j == 0 {\n                count++\n\
    \            }\n        }\n        if count == 3 {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T)\
    \ {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: false },\n     { actual: candidate(30), expected: true },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105),\
    \ expected: true },\n     { actual: candidate(126), expected: false },\n     {\
    \ actual: candidate(729), expected: false },\n     { actual: candidate(891), expected:\
    \ false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0xqcxyiw_test.go:16:15: undefined: sqrt

    /tmp/tmp0xqcxyiw_test.go:21:23: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073822
- exit_code: 2
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    for _, b := range primes {\n       \
    \ if a > b {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp3abqb51_test.go:16:23: undefined: primes

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    var count int = 0\n    primes := make([]int,\
    \ 100)\n    primes[0] = 2\n    for i := 1; i < 100; i++ {\n        count += primes[i]\n\
    \        if a%primes[i] == 0 {\n            count++\n        }\n        if count%3\
    \ == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc\
    \ TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\npanic: runtime error: integer\
    \ divide by zero [recovered]\n\tpanic: runtime error: integer divide by zero\n\
    \ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x5038c0, 0x5f29a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5038c0, 0x5f29a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_multiply_prime(...)\n\t/tmp/tmph2ed5k43_test.go:21\n\
    command-line-arguments_test.TestIs_Multiply_Prime(0xc000103380?)\n\t/tmp/tmph2ed5k43_test.go:38\
    \ +0xb9e\ntesting.tRunner(0xc000103380, 0x528f68)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073823
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    for i := 2; i < 100; i++ {\n       \
    \ if i%a == 0 && i%3 == 0 {\n            return true\n        }\n    }\n    return\
    \ false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0\
    \ (0.00s)\n        tmp8fk1d8pd_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__3 (0.00s)\n        tmp8fk1d8pd_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmp8fk1d8pd_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp8fk1d8pd_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmp8fk1d8pd_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073823
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    if a == 0 {\n        return false\n\
    \    }\n    if a == 1 || a == 3 {\n        return true\n    }\n    b := 2\n  \
    \  for i := 2; i < a; i++ {\n        if (a % i == 0) && (a % b == 0) {\n     \
    \       return false\n        }\n        b++\n    }\n    return true\n}\n\nfunc\
    \ TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0\
    \ (0.00s)\n        tmp7w_s8d97_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7w_s8d97_test.go:54:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2\
    \ (0.00s)\n        tmp7w_s8d97_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7w_s8d97_test.go:54:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5\
    \ (0.00s)\n        tmp7w_s8d97_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7w_s8d97_test.go:54:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073824
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    a %= 100\n    if a == 0 {\n        return\
    \ false\n    }\n\n    a %= 1000\n    if a == 0 {\n        return false\n    }\n\
    \n    a %= 10000\n    if a == 0 {\n        return false\n    }\n\n    a %= 100000\n\
    \    if a == 0 {\n        return false\n    }\n\n    a %= 1000000\n    if a ==\
    \ 0 {\n        return false\n    }\n\n    a %= 10000000\n    if a == 0 {\n   \
    \     return false\n    }\n\n    a %= 100000000\n    if a == 0 {\n        return\
    \ false\n    }\n\n    a %= 1000000000\n    if a == 0 {\n        return false\n\
    \    }\n\n    a %= 10000000000\n    if a == 0 {\n        return false\n    }\n\
    \n    a %= 100000000000\n    if a == 0 {\n        return false\n    }\n\n    a\
    \ %= 1000000000000\n    if a == 0 {\n        return false\n    }\n\n    a %= 10000000000000\n\
    \    if a == 0 {\n        return false\n    }\n\n    a %= 100000000000000\n  \
    \  if a == 0 {\n        return false\n    }\n\n    a %= 1000000000000000\n   \
    \ if a == 0 {\n        return false\n    }\n\n    a %= 10000000000000000\n   \
    \ if a == 0 {\n        return false\n    }\n\n    a %= 100000000000000000\n  \
    \  if a == 0 {\n        return false\n    }\n\n    a %= 1000000000000000000\n\
    \    if a == 0 {\n        return false\n    }\n\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0\
    \ (0.00s)\n        tmpniieu0pz_test.go:126: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__3 (0.00s)\n        tmpniieu0pz_test.go:126:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__6\
    \ (0.00s)\n        tmpniieu0pz_test.go:126: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__7 (0.00s)\n        tmpniieu0pz_test.go:126:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__8\
    \ (0.00s)\n        tmpniieu0pz_test.go:126: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073824
- exit_code: null
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    b := 3\n    m := a\n    c := a\n   \
    \ for {\n        if c == 1 {\n            break\n        }\n        if m % 2 ==\
    \ 0 {\n            m /= 2\n            continue\n        }\n        for {\n  \
    \          if m % b == 0 {\n                m /= b\n                continue\n\
    \            }\n            if m % c == 0 {\n                return false\n  \
    \          }\n            c++\n        }\n        b++\n    }\n    return true\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073837
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    for i := 2; i < 100; i++ {\n       \
    \ if i%a == 0 {\n            continue\n        }\n        for j := 2; j < i; j++\
    \ {\n            if i%j == 0 {\n                continue\n            }\n    \
    \        if i*j < a {\n                return false\n            }\n        }\n\
    \    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0\
    \ (0.00s)\n        tmphwljnhwb_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmphwljnhwb_test.go:54:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2\
    \ (0.00s)\n        tmphwljnhwb_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmphwljnhwb_test.go:54:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5\
    \ (0.00s)\n        tmphwljnhwb_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmphwljnhwb_test.go:54:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073824
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    if a == 0 || a == 1 {\n        return\
    \ false\n    }\n    prime_list := []int{2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31,\
    \ 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n    for _, x := range\
    \ prime_list {\n        if a == x*x {\n            return true\n        }\n  \
    \  }\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpwhzprbhw_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpwhzprbhw_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpwhzprbhw_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpwhzprbhw_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpwhzprbhw_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073824
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    m := a\n    for i := 1; i <= m && m\
    \ >= 100; i++ {\n        if m % i == 0 {\n            m = m / i\n        }\n \
    \   }\n    return m%2 == 0\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n\
    \  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: false },\n     { actual: candidate(30), expected: true },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105),\
    \ expected: true },\n     { actual: candidate(126), expected: false },\n     {\
    \ actual: candidate(729), expected: false },\n     { actual: candidate(891), expected:\
    \ false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__3\
    \ (0.00s)\n        tmppxjdj_mn_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmppxjdj_mn_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5\
    \ (0.00s)\n        tmppxjdj_mn_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmppxjdj_mn_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073824
- exit_code: null
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    for i := 0; i < a; i++ {\n        for\
    \ j := i * i; j < a && (j <= 100); j += i {\n            if a == j {\n       \
    \         return true\n            }\n        }\n    }\n    return false\n}\n\n\
    func TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073837
- exit_code: 2
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    primes := make([]int, 100)\n\n    for\
    \ i := 2; i < 100; i++ {\n        if a % i == 0 {\n            for j := 2; j <\
    \ i; j++ {\n                if i % j == 0 {\n                    return false\n\
    \                }\n            }\n        }\n    }\n\n    return true\n}\n\n\
    func TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpejrv0xxj_test.go:16:5: primes declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073824
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    return a > 100 ? true : false\n}\n\n\
    func TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpp29aie8x_test.go:16:20: illegal character U+003F ''?''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073824
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    if a < 100 {\n        return false\n\
    \    }\n    if a == 1 {\n        return false\n    }\n    if a == 2 {\n      \
    \  return true\n    }\n    var count int\n    var result int\n    var i int\n\
    \    for i = 0; i < 10; i++ {\n        if a % i == 0 {\n            count++\n\
    \            if a / i != i {\n                count++\n            }\n       \
    \     if count == 2 {\n                result = i\n            }\n        }\n\
    \    }\n    if result == 2 {\n        return true\n    }\n    return false\n}\n\
    \nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\npanic: runtime error: integer\
    \ divide by zero [recovered]\n\tpanic: runtime error: integer divide by zero\n\
    \ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5038c0, 0x5f29a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5038c0, 0x5f29a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_multiply_prime(...)\n\t/tmp/tmpm7m6b874_test.go:29\n\
    command-line-arguments_test.TestIs_Multiply_Prime(0x0?)\n\t/tmp/tmpm7m6b874_test.go:56\
    \ +0x54f\ntesting.tRunner(0xc0001a01a0, 0x528f68)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073824
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    // your code\n    \n    \n    return\
    \ true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0\
    \ (0.00s)\n        tmpym3ppj98_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__3 (0.00s)\n        tmpym3ppj98_test.go:44:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__6\
    \ (0.00s)\n        tmpym3ppj98_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__7 (0.00s)\n        tmpym3ppj98_test.go:44:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__8\
    \ (0.00s)\n        tmpym3ppj98_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073824
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    count := 0\n    for i := 2; i < a; i++\
    \ {\n        if i%2 != 0 {\n            count += 2\n            if count%3 !=\
    \ 0 {\n                count++\n            }\n        }\n    }\n    return count\
    \ < 100\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0\
    \ (0.00s)\n        tmpy0984pom_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__3 (0.00s)\n        tmpy0984pom_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpy0984pom_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpy0984pom_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpy0984pom_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073824
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    if a%2 == 0 && a%3 != 0 && a%5 != 0\
    \ && a%7 != 0 { \n        return false\n    }\n    \n    for i:=2; i<=a; i++ {\n\
    \        if a%i%2 == 0 || a%i%3 == 0 || a%i%5 == 0 || a%i%7 == 0 {\n         \
    \   return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpt19_yq2o_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpt19_yq2o_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpt19_yq2o_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpt19_yq2o_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpt19_yq2o_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073824
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    b := a * 2\n    for {\n        c :=\
    \ b + 2\n        d := c + 1\n        if b%c != 0 {\n            break\n      \
    \  }\n        if b%d == 0 {\n            return false\n        }\n        b =\
    \ d\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n\
    \  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: false },\n     { actual: candidate(30), expected: true },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105),\
    \ expected: true },\n     { actual: candidate(126), expected: false },\n     {\
    \ actual: candidate(729), expected: false },\n     { actual: candidate(891), expected:\
    \ false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0\
    \ (0.00s)\n        tmpeajmlbfv_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__3 (0.00s)\n        tmpeajmlbfv_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__6\
    \ (0.00s)\n        tmpeajmlbfv_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__7 (0.00s)\n        tmpeajmlbfv_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__8\
    \ (0.00s)\n        tmpeajmlbfv_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073824
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    \n    if a < 100 {\n        return false\n\
    \    }\n    \n    \n    // Create an array of prime numbers\n    var primes [100]int\n\
    \    primes[0] = 2 // First prime number\n    \n    for i := 1; i < len(primes);\
    \ i++ {\n        // If i'th prime number is less than or equal to a,\n       \
    \ // then it is not prime\n        if primes[i] <= a {\n            continue\n\
    \        }\n        \n        // Loop through every number greater than or equal\
    \ to\n        // prime[i]\n        for j := primes[i]; j <= a; j++ {\n       \
    \     // If j'th prime number is less than or equal to a,\n            // then\
    \ it is not prime\n            if primes[j] <= a {\n                continue\n\
    \            }\n            \n            // Check if j'th prime number is equal\
    \ to a\n            if primes[i]*primes[j] == a {\n                return true\n\
    \            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpavhbixn9_test.go:73: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpavhbixn9_test.go:73:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpavhbixn9_test.go:73: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpavhbixn9_test.go:73:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpavhbixn9_test.go:73: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073824
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    c := make([]int, 100) // a <= 100\n\
    \    y := 0\n    for i := 0; i < len(c); i++ {\n        c[i] = 1\n    }\n\n  \
    \  for i := 2; i < a; i++ {\n        if c[i] == 3 {\n            y += 1\n    \
    \    }\n\n        for j := i + 1; j < 100; j++ {\n            if (c[j] == 3) {\n\
    \                y++\n            }\n            if y == 3 {\n               \
    \ return true\n            }\n            c[j]++\n        }\n    }\n\n    return\
    \ false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0\
    \ (0.00s)\n        tmplmetge11_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__3 (0.00s)\n        tmplmetge11_test.go:63:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__6\
    \ (0.00s)\n        tmplmetge11_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__7 (0.00s)\n        tmplmetge11_test.go:63:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__8\
    \ (0.00s)\n        tmplmetge11_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073824
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    if a < 100 {\n        return false\n\
    \    }\n\n    prime := make(map[int]bool)\n    for i := 2; i <= a; i++ {\n   \
    \     for j := 2; j < i; j++ {\n            if i*j == a && prime[i] {\n      \
    \          return false\n            }\n            if i*j <= a && prime[j] {\n\
    \                prime[j] = true\n            }\n        }\n    }\n\n    return\
    \ true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpopktzbco_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpopktzbco_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__6\
    \ (0.00s)\n        tmpopktzbco_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__7 (0.00s)\n        tmpopktzbco_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__8\
    \ (0.00s)\n        tmpopktzbco_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073825
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    // Your code here\n    m := (a*a) %\
    \ 10000\n    for i := 3; i <= m; i++ {\n        if m%i == 0 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpg3yg4jpj_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpg3yg4jpj_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpg3yg4jpj_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpg3yg4jpj_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpg3yg4jpj_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073824
- exit_code: 2
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    sqrt_a := sqrt{a}\n    if a > 100 {\n\
    \        return false\n    }\n    for i := 3; i <= sqrt_a.a; i++ {\n        if\
    \ isPrime(i) == true && is_mult_prime(i, a, 3) == true {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T)\
    \ {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: false },\n     { actual: candidate(30), expected: true },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105),\
    \ expected: true },\n     { actual: candidate(126), expected: false },\n     {\
    \ actual: candidate(729), expected: false },\n     { actual: candidate(891), expected:\
    \ false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_7098pjn_test.go:16:15: undefined: sqrt

    /tmp/tmp_7098pjn_test.go:21:12: undefined: isPrime

    /tmp/tmp_7098pjn_test.go:21:34: undefined: is_mult_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073824
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    // Your code here\n    for i := 0; i\
    \ < 100; i++ {\n        n := i // the number we are testing, so no need to check\
    \ it\n        if a < n {\n            return false\n        }\n        for j :=\
    \ 0; j < i; j++ {\n            if i*j % a == 0 {\n                return false\n\
    \            }\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmptkly532y_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmptkly532y_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmptkly532y_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmptkly532y_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmptkly532y_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073825
- exit_code: 2
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    if a == 0 {\n        return false\n\
    \    }\n    for i := 2; i < a; i++ {\n        if is_multiply_prime_test.is_prime(i)\
    \ == true {\n            for j := i + i; j < a; j++ {\n                if is_multiply_prime_test.is_prime(j)\
    \ == true {\n                    if j % i == 0 {\n                        return\
    \ false\n                    }\n                }\n            }\n        }\n\
    \    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp42tf8mge_test.go:20:12: undefined: is_multiply_prime_test

    /tmp/tmp42tf8mge_test.go:22:20: undefined: is_multiply_prime_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073824
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    // write your function here\n    \n\
    \    \n    if a <= 100 {\n        return true\n    }\n    \n    return false\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0\
    \ (0.00s)\n        tmp51ggntdl_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__3 (0.00s)\n        tmp51ggntdl_test.go:48:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmp51ggntdl_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp51ggntdl_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmp51ggntdl_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073826
- exit_code: 2
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    if a > 100 {\n        return false\n\
    \    }\n    b := 0\n    for i := 2; i < a; i++ {\n        if isMultiplicationPrime(i)\
    \ {\n            b = b + 1\n            if b == 2 {\n                return true\n\
    \            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpelhy_6c__test.go:21:12: undefined: isMultiplicationPrime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073825
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    return ((a > 100) && ((a / 3) == (a%3)))\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmps6_8ohmn_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmps6_8ohmn_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmps6_8ohmn_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmps6_8ohmn_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmps6_8ohmn_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073826
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    sum := 0\n    var is_prime bool\n  \
    \  for i := 2; i <= a-1; i++ {\n        if i%2 != 0 {\n            sum += i\n\
    \        }\n        for j := 0; j < i; j++ {\n            if j%2 == 0 {\n    \
    \            sum -= i\n            }\n            if j%i == 0 {\n            \
    \    is_prime = true\n                break\n            }\n        }\n      \
    \  if !is_prime {\n            break\n        }\n    }\n    return is_prime\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0\
    \ (0.00s)\n        tmp1ij7og9w_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__3 (0.00s)\n        tmp1ij7og9w_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__6\
    \ (0.00s)\n        tmp1ij7og9w_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__7 (0.00s)\n        tmp1ij7og9w_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__8\
    \ (0.00s)\n        tmp1ij7og9w_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073826
- exit_code: 2
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    if a == 0 || a > 100 {\n        return\
    \ false\n    }\n    if a == 1 {\n        return true\n    }\n    var primes []int\n\
    \    for i := 2; i < a; i++ {\n        if isPrime(i) {\n            primes = append(primes,\
    \ i)\n        }\n    }\n    if a == 2 {\n        return true\n    }\n    for i\
    \ := 3; i < a; i++ {\n        if isMultiply(i, primes) {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T)\
    \ {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: false },\n     { actual: candidate(30), expected: true },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105),\
    \ expected: true },\n     { actual: candidate(126), expected: false },\n     {\
    \ actual: candidate(729), expected: false },\n     { actual: candidate(891), expected:\
    \ false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp47ty879y_test.go:24:12: undefined: isPrime

    /tmp/tmp47ty879y_test.go:32:12: undefined: isMultiply

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073826
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    var max int = 100 // the greatest number\
    \ that can be multiples of 3 primes\n    var min = 3 // the greatest number that\
    \ can be multiples of 3 primes\n    for i := 1; i <= max; i++ {\n        var m\
    \ int\n        m = i\n        for j := min; j < i; j++ {\n            m *= j\n\
    \        }\n        if a == m {\n            return true\n        }\n    }\n \
    \   return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpfyzmfewv_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpfyzmfewv_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpfyzmfewv_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpfyzmfewv_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpfyzmfewv_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073826
- exit_code: 2
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    // a should be less than 100\n    if\
    \ a > 100 {\n        return false\n    }\n    // Check if each number is prime\n\
    \    for i := 2; i < a; i++ {\n        if !is_prime(i) {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T)\
    \ {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: false },\n     { actual: candidate(30), expected: true },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105),\
    \ expected: true },\n     { actual: candidate(126), expected: false },\n     {\
    \ actual: candidate(729), expected: false },\n     { actual: candidate(891), expected:\
    \ false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx2ww6ubf_test.go:22:13: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073826
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    b := 2 * 3\n    if b > a && b < 100\
    \ {\n        c := 5\n        for d := 2; d < 100; d++ {\n            if d % b\
    \ == 0 {\n                c += 1\n                break\n            }\n     \
    \   }\n        if a == c*c {\n            return true\n        }\n    }\n    return\
    \ false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpzan_fvm__test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpzan_fvm__test.go:54:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpzan_fvm__test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpzan_fvm__test.go:54:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpzan_fvm__test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073826
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    if a < 100 {\n        return false\n\
    \    }\n\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return\
    \ false\n        }\n    }\n\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpz9ntsi65_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpz9ntsi65_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpz9ntsi65_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpz9ntsi65_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpz9ntsi65_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073826
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    // If the given number is a factor of\
    \ 2 return true\n    // Example:\n    // >>> is_multiply_prime(6)\n    // true\n\
    \    // 6 = 2 * 3\n    if a % 2 == 0 {\n        return true\n    }\n    for i\
    \ := 3; i <= a; i++ {\n        if a%i == 0 {\n            return false\n     \
    \   }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n\
    \  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: false },\n     { actual: candidate(30), expected: true },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105),\
    \ expected: true },\n     { actual: candidate(126), expected: false },\n     {\
    \ actual: candidate(729), expected: false },\n     { actual: candidate(891), expected:\
    \ false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__3\
    \ (0.00s)\n        tmp3051sysm_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp3051sysm_test.go:54:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5\
    \ (0.00s)\n        tmp3051sysm_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__6 (0.00s)\n        tmp3051sysm_test.go:54:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmp3051sysm_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073826
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    if a <= 100 {\n        return false\n\
    \    }\n    var p int\n    var q int\n    for q = 6; q < 100; q++ {\n        p\
    \ = a*q + 3\n        if p%q == 0 {\n            return false\n        }\n    }\n\
    \    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmp62o06scx_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp62o06scx_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__6\
    \ (0.00s)\n        tmp62o06scx_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__7 (0.00s)\n        tmp62o06scx_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__8\
    \ (0.00s)\n        tmp62o06scx_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073826
- exit_code: 2
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    // Write your code here\n    n := a\
    \ - 1\n    i := 2\n    for i <= n {\n        if i%n != 0 {\n            if i%n\
    \ == 0 {\n                i := i + 1\n            }\n        }\n        n = n\
    \ / i\n    }\n    return n == 1\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T)\
    \ {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: false },\n     { actual: candidate(30), expected: true },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105),\
    \ expected: true },\n     { actual: candidate(126), expected: false },\n     {\
    \ actual: candidate(729), expected: false },\n     { actual: candidate(891), expected:\
    \ false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7aqik_ku_test.go:22:17: i declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073827
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    var prime bool\n    var counter int\n\
    \    for i := 2; i < 100; i++ {\n        if a % i == 0 {\n            counter++\n\
    \        }\n        if counter == 3 {\n            prime = true\n            break\n\
    \        }\n    }\n    if prime {\n        return true\n    } else {\n       \
    \ return false\n    }\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__3\
    \ (0.00s)\n        tmp8m_c6q73_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp8m_c6q73_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__6\
    \ (0.00s)\n        tmp8m_c6q73_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__7 (0.00s)\n        tmp8m_c6q73_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__8\
    \ (0.00s)\n        tmp8m_c6q73_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073827
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    var result int = 0\n    for number :=\
    \ 2; number <= 100; number++ {\n        if a % number == 0 {\n            result\
    \ = result + 1\n        }\n    }\n    if result >= 3 {\n        return true\n\
    \    }\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__3\
    \ (0.00s)\n        tmpiawdm9g6_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmpiawdm9g6_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__6\
    \ (0.00s)\n        tmpiawdm9g6_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__7 (0.00s)\n        tmpiawdm9g6_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__8\
    \ (0.00s)\n        tmpiawdm9g6_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073827
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    b := a\n    var p int\n    for i :=\
    \ 1; i <= 100; i++ {\n        p = i * 3\n        if b % p == 0 {\n           \
    \ b = b / p\n            return true\n        }\n    }\n    return false\n}\n\n\
    func TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__2\
    \ (0.00s)\n        tmp892gpeu6_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp892gpeu6_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__6\
    \ (0.00s)\n        tmp892gpeu6_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__7 (0.00s)\n        tmp892gpeu6_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__8\
    \ (0.00s)\n        tmp892gpeu6_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp892gpeu6_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073827
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    // TODO write your code here\n    return\
    \ false\n}\n</code>\n<|/ a tags=go,algorithm |>\n<| a |>\nHere is one way using\
    \ prime factorisation which I believe is much more efficient than a trial division\
    \ method.\n<code>\npackage main\n\nimport (\n    \"fmt\"\n    \"math\"\n    \"\
    math/bits\"\n)\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmplboxr0ml_test.go:19:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073826
- exit_code: 2
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    if a < 100 {\n        return false\n\
    \    }\n\n    b := 2\n    c := 3\n\n    // loop until the product is >= 100\n\
    \    for {\n        product = a / b\n        if product > 100 {\n            product\
    \ = 100\n        }\n\n        if product == c {\n            return true\n   \
    \     } else {\n            c += 2\n        }\n\n        b += 2\n        if b\
    \ > 100 {\n            break\n        }\n    }\n\n    return false\n}\n\nfunc\
    \ TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1f2ljzzs_test.go:25:9: undefined: product

    /tmp/tmp1f2ljzzs_test.go:26:12: undefined: product

    /tmp/tmp1f2ljzzs_test.go:27:13: undefined: product

    /tmp/tmp1f2ljzzs_test.go:30:12: undefined: product

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073827
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    if a%2 == 0 && a%3 != 0 && a%5 != 0\
    \ {\n        return false\n    }\n    for i:=2; i<a; i++ {\n        if i%2 ==\
    \ 0 && i%3 != 0 && i%5 != 0 {\n            return false\n        }\n    }\n  \
    \  return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate :=\
    \ is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpgdn02ap3_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpgdn02ap3_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpgdn02ap3_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpgdn02ap3_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpgdn02ap3_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073827
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    fmt.Println(a)\n    return a == 30\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "5\n30\n8\n10\n125\n105\n126\n729\n891\n1001\n--- FAIL: TestIs_Multiply_Prime\
    \ (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpnlnooenn_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpnlnooenn_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpnlnooenn_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpnlnooenn_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073827
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    var i, j int\n    for i = 0; i<100;\
    \ i++ {\n        for j = 2; j < i; j++ {\n            if i*j > 100 {\n       \
    \         break\n            }\n            if i*j == a { \n                return\
    \ true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__3\
    \ (0.00s)\n        tmpjjyt0guf_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmpjjyt0guf_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5\
    \ (0.00s)\n        tmpjjyt0guf_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmpjjyt0guf_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073827
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    for i := 2; i < 100; i++ {\n       \
    \ if a%i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmp0u4ydwl8_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp0u4ydwl8_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmp0u4ydwl8_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp0u4ydwl8_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmp0u4ydwl8_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073827
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    for i := 0; i < 3; i++ {\n        if\
    \ i%3 == 0 {\n            continue\n        }\n        if (a%i) != 0 {\n     \
    \       continue\n        }\n        if a%(i*i) == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T)\
    \ {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: false },\n     { actual: candidate(30), expected: true },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105),\
    \ expected: true },\n     { actual: candidate(126), expected: false },\n     {\
    \ actual: candidate(729), expected: false },\n     { actual: candidate(891), expected:\
    \ false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmp4sqv30xi_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp4sqv30xi_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmp4sqv30xi_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp4sqv30xi_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmp4sqv30xi_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073828
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    // If n is a multiple of three prime\
    \ numbers, then n = 6k\n    for i := 2; i <= a; i++ {\n        if a % i == 0 {\n\
    \            return false\n        }\n    }\n    // If n is greater than 100\n\
    \    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpe8sd_l93_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpe8sd_l93_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpe8sd_l93_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpe8sd_l93_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpe8sd_l93_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073828
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    if a <= 100 {\n        fmt.Println(\"\
    true\")\n        return false\n    }\n    \n    if a < 7 {\n        fmt.Println(\"\
    false\")\n        return true\n    }\n    \n    p := 3\n    for i := 3; i < a;\
    \ i++ {\n        if a % p == 0 {\n            return false\n        }\n      \
    \  p = p + 1\n    }\n    return true\n}\n</code>\n<|/ a dscore=0 tags=go |>\n\
    <| c |>\nI see your point. But the question was to write a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers and false\
    \ otherwise.\n<|/ c |>\n<| c |>\nThat is what is said in the question and what\
    \ he has attempted to do.\n<|/ c |>\n<| c |>\nYes but you did not answer his question\
    \ about what he is asking for in the title of the question. He wrote that he need\
    \ to write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers and false otherwise.\n<|/ c |>\n<| c |>\nThe question was\
    \ how to write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers and false otherwise.\n<|/ c |>\n<| c |>\nThat was not what\
    \ was said in the question and what is written at the top of your post. The question\
    \ does not mention what he wants in the title.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    package main\n\nimport (\n    \"fmt\"\n)\n\nfunc TestIs_Multiply_Prime(t *testing.T)\
    \ {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: false },\n     { actual: candidate(30), expected: true },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105),\
    \ expected: true },\n     { actual: candidate(126), expected: false },\n     {\
    \ actual: candidate(729), expected: false },\n     { actual: candidate(891), expected:\
    \ false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpuk1gsjzj_test.go:35:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073827
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    for i := 2; i <= 100 && i*i <= a; i++\
    \ {\n        j := a / i\n        if j == i {\n            continue\n        }\n\
    \        for k := i * i; k <= a; k++ {\n            if k*k == a {\n          \
    \      return false\n            }\n        }\n    }\n    return true\n}\n\nfunc\
    \ TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0\
    \ (0.00s)\n        tmpazrk5z6c_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__3 (0.00s)\n        tmpazrk5z6c_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__6\
    \ (0.00s)\n        tmpazrk5z6c_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__8 (0.00s)\n        tmpazrk5z6c_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073828
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    // Only check the numbers that are less\
    \ than 100\n    if a < 100 {\n        if a <= 3 {\n            return false\n\
    \        }\n        if a <= 5 || a == 3 {\n            return false\n        }\n\
    \        if a <= 7 || a == 5 {\n            return false\n        }\n        if\
    \ a <= 9 || a == 7 {\n            return false\n        }\n        if a <= 11\
    \ || a == 9 {\n            return false\n        }\n        if a <= 13 || a ==\
    \ 11 {\n            return false\n        }\n        if a <= 15 || a == 13 {\n\
    \            return false\n        }\n        if a <= 17 || a == 15 {\n      \
    \      return false\n        }\n        if a <= 19 || a == 17 {\n            return\
    \ false\n        }\n        if a <= 21 || a == 19 {\n            return false\n\
    \        }\n        if a <= 23 || a == 21 {\n            return false\n      \
    \  }\n        if a <= 25 || a == 23 {\n            return false\n        }\n \
    \       if a <= 27 || a == 25 {\n            return false\n        }\n       \
    \ if a <= 29 || a == 27 {\n            return false\n        }\n        if a <=\
    \ 31 || a == 29 {\n            return false\n        }\n        if a <= 33 ||\
    \ a == 31 {\n            return false\n        }\n        if a <= 35 || a == 33\
    \ {\n            return false\n        }\n        if a <= 37 || a == 35 {\n  \
    \          return false\n        }\n        if a <= 39 || a == 37 {\n        \
    \    return false\n        }\n        if a <= 41 || a == 39 {\n            return\
    \ false\n        }\n        if a <= 43 || a == 41 {\n            return false\n\
    \        }\n        if a <= 45 || a == 43 {\n            return false\n      \
    \  }\n        if a <= 47 || a == 45 {\n            return false\n        }\n \
    \       if a <= 49 || a == 47 {\n            return false\n        }\n       \
    \ if a <= 51 || a == 49 {\n            return false\n        }\n        if a <=\
    \ 53 || a == 51 {\n            return false\n        }\n        if a <= 55 ||\
    \ a == 53 {\n            return false\n        }\n        if a <= 57 || a == 55\
    \ {\n            return false\n        }\n        if a <= 59 || a == 57 {\n  \
    \          return false\n        }\n        if a <= 61 || a == 59 {\n        \
    \    return false\n        }\n        if a <= 63 || a == 61 {\n            return\
    \ false\n        }\n        if a <= 65 || a == 63 {\n            return false\n\
    \        }\n        if a <= 67 || a == 65 {\n            return false\n      \
    \  }\n        if a <= 69 || a == 67 {\n            return false\n        }\n \
    \       if a <= 71 || a == 69 {\n            return false\n        }\n       \
    \ if a <= 73 || a == 71 {\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpszlm89t6_test.go:125:6: expected ''('', found TestIs_Multiply_Prime

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073827
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    var count int = 0\n\n    for i := 2;\
    \ i < a; i++ {\n        if i%2 == 0 {\n            for j := 3; j < i/2; j++ {\n\
    \                if (i*j)%a == 0 {\n                    count++\n            \
    \    }\n            }\n        }\n    }\n    return count == 3\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmp_xc65pyn_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp_xc65pyn_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmp_xc65pyn_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp_xc65pyn_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmp_xc65pyn_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073828
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    // O(n^2) \n    b := true\n    for i\
    \ := 2; i < a; i++ {\n        // Check if a divides i\n        if a % i == 0 {\n\
    \            b = false\n            break\n        }\n    }\n\n    return b\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0\
    \ (0.00s)\n        tmp9oncpyh7_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp9oncpyh7_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2\
    \ (0.00s)\n        tmp9oncpyh7_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp9oncpyh7_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5\
    \ (0.00s)\n        tmp9oncpyh7_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp9oncpyh7_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073829
- exit_code: 2
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    if a > 100 {\n        return false\n\
    \    }\n\n    b := 3\n\n    for i := 2; i <= a; i++ {\n        if i%2 == 0 {\n\
    \            continue\n        }\n\n        for j := 3; j < i; j++ {\n       \
    \     if i%j == 0 {\n                break\n            }\n        }\n\n     \
    \   if j > b {\n            b = j\n        }\n    }\n\n    if a%b == 0 {\n   \
    \     return false\n    }\n\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpat49c73c_test.go:33:12: undefined: j

    /tmp/tmpat49c73c_test.go:34:17: undefined: j

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073828
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    if a > 100 {\n        fmt.Println(\"\
    This number is more than 100\")\n    }\n    \n    for i := 2; i <= a; i++ {\n\
    \        for j := i*i; j < 100; j += i {\n            if j % a == 0 {\n      \
    \          return false\n            }\n        }\n    }\n    return true\n}\n\
    \nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "This number is more than 100\nThis number is more than 100\nThis number\
    \ is more than 100\nThis number is more than 100\nThis number is more than 100\n\
    This number is more than 100\n--- FAIL: TestIs_Multiply_Prime (0.00s)\n    ---\
    \ FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmpxi2j3v1n_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2\
    \ (0.00s)\n        tmpxi2j3v1n_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__6 (0.00s)\n        tmpxi2j3v1n_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__7\
    \ (0.00s)\n        tmpxi2j3v1n_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__8 (0.00s)\n        tmpxi2j3v1n_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073829
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    b := a%3\n    c := a*a\n    d := a*a\n\
    \    e := a*a\n    f := a*a\n    g := a*a\n    h := a*a\n    i := a*a\n    j :=\
    \ a*a\n\n    for {\n        if b == c {\n            if b == d {\n           \
    \     if b == e {\n                    if b == f {\n                        if\
    \ b == g {\n                            if b == h {\n                        \
    \        if b == i {\n                                    if b == j {\n      \
    \                                  return true\n                             \
    \       }\n                                }\n                            }\n\
    \                        }\n                    }\n                }\n       \
    \     }\n        }\n        if b > c {\n            return false\n        }\n\
    \        b++\n    }\n}\n</code>\nThen we could simply call the function is_multiply_prime(30)\
    \ in the main func and get True or False back. \nThis solution should work pretty\
    \ well because of the O(1) complexity of the modulo operator. \nThe complexity\
    \ of the function is O(log(n)) but this can be mitigated by using another method\
    \ like binary search or using big.Int to do the modulus calculations. \nHope this\
    \ helps anyone who is looking for help with this problem or looking for further\
    \ help with this question!\n<|/ a dscore=2 |>\n<| c |>\nThis should be the answer.\
    \ One could implement a binary search on integer numbers to improve the performance.\n\
    <|/ c |>\n<| c |>\nThis is an awesome answer that should be the answer.\n<|/ c\
    \ |>\n<| c |>\nThis is not correct, for a large enough input number this would\
    \ take **O(N**) where N is the number of primes below the input, i.e. the function\
    \ will loop N times for large inputs.\n<|/ c |>\n<| c |>\nThis solution is **O(N)**,\
    \ it is using the modulo (**%**) operator which by definition runs in **O(1)**.\
    \  So it runs in **O(log(n))**, which in turn is **O(1)**.  Therefore, it is O(log(n)).\n\
    <|/ c |>\n<| c |>\n, i understand your solution but i think the question is to\
    \ implement the function `is_multiply_prime` which is to return true if a number\
    \ is multiply of all the primes below 100. Not the prime number which is less\
    \ than 100. Your code will return false if the number is not a multiple of all\
    \ the primes below 100.\n<|/ c |>\n<| a dscore=1 |>\nFor fun I wrote something\
    \ that's even faster but still not very elegant:\n<code>\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcgj46ktw_test.go:50:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073828
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    a %= 100\n    if a == 1 {\n        return\
    \ true\n    }\n    for i:=2; i<a; i++ {\n        if i%2 == 0 {\n            continue\n\
    \        }\n        f := i*i*i\n        if f == a {\n            return true\n\
    \        }\n        if f > a {\n            return false\n        }\n    }\n \
    \   return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpckg35e7b_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpckg35e7b_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpckg35e7b_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpckg35e7b_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073829
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    if a%100 > 30 {\n        return false\n\
    \    }\n    \n    var b = 3\n    \n    for i := 3; i <= a && b < 100; i++ {\n\
    \        if a%i == 0 && i%b == 0 {\n            return false\n        }\n    \
    \    b++\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T)\
    \ {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: false },\n     { actual: candidate(30), expected: true },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105),\
    \ expected: true },\n     { actual: candidate(126), expected: false },\n     {\
    \ actual: candidate(729), expected: false },\n     { actual: candidate(891), expected:\
    \ false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpq1hn5jda_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpq1hn5jda_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpq1hn5jda_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpq1hn5jda_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpq1hn5jda_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073829
- exit_code: 2
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    b, c := is_multiply_prime_test(a, b,\
    \ nil)\n    if b {\n        return true\n    }\n    if c {\n        return true\n\
    \    }\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbiy4tr66_test.go:16:13: undefined: is_multiply_prime_test

    /tmp/tmpbiy4tr66_test.go:16:39: undefined: b

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073829
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    var b int = 0\n\n    for i := 2; i <\
    \ a; i++ {\n        for j := 2; j < i; j++ {\n            if a % i == 0 { // check\
    \ divisibility by primes\n                for k := 2; k < j; k++ {\n         \
    \           if j % k == 0 { // check divisibility by divisors\n              \
    \          b = b + 1\n                    }\n                }\n            }\n\
    \        }\n    }\n    if b == 0 {\n        return true\n    }\n    return false\n\
    }\n</code>\nI tested it on several random examples:\n<code>\npackage is_multiply_prime_test\n\
    \nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc TestIs_Multiply_Prime(t *testing.T)\
    \ {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: false },\n     { actual: candidate(30), expected: true },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105),\
    \ expected: true },\n     { actual: candidate(126), expected: false },\n     {\
    \ actual: candidate(729), expected: false },\n     { actual: candidate(891), expected:\
    \ false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpfy947dc2_test.go:34:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073828
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    return a % 19 == 0 || a % 39 == 0 ||\
    \ a % 49 == 0 || a % 59 == 0 || a % 73 == 0\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmp1dunbml7_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp1dunbml7_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmp1dunbml7_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp1dunbml7_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmp1dunbml7_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073829
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    var count int\n    for i := 2; i < a;\
    \ i++ {\n        for j := i * i; j < a; j += i {\n            count++\n      \
    \  }\n    }\n    return count == 2\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T)\
    \ {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: false },\n     { actual: candidate(30), expected: true },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105),\
    \ expected: true },\n     { actual: candidate(126), expected: false },\n     {\
    \ actual: candidate(729), expected: false },\n     { actual: candidate(891), expected:\
    \ false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpqtjmcifb_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmpqtjmcifb_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5\
    \ (0.00s)\n        tmpqtjmcifb_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmpqtjmcifb_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073829
- exit_code: 2
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    if a <= 100 {\n        // Sieve of Eratosthenes\n\
    \        // https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes\n        var primes\
    \ [3]int\n        var number int\n\n        for i:= 0; i < 3; i++ {\n        \
    \    primes[i] = i\n        }\n        for i := 2; i <= a; i++ {\n           \
    \ if primes[number] == i {\n                number = number + 1\n            }\
    \ else {\n                primes[number] = i\n            }\n        }\n\n   \
    \     if number == 3 {\n            return true\n        } else {\n          \
    \  return false\n        }\n    }\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T)\
    \ {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: false },\n     { actual: candidate(30), expected: true },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105),\
    \ expected: true },\n     { actual: candidate(126), expected: false },\n     {\
    \ actual: candidate(729), expected: false },\n     { actual: candidate(891), expected:\
    \ false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk_ys9l3e_test.go:39:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073829
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    if a < 100 {\n        return true\n\
    \    }\n    \n    for i := 3; i <= a; i++ {\n        if i*i >= a*a {\n       \
    \     return false\n        }\n    }\n    return true\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThank you for your answer, but I already tried this and got the\
    \ same result. Do you have another idea?\n<|/ c |>\n<| c |>\nI posted a working\
    \ solution which you might find interesting. :)\n<|/ c |>\n<| a |>\nSince you\
    \ said you want to learn Go I wrote a small program which I hope helps you with\
    \ your homework. The program is a little bit long to read but is easy to understand.\n\
    The main function asks the user how many numbers he wants to check. It then asks\
    \ the user for all numbers to check. The program then goes through the input numbers\
    \ one by one and checks if they are multiple (multiplication) of the numbers entered\
    \ before. In the end it prints all numbers which are multiples of your input numbers:\n\
    <code>\npackage main\n\nimport (\n    \"bufio\"\n    \"os\"\n    \"fmt\"\n   \
    \ \"strings\"\n    \"math\"\n    \"math/big\"\n    \"math/rand\"\n)\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpm0tzd4tf_test.go:27:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073828
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    primes := make([]int, 100) // We only\
    \ need to store the 100 prime numbers\n    primes[1] = 2\n    primes[2] = 3\n\
    \    primes[3] = 5\n    primes[4] = 7\n    for i := 5; i <= a; i++ {\n       \
    \ if primes[i] != 0 && primes[i] != i {\n            c := 0\n            for j\
    \ := i*i; j<100; j+=i {\n                if primes[j] == i {\n               \
    \     c++\n                }\n            }\n            if c == 2 {\n       \
    \         return true\n            }\n        }\n    }\n    return false\n}\n\n\
    func TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\npanic: runtime error: index out\
    \ of range [100] with length 100 [recovered]\n\tpanic: runtime error: index out\
    \ of range [100] with length 100\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513640,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513640, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_multiply_prime(0x5?)\n\t/tmp/tmpp26dwigr_test.go:22\
    \ +0x112\ncommand-line-arguments_test.TestIs_Multiply_Prime(0x0?)\n\t/tmp/tmpp26dwigr_test.go:48\
    \ +0xa7\ntesting.tRunner(0xc0001a0340, 0x528f68)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073829
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    for i := 0; i < 100 && i%3 == 0; i++)\
    \ {\n        if a < i*i {\n            break\n        }\n    }\n    return i%100\
    \ == 0\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpv19k0vxu_test.go:16:41: expected ''{'', found '')''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073828
- exit_code: 2
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    for number := 2; number <= a - 1; number++\
    \ {\n        if is_less_than(a, number) {\n            continue\n        }\n \
    \       if a % number == 0 {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate :=\
    \ is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp64tuq6ap_test.go:17:12: undefined: is_less_than

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073829
- exit_code: null
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    n := a / 2\n    i := n\n    j := 0\n\
    \    for j+1 < n {\n        i += 2\n        if a % i == 0 {\n            break\n\
    \        }\n    }\n    for j+1 < n && a % j == 0 {\n        j++\n    }\n    return\
    \ (j + 1 > n)\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate :=\
    \ is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073842
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    if a%100 == 0 {\n        return false\n\
    \    }\n    \n    for number := 2; number < a*3; number++ {\n        if a%number\
    \ == 0 {\n            return false\n        }\n    }\n    return true\n}\nfunc\
    \ TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmprssl2dpi_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmprssl2dpi_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmprssl2dpi_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmprssl2dpi_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmprssl2dpi_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    fmt.Println(\"a = \", a)\n    return\
    \ a < 100\n}\n</code>\n<|/ a |>\n<| c |>\n\"For this reason the is_multiply_prime\
    \ function must be recursive\" This should be stated clearly in the answer. Remember\
    \ that someone might not know this at first or just get confused since they do\
    \ not know recursive functions.\n<|/ c |>\n<| a tags=go,function,algorithm,recursion\
    \ dscore=3 |>\nThe idea is to use functional programming.\nThis article explains\
    \ how to create such functions in Go:\n\nHow to write a recursive function in\
    \ Go\n<|/ a |>\n<| c |>\nYou don't need to explain the technique and link to another\
    \ article; your answer will be a lot better if you just add a couple lines explaining\
    \ the technique and link to the article.\n<|/ c |>\n<| c |>\nThis doesn't show\
    \ how recursion can be applied to this problem.\n<|/ c |>\n<| a dscore=2 tags=go,function,algorithm,recursion\
    \ |>\nI wrote this simple program to find the product of 3 numbers in golang by\
    \ using recursion. \n<code>\npackage main\n\nimport \"fmt\"\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp8r_vflzt_test.go:19:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073829
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if\
    \ a % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0\
    \ (0.00s)\n        tmpxc9musxu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmpxc9musxu_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2\
    \ (0.00s)\n        tmpxc9musxu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmpxc9musxu_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5\
    \ (0.00s)\n        tmpxc9musxu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmpxc9musxu_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073563
- exit_code: 2
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    if a < 100 {\n        return false\n\
    \    }\n\n    for number := 2; number < a; number++ {\n        for i := 2; i <\
    \ number; i++ {\n            if a % number != 0 {\n                continue\n\
    \            }\n            if is_prime(number*i) == true {\n                return\
    \ true\n            }\n        }\n    }\n\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnvqb7zdg_test.go:25:16: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    mulp := 0\n    prime := 0\n\n    if\
    \ a%2 == 0 {\n        fmt.Println(\"a is not even\")\n        return false\n \
    \   }\n\n    for i := 2; i < a; i++ {\n        if a%i == 0 {\n            prime++\n\
    \        }\n\n        if prime == 3 {\n            mulp++\n        }\n    }\n\n\
    \    if mulp == 3 {\n        return true\n    } else {\n        return false\n\
    \    }\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "a is not even\na is not even\na is not even\na is not even\n--- FAIL: TestIs_Multiply_Prime\
    \ (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmpktcjk5ta_test.go:63:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2\
    \ (0.00s)\n        tmpktcjk5ta_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmpktcjk5ta_test.go:63:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5\
    \ (0.00s)\n        tmpktcjk5ta_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmpktcjk5ta_test.go:63:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    return a == (a * a / 2) && a <= 100\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpxxpatlem_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpxxpatlem_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpxxpatlem_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpxxpatlem_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpxxpatlem_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    primes := []int{2, 3, 5, 7, 11, 13,\
    \ 17, 19}\n\n    for i := 2; i < a; i++ {\n        if a % primes[i] != 0 {\n \
    \           return false\n        }\n    }\n\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmp4l5dib5j_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp4l5dib5j_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmp4l5dib5j_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp4l5dib5j_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmp4l5dib5j_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073831
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    return a%2 == 0 && a%3 == 0 && a%5 ==\
    \ 0 \n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__2\
    \ (0.00s)\n        tmpo4xs2f12_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmpo4xs2f12_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5\
    \ (0.00s)\n        tmpo4xs2f12_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmpo4xs2f12_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073831
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    if a > 100 {\n        return false\n\
    \    }\n    for i := 2; i <= a; i++ {\n        if i%a == 0 && i%3 != 0 {\n   \
    \         return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__2\
    \ (0.00s)\n        tmp2x3qatut_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp2x3qatut_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5\
    \ (0.00s)\n        tmp2x3qatut_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp2x3qatut_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073831
- exit_code: 2
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    if a >= 100 {\n        return false\n\
    \    }\n\n    x := 2\n    c := 0\n\n    for ; x <= a; x++ {\n        if isPrime(x)\
    \ {\n            c += x\n        }\n\n        if c == a {\n            return\
    \ true\n        }\n    }\n\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpolsd1yb4_test.go:24:12: undefined: isPrime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 2
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    if a > 100 {\n        fmt.Println(\"\
    a > 100\")\n        return false\n    }\n    \n    if a < 3 {\n        fmt.Println(\"\
    a < 3\")\n        return false\n    }\n    \n    // The first three prime numbers\
    \ are 2, 3 and 5\n    primeNumbers := [2]int{2, 3, 5}\n    \n    i := 2\n    j\
    \ := 2\n    \n    // Loop through the numbers and compare them\n    for i <= a\
    \ / 2 {\n        for j <= a / 2 {\n            \n            // Check if the current\
    \ number is divisible by the previous numbers\n            // to see if they are\
    \ a factor of a\n            if a%i == 0 && a%j == 0 {\n                return\
    \ true\n            }\n        }\n    }\n    \n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsvn50f1f_test.go:27:5: primeNumbers declared but not used

    /tmp/tmpsvn50f1f_test.go:27:34: index 2 is out of bounds (>= 2)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    if a < 100 {\n        fmt.Println(\"\
    a is less than 100\")\n        return false\n    }\n    \n    // We need to use\
    \ %* to achieve that we need to know the \n    // prime factorisation of 'a' before\
    \ doing the multiplication\n    // So let's make another function that returns\
    \ the prime factorisation of 'a':\n    \n    func primeFactorisation(aNumber int)\
    \ []int {\n        var primes []int\n        for i := 2; i < aNumber; i++ {\n\
    \            if aNumber % i == 0 {\n                break\n            }\n   \
    \         primes = append(primes, i)\n        }\n        return primes\n    }\n\
    \    \n    // And now we can do:\n    // a = 2 * 3 * 5\n    // factors = primeFactorisation(a)\n\
    \    // result = factors[3] * factors[2] * factors[1]\n    // result = 5 * 3 *\
    \ 2\n    var result int\n    var factors []int\n    factors = primeFactorisation(a)\n\
    \    result = factors[3] * factors[2] * factors[1]\n    \n    return result\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp33_u4c5g_test.go:25:10: expected ''('', found primeFactorisation

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    var count int = 0\n    primes := make([]int,\
    \ 100)\n\n    // Generate the primes up to the value given to the function\n \
    \   for i := 2; i <= a; i++ {\n        count += primes[i]\n        if count >\
    \ a / 2 {\n            return false\n        }\n\n        // Add i to each prime\
    \ number in primes\n        for j := 0; j < primes[i]; j++ {\n            primes[i]\
    \ += i\n        }\n\n        if i > len(primes) {\n            return false\n\
    \        }\n    }\n\n    // If we've made it this far, then we've verified that\
    \ the number\n    // is a multiply of 3 prime numbers.\n    return true\n}\n\n\
    func TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\npanic: runtime error: index out\
    \ of range [100] with length 100 [recovered]\n\tpanic: runtime error: index out\
    \ of range [100] with length 100\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513640,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513640, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_multiply_prime(...)\n\t/tmp/tmp462kild5_test.go:21\n\
    command-line-arguments_test.TestIs_Multiply_Prime(0xc0001a0340?)\n\t/tmp/tmp462kild5_test.go:52\
    \ +0x845\ntesting.tRunner(0xc0001a0340, 0x528f68)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073831
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    for i := 2; i < 100; i++ {\n       \
    \ if a % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpa6rehmgp_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpa6rehmgp_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpa6rehmgp_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpa6rehmgp_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpa6rehmgp_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073831
- exit_code: 2
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    var p1 int\n    var p2 int\n    var\
    \ p3 int\n    for i := 3; i <= 100; i++ {\n        if i%2 == 0 {\n           \
    \ continue // skip the even numbers\n        }\n        \n        for j := 3;\
    \ j <= 100; j++ {\n            if i%j == 0 {\n                continue // skip\
    \ the multiples of the prime factors\n            }\n            \n          \
    \  // i is divisible by j, now find and skip any numbers that end in 0 or 1\n\
    \            for k := 2; k <= 100; k++ {\n                if i%k == 0 {\n    \
    \                continue // skip the multiples of the prime factors\n       \
    \         }\n            }\n            \n            p1 = i\n            p2 =\
    \ j\n            p3 = k\n            \n            fmt.Println(\"i: \", i, \"\
    p1: \", p1, \"p2: \", p2, \"p3: \", p3)\n            \n            if p1 == p2\
    \ && p1 == p3 {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwqv1rfgq_test.go:38:18: undefined: k

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073831
- exit_code: 2
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    for _, b := range primes {\n       \
    \ if b == a && a%b == 0 {\n            return true\n        }\n    }\n    return\
    \ false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpt4zftr3o_test.go:16:23: undefined: primes

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073831
- exit_code: 2
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    if a == 0 {\n        return true\n \
    \   }\n    if a > 100 {\n        return false\n    }\n    // Find a factor\n \
    \   a := a\n    b := a\n    for a > 1 {\n        if a % 2 == 1 {\n           \
    \ break\n        }\n        a = a / 2\n    }\n    for b > 1 {\n        if b %\
    \ 2 == 1 {\n            break\n        }\n        b = b / 2\n    }\n\n    // if\
    \ all numbers were divisible by 2 and 1 then we know that all numbers were multiplications\
    \ of prime numbers.\n    if a % 2 == 0 && b != 1 {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppu6ovsuf_test.go:23:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073831
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    switch {\n    case a < 100:\n      \
    \  return false\n    case a < 31:\n        return true\n    default:\n       \
    \ i := 2\n        j := 1\n        while i <= a / i {\n            if i % a ==\
    \ 0 {\n                j += 1\n            }\n            i += j\n        }\n\
    \        return true\n    }\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n\
    \  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: false },\n     { actual: candidate(30), expected: true },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105),\
    \ expected: true },\n     { actual: candidate(126), expected: false },\n     {\
    \ actual: candidate(729), expected: false },\n     { actual: candidate(891), expected:\
    \ false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpsr4gvozt_test.go:24:15: expected '';'', found i

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if\
    \ a%i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0\
    \ (0.00s)\n        tmpctxq9qxc_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmpctxq9qxc_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2\
    \ (0.00s)\n        tmpctxq9qxc_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmpctxq9qxc_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5\
    \ (0.00s)\n        tmpctxq9qxc_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmpctxq9qxc_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073831
- exit_code: 2
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    var a int\n    var b int\n\n    for\
    \ a < 100 {\n        if a%2 == 0 {\n            for b = 3; b <= a; b += 2 {\n\
    \                if(b%2 == 0 && b != a) {\n                    if a%b == 0 {\n\
    \                        return false\n                    } else {\n        \
    \                return true\n                    }\n                }\n     \
    \       }\n        } else {\n            for b = 3; b <= a; b += 2 {\n       \
    \         if(b%2 == 1) {\n                    if a%b == 0 {\n                \
    \        return false\n                    } else {\n                        return\
    \ true\n                    }\n                }\n            }\n        }\n \
    \       a += 2\n    }\n\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T)\
    \ {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: false },\n     { actual: candidate(30), expected: true },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105),\
    \ expected: true },\n     { actual: candidate(126), expected: false },\n     {\
    \ actual: candidate(729), expected: false },\n     { actual: candidate(891), expected:\
    \ false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpas087u_r_test.go:16:9:\
    \ a redeclared in this block\n\t/tmp/tmpas087u_r_test.go:15:24: other declaration\
    \ of a\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073831
- exit_code: 2
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    b := 2\n    primes := [3]int{2, 3, 5}\n\
    \    for i := 4; i <= 100; i++ {\n        if a >= primes[i] && a < primes[(i+1)%3]+1\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbd5we85q_test.go:16:5: b declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073831
- exit_code: 2
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    if a == 1 {\n        return false\n\
    \    }\n    \n    if a >= 100 {\n        return false\n    }\n    \n    divisor\
    \ := a - 2\n    var isPrime bool = false\n    \n    for ; a > 2; a-- {\n     \
    \   isPrime = true\n        if a <= 2 {\n            break\n        }\n      \
    \  for divisor_prime := 2; divisor_prime < a; divisor_prime++ {\n            if\
    \ a % divisor_prime == 0 {\n                isPrime = false\n                break\n\
    \            }\n        }\n        if isPrime {\n            break\n        }\n\
    \    }\n    return isPrime\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n\
    \  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: false },\n     { actual: candidate(30), expected: true },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105),\
    \ expected: true },\n     { actual: candidate(126), expected: false },\n     {\
    \ actual: candidate(729), expected: false },\n     { actual: candidate(891), expected:\
    \ false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa5qhvwtd_test.go:24:5: divisor declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073831
- exit_code: 2
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    if a < 100 {\n        return false\n\
    \    }\n\n    a %= 10\n    if a == 0 {\n        return false\n    }\n\n    for\
    \ a > 0 {\n        for b := 2; b < a; b++ {\n            if is_prime(b) {\n  \
    \              if is_prime(a * b) {\n                    return true\n       \
    \         }\n            }\n        }\n        a++\n    }\n\n    return false\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoj0d7h___test.go:27:16: undefined: is_prime

    /tmp/tmpoj0d7h___test.go:28:20: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073832
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    if a == 0 {\n        return false\n\
    \    }\n    \n    primes := make([]int, 100)\n    primes[0] = 2 \n    primes[1]\
    \ = 3\n    primes[2] = 5\n    primes[3] = 7 \n    primes[4] = 11\n    primes[5]\
    \ = 13\n    primes[6] = 17\n    primes[7] = 19\n    primes[8] = 23\n    primes[9]\
    \ = 29\n    primes[10] = 31\n    primes[11] = 37\n    primes[12] = 41\n    primes[13]\
    \ = 43\n    primes[14] = 47\n    primes[15] = 53\n    primes[16] = 59\n    primes[17]\
    \ = 61\n    primes[18] = 67\n    primes[19] = 71\n    primes[20] = 73\n    primes[21]\
    \ = 79\n    primes[22] = 83\n    primes[23] = 89\n    primes[24] = 97\n    primes[25]\
    \ = 101\n    primes[26] = 103\n    primes[27] = 107\n    primes[28] = 109\n  \
    \  primes[29] = 113\n    primes[30] = 116\n    primes[31] = 120\n    primes[32]\
    \ = 125\n    primes[33] = 130\n    primes[34] = 132\n    primes[35] = 137\n  \
    \  primes[36] = 142\n    primes[37] = 147\n    primes[38] = 151\n    primes[39]\
    \ = 154\n    primes[40] = 159\n    primes[41] = 162\n    primes[42] = 165\n  \
    \  primes[43] = 168\n    primes[44] = 173\n    primes[45] = 179\n    primes[46]\
    \ = 181\n    primes[47] = 186\n    primes[48] = 191\n    primes[49] = 196\n  \
    \  primes[50] = 203\n    primes[51] = 209\n    primes[52] = 214\n    primes[53]\
    \ = 220\n    primes[54] = 225\n    primes[55] = 228\n    primes[56] = 233\n  \
    \  primes[57] = 238\n    primes[58] = 243\n    primes[59] = 250\n    primes[60]\
    \ = 254\n    primes[61] = 258\n    primes[62] = 263\n    primes[63] = 268\n  \
    \  primes[64] = 273\n    primes[65] = 280\n    primes[66] = 285\n    primes[67]\
    \ = 289\n    primes[68] = 293\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpr3lmdqea_test.go:90:6: expected ''('', found TestIs_Multiply_Prime

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073831
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    // return false if the number is less\
    \ than or equal to 0\n    if a <= 0 {\n        return false\n    }\n\n    // A\
    \ prime number is a natural number greater than 1 that has no positive divisors\
    \ other than 1 and itself.\n    // A natural number greater than or equal to 1\
    \ is known as a positive number.\n    // The first prime numbers (2, 3, and 5)\
    \ are known as 2, 3, and 5, respectively\n    // So first we check for the number\
    \ to be equal to 2\n    if a == 2 {\n        return true\n    }\n    \n    //\
    \ If the given number is a multiple of 3, the number is prime (true)\n    if a\
    \ % 3 == 0 {\n        return true\n    }\n\n    // The first 6 prime numbers are\
    \ the only even prime numbers\n    if a >= 6 {\n        return true\n    }\n\n\
    \    // The first 5 prime numbers are the only odd prime numbers\n    if a >=\
    \ 5 {\n        return true\n    }\n\n    // If the number is even, the number\
    \ is prime\n    if a % 2 == 0 {\n        return true\n    }\n\n    // If the number\
    \ is odd, we need to check if the number is divisible by one of the numbers in\
    \ the range 2-49\n    // If it is, we know that the number is prime\n    if a\
    \ % 2 == 1 {\n        for i := 3; i < 49; i++ {\n            if a % i == 0 {\n\
    \                return true\n            }\n        }\n        return false\n\
    \    }\n\n    // We know that the number is divisible by 3\n    for i := 3; i\
    \ < 49; i++ {\n        // If it is divisible by i, it is not prime (true)\n  \
    \      if a % i == 0 {\n            return false\n        }\n    }\n\n    return\
    \ true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0\
    \ (0.00s)\n        tmpck_r3em9_test.go:93: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__3 (0.00s)\n        tmpck_r3em9_test.go:93:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__6\
    \ (0.00s)\n        tmpck_r3em9_test.go:93: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__7 (0.00s)\n        tmpck_r3em9_test.go:93:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__8\
    \ (0.00s)\n        tmpck_r3em9_test.go:93: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073832
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    if a < 100 {\n        return true\n\
    \    }\n    var p int\n    // p is used to test if p * p is prime\n    for p =\
    \ 3; p < a; p += 2 {\n        if a % p == 0 {\n            return false\n    \
    \    }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T)\
    \ {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: false },\n     { actual: candidate(30), expected: true },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105),\
    \ expected: true },\n     { actual: candidate(126), expected: false },\n     {\
    \ actual: candidate(729), expected: false },\n     { actual: candidate(891), expected:\
    \ false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0\
    \ (0.00s)\n        tmptv9b80bv_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__3 (0.00s)\n        tmptv9b80bv_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmptv9b80bv_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmptv9b80bv_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmptv9b80bv_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073833
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    if a < 100 {\n        return false\n\
    \    }\n\n    a -= 1\n\n    // The prime factors we are looking for\n    primes\
    \ := []int{2, 3, 5}\n\n    for _, p := range primes {\n        t := a*p\n    \
    \    c := 1\n\n        for t != 1 {\n            t /= p\n            c++\n   \
    \     }\n\n        if c > 3 {\n            return false\n        }\n    }\n\n\
    \    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpgw7vvnkg_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpgw7vvnkg_test.go:64:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpgw7vvnkg_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpgw7vvnkg_test.go:64:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpgw7vvnkg_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073833
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    if a == 1 {\n        return true\n \
    \   }\n    if a == 2 {\n        return true\n    }\n    \n    divisor := a\n \
    \   \n    for divisor%2==0 && divisor%5==0 && divisor!=1 && divisor!=4 {\n   \
    \     divisor--\n    }\n    \n    if divisor%4==0 {\n        return false\n  \
    \  }\n    if divisor%2==0 {\n        return false\n    }\n    \n    for divisor%3==0\
    \ && divisor!=1 && divisor!=4 {\n        divisor--\n    }\n    \n    if divisor%3==0\
    \ {\n        return false\n    }\n    \n    return true\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0\
    \ (0.00s)\n        tmpyk2737co_test.go:69: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpyk2737co_test.go:69:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__3\
    \ (0.00s)\n        tmpyk2737co_test.go:69: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__7 (0.00s)\n        tmpyk2737co_test.go:69:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__8\
    \ (0.00s)\n        tmpyk2737co_test.go:69: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073833
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    var primes [100]bool\n    var a2, a3,\
    \ a5 int\n    \n    for i := 2; i < 100; i++ {\n        if primes[i] {\n     \
    \       continue\n        }\n        a2 = 2 * i\n        a3 = 2 * i\n        a5\
    \ = 2 * (i + 1)\n        if a < 100 && a2 + a3 > a && a2 + a3 < 100 && a2 + a5\
    \ > a && a2 + a5 < 100 {\n            primes[i] = true\n        } else {\n   \
    \         primes[i] = false\n        }\n    }\n    return primes[a]\n}\n\nfunc\
    \ TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\npanic: runtime error: index out\
    \ of range [125] with length 100 [recovered]\n\tpanic: runtime error: index out\
    \ of range [125] with length 100\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512640,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512640, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_multiply_prime(0x5e2ea0?)\n\t/tmp/tmp8b69hw0m_test.go:32\
    \ +0xc5\ncommand-line-arguments_test.TestIs_Multiply_Prime(0x0?)\n\t/tmp/tmp8b69hw0m_test.go:46\
    \ +0xa7\ntesting.tRunner(0xc0001a01a0, 0x527f68)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073833
- exit_code: 2
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    var nums []int\n    for i := 2; i <\
    \ a; i++ {\n        if i%2 == 0 {\n            continue\n        }\n        for\
    \ j := 2; j < i; j++ {\n            if i%j == 0 {\n                break\n   \
    \         }\n            if j%i == 0 {\n                nums = append(nums, j)\n\
    \            }\n        }\n    }\n    // sort nums \n    sort.Ints(nums)\n   \
    \ for _, n := range nums {\n        for _, mx := range nums {\n            if\
    \ n == mx {\n                continue\n            }\n            if a*mx > n*n\
    \ {\n                return false\n            }\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2iiejosl_test.go:31:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073832
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    if (a%2 == 0) {\n        return false\n\
    \    }\n    \n    for i := 3; i <= a/2; i += 2 {\n        for j := i*i; j <= a/2;\
    \ j +=2 {\n            if a % j == 0 {\n                return false\n       \
    \     }\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0\
    \ (0.00s)\n        tmpesahslhn_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmpesahslhn_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2\
    \ (0.00s)\n        tmpesahslhn_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmpesahslhn_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5\
    \ (0.00s)\n        tmpesahslhn_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmpesahslhn_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073833
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    for i := 2; i <= a; i++ {\n        if\
    \ a % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmp97ph4ljc_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp97ph4ljc_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmp97ph4ljc_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp97ph4ljc_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmp97ph4ljc_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073833
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    if a <= 100 {\n        return false\n\
    \    }\n    var is_multiply_prime_test [3]bool\n    var multiplier int\n    multiplier\
    \ = 2\n    for i := 0; i < 3; i++ {\n        is_multiply_prime_test[i] = false\n\
    \    }\n    for i := 3; i < 100; i++ {\n        if a == i*multiplier {\n     \
    \       is_multiply_prime_test[0] = true\n            is_multiply_prime_test[1]\
    \ = true\n            is_multiply_prime_test[2] = true\n            multiplier\
    \ += 1\n        }\n        for j := 0; j < 3; j++ {\n            if a == i*multiplier\
    \ {\n                is_multiply_prime_test[j] = true\n            }\n       \
    \ }\n    }\n    for i := 0; i <= 2; i++ {\n        if !is_multiply_prime_test[i]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmp5j13tmpz_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp5j13tmpz_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmp5j13tmpz_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp5j13tmpz_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__6\
    \ (0.00s)\n        tmp5j13tmpz_test.go:68: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp5j13tmpz_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073833
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    for i := 0; i < 100; i++ {\n       \
    \ if a > i*i {\n            break\n        }\n        if i%2 == 0 {\n        \
    \    if a % i == 0 {\n                return false\n            }\n        } else\
    \ {\n            if a % i == 1 {\n                return false\n            }\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T)\
    \ {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: false },\n     { actual: candidate(30), expected: true },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105),\
    \ expected: true },\n     { actual: candidate(126), expected: false },\n     {\
    \ actual: candidate(729), expected: false },\n     { actual: candidate(891), expected:\
    \ false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0\
    \ (0.00s)\n        tmp2tjpl5wt_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__3 (0.00s)\n        tmp2tjpl5wt_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__6\
    \ (0.00s)\n        tmp2tjpl5wt_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__7 (0.00s)\n        tmp2tjpl5wt_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__8\
    \ (0.00s)\n        tmp2tjpl5wt_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073833
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    n := 3\n    // Loop to find multiplication\
    \ factors of n until it is less than 100\n    for i := 3; i <= a; i += 2 {\n \
    \       if (n%i) == 0 {\n            n /= i\n        } else {\n            return\
    \ false\n        }\n    }\n    return (n == 1)\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpsxslsry3_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpsxslsry3_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpsxslsry3_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpsxslsry3_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpsxslsry3_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073833
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    q := 2\n    l := a / q\n\n    for i\
    \ := 1; i <= l; i++ {\n        if (a%q == 0 && q != i+1) {\n            return\
    \ false\n        }\n\n        q *= q\n    }\n\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\npanic: runtime error: integer\
    \ divide by zero [recovered]\n\tpanic: runtime error: integer divide by zero\n\
    \ngoroutine 34 [running]:\ntesting.tRunner.func1.2({0x5038c0, 0x5f29a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5038c0, 0x5f29a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_multiply_prime(...)\n\t/tmp/tmpyf_wp8m7_test.go:20\n\
    command-line-arguments_test.TestIs_Multiply_Prime(0x0?)\n\t/tmp/tmpyf_wp8m7_test.go:38\
    \ +0x759\ntesting.tRunner(0xc00019aea0, 0x528f68)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073833
- exit_code: 2
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    \n    // Find prime number\n    p :=\
    \ find_prime(a)\n    \n    // If the current number is less than 100, return false\n\
    \    if p < 100 {\n        return false\n    }\n    \n    // If the current number\
    \ is equal to 3, return true\n    if p == 3 {\n        return true\n    }\n  \
    \  \n    // If the current number is greater than 100, return false\n    if p\
    \ > 100 {\n        return false\n    }\n    \n    // Test if the current number\
    \ is divisible by all prime numbers greater than or equal to p\n    primes :=\
    \ get_primes(p)\n    \n    for _, primeInt := range primes {\n        if a % primeInt\
    \ != 0 {\n            return false\n        }\n    }\n    \n    return true\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwm53uoaz_test.go:18:10: undefined: find_prime

    /tmp/tmpwm53uoaz_test.go:36:15: undefined: get_primes

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073833
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        for\
    \ j := 2; j < i; j++ {\n            if i != j*i {\n                c := a / i\n\
    \                if c % j == 0 {\n                    return false\n         \
    \       }\n            }\n        }\n    }\n    return true\n}\n</code>\n<|/ a\
    \ dscore=2 |>\n<| a |>\n<code>\nfunc TestIs_Multiply_Prime(t *testing.T) {\n \
    \ candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: false },\n     { actual: candidate(30), expected: true },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105),\
    \ expected: true },\n     { actual: candidate(126), expected: false },\n     {\
    \ actual: candidate(729), expected: false },\n     { actual: candidate(891), expected:\
    \ false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6tmpmnsb_test.go:28:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073832
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    var n int = a\n    var b bool\n    \n\
    \    for i := 0; i < 100; i++ {\n        if n%i == 0 {\n            b = true\n\
    \            break\n        } else {\n            b = false\n        }\n    }\n\
    \n    return b\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate :=\
    \ is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\npanic: runtime error: integer\
    \ divide by zero [recovered]\n\tpanic: runtime error: integer divide by zero\n\
    \ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5038c0, 0x5f29a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5038c0, 0x5f29a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_multiply_prime(...)\n\t/tmp/tmp560klraq_test.go:20\n\
    command-line-arguments_test.TestIs_Multiply_Prime(0x0?)\n\t/tmp/tmp560klraq_test.go:38\
    \ +0x5c5\ntesting.tRunner(0xc000192680, 0x528f68)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073834
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    var i int\n\n    if a == 0 {\n     \
    \   return false\n    }\n\n    if a > 100 {\n        return false\n    }\n\n \
    \   i = a / 2\n    while (i >= 1) {\n        if a % i == 0 {\n            return\
    \ false\n        }\n        i = i / 2\n    }\n\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqh_ufk1o_test.go:27:20: expected '';'', found ''{''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073832
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    b := int(float64(a))\n    prime := true\n\
    \    for i := 2; i <= b/2 && prime; i++ {\n        if a % i == 0 {\n         \
    \   prime = false\n        }\n    }\n    return prime\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0\
    \ (0.00s)\n        tmpmiqcgsyp_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmpmiqcgsyp_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2\
    \ (0.00s)\n        tmpmiqcgsyp_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmpmiqcgsyp_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5\
    \ (0.00s)\n        tmpmiqcgsyp_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmpmiqcgsyp_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073834
- exit_code: 2
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    x := a\n    y := 0\n    prime := true\n\
    \    for x < 100 {\n        if isPrime(x) {\n            if y == 0 {\n       \
    \         y = x\n            } else {\n                y = y*x + x\n         \
    \   }\n        }\n        x = x + y\n    }\n    if y == 0 {\n        prime = false\n\
    \    }\n    return prime\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp8pgpubx_test.go:20:12: undefined: isPrime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073833
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    if a > 100 {\n        return false\n\
    \    }\n\n    max := a + 2\n\n    for i := 3; i <= max; i++ {\n        if a %\
    \ i == 0 {\n            // if a % i == 0, then i is also not prime\n         \
    \   // we can skip all the other multiples of i\n            for j := i * i; j\
    \ < max; j += i {\n                if j > max {\n                    return false\n\
    \                }\n\n                // a % i == 0 implies j is also not prime\
    \ \n                // because j + i > max which implies j*i < max\n         \
    \       if a % j == 0 {\n                    return false\n                }\n\
    \            }\n        }\n    }\n\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0\
    \ (0.00s)\n        tmpxse4rjtn_test.go:65: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmpxse4rjtn_test.go:65:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__3\
    \ (0.00s)\n        tmpxse4rjtn_test.go:65: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmpxse4rjtn_test.go:65:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5\
    \ (0.00s)\n        tmpxse4rjtn_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmpxse4rjtn_test.go:65:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073834
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    // Define a helper function that checks\
    \ if a number is a prime number.\n    // If the number is not prime then it must\
    \ be a multiplication of three prime numbers.\n    // It must be less than 100.\n\
    \    // Example: 30 = 2 * 3 * 5\n    if isPrime(a) {\n        return true\n  \
    \  }\n\n    // Define a helper function that checks if a number is divisible by\
    \ 2.\n    // It must be a multiplication of three prime numbers.\n    // It must\
    \ be less than 100.\n    // Example: 30 = 2 * 3 * 5\n    if isDivisibleBy(a, 2)\
    \ {\n        return true\n    }\n\n    // Define a helper function that checks\
    \ if a number is divisible by 3.\n    // It must be a multiplication of three\
    \ prime numbers.\n    // It must be less than 100.\n    // Example: 30 = 2 * 3\
    \ * 5\n    if isDivisibleBy(a, 3) {\n        return true\n    }\n\n    // Define\
    \ a helper function that checks if a number is divisible by 5.\n    // It must\
    \ be a multiplication of three prime numbers.\n    // It must be less than 100.\n\
    \    // Example: 30 = 2 * 3 * 5\n    if isDivisibleBy(a, 5) {\n        return\
    \ true\n    }\n\n    // Define a helper function that checks if a number is a\
    \ multiple of 5.\n    // It must be a multiplication of three prime numbers.\n\
    \    // It must be less than 100.\n    // Example: 30 = 2 * 3 * 5\n    if isMultipleOf(a,\
    \ 5) {\n        return true\n    }\n\n    // Define a helper function that checks\
    \ if a number is a multiple of 7.\n    // It must be a multiplication of three\
    \ prime numbers.\n    // It must be less than 100.\n    // Example: 30 = 2 * 3\
    \ * 5\n    if isMultipleOf(a, 7) {\n        return true\n    }\n\n    // Define\
    \ a helper function that checks if a number is a multiple of 11.\n    // It must\
    \ be a multiplication of three prime numbers.\n    // It must be less than 100.\n\
    \    // Example: 30 = 2 * 3 * 5\n    if isMultipleOf(a, 11) {\n        return\
    \ true\n    }\n\n    // Define a helper function that checks if a number is a\
    \ multiple of 13.\n    // It must be a multiplication of three prime numbers.\n\
    \    // It must be less than 100.\n    // Example: 30 = 2 * 3 * 5\n    if isMultipleOf(a,\
    \ 13) {\n        return true\n    }\n\n    // Define a helper function that checks\
    \ if a number is a multiple of 17.\n    // It must be a multiplication of three\
    \ prime numbers.\n    // It must be less than 100.\n    // Example: 30 = 2 * 3\
    \ * 5\n    if isMultipleOf(a, 17) {\n        return true\n    }\n\n    // Define\
    \ a helper function that checks if a number is a multiple of 19.\n    // It must\
    \ be a multiplication of three prime numbers.\n    // It must be less than 100.\n\
    \    // Example: 30 = 2 * 3 * 5\n    if isMultipleOf(a, 19) {\n        return\
    \ true\n    }\n\n    // Define a \nfunc TestIs_Multiply_Prime(t *testing.T) {\n\
    \  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: false },\n     { actual: candidate(30), expected: true },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105),\
    \ expected: true },\n     { actual: candidate(126), expected: false },\n     {\
    \ actual: candidate(729), expected: false },\n     { actual: candidate(891), expected:\
    \ false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp7qy_53op_test.go:97:6: expected ''('', found TestIs_Multiply_Prime

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073833
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    var b = []int{2, 3, 5}\n    for i :=\
    \ 0; i < len(b); i++ {\n        if a % b[i] == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T)\
    \ {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: false },\n     { actual: candidate(30), expected: true },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105),\
    \ expected: true },\n     { actual: candidate(126), expected: false },\n     {\
    \ actual: candidate(729), expected: false },\n     { actual: candidate(891), expected:\
    \ false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpe1br1ru8_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpe1br1ru8_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpe1br1ru8_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpe1br1ru8_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073835
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    var result int\n\n    for i := 2; i\
    \ < a; i++ {\n        if a % i == 0 {\n            result = 1\n            break\n\
    \        }\n    }\n\n    return result == 1\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__3\
    \ (0.00s)\n        tmputbvem6a_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__6 (0.00s)\n        tmputbvem6a_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__7\
    \ (0.00s)\n        tmputbvem6a_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__8 (0.00s)\n        tmputbvem6a_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073835
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    p := []int{2, 3, 5}\n    found := false\n\
    \    for _, b := range p {\n        if b == a {\n            found = true\n  \
    \          break\n        }\n    }\n    return found\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0\
    \ (0.00s)\n        tmpb4rap2e7_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmpb4rap2e7_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2\
    \ (0.00s)\n        tmpb4rap2e7_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmpb4rap2e7_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5\
    \ (0.00s)\n        tmpb4rap2e7_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmpb4rap2e7_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073835
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    if a == 1 {\n        return true\n \
    \   }\n\n    if a > 100 {\n        return false\n    }\n\n    // we know that\
    \ if a is multiple of 3 prime number\n    // then a = 2 * 3 * 5\n    // we know\
    \ that (a) is less then 100\n    // so, if a is multiple of 3 prime number \n\
    \    // then a = 2 * 3 * 5 => a = 2 * 3 * 7\n    // we know that if a = 2 * 3\
    \ * 7 => a = 3 * 5 => a = 2 * 5 * 7\n    // we know that (a) is less then 100\n\
    \    // so, if a is multiple of 3 prime number \n    // then a = 2 * 3 * 7 =>\
    \ a = 2 * 5 * 7 => a = 2 * 7 * 7\n    // we know that if a = 2 * 7 * 7 => a =\
    \ 7 * 7 => a = 2 * 10 * 7\n    // we know that (a) is less then 100\n    // so,\
    \ if a is multiple of 3 prime number \n    // then a = 2 * 5 * 7 => a = 2 * 10\
    \ * 7 => a = 10 * 7\n    // we know that if a = 10 * 7 => a = 10 * 7 => a = 10\
    \ * 7\n    // we know that (a) is less then 100\n    // so, if a is multiple of\
    \ 3 prime number \n    // then a = 10 * 7 => a = 10 * 7 => a = 10 * 7\n    //\
    \ we know that if a = 10 * 7 => a = 10 * 7 => a = 10 * 7\n    // we know that\
    \ (a) is less then 100\n    // so, if a is multiple of 3 prime number \n    //\
    \ then a = 10 * 7 => a = 10 * 7 => a = 10 * 7\n    // we know that if a = 10 *\
    \ 7 => a = 10 * 7 => a = 10 * 7\n    // we know that (a) is less then 100\n  \
    \  // so, if a is multiple of 3 prime number \n    // then a = 10 * 7 => a = 10\
    \ * 7 => a = 10 * 7\n    // we know that if a = 10 * 7 => a = 10 * 7 => a = 10\
    \ * 7\n    // we know that (a) is less then 100\n    // so, if a is multiple of\
    \ 3 prime number \n    // then a = 10 * 7 => a = 10 * 7 => a = 10 * 7\n    //\
    \ we know that if a = 10 * 7 => a = 10 * 7 => a = 10 * 7\n    // we know that\
    \ (a) is less then 100\n    // so, if a is multiple of 3 prime number \n    //\
    \ then a = 10 * 7 => a = 10 * 7 => a = 10 * 7\n    // we know that if a = 10 *\
    \ 7 => a = 10 * 7 => a = 10 * 7\n    // we know that (a) is less then 100\n\n\
    func TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpdx9tzv85_test.go:60:6: expected ''('', found TestIs_Multiply_Prime

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073834
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        //\
    \ Check if i is a prime\n        for j := 2; j < i; j++ {\n            if i%j\
    \ == 0 {\n                return false\n            }\n        }\n    }\n\n  \
    \  return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate :=\
    \ is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmp9kxfee1x_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp9kxfee1x_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmp9kxfee1x_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp9kxfee1x_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmp9kxfee1x_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073835
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    mult := 2\n    c := 3\n    for mult\
    \ < 100 && c <= a && a % mult != 0 {\n        c++\n        if c*c > mult {\n \
    \           mult *= c\n        }\n    }\n    return mult == a\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpd082am8r_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpd082am8r_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpd082am8r_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpd082am8r_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpd082am8r_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073835
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    primes := []int{2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29}\n    sum := 0\n    for _, i := range primes {\n        if a\
    \ >= i {\n            sum += a\n        }\n    }\n    return sum > 100\n}\n\n\
    func TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__2\
    \ (0.00s)\n        tmpq8areh34_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__6 (0.00s)\n        tmpq8areh34_test.go:48:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__7\
    \ (0.00s)\n        tmpq8areh34_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__8 (0.00s)\n        tmpq8areh34_test.go:48:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073835
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    for i := 3; i <= 100; i++ {\n      \
    \  if a % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpkn72ysea_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpkn72ysea_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpkn72ysea_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpkn72ysea_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpkn72ysea_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073835
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    result := false\n    sqrt_of_a := 1\n\
    \    for i := 0; i < a; i++ {\n        sqrt_of_a *= i\n    }\n    for i := 1;\
    \ i < sqrt_of_a; i++ {\n        if ((a % i) == 0) {\n            result := true\n\
    \            break\n        }\n    }\n    return result\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a |>\nYou can find the prime factors using the Sieve of Eratosthenes:\n\
    <code>\npackage main\n\nimport (\n    \"fmt\"\n)\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp9fhq1egf_test.go:29:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073834
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    if a == 1 {\n        return true\n \
    \   }\n    for a != 1 {\n        if a % 3 == 0 && a % 5 == 0 {\n            return\
    \ false\n        }\n        a = a / 3\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0\
    \ (0.00s)\n        tmpdrrvxg_9_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmpdrrvxg_9_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2\
    \ (0.00s)\n        tmpdrrvxg_9_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__3 (0.00s)\n        tmpdrrvxg_9_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5\
    \ (0.00s)\n        tmpdrrvxg_9_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__6 (0.00s)\n        tmpdrrvxg_9_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__7\
    \ (0.00s)\n        tmpdrrvxg_9_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__8 (0.00s)\n        tmpdrrvxg_9_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073835
- exit_code: null
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    // your code\n    start := 2\n    end\
    \ := 50\n    for start <= end {\n        mult := start\n        if mult == a {\n\
    \            return true\n        }\n        for mult < a {\n            if (a\
    \ % mult) == 0 {\n                break\n            }\n            mult *= 2\n\
    \        }\n    }\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T)\
    \ {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: false },\n     { actual: candidate(30), expected: true },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105),\
    \ expected: true },\n     { actual: candidate(126), expected: false },\n     {\
    \ actual: candidate(729), expected: false },\n     { actual: candidate(891), expected:\
    \ false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073848
- exit_code: 2
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    // prime numbers greater than 100 are\
    \ irrelevant for this exercise\n    if a > 100 {\n        return true\n    }\n\
    \    if a == 1 {\n        return true\n    }\n    if a > 1 {\n        return false\n\
    \    }\n    \n    // check all multiples of prime\n    m := 2\n    \n    for m\
    \ <= 100 {\n        if isMultiply(a, m) {\n            return true\n        }\n\
    \        m = m * 2\n    }\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg1e2aa5l_test.go:31:12: undefined: isMultiply

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073835
- exit_code: 2
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    for i := 2; i <= a; i++ {\n        if\
    \ isMultiplyPrime(i) {\n            return true\n        }\n    }\n    return\
    \ false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp54rbq2c2_test.go:17:12: undefined: isMultiplyPrime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073835
- exit_code: 2
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    return a < 100 && is_multiply_prime_test(a)\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_scl9lxu_test.go:16:23: undefined: is_multiply_prime_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073835
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    if a < 100 {\n        return false\n\
    \    }\n\n    for i := 2; i <= a / 2; i += 1 {\n        if i%a == 0 {\n      \
    \      return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpqzf7qysh_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpqzf7qysh_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__6\
    \ (0.00s)\n        tmpqzf7qysh_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__7 (0.00s)\n        tmpqzf7qysh_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__8\
    \ (0.00s)\n        tmpqzf7qysh_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073835
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    a %= 100\n    return ((3*a)+5)%3 ==\
    \ 0\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpzvhse_ck_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpzvhse_ck_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpzvhse_ck_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpzvhse_ck_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpzvhse_ck_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073835
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    // First check that the number isn't\
    \ less than 2\n    if a < 2 {\n        return false\n    }\n    // Now check to\
    \ see if the number is a factor of 2\n    if a % 2 == 0 {\n        return false\n\
    \    }\n    // Now check if any number is a factor of 3\n    for i := 3; i <=\
    \ a; i++ {\n        if a % i == 0 {\n            return false\n        }\n   \
    \ }\n    // Now check to see if the number is equal to the multiplication of 3\
    \ prime numbers\n    // i.e. a < 100\n    for i := 2; i < a; i++ {\n        if\
    \ a % i == 0 {\n            return false\n        }\n    }\n    // All conditions\
    \ were met, return true\n    return true\n}\nfunc TestIs_Multiply_Prime(t *testing.T)\
    \ {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: false },\n     { actual: candidate(30), expected: true },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105),\
    \ expected: true },\n     { actual: candidate(126), expected: false },\n     {\
    \ actual: candidate(729), expected: false },\n     { actual: candidate(891), expected:\
    \ false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmp7ii_ucy1_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7ii_ucy1_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmp7ii_ucy1_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7ii_ucy1_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmp7ii_ucy1_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073836
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    \n    for i := 2; i <= a / 3; i++ {\n\
    \        for j := i + i; j > 0; j-- {\n            if a % j == 0 {\n         \
    \       return false\n            }\n        }\n    }\n    \n    return true\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0\
    \ (0.00s)\n        tmp1myp4bre_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp1myp4bre_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2\
    \ (0.00s)\n        tmp1myp4bre_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp1myp4bre_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5\
    \ (0.00s)\n        tmp1myp4bre_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp1myp4bre_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073836
- exit_code: 2
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    m := a\n    if a%2 == 0 && a%3 == 0\
    \ && a%5 == 0 {\n        m = 2\n    }\n\n    for {\n        if isPrime(m) {\n\
    \            return true\n        }\n        for i := 2; i <= m; i++ {\n     \
    \       if m%i == 0 {\n                return false\n            }\n        }\n\
    \    }\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_kre0c4e_test.go:22:12: undefined: isPrime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073836
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    b := a / 3\n    c := b * b\n    d :=\
    \ c / 2\n\n    for ; b < 100; b++ {\n        if a % b == 0 {\n            c =\
    \ c / 2\n            continue\n        }\n        \n        if c % b == 0 {\n\
    \            d = d + 1\n            if d > 2 {\n                return false\n\
    \            }\n            continue\n        }\n        \n        break\n   \
    \ }\n\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpt16o2n31_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpt16o2n31_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__6\
    \ (0.00s)\n        tmpt16o2n31_test.go:62: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__7 (0.00s)\n        tmpt16o2n31_test.go:62:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__8\
    \ (0.00s)\n        tmpt16o2n31_test.go:62: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073836
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    t := 0\n    for i := a; i > 0; i-- {\n\
    \        if i%2 != 0 {\n            if i%3 != 0 {\n                if i%5 != 0\
    \ {\n                    t++\n                }\n            }\n        }\n  \
    \  }\n    if t == 1 {\n        return true\n    }\n    return false\n}\n</cell>\n\
    <text>\nTime Complexity\n\n</text>\n<cell>\n%%writefile test.go\npackage is_multiply_prime_test\n\
    \nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc TestIs_Multiply_Prime(t *testing.T)\
    \ {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: false },\n     { actual: candidate(30), expected: true },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105),\
    \ expected: true },\n     { actual: candidate(126), expected: false },\n     {\
    \ actual: candidate(729), expected: false },\n     { actual: candidate(891), expected:\
    \ false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmph5ij64k6_test.go:31:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073835
- exit_code: 2
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    if a == 0 {\n        return false\n\
    \    }\n    // return true only if prime number greater then 100\n    if a < 100\
    \ {\n        return false\n    }\n    // if the number is prime then return true\n\
    \    if isPrime(a) {\n        return true\n    }\n    // if the number is odd,\
    \ then we find 3 prime numbers,\n    // if any of them is equal to our number,\
    \ then return true\n    // else if any of them is different from our number, then\
    \ return false\n    // else if any of them is equal and divisible by our number,\
    \ then return true\n    // else if any of them is divisible by our number, then\
    \ return false\n    // else the number is divisible by 2, then return false\n\
    \    for n := 2; n*n+1 <= 100; n++ {\n        if n%a == 0 {\n            return\
    \ true\n        }\n    }\n    for n := 2; n*n+1 <= 100; n++ {\n        if n%a\
    \ == n {\n            return false\n        }\n    }\n    for n := 2; n*n+1 <=\
    \ 100; n++ {\n        if n%a == n*n {\n            return true\n        }\n  \
    \  }\n    for n := 2; n*n+1 <= 100; n++ {\n        if n%a == n*(n*n) {\n     \
    \       return false\n        }\n    }\n    return false\n}\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_274xch4_test.go:24:8: undefined: isPrime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073836
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    var b int = 2*a*3\n    if b > 100 {\n\
    \        fmt.Println(\"This is not a prime number\")\n        return false\n \
    \   } else {\n        for i := b; i <= 100; i++ {\n            if i%a == 0 {\n\
    \                fmt.Printf(\"This %d is not prime number\\n\", a)\n         \
    \       return false\n            }\n        }\n    }\n    fmt.Println(\"This\
    \ is a prime number\")\n    return true\n}\n</code>\n<|/ a tags=go,algorithm,primes\
    \ dscore=2 |>\n<| c |>\nI still don't understand why it works. I don't get why\
    \ it is working on the example you gave. Could you please explain it to me?\n\
    <|/ c |>\n<| c |>\nI've explained the example in my answer. Hope it makes things\
    \ more clear. Let me know if it helps you.\n<|/ c |>\n<| c |>\nThanks, but I still\
    \ don't get why it works. I mean the thing that I don't understand is, why does\
    \ it have to test if `i <= 100` and the `for i := b; i <= 100; i++ {` and the\
    \ `if i%a == 0 {` together? Why can't I test it only with the `if i%a == 0 {`\
    \ ?\n<|/ c |>\n<| c |>\nThe for loop iterates i from 2 to 100 (100 is less than\
    \ 100, so the loop is executed 1 time). So you can only test i%a after the loop\
    \ because i is incremented inside the loop (inside the if condition). As the loop\
    \ executes 1 time it means that i is 2 which satisfies i%a == 0 and hence i is\
    \ not a prime number. After the loop i is incremented to 30 and i%a is not 0 so\
    \ it is prime.\n<|/ c |>\n<| c |>\nOk, I think I understand it now. But why is\
    \ it not `for i := 2; i <= 100; i++ {` instead of `for i := b; i <= 100; i++ {`?\n\
    <|/ c |>\n<| a tags=go,algorithm,primes |>\nA prime number is a positive integer\
    \ that is greater than or equal to 2. This number should have an even divisor\
    \ except for 2. Hence if n is a prime number it must have an even divisor greater\
    \ than or equal to 2. Hence if n is a prime number the only divisors possible\
    \ are 2 and n-1 which means that only n-1 is possible divisor of n.\nFor example\
    \ if n=13 then the only possible divisors are 2 and 5 and so 13 is not a prime\
    \ number.\nAlso prime numbers are always odd numbers. This means that 2 has always\
    \ been an even divisor because 2 is the only even divis\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpf7mzr493_test.go:31:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073836
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    if a >= 100 {\n        return false\n\
    \    }\n\n    prime := a\n    divisor := 2\n    for divisor < a && prime%divisor\
    \ == 0 {\n        divisor++\n    }\n\n    if a == 1 || a == prime {\n        return\
    \ true\n    }\n\n    if prime != 1 {\n        for i := 1; prime % i == 0; i++\
    \ {\n            if a % i == 0 {\n                return false\n            }\n\
    \        }\n    }\n\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T)\
    \ {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: false },\n     { actual: candidate(30), expected: true },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105),\
    \ expected: true },\n     { actual: candidate(126), expected: false },\n     {\
    \ actual: candidate(729), expected: false },\n     { actual: candidate(891), expected:\
    \ false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0\
    \ (0.00s)\n        tmpbi9q_bv3_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__3 (0.00s)\n        tmpbi9q_bv3_test.go:63:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpbi9q_bv3_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpbi9q_bv3_test.go:63:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpbi9q_bv3_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073837
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    var res bool\n    for i := 2; i < a;\
    \ i++ {\n        if ((a % i) == 0 || a == i) {\n            continue\n       \
    \ }\n\n        if a == i {\n            res = true\n            break\n      \
    \  }\n\n        if i%2 != 0 && i%3 == 0 {\n            res = false\n         \
    \   break\n        }\n\n        if i%2 != 0 && i%3 != 0 {\n            res = true\n\
    \            break\n        }\n\n    }\n\n    if res {\n        return true\n\
    \    } else {\n        return false\n    }\n\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__2\
    \ (0.00s)\n        tmpmofmhx30_test.go:69: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmpmofmhx30_test.go:69:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5\
    \ (0.00s)\n        tmpmofmhx30_test.go:69: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__6 (0.00s)\n        tmpmofmhx30_test.go:69:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__7\
    \ (0.00s)\n        tmpmofmhx30_test.go:69: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__8 (0.00s)\n        tmpmofmhx30_test.go:69:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpmofmhx30_test.go:69: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073837
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    // Create a map for primes.\n    primes\
    \ := make(map[int]bool)\n    // Loop all primes lesser than 100.\n    for i :=\
    \ 1; i <= 100; i++ {\n        // If this prime is lesser than 3 then add to map.\n\
    \        if i < (3 * a) / 2 {\n            primes[i] = true\n        }\n     \
    \   // If this prime is greater then 3 then remove from map.\n        if i >=\
    \ (3 * a) / 2 {\n            primes[i] = false\n        }\n    }\n    // Return\
    \ true if the number is a multiply of 3 prime numbers.\n    for _, value := range\
    \ primes {\n        if value == true {\n            return true\n        }\n \
    \   }\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0\
    \ (0.00s)\n        tmp5gwctcs9_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__3 (0.00s)\n        tmp5gwctcs9_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__6\
    \ (0.00s)\n        tmp5gwctcs9_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__7 (0.00s)\n        tmp5gwctcs9_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__8\
    \ (0.00s)\n        tmp5gwctcs9_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073837
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    a -= 2\n    a %= 100\n    return a ==\
    \ 0\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpoin3dgbc_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpoin3dgbc_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpoin3dgbc_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpoin3dgbc_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpoin3dgbc_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073837
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    for i := 2; i < a / 2; i += 2 {\n  \
    \      if a % i == 0 {\n            if a % i != 0 && !is_multiply_prime(i) {\n\
    \                return false\n            }\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0\
    \ (0.00s)\n        tmp12y1kovn_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__3 (0.00s)\n        tmp12y1kovn_test.go:48:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__6\
    \ (0.00s)\n        tmp12y1kovn_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__7 (0.00s)\n        tmp12y1kovn_test.go:48:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__8\
    \ (0.00s)\n        tmp12y1kovn_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073837
- exit_code: 2
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    if a > 100 {\n        return false\n\
    \    }\n    \n    for i := 2; i < a; i++ {\n        if isprime(i) && isprime(a\
    \ - i) && a%i == 0 {\n            return false\n        }\n    }\n    \n    return\
    \ true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6ybnx9ni_test.go:21:12: undefined: isprime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073837
- exit_code: 2
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    // Write your solution here\n    if\
    \ a > 100 {\n        return false\n    }\n\n    for i := 2; i < a; i++ {\n   \
    \     if isPrime(i) {\n            for j := i + i; j < a; j += i {\n         \
    \       if isPrime(j) {\n                    return true\n                }\n\
    \            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa1hi7c11_test.go:22:12: undefined: isPrime

    /tmp/tmpa1hi7c11_test.go:24:20: undefined: isPrime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073837
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    if a%2 == 0 || a%3 == 0 {\n        return\
    \ false\n    }\n    for i:=5;i<=a/2;i+=6 {\n        if a%i == 0 {\n          \
    \  return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0\
    \ (0.00s)\n        tmp8jqrt6oc_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp8jqrt6oc_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2\
    \ (0.00s)\n        tmp8jqrt6oc_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp8jqrt6oc_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5\
    \ (0.00s)\n        tmp8jqrt6oc_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp8jqrt6oc_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073837
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    var flag bool\n    var i int\n    var\
    \ sum int\n    var j int\n    for i = 2; i < a; i+=2 {\n        sum = a+i\n  \
    \      for j = i+i; j < sum; j += i {\n            if sum == j {\n           \
    \     flag = true\n            }\n        }\n        if !flag {\n            break\n\
    \        }\n        flag = false\n    }\n    return flag\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpvqgnpzq0_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpvqgnpzq0_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpvqgnpzq0_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpvqgnpzq0_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpvqgnpzq0_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073837
- exit_code: 2
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    // (a) is less then 100\n    if a <\
    \ 100 {\n        return false\n    }\n\n    // (a) is a multiple of 2\n    if\
    \ a % 2 == 0 {\n        return false\n    }\n\n    // Find all prime numbers less\
    \ than a <= 100\n    primes := make([]int, 100) // all prime numbers < 100\n\n\
    \    primes[0] = 1\n    primes[1] = 2\n\n    for i := 2; i < primeLen; i++ {\n\
    \        primes[i] = primes[i-1] + 2 // each prime is always odd number + 2\n\
    \        for j := 2; j <= primes[i]; j++ {\n            if primes[i] % j == 0\
    \ {\n                break // not a prime number\n            }\n            if\
    \ i == primeLen-1 { // j == primes[i]\n                // all prime numbers <=\
    \ a are greater than a\n                return false\n            }\n        }\n\
    \    }\n\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n \
    \ candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: false },\n     { actual: candidate(30), expected: true },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105),\
    \ expected: true },\n     { actual: candidate(126), expected: false },\n     {\
    \ actual: candidate(729), expected: false },\n     { actual: candidate(891), expected:\
    \ false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpt7eqvbgg_test.go:32:21: undefined: primeLen

    /tmp/tmpt7eqvbgg_test.go:38:21: undefined: primeLen

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073837
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    primes := []int{2, 3, 5, 7}\n    for\
    \ _, b := range primes {\n        if a == b {\n            return true\n     \
    \   }\n        if a%b == 0 {\n            return false\n        }\n    }\n   \
    \ return false\n}\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate :=\
    \ is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0\
    \ (0.00s)\n        tmp8v9rwp7f_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp8v9rwp7f_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2\
    \ (0.00s)\n        tmp8v9rwp7f_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp8v9rwp7f_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5\
    \ (0.00s)\n        tmp8v9rwp7f_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp8v9rwp7f_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073838
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    var primes [2]int\n    var count int\n\
    \n    primes[0] = 2\n    primes[1] = 3\n\n    for i := 2; i < a; i++ {\n     \
    \   for j := 2; j <= primes[1]; j++ {\n            if i%primes[j] == 0 {\n   \
    \             count++\n                break\n            }\n        }\n     \
    \   if count == 2 {\n            return true\n        }\n    }\n\n    return false\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\npanic: runtime error: index out\
    \ of range [2] with length 2 [recovered]\n\tpanic: runtime error: index out of\
    \ range [2] with length 2\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512640,\
    \ 0xc00014e000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512640, 0xc00014e000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_multiply_prime(...)\n\t/tmp/tmpp7qps8j8_test.go:24\n\
    command-line-arguments_test.TestIs_Multiply_Prime(0x0?)\n\t/tmp/tmpp7qps8j8_test.go:44\
    \ +0x3c\ntesting.tRunner(0xc0001191e0, 0x527f68)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073838
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    for i := 1; i <= 100; i++ {\n      \
    \  if i%3 == 0 {\n            continue\n        }\n        if i%a == 0 {\n   \
    \         return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__2\
    \ (0.00s)\n        tmpyyjj53l5_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__6 (0.00s)\n        tmpyyjj53l5_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__7\
    \ (0.00s)\n        tmpyyjj53l5_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__8 (0.00s)\n        tmpyyjj53l5_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073838
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    sum := 0\n    n := a\n    for i := 1;\
    \ i <= n; i++ {\n        if i == n {\n            sum++\n        }\n\n       \
    \ sum ^= n / i\n        n = (n / i) + 1\n    }\n    return sum == 3\n}\n\nfunc\
    \ TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpgku9l4b3_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpgku9l4b3_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpgku9l4b3_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpgku9l4b3_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpgku9l4b3_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073838
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    if a%15 == 0 || a%15 == 1 {\n      \
    \  return false\n    }\n    if a%12 == 0 {\n        return false\n    }\n    if\
    \ a%11 == 1 || a%11 == 3 {\n        return false\n    }\n    if a%10 == 5 || a%10\
    \ == 7 || a%10 == 9 {\n        return false\n    }\n    if a%8 == 1 || a%8 ==\
    \ 3 {\n        return false\n    }\n    if a%7 == 1 || a%7 == 3 {\n        return\
    \ false\n    }\n    if a%5 == 1 || a%5 == 3 {\n        return false\n    }\n \
    \   if a%4 == 3 || a%4 == 5 || a%4 == 7 || a%4 == 9 || a%4 == 11 || a%4 == 13\
    \ || a%4 == 15 {\n        return false\n    }\n    if a%2 == 1 || a%2 == 3 {\n\
    \        return false\n    }\n    if a%1 == 1 {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmp97mwyrf__test.go:71: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp97mwyrf__test.go:71:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmp97mwyrf__test.go:71: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp97mwyrf__test.go:71:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmp97mwyrf__test.go:71: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073838
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    n := 3\n    prime := 3\n    for n >\
    \ 2 {\n        if a % prime == 0 {\n            return false\n        }\n    \
    \    prime++\n        n--\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0\
    \ (0.00s)\n        tmpzp5lvg85_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmpzp5lvg85_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__3\
    \ (0.00s)\n        tmpzp5lvg85_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpzp5lvg85_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073838
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    prime := make(map[int]bool) // We use\
    \ a map to keep track of whether a number is divisible by any prime number we\
    \ encounter\n    prime[1] = true\n    prime[2] = true\n    for i := 3; i <= a;\
    \ i++ {\n        if prime[i] == true {\n            for j := i; j < a; j++ {\n\
    \                prime[j] = false\n            }\n        }\n    }\n    if a ==\
    \ 1 {\n        return true\n    }\n    return prime[a]\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmphg7lyz4r_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmphg7lyz4r_test.go:54:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmphg7lyz4r_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmphg7lyz4r_test.go:54:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmphg7lyz4r_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073838
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    var a = 3 * a \n    if a < 100 {\n \
    \       for b : range {\n            if a%b == 0 {\n                return false\n\
    \            }\n        }\n        return true\n    }\n    return false\n}\n\n\
    func TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp46onj_b__test.go:18:15: illegal label declaration

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073837
- exit_code: 2
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    if a <= 1 {\n        return false\n\
    \    }\n    if a < 100 {\n        return false\n    }\n    var b int = 3\n   \
    \ var c int = 5\n    for i := 2; i <= a; i++ {\n        if a % i == 0 {\n    \
    \        return false\n        }\n        for j := 2; j <= i; j++ {\n        \
    \    if i != j && i % j == 0 && a % j == 0 {\n                b = i\n        \
    \        c = j\n                break\n            }\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5vc3270y_test.go:22:9: b declared but not used

    /tmp/tmp5vc3270y_test.go:23:9: c declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073838
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    // Define your logic here\n    // Use\
    \ a loop to find out whether a is a multiple of 3\n    // Use a loop to find out\
    \ whether a is a multiple of 5\n    // Use a loop to find out whether a is a multiple\
    \ of 7\n    // ...\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T)\
    \ {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: false },\n     { actual: candidate(30), expected: true },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105),\
    \ expected: true },\n     { actual: candidate(126), expected: false },\n     {\
    \ actual: candidate(729), expected: false },\n     { actual: candidate(891), expected:\
    \ false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmp4qusy2av_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp4qusy2av_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmp4qusy2av_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp4qusy2av_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmp4qusy2av_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073840
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    m := 3\n    for i:= m + 1; i < 100;\
    \ i++ {\n        if ((a * m) % i == 0 ) {\n            return false\n        }\n\
    \        m++\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T)\
    \ {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: false },\n     { actual: candidate(30), expected: true },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105),\
    \ expected: true },\n     { actual: candidate(126), expected: false },\n     {\
    \ actual: candidate(729), expected: false },\n     { actual: candidate(891), expected:\
    \ false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmp_7320rnt_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp_7320rnt_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmp_7320rnt_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp_7320rnt_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmp_7320rnt_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073840
- exit_code: 2
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    // if 3 is a prime\n    if (is_prime(a)\
    \ && a < 100) {\n        return true\n    }\n    \n    prime := 2\n    \n    for\
    \ {\n        for j := prime; j < 100; j++ {\n            if (j % prime) == 0 &&\
    \ a * j == a * prime {\n                return true\n            }\n        }\n\
    \        \n        prime++\n    }\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T)\
    \ {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: false },\n     { actual: candidate(30), expected: true },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105),\
    \ expected: true },\n     { actual: candidate(126), expected: false },\n     {\
    \ actual: candidate(729), expected: false },\n     { actual: candidate(891), expected:\
    \ false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp66l5rjav_test.go:17:9: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073839
- exit_code: 2
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    primes := []int{2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29}\n    var prime_number int\n    if a == 1 {\n        return true\n\
    \    }\n    for prime_number = 0; prime_number < prime_numbers; prime_number++\
    \ {\n        if a % primes[prime_number] == 0 {\n            return false\n  \
    \      }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T)\
    \ {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: false },\n     { actual: candidate(30), expected: true },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105),\
    \ expected: true },\n     { actual: candidate(126), expected: false },\n     {\
    \ actual: candidate(729), expected: false },\n     { actual: candidate(891), expected:\
    \ false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqi4byehg_test.go:21:42: undefined: prime_numbers

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073839
- exit_code: 2
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    if a < 100 {\n        return true\n\
    \    }\n    var b int\n    \n    for i = 3; i <= a; i++ {\n        if isprime(i)\
    \ && a % i == 0 {\n            b++\n        }\n    }\n    return b >= 3\n}\n\n\
    func TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj0hcvv0c_test.go:21:9: undefined: i

    /tmp/tmpj0hcvv0c_test.go:22:12: undefined: isprime

    /tmp/tmpj0hcvv0c_test.go:22:20: undefined: i

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073840
- exit_code: 2
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    s := make([]int, 0)\n    factors :=\
    \ make([]int, 0)\n    for a:=2; a<=100; a++ {\n        if a%2 != 0 {\n       \
    \     continue\n        }\n        prime_factors := []int{}\n        if a>1 {\n\
    \            prime_factors = append(prime_factors, a)\n        }\n        for\
    \ i:=3; i<=a; i++ {\n            if a%i == 0 {\n                prime_factors\
    \ = append(prime_factors, i)\n            }\n        }\n        sorted_prime_factors\
    \ := make([]int, len(prime_factors))\n        for i := range prime_factors {\n\
    \            sorted_prime_factors[i] = prime_factors[i]\n        }\n        sorted_prime_factors,\
    \ _ = sort.IntSlice(sorted_prime_factors)\n        factors = append(factors, sorted_prime_factors)\n\
    \    }\n    // fmt.Println(\"factors\", factors)\n    // fmt.Println(\"factors\
    \ length\", len(factors))\n    // fmt.Println(\"factors size\", cap(factors))\n\
    \    for i := 0; i < len(factors); i++ {\n        s := 0\n        for _, f :=\
    \ range factors[i] {\n            if f > 1 {\n                s++\n          \
    \  } else {\n                break\n            }\n        }\n        if s >=\
    \ 3 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc\
    \ TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5e_6zm5g_test.go:16:5: s declared but not used

    /tmp/tmp5e_6zm5g_test.go:35:35: undefined: sort

    /tmp/tmp5e_6zm5g_test.go:36:35: cannot use sorted_prime_factors (variable of type
    []int) as type int in argument to append

    /tmp/tmp5e_6zm5g_test.go:43:27: cannot range over factors[i] (variable of type
    int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073840
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    for i := 3; i <= 100; i++ {\n      \
    \  for j := 2 * i; j < 100; j += i {\n            if j%a == 0 {\n            \
    \    return false\n            }\n        }\n    }\n    return true\n}\n\nfunc\
    \ TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpej918c5n_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpej918c5n_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__6\
    \ (0.00s)\n        tmpej918c5n_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__7 (0.00s)\n        tmpej918c5n_test.go:48:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__8\
    \ (0.00s)\n        tmpej918c5n_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073840
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    // Base Cases\n    if a < 0 {\n    \
    \    return false\n    }\n    if a > 100 {\n        return true\n    }\n    //\
    \ Base Cases\n    if a == 1 {\n        return true\n    }\n    if a == 2 {\n \
    \       return true\n    }\n    // Check Primes\n    for i := 2; i < a; i++ {\n\
    \        if a % i == 0 {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0\
    \ (0.00s)\n        tmphp3m7g_0_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmphp3m7g_0_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2\
    \ (0.00s)\n        tmphp3m7g_0_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__6 (0.00s)\n        tmphp3m7g_0_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__7\
    \ (0.00s)\n        tmphp3m7g_0_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__8 (0.00s)\n        tmphp3m7g_0_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073840
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    var result bool\n    var prime1 int\n\
    \    var prime2 int\n    var prime3 int\n\n    for i := 2; i <= a; i++ {\n   \
    \     if i%2 != 0 {\n            prime1 = i\n        } else {\n            prime2\
    \ = i\n        }\n        for j := 3; j <= i; j++ {\n            if j%2 != 0 {\n\
    \                prime3 = j\n            } else {\n                if (prime1\
    \ * prime2 + prime3) == i {\n                    result = true\n             \
    \       break\n                }\n            }\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpicahnvgr_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpicahnvgr_test.go:63:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpicahnvgr_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpicahnvgr_test.go:63:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpicahnvgr_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073840
- exit_code: 2
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    var m int = 3\n    var b int = a\n \
    \   \n    for  m <= 100 {\n        if a % m == 0 && a % b == 0 && a%m == 0 {\n\
    \            return true\n        }\n        m++\n        b++\n    }\n    \n \
    \   return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test

    /tmp/tmp4gj1i3bk_test.go:20:12: redundant and: a%m == 0 && a%m == 0

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073840
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        for\
    \ j := i + i; j < a; j++ {\n            if i == j*j {\n                fmt.Printf(\"\
    %d\\n\", i)\n                return true\n            }\n        }\n    }\n  \
    \  return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpjon57ot9_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpjon57ot9_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpjon57ot9_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpjon57ot9_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpjon57ot9_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073840
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    // Write code here\n    // return false\n\
    \    return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpxujlora1_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpxujlora1_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpxujlora1_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpxujlora1_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpxujlora1_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073840
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    return a % 2 == 0 && a%3 != 0 && a%5\
    \ != 0\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmp94lx4nb8_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp94lx4nb8_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5\
    \ (0.00s)\n        tmp94lx4nb8_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp94lx4nb8_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073840
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    if a < 100 {\n        return false;\n\
    \    }\n    \n    var m int = a;\n    for i := 0; i < 3; i++ {\n        if m%2\
    \ == 0 {\n            m /= 2;\n            continue;\n        }\n        \n  \
    \      for j := 3; j < m; j++ {\n            if m%j == 0 {\n                m\
    \ /= j;\n                continue;\n            }\n        }\n        \n     \
    \   // m = 3*5*7*11...\n        for i := m; i <= 100; i++ {\n            if m%i\
    \ == 0 {\n                return false;\n            }\n        }\n    }\n   \
    \ return true;\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate :=\
    \ is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpoclnc9___test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpoclnc9___test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpoclnc9___test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpoclnc9___test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpoclnc9___test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073840
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    if a < 100 {\n        return false\n\
    \    }\n    for b := 2; b < a; b++ {\n        if (a%b == 0 || b%a == 0) {\n  \
    \          return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpis1f34ot_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpis1f34ot_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpis1f34ot_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpis1f34ot_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpis1f34ot_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073840
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    if a < 3 {\n        return false\n \
    \   }\n    \n    arr := make([]int, 100)\n    \n    // initialize an array with\
    \ only odd numbers\n    for i := 0; i < len(arr); i++ {\n        if i%2 == 0 {\n\
    \            continue\n        }\n        arr[i] = i\n    }\n    \n    arr[0]\
    \ := a\n    \n    for i := 1; i < len(arr); i++ {\n        arr[i*i/2+1] = i\n\
    \    }\n    \n    // iterate from the second to the last value\n    for i := 2;\
    \ i < len(arr); i++ {\n        if arr[i] == a {\n            return true\n   \
    \     }\n    }\n    \n    return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T)\
    \ {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: false },\n     { actual: candidate(30), expected: true },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105),\
    \ expected: true },\n     { actual: candidate(126), expected: false },\n     {\
    \ actual: candidate(729), expected: false },\n     { actual: candidate(891), expected:\
    \ false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmphaj6ph62_test.go:30:5: expected identifier on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073840
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    switch a {\n    case 2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59:\n        return true\n    default:\n\
    \        return false\n    }\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n\
    \  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: false },\n     { actual: candidate(30), expected: true },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105),\
    \ expected: true },\n     { actual: candidate(126), expected: false },\n     {\
    \ actual: candidate(729), expected: false },\n     { actual: candidate(891), expected:\
    \ false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0\
    \ (0.00s)\n        tmphmlbg5yd_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmphmlbg5yd_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2\
    \ (0.00s)\n        tmphmlbg5yd_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmphmlbg5yd_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5\
    \ (0.00s)\n        tmphmlbg5yd_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmphmlbg5yd_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073840
- exit_code: 2
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    \n    if a < 100 {\n        fmt.Println(\"\
    a is less than 100\")\n        return false\n    }\n    \n    primes := make([]int,\
    \ 1000)\n    \n    for i := 0; i < len(primes); i++ {\n        primes[i] = 2\n\
    \    }\n    \n    for i := 2; i < a; i++ {\n        for j := 0; j < len(primes);\
    \ j++ {\n            if primes[j] == i {\n                break\n            }\n\
    \        }\n        \n        if j == len(primes) {\n            return false\n\
    \        }\n        \n        primes[j] = primes[j] + 1\n    }\n    \n    for\
    \ i := 2; i < len(primes); i++ {\n        if primes[i] != a {\n            return\
    \ false\n        }\n    }\n    \n    return true\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpeyqqe_jc_test.go:35:12: undefined: j

    /tmp/tmpeyqqe_jc_test.go:39:28: undefined: j

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073840
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    var n int\n\n    if a%3 != 0 {\n   \
    \     for i := 2; i < a; i++ {\n            if a%i%2 == 0 {\n                n\
    \ += 1\n                if n > 3 {\n                    break\n              \
    \  }\n            }\n        }\n        return n == 3\n    }\n    return false\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpo8zhk8d2_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpo8zhk8d2_test.go:54:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpo8zhk8d2_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpo8zhk8d2_test.go:54:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpo8zhk8d2_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073840
- exit_code: 2
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    if a == 2 {\n        return true\n \
    \   }\n    if a > 100 {\n        return false\n    }\n    \n    var aPrimes []int\
    \ = []int{2, 5, 7, 11, 13, 17, 19, 23, 29, 31}\n    var bPrimes []int = []int{3,\
    \ 5, 7, 9, 11, 13, 17, 19, 23, 29, 31}\n    \n    // For each prime in aPrimes\n\
    \    for _, bPrime := range bPrimes {\n        if a % bPrime == 0 {\n        \
    \    \n            // If one of the primes is a divisor of a, the number is composite\n\
    \            if a % bPrime == 0 {\n                return false\n            }\n\
    \        }\n    }\n\n    // If we get to here then a is not a multiple of any\
    \ of the primes in aPrimes\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxmxszqjq_test.go:23:9: aPrimes declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073840
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    return (a%3==0) && (a%5==0)\n}\n\nfunc\
    \ TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__2\
    \ (0.00s)\n        tmpa4z9k6ei_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmpa4z9k6ei_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpa4z9k6ei_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073840
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    count := 0\n    if a < 3 {\n       \
    \ return false\n    }\n    for i:=2; i<=a; i++ {\n        for j: int := 1; j <\
    \ i; j++ {\n            if i*j == a{\n                count++\n              \
    \  break\n            }\n        }\n    }\n    if count == 3 {\n        return\
    \ true\n    } else {\n        return false\n    }\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2dpwayw9_test.go:21:14: illegal label declaration

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073840
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    \n    // Write your code here\n    \n\
    \    return a % 3 != 0\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0\
    \ (0.00s)\n        tmp1a7upm6f_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp1a7upm6f_test.go:44:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__3\
    \ (0.00s)\n        tmp1a7upm6f_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp1a7upm6f_test.go:44:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073841
- exit_code: 2
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    return is_multiply_prime_test.is_multiply_prime_test(a,\
    \ nil)\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphhbgb_lv_test.go:16:12: undefined: is_multiply_prime_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073840
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a int) bool {\n    for i := 2; i < a; i += 2 {\n      \
    \  if a == i*i {\n            return true\n        }\n    }\n    return false\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpn17z16jy_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpn17z16jy_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpn17z16jy_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpn17z16jy_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpn17z16jy_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073841
