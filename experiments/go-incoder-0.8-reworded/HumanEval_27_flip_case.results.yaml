language: go_test.go
name: HumanEval_27_flip_case
results:
- exit_code: 1
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    currentIndex := 0\n    for currentIndex\
    \ < len(myString) {\n        nextIndex1 := currentIndex + 1\n        nextIndex2\
    \ := nextIndex1 + 1\n        nextIndex3 := nextIndex1 + 2\n        nextIndex4\
    \ := nextIndex1 + 3\n\n        // Uppercase first char\n        if nextIndex1\
    \ < len(myString) && myString[nextIndex1] >= 'A' && myString[nextIndex1] <= 'Z'\
    \ {\n            result += myString[nextIndex1]\n            nextIndex1++\n  \
    \      }\n\n        // Uppercase first 2 chars\n        if nextIndex2 < len(myString)\
    \ && myString[nextIndex2] >= 'a' && myString[nextIndex2] <= 'z' {\n          \
    \  result += string(unicode.ToUpper(myString[nextIndex2]) + 1)\n            nextIndex2++\n\
    \        }\n\n        // Uppercase first 3 chars\n        if nextIndex3 < len(myString)\
    \ && myString[nextIndex3] >= 'A' && myString[nextIndex3] <= 'Z' {\n          \
    \  result += string(unicode.ToUpper(myString[nextIndex3]) + 1)\n            nextIndex3++\n\
    \        }\n\n        // Uppercase first 4 chars\n        if nextIndex4 < len(myString)\
    \ && myString[nextIndex4] >= 'a' && myString[nextIndex4] <= 'z' {\n          \
    \  result += string(unicode.ToUpper(myString[nextIndex4]) + 1)\n            nextIndex4++\n\
    \        }\n\n        // Lowercase first char\n        if nextIndex1 < len(myString)\
    \ && myString[nextIndex1] >= 'a' && myString[nextIndex1] <= 'z' {\n          \
    \  result += string(unicode.ToLower(myString[nextIndex1]))\n            nextIndex1++\n\
    \        }\n\n        // Lowercase first 2 chars\n        if nextIndex2 < len(myString)\
    \ && myString[nextIndex2] >= 'A' && myString[nextIndex2] <= 'Z' {\n          \
    \  result += string(unicode.ToLower(myString[nextIndex2]) + 1)\n            nextIndex2++\n\
    \        }\n\n        // Lowercase first 3 chars\n        if nextIndex3 < len(myString)\
    \ && myString[nextIndex3] >= 'a' && myString[nextIndex3] <= 'z' {\n          \
    \  result += string(unicode.ToLower(myString[nextIndex3]) + 1)\n            nextIndex3++\n\
    \        }\n\n        // Lowercase first 4 chars\n        if nextIndex4 < len(myString)\
    \ && myString[nextIndex4] >= 'A' && myString[nextIndex4] \nfunc TestFlip_Case(t\
    \ *testing.T) {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected:\
    \ \"hELLO!\" },\n     { actual: candidate(\"These violent delights have violent\
    \ ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpk4lgm9e0_test.go:64:6: expected ''('', found TestFlip_Case

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073405
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    var result string\n    j := len(myString) - 1\n    for\
    \ i := 0; i < len(myString); i++ {\n        if myString[i] >= 'a' && myString[i]\
    \ <= 'z' {\n            result = result + myString[j-i] + myString[i]\n      \
    \      j = i\n        } else {\n            result = result + myString[i]\n  \
    \      }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfod858za_test.go:16:22: invalid operation: result + myString[j - i] (mismatched
    types string and byte)

    /tmp/tmpfod858za_test.go:19:22: invalid operation: result + myString[i] (mismatched
    types string and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    output := myString\n    for index, letter := range output\
    \ {\n        if letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o'\
    \ || letter == 'u' {\n            output[index] = letter + 32\n        }\n   \
    \ }\n    return output\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate :=\
    \ flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5dzba9c2_test.go:15:13: cannot assign to output[index] (value of type
    byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    var result string\n    var i int\n\n    for i = 0; i <=\
    \ len(myString); i++ {\n        result += myString[i] + string(unicode.ToLower(myString[i]))\n\
    \    }\n\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate\
    \ := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3gru0g3p_test.go:16:40: undefined: unicode

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    return strings.ToLower(myString) + strings.ToUpper(myString[1:])\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsewx8m8q_test.go:12:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    flipped := \"\"\n    for _, letter := range myString {\n\
    \        if letter == letter.toUpper() {\n            flipped += letter.toLower()\n\
    \        } else {\n            flipped += letter.toUpper()\n        }\n    }\n\
    \    return flipped\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp88ue3ylw_test.go:14:29: letter.toUpper undefined (type rune has no field
    or method toUpper)

    /tmp/tmp88ue3ylw_test.go:15:31: letter.toLower undefined (type rune has no field
    or method toLower)

    /tmp/tmp88ue3ylw_test.go:17:31: letter.toUpper undefined (type rune has no field
    or method toUpper)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    flippedString := []rune(myString)\n    for i := 0; i <\
    \ len(myString); i++ {\n        flippedString[i] = unicode.ToLower(flippedString[i])\n\
    \    }\n    return string(flippedString)\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppm7_fqzf_test.go:14:28: undefined: unicode

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    uppercase := \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n    lowercase := \"abcdefghijklmnopqrstuvwxyz\"\n    for _, char := range myString\
    \ {\n        result += string([]rune(char)) - string([]rune(uppercase))\n    \
    \    result += string([]rune(char)) + string([]rune(lowercase))\n    }\n    return\
    \ result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9nmki41__test.go:16:33: cannot convert char (variable of type rune) to
    type []rune

    /tmp/tmp9nmki41__test.go:17:33: cannot convert char (variable of type rune) to
    type []rune

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    myString = strings.ToLower(myString)\n    myString = strings.ToUpper(myString)\n\
    \    return myString\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate :=\
    \ flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8qdaekm7_test.go:12:16: undefined: strings

    /tmp/tmp8qdaekm7_test.go:13:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 1
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    lowercase := []rune(myString)\n    for i:=0; i<len(lowercase);\
    \ i++ {\n        lowercase[i] = 'A' + lowercase[i]\n        lowercase[i] = 'a'\
    \ + lowercase[i]\n    }\n    uppercase := []rune(myString)\n    for i:=0; i<len(uppercase);\
    \ i++ {\n        uppercase[i] = 'a' + uppercase[i]\n        uppercase[i] = 'A'\
    \ + uppercase[i]\n    }\n    return string(uppercase) + string(lowercase)\n}\n\
    \nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"These violent delights\
    \ have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFlip_Case (0.00s)\n    --- FAIL: TestFlip_Case/test_num__1\
    \ (0.00s)\n        tmpraxn3paw_test.go:40: expected 'hELLO!', got '\xEA\u0107\u010E\
    \u010E\u0111\xC3\xEA\u0107\u010E\u010E\u0111\xC3'\n    --- FAIL: TestFlip_Case/test_num__2\
    \ (0.00s)\n        tmpraxn3paw_test.go:40: expected 'tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS', got '\xF6\u010A\u0107\u0115\u0107\xC2\u0118\u010B\u0111\u010E\
    \u0107\u0110\u0116\xC2\u0106\u0107\u010E\u010B\u0109\u010A\u0116\u0115\xC2\u010A\
    \u0103\u0118\u0107\xC2\u0118\u010B\u0111\u010E\u0107\u0110\u0116\xC2\u0107\u0110\
    \u0106\u0115\xF6\u010A\u0107\u0115\u0107\xC2\u0118\u010B\u0111\u010E\u0107\u0110\
    \u0116\xC2\u0106\u0107\u010E\u010B\u0109\u010A\u0116\u0115\xC2\u010A\u0103\u0118\
    \u0107\xC2\u0118\u010B\u0111\u010E\u0107\u0110\u0116\xC2\u0107\u0110\u0106\u0115\
    '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073407
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    return strings.ToLower(strings.ToUpper(myString))\n}\n\
    \nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"These violent delights\
    \ have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7r_sknru_test.go:12:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    upper_string := \"\"\n    for _, character := range myString\
    \ {\n        if character >= 'a' && character <= 'z' {\n            upper_string\
    \ += string(character - 32) + character\n        } else {\n            upper_string\
    \ += character\n        }\n    }\n    return upper_string\n}\n\nfunc TestFlip_Case(t\
    \ *testing.T) {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected:\
    \ \"hELLO!\" },\n     { actual: candidate(\"These violent delights have violent\
    \ ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo8f6ors4_test.go:15:29: invalid operation: string(character - 32) + character
    (mismatched types string and rune)

    /tmp/tmpo8f6ors4_test.go:17:13: invalid operation: upper_string += character (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += string(char -\
    \ 'a' + 'A')\n        } else {\n            result += char\n        }\n    }\n\
    \    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp73gfgv02_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    return string([]rune(myString)[1:len(myString)-1] + []rune(myString[0]))\
    \ + string([]rune(myString[len(myString)-1:0])[:len(myString)-1] + []rune(myString[len(myString)-1:]))\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn350_a_6_test.go:12:64: cannot convert myString[0] (value of type byte)
    to type []rune

    /tmp/tmpn350_a_6_test.go:12:122: invalid operation: operator + not defined on
    []rune(myString[len(myString) - 1:0])[:len(myString) - 1] (value of type []rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 1
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    s := make([]rune, 0, len(myString))\n    lower := false\n\
    \n    for _, r := range myString {\n        if r >= 'a' && r <= 'z' {\n      \
    \      lower = true\n            s = append(s, r)\n        } else if r >= 'A'\
    \ && r <= 'Z' {\n            lower = false\n            s = append(s, r)\n   \
    \     } else {\n            if lower {\n                s = append(s, r)\n   \
    \         } else {\n                s = append(s, r+'A')\n            }\n    \
    \    }\n    }\n    return string(s)\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFlip_Case (0.00s)\n    --- FAIL: TestFlip_Case/test_num__1\
    \ (0.00s)\n        tmpbfr8h4sr_test.go:48: expected 'hELLO!', got 'Hello!'\n \
    \   --- FAIL: TestFlip_Case/test_num__2 (0.00s)\n        tmpbfr8h4sr_test.go:48:\
    \ expected 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS', got 'These violent delights\
    \ have violent ends'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073407
- exit_code: 1
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    charList := make([]byte, len(myString))\n    for i :=\
    \ 0; i < len(myString); i++ {\n        charList[i] = myString[i]\n    }\n    return\
    \ string(charList[0 : len(myString)-1]) + string(charList[1 : len(myString)-1])\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFlip_Case (0.00s)\npanic: runtime error: slice bounds out\
    \ of range [:-1] [recovered]\n\tpanic: runtime error: slice bounds out of range\
    \ [:-1]\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000160000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.flip_case(...)\n\t/tmp/tmp66v7u084_test.go:16\n\
    command-line-arguments_test.TestFlip_Case(0x0?)\n\t/tmp/tmp66v7u084_test.go:26\
    \ +0x33\ntesting.tRunner(0xc000103520, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073407
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    myString = \"abcdefghijklmnopqrstuvwxyz\"[strings.ToLower(myString):]\n\
    \    myString = myString + strings.ToUpper(myString[:len(myString)-1])\n    return\
    \ myString\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3o5k27pw_test.go:12:45: undefined: strings

    /tmp/tmp3o5k27pw_test.go:13:27: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    var out string = \"\"\n    for _, c := range myString\
    \ {\n        if ('a' <= c && c <= 'z') || (('A' <= c && c <= 'Z')) {\n       \
    \     out += string([]byte{c - 'a', c + 32})\n        } else {\n            out\
    \ += string(c)\n        }\n    }\n    return out\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpleguapx2_test.go:15:34: cannot use c - ''a'' (value of type rune) as type
    byte in array or slice literal

    /tmp/tmpleguapx2_test.go:15:43: cannot use c + 32 (value of type rune) as type
    byte in array or slice literal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    x := []rune(myString)\n    flipped := make([]rune, len(x))\n\
    \    for k, i := range x {\n        if isLowercase(x[i]) {\n            flipped[k]\
    \ = 'U'\n        } else {\n            flipped[k] = 'l'\n        }\n    }\n  \
    \  return string(flipped)\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate\
    \ := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc3q75qpl_test.go:15:12: undefined: isLowercase

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 1
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    my_string := []rune(myString)\n    my_string_lower :=\
    \ make([]rune, len(my_string))\n    my_string_upper := make([]rune, len(my_string))\n\
    \    copy(my_string_lower, my_string)\n    copy(my_string_upper, my_string)\n\
    \    for i := 0; i < len(my_string); i++ {\n        if my_string_lower[i] >= 65\
    \ && my_string_lower[i] <= 90 {\n            my_string_upper[i] = my_string_lower[i]\
    \ + 32\n            my_string_lower[i] = 65\n        } else if (my_string_lower[i]\
    \ >= 97 && my_string_lower[i] <= 122) && (my_string_upper[i] < 65 || my_string_upper[i]\
    \ > 90 || my_string_upper[i] == 32) {\n            my_string_upper[i] = my_string_lower[i]\
    \ + 32\n            my_string_lower[i] = 97\n        }\n    }\n    return string(my_string_lower)\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFlip_Case (0.00s)\n    --- FAIL: TestFlip_Case/test_num__1\
    \ (0.00s)\n        tmp3d0v8h1s_test.go:44: expected 'hELLO!', got 'Aaaaa!'\n \
    \   --- FAIL: TestFlip_Case/test_num__2 (0.00s)\n        tmp3d0v8h1s_test.go:44:\
    \ expected 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS', got 'Aaaaa aaaaaaa aaaaaaaa\
    \ aaaa aaaaaaa aaaa'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073407
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    var result strings.Builder\n\n    for _, char := range\
    \ myString {\n        if char >= 'a' && char <= 'z' {\n            result.WriteRune(unicode.ToUpper(char))\n\
    \        } else {\n            result.WriteRune(char)\n        }\n    }\n\n  \
    \  return result.String()\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate\
    \ := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphd7eqz9o_test.go:12:16: undefined: strings

    /tmp/tmphd7eqz9o_test.go:16:30: undefined: unicode

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 1
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    myString = strings.ToLower(myString)\n    myString = strings.ToUpper(myString)\n\
    \    return myString\n}\n</code>\n<code>\npackage main\n\nimport (\n    \"fmt\"\
    \n    \"flip_case_test\" // <- import the function\n)\n\nfunc TestFlip_Case(t\
    \ *testing.T) {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected:\
    \ \"hELLO!\" },\n     { actual: candidate(\"These violent delights have violent\
    \ ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmprcwp3386_test.go:16:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073405
- exit_code: 1
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    chars := []rune(myString)\n    uppercase := make([]rune,\
    \ len(myString))\n    for i, c := range chars {\n        if c >= 'a' && c <= 'z'\
    \ {\n            uppercase[i] = 'A' + c - 'a'\n        } else {\n            uppercase[i]\
    \ = c\n        }\n    }\n    return string(uppercase)\n}\n\nfunc TestFlip_Case(t\
    \ *testing.T) {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected:\
    \ \"hELLO!\" },\n     { actual: candidate(\"These violent delights have violent\
    \ ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFlip_Case (0.00s)\n    --- FAIL: TestFlip_Case/test_num__1\
    \ (0.00s)\n        tmptq1x3p0__test.go:39: expected 'hELLO!', got 'HELLO!'\n \
    \   --- FAIL: TestFlip_Case/test_num__2 (0.00s)\n        tmptq1x3p0__test.go:39:\
    \ expected 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS', got 'THESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073407
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    myString = strings.ToLower(myString)\n    myString = strings.ToUpper(myString)\n\
    \    return myString\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate :=\
    \ flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8qdaekm7_test.go:12:16: undefined: strings

    /tmp/tmp8qdaekm7_test.go:13:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 1
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += string(rune(char)-32)\n\
    \        } else {\n            result += string(rune(char)+32)\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate\
    \ := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFlip_Case (0.00s)\n    --- FAIL: TestFlip_Case/test_num__1\
    \ (0.00s)\n        tmpydx_d62z_test.go:38: expected 'hELLO!', got 'hELLOA'\n \
    \   --- FAIL: TestFlip_Case/test_num__2 (0.00s)\n        tmpydx_d62z_test.go:38:\
    \ expected 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS', got 'tHESE@VIOLENT@DELIGHTS@HAVE@VIOLENT@ENDS'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073407
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    var flippedString string\n    for _, letter := range myString\
    \ {\n        if letter == string(\"a\") {\n            flippedString += \"A\"\n\
    \        }\n        flippedString += string(letter + string(\"A\"))\n    }\n \
    \   return flippedString\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate\
    \ := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpe6ao_vbu_test.go:14:22: invalid operation: letter == string("a") (mismatched
    types rune and string)

    /tmp/tmpe6ao_vbu_test.go:17:33: invalid operation: letter + string("A") (mismatched
    types rune and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073408
- exit_code: 1
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    // Flip all the characters in myString.\n    switch myString\
    \ {\n    case \"Hello\":\n        result := \"hELLO\"\n    case \"Goodbye\":\n\
    \        result := \"godbye\"\n    case \"Helloooooo\":\n        result := \"\
    HellOoOo\"\n    default:\n        fmt.Println(\"Unexpected string input\", myString)\n\
    \    }\n    return result\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nIt may be better\
    \ to rename the function to `flip_case_string` since it modifies a `string`, not\
    \ a `[]string`.\n<|/ c |>\n<| a |>\nHere is one method that will handle any number\
    \ of characters and is case insensitive:\n<code>\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpfwptmv2y_test.go:25:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073407
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    flippedString := \"\"\n    for _, c := range myString\
    \ {\n        if isUpper {\n            if isLower {\n                flippedString\
    \ += c\n            }\n            flippedString += toUpper\n        } else {\n\
    \            if isLower {\n                flippedString += c\n            }\n\
    \            flippedString += toLower\n        }\n    }\n    return flippedString\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsp6cr1ub_test.go:14:12: undefined: isUpper

    /tmp/tmpsp6cr1ub_test.go:15:16: undefined: isLower

    /tmp/tmpsp6cr1ub_test.go:16:17: invalid operation: flippedString += c (mismatched
    types string and rune)

    /tmp/tmpsp6cr1ub_test.go:18:30: undefined: toUpper

    /tmp/tmpsp6cr1ub_test.go:20:16: undefined: isLower

    /tmp/tmpsp6cr1ub_test.go:21:17: invalid operation: flippedString += c (mismatched
    types string and rune)

    /tmp/tmpsp6cr1ub_test.go:23:30: undefined: toLower

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073409
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    var result string = myString\n    for i := 0; i < len(result);\
    \ i++ {\n        if result[i] >= 'a' && result[i] <= 'z' {\n            result[i]\
    \ = 'A' + result[i] - 'a'\n        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t\
    \ *testing.T) {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected:\
    \ \"hELLO!\" },\n     { actual: candidate(\"These violent delights have violent\
    \ ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr6q8gi7y_test.go:15:13: cannot assign to result[i] (value of type byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073409
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    var toReturn string = \"\"\n    for _, character := range\
    \ myString {\n        toReturn += string([]byte(character))\n        toReturn\
    \ += string([]byte(string([]byte(character)) + string([]byte(character))))\n \
    \   }\n    return toReturn\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate\
    \ := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpieexqccp_test.go:14:35: cannot convert character (variable of type rune)
    to type []byte

    /tmp/tmpieexqccp_test.go:15:49: cannot convert character (variable of type rune)
    to type []byte

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073409
- exit_code: 1
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    return strings.ToUpper(strings.ToLower(myString))\n}\n\
    </code>\n<|/ a |>\n<| a tags=case-insensitive,go |>\nI needed the exact same thing\
    \ and wrote a functional version of it.  You can find it here:\nhttps://play.golang.org/p/yqoYJNsM9v\n\
    <code>\npackage main\n\nimport (\n    \"fmt\"\n    \"unicode/utf8\"\n)\n\nfunc\
    \ TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"These violent delights\
    \ have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmph790q237_test.go:14:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073408
- exit_code: 1
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    flipped := []byte{}\n    for i, b := range []byte(myString)\
    \ {\n        if i > 0 {\n            flipped = append(flipped, byte(97 - byte(b)))\n\
    \        }\n        flipped = append(flipped, byte(b))\n    }\n    return string(flipped)\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFlip_Case (0.00s)\n    --- FAIL: TestFlip_Case/test_num__1\
    \ (0.00s)\n        tmpyxjr086s_test.go:37: expected 'hELLO!', got 'Hello@!'\n\
    \    --- FAIL: TestFlip_Case/test_num__2 (0.00s)\n        tmpyxjr086s_test.go:37:\
    \ expected 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS', got 'TheseA violentA delightsA\
    \ h\0aveA violentA ends'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075646
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    for i := 0; i < len(myString); i++ {\n        if myString[i]\
    \ >= 'a' && myString[i] <= 'z' {\n            myString[i] = myString[i] - 32\n\
    \        } else if myString[i] >= 'A' && myString[i] <= 'Z' {\n            myString[i]\
    \ = myString[i] + 32\n        }\n    }\n    return myString\n}\n\nfunc TestFlip_Case(t\
    \ *testing.T) {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected:\
    \ \"hELLO!\" },\n     { actual: candidate(\"These violent delights have violent\
    \ ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa8b7yggv_test.go:14:13: cannot assign to myString[i] (value of type byte)

    /tmp/tmpa8b7yggv_test.go:16:13: cannot assign to myString[i] (value of type byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075645
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    upper_case := []rune(myString)\n    for i := range upper_case\
    \ {\n        if upper_case[i] >= 65 && upper_case[i] <= 90 {\n            upper_case[i]\
    \ = upper_case[i] - 32\n        }\n    }\n    lower_case = []rune(string(upper_case))\n\
    \    for i := range lower_case {\n        if lower_case[i] >= 97 && lower_case[i]\
    \ <= 122 {\n            lower_case[i] = lower_case[i] + 32\n        }\n    }\n\
    \    return string(lower_case)\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate\
    \ := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbxqg7sj__test.go:18:5: undefined: lower_case

    /tmp/tmpbxqg7sj__test.go:19:20: undefined: lower_case

    /tmp/tmpbxqg7sj__test.go:20:12: undefined: lower_case

    /tmp/tmpbxqg7sj__test.go:21:29: undefined: lower_case

    /tmp/tmpbxqg7sj__test.go:24:19: undefined: lower_case

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075645
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    return strings.ToLower(myString) + strings.ToUpper(myString[len(strings.ToLower(myString)):])\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpeaxttmre_test.go:12:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075645
- exit_code: 1
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    flipped := make([]rune, len(myString))\n    for index,\
    \ character := range myString {\n        flipped[index] = character\n        if\
    \ character >= 'a' && character <= 'z' {\n            flipped[index] = character\
    \ + 32\n        } else if character >= 'A' && character <= 'Z' {\n           \
    \ flipped[index] = character + 32\n        }\n    }\n    return string(flipped)\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFlip_Case (0.00s)\n    --- FAIL: TestFlip_Case/test_num__1\
    \ (0.00s)\n        tmpx12kjj3g_test.go:39: expected 'hELLO!', got 'h\N\x8C\x8C\
    \x8F!'\n    --- FAIL: TestFlip_Case/test_num__2 (0.00s)\n        tmpx12kjj3g_test.go:39:\
    \ expected 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS', got 't\x88\N\x93\N \x96\
    \x89\x8F\x8C\N\x8E\x94 \x84\N\x8C\x89\x87\x88\x94\x93 \x88\x81\x96\N \x96\x89\x8F\
    \x8C\N\x8E\x94 \N\x8E\x84\x93'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075646
- exit_code: 1
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    var flipped string\n    for _, letter := range myString\
    \ {\n        if letter == 'a' {\n            flipped = flipped + \"B\"\n     \
    \   } else {\n            flipped = flipped + string(letter)\n        }\n    }\n\
    \    return flipped\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFlip_Case (0.00s)\n    --- FAIL: TestFlip_Case/test_num__1\
    \ (0.00s)\n        tmppt1vxjxz_test.go:38: expected 'hELLO!', got 'Hello!'\n \
    \   --- FAIL: TestFlip_Case/test_num__2 (0.00s)\n        tmppt1vxjxz_test.go:38:\
    \ expected 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS', got 'These violent delights\
    \ hBve violent ends'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075646
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    var buffer bytes.Buffer\n    for _, character := range\
    \ myString {\n        if character == rune('A') {\n            character = rune('a')\n\
    \        } else if character == rune('Z') {\n            character = rune('z')\n\
    \        } else {\n            character = rune(character+32)\n        }\n   \
    \     buffer.WriteRune(character)\n    }\n    return buffer.String()\n}\n\nfunc\
    \ TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"These violent delights\
    \ have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpld4bvx5t_test.go:12:16: undefined: bytes

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075645
- exit_code: 1
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    upperString := make([]rune, len(myString))\n    for index,\
    \ value := range myString {\n        if value == 'a' {\n            upperString[index]\
    \ = 'A'\n        } else if value == 'A' {\n            upperString[index] = 'a'\n\
    \        } else {\n            upperString[index] = value\n        }\n    }\n\
    \    return string(upperString)\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate\
    \ := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFlip_Case (0.00s)\n    --- FAIL: TestFlip_Case/test_num__1\
    \ (0.00s)\n        tmp2b854mes_test.go:40: expected 'hELLO!', got 'Hello!'\n \
    \   --- FAIL: TestFlip_Case/test_num__2 (0.00s)\n        tmp2b854mes_test.go:40:\
    \ expected 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS', got 'These violent delights\
    \ hAve violent ends'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075646
- exit_code: 1
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    for index, value := range myString {\n        if value\
    \ == 'a' {\n            myString = myString[:index] + myString[index+1:]\n   \
    \         break\n        }\n        if value == 'b' {\n            myString =\
    \ myString[:index] + myString[index+1:]\n            break\n        }\n    }\n\
    \    return myString\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate :=\
    \ flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFlip_Case (0.00s)\n    --- FAIL: TestFlip_Case/test_num__1\
    \ (0.00s)\n        tmpcfcmramh_test.go:40: expected 'hELLO!', got 'Hello!'\n \
    \   --- FAIL: TestFlip_Case/test_num__2 (0.00s)\n        tmpcfcmramh_test.go:40:\
    \ expected 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS', got 'These violent delights\
    \ hve violent ends'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075646
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    output := \"\"\n    for _, character := range myString\
    \ {\n        if isUpper(character) {\n            output += toLower(character)\n\
    \        } else {\n            output += character\n        }\n    }\n\n    return\
    \ output\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpaojsa354_test.go:14:12: undefined: isUpper

    /tmp/tmpaojsa354_test.go:15:23: undefined: toLower

    /tmp/tmpaojsa354_test.go:17:13: invalid operation: output += character (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075645
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    // Initialize a buffer with empty string.\n    myBuffer\
    \ := \"\"\n\n    // Iterate through all the characters in input string\n    for\
    \ _, character := range myString {\n        // If the character is a lowercase\
    \ letter, flip it to uppercase\n        if character == 'a' || character == 'b'\
    \ || character == 'c' || character == 'd' || character == 'e' || character ==\
    \ 'f' || character == 'g' || character == 'h' || character == 'i' || character\
    \ == 'j' || character == 'k' || character == 'l' || character == 'm' || character\
    \ == 'n' || character == 'o' || character == 'p' || character == 'q' || character\
    \ == 'r' || character == 's' || character == 't' || character == 'u' || character\
    \ == 'v' || character == 'w' || character == 'x' || character == 'y' || character\
    \ == 'z' {\n            myBuffer = myBuffer + string(character) + string(unicode.ToUpper(character))\n\
    \        } else {\n            myBuffer = myBuffer + string(character) + string(unicode.ToLower(character))\n\
    \        }\n    }\n\n    return myBuffer\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgexb9prt_test.go:19:62: undefined: unicode

    /tmp/tmpgexb9prt_test.go:21:62: undefined: unicode

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075645
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    return strings.ToUpper(myString) + strings.ToLower(myString[len(myString)-1:])\
    \ // this might seem weird but it's correct\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprl4oymse_test.go:12:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075645
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result = result + string([]byte(string([]byte{char\
    \ + 32})))\n        } else if char >= 'A' && char <= 'Z' {\n            result\
    \ = result + string([]byte(string([]byte{char + 32})))\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyd67xss7_test.go:15:59: cannot use char + 32 (value of type rune) as type
    byte in array or slice literal

    /tmp/tmpyd67xss7_test.go:17:59: cannot use char + 32 (value of type rune) as type
    byte in array or slice literal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075645
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    flipped := \"\"\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            flipped += string((char\
    \ - 32), 'a')\n        } else {\n            flipped += string(char)\n       \
    \ }\n    }\n    return flipped\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate\
    \ := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjs5xo7x4_test.go:15:44: too many arguments in conversion to string

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075645
- exit_code: 1
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    // Write your code here\n    return \"\"\n}\n\nfunc TestFlip_Case(t\
    \ *testing.T) {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected:\
    \ \"hELLO!\" },\n     { actual: candidate(\"These violent delights have violent\
    \ ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFlip_Case (0.00s)\n    --- FAIL: TestFlip_Case/test_num__1\
    \ (0.00s)\n        tmpy8z95rig_test.go:31: expected 'hELLO!', got ''\n    ---\
    \ FAIL: TestFlip_Case/test_num__2 (0.00s)\n        tmpy8z95rig_test.go:31: expected\
    \ 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075646
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    // Convert string to lower case to make the next step\
    \ easier.\n    var myString = strings.ToLower(myString)\n\n    // Flip all lowercase\
    \ chars.\n    for i := 0; i < len(myString); i++ {\n        if myString[i] >=\
    \ 'a' && myString[i] <= 'z' {\n            myString[i] -= 32\n        }\n    }\n\
    \n    // Flip all uppercase chars.\n    for i := 0; i < len(myString); i++ {\n\
    \        if myString[i] >= 'A' && myString[i] <= 'Z' {\n            myString[i]\
    \ += 32\n        }\n    }\n\n    // Convert back to upper case\n    return strings.ToUpper(myString)\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpj5fz5lkj_test.go:13:9:\
    \ myString redeclared in this block\n\t/tmp/tmpj5fz5lkj_test.go:11:16: other declaration\
    \ of myString\n/tmp/tmpj5fz5lkj_test.go:13:20: undefined: strings\n/tmp/tmpj5fz5lkj_test.go:18:13:\
    \ cannot assign to myString[i] (value of type byte)\n/tmp/tmpj5fz5lkj_test.go:25:13:\
    \ cannot assign to myString[i] (value of type byte)\n/tmp/tmpj5fz5lkj_test.go:30:12:\
    \ undefined: strings\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075645
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    return strings.ToLower(myString)\n}\n\nfunc TestFlip_Case(t\
    \ *testing.T) {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected:\
    \ \"hELLO!\" },\n     { actual: candidate(\"These violent delights have violent\
    \ ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp96oc4chj_test.go:12:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075645
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    if strings.HasPrefix(myString, \"_\") {\n        fmt.Println(\"\
    This string starts with an underscore\")\n    }\n    result := strings.Replace(myString,\
    \ \"A\", \"B\", 1)\n    result := strings.Replace(myString, \"b\", \"A\", 1)\n\
    \    result := strings.Replace(myString, \"a\", \"B\", 1)\n    return myString\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp79bnibeq_test.go:12:8: undefined: strings

    /tmp/tmp79bnibeq_test.go:15:15: undefined: strings

    /tmp/tmp79bnibeq_test.go:16:12: no new variables on left side of :=

    /tmp/tmp79bnibeq_test.go:16:15: undefined: strings

    /tmp/tmp79bnibeq_test.go:17:12: no new variables on left side of :=

    /tmp/tmp79bnibeq_test.go:17:15: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075645
- exit_code: 1
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    var result string\n    for _, char := range myString {\n\
    \        switch char {\n        case 'a':\n            result = \"A\"\n      \
    \  case 'b':\n            result = \"b\"\n        case 'c':\n            result\
    \ = \"C\"\n        case 'd':\n            result = \"d\"\n        case 'e':\n\
    \            result = \"E\"\n        case 'f':\n            result = \"f\"\n \
    \       case 'g':\n            result = \"G\"\n        case 'h':\n           \
    \ result = \"h\"\n        case 'i':\n            result = \"I\"\n        case\
    \ 'j':\n            result = \"J\"\n        case 'k':\n            result = \"\
    K\"\n        case 'l':\n            result = \"L\"\n        case 'm':\n      \
    \      result = \"m\"\n        case 'n':\n            result = \"N\"\n       \
    \ case 'o':\n            result = \"O\"\n        case 'p':\n            result\
    \ = \"P\"\n        case 'q':\n            result = \"q\"\n        case 'r':\n\
    \            result = \"R\"\n        case 's':\n            result = \"s\"\n \
    \       case 't':\n            result = \"T\"\n        case 'u':\n           \
    \ result = \"u\"\n        case 'v':\n            result = \"V\"\n        case\
    \ 'w':\n            result = \"W\"\n        case 'x':\n            result = \"\
    X\"\n        case 'y':\n            result = \"Y\"\n        case 'z':\n      \
    \      result = \"Z\"\n        default:\n            fmt.Println(char, \" is invalid\
    \ character.\")\n        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t\
    \ *testing.T) {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected:\
    \ \"hELLO!\" },\n     { actual: candidate(\"These violent delights have violent\
    \ ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "72  is invalid character.\n33  is invalid character.\n84  is invalid character.\n\
    32  is invalid character.\n32  is invalid character.\n32  is invalid character.\n\
    32  is invalid character.\n32  is invalid character.\n--- FAIL: TestFlip_Case\
    \ (0.00s)\n    --- FAIL: TestFlip_Case/test_num__1 (0.00s)\n        tmpuajipsvx_test.go:89:\
    \ expected 'hELLO!', got 'O'\n    --- FAIL: TestFlip_Case/test_num__2 (0.00s)\n\
    \        tmpuajipsvx_test.go:89: expected 'tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS', got 's'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075646
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    // Write your code here.\n    flipped := \"\"\n    for\
    \ _, letter := range myString {\n        if letter == \" \" {\n            flipped\
    \ = flipped + \"\\n\"\n        } else if letter == \" \" {\n            flipped\
    \ = flipped + \"\\n\"\n        } else if letter != \" \" {\n            flipped\
    \ = flipped + string(letter + unicode.ToLower(letter))\n        }\n    }\n   \
    \ return flipped\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoykpu_r5_test.go:15:22: invalid operation: letter == " " (mismatched types
    rune and untyped string)

    /tmp/tmpoykpu_r5_test.go:17:29: invalid operation: letter == " " (mismatched types
    rune and untyped string)

    /tmp/tmpoykpu_r5_test.go:19:29: invalid operation: letter != " " (mismatched types
    rune and untyped string)

    /tmp/tmpoykpu_r5_test.go:20:49: undefined: unicode

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075645
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    out := \"\"\n    for _, char := range myString {\n   \
    \     if char >= 'a' && char <= 'z' {\n            out += char + ('A' - 'a')\n\
    \        } else if char >= 'A' && char <= 'Z' {\n            out += char + ('a'\
    \ - 'A')\n        } else {\n            out += char\n        }\n    }\n    return\
    \ out\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp91vaed6t_test.go:15:13: invalid operation: out += char + (''A'' - ''a'')
    (mismatched types string and rune)

    /tmp/tmp91vaed6t_test.go:17:13: invalid operation: out += char + (''a'' - ''A'')
    (mismatched types string and rune)

    /tmp/tmp91vaed6t_test.go:19:13: invalid operation: out += char (mismatched types
    string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075645
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    myString = strings.ToUpper(myString)\n    return strings.ToLower(myString)\n\
    }\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"These violent delights\
    \ have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjlbcz5xp_test.go:12:16: undefined: strings

    /tmp/tmpjlbcz5xp_test.go:13:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075645
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, letter := range myString {\n\
    \        if strings.ContainsAny(letter, \"AEIOUaeiou\") {\n            result\
    \ += strings.ToUpper(letter)\n        } else {\n            result += strings.ToLower(letter)\n\
    \        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp722strfr_test.go:14:12: undefined: strings

    /tmp/tmp722strfr_test.go:15:23: undefined: strings

    /tmp/tmp722strfr_test.go:17:23: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075645
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    var buffer bytes.Buffer\n    for _, letter := range myString\
    \ {\n        if letter == 'a' {\n            letter = 'A'\n        } else if letter\
    \ == 'A' {\n            letter = 'a'\n        }\n        buffer.WriteString(letter)\n\
    \    }\n    return buffer.String()\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnon3reb3_test.go:12:16: undefined: bytes

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075649
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    out := \"\"\n    for _, s := range myString {\n      \
    \  if unicode.IsUpper(s) {\n            out += string(unicode.ToLower(s))\n  \
    \      } else {\n            out += string(s)\n        }\n    }\n    return out\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptg97cflp_test.go:14:12: undefined: unicode

    /tmp/tmptg97cflp_test.go:15:27: undefined: unicode

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075649
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    // Go through the string, and if an upper case letter\
    \ is encountered, swap it with a lower case letter\n    for _, v := range myString\
    \ {\n        if ('A' <= v && v <= 'Z') {\n            myString = strings.ToLower(myString)\n\
    \            myString = strings.ToUpper(myString)\n        }\n    }\n\n    return\
    \ myString\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd4jwrw2y_test.go:15:24: undefined: strings

    /tmp/tmpd4jwrw2y_test.go:16:24: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075649
- exit_code: 1
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    var newString string\n    i := 0\n\n    for i < len(myString)\
    \ {\n        newString += string(myString[i] + 32)\n        i++\n    }\n\n   \
    \ return newString\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFlip_Case (0.00s)\n    --- FAIL: TestFlip_Case/test_num__1\
    \ (0.00s)\n        tmpyn_ift63_test.go:38: expected 'hELLO!', got 'h\N\x8C\x8C\
    \x8FA'\n    --- FAIL: TestFlip_Case/test_num__2 (0.00s)\n        tmpyn_ift63_test.go:38:\
    \ expected 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS', got 't\x88\N\x93\N@\x96\
    \x89\x8F\x8C\N\x8E\x94@\x84\N\x8C\x89\x87\x88\x94\x93@\x88\x81\x96\N@\x96\x89\x8F\
    \x8C\N\x8E\x94@\N\x8E\x84\x93'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075649
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    upper_string := strings.ToUpper(myString)\n    lower_string\
    \ := strings.ToLower(upper_string)\n    return lower_string\n}\n\nfunc TestFlip_Case(t\
    \ *testing.T) {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected:\
    \ \"hELLO!\" },\n     { actual: candidate(\"These violent delights have violent\
    \ ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqrrr9so5_test.go:12:21: undefined: strings

    /tmp/tmpqrrr9so5_test.go:13:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075649
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    return string(myString[:1]) + string(tolower(myString[1:]))\
    \ + string(myString[:1])\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate\
    \ := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpm_w9lbx1_test.go:12:42: undefined: tolower

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075649
- exit_code: 1
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    output := \"\"\n    counter := 0\n    for _, char := range\
    \ myString {\n        if char >= 'a' && char <= 'z' {\n            counter +=\
    \ 1\n            char |= 32\n        }\n        output += string(char)\n    }\n\
    \n    return output\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFlip_Case (0.00s)\n    --- FAIL: TestFlip_Case/test_num__1\
    \ (0.00s)\n        tmpblz7ou92_test.go:40: expected 'hELLO!', got 'Hello!'\n \
    \   --- FAIL: TestFlip_Case/test_num__2 (0.00s)\n        tmpblz7ou92_test.go:40:\
    \ expected 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS', got 'These violent delights\
    \ have violent ends'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075650
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    var myString string\n    for i := 0; i < len(myString);\
    \ i++ {\n        if myString[i] >= 'A' && myString[i] <= 'Z' {\n            myString\
    \ = myString[i:] + myString[0:i]\n        }\n    }\n    return myString\n}\n\n\
    func TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"These violent delights\
    \ have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpu983gwvx_test.go:12:9:\
    \ myString redeclared in this block\n\t/tmp/tmpu983gwvx_test.go:11:16: other declaration\
    \ of myString\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075649
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    flipped := \"\"\n    for _, letter := range myString {\n\
    \        if letter == 'a' || letter == 'b' || letter == 'c' || letter == 'd' ||\
    \ letter == 'e' || letter == 'f' || letter == 'g' || letter == 'h' || letter ==\
    \ 'i' || letter == 'j' || letter == 'k' || letter == 'l' || letter == 'm' || letter\
    \ == 'n' || letter == 'o' || letter == 'p' || letter == 'q' || letter == 'r' ||\
    \ letter == 's' || letter == 't' || letter == 'u' || letter == 'v' || letter ==\
    \ 'w' || letter == 'x' || letter == 'y' || letter == 'z' {\n            flipped\
    \ += string(letter + 32 - int(letter))\n        } else {\n            flipped\
    \ += string(letter)\n        }\n    }\n    return flipped\n}\n\nfunc TestFlip_Case(t\
    \ *testing.T) {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected:\
    \ \"hELLO!\" },\n     { actual: candidate(\"These violent delights have violent\
    \ ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx1_wht3k_test.go:15:31: invalid operation: letter + 32 - int(letter) (mismatched
    types rune and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075649
- exit_code: 1
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    s := \"\"\n    for _, char := range myString {\n     \
    \   switch char {\n        default:\n            s += char\n        case \"a\"\
    :\n            s += \"A\"\n        case \"b\":\n            s += \"B\"\n     \
    \   case \"c\":\n            s += \"C\"\n        case \"d\":\n            s +=\
    \ \"D\"\n        case \"e\":\n            s += \"E\"\n        case \"f\":\n  \
    \          s += \"F\"\n        case \"g\":\n            s += \"G\"\n        case\
    \ \"h\":\n            s += \"H\"\n        case \"i\":\n            s += \"I\"\n\
    \        case \"j\":\n            s += \"J\"\n        case \"k\":\n          \
    \  s += \"K\"\n        case \"l\":\n            s += \"L\"\n        case \"m\"\
    :\n            s += \"M\"\n        case \"n\":\n            s += \"N\"\n     \
    \   case \"o\":\n            s += \"O\"\n        case \"p\":\n            s +=\
    \ \"P\"\n        case \"q\":\n            s += \"Q\"\n        case \"r\":\n  \
    \          s += \"R\"\n        case \"s\":\n            s += \"S\"\n        case\
    \ \"t\":\n            s += \"T\"\n        case \"u\":\n            s += \"U\"\n\
    \        case \"v\":\n            s += \"V\"\n        case \"w\":\n          \
    \  s += \"W\"\n        case \"x\":\n            s += \"X\"\n        case \"y\"\
    :\n            s += \"Y\"\n        case \"z\":\n            s += \"Z\"\n     \
    \   case \"A\":\n            s += \"a\"\n        case \"B\":\n            s +=\
    \ \"b\"\n        case \"C\":\n            s += \"c\"\n        case \"D\":\n  \
    \          s += \"d\"\n        case \"E\":\n            s += \"e\"\n        case\
    \ \"F\":\n            s += \"f\"\n        case \"G\":\n            s += \"g\"\n\
    \        case \"H\":\n            s += \"h\"\n        case \"I\":\n          \
    \  s += \"i\"\n        case \"J\":\n            s += \"j\"\n        case \"K\"\
    :\n            s += \"k\"\n        case \"L\":\n            s += \"l\"\n     \
    \   case \"M\":\n            s += \"m\"\n        case \"N\":\n            s +=\
    \ \"n\"\n        case \"O\":\n            s += \"o\"\n        case \"P\":\n  \
    \          s += \"p\"\n        case \"Q\":\n            s += \"q\"\n        case\
    \ \"R\":\n            s += \"r\"\n        case \"S\":\n            s += \"s\"\n\
    \        case \"T\":\n            \nfunc TestFlip_Case(t *testing.T) {\n  candidate\
    \ := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1lwd8syp_test.go:109:6: expected ''('', found TestFlip_Case

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075648
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, letter := range myString {\n\
    \        if letter == letter.toUpper() {\n            result = letter.toLower()\
    \ + result\n        } else {\n            result = letter + result\n        }\n\
    \    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate\
    \ := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplr91h67r_test.go:14:29: letter.toUpper undefined (type rune has no field
    or method toUpper)

    /tmp/tmplr91h67r_test.go:15:29: letter.toLower undefined (type rune has no field
    or method toLower)

    /tmp/tmplr91h67r_test.go:17:22: invalid operation: letter + result (mismatched
    types rune and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075649
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    flippedString := \"\"\n\n    for i := 0; i < len(myString);\
    \ i++ {\n        if i > 0 && myString[i] == myString[i-1] {\n            flippedString\
    \ = flippedString + myString[i]\n        } else {\n            flippedString =\
    \ flippedString + string(myString[i] + 32)\n        }\n    }\n\n    return flippedString\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp58mqp9jg_test.go:16:29: invalid operation: flippedString + myString[i]
    (mismatched types string and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075649
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    return strings.Map(func(r rune) rune {\n        if ('A'\
    \ <= r && r <= 'Z') {\n            return r + unicode.ToUpper(r)\n        }\n\
    \        return r\n    }, myString)\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa4f3jm4f_test.go:12:12: undefined: strings

    /tmp/tmpa4f3jm4f_test.go:14:24: undefined: unicode

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075649
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    lowerCaseString := \"\"\n    for _, letter := range myString\
    \ {\n        if letter == \" \" {\n            lowerCaseString += letter\n   \
    \     } else {\n            lowerCaseString += string([]byte{letter})\n      \
    \  }\n    }\n    return string([]byte{unicode.ToUpper(unicode.ToLower([]byte(lowerCaseString))[0])})\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn2o6sgm5_test.go:14:22: invalid operation: letter == " " (mismatched types
    rune and untyped string)

    /tmp/tmpn2o6sgm5_test.go:15:13: invalid operation: lowerCaseString += letter (mismatched
    types string and rune)

    /tmp/tmpn2o6sgm5_test.go:17:46: cannot use letter (variable of type rune) as type
    byte in array or slice literal

    /tmp/tmpn2o6sgm5_test.go:20:26: undefined: unicode

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075649
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    charList := []string{\"a\", \"b\", \"c\", \"d\", \"e\"\
    , \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\"\
    , \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"}\n    charList2\
    \ := []string{\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"\
    J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"\
    U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"}\n\n    for i, val := range charList {\n\
    \        myString = strings.Replace(myString, val, charList2[i], -1)\n    }\n\n\
    \    return strings.ToLower(myString)\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5di98kab_test.go:16:20: undefined: strings

    /tmp/tmp5di98kab_test.go:19:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075649
- exit_code: 1
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    var buffer []byte\n    var uppercase bool\n\n    for _,\
    \ char := range myString {\n        switch char {\n        default:\n        \
    \    buffer = append(buffer, char)\n        case \"A\":\n            uppercase\
    \ = !uppercase\n        case \"a\":\n            uppercase = !uppercase\n    \
    \    case \"B\":\n            uppercase = !uppercase\n        case \"b\":\n  \
    \          uppercase = !uppercase\n        case \"C\":\n            uppercase\
    \ = !uppercase\n        case \"c\":\n            uppercase = !uppercase\n    \
    \    case \"D\":\n            uppercase = !uppercase\n        case \"d\":\n  \
    \          uppercase = !uppercase\n        case \"E\":\n            uppercase\
    \ = !uppercase\n        case \"e\":\n            uppercase = !uppercase\n    \
    \    case \"F\":\n            uppercase = !uppercase\n        case \"f\":\n  \
    \          uppercase = !uppercase\n        case \"G\":\n            uppercase\
    \ = !uppercase\n        case \"g\":\n            uppercase = !uppercase\n    \
    \    case \"H\":\n            uppercase = !uppercase\n        case \"h\":\n  \
    \          uppercase = !uppercase\n        case \"I\":\n            uppercase\
    \ = !uppercase\n        case \"i\":\n            uppercase = !uppercase\n    \
    \    case \"J\":\n            uppercase = !uppercase\n        case \"j\":\n  \
    \          uppercase = !uppercase\n        case \"K\":\n            uppercase\
    \ = !uppercase\n        case \"k\":\n            uppercase = !uppercase\n    \
    \    case \"L\":\n            uppercase = !uppercase\n        case \"l\":\n  \
    \          uppercase = !uppercase\n        case \"M\":\n            uppercase\
    \ = !uppercase\n        case \"m\":\n            uppercase = !uppercase\n    \
    \    case \"N\":\n            uppercase = !uppercase\n        case \"n\":\n  \
    \          uppercase = !uppercase\n        case \"O\":\n            uppercase\
    \ = !uppercase\n        case \"o\":\n            uppercase = !uppercase\n    \
    \    case \"P\":\n            uppercase = !uppercase\n        case \"p\":\n  \
    \          uppercase = !uppercase\n        case \"Q\":\n            uppercase\
    \ = !uppercase\n        case \"q\":\n            uppercase = !uppercase\n    \
    \    case \"R\":\n            uppercase = !uppercase\n        case \"r\":\n  \
    \          uppercase = !uppercase\n        case \"S\":\n            uppercase\
    \ = !uppercase\n        case \"s\":\n            uppercase = !uppercase\n    \
    \    case \"T\":\n            uppercase = !uppercase\n        case \"t\":\n  \
    \          uppercase = !uppercase\n        case \"U\":\n            uppercase\
    \ = !uppercase\n        case \"u\":\n            uppercase = !uppercase\n    \
    \    case \"V\":\n            uppercase = !uppercase\n        case \"v\":\n  \
    \          uppercase = !uppercase\n        case \"W\":\n            uppercase\
    \ = !uppercase\n        case \"w\":\n            uppercase = !uppercase\n    \
    \    case \"X\":\n            uppercase = !uppercase\n        case \"x\":\n  \
    \          uppercase = !uppercase\n        case \"Y\":\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp00ajw1ox_test.go:116:6: expected ''('', found TestFlip_Case

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075648
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, letter := range myString {\n\
    \        if letter == 'a' {\n            result += 'A'\n        } else if letter\
    \ == 'b' {\n            result += 'B'\n        } else if letter == 'c' {\n   \
    \         result += 'C'\n        } else if letter == 'd' {\n            result\
    \ += 'D'\n        } else if letter == 'e' {\n            result += 'E'\n     \
    \   } else if letter == 'f' {\n            result += 'F'\n        } else if letter\
    \ == 'g' {\n            result += 'G'\n        } else if letter == 'h' {\n   \
    \         result += 'H'\n        } else if letter == 'i' {\n            result\
    \ += 'I'\n        } else if letter == 'j' {\n            result += 'J'\n     \
    \   } else if letter == 'k' {\n            result += 'K'\n        } else if letter\
    \ == 'l' {\n            result += 'L'\n        } else if letter == 'm' {\n   \
    \         result += 'M'\n        } else if letter == 'n' {\n            result\
    \ += 'N'\n        } else if letter == 'o' {\n            result += 'O'\n     \
    \   } else if letter == 'p' {\n            result += 'P'\n        } else if letter\
    \ == 'q' {\n            result += 'Q'\n        } else if letter == 'r' {\n   \
    \         result += 'R'\n        } else if letter == 's' {\n            result\
    \ += 'S'\n        } else if letter == 't' {\n            result += 'T'\n     \
    \   } else if letter == 'u' {\n            result += 'U'\n        } else if letter\
    \ == 'v' {\n            result += 'V'\n        } else if letter == 'w' {\n   \
    \         result += 'W'\n        } else if letter == 'x' {\n            result\
    \ += 'X'\n        } else if letter == 'y' {\n            result += 'Y'\n     \
    \   } else if letter == 'z' {\n            result += 'Z'\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpaxok5bh9_test.go:15:13: invalid operation: result += ''A'' (mismatched
    types string and untyped rune)

    /tmp/tmpaxok5bh9_test.go:17:13: invalid operation: result += ''B'' (mismatched
    types string and untyped rune)

    /tmp/tmpaxok5bh9_test.go:19:13: invalid operation: result += ''C'' (mismatched
    types string and untyped rune)

    /tmp/tmpaxok5bh9_test.go:21:13: invalid operation: result += ''D'' (mismatched
    types string and untyped rune)

    /tmp/tmpaxok5bh9_test.go:23:13: invalid operation: result += ''E'' (mismatched
    types string and untyped rune)

    /tmp/tmpaxok5bh9_test.go:25:13: invalid operation: result += ''F'' (mismatched
    types string and untyped rune)

    /tmp/tmpaxok5bh9_test.go:27:13: invalid operation: result += ''G'' (mismatched
    types string and untyped rune)

    /tmp/tmpaxok5bh9_test.go:29:13: invalid operation: result += ''H'' (mismatched
    types string and untyped rune)

    /tmp/tmpaxok5bh9_test.go:31:13: invalid operation: result += ''I'' (mismatched
    types string and untyped rune)

    /tmp/tmpaxok5bh9_test.go:33:13: invalid operation: result += ''J'' (mismatched
    types string and untyped rune)

    /tmp/tmpaxok5bh9_test.go:33:13: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075650
- exit_code: 1
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, char := range myString {\n\
    \        switch char {\n        case 'a':\n            result += \"A\"\n     \
    \   case 'A':\n            result += \"a\"\n        case 'b':\n            result\
    \ += \"B\"\n        case 'B':\n            result += \"b\"\n        case 'c':\n\
    \            result += \"C\"\n        case 'C':\n            result += \"c\"\n\
    \        case 'd':\n            result += \"D\"\n        case 'D':\n         \
    \   result += \"d\"\n        case 'e':\n            result += \"E\"\n        case\
    \ 'E':\n            result += \"e\"\n        case 'f':\n            result +=\
    \ \"F\"\n        case 'F':\n            result += \"f\"\n        case 'g':\n \
    \           result += \"G\"\n        case 'G':\n            result += \"g\"\n\
    \        case 'h':\n            result += \"H\"\n        case 'H':\n         \
    \   result += \"h\"\n        case 'i':\n            result += \"I\"\n        case\
    \ 'I':\n            result += \"i\"\n        case 'j':\n            result +=\
    \ \"J\"\n        case 'J':\n            result += \"j\"\n        case 'k':\n \
    \           result += \"K\"\n        case 'K':\n            result += \"k\"\n\
    \        case 'l':\n            result += \"L\"\n        case 'L':\n         \
    \   result += \"l\"\n        case 'm':\n            result += \"M\"\n        case\
    \ 'M':\n            result += \"m\"\n        case 'n':\n            result +=\
    \ \"N\"\n        case 'N':\n            result += \"n\"\n        case 'o':\n \
    \           result += \"O\"\n        case 'O':\n            result += \"o\"\n\
    \        case 'p':\n            result += \"P\"\n        case 'P':\n         \
    \   result += \"p\"\n        case 'q':\n            result += \"Q\"\n        case\
    \ 'Q':\n            result += \"q\"\n        case 'r':\n            result +=\
    \ \"R\"\n        case 'R':\n            result += \"r\"\n        case 's':\n \
    \           result += \"S\"\n        case 'S':\n            result += \"s\"\n\
    \        case 't':\n            result += \"T\"\n        case 'T':\n         \
    \   result += \"t\"\n        case 'u':\n            result += \"U\"\n        case\
    \ 'U':\n            result += \"u\"\n        case 'v':\n            result +=\
    \ \"V\"\n        case 'V':\n            result += \"v\"\n        case 'w':\n \
    \           result += \"W\"\n        case 'W':\n            result += \"w\"\n\
    \        case 'x':\n            result += \"X\"\n        case 'X':\n         \
    \   result += \"x\"\n        case 'y':\n            result += \"Y\"\n        case\
    \ 'Y':\n            result += \"y\"\n        case 'z':\n            result \n\
    func TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"These violent delights\
    \ have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpzxo_e5mk_test.go:117:6: expected ''('', found TestFlip_Case

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075648
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := myString\n    for i := 0; i < len(result); i++\
    \ {\n        if (result[i] >= 'A' && result[i] <= 'Z') {\n            result[i]\
    \ = ((result[i]-'A') + ('A' - 'a'))\n        }\n        if (result[i] >= 'a' &&\
    \ result[i] <= 'z') {\n            result[i] = ((result[i]-'a') + ('a' - 'A'))\n\
    \        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppu0ccal1_test.go:15:44: (''A'' - ''a'') (untyped rune constant -32) overflows
    byte

    /tmp/tmppu0ccal1_test.go:18:13: cannot assign to result[i] (value of type byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075650
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    // Step 1: Convert to lower case\n    lowerString := strings.ToLower(myString)\n\
    \n    // Step 2: Convert to upper case\n    upperString := strings.ToUpper(myString)\n\
    \n    // Step 3: Combine the two strings\n    return upperString + lowerString\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7r13mgan_test.go:13:20: undefined: strings

    /tmp/tmp7r13mgan_test.go:16:20: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075650
- exit_code: 1
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    c := []rune(myString)\n\n    flipped := make([]rune, len(c))\n\
    \    for i, v := range c {\n        if v < 'A' || v > 'Z' {\n            flipped[i]\
    \ = v\n        } else {\n            flipped[i] = 'A' + v-'A'\n        }\n   \
    \ }\n    return string(flipped)\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate\
    \ := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFlip_Case (0.00s)\n    --- FAIL: TestFlip_Case/test_num__1\
    \ (0.00s)\n        tmpv4wtcic1_test.go:40: expected 'hELLO!', got 'Hello!'\n \
    \   --- FAIL: TestFlip_Case/test_num__2 (0.00s)\n        tmpv4wtcic1_test.go:40:\
    \ expected 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS', got 'These violent delights\
    \ have violent ends'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075650
- exit_code: 1
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    var newString string\n    for _, char := range myString\
    \ {\n        if (char >= 'a' && char <= 'z') || (char >= 'A' && char <= 'Z') {\n\
    \            newString += string(char + 32 - 'a')\n        }\n    }\n    return\
    \ newString\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFlip_Case (0.00s)\n    --- FAIL: TestFlip_Case/test_num__1\
    \ (0.00s)\n        tmp9yl04n3s_test.go:36: expected 'hELLO!', got '\a$++.'\n \
    \   --- FAIL: TestFlip_Case/test_num__2 (0.00s)\n        tmp9yl04n3s_test.go:36:\
    \ expected 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS', got '\x13'$2$5(.+$-3#$+(&'32'\
    \ 5$5(.+$-3$-#2'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075650
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    s := \"\"\n    for _, letter := range myString {\n   \
    \     if letter == letter.toUpper {\n            s += letter.toLower\n       \
    \ } else {\n            s += letter.toUpper\n        }\n    }\n    return s\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3u1t8s1x_test.go:14:29: letter.toUpper undefined (type rune has no field
    or method toUpper)

    /tmp/tmp3u1t8s1x_test.go:15:25: letter.toLower undefined (type rune has no field
    or method toLower)

    /tmp/tmp3u1t8s1x_test.go:17:25: letter.toUpper undefined (type rune has no field
    or method toUpper)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075650
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    return strings.ToUpper(myString[0:1]) + myString[1:]\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi0f5cfzn_test.go:12:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075651
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    str := make([]rune, len(myString))\n    for i := range\
    \ str {\n        str[i] = myString[i]\n    }\n    i := 0\n    for i < len(str)\
    \ {\n        if str[i] >= 'A' && str[i] <= 'Z' {\n            str[i] = str[i]\
    \ - ('A' - 'a')\n        }\n        i += 1 // i incremented in loop\n    }\n \
    \   return string(str)\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate :=\
    \ flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4hmf1mie_test.go:14:18: cannot use myString[i] (value of type byte) as
    type rune in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075651
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    for idx, letter1 := range myString {\n        if letter1\
    \ >= 'a' && letter1 <= 'z' {\n            myString[idx] = letter1 - 32\n     \
    \   }\n        if letter1 >= 'A' && letter1 <= 'Z' {\n            myString[idx]\
    \ = letter1 + 32\n        }\n    }\n    return myString\n}\n\nfunc TestFlip_Case(t\
    \ *testing.T) {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected:\
    \ \"hELLO!\" },\n     { actual: candidate(\"These violent delights have violent\
    \ ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5l7wulrm_test.go:14:13: cannot assign to myString[idx] (value of type
    byte)

    /tmp/tmp5l7wulrm_test.go:17:13: cannot assign to myString[idx] (value of type
    byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075652
- exit_code: 1
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    // TODO: Implement me\n    return \"\"\n}\n\nfunc TestFlip_Case(t\
    \ *testing.T) {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected:\
    \ \"hELLO!\" },\n     { actual: candidate(\"These violent delights have violent\
    \ ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFlip_Case (0.00s)\n    --- FAIL: TestFlip_Case/test_num__1\
    \ (0.00s)\n        tmptilo1wsm_test.go:31: expected 'hELLO!', got ''\n    ---\
    \ FAIL: TestFlip_Case/test_num__2 (0.00s)\n        tmptilo1wsm_test.go:31: expected\
    \ 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075653
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    var newString string = \"\"\n    for _, letter := range\
    \ myString {\n        if letter == \" \" {\n            newString += letter\n\
    \        } else {\n            newString += string([]byte{letter + 32, 65 - byte(letter)})\n\
    \        }\n    }\n    return newString\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdfw43rfr_test.go:14:22: invalid operation: letter == " " (mismatched types
    rune and untyped string)

    /tmp/tmpdfw43rfr_test.go:15:13: invalid operation: newString += letter (mismatched
    types string and rune)

    /tmp/tmpdfw43rfr_test.go:17:40: cannot use letter + 32 (value of type rune) as
    type byte in array or slice literal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075652
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    // Loop through each character and swap case\n    for\
    \ i := 0; i < len(myString); i++ {\n        char := myString[i]\n        if char\
    \ >= 'a' && char <= 'z' {\n            // Swap the case\n            myString[i]\
    \ = char + 32\n        } else {\n            // Don't do anything\n        }\n\
    \    }\n\n    return myString\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate\
    \ := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr3kjdjdu_test.go:17:13: cannot assign to myString[i] (value of type byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075652
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    flip := false\n    return strings.Map(func(r rune) rune\
    \ {\n        if flip == true {\n            return unicode.ToUpper(r)\n      \
    \  }\n        return unicode.ToLower(r)\n    }, myString)\n}\n\nfunc TestFlip_Case(t\
    \ *testing.T) {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected:\
    \ \"hELLO!\" },\n     { actual: candidate(\"These violent delights have violent\
    \ ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpaj1i1ao0_test.go:13:12: undefined: strings

    /tmp/tmpaj1i1ao0_test.go:15:20: undefined: unicode

    /tmp/tmpaj1i1ao0_test.go:17:16: undefined: unicode

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075652
- exit_code: 1
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    // Create a buffer for storing our flipped string.\n \
    \   var buffer []rune\n\n    // Iterate through the runes in the string and flip\
    \ lower case\n    // chars to uppercase and upper case to lower case.\n    for\
    \ _, r := range myString {\n        switch r {\n        case 'a':\n          \
    \  buffer = append(buffer, 'A')\n        case 'b':\n            buffer = append(buffer,\
    \ 'B')\n        case 'c':\n            buffer = append(buffer, 'C')\n        case\
    \ 'd':\n            buffer = append(buffer, 'D')\n        case 'e':\n        \
    \    buffer = append(buffer, 'E')\n        case 'f':\n            buffer = append(buffer,\
    \ 'F')\n        case 'g':\n            buffer = append(buffer, 'G')\n        case\
    \ 'h':\n            buffer = append(buffer, 'H')\n        case 'i':\n        \
    \    buffer = append(buffer, 'I')\n        case 'j':\n            buffer = append(buffer,\
    \ 'J')\n        case 'k':\n            buffer = append(buffer, 'K')\n        case\
    \ 'l':\n            buffer = append(buffer, 'L')\n        case 'm':\n        \
    \    buffer = append(buffer, 'M')\n        case 'n':\n            buffer = append(buffer,\
    \ 'N')\n        case 'o':\n            buffer = append(buffer, 'O')\n        case\
    \ 'p':\n            buffer = append(buffer, 'P')\n        case 'q':\n        \
    \    buffer = append(buffer, 'Q')\n        case 'r':\n            buffer = append(buffer,\
    \ 'R')\n        case 's':\n            buffer = append(buffer, 'S')\n        case\
    \ 't':\n            buffer = append(buffer, 'T')\n        case 'u':\n        \
    \    buffer = append(buffer, 'U')\n        case 'v':\n            buffer = append(buffer,\
    \ 'V')\n        case 'w':\n            buffer = append(buffer, 'W')\n        case\
    \ 'x':\n            buffer = append(buffer, 'X')\n        case 'y':\n        \
    \    buffer = append(buffer, 'Y')\n        case 'z':\n            buffer = append(buffer,\
    \ 'Z')\n        case 'A':\n            buffer = append(buffer, 'a')\n        case\
    \ 'B':\n            buffer = append(buffer, 'b')\n        case 'C':\n        \
    \    buffer = append(buffer, 'c')\n        case 'D':\n            buffer = append(buffer,\
    \ 'd')\n        case 'E':\n            buffer = append(buffer, 'e')\n        case\
    \ 'F':\n            buffer = append(buffer, 'f')\n        case 'G':\n        \
    \    buffer = append(buffer, 'g')\n        case 'H':\n            buffer = append(buffer,\
    \ 'h')\n        case 'I':\n            buffer = append(buffer, 'i')\n        case\
    \ 'J':\n            buffer = append(buffer, 'j')\n        case 'K':\n        \
    \    buffer = append(buffer, 'k')\n        case 'L':\n            buffer = append(buffer,\
    \ 'l')\n        case 'M':\n            buffer = append(buffer\nfunc TestFlip_Case(t\
    \ *testing.T) {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected:\
    \ \"hELLO!\" },\n     { actual: candidate(\"These violent delights have violent\
    \ ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpy3kx_phh_test.go:96:35: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075651
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    var flipped_str string = \"\"\n    for _, char := range\
    \ myString {\n        if char >= 'a' && char <= 'z' {\n            flipped_str\
    \ += char.ToUpper()\n        } else if char >= 'A' && char <= 'Z' {\n        \
    \    flipped_str += char.ToLower()\n        } else {\n            flipped_str\
    \ += char\n        }\n    }\n    return flipped_str\n}\n\nfunc TestFlip_Case(t\
    \ *testing.T) {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected:\
    \ \"hELLO!\" },\n     { actual: candidate(\"These violent delights have violent\
    \ ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphfaut9_z_test.go:15:33: char.ToUpper undefined (type rune has no field
    or method ToUpper)

    /tmp/tmphfaut9_z_test.go:17:33: char.ToLower undefined (type rune has no field
    or method ToLower)

    /tmp/tmphfaut9_z_test.go:19:13: invalid operation: flipped_str += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075652
- exit_code: 1
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    flipped := \"\"\n    for _, c := range myString {\n  \
    \      if c >= 'a' && c <= 'z' {\n            c = c + 32\n        } else if c\
    \ >= 'A' && c <= 'Z' {\n            c = c - 32\n        }\n        flipped +=\
    \ string(c)\n    }\n    return flipped\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFlip_Case (0.00s)\n    --- FAIL: TestFlip_Case/test_num__1\
    \ (0.00s)\n        tmp_1y0f6pb_test.go:39: expected 'hELLO!', got '(\N\x8C\x8C\
    \x8F!'\n    --- FAIL: TestFlip_Case/test_num__2 (0.00s)\n        tmp_1y0f6pb_test.go:39:\
    \ expected 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS', got '4\x88\N\x93\N \x96\
    \x89\x8F\x8C\N\x8E\x94 \x84\N\x8C\x89\x87\x88\x94\x93 \x88\x81\x96\N \x96\x89\x8F\
    \x8C\N\x8E\x94 \N\x8E\x84\x93'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075653
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := myString\n    for i := 0; i < len(myString);\
    \ i++ {\n        if myString[i] >= 65 && myString[i] <= 90 {\n            result\
    \ = result[:i] + string((myString[i] - 32) + \"a\") + result[i+1:]\n        }\n\
    \    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate\
    \ := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9rfvcvpy_test.go:15:42: invalid operation: (myString[i] - 32) + "a" (mismatched
    types byte and untyped string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075652
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    if myString == \"\" {\n        return \"\"\n    }\n\n\
    \    lowerCased := []rune(myString)\n    for i, r := range lowerCased {\n    \
    \    if r >= 'A' && r <= 'Z' {\n            lowerCased[i] = 'a' + r - 'A'\n  \
    \      } else {\n            lowerCased[i] = r\n        }\n    }\n\n    uppercased\
    \ := []rune(myString)\n    for i, r := range lowercased {\n        if r >= 'a'\
    \ && r <= 'z' {\n            uppercased[i] = 'A' + r - 'a'\n        } else {\n\
    \            uppercased[i] = r\n        }\n    }\n\n    return string(uppercased)\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppt7tniou_test.go:26:23: undefined: lowercased

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075652
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    upper_case := make([]rune, 0, len(myString))\n    for\
    \ _, letter := range myString {\n        if letter >= 'A' && letter <= 'Z' {\n\
    \            upper_case = append(upper_case, letter)\n        } else {\n     \
    \       upper_case = append(upper_case, unicode.ToLower(letter))\n        }\n\
    \    }\n    return string(upper_case)\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpljxi4jmb_test.go:17:45: undefined: unicode

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075652
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    // Convert string into lower case to remove case sensitivity\n\
    \    lowercase := strings.ToLower(myString)\n    // Flip all lowercase letters\
    \ to uppercase\n    uppercase := strings.ToUpper(lowercase)\n    // Convert flipped\
    \ string to lower case\n    lowercase := strings.ToLower(uppercase)\n    // Return\
    \ resulting string\n    return lowercase\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbb75u9cy_test.go:13:18: undefined: strings

    /tmp/tmpbb75u9cy_test.go:15:18: undefined: strings

    /tmp/tmpbb75u9cy_test.go:17:15: no new variables on left side of :=

    /tmp/tmpbb75u9cy_test.go:17:18: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075652
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := myString\n    fmt.Printf(\"%q %q\\n\", myString,\
    \ result)\n    for i := 0; i < len(result); i++ {\n        if unicode.IsLower(rune(myString[i]))\
    \ {\n            result[i] = unicode.ToUpper(rune(myString[i]))\n        } else\
    \ {\n            result[i] = unicode.ToLower(rune(myString[i]))\n        }\n \
    \   }\n    return string(result)\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate\
    \ := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwby62v2m_test.go:15:12: undefined: unicode

    /tmp/tmpwby62v2m_test.go:16:25: undefined: unicode

    /tmp/tmpwby62v2m_test.go:18:25: undefined: unicode

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075652
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    var uppercase = \"\"\n    var lowercase = \"\"\n    for\
    \ _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n     \
    \       uppercase += char - 'A' + 'a'\n        } else {\n            lowercase\
    \ += char\n        }\n    }\n    return lowercase + uppercase\n}\n\nfunc TestFlip_Case(t\
    \ *testing.T) {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected:\
    \ \"hELLO!\" },\n     { actual: candidate(\"These violent delights have violent\
    \ ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpulv1wvc8_test.go:16:13: invalid operation: uppercase += char - ''A'' +
    ''a'' (mismatched types string and rune)

    /tmp/tmpulv1wvc8_test.go:18:13: invalid operation: lowercase += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075653
- exit_code: 1
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    lowerCases := make([]rune, len(myString))\n    upperCases\
    \ := make([]rune, len(myString))\n    for i, r := range myString {\n        if\
    \ r >= 'A' && r <= 'Z' {\n            lowerCases[i] = r - 'A' + 'a'\n        }\
    \ else {\n            upperCases[i] = r\n        }\n    }\n    return string(append(lowerCases,\
    \ upperCases...))\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFlip_Case (0.00s)\n    --- FAIL: TestFlip_Case/test_num__1\
    \ (0.00s)\n        tmpw1gbd4eb_test.go:39: expected 'hELLO!', got 'h\0\0\0\0\0\
    \0ello!'\n    --- FAIL: TestFlip_Case/test_num__2 (0.00s)\n        tmpw1gbd4eb_test.go:39:\
    \ expected 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS', got 't\0\0\0\0\0\0\0\0\0\
    \0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0hese violent delights\
    \ have violent ends'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075654
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    // For each character in the string\n    for index, value\
    \ := range myString {\n        // If the character is a lowercase letter\n   \
    \     if ('a' <= value && value <= 'z') {\n            // Then swap the letter\
    \ to uppercase\n            myString = strings.Replace(myString, value, strings.ToUpper(value),\
    \ 1)\n        } else {\n            // Then swap the letter to lowercase\n   \
    \         myString = strings.Replace(myString, value, strings.ToLower(value),\
    \ 1)\n        }\n    }\n    return myString\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp51ul0g3e_test.go:13:9: index declared but not used

    /tmp/tmp51ul0g3e_test.go:17:24: undefined: strings

    /tmp/tmp51ul0g3e_test.go:20:24: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075653
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    return strings.ToUpper(myString) + strings.ToLower(myString)\n\
    }\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"These violent delights\
    \ have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdpbi0w52_test.go:12:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075653
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    var flipped_string string\n    for i:=0; i < len(myString);\
    \ i++ {\n        if myString[i] >= 'a' && myString[i] <= 'z' {\n            flipped_string\
    \ += myString[i] + 32\n        } else if myString[i] >= 'A' && myString[i] <=\
    \ 'Z' {\n            flipped_string += myString[i] - 32\n        } else {\n  \
    \          flipped_string += myString[i]\n        }\n    }\n    return flipped_string\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvkkplxy6_test.go:15:13: invalid operation: flipped_string += myString[i]
    + 32 (mismatched types string and byte)

    /tmp/tmpvkkplxy6_test.go:17:13: invalid operation: flipped_string += myString[i]
    - 32 (mismatched types string and byte)

    /tmp/tmpvkkplxy6_test.go:19:13: invalid operation: flipped_string += myString[i]
    (mismatched types string and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075653
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    myString = strings.ToLower(myString)\n    for i := 0;\
    \ i < len(myString); i++ {\n        switch {\n        case myString[i] == 'a':\n\
    \            myString[i] = 'A'\n        case myString[i] == 'b':\n           \
    \ myString[i] = 'B'\n        case myString[i] == 'c':\n            myString[i]\
    \ = 'C'\n        case myString[i] == 'd':\n            myString[i] = 'D'\n   \
    \     case myString[i] == 'e':\n            myString[i] = 'E'\n        case myString[i]\
    \ == 'f':\n            myString[i] = 'F'\n        case myString[i] == 'g':\n \
    \           myString[i] = 'G'\n        case myString[i] == 'h':\n            myString[i]\
    \ = 'H'\n        case myString[i] == 'i':\n            myString[i] = 'I'\n   \
    \     case myString[i] == 'j':\n            myString[i] = 'J'\n        case myString[i]\
    \ == 'k':\n            myString[i] = 'K'\n        case myString[i] == 'l':\n \
    \           myString[i] = 'L'\n        case myString[i] == 'm':\n            myString[i]\
    \ = 'M'\n        case myString[i] == 'n':\n            myString[i] = 'N'\n   \
    \     case myString[i] == 'o':\n            myString[i] = 'O'\n        case myString[i]\
    \ == 'p':\n            myString[i] = 'P'\n        case myString[i] == 'q':\n \
    \           myString[i] = 'Q'\n        case myString[i] == 'r':\n            myString[i]\
    \ = 'R'\n        case myString[i] == 's':\n            myString[i] = 'S'\n   \
    \     case myString[i] == 't':\n            myString[i] = 'T'\n        case myString[i]\
    \ == 'u':\n            myString[i] = 'U'\n        case myString[i] == 'v':\n \
    \           myString[i] = 'V'\n        case myString[i] == 'w':\n            myString[i]\
    \ = 'W'\n        case myString[i] == 'x':\n            myString[i] = 'X'\n   \
    \     case myString[i] == 'y':\n            myString[i] = 'Y'\n        case myString[i]\
    \ == 'z':\n            myString[i] = 'Z'\n        }\n    }\n    return myString\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzqigezop_test.go:12:16: undefined: strings

    /tmp/tmpzqigezop_test.go:16:13: cannot assign to myString[i] (value of type byte)

    /tmp/tmpzqigezop_test.go:18:13: cannot assign to myString[i] (value of type byte)

    /tmp/tmpzqigezop_test.go:20:13: cannot assign to myString[i] (value of type byte)

    /tmp/tmpzqigezop_test.go:22:13: cannot assign to myString[i] (value of type byte)

    /tmp/tmpzqigezop_test.go:24:13: cannot assign to myString[i] (value of type byte)

    /tmp/tmpzqigezop_test.go:26:13: cannot assign to myString[i] (value of type byte)

    /tmp/tmpzqigezop_test.go:28:13: cannot assign to myString[i] (value of type byte)

    /tmp/tmpzqigezop_test.go:30:13: cannot assign to myString[i] (value of type byte)

    /tmp/tmpzqigezop_test.go:32:13: cannot assign to myString[i] (value of type byte)

    /tmp/tmpzqigezop_test.go:32:13: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075653
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    myStringLower := []rune(myString)\n    myStringUpper =\
    \ []rune(myString)\n\n    for i, j := 0, len(myStringLower)-1; i < j; i, j = i+1,\
    \ j-1 {\n        if myStringLower[i] > myStringLower[j] {\n            myStringUpper[i],\
    \ myStringUpper[j] = myStringUpper[j], myStringUpper[i]\n        }\n    }\n\n\
    \    return string(myStringUpper)\n}\n\nfunc TestFlip_Case(t *testing.T) {\n \
    \ candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2k2rxxo9_test.go:13:5: undefined: myStringUpper

    /tmp/tmp2k2rxxo9_test.go:17:50: undefined: myStringUpper

    /tmp/tmp2k2rxxo9_test.go:21:19: undefined: myStringUpper

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075654
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    upper_myString := make([]rune, 0, len(myString))\n   \
    \ lower_myString := make([]rune, 0, len(myString))\n    for i, letter := range\
    \ myString {\n        if letter >= 'a' && letter <= 'z' {\n            upper_myString\
    \ = append(upper_myString, letter+('a' - 'A'))\n            lower_myString = append(lower_myString,\
    \ letter+('A' - 'a'))\n        } else {\n            upper_myString = append(upper_myString,\
    \ letter)\n            lower_myString = append(lower_myString, letter)\n     \
    \   }\n    }\n    return string(upper_myString) + string(lower_myString)\n}\n\n\
    func TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"These violent delights\
    \ have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnka2jni2_test.go:14:9: i declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075654
- exit_code: 1
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    chars := myString\n    var flippedChars string\n    for\
    \ _, char := range chars {\n        if char >= 'A' && char <= 'Z' {\n        \
    \    flippedChars += string(char-'A')\n        } else {\n            flippedChars\
    \ += string(char+32)\n        }\n    }\n    return flippedChars\n}\n\nfunc TestFlip_Case(t\
    \ *testing.T) {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected:\
    \ \"hELLO!\" },\n     { actual: candidate(\"These violent delights have violent\
    \ ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFlip_Case (0.00s)\n    --- FAIL: TestFlip_Case/test_num__1\
    \ (0.00s)\n        tmpxaoavoqk_test.go:39: expected 'hELLO!', got '\a\N\x8C\x8C\
    \x8FA'\n    --- FAIL: TestFlip_Case/test_num__2 (0.00s)\n        tmpxaoavoqk_test.go:39:\
    \ expected 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS', got '\x13\x88\N\x93\N@\x96\
    \x89\x8F\x8C\N\x8E\x94@\x84\N\x8C\x89\x87\x88\x94\x93@\x88\x81\x96\N@\x96\x89\x8F\
    \x8C\N\x8E\x94@\N\x8E\x84\x93'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075655
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    var newString string\n    var index int\n    for index\
    \ = 0; index < len(myString); index++ {\n        var newChar = myString[index]\n\
    \        if newChar == ' ' {\n            newChar = '_'\n        }\n        newString\
    \ = newString + string([]byte(newChar))\n    }\n    return newString\n}\n\nfunc\
    \ TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"These violent delights\
    \ have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpm5a7eq5e_test.go:19:47: cannot convert newChar (variable of type byte)
    to type []byte

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075655
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    return strings.ToUpper(fmt.Sprintf(\"%c\", []rune(myString[0]))\
    \ + myString[1:]).(string)\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate\
    \ := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpskku2099_test.go:12:12: undefined: strings

    /tmp/tmpskku2099_test.go:12:53: cannot convert myString[0] (value of type byte)
    to type []rune

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075655
- exit_code: 1
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    length := len(myString)\n    for i\
    \ := 0; i < length; i++ {\n        if myString[i] >= 'A' && myString[i] <= 'Z'\
    \ {\n            result = result + string(myString[i] + 0x20) + string(myString[i]\
    \ + 0x40)\n        } else {\n            result = result + string(myString[i])\n\
    \        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFlip_Case (0.00s)\n    --- FAIL: TestFlip_Case/test_num__1\
    \ (0.00s)\n        tmpsbu6otha_test.go:39: expected 'hELLO!', got 'h\x88ello!'\n\
    \    --- FAIL: TestFlip_Case/test_num__2 (0.00s)\n        tmpsbu6otha_test.go:39:\
    \ expected 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS', got 't\x94hese violent\
    \ delights have violent ends'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075656
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    return strings.ToLower(strings.ToUpper(myString))\n}\n\
    \nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"These violent delights\
    \ have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7r_sknru_test.go:12:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    var result string\n    for _, myChar := range myString\
    \ {\n        if myChar == myChar.ToUpper() {\n            result = result + myChar.ToLower()\n\
    \        } else {\n            result = result + myChar.ToUpper()\n        }\n\
    \    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate\
    \ := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnh0uson6_test.go:14:29: myChar.ToUpper undefined (type rune has no field
    or method ToUpper)

    /tmp/tmpnh0uson6_test.go:15:38: myChar.ToLower undefined (type rune has no field
    or method ToLower)

    /tmp/tmpnh0uson6_test.go:17:38: myChar.ToUpper undefined (type rune has no field
    or method ToUpper)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075656
- exit_code: 1
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    var flipped string\n    for _, char := range myString\
    \ {\n        switch char {\n        case 'a':\n            flipped += \"A\"\n\
    \        case 'b':\n            flipped += \"b\"\n        case 'c':\n        \
    \    flipped += \"C\"\n        case 'd':\n            flipped += \"d\"\n     \
    \   case 'e':\n            flipped += \"e\"\n        case 'f':\n            flipped\
    \ += \"F\"\n        case 'g':\n            flipped += \"g\"\n        case 'h':\n\
    \            flipped += \"H\"\n        case 'i':\n            flipped += \"I\"\
    \n        case 'j':\n            flipped += \"J\"\n        case 'k':\n       \
    \     flipped += \"K\"\n        case 'l':\n            flipped += \"L\"\n    \
    \    case 'm':\n            flipped += \"m\"\n        case 'n':\n            flipped\
    \ += \"N\"\n        case 'o':\n            flipped += \"O\"\n        case 'p':\n\
    \            flipped += \"P\"\n        case 'q':\n            flipped += \"Q\"\
    \n        case 'r':\n            flipped += \"r\"\n        case 's':\n       \
    \     flipped += \"s\"\n        case 't':\n            flipped += \"T\"\n    \
    \    case 'u':\n            flipped += \"u\"\n        case 'v':\n            flipped\
    \ += \"V\"\n        case 'w':\n            flipped += \"W\"\n        case 'x':\n\
    \            flipped += \"X\"\n        case 'y':\n            flipped += \"Y\"\
    \n        case 'z':\n            flipped += \"Z\"\n        }\n    }\n\n    return\
    \ flipped\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFlip_Case (0.00s)\n    --- FAIL: TestFlip_Case/test_num__1\
    \ (0.00s)\n        tmpyht_h679_test.go:88: expected 'hELLO!', got 'eLLO'\n   \
    \ --- FAIL: TestFlip_Case/test_num__2 (0.00s)\n        tmpyht_h679_test.go:88:\
    \ expected 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS', got 'HeseVIOLeNTdeLIgHTsHAVeVIOLeNTeNds'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075656
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    return strings.ToLower(myString) + strings.ToUpper(myString[len(strings.ToLower(myString)):])\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpeaxttmre_test.go:12:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075645
- exit_code: 1
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    flipped := \"\"\n    for _, letter := range myString {\n\
    \        flipped += string([]byte{\n            byte(letter) + byte(letter+32),\n\
    \            byte(letter+32) - byte(letter),\n        })\n    }\n    return flipped\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFlip_Case (0.00s)\n    --- FAIL: TestFlip_Case/test_num__1\
    \ (0.00s)\n        tmpmkx13foy_test.go:37: expected 'hELLO!', got '     b '\n\
    \    --- FAIL: TestFlip_Case/test_num__2 (0.00s)\n        tmpmkx13foy_test.go:37:\
    \ expected 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS', got '   \x06  ` \f    \
    \  \b `       \b \x06 `   \f  ` \f      \b `    \x06 '\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075656
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    output := \"\"\n    for _, letter := range myString {\n\
    \        if letter == ('A' || 'a') {\n            output += \"B\"\n        } else\
    \ {\n            output += letter\n        }\n    }\n    return output\n}\n\n\
    func TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"These violent delights\
    \ have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdaj3wyyh_test.go:14:23: invalid operation: operator || not defined on
    ''A'' (untyped rune constant 65)

    /tmp/tmpdaj3wyyh_test.go:17:13: invalid operation: output += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075656
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    var result = myString\n    for index, char1 := range myString\
    \ {\n        var char2 interface{} = char1\n        char2, _ = toUpper.(char2)\n\
    \        char2, _ = toLower.(char2)\n        char2 = char2.(string)\n        result[index]\
    \ = char2\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv1qq8ulr_test.go:15:20: undefined: toUpper

    /tmp/tmpv1qq8ulr_test.go:16:20: undefined: toLower

    /tmp/tmpv1qq8ulr_test.go:18:9: cannot assign to result[index] (value of type byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075656
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    flipped := \"\"\n\n    for _, s := range myString {\n\
    \        if ('A' <= s && s <= 'Z') {\n            flipped += string(s - 'A' +\
    \ 'a') + '-'\n        } else if ('a' <= s && s <= 'z') {\n            flipped\
    \ += string(s - 'a' + 'A') + '-'\n        } else {\n            flipped += s +\
    \ '-'\n        }\n    }\n    return flipped\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgwgxh_rz_test.go:16:24: invalid operation: string(s - ''A'' + ''a'') +
    ''-'' (mismatched types string and untyped rune)

    /tmp/tmpgwgxh_rz_test.go:18:24: invalid operation: string(s - ''a'' + ''A'') +
    ''-'' (mismatched types string and untyped rune)

    /tmp/tmpgwgxh_rz_test.go:20:13: invalid operation: flipped += s + ''-'' (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075656
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    var upper_chars = myString\n    for i := 0; i < len(upper_chars);\
    \ i++ {\n        if upper_chars[i] == ' ' {\n            upper_chars = upper_chars[:i]\n\
    \            break\n        }\n    }\n    upper_chars = upper_chars + ' '\n  \
    \  upper_chars = strings.ToUpper(upper_chars)\n    return upper_chars\n}\n\nfunc\
    \ TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"These violent delights\
    \ have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi2pmw6dd_test.go:19:19: invalid operation: upper_chars + '' '' (mismatched
    types string and untyped rune)

    /tmp/tmpi2pmw6dd_test.go:20:19: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075656
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, letter := range myString {\n\
    \        if strings.ToLower(letter) == letter {\n            result += strings.ToUpper(letter)\n\
    \        } else {\n            result += letter\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz1phuob5_test.go:14:12: undefined: strings

    /tmp/tmpz1phuob5_test.go:15:23: undefined: strings

    /tmp/tmpz1phuob5_test.go:17:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075656
- exit_code: 1
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    for i := 0; i < len(myString); i++ {\n        if myString[i]\
    \ >= 'A' && myString[i] <= 'Z' {\n            if myString[i] >= 'a' && myString[i]\
    \ <= 'z' {\n                myString = append(myString, 'A')\n            }\n\
    \            else {\n                myString = append(myString, 'a')\n      \
    \      }\n        }\n        else {\n            if myString[i] >= 'a' && myString[i]\
    \ <= 'z' {\n                myString = append(myString, 'a')\n            }\n\
    \            else {\n                myString = append(myString, 'A')\n      \
    \      }\n        }\n    }\n    return myString\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpkzc9g0nz_test.go:17:13: expected statement, found ''else''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075655
- exit_code: 1
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, element := range myString {\n\
    \        result += (element >= 'a' && element <= 'z') ? (element - 'a' + 'A')\
    \ : element\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps0p_w7jb_test.go:14:54: illegal character U+003F ''?''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075655
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    chars := make([]rune, 0, len(myString))\n    for _, r\
    \ := range myString {\n        chars = append(chars, unicode.ToUpper(r))\n   \
    \     chars = append(chars, unicode.ToLower(r))\n    }\n    return string(chars)\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw2i1c7j4_test.go:14:31: undefined: unicode

    /tmp/tmpw2i1c7j4_test.go:15:31: undefined: unicode

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075656
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    index := 0\n    upper := true\n    for i := 0; i < len(myString);\
    \ i++ {\n        if myString[i] == ' ' {\n            // The first space will\
    \ never be an uppercase letter\n            if upper {\n                return\
    \ myString\n            } else {\n                index = i\n                upper\
    \ = !upper\n            }\n        } else {\n            if upper {\n        \
    \        myString[index] = myString[i] + 32\n            } else {\n          \
    \      myString[index] = myString[i] - 32\n            }\n        }\n    }\n \
    \   return myString\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpucuygew2_test.go:25:17: cannot assign to myString[index] (value of type
    byte)

    /tmp/tmpucuygew2_test.go:27:17: cannot assign to myString[index] (value of type
    byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075657
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    length := len(myString)\n    for i,\
    \ letter := range myString {\n        if i == 0 {\n            result = string([]byte{letter,\
    \ byte(letter+32)})\n        } else {\n            result = string([]byte{letter,\
    \ byte(letter+32)})\n        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t\
    \ *testing.T) {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected:\
    \ \"hELLO!\" },\n     { actual: candidate(\"These violent delights have violent\
    \ ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk1v7zfzx_test.go:13:5: length declared but not used

    /tmp/tmpk1v7zfzx_test.go:16:36: cannot use letter (variable of type rune) as type
    byte in array or slice literal

    /tmp/tmpk1v7zfzx_test.go:18:36: cannot use letter (variable of type rune) as type
    byte in array or slice literal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075657
- exit_code: 1
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := []rune{}\n    for _, char := range myString\
    \ {\n        switch char {\n        case 'a':\n        case 'b':\n        case\
    \ 'c':\n        case 'd':\n        case 'e':\n        case 'f':\n        case\
    \ 'g':\n        case 'h':\n        case 'i':\n        case 'j':\n        case\
    \ 'k':\n        case 'l':\n        case 'm':\n        case 'n':\n        case\
    \ 'o':\n        case 'p':\n        case 'q':\n        case 'r':\n        case\
    \ 's':\n        case 't':\n        case 'u':\n        case 'v':\n        case\
    \ 'w':\n        case 'x':\n        case 'y':\n        case 'z':\n            result\
    \ = append(result, char+('A'-'a'))\n        case 'A':\n        case 'B':\n   \
    \     case 'C':\n        case 'D':\n        case 'E':\n        case 'F':\n   \
    \     case 'G':\n        case 'H':\n        case 'I':\n        case 'J':\n   \
    \     case 'K':\n        case 'L':\n        case 'M':\n        case 'N':\n   \
    \     case 'O':\n        case 'P':\n        case 'Q':\n        case 'R':\n   \
    \     case 'S':\n        case 'T':\n        case 'U':\n        case 'V':\n   \
    \     case 'W':\n        case 'X':\n        case 'Y':\n        case 'Z':\n   \
    \         result = append(result, char+('a' - 'A'))\n        }\n    }\n    return\
    \ string(result)\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFlip_Case (0.00s)\n    --- FAIL: TestFlip_Case/test_num__1\
    \ (0.00s)\n        tmpxuk8jgnw_test.go:89: expected 'hELLO!', got ''\n    ---\
    \ FAIL: TestFlip_Case/test_num__2 (0.00s)\n        tmpxuk8jgnw_test.go:89: expected\
    \ 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075657
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    newString := \"\"\n    \n    for i := 0; i < len(myString);\
    \ i++ {\n        if myString[i] >= 'a' && myString[i] <= 'z' {\n            newString\
    \ += toupper(myString[i])\n        } else {\n            newString += myString[i]\n\
    \        }\n    }\n    \n    return newString\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvxlf2pm3_test.go:16:26: undefined: toupper

    /tmp/tmpvxlf2pm3_test.go:18:13: invalid operation: newString += myString[i] (mismatched
    types string and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075657
- exit_code: 1
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    flipped := make([]rune, len(myString))\n    for i, r :=\
    \ range myString {\n        if r >= 'A' && r <= 'Z' {\n            flipped[i]\
    \ = r - 32\n        } else {\n            flipped[i] = r\n        }\n    }\n \
    \   return string(flipped)\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate\
    \ := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFlip_Case (0.00s)\n    --- FAIL: TestFlip_Case/test_num__1\
    \ (0.00s)\n        tmp9kb7gb_u_test.go:38: expected 'hELLO!', got '(ello!'\n \
    \   --- FAIL: TestFlip_Case/test_num__2 (0.00s)\n        tmp9kb7gb_u_test.go:38:\
    \ expected 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS', got '4hese violent delights\
    \ have violent ends'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075657
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    chars := []rune(myString)\n    for idx := range chars\
    \ {\n        chars[idx] = unicode.ToLower(chars[idx])\n        chars[idx] = unicode.ToUpper(chars[idx])\n\
    \    }\n    return string(chars)\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate\
    \ := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7huhsgxw_test.go:14:22: undefined: unicode

    /tmp/tmp7huhsgxw_test.go:15:22: undefined: unicode

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075657
- exit_code: 1
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    // Write the code here!\n    return \"\"\n}\n\nfunc TestFlip_Case(t\
    \ *testing.T) {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected:\
    \ \"hELLO!\" },\n     { actual: candidate(\"These violent delights have violent\
    \ ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFlip_Case (0.00s)\n    --- FAIL: TestFlip_Case/test_num__1\
    \ (0.00s)\n        tmp4hyfr_o__test.go:31: expected 'hELLO!', got ''\n    ---\
    \ FAIL: TestFlip_Case/test_num__2 (0.00s)\n        tmp4hyfr_o__test.go:31: expected\
    \ 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075658
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := make([]rune, 0, len(myString))\n    for i, c\
    \ := range myString {\n        if isUpper(c) {\n            result = append(result,\
    \ upper(c))\n        } else {\n            result = append(result, lower(c))\n\
    \        }\n    }\n    return string(result)\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpt0ggvyef_test.go:13:9: i declared but not used

    /tmp/tmpt0ggvyef_test.go:14:12: undefined: isUpper

    /tmp/tmpt0ggvyef_test.go:15:37: undefined: upper

    /tmp/tmpt0ggvyef_test.go:17:37: undefined: lower

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075658
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    output := \"\"\n    for _, letter := range myString {\n\
    \        if letter >= 'A' && letter <= 'Z' {\n            output += string(letter+'a'-'A')\n\
    \        } else {\n            output += letter\n        }\n    }\n    return\
    \ output\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp45jikuyd_test.go:17:13: invalid operation: output += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075658
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    flippedString := \"\"\n    for i := 0; i < len(myString);\
    \ i++ {\n        if isLower(myString[i]) {\n            flippedString += myString[i]\
    \ + string(1 - i)\n        } else {\n            flippedString += string(1 + i)\
    \ + myString[i]\n        }\n    }\n    return flippedString\n}\n\nfunc TestFlip_Case(t\
    \ *testing.T) {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected:\
    \ \"hELLO!\" },\n     { actual: candidate(\"These violent delights have violent\
    \ ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp41yaq_yb_test.go:14:12: undefined: isLower

    /tmp/tmp41yaq_yb_test.go:15:30: invalid operation: myString[i] + string(1 - i)
    (mismatched types byte and string)

    /tmp/tmp41yaq_yb_test.go:17:30: invalid operation: string(1 + i) + myString[i]
    (mismatched types string and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075658
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    output := \"\"\n    for _, char := range myString {\n\
    \        output += string(unicode.ToLower(char))\n    }\n    return output\n}\n\
    \nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"These violent delights\
    \ have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpghjd6190_test.go:14:26: undefined: unicode

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075658
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    var myStringBuffer bytes.Buffer\n    myStringBuffer.WriteString(myString)\n\
    \    for i := 0; i < len(myString); i++ {\n        if myString[i] >= 'a' && myString[i]\
    \ <= 'z' {\n            myStringBuffer += string(myString[i] - 'a' + 'A')\n  \
    \      } else {\n            myStringBuffer += myString[i]\n        }\n    }\n\
    \    return myStringBuffer.String()\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp38r8rfh_test.go:12:24: undefined: bytes

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075659
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    var s []rune\n    str = make([]rune, len(myString))\n\
    \    for i := range myString {\n        s[i] = myString[i]\n    }\n    for i :=\
    \ 0; i < len(s); i++ {\n        s[i] = unicode.ToUpper(s[i])\n    }\n    for i\
    \ := 0; i < len(s); i++ {\n        s[i] = unicode.ToLower(s[i])\n    }\n    for\
    \ i := 0; i < len(s); i++ {\n        myString[i] = s[i]\n    }\n    return myString\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmph_eo1ik__test.go:13:5: undefined: str

    /tmp/tmph_eo1ik__test.go:15:16: cannot use myString[i] (value of type byte) as
    type rune in assignment

    /tmp/tmph_eo1ik__test.go:18:16: undefined: unicode

    /tmp/tmph_eo1ik__test.go:21:16: undefined: unicode

    /tmp/tmph_eo1ik__test.go:24:9: cannot assign to myString[i] (value of type byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075659
- exit_code: 1
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    var ret string = \"\"\n    for _, c := range myString\
    \ {\n        if c >= 65 && c <= 90 {\n            c = c - 32\n        }\n    \
    \    if c >= 97 && c <= 122 {\n            c = c + 32\n        }\n        ret\
    \ = ret + string(c)\n    }\n    return ret\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFlip_Case (0.00s)\n    --- FAIL: TestFlip_Case/test_num__1\
    \ (0.00s)\n        tmp8xwiva0n_test.go:40: expected 'hELLO!', got '(\N\x8C\x8C\
    \x8F!'\n    --- FAIL: TestFlip_Case/test_num__2 (0.00s)\n        tmp8xwiva0n_test.go:40:\
    \ expected 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS', got '4\x88\N\x93\N \x96\
    \x89\x8F\x8C\N\x8E\x94 \x84\N\x8C\x89\x87\x88\x94\x93 \x88\x81\x96\N \x96\x89\x8F\
    \x8C\N\x8E\x94 \N\x8E\x84\x93'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075660
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    var result string = \"\"\n    for _, letter := range myString\
    \ {\n        if letter == letter {\n            result = result + string(toUpper(letter))\n\
    \        } else {\n            result = result + string(toLower(letter))\n   \
    \     }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n \
    \ candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpee9buuyj_test.go:15:38: undefined: toUpper

    /tmp/tmpee9buuyj_test.go:17:38: undefined: toLower

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075659
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    flipped := \"\"\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            flipped += char.ToUpper()\n\
    \        } else {\n            flipped += char.ToLower()\n        }\n    }\n \
    \   return flipped\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2mglxabl_test.go:15:29: char.ToUpper undefined (type rune has no field
    or method ToUpper)

    /tmp/tmp2mglxabl_test.go:17:29: char.ToLower undefined (type rune has no field
    or method ToLower)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075659
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    counter := 0\n    for _, letter :=\
    \ range myString {\n        if letter == letter.toUpper() {\n            letter\
    \ = letter.toLower()\n            counter++\n        } else {\n            counter++\n\
    \        }\n        result = result + letter\n    }\n    return fmt.Sprintf(\"\
    %#v\", result)\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpiew3lz7r_test.go:15:29: letter.toUpper undefined (type rune has no field
    or method toUpper)

    /tmp/tmpiew3lz7r_test.go:16:29: letter.toLower undefined (type rune has no field
    or method toLower)

    /tmp/tmpiew3lz7r_test.go:21:18: invalid operation: result + letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075659
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    return strings.Map(func(c rune) rune {\n        if c >=\
    \ 'a' && c <= 'z' {\n            return c + 32\n        }\n        if c >= 'A'\
    \ && c <= 'Z' {\n            return c + 32\n        }\n        return c\n    },\
    \ myString)\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvqfupmvj_test.go:12:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075659
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    var result = \"\"\n    for _, c := range myString {\n\
    \        if unicode.IsUpper(c) {\n            result = result + string(unicode.ToLower(c))\n\
    \        } else {\n            result = result + string(c)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp033ttkkt_test.go:14:12: undefined: unicode

    /tmp/tmp033ttkkt_test.go:15:38: undefined: unicode

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075660
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    var output []rune\n    var size int\n    for i := 0; i\
    \ < len(myString); i++ {\n        if ('A' <= myString[i] && myString[i] <= 'Z')\
    \ {\n            output += append(output, 'a')\n            output += append(output,\
    \ 'A'-'A')\n        } else {\n            output += append(output, 'A')\n    \
    \        output += append(output, myString[i]-'A')\n        }\n    }\n    return\
    \ string(output[0:size])\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate\
    \ := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmph_z7u2vw_test.go:16:13: invalid operation: operator + not defined on output
    (variable of type []rune)

    /tmp/tmph_z7u2vw_test.go:17:13: invalid operation: operator + not defined on output
    (variable of type []rune)

    /tmp/tmph_z7u2vw_test.go:19:13: invalid operation: operator + not defined on output
    (variable of type []rune)

    /tmp/tmph_z7u2vw_test.go:20:13: invalid operation: operator + not defined on output
    (variable of type []rune)

    /tmp/tmph_z7u2vw_test.go:20:38: cannot use myString[i] - ''A'' (value of type
    byte) as type rune in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075660
- exit_code: 1
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    // Code here\n    return \"\"\n}\nfunc TestFlip_Case(t\
    \ *testing.T) {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected:\
    \ \"hELLO!\" },\n     { actual: candidate(\"These violent delights have violent\
    \ ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFlip_Case (0.00s)\n    --- FAIL: TestFlip_Case/test_num__1\
    \ (0.00s)\n        tmpm8brno5c_test.go:30: expected 'hELLO!', got ''\n    ---\
    \ FAIL: TestFlip_Case/test_num__2 (0.00s)\n        tmpm8brno5c_test.go:30: expected\
    \ 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075661
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    var buffer bytes.Buffer\n    switch {\n    case len(myString)\
    \ == 0:\n        return \"\"\n    case myString[0] == 'A':\n        myString =\
    \ myString[1:]\n    case myString[0] == 'a':\n        myString = myString[1:]\n\
    \    case myString[0] == 'I':\n        myString = myString[1:]\n    case myString[0]\
    \ == 'i':\n        myString = myString[1:]\n    case myString[0] == 'O':\n   \
    \     myString = myString[1:]\n    case myString[0] == 'o':\n        myString\
    \ = myString[1:]\n    }\n    for _, myChar := range myString {\n        if myChar\
    \ == 'a' || myChar == 'A' {\n            buffer.WriteRune('A')\n        } else\
    \ {\n            buffer.WriteRune(myChar)\n        }\n    }\n    return buffer.String()\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjw4ng93i_test.go:12:16: undefined: bytes

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075660
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    if myString == \"\" {\n        return myString\n    }\n\
    \    chars := myString\n    chars = strings.ToLower(chars)\n    chars = strings.ToUpper(chars)\n\
    \    return chars\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1qv3wi8y_test.go:16:13: undefined: strings

    /tmp/tmp1qv3wi8y_test.go:17:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075660
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    flipped := \"\"\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            flipped += string((char)-32\
    \ + 'A')\n        } else if char >= 'A' && char <= 'Z' {\n            flipped\
    \ += string((char)-32 + 'a')\n        } else {\n            flipped += char\n\
    \        }\n    }\n    return flipped\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplmy9wkc3_test.go:19:13: invalid operation: flipped += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075660
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    myString2 := \"\"\n    len := len(myString)\n    for i\
    \ := 0; i < len; i++ {\n        switch {\n        case myString[i] >= 'a' && myString[i]\
    \ <= 'z':\n            myString2 += string(myString[i] - 32)\n        default:\n\
    \            myString2 += myString[i]\n        }\n    }\n    return myString2\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbzrmhwc6_test.go:19:13: invalid operation: myString2 += myString[i] (mismatched
    types string and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075660
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    b := make([]byte, len(myString))\n    i := 0\n    for\
    \ _, b := range myString {\n        if b >= 'a' && b <= 'z' {\n            b[i]\
    \ = b - 32\n        } else {\n            b[i] = b\n        }\n        i++\n \
    \   }\n\n    return string(b)\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate\
    \ := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpagrrm3fg_test.go:16:14: invalid operation: cannot index b (variable of
    type rune)

    /tmp/tmpagrrm3fg_test.go:18:14: invalid operation: cannot index b (variable of
    type rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075660
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    return strings.ToLower(strings.ToUpper(myString))\n}\n\
    \nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"These violent delights\
    \ have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7r_sknru_test.go:12:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    for idx, character := range myString {\n        if ('A'\
    \ <= character && character <= 'Z') {\n            myString = append(myString[:idx],\
    \ []rune(unicode.ToUpper(character))...)\n        } else {\n            myString\
    \ = append(myString[:idx], []rune(unicode.ToLower(character))...)\n        }\n\
    \    }\n    return myString\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate\
    \ := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8cf5b0tx_test.go:14:39: first argument to append must be a slice; have
    myString[:idx] (value of type string)

    /tmp/tmp8cf5b0tx_test.go:14:54: undefined: unicode

    /tmp/tmp8cf5b0tx_test.go:16:39: first argument to append must be a slice; have
    myString[:idx] (value of type string)

    /tmp/tmp8cf5b0tx_test.go:16:54: undefined: unicode

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075661
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    output := \"\"\n    char := myString[0]\n    for _, char\
    \ := range myString {\n        if char >= 'A' && char <= 'Z' {\n            output\
    \ = output + char + ('A' - 'a')\n        } else {\n            output = output\
    \ + char\n        }\n    }\n    return output\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu5krpdlb_test.go:13:5: char declared but not used

    /tmp/tmpu5krpdlb_test.go:16:22: invalid operation: output + char (mismatched types
    string and rune)

    /tmp/tmpu5krpdlb_test.go:18:22: invalid operation: output + char (mismatched types
    string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075661
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    var result string\n    for _, letter := range myString\
    \ {\n        if letter >= 'A' && letter <= 'Z' {\n            result += string(letter+1-'A')\n\
    \        } else {\n            result += letter\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2mbqts9p_test.go:17:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075661
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    upString := strings.ToUpper(myString)\n    lowString :=\
    \ strings.ToLower(upString)\n    return lowString\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5l4qr4nl_test.go:12:17: undefined: strings

    /tmp/tmp5l4qr4nl_test.go:13:18: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075661
- exit_code: 1
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    result += \"abcdefghijklmnopqrstuvwxyz\"\
    .ToLower() + \"0123456789\"\n    for _, c := range myString {\n        if c ==\
    \ 'a' {\n            result = result + \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n      \
    \  }\n        if c == 'b' {\n            result = result + \"BCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n        }\n        if c == 'c' {\n            result = result + \"CDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n        }\n        if c == 'd' {\n            result = result + \"DEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n        }\n        if c == 'e' {\n            result = result + \"EFGHIJKLMNOPQRSTUVWXYZ\"\
    \n        }\n        if c == 'f' {\n            result = result + \"FGHIJKLMNOPQRSTUVWXYZ\"\
    \n        }\n        if c == 'g' {\n            result = result + \"GHIJKLMNOPQRSTUVWXYZ\"\
    \n        }\n        if c == 'h' {\n            result = result + \"HIJKLMNOPQRSTUVWXYZ\"\
    \n        }\n        if c == 'i' {\n            result = result + \"IJKLMNOPQRSTUVWXYZ\"\
    \n        }\n        if c == 'j' {\n            result = result + \"JKLMNOPQRSTUVWXYZ\"\
    \n        }\n        if c == 'k' {\n            result = result + \"KLMNOPQRSTUVWXYZ\"\
    \n        }\n        if c == 'l' {\n            result = result + \"LMNOPQRSTUVWXYZ\"\
    \n        }\n        if c == 'm' {\n            result = result + \"MNOPQRSTUVWXYZ\"\
    \n        }\n        if c == 'n' {\n            result = result + \"NOPQRSTUVWXYZ\"\
    \n        }\n        if c == 'o' {\n            result = result + \"OPQRSTUVWXYZ\"\
    \n        }\n        if c == 'p' {\n            result = result + \"PQRSTUVWXYZ\"\
    \n        }\n        if c == 'q' {\n            result = result + \"QRSTUVWXYZ\"\
    \n        }\n        if c == 'r' {\n            result = result + \"RSTUVWXYZ\"\
    \n        }\n        if c == 's' {\n            result = result + \"STUVWXYZ\"\
    \n        }\n        if c == 't' {\n            result = result + \"TUVWXYZ\"\n\
    \        }\n        if c == 'u' {\n            result = result + \"UVWXYZ\"\n\
    \        }\n        if c == 'v\nfunc TestFlip_Case(t *testing.T) {\n  candidate\
    \ := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpncl0qnvv_test.go:78:17: rune literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075661
- exit_code: 1
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    if myString == \"\" {\n        return \"\"\n    }\n\n\
    \    flippedString := \"\"\n    for _, character := range myString {\n       \
    \ if character >= 'a' && character <= 'z' {\n            flippedString += string(rune(character+32))\n\
    \        }\n        if character >= 'A' && character <= 'Z' {\n            flippedString\
    \ += string(rune(character+32))\n        }\n    }\n    return flippedString\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFlip_Case (0.00s)\n    --- FAIL: TestFlip_Case/test_num__1\
    \ (0.00s)\n        tmprspmdus2_test.go:43: expected 'hELLO!', got 'h\N\x8C\x8C\
    \x8F'\n    --- FAIL: TestFlip_Case/test_num__2 (0.00s)\n        tmprspmdus2_test.go:43:\
    \ expected 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS', got 't\x88\N\x93\N\x96\x89\
    \x8F\x8C\N\x8E\x94\x84\N\x8C\x89\x87\x88\x94\x93\x88\x81\x96\N\x96\x89\x8F\x8C\
    \N\x8E\x94\N\x8E\x84\x93'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075662
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    if myString == \"\" {\n        return \"\"\n    }\n  \
    \  myStringLower := strings.ToLower(myString)\n    myStringUpperString := strings.ToUpper(myString)\n\
    \    myStringUpper = strings.Replace(myStringUpperString, \" \", \"\", -1)\n \
    \   myStringUpper = strings.Replace(myStringUpper, myStringLower, myStringUpperString,\
    \ -1)\n    return myStringUpper\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate\
    \ := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzrz3ojvt_test.go:15:22: undefined: strings

    /tmp/tmpzrz3ojvt_test.go:16:28: undefined: strings

    /tmp/tmpzrz3ojvt_test.go:17:5: undefined: myStringUpper

    /tmp/tmpzrz3ojvt_test.go:17:21: undefined: strings

    /tmp/tmpzrz3ojvt_test.go:18:21: undefined: strings

    /tmp/tmpzrz3ojvt_test.go:18:37: undefined: myStringUpper

    /tmp/tmpzrz3ojvt_test.go:19:12: undefined: myStringUpper

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075662
- exit_code: 1
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    fmt.Println(\"myString = \", myString)\n    var out []rune\n\
    \    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            out = append(out, char+('A' - 'a'))\n        }\n        if char >=\
    \ 'A' && char <= 'Z' {\n            out = append(out, char+('a' - 'A'))\n    \
    \    }\n    }\n    return string(out)\n}\n</code>\n<|/ a tags=go,string |>\n<|\
    \ a dscore=2 tags=go,string |>\nYou could do this:\n<code>\npackage main\n\nimport\
    \ (\n    \"bufio\"\n    \"fmt\"\n    \"os\"\n)\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpmwe7bprs_test.go:24:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075661
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    char_num := 0\n    char_length :=\
    \ len(myString)\n\n    for char_num < char_length {\n        if myString[char_num]\
    \ == 'a' {\n            result = result + \"A\"\n        } else {\n          \
    \  result = result + myString[char_num]\n        }\n        char_num += 1\n  \
    \  }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate\
    \ := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpt3jej3w7_test.go:20:22: invalid operation: result + myString[char_num]
    (mismatched types string and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075662
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    var result string\n\n    for _, character := range myString\
    \ {\n        result += \"a\" // default case\n        if character >= 'A' && character\
    \ <= 'Z' {\n            result += \"A\"\n        } else {\n            result\
    \ += character\n        }\n    }\n\n    return result\n}\n\nfunc TestFlip_Case(t\
    \ *testing.T) {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected:\
    \ \"hELLO!\" },\n     { actual: candidate(\"These violent delights have violent\
    \ ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptupxb7ma_test.go:19:13: invalid operation: result += character (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075663
- exit_code: 1
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    len, _ := fmt.Sscanf(myString, \"%s\", myString)\n   \
    \ x := \"\"\n    switch len {\n    case 0:\n        fmt.Println(\"String is empty\"\
    )\n    case 1:\n        x += \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n        x += \"abcdefghijklmnopqrstuvwxyz\"\
    \n        x += \"0123456789\"\n    case 2:\n        x += \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n        x += \"abcdefghijklmnopqrstuvwxyz\"\n        x += \"0123456789\"\n \
    \       x += \"!\"\n    case 3:\n        x += \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n\
    \        x += \"abcdefghijklmnopqrstuvwxyz\"\n        x += \"0123456789\"\n  \
    \      x += \"!\"\n        x += \"!\"\n    case 4:\n        x += \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n        x += \"abcdefghijklmnopqrstuvwxyz\"\n        x += \"0123456789\"\n \
    \       x += \"!\"\n        x += \"!\"\n        x += \"!\"\n    case 5:\n    \
    \    x += \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n        x += \"abcdefghijklmnopqrstuvwxyz\"\
    \n        x += \"0123456789\"\n        x += \"!\"\n        x += \"!\"\n      \
    \  x += \"!\"\n        x += \"!\"\n    case 6:\n        x += \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n        x += \"abcdefghijklmnopqrstuvwxyz\"\n        x += \"0123456789\"\n \
    \       x += \"!\"\n        x += \"!\"\n        x += \"!\"\n        x += \"!\"\
    \n        x += \"!\"\n    case 7:\n        x += \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n        x += \"abcdefghijklmnopqrstuvwxyz\"\n        x += \"0123456789\"\n \
    \       x += \"!\"\n        x += \"!\"\n        x += \"!\"\n        x += \"!\"\
    \n        x += \"!\"\n    case 8:\n        x += \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n        x += \"abcdefghijklmnopqrstuvwxyz\"\n        x += \"0123456789\"\n \
    \       x += \"!\"\n        x += \"!\"\n        x += \"!\"\n        x += \"!\"\
    \n        x += \"!\"\n        x += \"!\"\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgjtlgt4g_test.go:76:6: expected ''('', found TestFlip_Case

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075662
- exit_code: 1
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    chars := []rune(myString)\n    for i := 0; i < len(chars);\
    \ i++ {\n        flipped := chars[i]+'a'-'A'\n        if flipped == 0 {\n    \
    \        fmt.Println(fmt.Sprintf(\"char %v: %v\", i, chars[i]))\n        }\n \
    \       if flipped != 0 {\n            chars[i] = flipped\n        }\n    }\n\
    \    return string(chars)\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate\
    \ := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFlip_Case (0.00s)\n    --- FAIL: TestFlip_Case/test_num__1\
    \ (0.00s)\n        tmp209cn8an_test.go:40: expected 'hELLO!', got 'h\N\x8C\x8C\
    \x8FA'\n    --- FAIL: TestFlip_Case/test_num__2 (0.00s)\n        tmp209cn8an_test.go:40:\
    \ expected 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS', got 't\x88\N\x93\N@\x96\
    \x89\x8F\x8C\N\x8E\x94@\x84\N\x8C\x89\x87\x88\x94\x93@\x88\x81\x96\N@\x96\x89\x8F\
    \x8C\N\x8E\x94@\N\x8E\x84\x93'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075664
- exit_code: 1
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    output := make([]byte, len(myString))\n    for i := 0;\
    \ i < len(myString); i++ {\n        output[i] = myString[i] // 'H' -> 'h'\n  \
    \      output[i] = byte((output[i] - 'A') + ('A' - 'a')) // 'H' -> 'h'\n     \
    \   output[i] = byte((output[i] - 'a' + ('a' - 'A')) // 'h' -> 'H'\n    }\n\n\
    \    return string(output)\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate\
    \ := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpf9912px5_test.go:16:58: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075662
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    var newString []string\n    for _, character := range\
    \ myString {\n        if character >= 'a' && character <= 'z' {\n            newString\
    \ = append(newString, character+('A' - 'a'))\n        } else {\n            newString\
    \ = append(newString, character)\n        }\n    }\n    return string(newString)\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpngn1fsfh_test.go:15:43: cannot use character + (''A'' - ''a'') (value
    of type rune) as type string in argument to append

    /tmp/tmpngn1fsfh_test.go:17:43: cannot use character (variable of type rune) as
    type string in argument to append

    /tmp/tmpngn1fsfh_test.go:20:19: cannot convert newString (variable of type []string)
    to type string

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075663
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, character := range myString\
    \ {\n        if character >= 'a' && character <= 'z' {\n            result +=\
    \ string(character - 'a') + string(character + 'A' - 'a')\n        } else {\n\
    \            result += character\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"These violent delights\
    \ have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcm5fd0vj_test.go:17:13: invalid operation: result += character (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075663
- exit_code: 1
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    str_array := make([]string, len(myString))\n    for i\
    \ := 0; i < len(myString); i++ {\n        str_array[i] = string(myString[i] +\
    \ 32)\n    }\n    return str_array[len(str_array)-1]\n}\n\nfunc TestFlip_Case(t\
    \ *testing.T) {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected:\
    \ \"hELLO!\" },\n     { actual: candidate(\"These violent delights have violent\
    \ ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFlip_Case (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.flip_case(...)\n\t/tmp/tmpgxzfaz6l_test.go:16\n\
    command-line-arguments_test.TestFlip_Case(0x0?)\n\t/tmp/tmpgxzfaz6l_test.go:26\
    \ +0x33\ntesting.tRunner(0xc0000da1a0, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075664
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    flipped := []rune(myString)\n    \n    for i := 0; i <\
    \ len(flipped); i++ {\n        flipped[i] = unicode.ToUpper(flipped[i])\n    \
    \    if flipped[i] != unicode.ToLower(flipped[i]) {\n            flipped[i] =\
    \ unicode.ToLower(flipped[i])\n        }\n    }\n    return string(flipped)\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp77poa1bt_test.go:15:22: undefined: unicode

    /tmp/tmp77poa1bt_test.go:16:26: undefined: unicode

    /tmp/tmp77poa1bt_test.go:17:26: undefined: unicode

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075663
- exit_code: 1
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    flipped := make([]rune, len(myString))\n    for i, r :=\
    \ range myString {\n        if r >= 'a' && r <= 'z' {\n            flipped[i]\
    \ = r - 32\n        } else {\n            flipped[i] = r\n        }\n    }\n \
    \   return string(flipped)\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate\
    \ := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFlip_Case (0.00s)\n    --- FAIL: TestFlip_Case/test_num__1\
    \ (0.00s)\n        tmpwuuzxobo_test.go:38: expected 'hELLO!', got 'HELLO!'\n \
    \   --- FAIL: TestFlip_Case/test_num__2 (0.00s)\n        tmpwuuzxobo_test.go:38:\
    \ expected 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS', got 'THESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075664
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    var result string = \"\"\n    for _, char := range myString\
    \ {\n        if char >= 'a' && char <= 'z' {\n            result = result + string(char-32)\
    \ + 'A'\n        } else {\n            result = result + char\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate :=\
    \ flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjbuj6bo9_test.go:15:22: invalid operation: result + string(char - 32)
    + ''A'' (mismatched types string and untyped rune)

    /tmp/tmpjbuj6bo9_test.go:17:22: invalid operation: result + char (mismatched types
    string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075663
- exit_code: 1
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    var tmp string\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            tmp += string(char - 32)\
    \ + \"A\"\n        } else {\n            tmp += string(char + 32)\n        }\n\
    \    }\n    return tmp\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate :=\
    \ flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFlip_Case (0.00s)\n    --- FAIL: TestFlip_Case/test_num__1\
    \ (0.00s)\n        tmpljgymy0h_test.go:38: expected 'hELLO!', got 'hEALALAOAA'\n\
    \    --- FAIL: TestFlip_Case/test_num__2 (0.00s)\n        tmpljgymy0h_test.go:38:\
    \ expected 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS', got 'tHAEASAEA@VAIAOALAEANATA@DAEALAIAGAHATASA@HAAAVAEA@VAIAOALAEANATA@EANADASA'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075664
- exit_code: 1
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    t := \"\"\n    for _, letter := range myString {\n   \
    \     switch letter {\n        case 'a':\n            t += \"A\"\n        case\
    \ 'b':\n            t += \"B\"\n        case 'c':\n            t += \"C\"\n  \
    \      case 'd':\n            t += \"D\"\n        case 'e':\n            t +=\
    \ \"E\"\n        case 'f':\n            t += \"F\"\n        case 'g':\n      \
    \      t += \"G\"\n        case 'h':\n            t += \"H\"\n        case 'i':\n\
    \            t += \"I\"\n        case 'j':\n            t += \"J\"\n        case\
    \ 'k':\n            t += \"K\"\n        case 'l':\n            t += \"L\"\n  \
    \      case 'm':\n            t += \"M\"\n        case 'n':\n            t +=\
    \ \"N\"\n        case 'o':\n            t += \"O\"\n        case 'p':\n      \
    \      t += \"P\"\n        case 'q':\n            t += \"Q\"\n        case 'r':\n\
    \            t += \"R\"\n        case 's':\n            t += \"S\"\n        case\
    \ 't':\n            t += \"T\"\n        case 'u':\n            t += \"U\"\n  \
    \      case 'v':\n            t += \"V\"\n        case 'w':\n            t +=\
    \ \"W\"\n        case 'x':\n            t += \"X\"\n        case 'y':\n      \
    \      t += \"Y\"\n        case 'z':\n            t += \"Z\"\n        }\n    }\n\
    \    return t\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFlip_Case (0.00s)\n    --- FAIL: TestFlip_Case/test_num__1\
    \ (0.00s)\n        tmp6w08i80o_test.go:87: expected 'hELLO!', got 'ELLO'\n   \
    \ --- FAIL: TestFlip_Case/test_num__2 (0.00s)\n        tmp6w08i80o_test.go:87:\
    \ expected 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS', got 'HESEVIOLENTDELIGHTSHAVEVIOLENTENDS'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075664
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    var result string\n    for _, letter := range myString\
    \ {\n        switch {\n        case letter == unicode.ToUpper(letter):\n     \
    \       result += unicode.ToLower(letter)\n        case letter == unicode.ToLower(letter):\n\
    \            result += unicode.ToUpper(letter)\n        }\n    }\n    return result\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpeozd9rnv_test.go:15:24: undefined: unicode

    /tmp/tmpeozd9rnv_test.go:16:23: undefined: unicode

    /tmp/tmpeozd9rnv_test.go:17:24: undefined: unicode

    /tmp/tmpeozd9rnv_test.go:18:23: undefined: unicode

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075664
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    // Initialize result to an empty string.\n    var res\
    \ string = \"\"\n    // Iterate over all letters of the input string.\n    for\
    \ _, letter := range myString {\n        // If the letter is uppercase already,\
    \ flip it to lowercase.\n        if letter >= 'A' && letter <= 'Z' {\n       \
    \     res += string(letter+1) - 'A'\n        } else {\n            // Else, just\
    \ append the letter.\n            res += letter\n        }\n    }\n    // Return\
    \ the result string.\n    return res\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzps6voji_test.go:18:20: invalid operation: string(letter + 1) - ''A''
    (mismatched types string and untyped rune)

    /tmp/tmpzps6voji_test.go:21:13: invalid operation: res += letter (mismatched types
    string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075664
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    return strings.ToUpper(myString[0:1]) + strings.ToLower(myString[1:])\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxg05vn4v_test.go:12:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075664
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    flipped := \"\"\n\n    for _, letter := range myString\
    \ {\n        if letter == 'a' {\n            flipped += \"A\"\n        } else\
    \ {\n            flipped += string([]byte{letter + 32})\n        }\n    }\n\n\
    \    return flipped\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkuecqtur_test.go:18:38: cannot use letter + 32 (value of type rune) as
    type byte in array or slice literal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075664
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    return strings.ToUpper(myString) + strings.ToLower(myString[len(myString)-1:])\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4r66omvw_test.go:12:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075664
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    var result string\n    for _, letter := range myString\
    \ {\n        if letter == 'a' {\n            result = 'A'\n        } else if letter\
    \ == 'b' {\n            result = 'B'\n        } else if letter == 'c' {\n    \
    \        result = 'C'\n        } else if letter == 'd' {\n            result =\
    \ 'D'\n        } else if letter == 'e' {\n            result = 'E'\n        }\
    \ else if letter == 'f' {\n            result = 'F'\n        } else if letter\
    \ == 'g' {\n            result = 'G'\n        } else if letter == 'h' {\n    \
    \        result = 'H'\n        } else if letter == 'i' {\n            result =\
    \ 'I'\n        } else if letter == 'j' {\n            result = 'J'\n        }\
    \ else if letter == 'k' {\n            result = 'K'\n        } else if letter\
    \ == 'l' {\n            result = 'L'\n        } else if letter == 'm' {\n    \
    \        result = 'M'\n        } else if letter == 'n' {\n            result =\
    \ 'N'\n        } else if letter == 'o' {\n            result = 'O'\n        }\
    \ else if letter == 'p' {\n            result = 'P'\n        } else if letter\
    \ == 'q' {\n            result = 'Q'\n        } else if letter == 'r' {\n    \
    \        result = 'R'\n        } else if letter == 's' {\n            result =\
    \ 'S'\n        } else if letter == 't' {\n            result = 'T'\n        }\
    \ else if letter == 'u' {\n            result = 'U'\n        } else if letter\
    \ == 'v' {\n            result = 'V'\n        } else if letter == 'w' {\n    \
    \        result = 'W'\n        } else if letter == 'x' {\n            result =\
    \ 'X'\n        } else if letter == 'y' {\n            result = 'Y'\n        }\
    \ else if letter == 'z' {\n            result = 'Z'\n        } else {\n      \
    \      result = letter\n        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t\
    \ *testing.T) {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected:\
    \ \"hELLO!\" },\n     { actual: candidate(\"These violent delights have violent\
    \ ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0klvml99_test.go:15:22: cannot use ''A'' (untyped rune constant 65) as
    string value in assignment

    /tmp/tmp0klvml99_test.go:17:22: cannot use ''B'' (untyped rune constant 66) as
    string value in assignment

    /tmp/tmp0klvml99_test.go:19:22: cannot use ''C'' (untyped rune constant 67) as
    string value in assignment

    /tmp/tmp0klvml99_test.go:21:22: cannot use ''D'' (untyped rune constant 68) as
    string value in assignment

    /tmp/tmp0klvml99_test.go:23:22: cannot use ''E'' (untyped rune constant 69) as
    string value in assignment

    /tmp/tmp0klvml99_test.go:25:22: cannot use ''F'' (untyped rune constant 70) as
    string value in assignment

    /tmp/tmp0klvml99_test.go:27:22: cannot use ''G'' (untyped rune constant 71) as
    string value in assignment

    /tmp/tmp0klvml99_test.go:29:22: cannot use ''H'' (untyped rune constant 72) as
    string value in assignment

    /tmp/tmp0klvml99_test.go:31:22: cannot use ''I'' (untyped rune constant 73) as
    string value in assignment

    /tmp/tmp0klvml99_test.go:33:22: cannot use ''J'' (untyped rune constant 74) as
    string value in assignment

    /tmp/tmp0klvml99_test.go:33:22: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075664
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, letter := range myString {\n\
    \        if letter == strings.ToUpper(letter) {\n            result += strings.ToUpper(letter)\n\
    \        } else {\n            result += strings.ToLower(letter)\n        }\n\
    \    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate\
    \ := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp02_9j4fo_test.go:14:22: undefined: strings

    /tmp/tmp02_9j4fo_test.go:15:23: undefined: strings

    /tmp/tmp02_9j4fo_test.go:17:23: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075664
- exit_code: 1
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    var flipped string = \"\"\n    for _, character := range\
    \ myString {\n        if character >= 'a' && character <= 'z' {\n            flipped\
    \ = flipped + string(character + 32 - 'a')\n        } else {\n            flipped\
    \ = flipped + string(character)\n        }\n    }\n    return flipped\n}\n\nfunc\
    \ TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"These violent delights\
    \ have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFlip_Case (0.00s)\n    --- FAIL: TestFlip_Case/test_num__1\
    \ (0.00s)\n        tmpah0ae6vc_test.go:38: expected 'hELLO!', got 'H$++.!'\n \
    \   --- FAIL: TestFlip_Case/test_num__2 (0.00s)\n        tmpah0ae6vc_test.go:38:\
    \ expected 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS', got 'T'$2$ 5(.+$-3 #$+(&'32\
    \ ' 5$ 5(.+$-3 $-#2'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075664
- exit_code: 1
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    var result string\n\n    for _, letter := range myString\
    \ {\n        result += \"A\" // uppercase letter\n        if letter != \"a\" {\n\
    \            result += letter\n        }\n    }\n\n    return result\n}\n</code>\n\
    <|/ a tags=uppercase,lowercase,go |>\n<| a tags=uppercase,lowercase,go |>\nThis\
    \ would do it:\n<code>\npackage main\n\nimport (\n  \"fmt\"\n  \"strings\"\n)\n\
    \nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"These violent delights\
    \ have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpw0qn4ob4_test.go:23:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075664
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += string(char-'a'+26)\n\
    \        } else {\n            result += char\n        }\n    }\n    return result\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3pssgyjq_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075664
- exit_code: 1
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    flipped := \"\"\n    for _, c := range myString {\n  \
    \      if c == 'a' {\n            flipped += \"A\"\n        } else if c == 'A'\
    \ {\n            flipped += \"a\"\n        } else {\n            flipped += string(c)\n\
    \        }\n    }\n    return flipped\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFlip_Case (0.00s)\n    --- FAIL: TestFlip_Case/test_num__1\
    \ (0.00s)\n        tmpw3weec5n_test.go:40: expected 'hELLO!', got 'Hello!'\n \
    \   --- FAIL: TestFlip_Case/test_num__2 (0.00s)\n        tmpw3weec5n_test.go:40:\
    \ expected 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS', got 'These violent delights\
    \ hAve violent ends'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075665
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    upper_string := []rune(myString)\n    lower_string :=\
    \ []rune(strings.ToLower(string(myString)))\n    lower_string[0] = unicode.ToUpper(lower_string[0])\n\
    \    fmt.Println(string(upper_string), string(lower_string))\n    return string(upper_string)\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnncb1iea_test.go:13:28: undefined: strings

    /tmp/tmpnncb1iea_test.go:14:23: undefined: unicode

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075665
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    len := len(myString)\n    for i :=\
    \ 0; i < len; i++ {\n        switch myString[i] {\n        case 'a':\n       \
    \     result += strings.ToUpper(myString[i+1:])\n            i += len - 1\n  \
    \      case 'A':\n            result += strings.ToLower(myString[i+1:])\n    \
    \        i += len - 1\n        default:\n            result += myString[i]\n \
    \       }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmps896sf3n_test.go:17:23: undefined: strings

    /tmp/tmps896sf3n_test.go:20:23: undefined: strings

    /tmp/tmps896sf3n_test.go:23:13: invalid operation: result += myString[i] (mismatched
    types string and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075665
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    return strings.ToUpper(myString) + strings.ToLower(strings.ToUpper(myString))\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpf2o9vyzq_test.go:12:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075665
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    var uppercase = []rune(\"A\")\n    var lowercase = []rune(\"\
    a\")\n\n    for _, c := range myString {\n        if isUppercase(c) {\n      \
    \      uppercase = append(uppercase, c)\n        } else {\n            lowercase\
    \ = append(lowercase, c)\n        }\n    }\n    return string(uppercase) + string(lowercase)\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpba15ul6t_test.go:16:12: undefined: isUppercase

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075665
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    var result string\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += string((char-'a')\
    \ + 26)\n        } else if char >= 'A' && char <= 'Z' {\n            result +=\
    \ string((char-'A') + 26)\n        } else {\n            result += char\n    \
    \    }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate\
    \ := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpacnttdaa_test.go:19:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075665
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    // Convert string to lower case\n    lowercase_string\
    \ := strings.ToLower(myString)\n\n    // Iterate over every character and check\
    \ whether it is lowercase\n    // If so, convert it to uppercase\n    upcase_string\
    \ := \"\"\n    for _, character := range lowercase_string {\n        if character\
    \ == strings.ToLower(character) {\n            upcase_string += strings.ToUpper(character)\n\
    \        }\n    }\n\n    return upcase_string\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvlwnrdlm_test.go:13:25: undefined: strings

    /tmp/tmpvlwnrdlm_test.go:19:25: undefined: strings

    /tmp/tmpvlwnrdlm_test.go:20:30: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075665
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, char := range myString {\n\
    \        if char >= 'A' && char <= 'Z' {\n            result += char + 'a'\n \
    \       } else if char >= 'a' && char <= 'z' {\n            result += char + 'A'\n\
    \        } else {\n            result += char\n        }\n    }\n    return result\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwyw70kk5_test.go:15:13: invalid operation: result += char + ''a'' (mismatched
    types string and rune)

    /tmp/tmpwyw70kk5_test.go:17:13: invalid operation: result += char + ''A'' (mismatched
    types string and rune)

    /tmp/tmpwyw70kk5_test.go:19:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075665
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    return strings.ToUpper(strings.ToLower(myString))\n}\n\
    \nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"These violent delights\
    \ have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmph6v80dg__test.go:12:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075665
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    return strings.ToUpper(fmt.Sprintf(\"%v\", myString))\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmdkawc4f_test.go:12:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075665
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    myString = strings.ToLower(myString)\n    myString = strings.ToUpper(myString)\n\
    \    return myString\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate :=\
    \ flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8qdaekm7_test.go:12:16: undefined: strings

    /tmp/tmp8qdaekm7_test.go:13:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    for i := 0; i < len(myString); i++ {\n        myString[i]\
    \ = myString[i] + 32\n    }\n    myString[0] |= 32\n    return myString\n}\n\n\
    func TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"These violent delights\
    \ have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmgldxmwk_test.go:13:9: cannot assign to myString[i] (value of type byte)

    /tmp/tmpmgldxmwk_test.go:15:5: cannot assign to myString[0] (value of type byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075665
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    var result string\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += string(char -\
    \ 'a') + string(char - 'A')\n        } else {\n            result += char\n  \
    \      }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw6040kaf_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075666
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    fmt.Printf(\"myString: %s\\n\", myString)\n    var result\
    \ string = \"\"\n    var index = 0\n    for {\n        if index >= len(myString)\
    \ {\n            return result\n        }\n        if myString[index] == '_' {\n\
    \            index++\n        } else {\n            result += string(unicode.ToLower(rune(myString[index])))\n\
    \            index++\n        }\n    }\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqk6or1bl_test.go:22:30: undefined: unicode

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075666
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    return myString[:1] + strings.ToUpper(myString[1:]) +\
    \ myString[:1]\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnihw1hco_test.go:12:27: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075666
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    // Start with the string with the first character capitalized.\n\
    \    myString += strings.ToUpper(myString[0:1])\n    // Get the rest of the string\
    \ and capitalize all but the first character.\n    temp := myString\n    for i\
    \ := 1; i < len(temp); i++ {\n        temp = strings.ToUpper(temp) + temp[i:]\n\
    \    }\n    // Return our capitalized string.\n    return temp\n}\n\nfunc TestFlip_Case(t\
    \ *testing.T) {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected:\
    \ \"hELLO!\" },\n     { actual: candidate(\"These violent delights have violent\
    \ ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpojgr0rla_test.go:13:17: undefined: strings

    /tmp/tmpojgr0rla_test.go:17:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075666
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, v := range myString {\n   \
    \     switch {\n        case v >= 'a' && v <= 'z':\n            result += string(v\
    \ - 32) // uppercase letter\n        case v >= 'A' && v <= 'Z':\n            result\
    \ += string(v + 32) // lowercase letter\n        default:\n            result\
    \ += v\n        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpot9dnx1b_test.go:20:13: invalid operation: result += v (mismatched types
    string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075666
- exit_code: 1
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    output := string(myString)\n    switch {\n        output\
    \ == \"\" || output == \"\\t\":\n            return \"\"\n        case output[0]\
    \ == 'a':\n            output += 'A'\n            return output\n        case\
    \ output[0] == 'b':\n            output += 'B'\n            return output\n  \
    \      case output[0] == 'c':\n            output += 'C'\n            return output\n\
    \        case output[0] == 'd':\n            output += 'D'\n            return\
    \ output\n        case output[0] == 'e':\n            output += 'E'\n        \
    \    return output\n        case output[0] == 'f':\n            output += 'F'\n\
    \            return output\n        case output[0] == 'g':\n            output\
    \ += 'G'\n            return output\n        case output[0] == 'h':\n        \
    \    output += 'H'\n            return output\n        case output[0] == 'i':\n\
    \            output += 'I'\n            return output\n        case output[0]\
    \ == 'j':\n            output += 'J'\n            return output\n        case\
    \ output[0] == 'k':\n            output += 'K'\n            return output\n  \
    \      case output[0] == 'l':\n            output += 'L'\n            return output\n\
    \        case output[0] == 'm':\n            output += 'M'\n            return\
    \ output\n        case output[0] == 'n':\n            output += 'N'\n        \
    \    return output\n        case output[0] == 'o':\n            output += 'O'\n\
    \            return output\n        case output[0] == 'p':\n            output\
    \ += 'P'\n            return output\n        case output[0] == 'q':\n        \
    \    output += 'Q'\n            return output\n        case output[0] == 'r':\n\
    \            output += 'R'\n            return output\n        case output[0]\
    \ == 's':\n            output += 'S'\n            return output\n        case\
    \ output[0] == 't':\n            output += 'T'\n            return output\n  \
    \      case output[0] == 'u':\n            output += 'U'\n            return output\n\
    \        case output[0] == 'v':\n            output += 'V'\n            return\
    \ output\n        case output[0] == 'w':\n            output += 'W'\n        \
    \    return output\n        case output[0] == 'x':\n            output += 'X'\n\
    \            return output\n        case output[0] == 'y':\n            output\
    \ += 'Y'\n            return output\n        case output[0] == 'z':\n        \
    \    output += 'Z'\n            return output\n        default:\n            return\
    \ output\n    }\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp0_uuxlxx_test.go:14:9: expected ''}'', found output

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075665
- exit_code: 1
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    upcaseChar := false\n    downcaseChar := false\n\n   \
    \ for _, char := range myString {\n        if char == ' ' {\n            continue\n\
    \        }\n\n        if char >= 'a' && char <= 'z' {\n            upcaseChar\
    \ = true\n            if downcaseChar {\n                myString = myString[:len(myString)-1]\n\
    \            }\n        } else {\n            downcaseChar = true\n          \
    \  if upcaseChar {\n                myString = myString[:len(myString)-1]\n  \
    \          }\n        }\n    }\n    return myString\n}\n\nfunc TestFlip_Case(t\
    \ *testing.T) {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected:\
    \ \"hELLO!\" },\n     { actual: candidate(\"These violent delights have violent\
    \ ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFlip_Case (0.00s)\n    --- FAIL: TestFlip_Case/test_num__1\
    \ (0.00s)\n        tmpo7vyttt__test.go:50: expected 'hELLO!', got 'H'\n    ---\
    \ FAIL: TestFlip_Case/test_num__2 (0.00s)\n        tmpo7vyttt__test.go:50: expected\
    \ 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS', got 'These '\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075666
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    buf := []byte(myString)\n\n    for i, b := range buf {\n\
    \        if b >= 'A' && b <= 'Z' {\n            buf[i] = b - 'A' + 'a'\n     \
    \   }\n        if b >= 'a' && b <= 'z' {\n            buf[i] = b - 'a' + 'A'\n\
    \        }\n    }\n\n    return string(buf)\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075666
- exit_code: 1
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    buffer := []rune(myString)\n\n    for i, j := 0, len(buffer)-1;\
    \ i < j; i, j = i+1, j-1 {\n        buffer[i], buffer[j] = buffer[j], buffer[i]\n\
    \    }\n    return string(buffer)\n}\n\nfunc TestFlip_Case(t *testing.T) {\n \
    \ candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFlip_Case (0.00s)\n    --- FAIL: TestFlip_Case/test_num__1\
    \ (0.00s)\n        tmpu5vges2h_test.go:35: expected 'hELLO!', got '!olleH'\n \
    \   --- FAIL: TestFlip_Case/test_num__2 (0.00s)\n        tmpu5vges2h_test.go:35:\
    \ expected 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS', got 'sdne tneloiv evah\
    \ sthgiled tneloiv esehT'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075666
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    var result strings.Builder\n\n    for _, char := range\
    \ myString {\n        if char >= 'a' && char <= 'z' {\n            result = result.String()\
    \ + string((char - 'a') + 26)\n        } else if char >= 'A' && char <= 'Z' {\n\
    \            result = result.String() + string((char - 'A') + 26)\n        } else\
    \ {\n            result = result.String() + char\n        }\n    }\n    return\
    \ result.String()\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmposdveuop_test.go:12:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075666
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    flipped := \"\"\n\n    for _, c := range myString {\n\
    \        switch {\n        case isAsciiUpper(c):\n            flipped += toAsciiUpper(c)\n\
    \        case isAsciiLower(c):\n            flipped += toAsciiLower(c)\n     \
    \   default:\n            flipped += c\n        }\n    }\n    return flipped\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2vx5nwyu_test.go:16:14: undefined: isAsciiUpper

    /tmp/tmp2vx5nwyu_test.go:17:24: undefined: toAsciiUpper

    /tmp/tmp2vx5nwyu_test.go:18:14: undefined: isAsciiLower

    /tmp/tmp2vx5nwyu_test.go:19:24: undefined: toAsciiLower

    /tmp/tmp2vx5nwyu_test.go:21:13: invalid operation: flipped += c (mismatched types
    string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075666
- exit_code: 1
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := make([]rune, len(myString))\n    for i, char\
    \ := range myString {\n        switch char {\n        case 'A':\n            result[i]\
    \ = 'a'\n        case 'a':\n            result[i] = 'A'\n        case 'B':\n \
    \           result[i] = 'b'\n        case 'b':\n            result[i] = 'B'\n\
    \        case 'C':\n            result[i] = 'c'\n        case 'c':\n         \
    \   result[i] = 'C'\n        case 'D':\n            result[i] = 'd'\n        case\
    \ 'd':\n            result[i] = 'D'\n        case 'E':\n            result[i]\
    \ = 'e'\n        case 'e':\n            result[i] = 'E'\n        case 'F':\n \
    \           result[i] = 'f'\n        case 'f':\n            result[i] = 'F'\n\
    \        case 'G':\n            result[i] = 'g'\n        case 'g':\n         \
    \   result[i] = 'G'\n        case 'H':\n            result[i] = 'h'\n        case\
    \ 'h':\n            result[i] = 'H'\n        case 'I':\n            result[i]\
    \ = 'i'\n        case 'i':\n            result[i] = 'I'\n        case 'J':\n \
    \           result[i] = 'j'\n        case 'j':\n            result[i] = 'J'\n\
    \        case 'K':\n            result[i] = 'k'\n        case 'k':\n         \
    \   result[i] = 'K'\n        case 'L':\n            result[i] = 'l'\n        case\
    \ 'l':\n            result[i] = 'L'\n        case 'M':\n            result[i]\
    \ = 'm'\n        case 'm':\n            result[i] = 'M'\n        case 'N':\n \
    \           result[i] = 'n'\n        case 'n':\n            result[i] = 'N'\n\
    \        case 'O':\n            result[i] = 'o'\n        case 'o':\n         \
    \   result[i] = 'O'\n        case 'P':\n            result[i] = 'p'\n        case\
    \ 'p':\n            result[i] = 'P'\n        case 'Q':\n            result[i]\
    \ = 'q'\n        case 'q':\n            result[i] = 'Q'\n        case 'R':\n \
    \           result[i] = 'r'\n        case 'r':\n            result[i] = 'R'\n\
    \        case 'S':\n            result[i] = 's';\n        case 's':\n        \
    \    result[i] = 'S'\n        case 'T':\n            result[i] = 't'\n       \
    \ case 't':\n            result[i] = 'T'\n        case 'U':\n            result[i]\
    \ = 'u'\n        case 'u':\n            result[i] = 'U'\n        case 'V':\n \
    \           result[i] = 'v'\n        case 'v':\n            result[i] = 'V'\n\
    \        case 'W':\n            result[i] = 'w'\n        case 'w':\n         \
    \   result[i] = 'W'\n        case 'X':\n            result[i] = 'x'\n        case\
    \ 'x':\n            result[i] = 'X'\n        case 'Y':\n            result[i]\
    \ = 'y'\n        case 'y':\n            result[i] = 'Y'\n        case 'Z':\nfunc\
    \ TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"These violent delights\
    \ have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps44scjel_test.go:116:6: expected ''('', found TestFlip_Case

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075666
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    char := []rune(myString)\n    for i, j := range char {\n\
    \        if i != j {\n            char[i] = char[j].upper()\n            char[j]\
    \ = char[i].lower()\n        }\n    }\n\n    return string(char)\n}\n\nfunc TestFlip_Case(t\
    \ *testing.T) {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected:\
    \ \"hELLO!\" },\n     { actual: candidate(\"These violent delights have violent\
    \ ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0i1lesjl_test.go:14:17: invalid operation: i != j (mismatched types int
    and rune)

    /tmp/tmp0i1lesjl_test.go:15:31: char[j].upper undefined (type rune has no field
    or method upper)

    /tmp/tmp0i1lesjl_test.go:16:31: char[i].lower undefined (type rune has no field
    or method lower)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075666
