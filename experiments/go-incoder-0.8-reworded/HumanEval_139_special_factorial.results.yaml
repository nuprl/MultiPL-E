language: go_test.go
name: HumanEval_139_special_factorial
results:
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n < 0 {\n        return 0\n    }\n    result := 1\n    for i := 0; i <\
    \ n; i++ {\n        result *= i + 1\n    }\n    return result\n}\n\nfunc TestSpecial_Factorial(t\
    \ *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected:\
    \ 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual:\
    \ candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp0nbd9m35_test.go:43: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp0nbd9m35_test.go:43:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp0nbd9m35_test.go:43: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073814
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n < 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n\
    \    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return\
    \ 6\n    }\n    if n == 4 {\n        return 24\n    }\n    if n == 5 {\n     \
    \   return 120\n    }\n    if n == 6 {\n        return 720\n    }\n    if n ==\
    \ 7 {\n        return 5040\n    }\n    if n == 8 {\n        return 40320\n   \
    \ }\n    if n == 9 {\n        return 362880\n    }\n    if n == 10 {\n       \
    \ return 3628800\n    }\n    if n == 11 {\n        return 39916800\n    }\n  \
    \  if n == 12 {\n        return 479001600\n    }\n    if n == 13 {\n        return\
    \ 6227020800\n    }\n    if n == 14 {\n        return 87178291200\n    }\n   \
    \ if n == 15 {\n        return 1307674368000\n    }\n    if n == 16 {\n      \
    \  return 20922789888000\n    }\n    if n == 17 {\n        return 355687428096000\n\
    \    }\n    if n == 18 {\n        return 6402373705728000\n    }\n    if n ==\
    \ 19 {\n        return 121645100408832000\n    }\n    if n == 20 {\n        return\
    \ 2432902008176640000\n    }\n    if n == 21 {\n        return 51090942171709440000\n\
    \    }\n    if n == 22 {\n        return 1124000727777607680000\n    }\n    if\
    \ n == 23 {\n        return 25852016738884976640000\n    }\n    if n == 24 {\n\
    \        return 620448401733239439360000\n    }\n    if n == 25 {\n        return\
    \ 15511210043330985984000000\n    }\n    if n == 26 {\n        return 403291461126605635584000000\n\
    \    }\n    if n == 27 {\n        return 6798916376386122894736000000\n    }\n\
    \    if n == 28 {\n        return 1374389534723464176707296000000\n    }\n   \
    \ if n == 29 {\n        return 2036476789363854563391296000000\n    }\n    if\
    \ n == 30 {\n        return 3105113480374185618977296000000\n    }\n    if n ==\
    \ 31 {\n        return 38085626227668133590395264000000\n    }\n    if n == 32\
    \ {\n        return 5559755813888397672930258176000000\n    }\n    if n == 33\
    \ {\n        return 7115319174495095534811355\nfunc TestSpecial_Factorial(t *testing.T)\
    \ {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual:\
    \ candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp9zf92l2w_test.go:118:6: expected ''('', found TestSpecial_Factorial

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073813
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n <= 0 {\n        return 0;\n    }\n    result := 1;\n    for i := 1;\
    \ i <= n; i++ {\n        result *= i;\n    }\n    return result;\n}\n\nfunc TestSpecial_Factorial(t\
    \ *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected:\
    \ 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual:\
    \ candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp9x5el0pm_test.go:43: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp9x5el0pm_test.go:43:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp9x5el0pm_test.go:43: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073814
- exit_code: 2
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    factorial := factorial(n)\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t\
    \ *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected:\
    \ 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual:\
    \ candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp78xlikem_test.go:17:18: undefined: factorial

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073814
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    var result int\n\n    for i := 0; i < n; i++ {\n        result *= i\n   \
    \ }\n\n    return result\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate\
    \ := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7),\
    \ expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp4orwrzkt_test.go:42: expected '%!s(int=288)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp4orwrzkt_test.go:42:\
    \ expected '%!s(int=34560)', got '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp4orwrzkt_test.go:42: expected '%!s(int=125411328000)', got\
    \ '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__3 (0.00s)\n    \
    \    tmp4orwrzkt_test.go:42: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073814
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    result := 1\n    for n > 0 {\n        result = result * n\n        n--\n\
    \    }\n    return result\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n \
    \ candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual:\
    \ candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpvy0u9omr_test.go:41: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpvy0u9omr_test.go:41:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpvy0u9omr_test.go:41: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073814
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    factorial := 1\n    for n > 1 {\n        factorial *= n\n        n--\n  \
    \  }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n\
    \  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual:\
    \ candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpfhq4_sfj_test.go:41: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpfhq4_sfj_test.go:41:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpfhq4_sfj_test.go:41: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073814
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n < 2 {\n        return n\n    }\n    return (n * special_factorial(n\
    \ - 1))\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpqsogeqwo_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpqsogeqwo_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpqsogeqwo_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073814
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n < 2 {\n        return n\n    }\n    return n*special_factorial(n-1)\n\
    }\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp4g604eu0_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp4g604eu0_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp4g604eu0_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073814
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n <= 1 {\n        return n\n    } else {\n        return n * special_factorial(n\
    \ - 1)\n    }\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate :=\
    \ special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7),\
    \ expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmphlbk9_bz_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmphlbk9_bz_test.go:40:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmphlbk9_bz_test.go:40: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073814
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n \
    \   }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n\
    \  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual:\
    \ candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp0j766yjf_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp0j766yjf_test.go:40:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp0j766yjf_test.go:40: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073652
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n <= 1 {\n        return n\n    }\n\n    if n == 2 {\n        return 4\n\
    \    }\n\n    special_factorial := n * (special_factorial(n-1))\n\n    return\
    \ special_factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate\
    \ := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7),\
    \ expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp2fmc_g5d_test.go:46: expected '%!s(int=288)', got '%!s(int=48)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp2fmc_g5d_test.go:46:\
    \ expected '%!s(int=34560)', got '%!s(int=240)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp2fmc_g5d_test.go:46: expected '%!s(int=125411328000)', got\
    \ '%!s(int=10080)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073814
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    var factorial = 1\n    for i:= 1; i <= n; i++ {\n        factorial *= i\n\
    \    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n\
    \  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual:\
    \ candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpxqttg117_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpxqttg117_test.go:40:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpxqttg117_test.go:40: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073814
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    switch {\n    case n < 1:\n        return 1\n    case n == 2:\n        return\
    \ 2\n    case n == 3:\n        return 6\n    case n == 4:\n        return 24\n\
    \    case n == 5:\n        return 120\n    case n == 6:\n        return 720\n\
    \    case n == 7:\n        return 5040\n    case n == 8:\n        return 40320\n\
    \    case n == 9:\n        return 362880\n    case n == 10:\n        return 3628800\n\
    \    case n == 11:\n        return 39916800\n    case n == 12:\n        return\
    \ 479001600\n    case n == 13:\n        return 6227020800\n    case n == 14:\n\
    \        return 87178291200\n    case n == 15:\n        return 130767436800\n\
    \    case n == 16:\n        return 20922789888000\n    case n == 17:\n       \
    \ return 355687428096000\n    case n == 18:\n        return 640237370572800\n\
    \    case n == 19:\n        return 12164510040883200\n    case n == 20:\n    \
    \    return 2432902008176640000\n    case n == 21:\n        return 51090942171709440000\n\
    \    case n == 22:\n        return 1124000727777607680000\n    case n == 23:\n\
    \        return 25852016738884976640000\n    case n == 24:\n        return 51422944894435200000000\n\
    \    case n == 25:\n        return 103079218604441600000000\n    case n == 26:\n\
    \        return 209227898880003200000000\n    case n == 27:\n        return 42019956612492470400000000\n\
    \    case n == 28:\n        return 8128000000000000000000000000\n    case n ==\
    \ 29:\n        return 16171791592181447600000000\n    case n:30 <= n && n <= 31:\n\
    \        return n\n    }\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate\
    \ := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7),\
    \ expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp7xuh90l0_test.go:76:30: illegal label declaration

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073813
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 1 {\n        return 1\n    }\n    f := n * special_factorial(n -\
    \ 1)\n    return f\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate\
    \ := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7),\
    \ expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpbiimtrpc_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpbiimtrpc_test.go:40:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpbiimtrpc_test.go:40: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073814
- exit_code: 2
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    var result int\n\n    for i = 1; i <= n; i++ {\n        result = result *\
    \ i\n    }\n\n    return result\n}\n\nfunc TestSpecial_Factorial(t *testing.T)\
    \ {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual:\
    \ candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpe9evollh_test.go:19:9: undefined: i

    /tmp/tmpe9evollh_test.go:20:27: undefined: i

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073814
- exit_code: 2
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    return factorial(n) * factorial(n-1) * factorial(n-2)\n}\n\nfunc TestSpecial_Factorial(t\
    \ *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected:\
    \ 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual:\
    \ candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9o7_0cvd_test.go:17:12: undefined: factorial

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073814
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 1 {\n        return 1\n    }\n    else if n == 2 {\n        return\
    \ 2\n    }\n    else if n == 3 {\n        return 6\n    }\n    else if n == 4\
    \ {\n        return 24\n    }\n    else if n == 5 {\n        return 120\n    }\n\
    \    else if n == 6 {\n        return 720\n    }\n    else if n == 7 {\n     \
    \   return 5040\n    }\n    else if n == 8 {\n        return 40320\n    }\n  \
    \  else if n == 9 {\n        return 362880\n    }\n    else if n == 10 {\n   \
    \     return 3628800\n    }\n    else if n == 11 {\n        return 39916800\n\
    \    }\n    else if n == 12 {\n        return 479001600\n    }\n    else if n\
    \ == 13 {\n        return 6227020800\n    }\n    else if n == 14 {\n        return\
    \ 87178291200\n    }\n    else if n == 15 {\n        return 1307674368000\n  \
    \  }\n    else if n == 16 {\n        return 20922789888000\n    }\n    else if\
    \ n == 17 {\n        return 355687428096000\n    }\n    else if n == 18 {\n  \
    \      return 6402373705728000\n    }\n    else if n == 19 {\n        return 121645100408832000\n\
    \    }\n    else if n == 20 {\n        return 2432902008176640000\n    }\n   \
    \ else if n == 21 {\n        return 51090942171709440000\n    }\n    else if n\
    \ == 22 {\n        return 1124000727777607680000\n    }\n    else if n == 23 {\n\
    \        return 25852016738884976640000\n    }\n    else if n == 24 {\n      \
    \  return 620448401733239439360000\n    }\n    else if n == 25 {\n        return\
    \ 12164510040883276800000000\n    }\n    else if n == 26 {\n        return 2432902008176637760000000\n\
    \    }\n    else if n == 27 {\n        return 510909421717094377600000000\n  \
    \  }\n    else if n == 28 {\n        return 112400072777760768000000000\n    }\n\
    \    else if n == 29 {\n        return 2585201673888497664000000000\n    }\n \
    \   else if n == 30 {\n        return 62044840173323943936000000000\n    }\n \
    \   else if n == 31 {\n        return 12164510040883276800000000000\n    }\n \
    \   else if \nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpjfv_x216_test.go:20:5: expected statement, found ''else''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073813
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n \
    \   }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n\
    \  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual:\
    \ candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp0j766yjf_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp0j766yjf_test.go:40:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp0j766yjf_test.go:40: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073652
- exit_code: 2
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n < 0 {\n        fmt.Println(\"Invalid input.\")\n        return 0\n \
    \   }\n    if n == 0 {\n        return 1\n    }\n    result := factorial(n)\n\
    \    for i := 1; i <= n; i++ {\n        result *= i\n    }\n    return result\n\
    }\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyyv2bhs4_test.go:24:15: undefined: factorial

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073814
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    return n!\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate :=\
    \ special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7),\
    \ expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpzjljpndk_test.go:17:13: expected '';'', found ''!''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073813
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    // Calculate the factorial until n = 1\n    if n == 1 {\n        return 1\n\
    \    }\n    // Calculate n-1\n    factorial := special_factorial(n - 1)\n    //\
    \ Calculate n-2\n    factorial = factorial * n\n    // Return factorial\n    return\
    \ factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpn9i5ctto_test.go:45: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpn9i5ctto_test.go:45:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpn9i5ctto_test.go:45: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073814
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    brazilian := 1\n    for i := 1; i <= n; i++ {\n        brazilian *= i\n \
    \   }\n    return brazilian\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n\
    \  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual:\
    \ candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp87vttkhe_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp87vttkhe_test.go:40:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp87vttkhe_test.go:40: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073814
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    switch {\n    case n < 0:\n        return -1\n    case n <= 1:\n        return\
    \ 1\n    case n == 2:\n        return 2\n    case n > 2:\n        result := 1\n\
    \        for i := 2; i <= n; i++ {\n            result *= i\n        }\n     \
    \   return result\n    }\n    return -1\n}\n\nfunc TestSpecial_Factorial(t *testing.T)\
    \ {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual:\
    \ candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpla4r10br_test.go:50: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpla4r10br_test.go:50:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpla4r10br_test.go:50: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073814
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    switch {\n    case n < 2:\n        return 1\n    case n > 2:\n        return\
    \ n * special_factorial(n - 1)\n    default:\n        return 0\n    }\n}\n\nfunc\
    \ TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpgfq7peuo_test.go:43: expected '%!s(int=288)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpgfq7peuo_test.go:43:\
    \ expected '%!s(int=34560)', got '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpgfq7peuo_test.go:43: expected '%!s(int=125411328000)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073814
- exit_code: 2
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    return factorial(n) // factorial of n\n}\n\nfunc TestSpecial_Factorial(t\
    \ *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected:\
    \ 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual:\
    \ candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp91omsee_test.go:17:12: undefined: factorial

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073815
- exit_code: 2
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    result := factorial(n)\n    for\
    \ i := 2; i <= n; i++ {\n        result *= i\n    }\n    return result\n}\n\n\
    func TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpop3eunjb_test.go:20:15: undefined: factorial

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073815
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    result := 1\n    for i := 1; i <= n; i++ {\n        result *= i\n    }\n\
    \    return result\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate\
    \ := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7),\
    \ expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpp0r0rc0e_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpp0r0rc0e_test.go:40:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpp0r0rc0e_test.go:40: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n \
    \   }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n\
    \  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual:\
    \ candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp0j766yjf_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp0j766yjf_test.go:40:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp0j766yjf_test.go:40: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073652
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    // Base case when n is 0\n    if n == 0 {\n        return 1\n    }\n    //\
    \ Recursive case\n    // n! * (n-1)! * (n-2)! * ... * 1!\n    if n%2 == 0 {\n\
    \        return n * special_factorial(n - 1)\n    } else {\n        return n *\
    \ special_factorial(n - 2)\n    }\n}\nfunc TestSpecial_Factorial(t *testing.T)\
    \ {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual:\
    \ candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0398\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f368?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.special_factorial(0xfffffffffd5555cb?)\n\
    \t/tmp/tmpphyuu_n5_test.go:16 +0x7b fp=0xc0201e03a8 sp=0xc0201e03a0 pc=0x4ef6db\n\
    command-line-arguments_test.special_factorial(0xfffffffffd5555cd)\n\t/tmp/tmpphyuu_n5_test.go:26\
    \ +0x4f fp=0xc0201e03c0 sp=0xc0201e03a8 pc=0x4ef6af\ncommand-line-arguments_test.special_factorial(0xfffffffffd5555cf)\n\
    \t/tmp/tmpphyuu_n5_test.go:26 +0x4f fp=0xc0201e03d8 sp=0xc0201e03c0 pc=0x4ef6af\n\
    command-line-arguments_test.special_factorial(0xfffffffffd5555d1)\n\t/tmp/tmpphyuu_n5_test.go:26\
    \ +0x4f fp=0xc0201e03f0 sp=0xc0201e03d8 pc=0x4ef6af\ncommand-line-arguments_test.special_factorial(0xfffffffffd5555d3)\n\
    \t/tmp/tmpphyuu_n5_test.go:26 +0x4f fp=0xc0201e0408 sp=0xc0201e03f0 pc=0x4ef6af\n\
    command-line-arguments_test.special_factorial(0xfffffffffd5555d5)\n\t/tmp/tmpphyuu_n5_test.go:26\
    \ +0x4f fp=0xc0201e0420 sp=0xc0201e0408 pc=0x4ef6af\ncommand-line-arguments_test.special_factorial(0xfffffffffd5555d7)\n\
    \t/tmp/tmpphyuu_n5_test.go:26 +0x4f fp=0xc0201e0438 sp=0xc0201e0420 pc=0x4ef6af\n\
    command-line-arguments_test.special_factorial(0xfffffffffd5555d9)\n\t/tmp/tmpphyuu_n5_test.go:26\
    \ +0x4f fp=0xc0201e0450 sp=0xc0201e0438 pc=0x4ef6af\ncommand-line-arguments_test.special_factorial(0xfffffffffd5555db)\n\
    \t/tmp/tmpphyuu_n5_test.go:26 +0x4f fp=0xc0201e0468 sp=0xc0201e0450 pc=0x4ef6af\n\
    command-line-arguments_test.special_factorial(0xfffffffffd5555dd)\n\t/tmp/tmpphyuu_n5_test.go:26\
    \ +0x4f fp=0xc0201e0480 sp=0xc0201e0468 pc=0x4ef6af\ncommand-line-arguments_test.special_factorial(0xfffffffffd5555df)\n\
    \t/tmp/tmpphyuu_n5_test.go:26 +0x4f fp=0xc0201e0498 sp=0xc02"
  timestamp: 1660073817
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    result := 1\n    for i := n; i > 0; i-- {\n        result = result * i\n\
    \    }\n    return result\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n \
    \ candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual:\
    \ candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpy4hic_mw_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpy4hic_mw_test.go:40:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpy4hic_mw_test.go:40: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073815
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n <= 1 {\n        return 1\n    } else {\n        return n * special_factorial(n\
    \ - 1)\n    }\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate :=\
    \ special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7),\
    \ expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpdype5j4i_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpdype5j4i_test.go:40:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpdype5j4i_test.go:40: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073816
- exit_code: 2
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    result := 1\n    factorial := factorial2(n)\n    for i := 1; i <= n; i++\
    \ {\n        result *= factorial\n    }\n    return result\n}\n\nfunc TestSpecial_Factorial(t\
    \ *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected:\
    \ 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual:\
    \ candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjjk2owmb_test.go:18:18: undefined: factorial2

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073816
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    factorial := 1\n    for i := 0; i < n; i++ {\n        factorial *= i\n  \
    \  }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n\
    \  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual:\
    \ candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmps_yf01pd_test.go:40: expected '%!s(int=288)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmps_yf01pd_test.go:40:\
    \ expected '%!s(int=34560)', got '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmps_yf01pd_test.go:40: expected '%!s(int=125411328000)', got\
    \ '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__3 (0.00s)\n    \
    \    tmps_yf01pd_test.go:40: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073816
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    result := 1\n    for i := 1; i <= n; i++ {\n        result *= i\n    }\n\n\
    \    return result\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate\
    \ := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7),\
    \ expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp5f0hb8p7_test.go:41: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp5f0hb8p7_test.go:41:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp5f0hb8p7_test.go:41: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073816
- exit_code: 2
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 1 {\n        return 1\n    }\n\n    product = 1\n\n    for i := 1;\
    \ i <= n; i++ {\n        product *= i\n    }\n\n    return product\n}\n\nfunc\
    \ TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6jflt0fm_test.go:21:5: undefined: product

    /tmp/tmp6jflt0fm_test.go:24:9: undefined: product

    /tmp/tmp6jflt0fm_test.go:27:12: undefined: product

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073816
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    result := 1\n    for i := 1; i <= n; i++ {\n        result = result * i\n\
    \    }\n    return result\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n \
    \ candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual:\
    \ candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpj_36q4qu_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpj_36q4qu_test.go:40:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpj_36q4qu_test.go:40: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073816
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n <= 1 {\n        return 1\n    }\n\n    return n*special_factorial(n\
    \ - 1)*special_factorial(n - 2)\n}\n\nfunc TestSpecial_Factorial(t *testing.T)\
    \ {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual:\
    \ candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpqblk9_yx_test.go:40: expected '%!s(int=288)', got '%!s(int=48)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpqblk9_yx_test.go:40:\
    \ expected '%!s(int=34560)', got '%!s(int=1440)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpqblk9_yx_test.go:40: expected '%!s(int=125411328000)', got\
    \ '%!s(int=4180377600)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073816
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n\
    \    }\n    if n == 3 {\n        return 6\n    }\n    if n == 4 {\n        return\
    \ 24\n    }\n\n    brazilian_factorial := 0\n    for i := 4; i <= n; i++ {\n \
    \       brazilian_factorial = brazilian_factorial*(i-1)\n        brazilian_factorial\
    \ = brazilian_factorial*(i-2)\n    }\n    return brazilian_factorial\n}\n\nfunc\
    \ TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpbnxupgmf_test.go:54: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpbnxupgmf_test.go:54:\
    \ expected '%!s(int=34560)', got '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpbnxupgmf_test.go:54: expected '%!s(int=125411328000)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073816
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    ans := 1\n    for i := 2; i <=\
    \ n; i++ {\n        ans *= i\n    }\n    return ans\n}\n\nfunc TestSpecial_Factorial(t\
    \ *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected:\
    \ 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual:\
    \ candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpvqil8vyc_test.go:43: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpvqil8vyc_test.go:43:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpvqil8vyc_test.go:43: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073816
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n<1 {\n        return 0\n    }\n    if n==1 {\n        return 1\n    }\n\
    \    return n*special_factorial(n-1)\n}\nfunc TestSpecial_Factorial(t *testing.T)\
    \ {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual:\
    \ candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpa0fld7vk_test.go:41: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpa0fld7vk_test.go:41:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpa0fld7vk_test.go:41: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073816
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    // Return the factorial of the given integer.\n    if n == 1 {\n        return\
    \ 1\n    } else {\n        return n * special_factorial(n-1)\n    }\n}\n\nfunc\
    \ TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcnfu49mp_test.go:41: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcnfu49mp_test.go:41:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcnfu49mp_test.go:41: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073816
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    result := 1\n\n    for i := 1; i <= n; i++ {\n        result = result * (i\
    \ - 1) * i\n    }\n\n    return result\n}\n\nfunc TestSpecial_Factorial(t *testing.T)\
    \ {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual:\
    \ candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpnv92fc9u_test.go:42: expected '%!s(int=288)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpnv92fc9u_test.go:42:\
    \ expected '%!s(int=34560)', got '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpnv92fc9u_test.go:42: expected '%!s(int=125411328000)', got\
    \ '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__3 (0.00s)\n    \
    \    tmpnv92fc9u_test.go:42: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073816
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n < 0 {\n        fmt.Println(\"The factorial is undefined for negative\
    \ input!\")\n        return 0\n    }\n    if n == 0 {\n        return 1\n    }\n\
    \n    acc := 1\n    for i := 1; i <= n; i++ {\n        acc *= i\n    }\n\n   \
    \ return acc\n}\n</code>\n<|/ a tags=go |>\n<| a tags=go dscore=4 |>\nHere is\
    \ a solution without recursion. It uses the fact that product of 0 and 1 is equal\
    \ to 1.\n<code>\npackage main\n\nimport (\n    \"fmt\"\n)\n\nfunc TestSpecial_Factorial(t\
    \ *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected:\
    \ 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual:\
    \ candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp83vv_k6y_test.go:32:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073816
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n <= 1 {\n        return 1\n    }\n    return n * special_factorial(n-1)\n\
    }\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpyybi0p5k_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpyybi0p5k_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpyybi0p5k_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    factorial := 1\n    for i := 2; i <= n; i++ {\n        factorial *= i\n \
    \   }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n\
    \  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual:\
    \ candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp8e7yyv30_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp8e7yyv30_test.go:40:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp8e7yyv30_test.go:40: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073816
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    product := 1\n    for i := 1; i <= n; i++ {\n        product *= i\n    }\n\
    \    return product\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate\
    \ := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7),\
    \ expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpncjw2mxh_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpncjw2mxh_test.go:40:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpncjw2mxh_test.go:40: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073816
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n \
    \   }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n\
    \  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual:\
    \ candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp0j766yjf_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp0j766yjf_test.go:40:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp0j766yjf_test.go:40: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073652
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    brazilianFactorial := 1\n    for i := n; i > 0; i-- {\n        brazilianFactorial\
    \ *= i\n    }\n\n    return brazilianFactorial\n}\n\nfunc TestSpecial_Factorial(t\
    \ *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected:\
    \ 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual:\
    \ candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpap1t25b1_test.go:41: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpap1t25b1_test.go:41:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpap1t25b1_test.go:41: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073816
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    switch {\n    case n <= 1:\n        return 1\n    case n % 2 == 0: // Odd\
    \ number\n        return special_factorial(n / 2)\n    default: // Even number\n\
    \        return n*special_factorial(n - 1)\n    }\n}\n\nfunc TestSpecial_Factorial(t\
    \ *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected:\
    \ 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual:\
    \ candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmps9cpn6ww_test.go:43: expected '%!s(int=288)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmps9cpn6ww_test.go:43:\
    \ expected '%!s(int=34560)', got '%!s(int=5)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmps9cpn6ww_test.go:43: expected '%!s(int=125411328000)', got\
    \ '%!s(int=21)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073816
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n\n    return n * special_factorial(n-1)\n\
    }\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp_yw5mllj_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp_yw5mllj_test.go:40:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp_yw5mllj_test.go:40: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073816
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 1 {\n        return 1\n    }\n    result := 1\n    for i := 2; i\
    \ <= n; i++ {\n        result *= i\n    }\n    return result\n}\n\nfunc TestSpecial_Factorial(t\
    \ *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected:\
    \ 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual:\
    \ candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp_ot8wzq4_test.go:43: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp_ot8wzq4_test.go:43:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp_ot8wzq4_test.go:43: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    result := 1\n\n    if n <= 1 {\n        return result\n    }\n\n    for i\
    \ := 1; i <= n; i++ {\n        result *= i\n    }\n\n    return result\n}\n\n\
    func TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp6bxx38fb_test.go:46: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp6bxx38fb_test.go:46:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp6bxx38fb_test.go:46: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073816
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    result := 1\n    for number := 2; number < n; number++ {\n        result\
    \ *= number\n    }\n    return result\n}\n\nfunc TestSpecial_Factorial(t *testing.T)\
    \ {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual:\
    \ candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp0ak_0f3h_test.go:40: expected '%!s(int=288)', got '%!s(int=6)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp0ak_0f3h_test.go:40:\
    \ expected '%!s(int=34560)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp0ak_0f3h_test.go:40: expected '%!s(int=125411328000)', got\
    \ '%!s(int=720)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073817
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    f := 1\n    for i := 1; i <= n;\
    \ i++ {\n        f*=i\n    }\n    return f\n}\n\nfunc TestSpecial_Factorial(t\
    \ *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected:\
    \ 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual:\
    \ candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpytfoh_iw_test.go:43: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpytfoh_iw_test.go:43:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpytfoh_iw_test.go:43: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073817
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n < 2 {\n        return 1\n    }\n    acc := 1\n    for i := 0; i < n;\
    \ i++ {\n        acc *= i + 1\n    }\n    return acc\n}\n\nfunc TestSpecial_Factorial(t\
    \ *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected:\
    \ 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual:\
    \ candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpin0t5iak_test.go:43: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpin0t5iak_test.go:43:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpin0t5iak_test.go:43: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073817
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    // Initialize factorial variable\n    factorial := 1\n\n    // If n is equal\
    \ to 0\n    if n == 0 {\n        return 0\n    }\n\n    // Iterate over loop until\
    \ factorial is equal to n\n    for i := 1; i <= n; i++ {\n        factorial *=\
    \ i\n    }\n\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T)\
    \ {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual:\
    \ candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmptr6qh3_m_test.go:49: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmptr6qh3_m_test.go:49:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmptr6qh3_m_test.go:49: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073817
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n \
    \   }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n\
    \  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual:\
    \ candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp0j766yjf_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp0j766yjf_test.go:40:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp0j766yjf_test.go:40: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073652
- exit_code: 2
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    return factorial(n) * (n - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T)\
    \ {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual:\
    \ candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr6x194qd_test.go:17:12: undefined: factorial

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073817
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n < 0 {\n        n =  0\n    }\n\n    factorial := 1\n    for i := 0;\
    \ i < n; i++ {\n        factorial *= i\n    }\n\n    return factorial\n}\n\nfunc\
    \ TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpzgj0ny_4_test.go:45: expected '%!s(int=288)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpzgj0ny_4_test.go:45:\
    \ expected '%!s(int=34560)', got '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpzgj0ny_4_test.go:45: expected '%!s(int=125411328000)', got\
    \ '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__3 (0.00s)\n    \
    \    tmpzgj0ny_4_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073818
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    result := 1\n\n    for i := 0; i < n; i++ {\n        result *= i\n    }\n\
    \n    return result\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate\
    \ := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7),\
    \ expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp1vvzc9c2_test.go:42: expected '%!s(int=288)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp1vvzc9c2_test.go:42:\
    \ expected '%!s(int=34560)', got '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp1vvzc9c2_test.go:42: expected '%!s(int=125411328000)', got\
    \ '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__3 (0.00s)\n    \
    \    tmp1vvzc9c2_test.go:42: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073818
- exit_code: 2
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    switch {\n    case n == 1:\n        return 1\n    case n == 2:\n        return\
    \ 2\n    case n == 3:\n        return 6\n    case n < 3:\n        return special_factorial(n\
    \ - 1)*special_factorial(n - 2)*special_factorial(n - 3)\n    }\n}\n\nfunc TestSpecial_Factorial(t\
    \ *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected:\
    \ 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual:\
    \ candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2cnruya2_test.go:27:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073818
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 1 {\n        return 1\n    }\n    if n == 0 {\n        return 0\n\
    \    }\n    return n * special_factorial(n - 1)\n}\n\nfunc TestSpecial_Factorial(t\
    \ *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected:\
    \ 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual:\
    \ candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp0jxdd7rt_test.go:42: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp0jxdd7rt_test.go:42:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp0jxdd7rt_test.go:42: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * (special_factorial(n\
    \ - 1) + special_factorial(n - 2))\n}\n\nfunc TestSpecial_Factorial(t *testing.T)\
    \ {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual:\
    \ candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0390\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f368?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.special_factorial(0xffffffffff00002d)\n\
    \t/tmp/tmpjj5xhzms_test.go:16 +0x74 fp=0xc0201e03a0 sp=0xc0201e0398 pc=0x4ef6d4\n\
    command-line-arguments_test.special_factorial(0xffffffffff00002e)\n\t/tmp/tmpjj5xhzms_test.go:20\
    \ +0x39 fp=0xc0201e03c0 sp=0xc0201e03a0 pc=0x4ef699\ncommand-line-arguments_test.special_factorial(0xffffffffff00002f)\n\
    \t/tmp/tmpjj5xhzms_test.go:20 +0x39 fp=0xc0201e03e0 sp=0xc0201e03c0 pc=0x4ef699\n\
    command-line-arguments_test.special_factorial(0xffffffffff000030)\n\t/tmp/tmpjj5xhzms_test.go:20\
    \ +0x39 fp=0xc0201e0400 sp=0xc0201e03e0 pc=0x4ef699\ncommand-line-arguments_test.special_factorial(0xffffffffff000031)\n\
    \t/tmp/tmpjj5xhzms_test.go:20 +0x39 fp=0xc0201e0420 sp=0xc0201e0400 pc=0x4ef699\n\
    command-line-arguments_test.special_factorial(0xffffffffff000032)\n\t/tmp/tmpjj5xhzms_test.go:20\
    \ +0x39 fp=0xc0201e0440 sp=0xc0201e0420 pc=0x4ef699\ncommand-line-arguments_test.special_factorial(0xffffffffff000033)\n\
    \t/tmp/tmpjj5xhzms_test.go:20 +0x39 fp=0xc0201e0460 sp=0xc0201e0440 pc=0x4ef699\n\
    command-line-arguments_test.special_factorial(0xffffffffff000034)\n\t/tmp/tmpjj5xhzms_test.go:20\
    \ +0x39 fp=0xc0201e0480 sp=0xc0201e0460 pc=0x4ef699\ncommand-line-arguments_test.special_factorial(0xffffffffff000035)\n\
    \t/tmp/tmpjj5xhzms_test.go:20 +0x39 fp=0xc0201e04a0 sp=0xc0201e0480 pc=0x4ef699\n\
    command-line-arguments_test.special_factorial(0xffffffffff000036)\n\t/tmp/tmpjj5xhzms_test.go:20\
    \ +0x39 fp=0xc0201e04c0 sp=0xc0201e04a0 pc=0x4ef699\ncommand-line-arguments_test.special_factorial(0xffffffffff000037)\n\
    \t/tmp/tmpjj5xhzms_test.go:20 +0x39 fp=0xc0201e04e0 sp=0xc020"
  timestamp: 1660073819
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    // Start with the factorial of the number\n    // multiplied by one (since\
    \ factorial of 1 is 1).\n    // The factorial of 1 is 1.\n    var result int =\
    \ 1\n\n    // We need to keep looping while the\n    // current result and n are\
    \ not equal\n    // or we reach the nth factorial\n    // of the number (where\
    \ n > 1).\n    // While n > 1, multiply each number\n    // by n and then divide\
    \ by n\n    // to get our result. n! can be written\n    // as (n!)!. For example,\n\
    \    // if n = 4, then n! is 4 * 3 * 2 * 1.\n    // The last number will be 1.\n\
    \    for n > 1 {\n        result = result * n\n        n = n / n\n    }\n    return\
    \ result\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp_p1bx2gv_test.go:55: expected '%!s(int=288)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp_p1bx2gv_test.go:55:\
    \ expected '%!s(int=34560)', got '%!s(int=5)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp_p1bx2gv_test.go:55: expected '%!s(int=125411328000)', got\
    \ '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073819
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n <= 0 {\n        fmt.Println(\"Error!\", n, \"is not positive!\")\n \
    \       return 1\n    }\n    if n == 1 {\n        return n\n    }\n    return\
    \ n*special_factorial(n-1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n\
    \  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual:\
    \ candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpka1gv2qm_test.go:43: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpka1gv2qm_test.go:43:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpka1gv2qm_test.go:43: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073819
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n==1 {\n        return 1\n    }\n    result := 1\n    for i := 1; i <=\
    \ n; i++ {\n        result *= i\n    }\n    return result\n}\n\nfunc TestSpecial_Factorial(t\
    \ *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected:\
    \ 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual:\
    \ candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpdeporlai_test.go:43: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpdeporlai_test.go:43:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpdeporlai_test.go:43: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073819
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n*special_factorial(n-1)\n\
    }\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpsi41la0e_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpsi41la0e_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpsi41la0e_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073819
- exit_code: 2
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    result := 1\n    i := 1\n    switch {\n    case n < 0:\n        fmt.Println(\"\
    n must be positive\")\n    case n <= 1:\n        fmt.Println(\"n must be positive\"\
    )\n    case n == 2:\n        fmt.Println(\"n must be positive\")\n    case n >\
    \ 2:\n        i := 0\n        for i <= n {\n            result = result * (n -\
    \ i) * i\n            i++\n        }\n    }\n    return result\n}\n\nfunc TestSpecial_Factorial(t\
    \ *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected:\
    \ 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual:\
    \ candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjfrxjewy_test.go:18:5: i declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073818
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    result := 1\n    for i := 1; i <= n; i++ {\n        result *= i\n    }\n\
    \    return result\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate\
    \ := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7),\
    \ expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpp0r0rc0e_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpp0r0rc0e_test.go:40:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpp0r0rc0e_test.go:40: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    result := 1\n    for i := 1; i <= n; i++ {\n        result *= i\n    }\n\
    \    return result\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate\
    \ := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7),\
    \ expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpp0r0rc0e_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpp0r0rc0e_test.go:40:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpp0r0rc0e_test.go:40: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    // If n is 1, return 1.\n    if n == 1 {\n        return n\n    }\n\n   \
    \ // If n is 2, return 2.\n    if n == 2 {\n        return 2\n    }\n\n    //\
    \ Calculate the factorial of n-2, then n-3, then n-4, etc.\n    result := special_factorial(n\
    \ - 1) * special_factorial(n - 2) * special_factorial(n - 3)\n    // Return the\
    \ factorial.\n    return result\n}\n\nfunc TestSpecial_Factorial(t *testing.T)\
    \ {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual:\
    \ candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160398\
    \ stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f368?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 18 [running]:\ncommand-line-arguments_test.special_factorial(0xffffffffff333357?)\n\
    \t/tmp/tmpk4j0_apl_test.go:16 +0xa5 fp=0xc0201603a8 sp=0xc0201603a0 pc=0x4ef705\n\
    command-line-arguments_test.special_factorial(0xffffffffff333358)\n\t/tmp/tmpk4j0_apl_test.go:28\
    \ +0x46 fp=0xc0201603d0 sp=0xc0201603a8 pc=0x4ef6a6\ncommand-line-arguments_test.special_factorial(0xffffffffff333359)\n\
    \t/tmp/tmpk4j0_apl_test.go:28 +0x46 fp=0xc0201603f8 sp=0xc0201603d0 pc=0x4ef6a6\n\
    command-line-arguments_test.special_factorial(0xffffffffff33335a)\n\t/tmp/tmpk4j0_apl_test.go:28\
    \ +0x46 fp=0xc020160420 sp=0xc0201603f8 pc=0x4ef6a6\ncommand-line-arguments_test.special_factorial(0xffffffffff33335b)\n\
    \t/tmp/tmpk4j0_apl_test.go:28 +0x46 fp=0xc020160448 sp=0xc020160420 pc=0x4ef6a6\n\
    command-line-arguments_test.special_factorial(0xffffffffff33335c)\n\t/tmp/tmpk4j0_apl_test.go:28\
    \ +0x46 fp=0xc020160470 sp=0xc020160448 pc=0x4ef6a6\ncommand-line-arguments_test.special_factorial(0xffffffffff33335d)\n\
    \t/tmp/tmpk4j0_apl_test.go:28 +0x46 fp=0xc020160498 sp=0xc020160470 pc=0x4ef6a6\n\
    command-line-arguments_test.special_factorial(0xffffffffff33335e)\n\t/tmp/tmpk4j0_apl_test.go:28\
    \ +0x46 fp=0xc0201604c0 sp=0xc020160498 pc=0x4ef6a6\ncommand-line-arguments_test.special_factorial(0xffffffffff33335f)\n\
    \t/tmp/tmpk4j0_apl_test.go:28 +0x46 fp=0xc0201604e8 sp=0xc0201604c0 pc=0x4ef6a6\n\
    command-line-arguments_test.special_factorial(0xffffffffff333360)\n\t/tmp/tmpk4j0_apl_test.go:28\
    \ +0x46 fp=0xc020160510 sp=0xc0201604e8 pc=0x4ef6a6\ncommand-line-arguments_test.special_factorial(0xffffffffff333361)\n\
    \t/tmp/tmpk4j0_apl_test.go:28 +0x46 fp=0xc020160538 sp=0xc0"
  timestamp: 1660073820
- exit_code: 2
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n <= 0 {\n        return 0 // No factorial for negative numbers\n    }\n\
    \    return brazilian_factorial(n)\n}\n\nfunc TestSpecial_Factorial(t *testing.T)\
    \ {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual:\
    \ candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_b2e9xsn_test.go:20:12: undefined: brazilian_factorial

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073818
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n==0 {\n        return 1\n    }\n    result := special_factorial(n-1)\n\
    \    result *= n\n    return result\n}\nfunc TestSpecial_Factorial(t *testing.T)\
    \ {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual:\
    \ candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpg62cujen_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpg62cujen_test.go:40:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpg62cujen_test.go:40: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073819
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n*special_factorial(n-1)\n\
    }\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpsi41la0e_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpsi41la0e_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpsi41la0e_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073819
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    var result int\n    if n == 0 {\n        return 1\n    }\n    for i := 0;\
    \ i < n; i++ {\n        result = result * i\n    }\n    return result\n}\n</code>\n\
    Then I used the go tool called \"go test\" to run all the test cases:\n<code>\n\
    go test special_factorial_test.go factorial_test.go factorial_test.go factorial_test.go\
    \ factorial_test.go factorial_test.go factorial_test.go factorial_test.go factorial_test.go\
    \ factorial_test.go factorial_test.go factorial_test.go factorial_test.go factorial_test.go\
    \ factorial_test.go factorial_test.go factorial_test.go factorial_test.go factorial_test.go\
    \ factorial_test.go factorial_test.go factorial_test.go factorial_test.go factorial_test.go\
    \ factorial_test.go factorial_test.go factorial_test.go factorial_test.go factorial_test.go\
    \ factorial_test.go factorial_test.go factorial_test.go factorial_test.go factorial_test.go\
    \ factorial_test.go factorial_test.go factorial_test.go factorial_test.go factorial_test.go\
    \ factorial_test.go factorial_test.go factorial_test.go factorial_test.go factorial_test.go\
    \ factorial_test.go factorial_test.go factorial_test.go factorial_test.go factorial_test.go\
    \ factorial_test.go factorial_test.go factorial_test.go factorial_test.go factorial_test.go\
    \ factorial_test.go factorial_test.go factorial_test.go factorial_test.go factorial_test.go\
    \ factorial_test.go factorial_test.go factorial_test.go factorial_test.go factorial_test.go\
    \ factorial_test.go factorial_test.go factorial_test.go factorial_test.go factorial_test.go\
    \ factorial_test.go factorial_test.go factorial_test.go factorial_test.go factorial_test.go\
    \ factorial_test.go factorial_test.go factorial_test.go factorial_test.go factorial_test.go\
    \ factorial_test.go factorial_test.go factorial_test.go factorial_test.go factorial_test.go\
    \ factorial_test.go factorial_test.go factorial_test.go factorial_test.go factorial_test.go\
    \ factorial_test.go factorial_test.go factorial_test.go factorial_test.go factorial_test.go\
    \ factorial_test.go factorial_test.go factorial_test.go factorial_test.go factorial_test.go\
    \ factorial_test.go factorial_test.go factorial_test.go factorial_test.go factorial_test.go\
    \ factorial_test.go factorial_test.go factorial_test.go factorial_test.go factorial_test.go\
    \ factorial_test.go factorial_test.go factorial_test.go factorial_test.go factorial_test.\n\
    func TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpb9utkyt0_test.go:26:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073818
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n <= 1 {\n        return 1\n    }\n    return n*special_factorial(n-1)\n\
    }\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpio3lg9w3_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpio3lg9w3_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpio3lg9w3_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n <= 0 {\n        return 0\n    }\n    return n * special_factorial(n-1)\n\
    }\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp4zb7slkz_test.go:39: expected '%!s(int=288)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp4zb7slkz_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp4zb7slkz_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__3 (0.00s)\n    \
    \    tmp4zb7slkz_test.go:39: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073819
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n < 2 {\n        return 1\n    }\n\n    brazilian_factorial := 1\n\n \
    \   for i := 1; i <= n; i++ {\n        brazilian_factorial *= i\n    }\n\n   \
    \ return brazilian_factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n\
    \  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual:\
    \ candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp3o581r4f_test.go:46: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp3o581r4f_test.go:46:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp3o581r4f_test.go:46: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073819
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n*special_factorial(n-1)\n\
    }\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpsi41la0e_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpsi41la0e_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpsi41la0e_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073819
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n-1)\n\
    }\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpr8z0bdpr_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpr8z0bdpr_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpr8z0bdpr_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073819
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n <= 1 {\n        return 1\n    } else {\n        return (n * special_factorial(n\
    \ - 1)) * special_factorial(n - 2)\n    }\n}\n\nfunc TestSpecial_Factorial(t *testing.T)\
    \ {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual:\
    \ candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp5s8vh5_v_test.go:40: expected '%!s(int=288)', got '%!s(int=48)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp5s8vh5_v_test.go:40:\
    \ expected '%!s(int=34560)', got '%!s(int=1440)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp5s8vh5_v_test.go:40: expected '%!s(int=125411328000)', got\
    \ '%!s(int=4180377600)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073819
- exit_code: 2
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n < 0 {\n        fmt.Println(\"n is less than zero\")\n    }\n    factorial\
    \ = 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return\
    \ factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbblekfik_test.go:20:5: undefined: factorial

    /tmp/tmpbblekfik_test.go:22:9: undefined: factorial

    /tmp/tmpbblekfik_test.go:24:12: undefined: factorial

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073819
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    result := 1\n    for i := 1; i <= n; i++ {\n        result *= i\n    }\n\
    \    return result\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate\
    \ := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7),\
    \ expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpp0r0rc0e_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpp0r0rc0e_test.go:40:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpp0r0rc0e_test.go:40: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 1 {\n        return n\n    }\n    f := 1\n    for i := 1; i <= n;\
    \ i++ {\n        f = f*i\n    }\n    return f\n}\n\nfunc TestSpecial_Factorial(t\
    \ *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected:\
    \ 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual:\
    \ candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp1yzdh4sf_test.go:43: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp1yzdh4sf_test.go:43:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp1yzdh4sf_test.go:43: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073819
- exit_code: 2
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n < 1 {\n        return 0\n    }\n    result := factorial(n)\n    return\
    \ result\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpza22dsbd_test.go:20:15: undefined: factorial

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073819
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    switch {\n    case n < 2:\n        return 1\n    case n == 2:\n        return\
    \ 1\n    case n % 2 == 1:\n        return n*special_factorial(n - 1)\n    default:\n\
    \        return n*special_factorial(n - 1)*(n - 2)\n    }\n}\n\nfunc TestSpecial_Factorial(t\
    \ *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected:\
    \ 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual:\
    \ candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpd1ao7ry8_test.go:45: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpd1ao7ry8_test.go:45:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpd1ao7ry8_test.go:45: expected '%!s(int=125411328000)', got\
    \ '%!s(int=20160)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073819
- exit_code: 2
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n <= 0 {\n        return 0\n    }\n\n    return factorial(n) * factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3xuc9h2n_test.go:21:12: undefined: factorial

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073819
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n <= 1 {\n        return 1\n    }\n\n    return n * (special_factorial(n-1))\n\
    }\n</code>\n<|/ a dscore=1 tags=recursion,factorial,c#,algorithm |>\n<| c |>\n\
    Ah yes, this seems to be the same thing I posted before - sorry guys, I should\
    \ probably have read your post more closely.\n<|/ c |>\n<| c |>\n, sorry guys,\
    \ I didn't mean to write this post - I meant this comment on the other question\
    \ :)\n<|/ c |>\n<| a tags=recursion,factorial,c#,algorithm |>\nThe following code\
    \ in C#:\n<code>\nstatic IEnumerable<int> Factorial(int n)\n{\n    while (n >=\
    \ 2)\n    {\n        yield return n;\n        n--;\n    }\n    yield return 1;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a tags=recursion,factorial,c#,algorithm |>\n\
    If you don't want to use the yield keyword you can do the following:\n<code>\n\
    private static int factRecursive(int n, int factorial = 0)\n{\n    if (n < 2)\n\
    \    {\n        return factorial;\n    }\n\n    return factorialRecursive(n-1,\
    \ factorial*(n-1));\n}\n\nprivate static int factorialRecursive(int n, int factorial)\n\
    {\n    if (n < 2)\n    {\n        return factorial;\n    }\n\n    return factorialRecursive(n-1,\
    \ factorial);\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nNice recursive implementation\
    \ to calculate factorial.  I like it.\n<|/ c |>\n<| a dscore=1 |>\n<code>\n public\
    \ class Factorial\n    {\n        public static void Main()\n        {\n     \
    \       int a = 5;\n            int b = 0;\n            int c = 1;\n         \
    \   int d = 1;\n\n            Console.WriteLine((b + d) * c);\n\n            do\n\
    \            {\n                b = b * a + d;\n                d = c * a + d;\n\
    \                c = a;\n                a = b;\n            }\n            while\
    \ (a != 1);\n        }\n    }\n</code>\n<|/ a tags=recursion,factorial,c#,algorithm\
    \ |>\n<| a dscore=0 |>\n<code>\nint factorial(int n)\n{\nif (n <= 1)\n{\n    return\
    \ 1;\n}\n\nreturn (n * factorial(n-1));\n}\n</code>\n<|/ a tags=recursion,factorial,c#,algorithm\
    \ |>\n<| a dscore=0 tags=recursion,factorial,c#,algorithm |>\nfunc TestSpecial_Factorial(t\
    \ *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected:\
    \ 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual:\
    \ candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpj7wsstpj_test.go:23:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073819
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    var result int = 1\n    for i := 1; i <= n; i++ {\n        result *= i\n\
    \    }\n    return result\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n \
    \ candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual:\
    \ candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp1eq0hcae_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp1eq0hcae_test.go:40:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp1eq0hcae_test.go:40: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073820
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 1 {\n        return 1\n    }\n    switch {\n    case n%2 != 0:\n\
    \        return n*special_factorial(n-1)\n    case n == 2:\n        return 1\n\
    \    default:\n        return (n*special_factorial(n-1))*(special_factorial(n-2))\n\
    \    }\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp5gx1hgz1_test.go:46: expected '%!s(int=288)', got '%!s(int=12)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp5gx1hgz1_test.go:46:\
    \ expected '%!s(int=34560)', got '%!s(int=60)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp5gx1hgz1_test.go:46: expected '%!s(int=125411328000)', got\
    \ '%!s(int=30240)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073820
- exit_code: 2
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n<1 {\n        fmt.Println(\"Error: n must be > 0\")\n        return -1\n\
    \    }\n    return factorial(n)*factorial(n-1)\n}\n\nfunc TestSpecial_Factorial(t\
    \ *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected:\
    \ 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual:\
    \ candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz7a3qj6z_test.go:21:12: undefined: factorial

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073820
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n\n    factorial := 1\n\n    for i :=\
    \ 1; i <= n; i++ {\n        factorial *= i\n    }\n\n    return factorial\n}\n\
    \nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmppi3_ts13_test.go:46: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmppi3_ts13_test.go:46:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmppi3_ts13_test.go:46: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073820
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n < 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n\
    \    }\n    if n == 2 {\n        return 2\n    }\n\n    result := special_factorial(n\
    \ - 1)\n    return result * n\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n\
    \  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual:\
    \ candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpla0d1u27_test.go:47: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpla0d1u27_test.go:47:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpla0d1u27_test.go:47: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073821
- exit_code: 2
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n < 0 {\n        exitWithError(errBadParameter, \"Bad parameter: n must\
    \ be positive\")\n    }\n    return factorial(n) * special_factorial(n - 1)\n\
    }\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp716oqdgf_test.go:18:9: undefined: exitWithError

    /tmp/tmp716oqdgf_test.go:18:23: undefined: errBadParameter

    /tmp/tmp716oqdgf_test.go:20:12: undefined: factorial

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073820
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n < 1 {\n        return 0\n    }\n\n    var result int = 1\n    for i\
    \ := 1; i <= n; i++ {\n        result *= i\n    }\n    return result\n}\n\nfunc\
    \ TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp73an_ehd_test.go:44: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp73an_ehd_test.go:44:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp73an_ehd_test.go:44: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073821
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    var factorial int = 1\n\n    for i := 1; i <= n; i++ {\n        factorial\
    \ *= i\n    }\n\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T)\
    \ {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual:\
    \ candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpy2juq7u9_test.go:42: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpy2juq7u9_test.go:42:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpy2juq7u9_test.go:42: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073821
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n < 1 {\n        fmt.Printf(\"the given number should be greater than\
    \ 0\\n\")\n        return 0\n    }\n    ret := n\n    for i := 1; i <= n; i++\
    \ {\n        ret *= i\n    }\n    return ret\n}\n</code>\n<|/ a dscore=3 tags=factorial,go\
    \ |>\n<| c |>\nYour factorial implementation will overflow when n is very large.\
    \  Use a type with larger width for n.\n<|/ c |>\n<| c |>\nYeah, this is very\
    \ bad practice. Factorial function should return an int32 or int64 not an int.\
    \ Just a matter of personal preference but I'm not a big fan of using types that\
    \ have an obvious fixed width.\n<|/ c |>\n<| a tags=factorial,go |>\nJust to put\
    \ my two cents in here for those who are looking for a simple solution without\
    \ recursion and without using any external packages.\n<code>\npackage main\n\n\
    import \"fmt\"\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpyfx81vsx_test.go:27:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073820
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n < 1 {\n        fmt.Println(\"Error: n must be positive.\")\n       \
    \ return -1\n    }\n    factorial := 1\n    for i := 1; i <= n; i++ {\n      \
    \  factorial *= i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t\
    \ *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected:\
    \ 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual:\
    \ candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp5ec5arm2_test.go:44: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp5ec5arm2_test.go:44:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp5ec5arm2_test.go:44: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073821
- exit_code: 2
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    factorial := 1\n    for i >= 0 {\n        factorial *= i\n        i--\n \
    \   }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n\
    \  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual:\
    \ candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbdp33h7b_test.go:18:9: undefined: i

    /tmp/tmpbdp33h7b_test.go:19:22: undefined: i

    /tmp/tmpbdp33h7b_test.go:20:9: undefined: i

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073821
- exit_code: 2
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return factorial(n) * special_factorial(n-1)\n\
    }\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpceqd_tzt_test.go:20:12: undefined: factorial

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073821
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    switch n {\n    case 1:\n        return 1\n    case 2:\n        return 2\n\
    \    case 3:\n        return 6\n    case 4:\n        return 24\n    default:\n\
    \        return special_factorial(n-1) * special_factorial(n-2) * special_factorial(n-3)\n\
    \    }\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpulf4bqic_test.go:47: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpulf4bqic_test.go:47:\
    \ expected '%!s(int=34560)', got '%!s(int=288)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpulf4bqic_test.go:47: expected '%!s(int=125411328000)', got\
    \ '%!s(int=286654464)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073821
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n <= 0 {\n        return 0\n    }\n    result := 1\n    for i := 1; i\
    \ <= n; i++ {\n        result *= i\n    }\n    return result\n}\n\nfunc TestSpecial_Factorial(t\
    \ *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected:\
    \ 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual:\
    \ candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp3ztkup5i_test.go:43: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp3ztkup5i_test.go:43:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp3ztkup5i_test.go:43: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    brazilian_factorial := 1\n    for i := 1; i <= n; i++ {\n        brazilian_factorial\
    \ *= i\n    }\n    return brazilian_factorial\n}\n\nfunc TestSpecial_Factorial(t\
    \ *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected:\
    \ 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual:\
    \ candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmptrc3a_i6_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmptrc3a_i6_test.go:40:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmptrc3a_i6_test.go:40: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073821
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    factorial := 0\n    for i := n; i > 0; i-- {\n        factorial *= i\n  \
    \  }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n\
    \  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual:\
    \ candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpl6aw3jek_test.go:40: expected '%!s(int=288)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpl6aw3jek_test.go:40:\
    \ expected '%!s(int=34560)', got '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpl6aw3jek_test.go:40: expected '%!s(int=125411328000)', got\
    \ '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__3 (0.00s)\n    \
    \    tmpl6aw3jek_test.go:40: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073821
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    f := 1\n    for i := 0; i < n; i++ {\n        f *= i\n    }\n    return f\n\
    }\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp_iqqa7bd_test.go:40: expected '%!s(int=288)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp_iqqa7bd_test.go:40:\
    \ expected '%!s(int=34560)', got '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp_iqqa7bd_test.go:40: expected '%!s(int=125411328000)', got\
    \ '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__3 (0.00s)\n    \
    \    tmp_iqqa7bd_test.go:40: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073821
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n\n    result := 1\n    for i := 1;\
    \ i <= n; i++ {\n        result = result * i\n    }\n    return result\n}\n\n\
    func TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp2t7zjdtv_test.go:44: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp2t7zjdtv_test.go:44:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp2t7zjdtv_test.go:44: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073821
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n <= 0 {\n        return 0\n    }\n    result := 1\n    for i := 1; i\
    \ <= n; i++ {\n        result *= i\n    }\n    return result\n}\n\nfunc TestSpecial_Factorial(t\
    \ *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected:\
    \ 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual:\
    \ candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp3ztkup5i_test.go:43: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp3ztkup5i_test.go:43:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp3ztkup5i_test.go:43: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    i := 1\n    for i := 1; i <= n;\
    \ i++ {\n        i *= n\n    }\n    return i\n}\n\nfunc TestSpecial_Factorial(t\
    \ *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected:\
    \ 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual:\
    \ candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp3nmrqjvc_test.go:43: expected '%!s(int=288)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp3nmrqjvc_test.go:43:\
    \ expected '%!s(int=34560)', got '%!s(int=1)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp3nmrqjvc_test.go:43: expected '%!s(int=125411328000)', got\
    \ '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073821
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 1 {\n        return 1\n    }\n    return (n!) * (special_factorial(n-1))\
    \ * (special_factorial(n-2))\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n\
    \  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual:\
    \ candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpic6e62aj_test.go:20:14: expected '')'', found ''!''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073820
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n <= 1 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp_t9i_pru_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp_t9i_pru_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp_t9i_pru_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    brazilian_factorial := 1\n\n    if n <= 0 {\n        return 0\n    }\n\n\
    \    for i := 1; i <= n; i++ {\n        brazilian_factorial *= i\n    }\n\n  \
    \  return brazilian_factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n\
    \  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual:\
    \ candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpbe77n4bt_test.go:46: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpbe77n4bt_test.go:46:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpbe77n4bt_test.go:46: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    result := 1\n\n    for i := 1; i <= n; i++ {\n        result = result * i\n\
    \    }\n\n    return result\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n\
    \  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual:\
    \ candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp832e3r3z_test.go:42: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp832e3r3z_test.go:42:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp832e3r3z_test.go:42: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    var result int = 1\n    for i := 1; i <= n; i++ {\n        result = result\
    \ * i\n    }\n\n    return result\n}\n\nfunc TestSpecial_Factorial(t *testing.T)\
    \ {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual:\
    \ candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpka7k2wym_test.go:41: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpka7k2wym_test.go:41:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpka7k2wym_test.go:41: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n\n    return n * (special_factorial(n\
    \ - 1))\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpn3v4hj8x_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpn3v4hj8x_test.go:40:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpn3v4hj8x_test.go:40: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    result := 1\n    for i := 1; i <= n; i++ {\n        result *= i\n    }\n\
    \    return result\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate\
    \ := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7),\
    \ expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpp0r0rc0e_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpp0r0rc0e_test.go:40:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpp0r0rc0e_test.go:40: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n <= 1 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp_t9i_pru_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp_t9i_pru_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp_t9i_pru_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n <= 1 {\n        return 1\n    }\n\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpr2mmkzc5_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpr2mmkzc5_test.go:40:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpr2mmkzc5_test.go:40: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    result := 1\n    i := 0\n    for ; i <= n; i++ {\n        result *= i\n \
    \   }\n    return result\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate\
    \ := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7),\
    \ expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp1_eeq9mo_test.go:41: expected '%!s(int=288)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp1_eeq9mo_test.go:41:\
    \ expected '%!s(int=34560)', got '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp1_eeq9mo_test.go:41: expected '%!s(int=125411328000)', got\
    \ '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__3 (0.00s)\n    \
    \    tmp1_eeq9mo_test.go:41: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    switch {\n    case n == 0:\n        return 1\n    case n == 1:\n        return\
    \ 1\n    case n == 2:\n        return 2\n    default:\n        return n * special_factorial(n\
    \ - 1)\n    }\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate :=\
    \ special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7),\
    \ expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp9h7_g92d_test.go:45: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp9h7_g92d_test.go:45:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp9h7_g92d_test.go:45: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    var factorial int = n // n!\n    factorial *= factorial\n    factorial *=\
    \ factorial\n    factorial *= factorial\n    factorial *= factorial\n    return\
    \ factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp8az_x473_test.go:41: expected '%!s(int=288)', got '%!s(int=4294967296)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp8az_x473_test.go:41:\
    \ expected '%!s(int=34560)', got '%!s(int=152587890625)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp8az_x473_test.go:41: expected '%!s(int=125411328000)', got\
    \ '%!s(int=33232930569601)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    switch n {\n    case 0:\n        return 1\n    case 1:\n        return 1\n\
    \    case 2:\n        return 2\n    default:\n        var factorial = 1\n    \
    \    for i := 2; i <= n; i++ {\n            factorial *= i\n        }\n      \
    \  return factorial\n    }\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n\
    \  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual:\
    \ candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpifzmm_bn_test.go:49: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpifzmm_bn_test.go:49:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpifzmm_bn_test.go:49: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073822
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return (n*special_factorial(n-1))*(n-2)\n\
    }\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpdpzwu0bn_test.go:39: expected '%!s(int=288)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpdpzwu0bn_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpdpzwu0bn_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__3 (0.00s)\n    \
    \    tmpdpzwu0bn_test.go:39: expected '%!s(int=1)', got '%!s(int=-1)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073823
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n <= 1 {\n        return 1\n    } else {\n        return n*special_factorial(n-1)\n\
    \    }\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp_letsy6a_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp_letsy6a_test.go:40:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp_letsy6a_test.go:40: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073823
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n \
    \   }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n\
    \  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual:\
    \ candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp0j766yjf_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp0j766yjf_test.go:40:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp0j766yjf_test.go:40: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073652
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    switch n {\n    case 0:\n        return 1\n    case 1:\n        return 1\n\
    \    case 2:\n        return 2\n    default:\n        sum := 0\n        for i\
    \ := 0; i < n; i++ {\n            sum += special_factorial(i) * i\n        }\n\
    \        return sum\n    }\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n\
    \  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual:\
    \ candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmphvwq3m0n_test.go:49: expected '%!s(int=288)', got '%!s(int=20)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmphvwq3m0n_test.go:49:\
    \ expected '%!s(int=34560)', got '%!s(int=100)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmphvwq3m0n_test.go:49: expected '%!s(int=125411328000)', got\
    \ '%!s(int=4200)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073823
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n \
    \   }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n\
    \  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual:\
    \ candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp0j766yjf_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp0j766yjf_test.go:40:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp0j766yjf_test.go:40: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073652
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n-1)\n\
    }\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpr8z0bdpr_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpr8z0bdpr_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpr8z0bdpr_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073819
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 1 {\n        return n\n    } else {\n        return n * special_factorial(n\
    \ - 1)\n    }\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate :=\
    \ special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7),\
    \ expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp4ifxsnub_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp4ifxsnub_test.go:40:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp4ifxsnub_test.go:40: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073823
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 1 {\n        return 1\n    }\n\n    result := special_factorial(n\
    \ - 1)\n    result *= n\n\n    return result\n}\n\nfunc TestSpecial_Factorial(t\
    \ *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected:\
    \ 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual:\
    \ candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpx95mt85f_test.go:43: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpx95mt85f_test.go:43:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpx95mt85f_test.go:43: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073823
- exit_code: 2
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    switch {\n    case n > 0:\n        return factorial(n)\n    case n == -1:\n\
    \        return 1\n    case n == 0:\n        return 1\n    case n == -1:\n   \
    \     return 0\n    }\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate\
    \ := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7),\
    \ expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp663yy_oh_test.go:19:16: undefined: factorial

    /tmp/tmp663yy_oh_test.go:27:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073823
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n \
    \   }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n\
    \  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual:\
    \ candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp0j766yjf_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp0j766yjf_test.go:40:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp0j766yjf_test.go:40: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073652
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    var result int\n    var i int\n\n    for i = 1; i <= n; i++ {\n        result\
    \ = i * result\n    }\n    return result\n}\n\nfunc TestSpecial_Factorial(t *testing.T)\
    \ {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual:\
    \ candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpensmceso_test.go:42: expected '%!s(int=288)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpensmceso_test.go:42:\
    \ expected '%!s(int=34560)', got '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpensmceso_test.go:42: expected '%!s(int=125411328000)', got\
    \ '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__3 (0.00s)\n    \
    \    tmpensmceso_test.go:42: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073823
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1 // Since 0! = 1, we return 1\n    }\n    result\
    \ := 1\n    for i := 0; i < n; i++ {\n        result = result * (n-i)\n    }\n\
    \    return result\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate\
    \ := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7),\
    \ expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp8wy1gyw__test.go:43: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp8wy1gyw__test.go:43:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp8wy1gyw__test.go:43: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073823
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 1\n\
    \    }\n    return n * special_factorial(n - 1)\n}\n\nfunc TestSpecial_Factorial(t\
    \ *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected:\
    \ 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual:\
    \ candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmps51z5_5t_test.go:42: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmps51z5_5t_test.go:42:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmps51z5_5t_test.go:42: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073824
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n < 1 {\n        fmt.Println(\"The factorial of 0 is...\")\n        fmt.Println(0)\n\
    \        fmt.Println(\"The factorial of 1 is...\")\n        fmt.Println(1)\n \
    \       fmt.Println(\"The factorial of 2 is...\")\n        fmt.Println(2)\n  \
    \      return n\n    }\n    if n == 1 {\n        fmt.Println(\"The factorial of\
    \ 0 is...\")\n        fmt.Println(0)\n        fmt.Println(\"The factorial of 1\
    \ is...\")\n        fmt.Println(1)\n        fmt.Println(\"The factorial of 2 is...\"\
    )\n        fmt.Println(2)\n        return n\n    }\n    factorial := 1\n    for\
    \ i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    fmt.Println(factorial)\n\
    \    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate\
    \ := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7),\
    \ expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "24\n120\n5040\nThe factorial of 0 is...\n0\nThe factorial of 1 is...\n\
    1\nThe factorial of 2 is...\n2\n--- FAIL: TestSpecial_Factorial (0.00s)\n    ---\
    \ FAIL: TestSpecial_Factorial/test_num__0 (0.00s)\n        tmpcla0a511_test.go:59:\
    \ expected '%!s(int=288)', got '%!s(int=24)'\n    --- FAIL: TestSpecial_Factorial/test_num__1\
    \ (0.00s)\n        tmpcla0a511_test.go:59: expected '%!s(int=34560)', got '%!s(int=120)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__2 (0.00s)\n        tmpcla0a511_test.go:59:\
    \ expected '%!s(int=125411328000)', got '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073824
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * (special_factorial(n-1))\n\
    }\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp96wag8h0_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp96wag8h0_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp96wag8h0_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073824
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    var result int\n\n    if n <= 0 {\n        return -1\n    }\n\n    for i\
    \ := 1; i <= n; i++ {\n        result *= i\n    }\n\n    return result\n}\n\n\
    func TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpooqz40r9_test.go:46: expected '%!s(int=288)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpooqz40r9_test.go:46:\
    \ expected '%!s(int=34560)', got '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpooqz40r9_test.go:46: expected '%!s(int=125411328000)', got\
    \ '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__3 (0.00s)\n    \
    \    tmpooqz40r9_test.go:46: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073824
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 1 {\n        return 1\n    }\n    return n*special_factorial(n-1)\n\
    }\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp9yfvedx4_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp9yfvedx4_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp9yfvedx4_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073824
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    // This for loop is a more readable equivalent to the for loop below,\n \
    \   // but it will not work in some versions of go and is more verbose.\n    //\
    \ The for loop below is more efficient for most cases.\n    // It also works for\
    \ negative integers since it will only use a\n    // constant amount of extra\
    \ memory.\n    var result int = 1\n    for i := 1; i <= n; i++ {\n        result\
    \ *= i\n    }\n    return result\n}\n\nfunc TestSpecial_Factorial(t *testing.T)\
    \ {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual:\
    \ candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpeyhw9pbs_test.go:45: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpeyhw9pbs_test.go:45:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpeyhw9pbs_test.go:45: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073824
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    factorial := 1\n    for n != 0 {\n        factorial *= n\n        n--\n \
    \   }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n\
    \  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual:\
    \ candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpf7gh29pm_test.go:41: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpf7gh29pm_test.go:41:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpf7gh29pm_test.go:41: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073824
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n < 1 {\n        return 0\n    }\n\n    ret := 1\n    for i := 1; i <=\
    \ n; i++ {\n        ret *= i\n    }\n\n    return ret\n}\n\nfunc TestSpecial_Factorial(t\
    \ *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected:\
    \ 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual:\
    \ candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp7l6gqq2y_test.go:45: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp7l6gqq2y_test.go:45:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp7l6gqq2y_test.go:45: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073824
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    result := 1\n    for i := 0; i < n; i++ {\n        result *= i + 1\n    }\n\
    \    return result\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate\
    \ := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7),\
    \ expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpbdcrfxtv_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpbdcrfxtv_test.go:40:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpbdcrfxtv_test.go:40: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073824
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 1 {\n        return 1\n    }\n    return n*special_factorial(n-1)\n\
    }\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp9yfvedx4_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp9yfvedx4_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp9yfvedx4_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073824
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n < 0 {\n        return 0\n    }\n    factorial := 1\n    for i := 1;\
    \ i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc\
    \ TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp21gkwzcd_test.go:43: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp21gkwzcd_test.go:43:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp21gkwzcd_test.go:43: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073824
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n <= 1 {\n        return 1\n    }\n    ans := special_factorial(n-1)\n\
    \    ans *= n\n    return ans\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n\
    \  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual:\
    \ candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp068gkvga_test.go:41: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp068gkvga_test.go:41:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp068gkvga_test.go:41: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073825
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    // The factorial is computed by multiplying every number from 1 to n\n  \
    \  // with the previous factorial. For example, for n=4, the previous factorial\n\
    \    // is 1*2*3*4 = 24. The factorial is computed by multiplying every number\n\
    \    // from 1 to n with the previous factorial and finally returning the\n  \
    \  // factorial.\n    result := 1\n    for i := 1; i <= n; i++ {\n        result\
    \ *= i\n    }\n    return result\n}\n</code>\n<|/ a dscore=1 |>\n<| a |>\n<code>\n\
    package main\n\nimport (\n    \"fmt\"\n)\n\nfunc TestSpecial_Factorial(t *testing.T)\
    \ {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual:\
    \ candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmppru2tiux_test.go:28:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073824
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n <= 0 {\n        return 0\n    }\n    result := 1\n    for i := 1; i\
    \ <= n; i++ {\n        result *= i\n    }\n    return result\n}\n\nfunc TestSpecial_Factorial(t\
    \ *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected:\
    \ 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual:\
    \ candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp3ztkup5i_test.go:43: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp3ztkup5i_test.go:43:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp3ztkup5i_test.go:43: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n <= 1 {\n        return 1\n    }\n    return n*special_factorial(n-1)\n\
    }\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpio3lg9w3_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpio3lg9w3_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpio3lg9w3_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    total := 1\n    for i := 1; i <= n; i++ {\n        total *= i\n    }\n  \
    \  return total\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate\
    \ := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7),\
    \ expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp0yw9jfhr_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp0yw9jfhr_test.go:40:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp0yw9jfhr_test.go:40: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073825
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n < 1 {\n        return 0\n    }\n\n    result := 1\n    for i := 1; i\
    \ <= n; i++ {\n        result *= i\n    }\n    return result\n}\n\nfunc TestSpecial_Factorial(t\
    \ *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected:\
    \ 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual:\
    \ candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpi9p1pnm2_test.go:44: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpi9p1pnm2_test.go:44:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpi9p1pnm2_test.go:44: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073825
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    // TODO: Implement me\n    return 0\n}\n\nfunc TestSpecial_Factorial(t *testing.T)\
    \ {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual:\
    \ candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpjik3r7au_test.go:37: expected '%!s(int=288)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpjik3r7au_test.go:37:\
    \ expected '%!s(int=34560)', got '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpjik3r7au_test.go:37: expected '%!s(int=125411328000)', got\
    \ '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__3 (0.00s)\n    \
    \    tmpjik3r7au_test.go:37: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073825
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n <= 1 {\n        return 1\n    }\n    return n*(special_factorial(n-1))\n\
    }\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpm7f8mat0_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpm7f8mat0_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpm7f8mat0_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073825
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    result := 1\n    for i := 0; i < n; i++ {\n        result = result * i\n\
    \    }\n    return result\n}\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate\
    \ := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7),\
    \ expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcvahdh1o_test.go:39: expected '%!s(int=288)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcvahdh1o_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcvahdh1o_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__3 (0.00s)\n    \
    \    tmpcvahdh1o_test.go:39: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073825
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    result := 1\n    for i := 0; i < n; i++ {\n        result *= i\n    }\n \
    \   return result\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate\
    \ := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7),\
    \ expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp7283xvw9_test.go:40: expected '%!s(int=288)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp7283xvw9_test.go:40:\
    \ expected '%!s(int=34560)', got '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp7283xvw9_test.go:40: expected '%!s(int=125411328000)', got\
    \ '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__3 (0.00s)\n    \
    \    tmp7283xvw9_test.go:40: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073825
- exit_code: 2
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n <= 0 {\n        return 0\n    }\n    return factorial(n) * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpveqyc1qr_test.go:20:12: undefined: factorial

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073825
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n*special_factorial(n-1)\n\
    }\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpsi41la0e_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpsi41la0e_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpsi41la0e_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073819
- exit_code: 2
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    if n == 1 {\n        return 1\n\
    \    }\n    result := factorial(n)\n    if n%2 != 0 {\n        result *= factorial(n/2)\n\
    \    }\n    return result\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n \
    \ candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual:\
    \ candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl3v7tccz_test.go:23:15: undefined: factorial

    /tmp/tmpl3v7tccz_test.go:25:19: undefined: factorial

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073825
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n < 1 {\n        return n\n    }\n    return special_factorial(n - 1)\
    \ * n\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpop7dw7rn_test.go:39: expected '%!s(int=288)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpop7dw7rn_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpop7dw7rn_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__3 (0.00s)\n    \
    \    tmpop7dw7rn_test.go:39: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n <= 1 {\n        return 1\n    }\n    return n*special_factorial(n-1)\n\
    }\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpio3lg9w3_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpio3lg9w3_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpio3lg9w3_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 2
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    return factorial(n) * (n-1)*(n-2)\n}\n\nfunc TestSpecial_Factorial(t *testing.T)\
    \ {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual:\
    \ candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyhnwonwl_test.go:17:12: undefined: factorial

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073825
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n < 1 {\n        return n\n    }\n    return n * special_factorial(n -\
    \ 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpaukd0gzm_test.go:39: expected '%!s(int=288)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpaukd0gzm_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpaukd0gzm_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__3 (0.00s)\n    \
    \    tmpaukd0gzm_test.go:39: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n < 0 {\n        fmt.Println(\"Error: Negative Integer. Returning 0.\"\
    )\n        return 0\n    }\n    result := n\n\n    for i := 1; i <= n; i++ {\n\
    \        result *= i\n    }\n\n    return result\n}\n</code>\n<|/ a tags=go,factorial,recursion\
    \ |>\n<| c |>\nThis solution is too complex, it works only if the number is positive.\n\
    <|/ c |>\n<| a dscore=4 |>\nAnother way with recursive function and math/big:\n\
    <code>\npackage main\n\nimport (\n    \"fmt\"\n    \"math/big\"\n)\n\nfunc TestSpecial_Factorial(t\
    \ *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected:\
    \ 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual:\
    \ candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1g3qyoh1_test.go:29:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073825
- exit_code: 2
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n < 0 {\n        fmt.Println(\"The parameter n must be positive\")\n \
    \       return\n    }\n    var result int = 1\n    for i := 1; i <= n; i++ {\n\
    \        result = result * i\n    }\n    return result\n}\n\nfunc TestSpecial_Factorial(t\
    \ *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected:\
    \ 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual:\
    \ candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgj_8npsr_test.go:19:9:\
    \ not enough return values\n\thave ()\n\twant (int)\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073826
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    factorial := 1\n    for i := n; i >= 1; i-- {\n        factorial *= i\n \
    \   }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n\
    \  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual:\
    \ candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp91z94xvh_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp91z94xvh_test.go:40:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp91z94xvh_test.go:40: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073826
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n < 2 {\n        return 1\n    }\n    brazilian_factorial := 1\n    for\
    \ i := 1; i <= n; i++ {\n        brazilian_factorial *= i\n    }\n    return brazilian_factorial\n\
    }\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpie2en2ha_test.go:43: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpie2en2ha_test.go:43:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpie2en2ha_test.go:43: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073826
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    switch {\n    case n < 0: \n        return -1\n    case n == 0: \n      \
    \  return 1\n    default:\n        result := special_factorial(n-1) * n\n    \
    \    return result\n    }\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis does not\
    \ compile.\n<|/ c |>\n<| c |>\nI fixed the compilation error. Please, check the\
    \ answer again\n<|/ c |>\n<| a tags=recursion,function,go dscore=1 |>\nThe function\
    \ below can be implemented with recursion as follows:\n<code>\nfunc TestSpecial_Factorial(t\
    \ *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected:\
    \ 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual:\
    \ candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpu1qjnka__test.go:27:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073825
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    var result int = 1\n    for i := 0; i < n; i++ {\n        result *= i + 1\n\
    \    }\n    return result\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n \
    \ candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual:\
    \ candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp0xm69gqt_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp0xm69gqt_test.go:40:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp0xm69gqt_test.go:40: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073826
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    result := 1\n    for i := n; i > 0; i-- {\n        result *= i\n    }\n\n\
    \    return result\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate\
    \ := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7),\
    \ expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpw7mdyk3__test.go:41: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpw7mdyk3__test.go:41:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpw7mdyk3__test.go:41: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073826
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n <= 1 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp_t9i_pru_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp_t9i_pru_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp_t9i_pru_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n < 0 {\n        fmt.Printf(\"Error: Negative factorial not allowed: %d\\\
    n\", n)\n        return 0\n    }\n    result := 1\n    for i := 1; i <= n; i++\
    \ {\n        result *= i\n    }\n    return result\n}\n\nfunc TestSpecial_Factorial(t\
    \ *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected:\
    \ 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual:\
    \ candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpgz0jxzq3_test.go:44: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpgz0jxzq3_test.go:44:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpgz0jxzq3_test.go:44: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073826
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    factorial := 1\n    for i := 1;\
    \ i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n</code>\n\
    And finally the code to test it:\n<code>\npackage special_factorial_test\n\nimport\
    \ (\n    \"testing\"\n)\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate\
    \ := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7),\
    \ expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3gjggm20_test.go:26:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073825
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    factorial := 1\n    for i := 2; i <= n; i++ {\n        factorial *= i\n \
    \   }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n\
    \  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual:\
    \ candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp8e7yyv30_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp8e7yyv30_test.go:40:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp8e7yyv30_test.go:40: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073816
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n < 2 {\n        return n\n    }\n    n -= 2\n    result := 1\n    for\
    \ i:= 0; i < n; i++ {\n        result *= i + 1\n    }\n    return result\n}\n\n\
    func TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpnaqsz4pp_test.go:44: expected '%!s(int=288)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpnaqsz4pp_test.go:44:\
    \ expected '%!s(int=34560)', got '%!s(int=6)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpnaqsz4pp_test.go:44: expected '%!s(int=125411328000)', got\
    \ '%!s(int=120)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073826
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp4erhqjtx_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp4erhqjtx_test.go:40:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp4erhqjtx_test.go:40: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073826
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    result := 1\n    for n > 0 {\n        result = result * n\n        n--\n\
    \    }\n    return result\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n \
    \ candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual:\
    \ candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpvy0u9omr_test.go:41: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpvy0u9omr_test.go:41:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpvy0u9omr_test.go:41: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073814
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n <= 1 {\n        return 1\n    }\n    return n*special_factorial(n -\
    \ 1)*special_factorial(n - 2)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n\
    \  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual:\
    \ candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp009cinzl_test.go:39: expected '%!s(int=288)', got '%!s(int=48)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp009cinzl_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=1440)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp009cinzl_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=4180377600)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073826
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n <= 0 {\n        return 1 // this case happens in the test case\n   \
    \ }\n    factorial := 1\n    factorial = factorial * factorial\n    factorial\
    \ = factorial * factorial\n    factorial = factorial * factorial\n    factorial\
    \ = factorial * factorial\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t\
    \ *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected:\
    \ 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual:\
    \ candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpyzra6ghp_test.go:44: expected '%!s(int=288)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpyzra6ghp_test.go:44:\
    \ expected '%!s(int=34560)', got '%!s(int=1)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpyzra6ghp_test.go:44: expected '%!s(int=125411328000)', got\
    \ '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073826
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 1 {\n        return 1\n    }\n    return n * (special_factorial(n\
    \ - 1) + special_factorial(n - 2))\n}\nfunc TestSpecial_Factorial(t *testing.T)\
    \ {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual:\
    \ candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0390\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f368?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.special_factorial(0xffffffffff00002d)\n\
    \t/tmp/tmpafllomq9_test.go:16 +0x75 fp=0xc0201e03a0 sp=0xc0201e0398 pc=0x4ef6d5\n\
    command-line-arguments_test.special_factorial(0xffffffffff00002e)\n\t/tmp/tmpafllomq9_test.go:20\
    \ +0x3a fp=0xc0201e03c0 sp=0xc0201e03a0 pc=0x4ef69a\ncommand-line-arguments_test.special_factorial(0xffffffffff00002f)\n\
    \t/tmp/tmpafllomq9_test.go:20 +0x3a fp=0xc0201e03e0 sp=0xc0201e03c0 pc=0x4ef69a\n\
    command-line-arguments_test.special_factorial(0xffffffffff000030)\n\t/tmp/tmpafllomq9_test.go:20\
    \ +0x3a fp=0xc0201e0400 sp=0xc0201e03e0 pc=0x4ef69a\ncommand-line-arguments_test.special_factorial(0xffffffffff000031)\n\
    \t/tmp/tmpafllomq9_test.go:20 +0x3a fp=0xc0201e0420 sp=0xc0201e0400 pc=0x4ef69a\n\
    command-line-arguments_test.special_factorial(0xffffffffff000032)\n\t/tmp/tmpafllomq9_test.go:20\
    \ +0x3a fp=0xc0201e0440 sp=0xc0201e0420 pc=0x4ef69a\ncommand-line-arguments_test.special_factorial(0xffffffffff000033)\n\
    \t/tmp/tmpafllomq9_test.go:20 +0x3a fp=0xc0201e0460 sp=0xc0201e0440 pc=0x4ef69a\n\
    command-line-arguments_test.special_factorial(0xffffffffff000034)\n\t/tmp/tmpafllomq9_test.go:20\
    \ +0x3a fp=0xc0201e0480 sp=0xc0201e0460 pc=0x4ef69a\ncommand-line-arguments_test.special_factorial(0xffffffffff000035)\n\
    \t/tmp/tmpafllomq9_test.go:20 +0x3a fp=0xc0201e04a0 sp=0xc0201e0480 pc=0x4ef69a\n\
    command-line-arguments_test.special_factorial(0xffffffffff000036)\n\t/tmp/tmpafllomq9_test.go:20\
    \ +0x3a fp=0xc0201e04c0 sp=0xc0201e04a0 pc=0x4ef69a\ncommand-line-arguments_test.special_factorial(0xffffffffff000037)\n\
    \t/tmp/tmpafllomq9_test.go:20 +0x3a fp=0xc0201e04e0 sp=0xc020"
  timestamp: 1660073828
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    result := 1\n\n    for n > 0 {\n        result *= n\n        n--\n    }\n\
    \n    return result\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate\
    \ := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7),\
    \ expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpvkqypsw5_test.go:43: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpvkqypsw5_test.go:43:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpvkqypsw5_test.go:43: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073827
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n \
    \   }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n\
    \  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual:\
    \ candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp0j766yjf_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp0j766yjf_test.go:40:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp0j766yjf_test.go:40: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073652
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n < 2 {\n        return 1\n    }\n    result := 1\n    for i := 1; i <=\
    \ n; i++ {\n        result *= i\n    }\n    return result\n}\n\nfunc TestSpecial_Factorial(t\
    \ *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected:\
    \ 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual:\
    \ candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmplvdz9f36_test.go:43: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmplvdz9f36_test.go:43:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmplvdz9f36_test.go:43: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073827
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    switch {\n    case n <= 1:\n        return n\n    case n == 2:\n        return\
    \ 1\n    default:\n        return n * special_factorial(n - 1)\n    }\n}\n\nfunc\
    \ TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpo4576bvs_test.go:43: expected '%!s(int=288)', got '%!s(int=12)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpo4576bvs_test.go:43:\
    \ expected '%!s(int=34560)', got '%!s(int=60)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpo4576bvs_test.go:43: expected '%!s(int=125411328000)', got\
    \ '%!s(int=2520)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073827
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    acc := 0\n    for i := 1; i <=\
    \ n; i++ {\n        acc *= i\n    }\n    return acc\n}\n\nfunc TestSpecial_Factorial(t\
    \ *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected:\
    \ 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual:\
    \ candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp3cz8jsh6_test.go:43: expected '%!s(int=288)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp3cz8jsh6_test.go:43:\
    \ expected '%!s(int=34560)', got '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp3cz8jsh6_test.go:43: expected '%!s(int=125411328000)', got\
    \ '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__3 (0.00s)\n    \
    \    tmp3cz8jsh6_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073827
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n < 0 {\n        fmt.Println(\"The special factorial can only be used\
    \ with non-negative values\")\n        return -1\n    }\n    result := 1\n   \
    \ for i := 1; i <= n; i++ {\n        result = result * i\n    }\n    return result\n\
    }\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpgj6xi4mn_test.go:44: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpgj6xi4mn_test.go:44:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpgj6xi4mn_test.go:44: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073827
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    x := 1\n    for {\n        if n <= 0 {\n            break\n        }\n  \
    \      x = x * n\n        n = n - 1\n    }\n    return x\n}\n\nfunc TestSpecial_Factorial(t\
    \ *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected:\
    \ 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual:\
    \ candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpv2_tdvuh_test.go:44: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpv2_tdvuh_test.go:44:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpv2_tdvuh_test.go:44: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073827
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    // This variable will hold the result of the factorial calculation\n    result\
    \ := 1\n\n    // This variable will hold the factorial of the number passed in\
    \ n\n    factorial := 1\n\n    // This variable will hold the factorial of the\
    \ number passed in n minus 1\n    factorialMinusOne := factorial\n\n    // This\
    \ loop will iterate until factorial has reached 1\n    for factorial > 1 {\n \
    \       // This variable will hold the factorial of the number passed in n\n \
    \       factorial = factorial * factorialMinusOne\n        factorialMinusOne =\
    \ factorial - 1\n        result = result * factorial\n    }\n\n    return result\n\
    }\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpaof0ij5p_test.go:53: expected '%!s(int=288)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpaof0ij5p_test.go:53:\
    \ expected '%!s(int=34560)', got '%!s(int=1)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpaof0ij5p_test.go:53: expected '%!s(int=125411328000)', got\
    \ '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073827
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    result := 1\n    for i := 0; i < n; i++ {\n        result *= i\n    }\n\n\
    \    return result\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate\
    \ := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7),\
    \ expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpxz21bmsr_test.go:41: expected '%!s(int=288)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpxz21bmsr_test.go:41:\
    \ expected '%!s(int=34560)', got '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpxz21bmsr_test.go:41: expected '%!s(int=125411328000)', got\
    \ '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__3 (0.00s)\n    \
    \    tmpxz21bmsr_test.go:41: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073827
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    result := 1\n    for i := 1; i <= n; i++ {\n        result *= i\n    }\n\
    \    return result\n}\n</code>\n<|/ a |>\n<| c |>\nThis does not work! `factorial`\
    \ is defined to return `0` for `0` input.\n<|/ c |>\n<| c |>\n`factorial` was\
    \ a typo. Thanks.\n<|/ c |>\n<| a tags=math,go,algorithm dscore=1 |>\nJust for\
    \ fun, I wrote this in JavaScript. It uses recursion and has O(n) time complexity.\n\
    \n<code>\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_5m4bcw3_test.go:23:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073826
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    f := 1\n    for i := 1; i <= n; i++ {\n        f = f * i\n    }\n    return\
    \ f\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpecc_xv1y_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpecc_xv1y_test.go:40:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpecc_xv1y_test.go:40: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073827
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n < 0 {\n        return -1\n    }\n    var factorial = 1\n    for i :=\
    \ 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\nfunc\
    \ TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpslzp1w62_test.go:42: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpslzp1w62_test.go:42:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpslzp1w62_test.go:42: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073827
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n <= 1 {\n        return 1\n    }\n    result := 1\n    for i := 1; i\
    \ <= n; i++ {\n        result *= i\n    }\n    return result\n}\n\nfunc TestSpecial_Factorial(t\
    \ *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected:\
    \ 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual:\
    \ candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpl4_0adeq_test.go:43: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpl4_0adeq_test.go:43:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpl4_0adeq_test.go:43: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073827
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    switch n {\n    case 1:\n        return 1\n    case 2:\n        return 4\n\
    \    case 3:\n        return 9\n    default:\n        result := 1\n        for\
    \ i := 3; i <= n; i++ {\n            result *= i\n        }\n        return result\n\
    \    }\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpaq5l6_ga_test.go:49: expected '%!s(int=288)', got '%!s(int=12)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpaq5l6_ga_test.go:49:\
    \ expected '%!s(int=34560)', got '%!s(int=60)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpaq5l6_ga_test.go:49: expected '%!s(int=125411328000)', got\
    \ '%!s(int=2520)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073827
