language: go_test.go
name: HumanEval_81_numerical_letter_grade
results:
- exit_code: 2
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    fmt.Println(\"grades: \", grades)\n    var grade\
    \ string\n    var letter string\n\n    if len(grades) == 0 {\n        return []string{grade}\n\
    \    }\n\n    // The first two GPAs are to skip the letter 'E'\n    grades :=\
    \ append([]float64{0.0}, grades...)\n\n    // The loop is over the length of the\
    \ array (number of grades)\n    for i := 0; i < len(grades); i++ {\n        letter\
    \ = strings.Repeat(\"F\", i%2)\n        if grades[i] > 0 {\n            letter\
    \ = strings.Repeat(\"D\", i%2)\n            grade = letter + strings.Repeat(\"\
    +\", i-(i%2))\n        }\n        if grades[i] < 0 {\n            letter = strings.Repeat(\"\
    E\", i%2)\n            grade = letter + strings.Repeat(\"-\", i-(i%2))\n     \
    \   }\n        if grade == \"\" {\n            grade = letter\n        }\n   \
    \     fmt.Println(\"letter:\", letter)\n        fmt.Println(\"grade:\", grade)\n\
    \        fmt.Println()\n    }\n    return []string{grade}\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz0c81b4r_test.go:40:12: no new variables on left side of :=

    /tmp/tmpz0c81b4r_test.go:44:18: undefined: strings

    /tmp/tmpz0c81b4r_test.go:46:22: undefined: strings

    /tmp/tmpz0c81b4r_test.go:47:30: undefined: strings

    /tmp/tmpz0c81b4r_test.go:50:22: undefined: strings

    /tmp/tmpz0c81b4r_test.go:51:30: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075612
- exit_code: 2
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    gradesSorted := sort(grades)\n    finalGrades :=\
    \ make([]string, 0, len(gradesSorted))\n    for _, grade := range gradesSorted\
    \ {\n        if grade == 0.0 {\n            finalGrades = append(finalGrades,\
    \ \"E\")\n        } else if grade > 3.0 {\n            finalGrades = append(finalGrades,\
    \ \"\")\n        } else {\n            finalGrades = append(finalGrades, gradeLetterGrade(grade))\n\
    \        }\n    }\n    return finalGrades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnuj1g132_test.go:31:21: undefined: sort

    /tmp/tmpnuj1g132_test.go:39:47: undefined: gradeLetterGrade

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075612
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    // Add your code\n\n    // add your code\n    return\
    \ []string{}\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate\
    \ := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0,\
    \ 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n\
    \     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n   \
    \  { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     {\
    \ actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual:\
    \ candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}),\
    \ expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpkpd6k879_test.go:55: expected '[A+ B C- C A-]', got '[]'\n\
    \    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n        tmpkpd6k879_test.go:55:\
    \ expected '[D+]', got '[]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2\
    \ (0.00s)\n        tmpkpd6k879_test.go:55: expected '[D-]', got '[]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmpkpd6k879_test.go:55:\
    \ expected '[E]', got '[]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpkpd6k879_test.go:55: expected '[D D- C- B B+]', got '[]'\n\
    \    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmpkpd6k879_test.go:55:\
    \ expected '[E D-]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075612
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    // YOUR CODE HERE\n    return []string{}\n}\n\nfunc\
    \ TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmphfa3b01e_test.go:53: expected '[A+ B C- C A-]', got '[]'\n\
    \    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n        tmphfa3b01e_test.go:53:\
    \ expected '[D+]', got '[]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2\
    \ (0.00s)\n        tmphfa3b01e_test.go:53: expected '[D-]', got '[]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmphfa3b01e_test.go:53:\
    \ expected '[E]', got '[]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmphfa3b01e_test.go:53: expected '[D D- C- B B+]', got '[]'\n\
    \    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmphfa3b01e_test.go:53:\
    \ expected '[E D-]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075291
- exit_code: 2
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    grades = append([]float64{0.0}, grades...)\n\n  \
    \  // The grade list is sorted by GPA\n    grades = append(grades, sort.Float64Slice{4.0,\
    \ 3.0, 1.7, 2.3, 2.7, 1.0, 0.0, 4.0, 3.7, 3.0, 2.0, 1.7, 3.0, 1.0, 0.7})\n\n \
    \   var letters []string\n    for i := 0; i < len(grades)-1; i++ {\n        f\
    \ := grades[i+1] - grades[i]\n        if f >= 0.0 {\n            letters = append(letters,\
    \ fmt.Sprintf(\"%s+\", getLetter(f)))\n        } else {\n            letters =\
    \ append(letters, fmt.Sprintf(\"%s-\", getLetter(-f)))\n        }\n    }\n   \
    \ letters = append(letters, getLetter(grades[len(grades)-1]))\n    return letters\n\
    }\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7h4mce8v_test.go:34:29: undefined: sort

    /tmp/tmp7h4mce8v_test.go:40:58: undefined: getLetter

    /tmp/tmp7h4mce8v_test.go:42:58: undefined: getLetter

    /tmp/tmp7h4mce8v_test.go:45:31: undefined: getLetter

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075612
- exit_code: 2
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    // The table that holds the letter grades\n    var\
    \ letterGrades []string\n    \n    // The first three rows of the table represent\
    \ the grades for the first \n    // three letter grades\n    letterGrades = append(letterGrades,\
    \ letterGrades[0])\n    letterGrades = append(letterGrades, letterGrades[1])\n\
    \    letterGrades = append(letterGrades, letterGrades[2])\n\n    // The table\
    \ that holds the GPAs for the first three letter grades\n    var gpas []float64\n\
    \    gpas = append(gpas, grades[0])\n    gpas = append(gpas, grades[1])\n    gpas\
    \ = append(gpas, grades[2])\n\n    // The loop starts here because we have no\
    \ idea what grade to give\n    // the first GPA\n    for i, letter := range letterGrades\
    \ {\n        // This if statement determines if the GPA for the letter is greater\
    \ \n        // than the next letter grade\n        if gpas[i] > gpas[i+1] {\n\
    \            // If the GPA is greater, then the letter grade is added to the \n\
    \            // letterGrades array and gpas is removed\n            letterGrades\
    \ = append(letterGrades, letter)\n            gpas = append(gpas, gpas[i+1])\n\
    \        } else {\n            // If the GPA is less, the letter grade is removed\n\
    \            letterGrades = append(letterGrades[:i], letterGrades[i+1:])\n   \
    \         gpas = append(gpas[:i], gpas[i+1:])\n        }\n    }\n\n    // This\
    \ returns the letterGrades array as a string for checking purposes \n    // only\n\
    \    return letterGrades\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n\
    \  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0,\
    \ 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n\
    \     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n   \
    \  { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     {\
    \ actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual:\
    \ candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}),\
    \ expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqe_2gqk9_test.go:58:65: cannot use letterGrades[i + 1:] (value of type
    []string) as type string in argument to append

    /tmp/tmpqe_2gqk9_test.go:59:41: cannot use gpas[i + 1:] (value of type []float64)
    as type float64 in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075612
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    // Your code goes here\n    // Declare a variable\
    \ 'letter_grades' that is a slice of strings\n    // The slice will be a slice\
    \ of strings of the same length as 'grades'\n    letter_grades := []string{}\n\
    \    // Iterate through the grades array\n    for _, grade := range grades {\n\
    \        // If the grade is greater than the GPA of the student, add it to letter_grades\n\
    \        if grade > 3.7 {\n            letter_grades = append(letter_grades, \"\
    A+\")\n        } else if grade > 3.3 {\n            letter_grades = append(letter_grades,\
    \ \"A-\")\n        } else if grade > 2.7 {\n            letter_grades = append(letter_grades,\
    \ \"B+\")\n        } else if grade > 2.3 {\n            letter_grades = append(letter_grades,\
    \ \"B-\")\n        } else if grade > 1.7 {\n            letter_grades = append(letter_grades,\
    \ \"C+\")\n        } else if grade > 1.3 {\n            letter_grades = append(letter_grades,\
    \ \"C\")\n        } else if grade > 0.7 {\n            letter_grades = append(letter_grades,\
    \ \"D+\")\n        } else if grade > 0.0 {\n            letter_grades = append(letter_grades,\
    \ \"D\")\n        } else if grade > 0.0 {\n            letter_grades = append(letter_grades,\
    \ \"D-\")\n        } else if grade == 0.0 {\n            letter_grades = append(letter_grades,\
    \ \"E\")\n        }\n    }\n    // Return the letter_grades slice\n    return\
    \ letter_grades\n}\n</code>\n<|/ q |>\n<| c |>\nIf you have a problem, show your\
    \ code. Stack Overflow is not here to write your code for you. Show the code you\
    \ are having an issue with, then we can help you.\n<|/ c |>\n<| c |>\nI edited\
    \ my question and added the code. It compiles but I can't test it.\n<|/ c |>\n\
    <| c |>\nPlease put a code example in your question instead of linking to an image.\
    \ We can't test your code because you haven't shown us your code.\n<|/ c |>\n\
    <| c |>\nI did it.\n<|/ c |>\n<| c |>\nI edited my question\n<|/ c |>\n<| a tags=go\
    \ |>\nAs I said in my comment, your function will fail to compile because you're\
    \ declaring the return type as []string, but your function doesn't actually return\
    \ a []string, it returns a []string{} (empty slice), hence the error you're seeing.\n\
    As for how to fix it, since your function only uses the variable name grades,\
    \ you can use the fact that the slices returned by \nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpphuce45a_test.go:63:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075611
- exit_code: 2
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var letter []string\n    for i := 0; i < len(grades);\
    \ i++ {\n        if grades[i] < 3 {\n            letter = append(letter, fmt.Sprintf(\"\
    %+d\", grades[i]))\n        } else if grades[i] > 3.0 {\n            letter =\
    \ append(letter, fmt.Sprintf(\"%+d\", grades[i]-1))\n        } else if grades[i]\
    \ < 2.3 {\n            letter = append(letter, fmt.Sprintf(\"%+d\", grades[i]))\n\
    \        } else if grades[i] >= 2.3 {\n            letter = append(letter, fmt.Sprintf(\"\
    %+d\", grades[i]+1))\n        } else if grades[i] < 1.7 && grades[i] != 0 {\n\
    \            letter = append(letter, fmt.Sprintf(\"%+d\", grades[i]))\n      \
    \  } else if grades[i] >= 1.7 {\n            letter = append(letter, fmt.Sprintf(\"\
    %+d\", grades[i]-1))\n        } else if grades[i] < 1.0 {\n            letter\
    \ = append(letter, fmt.Sprintf(\"%+d\", grades[i]))\n        } else if grades[i]\
    \ != 0 {\n            letter = append(letter, fmt.Sprintf(\"%+d\", grades[i]-1))\n\
    \        }\n    }\n    return letter\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T)\
    \ {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected:\
    \ []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"\
    D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"}\
    \ },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test

    /tmp/tmpl4o9lyka_test.go:34:37: fmt.Sprintf format %+d has arg grades[i] of wrong
    type float64

    /tmp/tmpl4o9lyka_test.go:36:37: fmt.Sprintf format %+d has arg grades[i] - 1 of
    wrong type float64

    /tmp/tmpl4o9lyka_test.go:38:37: fmt.Sprintf format %+d has arg grades[i] of wrong
    type float64

    /tmp/tmpl4o9lyka_test.go:40:37: fmt.Sprintf format %+d has arg grades[i] + 1 of
    wrong type float64

    /tmp/tmpl4o9lyka_test.go:42:37: fmt.Sprintf format %+d has arg grades[i] of wrong
    type float64

    /tmp/tmpl4o9lyka_test.go:44:37: fmt.Sprintf format %+d has arg grades[i] - 1 of
    wrong type float64

    /tmp/tmpl4o9lyka_test.go:46:37: fmt.Sprintf format %+d has arg grades[i] of wrong
    type float64

    /tmp/tmpl4o9lyka_test.go:48:37: fmt.Sprintf format %+d has arg grades[i] - 1 of
    wrong type float64

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075612
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    \n    gradesLen := len(grades)\n    \n    // Create\
    \ a list to store the letter grades\n    letterGrades := make([]string, gradesLen)\n\
    \    \n    // Initialize a counter to store number of correct answers. \n    //\
    \ It will be used to check for correct and incorrect answers. \n    correctCount\
    \ := 0\n    \n    // Create a temp variable to store each GPA grade for later\
    \ use.\n    currentGrade := grades[0]\n    \n    // Loop through the list of GPAs\
    \ until the number of correct answers\n    // is equal to the total number of\
    \ grades.\n    for i := 1; i < gradesLen; i++ {\n        \n        // Check each\
    \ GPA for the letter grades\n        if grades[i] > currentGrade {\n         \
    \   \n            // If the GPA for a letter grade is greater than the current\n\
    \            // letter grade, then the currentGrade is replaced with the GPA.\n\
    \            currentGrade = grades[i]\n        }\n        \n        // Increment\
    \ the correct count each time the letter grade matches\n        // the currentGrade.\n\
    \        if grades[i] == currentGrade {\n            correctCount++\n        }\n\
    \    }\n    \n    // If there are any incorrect answers, return the incorrect\
    \ letters.\n    if correctCount != gradesLen {\n        fmt.Println(\"Incorrect\
    \ number of answers\")\n        return letterGrades\n    }\n    \n    // If the\
    \ number of correct answers is equal to the number of grades,\n    // return that\
    \ list with the correct letter grades.\n    return letterGrades[:len(letterGrades)-1]\n\
    }\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "Incorrect number of answers\nIncorrect number of answers\nIncorrect number\
    \ of answers\nIncorrect number of answers\nIncorrect number of answers\nIncorrect\
    \ number of answers\n--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL:\
    \ TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmprkoj8zpa_test.go:92:\
    \ expected '[A+ B C- C A-]', got '[    ]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__1\
    \ (0.00s)\n        tmprkoj8zpa_test.go:92: expected '[D+]', got '[]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__2 (0.00s)\n        tmprkoj8zpa_test.go:92:\
    \ expected '[D-]', got '[]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3\
    \ (0.00s)\n        tmprkoj8zpa_test.go:92: expected '[E]', got '[]'\n    --- FAIL:\
    \ TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmprkoj8zpa_test.go:92:\
    \ expected '[D D- C- B B+]', got '[    ]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5\
    \ (0.00s)\n        tmprkoj8zpa_test.go:92: expected '[E D-]', got '[ ]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075612
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var letter_grade []string\n    // For each grade,\
    \ iterate through all of the values and see if\n    // there is a letter grade\
    \ for it.\n    for i := 0; i < len(grades); i++ {\n        if grades[i] >= 4.0\
    \ &&\n            grades[i] <= 5.0 {\n            letter_grade = append(letter_grade,\
    \ \"A+\")\n        } else if grades[i] >= 3.7 &&\n            grades[i] <= 3.8\
    \ ||\n            grades[i] <= 3.9 ||\n            grades[i] >= 4.0 {\n      \
    \      letter_grade = append(letter_grade, \"A\")\n        } else if grades[i]\
    \ >= 3.3 &&\n            grades[i] <= 3.4 ||\n            grades[i] <= 3.5 ||\n\
    \            grades[i] >= 3.7 {\n            letter_grade = append(letter_grade,\
    \ \"A-\")\n        } else if grades[i] >= 3.0 &&\n            grades[i] <= 3.2\
    \ ||\n            grades[i] <= 3.3 ||\n            grades[i] >= 3.3 {\n      \
    \      letter_grade = append(letter_grade, \"B+\")\n        } else if grades[i]\
    \ >= 2.7 &&\n            grades[i] <= 2.8 ||\n            grades[i] <= 2.9 ||\n\
    \            grades[i] >= 2.7 {\n            letter_grade = append(letter_grade,\
    \ \"B\")\n        } else if grades[i] >= 2.3 &&\n            grades[i] <= 2.4\
    \ ||\n            grades[i] <= 2.5 ||\n            grades[i] >= 2.7 {\n      \
    \      letter_grade = append(letter_grade, \"B-\")\n        } else if grades[i]\
    \ >= 2.0 &&\n            grades[i] <= 2.2 ||\n            grades[i] <= 2.3 ||\n\
    \            grades[i] >= 2.3 {\n            letter_grade = append(letter_grade,\
    \ \"C+\")\n        } else if grades[i] >= 1.7 &&\n            grades[i] <= 1.8\
    \ ||\n            grades[i] <= 1.9 ||\n            grades[i] >= 1.7 {\n      \
    \      letter_grade = append(letter_grade, \"C\")\n        } else if grades[i]\
    \ >= 1.3 &&\n            grades[i] <= 1.4 ||\n            grades[i] <= 1.5 ||\n\
    \            grades[i] >= 1.7 {\n            letter_grade = append(letter_grade,\
    \ \"C-\")\n        } else if grades[i] >= 1.0 &&\n            grades[i] <= 1.1\
    \ ||\n            grades[i] <= 1.2 ||\n            grades[i] >= 1.3 {\n      \
    \      letter_grade = append(letter_grade, \"D+\")\n        } else if grades[i]\
    \ >= 0.7 &&\n            grades[i] <= 1.0 ||\n            grades[i] <= 1.1 ||\n\
    \            grades[i] >= 1.3 {\n            letter_grade = append(letter_grade,\
    \ \"D\")\n        } else if grades[i] >= 0.0 \nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpznzhfmnd_test.go:89:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075611
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    fmt.Println(grades)\n\n    result := []string{}\n\
    \n    for _, grade := range grades {\n        gradeString := \"-\"\n        if\
    \ grade > 3.0 {\n            gradeString = \"A+\"\n        }\n        if grade\
    \ > 3.7 {\n            gradeString = \"A\"\n        }\n        if grade > 3.3\
    \ {\n            gradeString = \"A-\"\n        }\n        if grade > 2.7 {\n \
    \           gradeString = \"B+\"\n        }\n        if grade > 2.3 {\n      \
    \      gradeString = \"B\"\n        }\n        if grade > 1.8 {\n            gradeString\
    \ = \"B-\"\n        }\n        if grade > 1.7 {\n            gradeString = \"\
    C+\"\n        }\n        if grade > 1.3 {\n            gradeString = \"C\"\n \
    \       }\n        if grade > 1.0 {\n            gradeString = \"C-\"\n      \
    \  }\n        if grade > 0.7 {\n            gradeString = \"D+\"\n        }\n\
    \        if grade > 0.0 {\n            gradeString = \"D\"\n        }\n      \
    \  if grade > 0.0 {\n            gradeString = \"D-\"\n        }\n        if grade\
    \ > 0.0 {\n            gradeString = \"E\"\n        }\n        if grade == 0.0\
    \ {\n            gradeString = \"E\"\n        }\n        if grade < 4.0 {\n  \
    \          gradeString = \"F\"\n        }\n        fmt.Println(gradeString)\n\
    \        result = append(result, gradeString)\n    }\n\n    return result\n}\n\
    \nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "[4 3 1.7 2 3.5]\nE\nF\nF\nF\nF\n[1.2]\nF\n[0.5]\nF\n[0]\nF\n[1 0.3 1.5\
    \ 2.8 3.3]\nF\nF\nF\nF\nF\n[0 0.7]\nF\nF\n--- FAIL: TestNumerical_Letter_Grade\
    \ (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n    \
    \    tmpyj82vtqz_test.go:107: expected '[A+ B C- C A-]', got '[E F F F F]'\n \
    \   --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n        tmpyj82vtqz_test.go:107:\
    \ expected '[D+]', got '[F]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2\
    \ (0.00s)\n        tmpyj82vtqz_test.go:107: expected '[D-]', got '[F]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmpyj82vtqz_test.go:107:\
    \ expected '[E]', got '[F]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpyj82vtqz_test.go:107: expected '[D D- C- B B+]', got '[F\
    \ F F F F]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n  \
    \      tmpyj82vtqz_test.go:107: expected '[E D-]', got '[F F]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075612
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0) \n    grades = append(grades, 0.0) \n    grades = append(grades, 0.0) \n\
    \    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grade\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp186o76h6_test.go:94:26: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075611
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    // Write your function here\n    \n    return []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"}\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T)\
    \ {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected:\
    \ []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"\
    D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"}\
    \ },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__1\
    \ (0.00s)\n        tmp3ieii3jh_test.go:54: expected '[D+]', got '[A+ B C- C A-]'\n\
    \    --- FAIL: TestNumerical_Letter_Grade/test_num__2 (0.00s)\n        tmp3ieii3jh_test.go:54:\
    \ expected '[D-]', got '[A+ B C- C A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3\
    \ (0.00s)\n        tmp3ieii3jh_test.go:54: expected '[E]', got '[A+ B C- C A-]'\n\
    \    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmp3ieii3jh_test.go:54:\
    \ expected '[D D- C- B B+]', got '[A+ B C- C A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5\
    \ (0.00s)\n        tmp3ieii3jh_test.go:54: expected '[E D-]', got '[A+ B C- C\
    \ A-]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075612
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    i := 0\n    gradesCopy := make([]float64, len(grades))\n\
    \    gradesCopy := append(gradesCopy, grades...)\n    gradesCopy := append(gradesCopy,\
    \ []float64{}...)\n    gradesCopy := append(gradesCopy, []float64{0, 0, 0, 0,\
    \ 0}...)\n    gradesCopy := append(gradesCopy, []float64{}...)\n\n    // Find\
    \ max grade\n    maxGrade := 0.0\n    for len(gradesCopy) > 0 {\n        if gradesCopy[0]\
    \ > maxGrade {\n            maxGrade = gradesCopy[0]\n        }\n        gradesCopy\
    \ = gradesCopy[1:]\n    }\n\n    // Find average grade\n    averageGrade := 0.0\n\
    \    for i := 0; i < len(grades); i++ {\n        averageGrade += grades[i]\n \
    \   }\n    averageGrade /= float64(len(grades))\n\n    // Find mean grade\n  \
    \  meanGrade := 0.0\n    for i := 0; i < len(grades); i++ {\n        meanGrade\
    \ += grades[i] * float64(i)\n    }\n    meanGrade /= float64(len(grades))\n\n\
    \    // Find median grade\n    medianGrade := grades[0]\n    for i := 1; i < len(grades);\
    \ i++ {\n        if grades[i] < medianGrade {\n            medianGrade = grades[i]\n\
    \        }\n    }\n\n    // Find letter grade\n    letterGrades := []string{}\n\
    \    for i := 0; i < len(grades); i++ {\n        if grades[i] < meanGrade {\n\
    \            letterGrades = append(letterGrades, \"E\")\n        } else if grades[i]\
    \ > maxGrade {\n            letterGrades = append(letterGrades, fmt.Sprintf(\"\
    D-\"))\n        } else if grades[i] < medianGrade {\n            letterGrades\
    \ = append(letterGrades, fmt.Sprintf(\"D-\"))\n        } else if grades[i] < meanGrade\
    \ && grades[i] > maxGrade {\n            letterGrades = append(letterGrades, fmt.Sprintf(\"\
    C-\"))\n        } else if grades[i] < medianGrade && grades[i] > meanGrade {\n\
    \            letterGrades = append(letterGrades, fmt.Sprintf(\"C-\"))\n      \
    \  } else if grades[i] < meanGrade && grades[i] > medianGrade {\n            letterGrades\
    \ = append(letterGrades, fmt.Sprintf(\"B-\"))\n        } else if grades[i] < medianGrade\
    \ && grades[i] > meanGrade && grades[i] < maxGrade {\n            letterGrades\
    \ = append(letterGrades, fmt.S\nfunc TestNumerical_Letter_Grade(t *testing.T)\
    \ {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected:\
    \ []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"\
    D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"}\
    \ },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpch_samzl_test.go:85:54: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075611
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    grades = append([]float64{}, grades...) // This makes\
    \ the slice of float64s into a slice of \nfunc TestNumerical_Letter_Grade(t *testing.T)\
    \ {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected:\
    \ []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"\
    D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"}\
    \ },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpktoncerq_test.go:32:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075611
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var letter_grades []string\n    for _, grade := range\
    \ grades {\n        if grade == 0.0 {\n            letter_grades = append(letter_grades,\
    \ \"E\")\n            continue\n        }\n        letter_grades = append(letter_grades,\
    \ fmt.Sprintf(\"%.2f\", grade > 2.0 && grade < 3.0 ?\n            grade+1.0 :\n\
    \            grade < 3.0 ?\n                grade-0.0 :\n                grade-2.0))\n\
    \    }\n    return letter_grades\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T)\
    \ {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected:\
    \ []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"\
    D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"}\
    \ },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpczlebxzf_test.go:37:94: illegal character U+003F ''?''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075611
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    \n    var letters []string\n    \n    // Loop through\
    \ the array and use if statements to determine letter grade\n    // Add the letter\
    \ grade to the letters array\n    for _, grade := range grades {\n        if grade\
    \ > 3.7 {\n            letters = append(letters, \"C\")\n        } else if grade\
    \ > 3.3 {\n            letters = append(letters, \"B-\")\n        } else if grade\
    \ > 2.7 {\n            letters = append(letters, \"B\")\n        } else if grade\
    \ > 2.3 {\n            letters = append(letters, \"B-\")\n        } else if grade\
    \ > 1.7 {\n            letters = append(letters, \"C\")\n        } else if grade\
    \ > 1.0 {\n            letters = append(letters, \"C-\")\n        } else if grade\
    \ > 0.7 {\n            letters = append(letters, \"D\")\n        } else if grade\
    \ > 0.0 {\n            letters = append(letters, \"D-\")\n        } else {\n \
    \           letters = append(letters, \"E\")\n        }\n    }\n    \n    return\
    \ letters\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate :=\
    \ numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0,\
    \ 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n\
    \     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n   \
    \  { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     {\
    \ actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual:\
    \ candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}),\
    \ expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpj__mdbtq_test.go:79: expected '[A+ B C- C A-]', got '[C\
    \ B C- C B-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n\
    \        tmpj__mdbtq_test.go:79: expected '[D+]', got '[C-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpj__mdbtq_test.go:79: expected '[D D- C- B B+]', got '[D\
    \ D- C- B B]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075612
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    score := 0.0\n    for _, grade := range grades {\n\
    \        if grade > 3.0 {\n            score += 0.1\n        }\n        if grade\
    \ > 2.0 {\n            score += 0.05\n        }\n        if grade > 1.7 {\n  \
    \          score += 0.01\n        }\n        if grade > 1.0 {\n            score\
    \ += 0.005\n        }\n        if grade > 0.7 {\n            score += 0.001\n\
    \        }\n    }\n    if score >= 1.0 {\n        return nil\n    }\n\n    letterGrade\
    \ := \"D+\"\n    if score >= 1.1 {\n        letterGrade = \"D\"\n    }\n    if\
    \ score >= 0.9 {\n        letterGrade = \"C+\"\n    }\n    if score >= 0.85 {\n\
    \        letterGrade = \"C\"\n    }\n    if score >= 0.8 {\n        letterGrade\
    \ = \"B-\"\n    }\n    if score >= 0.65 {\n        letterGrade = \"B\"\n    }\n\
    \    if score >= 0.6 {\n        letterGrade = \"A-\"\n    }\n    if score >= 0.5\
    \ {\n        letterGrade = \"A\"\n    }\n    if score >= 0.4 {\n        letterGrade\
    \ = \"A+\"\n    }\n    if score >= 0.3 {\n        letterGrade = \"E+\"\n    }\n\
    \    if score >= 0.2 {\n        letterGrade = \"E\"\n    }\n    if score >= 0.1\
    \ {\n        letterGrade = \"D-\"\n    }\n    if score < 0.1 {\n        letterGrade\
    \ = \"D\"\n    }\n    if score < 0.2 {\n        letterGrade = \"C\"\n    }\n \
    \   if score < 0.3 {\n        letterGrade = \"B\"\n    }\n    if score < 0.4 {\n\
    \        letterGrade = \"A\"\n    }\n    if score < 0.5 {\n        letterGrade\
    \ = \"A+\"\n    }\n    if score < 0.6 {\n        letterGrade = \"A-\"\n    }\n\
    \    if score < 0.7 {\n        letterGrade = \"B+\"\n    }\n    if score < 0.8\
    \ {\n        letterGrade = \"B\"\n    }\n    if score < 0.9 {\n        letterGrade\
    \ = \"B-\"\n    }\n    if score < 1.0 {\n        letterGrade = \"C+\"\n    }\n\
    \    if score < 1.1 {\n        letterGrade = \"C\"\n    }\n    if score < 1.2\
    \ {\n        letterGrade = \"C-\"\n    }\n    if score < 1.3 {\n        letterGrade\
    \ = \"D\"\n    }\n    if score < 1.4 {\n        letterGrade = \"D+\"\n    }\n\
    \    if \nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpkv0e10dp_test.go:130:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075611
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    grades_len := len(grades)\n    if grades_len > 6\
    \ {\n        fmt.Println(\"Error: grades len is greater than 6\")\n        return\
    \ nil\n    }\n    grades_sum := 0.0\n    for _, grade := range grades {\n    \
    \    grades_sum += grade\n    }\n    grades_avg := grades_sum / float64(grades_len)\n\
    \    grades_diff := float64(grades_avg) - float64(grades[0])\n    grades_diff_to_avg\
    \ := grades_diff / float64(grades[0])\n    grades_diff_to_avg = grades_diff_to_avg\
    \ * float64(grades_len)\n    grades_diff /= float64(grades_len)\n    grades_diff_to_avg\
    \ /= float64(grades_len)\n    if grades_diff < 0.0 {\n        grades_diff = 0.0\n\
    \    }\n    if grades_diff_to_avg < 0.0 {\n        grades_diff_to_avg = 0.0\n\
    \    }\n    grades_diff_to_avg *= float64(grades_len)\n    grades_diff *= float64(grades_len)\n\
    \    grades_diff_to_avg *= float64(grades_len)\n    grades_diff /= float64(grades_len)\n\
    \    if grades_diff < 0.0 {\n        grades_diff = 0.0\n    }\n    if grades_diff_to_avg\
    \ < 0.0 {\n        grades_diff_to_avg = 0.0\n    }\n    grades_diff_to_avg *=\
    \ float64(grades_len)\n    grades_diff *= float64(grades_len)\n    grades_diff_to_avg\
    \ *= float64(grades_len)\n    grades_diff /= float64(grades_len)\n    if grades_diff\
    \ < 0.0 {\n        grades_diff = 0.0\n    }\n    if grades_diff_to_avg < 0.0 {\n\
    \        grades_diff_to_avg = 0.0\n    }\n    grades_diff_to_avg *= float64(grades_len)\n\
    \    grades_diff *= float64(grades_len)\n    grades_diff_to_avg *= float64(grades_len)\n\
    \    grades_diff /= float64(grades_len)\n    if grades_diff < 0.0 {\n        grades_diff\
    \ = 0.0\n    }\n    if grades_diff_to_avg < 0.0 {\n        grades_diff_to_avg\
    \ = 0.0\n    }\n    grades_diff_to_avg *= float64(grades_len)\n    grades_diff\
    \ *= float64(grades_len)\n    grades_diff_to_avg *= float64(grades_len)\n    grades_diff\
    \ /= float64(grades_len)\n    if grades_diff < 0.0 {\n        grades_diff = 0.0\n\
    \    }\n    if grades_diff_to_avg < 0.0 \nfunc TestNumerical_Letter_Grade(t *testing.T)\
    \ {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected:\
    \ []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"\
    D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"}\
    \ },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6r9mn8j2_test.go:90:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075611
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    letter := make([]string, len(grades))\n    for i,\
    \ g := range grades {\n        if g > 4 || g < 0 {\n            letter[i] = \"\
    D-\"\n        } else if g > 3.5 {\n            letter[i] = \"C-\"\n        } else\
    \ if g > 2.75 {\n            letter[i] = \"B-\"\n        } else if g > 1.5 {\n\
    \            letter[i] = \"B-\"\n        } else if g > 0.75 {\n            letter[i]\
    \ = \"B-\"\n        } else if g > 0.5 {\n            letter[i] = \"B-\"\n    \
    \    } else if g > 0.25 {\n            letter[i] = \"B-\"\n        } else if g\
    \ > 0.15 {\n            letter[i] = \"B-\"\n        } else if g > 0.05 && g <\
    \ 0.1 {\n            letter[i] = \"B-\"\n        } else if g > 0 && g < 0.1 {\n\
    \            letter[i] = \"B-\"\n        } else if g > 0 && g < 0.15 {\n     \
    \       letter[i] = \"B-\"\n        } else if g > 0 && g < 0.25 {\n          \
    \  letter[i] = \"B-\"\n        } else if g > 0 && g < 0.35 {\n            letter[i]\
    \ = \"B-\"\n        } else if g > 0 && g < 0.5 {\n            letter[i] = \"B-\"\
    \n        } else if g > 0 && g < 0.55 {\n            letter[i] = \"B-\"\n    \
    \    } else if g > 0 && g < 0.75 {\n            letter[i] = \"B-\"\n        }\
    \ else if g > 0 && g < 0.85 {\n            letter[i] = \"B-\"\n        } else\
    \ if g > 0 && g < 1.0 {\n            letter[i] = \"B-\"\n        } else if g >\
    \ 0 && g < 1.15 {\n            letter[i] = \"B-\"\n        } else if g > 0 &&\
    \ g < 1.35 {\n            letter[i] = \"B-\"\n        } else if g > 0 && g < 1.55\
    \ {\n            letter[i] = \"B-\"\n        } else if g > 0 && g < 1.75 {\n \
    \           letter[i] = \"B-\"\n        } else if g > 0 && g < 1.95 {\n      \
    \      letter[i] = \"B-\"\n        } else if g > 0 && g < 2.15 {\n           \
    \ letter[i] = \"B-\"\n        } else if g > 0 && g < 2.25 {\n            letter[i]\
    \ = \"B-\"\n        } else if g > 0 && g < 2.35 {\n            letter[i] = \"\
    B-\"\n        } else if g > 0 && g < 2.45 {\n            letter[i] = \"B-\"\n\
    \        } else if g > 0 && g < 2.55 {\n            letter[i] = \"\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpl4g5q8eb_test.go:88:25: string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075611
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    grades_length := len(grades)\n    letter_grades :=\
    \ make([]string, grades_length)\n\n    for index := 0; index < grades_length;\
    \ index++ {\n        if grades[index] <= 3.0 {\n            letter_grades[index]\
    \ = \"A+\"\n        } else if grades[index] <= 3.7 && grades[index] >= 3.0 {\n\
    \            letter_grades[index] = \"A\"\n        } else if grades[index] <=\
    \ 3.3 && grades[index] >= 3.7 {\n            letter_grades[index] = \"A-\"\n \
    \       } else if grades[index] <= 3.0 && grades[index] >= 3.3 {\n           \
    \ letter_grades[index] = \"B+\"\n        } else if grades[index] <= 2.7 && grades[index]\
    \ >= 3.0 {\n            letter_grades[index] = \"B\"\n        } else if grades[index]\
    \ <= 2.3 && grades[index] >= 2.7 {\n            letter_grades[index] = \"B-\"\n\
    \        } else if grades[index] <= 2.0 && grades[index] >= 2.3 {\n          \
    \  letter_grades[index] = \"C+\"\n        } else if grades[index] <= 1.7 && grades[index]\
    \ >= 2.0 {\n            letter_grades[index] = \"C\"\n        } else if grades[index]\
    \ <= 1.3 && grades[index] >= 1.7 {\n            letter_grades[index] = \"C-\"\n\
    \        } else if grades[index] <= 1.0 && grades[index] >= 1.3 {\n          \
    \  letter_grades[index] = \"D+\"\n        } else if grades[index] <= 0.7 && grades[index]\
    \ >= 1.0 {\n            letter_grades[index] = \"D\"\n        } else if grades[index]\
    \ <= 0.0 && grades[index] >= 0.7 {\n            letter_grades[index] = \"D-\"\n\
    \        } else {\n            letter_grades[index] = \"E\"\n        }\n    }\n\
    \    return letter_grades\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T)\
    \ {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected:\
    \ []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"\
    D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"}\
    \ },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpk9hgq_65_test.go:84: expected '[A+ B C- C A-]', got '[E\
    \ A+ A+ A+ A]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n\
    \        tmpk9hgq_65_test.go:84: expected '[D+]', got '[A+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2\
    \ (0.00s)\n        tmpk9hgq_65_test.go:84: expected '[D-]', got '[A+]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmpk9hgq_65_test.go:84:\
    \ expected '[E]', got '[A+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpk9hgq_65_test.go:84: expected '[D D- C- B B+]', got '[A+\
    \ A+ A+ A+ A]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmpk9hgq_65_test.go:84: expected '[E D-]', got '[A+ A+]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075612
- exit_code: 2
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var grade float64\n    grades := append([]float64{},\
    \ grades...)\n    for i := range grades {\n        grade = grades[i]\n       \
    \ if grade > 4 {\n            grade = 4\n        }\n        if grade < 0 {\n \
    \           grade = 0\n        }\n        if grade < 3 {\n            grade =\
    \ 3\n        }\n        if grade <= 2.0 {\n            grade = grade - 0.01\n\
    \        }\n        if grade <= 1.7 {\n            grade = grade - 0.04\n    \
    \    }\n        if grade <= 1.0 {\n            grade = grade - 0.06\n        }\n\
    \        if grade <= 0.7 {\n            grade = grade - 0.07\n        }\n    \
    \    if grade <= 0.0 {\n            grade = grade - 0.08\n        }\n        grades[i]\
    \ = grade\n    }\n    grades = append([]float64{}, grades...)\n    for i := range\
    \ grades {\n        grade = grades[i]\n        if grade > 4 {\n            grade\
    \ = 4\n        }\n        if grade < 0 {\n            grade = 0\n        }\n \
    \       if grade < 3 {\n            grade = 3\n        }\n        if grade <=\
    \ 2.0 {\n            grade = grade - 0.01\n        }\n        if grade <= 1.7\
    \ {\n            grade = grade - 0.04\n        }\n        if grade <= 1.0 {\n\
    \            grade = grade - 0.06\n        }\n        if grade <= 0.7 {\n    \
    \        grade = grade - 0.07\n        }\n        if grade <= 0.0 {\n        \
    \    grade = grade - 0.08\n        }\n        grades[i] = grade\n    }\n    grades\
    \ = append([]float64{}, grades...)\n    for i := range grades {\n        grade\
    \ = grades[i]\n        if grade > 4 {\n            grade = 4\n        }\n    \
    \    if grade < 0 {\n            grade = 0\n        }\n        if grade < 3 {\n\
    \            grade = 3\n        }\n        if grade <= 2.0 {\n            grade\
    \ = grade - 0.01\n        }\n        if grade <= 1.7 {\n            grade = grade\
    \ - 0.04\n        }\n        if grade <= 1.0 {\n            grade = grade - 0.06\n\
    \        }\n        if grade <= 0.7 {\n            grade = grade - 0.07\n    \
    \    }\n        if grade <= 0.0 {\n            grade = grade - 0.08\n        }\n\
    \        grades[i] = grade\n    }\n    return grades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi9m5h4r3_test.go:32:12: no new variables on left side of :=

    /tmp/tmpi9m5h4r3_test.go:119:12: cannot use grades (variable of type []float64)
    as type []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075612
- exit_code: 2
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var letter string\n    var gpas []float64\n    for\
    \ _, gp := range grades {\n        if gp > 0.0 {\n            gpas = append(gpas,\
    \ gp)\n        } else {\n            gpas = append(gpas, 0)\n        }\n    }\n\
    \    sort.Float64s(gpas)\n    for len(gpas) > 0 {\n        if gpas[len(gpas)-1]\
    \ <= 3.0 {\n            letter = \"A+\"\n            break\n        } else if\
    \ gpas[len(gpas)-1] <= 2.7 {\n            letter = \"A\"\n            break\n\
    \        } else if gpas[len(gpas)-1] <= 2.3 {\n            letter = \"A-\"\n \
    \           break\n        } else if gpas[len(gpas)-1] <= 1.9 {\n            letter\
    \ = \"B+\"\n            break\n        } else if gpas[len(gpas)-1] <= 1.7 {\n\
    \            letter = \"B\"\n            break\n        } else if gpas[len(gpas)-1]\
    \ <= 1.3 {\n            letter = \"B-\"\n            break\n        } else if\
    \ gpas[len(gpas)-1] <= 0.9 {\n            letter = \"C+\"\n            break\n\
    \        } else if gpas[len(gpas)-1] <= 0.7 {\n            letter = \"C\"\n  \
    \          break\n        } else if gpas[len(gpas)-1] <= 0.3 {\n            letter\
    \ = \"C-\"\n            break\n        } else if gpas[len(gpas)-1] <= 0.0 {\n\
    \            letter = \"D+\"\n            break\n        } else if gpas[len(gpas)-1]\
    \ <= -0.3 {\n            letter = \"D\"\n            break\n        } else if\
    \ gpas[len(gpas)-1] <= -0.7 {\n            letter = \"D-\"\n            break\n\
    \        } else if gpas[len(gpas)-1] <= -1.3 {\n            letter = \"E\"\n \
    \           break\n        }\n        gpas = append(gpas, 0)\n    }\n    return\
    \ []string{letter}\n}\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate\
    \ := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0,\
    \ 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n\
    \     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n   \
    \  { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     {\
    \ actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual:\
    \ candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}),\
    \ expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppo53jr6r_test.go:40:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075612
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    grades_length := len(grades)\n    if grades_length\
    \ != 5 {\n        fmt.Println(\"You didn't provide enough grades for calculation\"\
    )\n    }\n    letter_grades := []string{}\n    for _, grade := range grades {\n\
    \        if grade >= 4.0 {\n            letter_grades = append(letter_grades,\
    \ \"A+\")\n        } else if grade >= 3.7 {\n            letter_grades = append(letter_grades,\
    \ \"A\")\n        } else if grade >= 3.3 {\n            letter_grades = append(letter_grades,\
    \ \"A-\")\n        } else if grade >= 3.0 {\n            letter_grades = append(letter_grades,\
    \ \"B+\")\n        } else if grade >= 2.7 {\n            letter_grades = append(letter_grades,\
    \ \"B\")\n        } else if grade >= 2.3 {\n            letter_grades = append(letter_grades,\
    \ \"B-\")\n        } else if grade >= 2.0 {\n            letter_grades = append(letter_grades,\
    \ \"C+\")\n        } else if grade >= 1.7 {\n            letter_grades = append(letter_grades,\
    \ \"C\")\n        } else if grade >= 1.3 {\n            letter_grades = append(letter_grades,\
    \ \"C-\")\n        } else if grade >= 1.0 {\n            letter_grades = append(letter_grades,\
    \ \"D+\")\n        } else if grade >= 0.7 {\n            letter_grades = append(letter_grades,\
    \ \"D\")\n        } else if grade >= 0.0 {\n            letter_grades = append(letter_grades,\
    \ \"D-\")\n        } else {\n            letter_grades = append(letter_grades,\
    \ \"E\")\n        }\n    }\n    return letter_grades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "You didn't provide enough grades for calculation\nYou didn't provide enough\
    \ grades for calculation\nYou didn't provide enough grades for calculation\nYou\
    \ didn't provide enough grades for calculation\n--- FAIL: TestNumerical_Letter_Grade\
    \ (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0 (0.00s)\n    \
    \    tmpv_9kso06_test.go:86: expected '[A+ B C- C A-]', got '[A+ B+ C C+ A-]'\n\
    \    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmpv_9kso06_test.go:86:\
    \ expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpv_9kso06_test.go:86: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmpv_9kso06_test.go:86: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075612
- exit_code: 2
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    // Write your code here\n    // Don't forget to handle\
    \ exceptions when you can\n    var letterGrades []string\n    switch grades[len(grades)-1]\
    \ {\n    case 4.0:\n        letterGrades = append(letterGrades, \"A+\")\n    case\
    \ 3.7:\n        letterGrades = append(letterGrades, \"A\")\n    case 3.3:\n  \
    \      letterGrades = append(letterGrades, \"A-\")\n    case 3.0:\n        letterGrades\
    \ = append(letterGrades, \"B+\")\n    case 2.7:\n        letterGrades = append(letterGrades,\
    \ \"B\")\n    case 2.3:\n        letterGrades = append(letterGrades, \"B-\")\n\
    \    case 2.0:\n        letterGrades = append(letterGrades, \"C+\")\n    case\
    \ 1.7:\n        letterGrades = append(letterGrades, \"C\")\n    case 1.3:\n  \
    \      letterGrades = append(letterGrades, \"C-\")\n    case 1.0:\n        letterGrades\
    \ = append(letterGrades, \"D+\")\n    case 0.7:\n        letterGrades = append(letterGrades,\
    \ \"D\")\n    case 0.0:\n        letterGrades = append(letterGrades, \"D-\")\n\
    \    case 0.0:\n        letterGrades = append(letterGrades, \"E\")\n    default:\n\
    \        fmt.Println(\"There was an input error\")\n    }\n    return letterGrades\n\
    }\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpclj87f5t_test.go:59:10:\
    \ duplicate case 0.0 (constant 0 of type float64) in expression switch\n\t/tmp/tmpclj87f5t_test.go:57:10:\
    \ previous case\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075613
- exit_code: 2
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    grades := make([]float64, len(grades))\n    grades[0],\
    \ grades[1] = grades[1]-0.5, grades[0]\n    for i := 2; i < len(grades); i++ {\n\
    \        grades[i] = grades[i-1] + (grades[i] - grades[i-1])/(grades[i-1]-grades[i-2])\n\
    \    }\n    grades := grades[0:len(grades)-1]\n    grades := append(grades, 0.0)\n\
    \    grades = append(grades, grades[len(grades)-1])\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, grades[0])\n    grades = append(grades, 0.0)\n\
    \    return grades\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate\
    \ := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0,\
    \ 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n\
    \     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n   \
    \  { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     {\
    \ actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual:\
    \ candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}),\
    \ expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzscv6x0i_test.go:31:12: no new variables on left side of :=

    /tmp/tmpzscv6x0i_test.go:36:12: no new variables on left side of :=

    /tmp/tmpzscv6x0i_test.go:37:12: no new variables on left side of :=

    /tmp/tmpzscv6x0i_test.go:42:12: cannot use grades (variable of type []float64)
    as type []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075613
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 1.0)\n    grades = append(grades, 2.0)\n    grades = append(grades, 3.0)\n \
    \   grades = append(grades, 3.1)\n    grades = append(grades, 3.5)\n    grades\
    \ = append(grades, 4.0)\n    grades = append(grades, 5.0)\n    grades = append(grades,\
    \ 6.0)\n    grades = append(grades, 7.0)\n    grades = append(grades, 8.0)\n \
    \   grades = append(grades, 9.0)\n    grades = append(grades, 10.0)\n    grades\
    \ = append(grades, 11.0)\n    grades = append(grades, 12.0)\n    grades = append(grades,\
    \ 12.5)\n    grades = append(grades, 13.0)\n    grades = append(grades, 13.5)\n\
    \    grades = append(grades, 14.0)\n    grades = append(grades, 14.5)\n    grades\
    \ = append(grades, 15.0)\n    grades = append(grades, 15.5)\n    grades = append(grades,\
    \ 16.0)\n    grades = append(grades, 16.5)\n    grades = append(grades, 17.0)\n\
    \    grades = append(grades, 17.5)\n    grades = append(grades, 18.0)\n    grades\
    \ = append(grades, 18.5)\n    grades = append(grades, 19.0)\n    grades = append(grades,\
    \ 19.5)\n    grades = append(grades, 20.0)\n    grades = append(grades, 20.5)\n\
    \    grades = append(grades, 20.5)\n    grades = append(grades, 20.5)\n    grades\
    \ = append(grades, 20.5)\n    grades = append(grades, 20.5)\n    grades = append(grades,\
    \ 20.5)\n    grades = append(grades, 20.5)\n    grades = append(grades, 20.5)\n\
    \    grades = append(grades, 20.5)\n    grades = append(grades, 20.5)\n    grades\
    \ = append(grades, 20.5)\n    grades = append(grades, 20.5)\n    grades = append(grades,\
    \ 20.5)\n    grades = append(grades, 20.5)\n    grades = append(grades, 20.5)\n\
    \    grades = append(grades, 20.5)\n    grades = append(grades, 20.5)\n    grades\
    \ = append(grades, 20.5)\n    grades = append(grades, 20.5)\n    grades = append(grades,\
    \ 20.5)\n    grades = append(grades, 20.5)\n    grades = append(grades, 20.5)\n\
    \    grades = append(grades, 20.5)\n    grades = append(grades, 20.5)\n    grades\
    \ = append(grades, 20.5)\n    grades = append(grades, 20.5)\n    grade\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpack6__fy_test.go:89:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075612
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    if len(grades) < 1 {\n        return nil\n    }\n\
    \n    var letter_grades []string\n\n    for _, grade := range grades {\n     \
    \   letter_grade := \"\"\n        switch {\n        case grade > 3.7:\n      \
    \      letter_grade = \"A+\"\n        case grade > 3.3:\n            letter_grade\
    \ = \"A\"\n        case grade > 3:\n            letter_grade = \"A-\"\n      \
    \  case grade > 2.7:\n            letter_grade = \"B+\"\n        case grade >\
    \ 2.3:\n            letter_grade = \"B\"\n        case grade > 2:\n          \
    \  letter_grade = \"B-\"\n        case grade > 1.7:\n            letter_grade\
    \ = \"C+\"\n        case grade > 1.3:\n            letter_grade = \"C\"\n    \
    \    case grade > 1:\n            letter_grade = \"C-\"\n        case grade >\
    \ 0.7:\n            letter_grade = \"D+\"\n        case grade > 0.3:\n       \
    \     letter_grade = \"D\"\n        case grade > 0.0:\n            letter_grade\
    \ = \"D-\"\n        default:\n            letter_grade = \"E\"\n        }\n  \
    \      letter_grades = append(letter_grades, letter_grade)\n    }\n\n    return\
    \ letter_grades\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate\
    \ := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0,\
    \ 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n\
    \     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n   \
    \  { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     {\
    \ actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual:\
    \ candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}),\
    \ expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpu53n1ym__test.go:91: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n\
    \        tmpu53n1ym__test.go:91: expected '[D+]', got '[C-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2\
    \ (0.00s)\n        tmpu53n1ym__test.go:91: expected '[D-]', got '[D]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmpu53n1ym__test.go:91:\
    \ expected '[D D- C- B B+]', got '[D+ D- C B+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5\
    \ (0.00s)\n        tmpu53n1ym__test.go:91: expected '[E D-]', got '[E D]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075613
- exit_code: 2
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    gpa, letterGrade := grades[0], \"\"\n\n    // if\
    \ the first grade is zero, then ignore it\n    if grades[0] == 0 {\n        return\
    \ nil\n    }\n\n    // if the GPA is less than 3.0, assign \"A\"\n    if grades[0]\
    \ < 3 {\n        letterGrade = \"A\"\n    } else if grades[0] < 4.0 {\n      \
    \  letterGrade = \"A-\"\n    }\n\n    // if the GPA is greater than 3.0 and less\
    \ than 4.0,\n    // assign \"B\"\n    if grades[0] > 3.0 {\n        letterGrade\
    \ = \"B\"\n    } else if grades[0] > 4.0 {\n        letterGrade = \"B+\"\n   \
    \ }\n\n    // if the GPA is greater than 4.0, assign \"C\"\n    if grades[0] >\
    \ 4.0 {\n        letterGrade = \"C\"\n    }\n\n    // if the GPA is greater than\
    \ 4.0, assign \"C\"\n    if grades[0] > 4.0 {\n        letterGrade = \"C+\"\n\
    \    }\n\n    // if the GPA is greater than 4.0, assign \"D\"\n    if grades[0]\
    \ > 4.0 {\n        letterGrade = \"D\"\n    }\n\n    // if the GPA is greater\
    \ than 4.0, assign \"D-\"\n    if grades[0] > 4.0 {\n        letterGrade = \"\
    D-\"\n    }\n\n    // if the GPA is greater than 4.0, assign \"E\"\n    if grades[0]\
    \ > 4.0 {\n        letterGrade = \"E\"\n    }\n\n    // If the GPA is greater\
    \ than 4.0, assign \"F\"\n    if grades[0] > 4.0 {\n        letterGrade = \"F\"\
    \n    }\n\n    // Return grade\n    fmt.Println(letterGrade)\n    return []string{letterGrade}\n\
    }\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjgkz5ty5_test.go:31:5: gpa declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075613
- exit_code: 2
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var letterGrades []string\n    var minGPA float64\n\
    \n    gradeSlice := make([]float64, 0, len(grades))\n    gradeSlice = append(gradeSlice,\
    \ grades...)\n\n    sort.Float64s(gradeSlice)\n    i := 0\n    for {\n       \
    \ if i == len(gradeSlice) {\n            break\n        }\n\n        gpa := gradeSlice[i]\n\
    \n        if gpa > minGPA {\n            minGPA = gpa\n        }\n        i++\n\
    \    }\n\n    for i := 1; i <= 7; i++ {\n        if minGPA >= i*4 {\n        \
    \    letterGrades = append(letterGrades, \"A+\")\n        }\n        if minGPA\
    \ >= i*3 + 1 {\n            letterGrades = append(letterGrades, \"A\")\n     \
    \   }\n        if minGPA >= i*3 + 2 {\n            letterGrades = append(letterGrades,\
    \ \"A-\")\n        }\n        if minGPA >= i*3 + 3 {\n            letterGrades\
    \ = append(letterGrades, \"B+\")\n        }\n        if minGPA >= i*3 + 4 {\n\
    \            letterGrades = append(letterGrades, \"B\")\n        }\n        if\
    \ minGPA >= i*3 + 5 {\n            letterGrades = append(letterGrades, \"B-\"\
    )\n        }\n        if minGPA >= i*3 + 6 {\n            letterGrades = append(letterGrades,\
    \ \"C+\")\n        }\n        if minGPA >= i*3 + 7 {\n            letterGrades\
    \ = append(letterGrades, \"C\")\n        }\n        if minGPA >= i*3 + 8 {\n \
    \           letterGrades = append(letterGrades, \"C-\")\n        }\n        if\
    \ minGPA >= i*3 + 9 {\n            letterGrades = append(letterGrades, \"D+\"\
    )\n        }\n        if minGPA >= i*3 + 10 {\n            letterGrades = append(letterGrades,\
    \ \"D\")\n        }\n        if minGPA >= i*3 + 11 {\n            letterGrades\
    \ = append(letterGrades, \"D-\")\n        }\n        if minGPA >= i*3 + 12 {\n\
    \            letterGrades = append(letterGrades, \"E\")\n        }\n    }\n\n\
    \    return letterGrades\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n\
    \  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0,\
    \ 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n\
    \     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n   \
    \  { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     {\
    \ actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual:\
    \ candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}),\
    \ expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp29jgtub9_test.go:37:5: undefined: sort

    /tmp/tmp29jgtub9_test.go:53:22: invalid operation: minGPA >= i * 4 (mismatched
    types float64 and int)

    /tmp/tmp29jgtub9_test.go:56:22: invalid operation: minGPA >= i * 3 + 1 (mismatched
    types float64 and int)

    /tmp/tmp29jgtub9_test.go:59:22: invalid operation: minGPA >= i * 3 + 2 (mismatched
    types float64 and int)

    /tmp/tmp29jgtub9_test.go:62:22: invalid operation: minGPA >= i * 3 + 3 (mismatched
    types float64 and int)

    /tmp/tmp29jgtub9_test.go:65:22: invalid operation: minGPA >= i * 3 + 4 (mismatched
    types float64 and int)

    /tmp/tmp29jgtub9_test.go:68:22: invalid operation: minGPA >= i * 3 + 5 (mismatched
    types float64 and int)

    /tmp/tmp29jgtub9_test.go:71:22: invalid operation: minGPA >= i * 3 + 6 (mismatched
    types float64 and int)

    /tmp/tmp29jgtub9_test.go:74:22: invalid operation: minGPA >= i * 3 + 7 (mismatched
    types float64 and int)

    /tmp/tmp29jgtub9_test.go:77:22: invalid operation: minGPA >= i * 3 + 8 (mismatched
    types float64 and int)

    /tmp/tmp29jgtub9_test.go:77:22: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075613
- exit_code: 2
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var grades_string []string\n    var letter_grade\
    \ string\n    var gpa float64\n\n    grades_string := []string{\"A+\", \"A\",\
    \ \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\"\
    , \"E\"}\n    \n    for i := 0; i < len(grades); i++ {\n        gpa := grades[i]\n\
    \        letter_grade := grades_string[i]\n        \n        if gpa > 3.3 {\n\
    \            letter_grade = \"B\"\n        }\n        \n        if gpa > 3.0 {\n\
    \            letter_grade = \"B-\"\n        }\n        \n        if gpa > 2.7\
    \ {\n            letter_grade = \"B\"\n        }\n        \n        if gpa > 2.3\
    \ {\n            letter_grade = \"B-\"\n        }\n        \n        if gpa >\
    \ 2.0 {\n            letter_grade = \"C\"\n        }\n        \n        if gpa\
    \ > 1.7 {\n            letter_grade = \"C\"\n        }\n        \n        if gpa\
    \ > 1.3 {\n            letter_grade = \"C-\"\n        }\n        \n        if\
    \ gpa > 1.0 {\n            letter_grade = \"D\"\n        }\n        \n       \
    \ if gpa > 0.7 {\n            letter_grade = \"D\"\n        }\n        \n    \
    \    if gpa > 0.0 {\n            letter_grade = \"D-\"\n        }\n        \n\
    \        if gpa == 0.0 {\n            letter_grade = \"E\"\n        }\n      \
    \  \n        if gpa == 0.7 {\n            letter_grade = \"D\"\n        }\n  \
    \      \n        if gpa == 1.3 {\n            letter_grade = \"D-\"\n        }\n\
    \        \n        if gpa == 1.7 {\n            letter_grade = \"C\"\n       \
    \ }\n        \n        if gpa == 2.0 {\n            letter_grade = \"C\"\n   \
    \     }\n        \n        if gpa == 2.3 {\n            letter_grade = \"C-\"\n\
    \        }\n        \n        if gpa == 2.7 {\n            letter_grade = \"B\"\
    \n        }\n        \n        if gpa == 3.0 {\n            letter_grade = \"\
    B\"\n        }\n        \n        if gpa == 3.3 {\n            letter_grade =\
    \ \"B-\"\n        }\n        \n        if gpa > 4.0 {\n            letter_grade\
    \ = \"A\"\n        }\n        \n        grades_string[i] = letter_grade\n    }\n\
    \    \n    return grades_string\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T)\
    \ {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected:\
    \ []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"\
    D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"}\
    \ },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3gglm4je_test.go:32:9: letter_grade declared but not used

    /tmp/tmp3gglm4je_test.go:33:9: gpa declared but not used

    /tmp/tmp3gglm4je_test.go:35:19: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075613
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    gradesLen := len(grades)\n    \n    letterGrades\
    \ := make([]string, gradesLen)\n    for i := 0; i < gradesLen; i++ {\n       \
    \ if grades[i] < 3.0 {\n            letterGrades[i] = \"E\"\n            break\n\
    \        } else if grades[i] < 3.7 && grades[i] > 3.0 {\n            letterGrades[i]\
    \ = \"D-\"\n        } else if grades[i] < 3.7 && grades[i] >= 3.3 {\n        \
    \    letterGrades[i] = \"C-\"\n        } else if grades[i] < 3.7 && grades[i]\
    \ >= 3.7 {\n            letterGrades[i] = \"B-\"\n        } else if grades[i]\
    \ < 3.7 && grades[i] >= 4.0 {\n            letterGrades[i] = \"B-\"\n        }\
    \ else if grades[i] < 3.7 && grades[i] >= 4.3 {\n            letterGrades[i] =\
    \ \"A-\"\n        } else if grades[i] < 3.7 && grades[i] >= 4.7 {\n          \
    \  letterGrades[i] = \"A+\"\n        } else if grades[i] < 3.7 && grades[i] >=\
    \ 5.0 {\n            letterGrades[i] = \"B+\"\n        } else if grades[i] < 3.7\
    \ && grades[i] >= 5.3 {\n            letterGrades[i] = \"B\"\n        } else if\
    \ grades[i] < 3.7 && grades[i] >= 5.7 {\n            letterGrades[i] = \"C\"\n\
    \        } else if grades[i] < 3.7 && grades[i] >= 6.0 {\n            letterGrades[i]\
    \ = \"C\"\n        } else if grades[i] < 3.7 && grades[i] >= 6.3 {\n         \
    \   letterGrades[i] = \"C\"\n        } else if grades[i] < 3.7 && grades[i] >=\
    \ 6.7 {\n            letterGrades[i] = \"C\"\n        } else if grades[i] < 3.7\
    \ && grades[i] >= 7.0 {\n            letterGrades[i] = \"D+\"\n        } else\
    \ if grades[i] < 3.7 && grades[i] >= 7.3 {\n            letterGrades[i] = \"D\"\
    \n        } else if grades[i] < 3.7 && grades[i] >= 7.7 {\n            letterGrades[i]\
    \ = \"D\"\n        } else if grades[i] < 3.7 && grades[i] >= 8.0 {\n         \
    \   letterGrades[i] = \"D\"\n        } else if grades[i] < 3.7 && grades[i] >=\
    \ 8.3 {\n            letterGrades[i] = \"D\"\n        } else if grades[i] < 3.7\
    \ && grades[i] >= 8.7 {\n            letterGrades[i] = \"D\"\n        } else if\
    \ grades[i] < 3.7 && grades[i] >= 9.0 {\n            letterGra\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpy3qc8ki1_test.go:76:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075612
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    letters := make([]string, len(grades))\n    \n  \
    \  for index, grade := range grades {\n        letters[index] = fmt.Sprintf(\"\
    %f\", grade) + \"+\"\n    }\n    for index, grade := range grades {\n        if\
    \ grade > 3.0 {\n            letters[index] = fmt.Sprintf(\"%f\", grade) + \"\
    -\"\n        }\n    }\n    for index, grade := range grades {\n        if grade\
    \ > 2.0 {\n            letters[index] = fmt.Sprintf(\"%f\", grade) + \"+\"\n \
    \       }\n    }\n    for index, grade := range grades {\n        if grade > 1.7\
    \ {\n            letters[index] = fmt.Sprintf(\"%f\", grade) + \"+\"\n       \
    \ }\n    }\n    for index, grade := range grades {\n        if grade > 1.0 {\n\
    \            letters[index] = fmt.Sprintf(\"%f\", grade) + \"-\"\n        }\n\
    \    }\n    for index, grade := range grades {\n        if grade > 0.7 {\n   \
    \         letters[index] = fmt.Sprintf(\"%f\", grade) + \"+\"\n        }\n   \
    \ }\n    for index, grade := range grades {\n        if grade > 0.3 {\n      \
    \      letters[index] = fmt.Sprintf(\"%f\", grade) + \"-\"\n        }\n    }\n\
    \    for index, grade := range grades {\n        if grade > 0.1 {\n          \
    \  letters[index] = fmt.Sprintf(\"%f\", grade) + \"-\"\n        }\n    }\n   \
    \ for index, grade := range grades {\n        if grade > 0.0 {\n            letters[index]\
    \ = fmt.Sprintf(\"%f\", grade) + \"-\"\n        }\n    }\n    for index, grade\
    \ := range grades {\n        if grade < 0.0 {\n            letters[index] = fmt.Sprintf(\"\
    %f\", grade) + \"+\"\n        }\n    }\n    for index, grade := range grades {\n\
    \        letters[index] = fmt.Sprintf(\"%f\", grade)\n    }\n\n    return letters\n\
    }\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmp0hnh1ux__test.go:106: expected '[A+ B C- C A-]', got '[4.000000\
    \ 3.000000 1.700000 2.000000 3.500000]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__1\
    \ (0.00s)\n        tmp0hnh1ux__test.go:106: expected '[D+]', got '[1.200000]'\n\
    \    --- FAIL: TestNumerical_Letter_Grade/test_num__2 (0.00s)\n        tmp0hnh1ux__test.go:106:\
    \ expected '[D-]', got '[0.500000]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3\
    \ (0.00s)\n        tmp0hnh1ux__test.go:106: expected '[E]', got '[0.000000]'\n\
    \    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmp0hnh1ux__test.go:106:\
    \ expected '[D D- C- B B+]', got '[1.000000 0.300000 1.500000 2.800000 3.300000]'\n\
    \    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmp0hnh1ux__test.go:106:\
    \ expected '[E D-]', got '[0.000000 0.700000]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075613
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    grades = append(grades, 0)\n    \n    var res []string\n\
    \    for i := len(grades)-1; i >= 0; i-- {\n        sum += grades[i]\n       \
    \ if sum > 3.0 {\n            res[i] += \"+\"\n            sum -= 4.0\n      \
    \  } else if sum < 3.0 {\n            res[i] += \"-\"\n            sum -= 3.0\n\
    \        } else {\n            res[i] = \"E\"\n            break\n        }\n\
    \    }\n    return res\n}\n</code>\n<|/ a tags=algorithm,go,functional-programming\
    \ |>\n<| a tags=algorithm,go,functional-programming |>\nHere's another answer\
    \ that uses functional programming.  This is in javascript and I haven't tested\
    \ it thoroughly because I haven't done any work with go, but it should work. \
    \ It works on small arrays, but should be able to scale to larger arrays.  Since\
    \ we only need to handle a small number of possible grades, we can use the switch\
    \ statement to determine what the grade should be.  Then, we use a map to keep\
    \ track of what letter grade we should be using.\n<code>\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpsncid875_test.go:49:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075613
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    // Write your code here\n    letters := make([]string,\
    \ len(grades))\n    \n    for i := range letters {\n        switch grades[i] {\n\
    \        case 0 :\n            letters[i] = \"E\"\n            break\n       \
    \ case 1 :\n            letters[i] = \"D-\"\n            break\n        case 2\
    \ :\n            letters[i] = \"C-\"\n            break\n        case 3 :\n  \
    \          letters[i] = \"C\"\n            break\n        case 4 :\n         \
    \   letters[i] = \"B-\"\n            break\n        case 5 :\n            letters[i]\
    \ = \"B\"\n            break\n        case 6 :\n            letters[i] = \"A-\"\
    \n            break\n        case 7 :\n            letters[i] = \"A\"\n      \
    \      break\n        case 8 :\n            letters[i] = \"A+\"\n            break\n\
    \        case 9 :\n            letters[i] = \"D+\"\n            break\n      \
    \  default:\n            letters[i] = \"A+\"\n        }\n    }\n    \n    return\
    \ letters\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate :=\
    \ numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0,\
    \ 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n\
    \     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n   \
    \  { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     {\
    \ actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual:\
    \ candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}),\
    \ expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpv6yh5glf_test.go:92: expected '[A+ B C- C A-]', got '[B-\
    \ C A+ C- A+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n\
    \        tmpv6yh5glf_test.go:92: expected '[D+]', got '[A+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2\
    \ (0.00s)\n        tmpv6yh5glf_test.go:92: expected '[D-]', got '[A+]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmpv6yh5glf_test.go:92:\
    \ expected '[D D- C- B B+]', got '[D- A+ A+ A+ A+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5\
    \ (0.00s)\n        tmpv6yh5glf_test.go:92: expected '[E D-]', got '[E A+]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075614
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    // Your code goes here\n    letterGrades := make([]string,\
    \ len(grades))\n    for i := range letterGrades {\n        letterGrades[i] = \"\
    E\"\n    }\n\n    for _, grade := range grades {\n        if grade < 3.0 {\n \
    \           if grade >= 2.7 {\n                letterGrades[0] = \"B+\"\n    \
    \        } else if grade >= 2.3 {\n                letterGrades[0] = \"B\"\n \
    \           } else if grade >= 2.0 {\n                letterGrades[0] = \"B-\"\
    \n            } else if grade >= 1.7 {\n                letterGrades[0] = \"C+\"\
    \n            } else if grade >= 1.3 {\n                letterGrades[0] = \"C\"\
    \n            } else if grade >= 1.0 {\n                letterGrades[0] = \"C-\"\
    \n            } else if grade >= 0.7 {\n                letterGrades[0] = \"D+\"\
    \n            } else if grade >= 0.0 {\n                letterGrades[0] = \"D\"\
    \n            } else {\n                letterGrades[0] = \"D-\"\n           \
    \ }\n        } else if grade >= 3.0 {\n            if grade >= 3.7 {\n       \
    \         letterGrades[1] = \"A+\"\n            } else if grade >= 3.3 {\n   \
    \             letterGrades[1] = \"A\"\n            } else if grade >= 3.0 {\n\
    \                letterGrades[1] = \"A-\"\n            } else if grade >= 2.7\
    \ {\n                letterGrades[2] = \"B+\"\n            } else if grade >=\
    \ 2.3 {\n                letterGrades[2] = \"B\"\n            } else if grade\
    \ >= 2.0 {\n                letterGrades[2] = \"B-\"\n            } else if grade\
    \ >= 1.7 {\n                letterGrades[3] = \"C+\"\n            } else if grade\
    \ >= 1.3 {\n                letterGrades[3] = \"C\"\n            } else if grade\
    \ >= 1.0 {\n                letterGrades[3] = \"C-\"\n            } else if grade\
    \ >= 0.7 {\n                letterGrades[3] = \"D+\"\n            } else if grade\
    \ >= 0.0 {\n                letterGrades[3] = \"D\"\n            } else {\n  \
    \              letterGrades[3] = \"D-\"\n            }\n        } else if grade\
    \ >= 4.0 {\n            if grade >= 4.7 {\n                letterGrades[4] = \"\
    A+\"\n            } else if grade >= 4.3 {\n                letterGrades[4] =\
    \ \"A\"\n            } else if grade >= 4.0 {\n                letterGrades[4]\
    \ = \"A-\"\n            } else if grade >= 3.7 {\n                letter\nfunc\
    \ TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp27ufp32f_test.go:93:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075613
- exit_code: 2
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    // Your code goes here\n    gpas := []float64{4.0,\
    \ 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7}\n    result := []string{}\n\
    \    var index int\n\n    for index := range grades {\n        if grades[index]\
    \ > 0.0 {\n            result += append(result, fmt.Sprintf(\"%.1f\", grades[index]))\n\
    \        } else if grades[index] == 0.0 {\n            result += append(result,\
    \ \"E\")\n        }\n    }\n\n    return result\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5fqaguth_test.go:32:5: gpas declared but not used

    /tmp/tmp5fqaguth_test.go:34:9: index declared but not used

    /tmp/tmp5fqaguth_test.go:38:13: invalid operation: operator + not defined on result
    (variable of type []string)

    /tmp/tmp5fqaguth_test.go:40:13: invalid operation: operator + not defined on result
    (variable of type []string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075614
- exit_code: 2
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    gradesLen := len(grades)\n    if gradesLen == 0 {\n\
    \        return nil\n    }\n\n    // The formula used is\n    //     GPA + 5 -\
    \ GPA * 10 / 100\n    // but we get rid of GPA by dividing by 100.\n    sum, i\
    \ := 0.0, 0\n    for i < gradesLen {\n        sum += grades[i]\n        i++\n\
    \    }\n    sum /= 100.0\n    i := 0\n    var gradeList []string\n\n    for i\
    \ < gradesLen {\n        // The formula used is\n        //     GPA + 5 - GPA\
    \ * 10 / 100\n        // but we get rid of GPA by dividing by 100.\n        diff\
    \ := 5 - (grades[i] + sum)\n        // The formula used is\n        //     GPA\
    \ + 5 - GPA * 10 / 100\n        // but we get rid of GPA by dividing by 100.\n\
    \        letter := grades[i] + \"\"\n        letter += fmt.Sprintf(\"%c\", letter[diff])\
    \ // Letter - Letter[diff]\n        gradeList = append(gradeList, letter)\n  \
    \      i++\n    }\n    return gradeList\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmph9wqroyy_test.go:45:7: no new variables on left side of :=

    /tmp/tmph9wqroyy_test.go:56:19: invalid operation: grades[i] + "" (mismatched
    types float64 and untyped string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075614
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    result := []string{}\n    counter := 0\n    for _,\
    \ grade := range grades {\n        counter += 1\n        if grade > 3.7 {\n  \
    \          result = append(result, \"A+\")\n        } else if grade > 3.3 {\n\
    \            result = append(result, \"A\")\n        } else if grade > 3.0 {\n\
    \            result = append(result, \"B+\")\n        } else if grade > 2.7 {\n\
    \            result = append(result, \"B\")\n        } else if grade > 2.3 {\n\
    \            result = append(result, \"B-\")\n        } else if grade > 2.0 {\n\
    \            result = append(result, \"C+\")\n        } else if grade > 1.7 {\n\
    \            result = append(result, \"C\")\n        } else if grade > 1.3 {\n\
    \            result = append(result, \"C-\")\n        } else if grade > 1.0 {\n\
    \            result = append(result, \"D+\")\n        } else if grade > 0.7 {\n\
    \            result = append(result, \"D\")\n        } else if grade > 0.0 {\n\
    \            result = append(result, \"D-\")\n        } else {\n            result\
    \ = append(result, \"E\")\n        }\n    }\n    return append(result, \"E\")\n\
    }\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmp3j20yr3t_test.go:82: expected '[A+ B C- C A-]', got '[A+\
    \ B C- C A E]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n\
    \        tmp3j20yr3t_test.go:82: expected '[D+]', got '[D+ E]'\n    --- FAIL:\
    \ TestNumerical_Letter_Grade/test_num__2 (0.00s)\n        tmp3j20yr3t_test.go:82:\
    \ expected '[D-]', got '[D- E]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3\
    \ (0.00s)\n        tmp3j20yr3t_test.go:82: expected '[E]', got '[E E]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmp3j20yr3t_test.go:82:\
    \ expected '[D D- C- B B+]', got '[D D- C- B B+ E]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5\
    \ (0.00s)\n        tmp3j20yr3t_test.go:82: expected '[E D-]', got '[E D- E]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075614
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    gradesList := make([]string, 0, len(grades)*len(grades))\n\
    \    for _, grade := range grades {\n        if grade >= 0 && grade < 4.0 {\n\
    \            gradesList = append(gradesList, \"A+\")\n        } else if grade\
    \ >= 4.0 && grade < 6.0 {\n            gradesList = append(gradesList, \"A\")\n\
    \        } else if grade >= 6.0 && grade < 7.0 {\n            gradesList = append(gradesList,\
    \ \"A-\")\n        } else if grade >= 7.0 && grade < 8.0 {\n            gradesList\
    \ = append(gradesList, \"B+\")\n        } else if grade >= 8.0 && grade < 9.0\
    \ {\n            gradesList = append(gradesList, \"B\")\n        } else if grade\
    \ >= 9.0 && grade < 10.0 {\n            gradesList = append(gradesList, \"B-\"\
    )\n        } else if grade >= 10.0 && grade < 11.0 {\n            gradesList =\
    \ append(gradesList, \"C+\")\n        } else if grade >= 11.0 && grade < 12.0\
    \ {\n            gradesList = append(gradesList, \"C\")\n        } else if grade\
    \ >= 12.0 && grade < 13.0 {\n            gradesList = append(gradesList, \"C-\"\
    )\n        } else if grade >= 13.0 && grade < 14.0 {\n            gradesList =\
    \ append(gradesList, \"D+\")\n        } else if grade >= 14.0 && grade < 15.0\
    \ {\n            gradesList = append(gradesList, \"D\")\n        } else if grade\
    \ >= 15.0 && grade < 16.0 {\n            gradesList = append(gradesList, \"D-\"\
    )\n        } else if grade >= 16.0 && grade < 17.0 {\n            gradesList =\
    \ append(gradesList, \"E\")\n        }\n    }\n    return gradesList\n}\n\nfunc\
    \ TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmp4y3erh1__test.go:82: expected '[A+ B C- C A-]', got '[A\
    \ A+ A+ A+ A+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n\
    \        tmp4y3erh1__test.go:82: expected '[D+]', got '[A+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2\
    \ (0.00s)\n        tmp4y3erh1__test.go:82: expected '[D-]', got '[A+]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmp4y3erh1__test.go:82:\
    \ expected '[E]', got '[A+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmp4y3erh1__test.go:82: expected '[D D- C- B B+]', got '[A+\
    \ A+ A+ A+ A+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmp4y3erh1__test.go:82: expected '[E D-]', got '[A+ A+]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075614
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    letters := make([]string, 0, len(grades))\n    //\
    \ Looping through the list of GPAs\n    for i := 0; i < len(grades); i++ {\n \
    \       // Converting to Grade Point Average\n        average := (grades[i] +\
    \ grades[i+1]) / 2.0\n        // Converting the Grade Point Average to letter\
    \ grade\n        if average >= 4.0 && average < 4.7 {\n            letters = append(letters,\
    \ \"A+\")\n        } else if average >= 3.7 && average < 3.9 {\n            letters\
    \ = append(letters, \"A\")\n        } else if average >= 3.3 && average < 3.7\
    \ {\n            letters = append(letters, \"A-\")\n        } else if average\
    \ >= 3.0 && average < 3.3 {\n            letters = append(letters, \"B+\")\n \
    \       } else if average >= 2.7 && average < 2.9 {\n            letters = append(letters,\
    \ \"B\")\n        } else if average >= 2.3 && average < 2.7 {\n            letters\
    \ = append(letters, \"B-\")\n        } else if average >= 2.0 && average < 2.3\
    \ {\n            letters = append(letters, \"C+\")\n        } else if average\
    \ >= 1.7 && average < 1.9 {\n            letters = append(letters, \"C\")\n  \
    \      } else if average >= 1.3 && average < 1.7 {\n            letters = append(letters,\
    \ \"C-\")\n        } else if average >= 1.0 && average < 1.3 {\n            letters\
    \ = append(letters, \"D+\")\n        } else if average >= 0.7 && average < 0.9\
    \ {\n            letters = append(letters, \"D\")\n        } else if average >=\
    \ 0.0 {\n            letters = append(letters, \"D-\")\n        } else if average\
    \ < 0.0 {\n            letters = append(letters, \"E\")\n        }\n    }\n  \
    \  return letters\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate\
    \ := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0,\
    \ 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n\
    \     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n   \
    \  { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     {\
    \ actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual:\
    \ candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}),\
    \ expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\npanic: runtime error: index\
    \ out of range [5] with length 5 [recovered]\n\tpanic: runtime error: index out\
    \ of range [5] with length 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x514720,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x514720, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.numerical_letter_grade({0xc0000c45f8, 0x5,\
    \ 0x0?})\n\t/tmp/tmp77n_7po2_test.go:35 +0x1209\ncommand-line-arguments_test.TestNumerical_Letter_Grade(0x0?)\n\
    \t/tmp/tmp77n_7po2_test.go:75 +0xc2\ntesting.tRunner(0xc0001a01a0, 0x52a060)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075614
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var g []string\n    var i int\n    for i = 0; i <\
    \ len(grades); i++ {\n        if grades[i] >= 4.0 {\n            g = []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"}\n            break\n        } else if grades[i]\
    \ >= 3.7 {\n            g = []string{\"A\", \"B\", \"C\", \"C\", \"A-\"}\n   \
    \         break\n        } else if grades[i] >= 3.3 {\n            g = []string{\"\
    A\", \"-\", \"B\", \"C\", \"A-\"}\n            break\n        } else if grades[i]\
    \ >= 3.0 {\n            g = []string{\"B+\", \"B\", \"B-\", \"B\", \"B-\"}\n \
    \           break\n        } else if grades[i] >= 2.7 {\n            g = []string{\"\
    B\", \"B\", \"B\", \"B\", \"B-\"}\n            break\n        } else if grades[i]\
    \ >= 2.3 {\n            g = []string{\"B-\", \"B\", \"B-\", \"B\", \"B-\"}\n \
    \           break\n        } else if grades[i] >= 2.0 {\n            g = []string{\"\
    C+\", \"C\", \"C\", \"C\", \"C-\"}\n            break\n        } else if grades[i]\
    \ >= 1.7 {\n            g = []string{\"C\", \"C\", \"C\", \"C\", \"C-\"}\n   \
    \         break\n        } else if grades[i] >= 1.3 {\n            g = []string{\"\
    C-\", \"C\", \"C-\", \"C\", \"C-\"}\n            break\n        } else if grades[i]\
    \ >= 1.0 {\n            g = []string{\"D+\", \"D\", \"D\", \"D\", \"D-\"}\n  \
    \          break\n        } else if grades[i] >= 0.7 {\n            g = []string{\"\
    D\", \"D\", \"D\", \"D\", \"D-\"}\n            break\n        } else if grades[i]\
    \ == 0.0 {\n            g = []string{\"E\"}\n            break\n        }\n  \
    \  }\n    return g\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate\
    \ := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0,\
    \ 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n\
    \     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n   \
    \  { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     {\
    \ actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual:\
    \ candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}),\
    \ expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__1\
    \ (0.00s)\n        tmp7uajtqxv_test.go:93: expected '[D+]', got '[D+ D D D D-]'\n\
    \    --- FAIL: TestNumerical_Letter_Grade/test_num__2 (0.00s)\n        tmp7uajtqxv_test.go:93:\
    \ expected '[D-]', got '[]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmp7uajtqxv_test.go:93: expected '[D D- C- B B+]', got '[D+\
    \ D D D D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n \
    \       tmp7uajtqxv_test.go:93: expected '[E D-]', got '[E]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075614
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var letters []string\n    var counter int\n    for\
    \ _, grade := range grades {\n        switch {\n        case grade >= 4.0 :\n\
    \            counter++\n            letters = append(letters, \"A+\")\n      \
    \  case grade >= 3.7 :\n            counter++\n            letters = append(letters,\
    \ \"A\")\n        case grade >= 3.3 :\n            counter++\n            letters\
    \ = append(letters, \"A-\")\n        case grade >= 3.0 :\n            counter++\n\
    \            letters = append(letters, \"B+\")\n        case grade >= 2.7 :\n\
    \            counter++\n            letters = append(letters, \"B\")\n       \
    \ case grade >= 2.3 :\n            counter++\n            letters = append(letters,\
    \ \"B-\")\n        case grade >= 2.0 :\n            counter++\n            letters\
    \ = append(letters, \"C+\")\n        case grade >= 1.7 :\n            counter++\n\
    \            letters = append(letters, \"C\")\n        case grade >= 1.3 :\n \
    \           counter++\n            letters = append(letters, \"C-\")\n       \
    \ case grade >= 1.0 :\n            counter++\n            letters = append(letters,\
    \ \"D+\")\n        case grade >= 0.7 :\n            counter++\n            letters\
    \ = append(letters, \"D\")\n        case grade >= 0.0 :\n            counter++\n\
    \            letters = append(letters, \"D-\")\n        case grade <= 0.0 :\n\
    \            counter++\n            letters = append(letters, \"E\")\n       \
    \ default:\n            letters = append(letters, \"\")\n        }\n        if\
    \ counter == len(grades) {\n            letters = append(letters, \"\")\n    \
    \    }\n    }\n    return letters\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T)\
    \ {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected:\
    \ []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"\
    D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"}\
    \ },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpfs9a601o_test.go:102: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A- ]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n\
    \        tmpfs9a601o_test.go:102: expected '[D+]', got '[D+ ]'\n    --- FAIL:\
    \ TestNumerical_Letter_Grade/test_num__2 (0.00s)\n        tmpfs9a601o_test.go:102:\
    \ expected '[D-]', got '[D- ]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3\
    \ (0.00s)\n        tmpfs9a601o_test.go:102: expected '[E]', got '[D- ]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmpfs9a601o_test.go:102:\
    \ expected '[D D- C- B B+]', got '[D+ D- C- B A- ]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5\
    \ (0.00s)\n        tmpfs9a601o_test.go:102: expected '[E D-]', got '[D- D ]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075614
- exit_code: 2
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var grade_strings []string\n    var min_grade float64\
    \ = math.MaxFloat64\n    var max_grade float64 = math.MinFloat64\n    for _, grade\
    \ := range grades {\n        if grade > max_grade {\n            max_grade = grade\n\
    \        }\n        if grade < min_grade {\n            min_grade = grade\n  \
    \      }\n    }\n    for _, grade := range grades {\n        // Calculate the\
    \ letter grade of grade using simple average\n        var grade_letter string\n\
    \        if grade >= 3.0 {\n            grade_letter = \"A+\"\n        } else\
    \ if grade >= 2.7 {\n            grade_letter = \"B\"\n        } else if grade\
    \ >= 2.3 {\n            grade_letter = \"B-\"\n        } else if grade >= 2.0\
    \ {\n            grade_letter = \"C+\"\n        } else if grade >= 1.7 {\n   \
    \         grade_letter = \"C\"\n        } else if grade >= 1.3 {\n           \
    \ grade_letter = \"C-\"\n        } else if grade >= 1.0 {\n            grade_letter\
    \ = \"D+\"\n        } else if grade >= 0.7 {\n            grade_letter = \"D\"\
    \n        } else if grade >= 0.0 {\n            grade_letter = \"D-\"\n      \
    \  } else {\n            grade_letter = \"E\"\n        }\n        // Append the\
    \ letter grade to the grade string\n        grade_strings = append(grade_strings,\
    \ grade_letter)\n    }\n    // Return the grade strings\n    return grade_strings\n\
    }\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzxuyceu2_test.go:32:29: undefined: math

    /tmp/tmpzxuyceu2_test.go:33:29: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075614
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var results []string\n\n    for _, grade := range\
    \ grades {\n        if grade > 0 && grade < 4 {\n            results = append(results,\
    \ \"+\")\n        } else if grade > 4 {\n            results = append(results,\
    \ \"-\")\n        } else if grade > 3.7 {\n            results = append(results,\
    \ \"A\")\n        } else if grade > 3.3 {\n            results = append(results,\
    \ \"A-\")\n        } else if grade > 3.0 {\n            results = append(results,\
    \ \"B+\")\n        } else if grade > 2.7 {\n            results = append(results,\
    \ \"B\")\n        } else if grade > 2.3 {\n            results = append(results,\
    \ \"B-\")\n        } else if grade > 2.0 {\n            results = append(results,\
    \ \"C+\")\n        } else if grade > 1.7 {\n            results = append(results,\
    \ \"C\")\n        } else if grade > 1.3 {\n            results = append(results,\
    \ \"C-\")\n        } else if grade > 1.0 {\n            results = append(results,\
    \ \"D+\")\n        } else if grade > 0.7 {\n            results = append(results,\
    \ \"D\")\n        } else if grade > 0.0 {\n            results = append(results,\
    \ \"D-\")\n        } else {\n            results = append(results, \"E\")\n  \
    \      }\n    }\n\n    return results\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpe6r2wzqv_test.go:86: expected '[A+ B C- C A-]', got '[A\
    \ + + + +]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n  \
    \      tmpe6r2wzqv_test.go:86: expected '[D+]', got '[+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2\
    \ (0.00s)\n        tmpe6r2wzqv_test.go:86: expected '[D-]', got '[+]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmpe6r2wzqv_test.go:86:\
    \ expected '[D D- C- B B+]', got '[+ + + + +]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5\
    \ (0.00s)\n        tmpe6r2wzqv_test.go:86: expected '[E D-]', got '[E +]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075614
- exit_code: 2
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    //  grades[0] represents the GPA\n    //  grades[1...]\
    \ represents the letter grade \n    // If grades[1...] are all zeros, the letter\
    \ grade is E\n    \n    if grades[0] == 0.0 {\n        return []string{\"E\"}\n\
    \    }\n\n    letterGrades := make([]string, 0)\n    index := 1\n    for index\
    \ < len(grades) && grades[index] != 0.0 {\n        letterGrades = append(letterGrades,\
    \ getLetterGrade(grades[index]))\n        index++\n    }\n    return letterGrades\n\
    }\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw9l4c77x_test.go:42:45: undefined: getLetterGrade

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075614
- exit_code: 2
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var result []string\n    for _, grade := range grades\
    \ {\n        result := getLetterGrade(grade)\n        if grade > 0 {\n       \
    \     result = append(result, \"D\")\n        } else {\n            result = append(result,\
    \ \"E\")\n        }\n        result = append(result, string(grade))\n    }\n \
    \   return result\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate\
    \ := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0,\
    \ 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n\
    \     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n   \
    \  { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     {\
    \ actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual:\
    \ candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}),\
    \ expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplrxe8chu_test.go:33:19: undefined: getLetterGrade

    /tmp/tmplrxe8chu_test.go:39:40: cannot convert grade (variable of type float64)
    to type string

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075614
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    output := make([]string, len(grades))\n    if len(grades)\
    \ <= 0 {\n        return output\n    }\n    \n    if grades[0] >= 4.0 {\n    \
    \    output[0] = \"A+\"\n    }\n    for i := 0; i < len(grades); i++ {\n     \
    \   if grades[i] > 3.0 && grades[i] <= 4.0 {\n            output[i] = \"A\"\n\
    \        } else if grades[i] > 2.7 {\n            output[i] = \"B\"\n        }\
    \ else if grades[i] > 1.7 && grades[i] <= 2.3 {\n            output[i] = \"B-\"\
    \n        } else if grades[i] > 1.7 {\n            output[i] = \"C\"\n       \
    \ } else if grades[i] > 1.3 && grades[i] <= 1.7 {\n            output[i] = \"\
    C-\"\n        } else if grades[i] > 1.0 {\n            output[i] = \"D+\"\n  \
    \      } else if grades[i] > 0.7 {\n            output[i] = \"D\"\n        } else\
    \ {\n            output[i] = \"D-\"\n        }\n    }\n    return output\n}\n\
    func TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmptvkkf60n_test.go:78: expected '[A+ B C- C A-]', got '[A\
    \ B C- B- A]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmptvkkf60n_test.go:78: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmptvkkf60n_test.go:78: expected '[D D- C- B B+]', got '[D\
    \ D- C- B A]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmptvkkf60n_test.go:78: expected '[E D-]', got '[D- D-]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075615
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    gradesLen := len(grades)\n    if gradesLen == 0 {\n\
    \        return nil\n    }\n    grade_dict := map[float64]string{\n        4.0:\
    \         \"A+\",\n        3.7:       \"A\",\n        3.3:       \"A-\",\n   \
    \     3.0:       \"B+\",\n        2.7:       \"B\",\n        2.3:       \"B-\"\
    ,\n        2.0:       \"C+\",\n        1.7:       \"C\",\n        1.3:       \"\
    C-\",\n        1.0:       \"D+\",\n        0.7:       \"D\",\n        0.0:   \
    \    \"D-\",\n        0.0:       \"E\",\n    }\n    result := make([]string, gradesLen)\n\
    \    for i := 0; i < gradesLen; i++ {\n        result[i] = grade_dict[grades[i]]\n\
    \    }\n    return result\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nGreat solution,\
    \ I appreciate your efforts and I am still getting used to golang. Thanks.\n<|/\
    \ c |>\n<| c |>\nNo problem. Glad I helped out.\n<|/ c |>\n<| a tags=algorithm,go\
    \ dscore=0 |>\nHere is my go solution (not too much different than the others\
    \ given):\n<code>\npackage main\n\nimport (\n    \"fmt\"\n    \"math/rand\"\n\
    \    \"time\"\n)\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate\
    \ := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0,\
    \ 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n\
    \     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n   \
    \  { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     {\
    \ actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual:\
    \ candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}),\
    \ expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpv64hdagx_test.go:56:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075614
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var letterGrades []string\n    \n    // Loop through\
    \ the grades\n    for _, grade := range grades {\n        if grade > 0 {\n   \
    \         letterGrades = append(letterGrades, \"A+\")\n        } else {\n    \
    \        letterGrades = append(letterGrades, \"A\")\n        }\n        if grade\
    \ > 3.3 {\n            letterGrades = append(letterGrades, \"A-\")\n        }\
    \ else {\n            letterGrades = append(letterGrades, \"B+\")\n        }\n\
    \        if grade > 2.7 {\n            letterGrades = append(letterGrades, \"\
    B\")\n        } else {\n            letterGrades = append(letterGrades, \"B-\"\
    )\n        }\n        if grade > 1.7 {\n            letterGrades = append(letterGrades,\
    \ \"C+\")\n        } else {\n            letterGrades = append(letterGrades, \"\
    C\")\n        }\n        if grade > 1.3 {\n            letterGrades = append(letterGrades,\
    \ \"C-\")\n        } else {\n            letterGrades = append(letterGrades, \"\
    D+\")\n        }\n        if grade > 0.7 {\n            letterGrades = append(letterGrades,\
    \ \"D\")\n        } else {\n            letterGrades = append(letterGrades, \"\
    D-\")\n        }\n        if grade > 0 {\n            letterGrades = append(letterGrades,\
    \ \"E\")\n        }\n    }\n    \n    return letterGrades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmps4x6yhgt_test.go:91: expected '[A+ B C- C A-]', got '[A+\
    \ A- B C+ C- D E A+ B+ B C+ C- D E A+ B+ B- C C- D E A+ B+ B- C+ C- D E A+ A-\
    \ B C+ C- D E]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n\
    \        tmps4x6yhgt_test.go:91: expected '[D+]', got '[A+ B+ B- C D+ D E]'\n\
    \    --- FAIL: TestNumerical_Letter_Grade/test_num__2 (0.00s)\n        tmps4x6yhgt_test.go:91:\
    \ expected '[D-]', got '[A+ B+ B- C D+ D- E]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3\
    \ (0.00s)\n        tmps4x6yhgt_test.go:91: expected '[E]', got '[A B+ B- C D+\
    \ D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n       \
    \ tmps4x6yhgt_test.go:91: expected '[D D- C- B B+]', got '[A+ B+ B- C D+ D E A+\
    \ B+ B- C D+ D- E A+ B+ B- C C- D E A+ B+ B C+ C- D E A+ B+ B C+ C- D E]'\n  \
    \  --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmps4x6yhgt_test.go:91:\
    \ expected '[E D-]', got '[A B+ B- C D+ D- A+ B+ B- C D+ D- E]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075615
- exit_code: 2
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    grades := []float64(grades)\n    var retval []string\n\
    \    \n    for i := 0; i < len(grades); i++ {\n        if grades[i] > 0 {\n  \
    \          retval = append(retval, fmt.Sprintf(\"%d\", grades[i]))\n        }\
    \ else {\n            if i-1 != 0 && grades[i-1] != 0 {\n                retval\
    \ = append(retval, fmt.Sprintf(\"%d-\", grades[i-1]))\n            }\n       \
    \     retval = append(retval, fmt.Sprintf(\"D-\"))\n        }\n    }\n    \n \
    \   return retval\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate\
    \ := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0,\
    \ 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n\
    \     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n   \
    \  { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     {\
    \ actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual:\
    \ candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}),\
    \ expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyxu0dybw_test.go:31:12: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075615
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    output := make([]string, len(grades))\n    var sum\
    \ float64\n    for i, grade := range grades {\n        sum += grade\n        if\
    \ sum == 0.0 {\n            output[i] = \"E\"\n        } else if sum > 3.0 {\n\
    \            if sum < 4.0 {\n                output[i] = \"A+\"\n            }\
    \ else {\n                output[i] = \"B+\"\n            }\n        } else if\
    \ sum > 3.0 {\n            if sum < 4.0 {\n                output[i] = \"A\"\n\
    \            } else {\n                output[i] = \"B\"\n            }\n    \
    \    } else if sum > 2.0 {\n            if sum < 3.0 {\n                output[i]\
    \ = \"A-\"\n            } else {\n                output[i] = \"B-\"\n       \
    \     }\n        } else if sum > 2.0 {\n            if sum < 3.0 {\n         \
    \       output[i] = \"C+\"\n            } else {\n                output[i] =\
    \ \"C\"\n            }\n        } else if sum > 1.0 {\n            if sum < 2.0\
    \ {\n                output[i] = \"C\"\n            } else {\n               \
    \ output[i] = \"D\"\n            }\n        } else if sum > 1.0 {\n          \
    \  if sum < 2.0 {\n                output[i] = \"D-\"\n            } else {\n\
    \                output[i] = \"E\"\n            }\n        } else {\n        \
    \    output[i] = \"F\"\n        }\n    }\n    return output\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpr2_izga5_test.go:98: expected '[A+ B C- C A-]', got '[B+\
    \ B+ B+ B+ B+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n\
    \        tmpr2_izga5_test.go:98: expected '[D+]', got '[C]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2\
    \ (0.00s)\n        tmpr2_izga5_test.go:98: expected '[D-]', got '[F]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmpr2_izga5_test.go:98:\
    \ expected '[D D- C- B B+]', got '[F C A- B+ B+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5\
    \ (0.00s)\n        tmpr2_izga5_test.go:98: expected '[E D-]', got '[E F]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075615
- exit_code: 2
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    grades = append([]float64{0.0}, grades...)\n    grades\
    \ = append(grades, 0.0)\n\n    // Iterate through our grades list. \n    // If\
    \ grades is 0, the grade is E.\n    // If we reach the end of a grades list, return\
    \ the letter grade.\n    // If the grade is > 2.7, the letter is B. \n    // If\
    \ the grade is > 2.3, the letter is B-. \n    // If the grade is > 2.0, the letter\
    \ is C. \n    // If the grade is > 1.7, the letter is C.\n    // If the grade\
    \ is > 1.3, the letter is C-. \n    // If the grade is > 1.0, the letter is D.\
    \ \n    // If the grade is > 0.7 the letter is D. \n    // If the grade is > 0.0,\
    \ the letter is D+. \n    // Otherwise, the letter is E. \n    // The reason for\
    \ appending grades to grades is that we only want to return\n    // the letter\
    \ grade if we have completed a semester's courses.\n    var letter string\n  \
    \  for _, grade := range grades {\n        if grade > 2.7 {\n            letter\
    \ = \"B+\"\n        } else if grade > 2.3 {\n            letter = \"B-\"\n   \
    \     } else if grade > 2.0 {\n            letter = \"C\"\n        } else if grade\
    \ > 1.7 {\n            letter = \"C\"\n        } else if grade > 1.3 {\n     \
    \       letter = \"C-\"\n        } else if grade > 1.0 {\n            letter =\
    \ \"D\"\n        } else if grade > 0.7 {\n            letter = \"D\"\n       \
    \ } else if grade > 0.0 {\n            letter = \"D+\"\n        } else {\n   \
    \         letter = \"E\"\n        }\n\n        grades = append(grades, letter)\n\
    \    }\n    return grades\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T)\
    \ {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected:\
    \ []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"\
    D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"}\
    \ },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbk9xfqe6_test.go:70:33: cannot use letter (variable of type string) as
    type float64 in argument to append

    /tmp/tmpbk9xfqe6_test.go:72:12: cannot use grades (variable of type []float64)
    as type []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075615
- exit_code: 2
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    // Write your code here\n    var result []string\n\
    \    result := make([]string, len(grades))\n    result := append(result, grade_equation(grades))\n\
    \    return result\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate\
    \ := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0,\
    \ 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n\
    \     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n   \
    \  { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     {\
    \ actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual:\
    \ candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}),\
    \ expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_3t_m9f0_test.go:33:12: no new variables on left side of :=

    /tmp/tmp_3t_m9f0_test.go:34:12: no new variables on left side of :=

    /tmp/tmp_3t_m9f0_test.go:34:30: undefined: grade_equation

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075615
- exit_code: 2
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    // Your code here\n    out := make([]string, len(grades))\n\
    \    out := strings.Replace(strings.Replace(fmt.Sprintf(\"%.0f\", grades), \"\
    .\", \",\", -1), \"E\", \"D-\", -1)\n    return out\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg1go4sa5_test.go:33:9: no new variables on left side of :=

    /tmp/tmpg1go4sa5_test.go:33:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075615
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var letterGrades []string\n    for _, grade := range\
    \ grades {\n        if grade > 3.0 {\n            letterGrades = append(letterGrades,\
    \ \"B-\")\n        } else if grade > 2.0 {\n            letterGrades = append(letterGrades,\
    \ \"B-\")\n        } else if grade > 1.7 {\n            letterGrades = append(letterGrades,\
    \ \"B-\")\n        } else if grade > 1.0 {\n            letterGrades = append(letterGrades,\
    \ \"B-\")\n        } else if grade > 0.7 {\n            letterGrades = append(letterGrades,\
    \ \"B-\")\n        } else if grade > 0.0 {\n            letterGrades = append(letterGrades,\
    \ \"B-\")\n        } else if grade > 0.0 {\n            letterGrades = append(letterGrades,\
    \ \"B-\")\n        } else if grade > 0.0 {\n            letterGrades = append(letterGrades,\
    \ \"B-\")\n        } else if grade > 0.0 {\n            letterGrades = append(letterGrades,\
    \ \"B-\")\n        } else if grade > 0.0 {\n            letterGrades = append(letterGrades,\
    \ \"B-\")\n        } else if grade > 0.0 {\n            letterGrades = append(letterGrades,\
    \ \"B-\")\n        } else if grade > 0.0 {\n            letterGrades = append(letterGrades,\
    \ \"B-\")\n        } else if grade > 0.0 {\n            letterGrades = append(letterGrades,\
    \ \"B-\")\n        } else if grade > 0.0 {\n            letterGrades = append(letterGrades,\
    \ \"B-\")\n        } else if grade > 0.0 {\n            letterGrades = append(letterGrades,\
    \ \"B-\")\n        } else if grade > 0.0 {\n            letterGrades = append(letterGrades,\
    \ \"B-\")\n        } else if grade > 0.0 {\n            letterGrades = append(letterGrades,\
    \ \"B-\")\n        } else if grade > 0.0 {\n            letterGrades = append(letterGrades,\
    \ \"B-\")\n        } else if grade > 0.0 {\n            letterGrades = append(letterGrades,\
    \ \"B-\")\n        } else if grade > 0.0 {\n            letterGrades = append(letterGrades,\
    \ \"B-\")\n        } else if grade > 0.0 {\n            letterGrades = append(letterGrades,\
    \ \"B-\")\n        } else if grade > 0.0 {\n            letterGrades = append(letterGrades,\
    \ \"B-\")\n        } else if grade > 0.0 {\n            letterGrade\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpm0hxcq72_test.go:79:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075614
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var result []string\n    for _, grade := range grades\
    \ {\n        if grade > 3.7 { //4.0\n            result = []string{\"A+\"}\n \
    \       } else if grade > 3.3 { //> 3.7\n            result = []string{\"A\"}\n\
    \        } else if grade > 2.9 { //> 3.3\n            result = []string{\"A-\"\
    }\n        } else if grade > 2.7 { //> 2.9\n            result = []string{\"B+\"\
    }\n        } else if grade > 2.3 { //> 2.7\n            result = []string{\"B\"\
    }\n        } else if grade > 1.7 { //> 2.3\n            result = []string{\"B-\"\
    }\n        } else if grade > 1.3 { //> 1.7\n            result = []string{\"C+\"\
    }\n        } else if grade > 0.7 { //> 1.3\n            result = []string{\"C\"\
    }\n        } else if grade > 0.3 { //> 0.7\n            result = []string{\"C-\"\
    }\n        } else if grade > 0.0 { //> 0.3\n            result = []string{\"D+\"\
    }\n        } else if grade > 0.0 { //> 0.0\n            result = []string{\"D\"\
    }\n        } else if grade > 0.0 { //> 0.0\n            result = []string{\"D-\"\
    } //0.0\n        } else { //0.0\n            result = []string{\"E\"}\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T)\
    \ {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected:\
    \ []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"\
    D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"}\
    \ },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmph_pgyp9u_test.go:82: expected '[A+ B C- C A-]', got '[A]'\n\
    \    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n        tmph_pgyp9u_test.go:82:\
    \ expected '[D+]', got '[C]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2\
    \ (0.00s)\n        tmph_pgyp9u_test.go:82: expected '[D-]', got '[C-]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmph_pgyp9u_test.go:82:\
    \ expected '[D D- C- B B+]', got '[A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5\
    \ (0.00s)\n        tmph_pgyp9u_test.go:82: expected '[E D-]', got '[C-]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075615
- exit_code: 2
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    letter := []string{\"E\", \"D\", \"C\", \"B-\", \"\
    B\", \"A-\", \"A\"}\n    sorted_grades := sort_list(grades)\n\n    // If the grade\
    \ is greater than or equal to 2.3, we give a letter of D \n    // to that student.\
    \ If the grade is greater than or equal to 2.7, we give\n    // a letter of C\
    \ and so on.\n    for _, grade := range sorted_grades {\n        if grade >= 2.3\
    \ {\n            letter = \"D-\"\n        }\n        if grade >= 2.7 {\n     \
    \       letter = \"C\"\n        }\n        if grade >= 3.0 {\n            letter\
    \ = \"B-\"\n        }\n        if grade >= 3.3 {\n            letter = \"B\"\n\
    \        }\n        if grade >= 3.7 {\n            letter = \"A-\"\n        }\n\
    \        if grade >= 4.0 {\n            letter = \"A\"\n        }\n    }\n   \
    \ return letter\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate\
    \ := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0,\
    \ 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n\
    \     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n   \
    \  { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     {\
    \ actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual:\
    \ candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}),\
    \ expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5p5t94qa_test.go:32:22: undefined: sort_list

    /tmp/tmp5p5t94qa_test.go:39:22: cannot use "D-" (untyped string constant) as []string
    value in assignment

    /tmp/tmp5p5t94qa_test.go:42:22: cannot use "C" (untyped string constant) as []string
    value in assignment

    /tmp/tmp5p5t94qa_test.go:45:22: cannot use "B-" (untyped string constant) as []string
    value in assignment

    /tmp/tmp5p5t94qa_test.go:48:22: cannot use "B" (untyped string constant) as []string
    value in assignment

    /tmp/tmp5p5t94qa_test.go:51:22: cannot use "A-" (untyped string constant) as []string
    value in assignment

    /tmp/tmp5p5t94qa_test.go:54:22: cannot use "A" (untyped string constant) as []string
    value in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075615
- exit_code: 2
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    letter_grades := []string{}\n    letter := \"\"\n\
    \    for _, grade := range grades {\n        if grade == 0.0 {\n            letter_grades\
    \ = append(letter_grades, letter)\n            letter = \"\"\n            continue\n\
    \        }\n        if grade > 3.0 {\n            letter_grades = append(letter_grades,\
    \ letter+\"-\")\n            letter = \"\"\n        } else {\n            letter\
    \ += grade\n        }\n    }\n    return letter_grades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnl2_krb__test.go:43:13: invalid operation: letter += grade (mismatched
    types string and float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075615
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    letterGrade := make([]string, len(grades))\n    for\
    \ i := range grades {\n        if grades[i] >= 4.0 {\n            letterGrade[i]\
    \ = \"A+\"\n        } else if grades[i] >= 3.7 && grades[i] <= 4.0 {\n       \
    \     letterGrade[i] = \"A\"\n        } else if grades[i] >= 3.3 && grades[i]\
    \ <= 3.7 {\n            letterGrade[i] = \"A-\"\n        } else if grades[i] >=\
    \ 3.0 && grades[i] <= 3.3 {\n            letterGrade[i] = \"B+\"\n        } else\
    \ if grades[i] >= 2.7 && grades[i] <= 3.0 {\n            letterGrade[i] = \"B\"\
    \n        } else if grades[i] >= 2.3 && grades[i] <= 2.7 {\n            letterGrade[i]\
    \ = \"B-\"\n        } else if grades[i] >= 2.0 && grades[i] <= 2.3 {\n       \
    \     letterGrade[i] = \"C+\"\n        } else if grades[i] >= 1.7 && grades[i]\
    \ <= 2.0 {\n            letterGrade[i] = \"C\"\n        } else if grades[i] >=\
    \ 1.3 && grades[i] <= 1.7 {\n            letterGrade[i] = \"C-\"\n        } else\
    \ if grades[i] >= 1.0 && grades[i] <= 1.3 {\n            letterGrade[i] = \"D+\"\
    \n        } else if grades[i] >= 0.7 && grades[i] <= 1.0 {\n            letterGrade[i]\
    \ = \"D\"\n        } else if grades[i] >= 0.0 {\n            letterGrade[i] =\
    \ \"D-\"\n        } else {\n            letterGrade[i] = \"E\"\n        }\n  \
    \  }\n    return letterGrade\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T)\
    \ {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected:\
    \ []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"\
    D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"}\
    \ },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpxdv5fu6z_test.go:82: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmpxdv5fu6z_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpxdv5fu6z_test.go:82: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmpxdv5fu6z_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075616
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    grades_string := make([]string, len(grades))\n  \
    \  // The first element is always zero, so let's start with the second\n    grades_string[0]\
    \ = \"D+\"\n    for i := 1; i < len(grades); i++ {\n        grades_string[i] =\
    \ \"D-\"\n        if grades[i] > 0 {\n            grades_string[i-1] = \"B+\"\n\
    \            if grades[i] >= 3.3 {\n                grades_string[i-2] = \"B\"\
    \n                if grades[i] >= 3.0 {\n                    grades_string[i-3]\
    \ = \"B-\"\n                    if grades[i] >= 2.3 {\n                      \
    \  grades_string[i-4] = \"B\"\n                        if grades[i] >= 2.0 {\n\
    \                            grades_string[i-5] = \"B-\"\n                   \
    \         if grades[i] >= 1.7 {\n                                grades_string[i-6]\
    \ = \"C\"\n                                if grades[i] >= 1.7 {\n           \
    \                         grades_string[i-7] = \"C+\"\n                      \
    \              if grades[i] >= 1.3 {\n                                       \
    \ grades_string[i-8] = \"C\"\n                                        if grades[i]\
    \ >= 1.0 {\n                                            grades_string[i-9] = \"\
    C-\"\n                                            if grades[i] >= 0.7 && grades[i-1]\
    \ > 0 {\n                                                grades_string[i-10] =\
    \ \"C\"\n                                                if grades[i] >= 0.0 &&\
    \ grades[i-1] > 0 {\n                                                    grades_string[i-11]\
    \ = \"C+\"\n                                                    if grades[i] >=\
    \ 0.0 {\n                                                        grades_string[i-12]\
    \ = \"C\"\n                                                        if grades[i]\
    \ >= 0.0 && grades[i-1] > 0 {\n                                              \
    \              grades_string[i-13] = \"C-\"\n                                \
    \                            if grades[i] >= 0.0 && grades[i-1] > 0 {\n      \
    \                                                          grades_string[i-14]\
    \ = \"D+\"\n                                                                if\
    \ grades[i] >= 0.0 && grades[i-1] > 0 {\n                                    \
    \                                grades_string[i-15] = \"D\"\n               \
    \                                                     if grades[i] >= 0.0 && grades[i-1]\
    \ > 0 {\n                                                                    \
    \    grades_string[i-16] = \"D-\"\n                                          \
    \                          }\n                                               \
    \                 }\n                                                        \
    \    }\n                                                        }\n          \
    \                                          }\n                               \
    \                 }\n                                            }\n         \
    \                               }\n                                    }\n   \
    \                             }\n                            }\n             \
    \           }\n                    }\n                }\n            }\n     \
    \   }\n    }\n    return grades_string\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\npanic: runtime error: index\
    \ out of range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\
    \ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513720, 0xc000014360})\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513720,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.numerical_letter_grade({0xc0000c45f8, 0x5,\
    \ 0x0?})\n\t/tmp/tmpfb8elf6c_test.go:45 +0xb95\ncommand-line-arguments_test.TestNumerical_Letter_Grade(0x0?)\n\
    \t/tmp/tmpfb8elf6c_test.go:95 +0xc2\ntesting.tRunner(0xc0001a0340, 0x529060)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075616
- exit_code: 2
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    result := make([]string, 0)\n    if len(grades) <\
    \ 7 {\n        fmt.Println(\"Error: too few grades to grade.\")\n        return\
    \ nil\n    }\n\n    for i := 0; i < len(grades)-1; i++ {\n        if grades[i]\
    \ >= 4.0 && grades[i] <= 3.7 {\n            if grades[i+1] > 3.7 { // A+ > 3.7\
    \ => A\n                result = append(result, fmt.Sprintf(\"A+\"))\n       \
    \     } else if grades[i+1] > 3.3 { // A > 3.3 => A-\n                result =\
    \ append(result, fmt.Sprintf(\"A-\"))\n            } else if grades[i+1] > 3.0\
    \ { // B+ > 3.0 => B\n                result = append(result, fmt.Sprintf(\"B+\"\
    ))\n            } else if grades[i+1] > 2.7 { // B > 2.7 => B\n              \
    \  result = append(result, fmt.Sprintf(\"B\"))\n            } else if grades[i+1]\
    \ > 2.3 { // B > 2.3 => B\n                result = append(result, fmt.Sprintf(\"\
    B-\"))\n            } else if grades[i+1] > 2.0 { // C+ > 2.0 => C\n         \
    \       result = append(result, fmt.Sprintf(\"C+\"))\n            } else if grades[i+1]\
    \ > 1.7 { // C > 1.7 => C\n                result = append(result, fmt.Sprintf(\"\
    C\"))\n            } else if grades[i+1] > 1.3 { // C > 1.3 => C\n           \
    \     result = append(result, fmt.Sprintf(\"C-\"))\n            } else if grades[i+1]\
    \ > 1.0 { // D+ > 1.0 => D\n                result = append(result, fmt.Sprintf(\"\
    D+\"))\n            } else if grades[i+1] > 0.7 { // D > 0.7 => D\n          \
    \      result = append(result, fmt.Sprintf(\"D\"))\n            } else if grades[i+1]\
    \ > 0.0 { // D > 0.0 => D\n                result = append(result, fmt.Sprintf(\"\
    D-\"))\n            } else if grades[i+1] == 0.0 { // D > 0.0 => E\n         \
    \       result = append(result, fmt.Sprintf(\"E\"))\n            } else {\n  \
    \              fmt.Println(\"Error: no letter grade for grade \"+string(grades[i]))\n\
    \                fmt.Println(grades)\n            }\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate :=\
    \ numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0,\
    \ 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n\
    \     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n   \
    \  { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     {\
    \ actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual:\
    \ candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}),\
    \ expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy0shn3ho_test.go:64:72: cannot convert grades[i] (variable of type float64)
    to type string

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075616
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var letterGrade []string\n    var totalGrade = 0.0\n\
    \    for _, grade := range grades {\n        totalGrade += grade\n    }\n    for\
    \ i := 0; i < len(grades); i++ {\n        if totalGrade > 4.0 {\n            letterGrade\
    \ = append(letterGrade, \"A+\")\n            totalGrade -= 4.0\n        } else\
    \ if totalGrade > 3.7 && totalGrade <= 4.0 {\n            letterGrade = append(letterGrade,\
    \ \"A\")\n            totalGrade -= 3.7\n        } else if totalGrade > 3.3 &&\
    \ totalGrade <= 3.7 {\n            letterGrade = append(letterGrade, \"A-\")\n\
    \            totalGrade -= 3.3\n        } else if totalGrade > 3.0 && totalGrade\
    \ <= 3.3 {\n            letterGrade = append(letterGrade, \"B+\")\n          \
    \  totalGrade -= 3.0\n        } else if totalGrade > 2.7 && totalGrade <= 3.0\
    \ {\n            letterGrade = append(letterGrade, \"B\")\n            totalGrade\
    \ -= 2.7\n        } else if totalGrade > 2.3 && totalGrade <= 2.7 {\n        \
    \    letterGrade = append(letterGrade, \"B-\")\n            totalGrade -= 2.3\n\
    \        } else if totalGrade > 2.0 && totalGrade <= 2.3 {\n            letterGrade\
    \ = append(letterGrade, \"C+\")\n            totalGrade -= 2.0\n        } else\
    \ if totalGrade > 1.7 && totalGrade <= 2.0 {\n            letterGrade = append(letterGrade,\
    \ \"C\")\n            totalGrade -= 1.7\n        } else if totalGrade > 1.3 &&\
    \ totalGrade <= 1.7 {\n            letterGrade = append(letterGrade, \"C-\")\n\
    \            totalGrade -= 1.3\n        } else if totalGrade > 1.0 && totalGrade\
    \ <= 1.3 {\n            letterGrade = append(letterGrade, \"D+\")\n          \
    \  totalGrade -= 1.0\n        } else if totalGrade > 0.7 && totalGrade <= 1.0\
    \ {\n            letterGrade = append(letterGrade, \"D\")\n            totalGrade\
    \ -= 0.7\n        } else if totalGrade > 0.0 && totalGrade <= 0.7 {\n        \
    \    letterGrade = append(letterGrade, \"D-\")\n            totalGrade -= 0.0\n\
    \        } else {\n            letterGrade = append(letterGrade, \"E\")\n    \
    \    }\n    }\n    return letterGrade\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpk7r9fe0c_test.go:98: expected '[A+ B C- C A-]', got '[A+\
    \ A+ A+ C+ D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n\
    \        tmpk7r9fe0c_test.go:98: expected '[D D- C- B B+]', got '[A+ A+ D D- D-]'\n\
    \    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmpk7r9fe0c_test.go:98:\
    \ expected '[E D-]', got '[D- D-]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075616
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    gradesLst := make([]string, len(grades))\n    for\
    \ i := 0; i < len(grades); i++ {\n        if grades[i] >= 4.0 && grades[i] < 5.0\
    \ {\n            gradesLst[i] = \"A+\"\n        } else if grades[i] >= 3.7 &&\
    \ grades[i] < 4.0 {\n            gradesLst[i] = \"A\"\n        } else if grades[i]\
    \ >= 3.3 && grades[i] < 3.7 {\n            gradesLst[i] = \"A-\"\n        } else\
    \ if grades[i] >= 3.0 && grades[i] < 3.3 {\n            gradesLst[i] = \"B+\"\n\
    \        } else if grades[i] >= 2.7 && grades[i] < 3.0 {\n            gradesLst[i]\
    \ = \"B\"\n        } else if grades[i] >= 2.3 && grades[i] < 2.7 {\n         \
    \   gradesLst[i] = \"B-\"\n        } else if grades[i] >= 2.0 && grades[i] < 2.3\
    \ {\n            gradesLst[i] = \"C+\"\n        } else if grades[i] >= 1.7 &&\
    \ grades[i] < 2.0 {\n            gradesLst[i] = \"C\"\n        } else if grades[i]\
    \ >= 1.3 && grades[i] < 1.7 {\n            gradesLst[i] = \"C-\"\n        } else\
    \ if grades[i] >= 1.0 && grades[i] < 1.3 {\n            gradesLst[i] = \"D+\"\n\
    \        } else if grades[i] >= 0.7 && grades[i] < 1.0 {\n            gradesLst[i]\
    \ = \"D\"\n        } else if grades[i] >= 0.0 && grades[i] < 0.7 {\n         \
    \   gradesLst[i] = \"D-\"\n        } else {\n            gradesLst[i] = \"E\"\n\
    \        }\n    }\n    return gradesLst\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpgo4zlwg8_test.go:82: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmpgo4zlwg8_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpgo4zlwg8_test.go:82: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmpgo4zlwg8_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075616
- exit_code: 2
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    // YOUR CODE HERE\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpva6tzr82_test.go:32:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075616
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    // Your code goes here\n    \n    var letter_grades\
    \ []string\n    for _, grade := range grades {\n        if grade < 3.0 {\n   \
    \         letter_grades = append(letter_grades, \"A-\")\n        }\n        if\
    \ grade > 3.0 {\n            letter_grades = append(letter_grades, \"B-\")\n \
    \       }\n        if grade > 2.7 {\n            letter_grades = append(letter_grades,\
    \ \"B-\")\n        }\n        if grade > 2.3 {\n            letter_grades = append(letter_grades,\
    \ \"B-\")\n        }\n        if grade > 1.7 {\n            letter_grades = append(letter_grades,\
    \ \"C-\")\n        }\n        if grade > 1.3 {\n            letter_grades = append(letter_grades,\
    \ \"C-\")\n        }\n        if grade > 1.0 {\n            letter_grades = append(letter_grades,\
    \ \"C-\")\n        }\n        if grade > 0.7 {\n            letter_grades = append(letter_grades,\
    \ \"D+\")\n        }\n        if grade > 0.3 {\n            letter_grades = append(letter_grades,\
    \ \"D-\")\n        }\n        if grade > 0.0 {\n            letter_grades = append(letter_grades,\
    \ \"D-\")\n        }\n        if grade < 0.0 {\n            letter_grades = append(letter_grades,\
    \ \"E\")\n        }\n        if grade == 0.0 {\n            letter_grades = append(letter_grades,\
    \ \"D-\")\n        }\n        if grade > 1.0 {\n            letter_grades = append(letter_grades,\
    \ \"D+\")\n        }\n        if grade > 0.7 {\n            letter_grades = append(letter_grades,\
    \ \"D+\")\n        }\n        if grade > 0.3 {\n            letter_grades = append(letter_grades,\
    \ \"D-\")\n        }\n        if grade > 0.0 {\n            letter_grades = append(letter_grades,\
    \ \"D-\")\n        }\n        if grade < 0.0 {\n            letter_grades = append(letter_grades,\
    \ \"E\")\n        }\n        if grade == 0.0 {\n            letter_grades = append(letter_grades,\
    \ \"D-\")\n        }\n        if grade > 1.0 {\n            letter_grades = append(letter_grades,\
    \ \"D+\")\n        }\n        if grade > 0.7 {\n            letter_grades = append(letter_grades,\
    \ \"D+\")\n        }\n        if grade > 0.3 {\n            letter_grades = append(letter_grades,\
    \ \"D-\")\n        }\n        if grade > 0.0 {\n            letter_grades = append(letter_grades,\
    \ \"D-\")\n        }\n        if grade < 0.0 {\n            letter_grades = append(letter_grades,\
    \ \"E\")\n        }\n        if grade == 0.0 {\n            letter_grades = append(letter_grades,\
    \ \"D-\")\n        }\n        if grade > 1.0 {\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpslfkuj9u_test.go:109:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075615
- exit_code: 2
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    // The grade array needs to be in ascending order\
    \ for the letter grade to go from A to E\n    sort.Float64s(grades)\n    \n  \
    \  \n    // Initialize a list to put the letter grades in\n    var letterGrades\
    \ []string\n    \n    // This loop goes through the list and compares every value\
    \ from the grade array to\n    // the GPA and then checks to see if the letter\
    \ grade should be added to the list\n    for _, grade := range grades {\n    \
    \    // The GPA is always the last value in the array\n        grade, i := grades[len(grades)-1],\
    \ len(grades)-1\n        \n        // Iterate until you find a greater number\n\
    \        for i = 0; i <= i && grade >= grades[i]; i++ {\n        }\n        \n\
    \        // If your GPA is less than or equal to the number in your list\n   \
    \     if i < len(grades) {\n            letterGrades = append(letterGrades, fmt.Sprintf(\"\
    %s+\", getLetterGrade(grades[i])))\n        }\n        \n        // If your GPA\
    \ is greater than your number in the list\n        if i > len(grades) {\n    \
    \        letterGrades = append(letterGrades, fmt.Sprintf(\"%s\", getLetterGrade(grades[i])))\n\
    \        }\n        \n        // If your GPA is equal to the number in the list\n\
    \        if i == len(grades) {\n            letterGrades = append(letterGrades,\
    \ fmt.Sprintf(\"%s\", getLetterGrade(grades[i])))\n        }\n    }\n    \n  \
    \  return letterGrades\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n\
    \  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0,\
    \ 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n\
    \     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n   \
    \  { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     {\
    \ actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual:\
    \ candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}),\
    \ expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4leh70t8_test.go:32:5: undefined: sort

    /tmp/tmp4leh70t8_test.go:40:12: grade declared but not used

    /tmp/tmp4leh70t8_test.go:50:68: undefined: getLetterGrade

    /tmp/tmp4leh70t8_test.go:55:67: undefined: getLetterGrade

    /tmp/tmp4leh70t8_test.go:60:67: undefined: getLetterGrade

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075616
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    // Your code goes here!\n    \n    letters := []string{}\n\
    \    \n    for _, grade := range grades {\n        if grade > 4.0 {\n        \
    \    letters = append(letters, \"A+\")\n        } else if grade > 3.7 && grade\
    \ < 4.0 {\n            letters = append(letters, \"A\")\n        } else if grade\
    \ > 3.3 && grade < 3.7 {\n            letters = append(letters, \"A-\")\n    \
    \    } else if grade > 3.0 && grade < 3.3 {\n            letters = append(letters,\
    \ \"B+\")\n        } else if grade > 2.7 && grade < 3.0 {\n            letters\
    \ = append(letters, \"B\")\n        } else if grade > 2.3 && grade < 2.7 {\n \
    \           letters = append(letters, \"B-\")\n        } else if grade > 2.0 ||\
    \ grade > 2.3 {\n            letters = append(letters, \"C+\")\n        } else\
    \ if grade > 1.7 && grade < 2.0 {\n            letters = append(letters, \"C\"\
    )\n        } else if grade > 1.3 && grade < 1.7 {\n            letters = append(letters,\
    \ \"C-\")\n        } else if grade > 1.0 || grade > 1.3 {\n            letters\
    \ = append(letters, \"D+\")\n        } else if grade > 0.7 && grade < 1.0 {\n\
    \            letters = append(letters, \"D\")\n        } else if grade > 0.0 ||\
    \ grade > 0.7 {\n            letters = append(letters, \"D-\")\n        } else\
    \ {\n            letters = append(letters, \"E\")\n        }\n    }\n\n    return\
    \ letters\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate :=\
    \ numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0,\
    \ 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n\
    \     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n   \
    \  { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     {\
    \ actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual:\
    \ candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}),\
    \ expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpr2gmrt6n_test.go:86: expected '[A+ B C- C A-]', got '[C+\
    \ C+ D+ D+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n\
    \        tmpr2gmrt6n_test.go:86: expected '[D D- C- B B+]', got '[D- D- C- B C+]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075616
- exit_code: 2
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    g := make([]string, len(grades))\n    for i, g :=\
    \ range grades {\n        switch {\n        case g > 3.7:\n            g[i] =\
    \ \"A+\"\n        case g > 3.3:\n            g[i] = \"A\"\n        case g > 3:\n\
    \            g[i] = \"A-\"\n        case g > 2.7:\n            g[i] = \"B+\"\n\
    \        case g > 2.3:\n            g[i] = \"B\"\n        case g > 2:\n      \
    \      g[i] = \"B-\"\n        case g > 1.7:\n            g[i] = \"C+\"\n     \
    \   case g > 1.3:\n            g[i] = \"C\"\n        case g > 1:\n           \
    \ g[i] = \"C-\"\n        case g > 0.7:\n            g[i] = \"D+\"\n        case\
    \ g > 0.0:\n            g[i] = \"D\"\n        case g > 0.0:\n            g[i]\
    \ = \"D-\"\n        default:\n            g[i] = \"E\"\n        }\n    }\n   \
    \ return g\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate\
    \ := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0,\
    \ 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n\
    \     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n   \
    \  { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     {\
    \ actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual:\
    \ candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}),\
    \ expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9_eppouj_test.go:35:14: invalid operation: cannot index g (variable of
    type float64)

    /tmp/tmp9_eppouj_test.go:37:14: invalid operation: cannot index g (variable of
    type float64)

    /tmp/tmp9_eppouj_test.go:39:14: invalid operation: cannot index g (variable of
    type float64)

    /tmp/tmp9_eppouj_test.go:41:14: invalid operation: cannot index g (variable of
    type float64)

    /tmp/tmp9_eppouj_test.go:43:14: invalid operation: cannot index g (variable of
    type float64)

    /tmp/tmp9_eppouj_test.go:45:14: invalid operation: cannot index g (variable of
    type float64)

    /tmp/tmp9_eppouj_test.go:47:14: invalid operation: cannot index g (variable of
    type float64)

    /tmp/tmp9_eppouj_test.go:49:14: invalid operation: cannot index g (variable of
    type float64)

    /tmp/tmp9_eppouj_test.go:51:14: invalid operation: cannot index g (variable of
    type float64)

    /tmp/tmp9_eppouj_test.go:53:14: invalid operation: cannot index g (variable of
    type float64)

    /tmp/tmp9_eppouj_test.go:53:14: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075616
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    grades2 := make([]string, 0)\n    \n    \n    grades2\
    \ := append(grades2, fmt.Sprintf(\"A+\"))\n    grades2 := append(grades2, fmt.Sprintf(\"\
    %.02f\", grades[0]))\n    \n    \n    for i := 0; i < len(grades)-1; i++ {\n \
    \       \n        if grades[i] >= 3.7 {\n            grades2 := append(grades2,\
    \ fmt.Sprintf(\"A\"))\n            grades2 := append(grades2, fmt.Sprintf(\"%.02f\"\
    , grades[i+1]))\n            \n        }\n        \n        if grades[i] >= 3.3\
    \ {\n            grades2 := append(grades2, fmt.Sprintf(\"A-\"))\n           \
    \ grades2 := append(grades2, fmt.Sprintf(\"%.02f\", grades[i+1]))\n        }\n\
    \        \n        if grades[i] >= 3.0 {\n            grades2 := append(grades2,\
    \ fmt.Sprintf(\"B+\"))\n            grades2 := append(grades2, fmt.Sprintf(\"\
    %.02f\", grades[i+1]))\n        }\n        \n        if grades[i] >= 2.7 {\n \
    \           grades2 := append(grades2, fmt.Sprintf(\"B\"))\n            grades2\
    \ := append(grades2, fmt.Sprintf(\"%.02f\", grades[i+1]))\n        }\n       \
    \ \n        if grades[i] >= 2.3 {\n            grades2 := append(grades2, fmt.Sprintf(\"\
    B-\"))\n            grades2 := append(grades2, fmt.Sprintf(\"%.02f\", grades[i+1]))\n\
    \        }\n        \n        if grades[i] >= 2.0 {\n            grades2 := append(grades2,\
    \ fmt.Sprintf(\"C+\"))\n            grades2 := append(grades2, fmt.Sprintf(\"\
    %.02f\", grades[i+1]))\n        }\n        \n        if grades[i] >= 1.7 {\n \
    \           grades2 := append(grades2, fmt.Sprintf(\"C\"))\n            grades2\
    \ := append(grades2, fmt.Sprintf(\"%.02f\", grades[i+1]))\n        }\n       \
    \ \n        if grades[i] >= 1.3 {\n            grades2 := append(grades2, fmt.Sprintf(\"\
    C-\"))\n            grades2 := append(grades2, fmt.Sprintf(\"%.02f\", grades[i+1]))\n\
    \        }\n        \n        if grades[i] >= 1.0 {\n            grades2 := append(grades2,\
    \ fmt.Sprintf(\"D+\"))\n            grades2 := append(grades2, fmt.Sprintf(\"\
    %.02f\", grades[i+1]))\n        }\n        \n        if grades[i] >= 0.7 {\n \
    \           grades2 := append(grades2, fmt.Sprintf(\"D\"))\n            grades2\
    \ := append(grades2, fmt.Sprintf(\"\nfunc TestNumerical_Letter_Grade(t *testing.T)\
    \ {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected:\
    \ []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"\
    D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"}\
    \ },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpn67rf_mb_test.go:88:52: string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075616
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var letter string\n\n    for i := range grades {\n\
    \        switch grades[i] {\n        case 3.0:\n            letter = \"A+\"\n\
    \        case 2.7:\n            letter = \"B\"\n        case 2.3:\n          \
    \  letter = \"B-\"\n        case 2.0:\n            letter = \"C+\"\n        case\
    \ 1.7:\n            letter = \"C\"\n        case 1.3:\n            letter = \"\
    C-\"\n        case 1.0:\n            letter = \"D+\"\n        case 0.7:\n    \
    \        letter = \"D\"\n        case 0.0:\n            letter = \"D-\"\n    \
    \    case 3.7:\n            letter = \"A\"\n        case 3.3:\n            letter\
    \ = \"A-\"\n        case 3.0:\n            letter = \"B+\"\n        case 2.7:\n\
    \            letter = \"B\"\n        case 2.3:\n            letter = \"B-\"\n\
    \        case 2.0:\n            letter = \"C+\"\n        case 1.7:\n         \
    \   letter = \"C\"\n        case 1.3:\n            letter = \"C-\"\n        case\
    \ 1.0:\n            letter = \"D+\"\n        case 0.7:\n            letter = \"\
    D\"\n        case 0.0:\n            letter = \"D-\"\n        case 3.7:\n     \
    \       letter = \"A\"\n        case 3.3:\n            letter = \"A-\"\n     \
    \   case 3.0:\n            letter = \"B+\"\n        case 2.7:\n            letter\
    \ = \"B\"\n        case 2.3:\n            letter = \"B-\"\n        case 2.0:\n\
    \            letter = \"C+\"\n        case 1.7:\n            letter = \"C\"\n\
    \        case 1.3:\n            letter = \"C-\"\n        case 1.0:\n         \
    \   letter = \"D+\"\n        case 0.7:\n            letter = \"D\"\n        case\
    \ 0.0:\n            letter = \"D-\"\n        case 3.7:\n            letter = \"\
    A\"\n        case 3.3:\n            letter = \"A-\"\n        case 3.0:\n     \
    \       letter = \"B+\"\n        case 2.7:\n            letter = \"B\"\n     \
    \   case 2.3:\n            letter = \"B-\"\n        case 2.0:\n            letter\
    \ = \"C+\"\n        case 1.7:\n            letter = \"C\"\n        case 1.3:\n\
    \            letter = \"C-\"\n        case 1.0:\n            letter = \"D+\"\n\
    \        case 0.7:\n            letter = \"D\"\n        case 0.0:\n          \
    \  letter = \"D-\"\n        case 3.7:\n            letter = \"A\"\n        case\
    \ 3.3:\n            letter = \"A-\"\n        case 3.0:\n            letter = \"\
    B+\"\n        case 2.7:\n            letter = \"B\"\n        case 2.3:\n     \
    \       letter = \"B-\"\n        case 2.0:\n            letter = \"C+\"\n    \
    \    case 1.7:\n            letter = \"C\"\n        case 1.3:\n            letter\
    \ = \"C-\"\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpn7tiza6n_test.go:135:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075616
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    letter_grades := []string{}\n    if len(grades) ==\
    \ 0 {\n        return letter_grades\n    }\n    avg_grade := 0.0\n    for _, grade\
    \ := range grades {\n        if grade == 0.0 {\n            continue\n       \
    \ }\n        avg_grade += grade\n    }\n    avg_grade /= float64(len(grades))\n\
    \    \n    if avg_grade > 6.0 {\n        letter_grades = append(letter_grades,\
    \ \"F\")\n    } else if avg_grade > 5.0 { \n        letter_grades = append(letter_grades,\
    \ \"F#\")\n    } else if avg_grade > 4.0 {\n        letter_grades = append(letter_grades,\
    \ \"D#\")\n    } else if avg_grade > 3.0 {\n        letter_grades = append(letter_grades,\
    \ \"D\")\n    } else if avg_grade > 2.0 {\n        letter_grades = append(letter_grades,\
    \ \"C#\")\n    } else if avg_grade > 1.0 {\n        letter_grades = append(letter_grades,\
    \ \"C\")\n    } else if avg_grade > 0.0 && avg_grade < 3.0 {\n        letter_grades\
    \ = append(letter_grades, \"B#\")\n    } else if avg_grade > 0.0 && avg_grade\
    \ < 2.0 {\n        letter_grades = append(letter_grades, \"B\")\n    } else if\
    \ avg_grade > 0.0 && avg_grade < 1.0 {\n        letter_grades = append(letter_grades,\
    \ \"A-\")\n    } else if avg_grade > 0.0 {\n        letter_grades = append(letter_grades,\
    \ \"A\")\n    } else {\n        letter_grades = append(letter_grades, \"A+\")\n\
    \    }\n    return letter_grades\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T)\
    \ {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected:\
    \ []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"\
    D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"}\
    \ },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmp4ky7eqrq_test.go:88: expected '[A+ B C- C A-]', got '[C#]'\n\
    \    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n        tmp4ky7eqrq_test.go:88:\
    \ expected '[D+]', got '[C]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2\
    \ (0.00s)\n        tmp4ky7eqrq_test.go:88: expected '[D-]', got '[B#]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmp4ky7eqrq_test.go:88:\
    \ expected '[E]', got '[A+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmp4ky7eqrq_test.go:88: expected '[D D- C- B B+]', got '[C]'\n\
    \    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmp4ky7eqrq_test.go:88:\
    \ expected '[E D-]', got '[B#]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075617
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var grades_string []string\n    \n    // Write your\
    \ function here\n    \n    // Example output\n    // grades_string = grade_equation([]float64{4.0,\
    \ 3, 1.7, 2, 3.5})\n    // fmt.Println(grades_string)\n    \n    return grades_string\n\
    }\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpinei6vpl_test.go:60: expected '[A+ B C- C A-]', got '[]'\n\
    \    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n        tmpinei6vpl_test.go:60:\
    \ expected '[D+]', got '[]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2\
    \ (0.00s)\n        tmpinei6vpl_test.go:60: expected '[D-]', got '[]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmpinei6vpl_test.go:60:\
    \ expected '[E]', got '[]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpinei6vpl_test.go:60: expected '[D D- C- B B+]', got '[]'\n\
    \    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmpinei6vpl_test.go:60:\
    \ expected '[E D-]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075617
- exit_code: 2
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    grades := grades[:]\n    var letter string\n    for\
    \ i := len(grades) - 1; i > -1; i-- {\n        if grades[i] >= 4.0 {\n       \
    \     letter = \"A+\"\n            grades[i] = grades[i] - 4\n        } else if\
    \ grades[i] >= 3.7 {\n            letter = \"A\"\n            grades[i] = grades[i]\
    \ - 3.7\n        } else if grades[i] >= 3.3 {\n            letter = \"A-\"\n \
    \           grades[i] = grades[i] - 3.3\n        } else if grades[i] >= 3.0 {\n\
    \            letter = \"B+\"\n            grades[i] = grades[i] - 3.0\n      \
    \  } else if grades[i] >= 2.7 {\n            letter = \"B\"\n            grades[i]\
    \ = grades[i] - 2.7\n        } else if grades[i] >= 2.3 {\n            letter\
    \ = \"B-\"\n            grades[i] = grades[i] - 2.3\n        } else if grades[i]\
    \ >= 2.0 {\n            letter = \"C+\"\n            grades[i] = grades[i] - 2.0\n\
    \        } else if grades[i] >= 1.7 {\n            letter = \"C\"\n          \
    \  grades[i] = grades[i] - 1.7\n        } else if grades[i] >= 1.3 {\n       \
    \     letter = \"C-\"\n            grades[i] = grades[i] - 1.3\n        } else\
    \ if grades[i] >= 1.0 {\n            letter = \"D+\"\n            grades[i] =\
    \ grades[i] - 1.0\n        } else if grades[i] >= 0.7 {\n            letter =\
    \ \"D\"\n            grades[i] = grades[i] - 0.7\n        } else if grades[i]\
    \ >= 0.0 {\n            letter = \"D-\"\n            grades[i] = grades[i] - 0.0\n\
    \        } else {\n            letter = \"E\"\n        }\n    }\n    return []string{letter}\n\
    }\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmy75abz3_test.go:31:12: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075617
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    // This algorithm will need to return the letter\
    \ grades given a list of \n    // GPAs and the equation listed above in the comments.\
    \ You will need to \n    // write a function for the grades first.\n    letterGrade\
    \ := []string{}\n    \n    return letterGrade\n}\n</code>\n<|/ q |>\n<| c |>\n\
    Can you show the code you have so far, especially the part where you're trying\
    \ to solve the equation - maybe as a [mcve]? The code you posted looks like it\
    \ could be a great start, but it's hard to know what exactly your problem is without\
    \ it.\n<|/ c |>\n<| c |>\nI have added the code as you said. The problem is that\
    \ I am not able to write a function that will give the letter grade based on the\
    \ GPA grades\n<|/ c |>\n<| c |>\nThe problem is with the \"return letter grade\"\
    \ part\n<|/ c |>\n<| c |>\nThe issue is that you haven't even tried to write that\
    \ function yet. You're trying to implement something that sounds like it would\
    \ take an entire semester - but you haven't even started trying it. That's what's\
    \ causing your confusion - you're trying to solve the problem before you've even\
    \ written anything. You need to go back and think about this problem *before*\
    \ you even try to write the code, because right now you're just confused about\
    \ how it might be done - and even if you did write something, you're still trying\
    \ to solve a problem you haven't even written yet.\n<|/ c |>\n<| a tags=algorithm,go\
    \ |>\nIf you don't want to use packages then you can write the algorithm yourself\
    \ using the following steps:\n\nGet the number of grades for each student in the\
    \ students slice.\nSum all the grades for each student and divide it by the number\
    \ of students to get the average.\nFor each student in the students slice calculate\
    \ the letter grade.\n\nThe result will be a slice. Example code:\n<code>\npackage\
    \ main\n\nimport (\n    \"fmt\"\n    \"math\"\n)\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps0n1ro3h_test.go:38:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075616
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    return []string{}\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmp_srwq95q_test.go:52: expected '[A+ B C- C A-]', got '[]'\n\
    \    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n        tmp_srwq95q_test.go:52:\
    \ expected '[D+]', got '[]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2\
    \ (0.00s)\n        tmp_srwq95q_test.go:52: expected '[D-]', got '[]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmp_srwq95q_test.go:52:\
    \ expected '[E]', got '[]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmp_srwq95q_test.go:52: expected '[D D- C- B B+]', got '[]'\n\
    \    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmp_srwq95q_test.go:52:\
    \ expected '[E D-]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075288
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    gradesSorted := []float64{}\n    gradesSorted = append(gradesSorted,\
    \ grades...)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted =\
    \ append(gradesSorted, -10.0)\n    gradesSorted = append(gradesSorted, -1.0)\n\
    \    gradesSorted = append(gradesSorted, 10.0)\n    gradesSorted = append(gradesSorted,\
    \ 1.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 10.0)\n    gradesSorted = append(gradesSorted, -1.0)\n    gradesSorted = append(gradesSorted,\
    \ -2.0)\n    gradesSorted = append(gradesSorted, -3.0)\n    gradesSorted = append(gradesSorted,\
    \ 3.0)\n    gradesSorted = append(gradesSorted, 3.3)\n    gradesSorted = append(gradesSorted,\
    \ 3.7)\n    gradesSorted = append(gradesSorted, 4.0)\n    gradesSorted = append(gradesSorted,\
    \ 4.0)\n    gradesSorted = append(gradesSorted, 4.0)\n    gradesSorted = append(gradesSorted,\
    \ 3.7)\n    gradesSorted = append(gradesSorted, 3.3)\n    gradesSorted = append(gradesSorted,\
    \ 2.0)\n    gradesSorted = append(gradesSorted, 2.7)\n    gradesSorted = append(gradesSorted,\
    \ 2.3)\n    gradesSorted = append(gradesSorted, 2.0)\n    gradesSorted = append(gradesSorted,\
    \ 1.7)\n    gradesSorted = append(gradesSorted, 1.3)\n    gradesSorted = append(gradesSorted,\
    \ 1.0)\n    gradesSorted = append(gradesSorted, 1.0)\n    gradesSorted = append(gradesSorted,\
    \ 1.3)\n    gradesSorted = append(gradesSorted, 1.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.7)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ \nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_gts7iws_test.go:72:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075616
- exit_code: 2
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    grades = append([]float64{}, grades...)\n    result\
    \ := make([]string, len(grades))\n    for index, grade := range grades {\n   \
    \     result += []string{grade_calculation(grade)}\n    }\n    return result\n\
    }\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpieq2lzq0_test.go:33:9: index declared but not used

    /tmp/tmpieq2lzq0_test.go:34:9: invalid operation: operator + not defined on result
    (variable of type []string)

    /tmp/tmpieq2lzq0_test.go:34:28: undefined: grade_calculation

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075617
- exit_code: 2
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    // Add some error checking.\n    if len(grades) <\
    \ 1 {\n        return []string{}\n    }\n    \n    var letter []string\n    \n\
    \    // Loop through the grades and compare them to GPA.\n    for i, grade :=\
    \ range grades {\n        if grade > 0 {\n            letter = append(letter,\
    \ \"A+\")\n        }\n        if grade > 3.7 {\n            letter = append(letter,\
    \ \"A\")\n        }\n        if grade > 3.3 {\n            letter = append(letter,\
    \ \"A-\")\n        }\n        if grade > 3.0 {\n            letter = append(letter,\
    \ \"B+\")\n        }\n        if grade > 2.7 {\n            letter = append(letter,\
    \ \"B\")\n        }\n        if grade > 2.3 {\n            letter = append(letter,\
    \ \"B-\")\n        }\n        if grade > 2.0 {\n            letter = append(letter,\
    \ \"C+\")\n        }\n        if grade > 1.7 {\n            letter = append(letter,\
    \ \"C\")\n        }\n        if grade > 1.3 {\n            letter = append(letter,\
    \ \"C-\")\n        }\n        if grade > 1.0 {\n            letter = append(letter,\
    \ \"D+\")\n        }\n        if grade > 0.7 {\n            letter = append(letter,\
    \ \"D\")\n        }\n        if grade > 0.0 {\n            letter = append(letter,\
    \ \"D-\")\n        }\n        if grade > 0.0 {\n            letter = append(letter,\
    \ \"E\")\n        }\n    }\n    \n    // Return an empty list if grades is empty.\n\
    \    if len(letter) == 0 {\n        return letter\n    }\n    return letter\n\
    }\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr96qt1i2_test.go:39:9: i declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075617
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    if len(grades) == 0 {\n        return []string{\"\
    E\"}\n    }\n    studentGrades := make([]string, len(grades))\n    for i := range\
    \ studentGrades {\n        studentGrades[i] = \"\"\n    }\n    for i := range\
    \ grades {\n        // I started with this:\n        // if grades[i] >= 3.0 {\n\
    \        //     studentGrades[i] += \"B+\"\n        // } else if grades[i] >=\
    \ 2.7 {\n        //     studentGrades[i] += \"B\"\n        // } else if grades[i]\
    \ >= 2.3 {\n        //     studentGrades[i] += \"B-\"\n        // } else if grades[i]\
    \ >= 2.0 {\n        //     studentGrades[i] += \"C+\"\n        // } else if grades[i]\
    \ >= 1.7 {\n        //     studentGrades[i] += \"C\"\n        // } else if grades[i]\
    \ >= 1.3 {\n        //     studentGrades[i] += \"C-\"\n        // } else if grades[i]\
    \ >= 1.0 {\n        //     studentGrades[i] += \"D+\"\n        // } else if grades[i]\
    \ >= 0.7 {\n        //     studentGrades[i] += \"D\"\n        // } else if grades[i]\
    \ >= 0.0 {\n        //     studentGrades[i] += \"D-\"\n        // } else if grades[i]\
    \ >= 0.0 {\n        //     studentGrades[i] += \"E\"\n        // }\n        //\
    \ So I refactored it to:\n        studentGrades[i] = \"E\"\n        if grades[i]\
    \ >= 3.0 {\n            studentGrades[i] += \"B+\"\n        } else if grades[i]\
    \ >= 2.7 {\n            studentGrades[i] += \"B\"\n        } else if grades[i]\
    \ >= 2.3 {\n            studentGrades[i] += \"B-\"\n        } else if grades[i]\
    \ >= 2.0 {\n            studentGrades[i] += \"C+\"\n        } else if grades[i]\
    \ >= 1.7 {\n            studentGrades[i] += \"C\"\n        } else if grades[i]\
    \ >= 1.3 {\n            studentGrades[i] += \"C-\"\n        } else if grades[i]\
    \ >= 1.0 {\n            studentGrades[i] += \"D+\"\n        } else if grades[i]\
    \ >= 0.7 {\n            studentGrades[i] += \"D\"\n        } else if grades[i]\
    \ >= 0.0 {\n            studentGrades[i] += \"D-\"\n        }\n    }\n    return\
    \ studentGrades\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate\
    \ := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0,\
    \ 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n\
    \     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n   \
    \  { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     {\
    \ actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual:\
    \ candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}),\
    \ expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmp2zmag88e_test.go:104: expected '[A+ B C- C A-]', got '[EB+\
    \ EB+ EC EC+ EB+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n\
    \        tmp2zmag88e_test.go:104: expected '[D+]', got '[ED+]'\n    --- FAIL:\
    \ TestNumerical_Letter_Grade/test_num__2 (0.00s)\n        tmp2zmag88e_test.go:104:\
    \ expected '[D-]', got '[ED-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3\
    \ (0.00s)\n        tmp2zmag88e_test.go:104: expected '[E]', got '[ED-]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmp2zmag88e_test.go:104:\
    \ expected '[D D- C- B B+]', got '[ED+ ED- EC- EB EB+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5\
    \ (0.00s)\n        tmp2zmag88e_test.go:104: expected '[E D-]', got '[ED- ED]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075617
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var letterGrade []string\n    letterGrade = append(letterGrade,\
    \ \"A+\")\n    letterGrade = append(letterGrade, \"A\")\n    letterGrade = append(letterGrade,\
    \ \"A-\")\n    letterGrade = append(letterGrade, \"B+\")\n    letterGrade = append(letterGrade,\
    \ \"B\")\n    letterGrade = append(letterGrade, \"B-\")\n    letterGrade = append(letterGrade,\
    \ \"C+\")\n    letterGrade = append(letterGrade, \"C\")\n    letterGrade = append(letterGrade,\
    \ \"C-\")\n    letterGrade = append(letterGrade, \"D+\")\n    letterGrade = append(letterGrade,\
    \ \"D\")\n    letterGrade = append(letterGrade, \"D-\")\n    letterGrade = append(letterGrade,\
    \ \"E\")\n    return letterGrade\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T)\
    \ {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected:\
    \ []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"\
    D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"}\
    \ },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpbcnhgzyo_test.go:66: expected '[A+ B C- C A-]', got '[A+\
    \ A A- B+ B B- C+ C C- D+ D D- E]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__1\
    \ (0.00s)\n        tmpbcnhgzyo_test.go:66: expected '[D+]', got '[A+ A A- B+ B\
    \ B- C+ C C- D+ D D- E]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2\
    \ (0.00s)\n        tmpbcnhgzyo_test.go:66: expected '[D-]', got '[A+ A A- B+ B\
    \ B- C+ C C- D+ D D- E]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3\
    \ (0.00s)\n        tmpbcnhgzyo_test.go:66: expected '[E]', got '[A+ A A- B+ B\
    \ B- C+ C C- D+ D D- E]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpbcnhgzyo_test.go:66: expected '[D D- C- B B+]', got '[A+\
    \ A A- B+ B B- C+ C C- D+ D D- E]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5\
    \ (0.00s)\n        tmpbcnhgzyo_test.go:66: expected '[E D-]', got '[A+ A A- B+\
    \ B B- C+ C C- D+ D D- E]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075617
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    result := make([]string, 0, len(grades))\n    for\
    \ _, grade := range grades {\n        if grade >= 3.0 { // grade is greater than\
    \ or equal to 3.0\n            result = append(result, \"A+\") // if true then\
    \ append A+\n        }\n        if grade >= 2.7 { // grade is greater than or\
    \ equal to 2.7\n            result = append(result, \"B\") // if true then append\
    \ B\n        }\n        if grade >= 2.3 { // grade is greater than or equal to\
    \ 2.3\n            result = append(result, \"B-\") // if true then append B\n\
    \        }\n        if grade >= 2.0 { // grade is greater than or equal to 2.0\n\
    \            result = append(result, \"C+\") // if true then append C\n      \
    \  }\n        if grade >= 1.7 { // grade is greater than or equal to 1.7\n   \
    \         result = append(result, \"C\") // if true then append C\n        }\n\
    \        if grade >= 1.3 { // grade is greater than or equal to 1.3\n        \
    \    result = append(result, \"C-\") // if true then append C\n        }\n   \
    \     if grade >= 1.0 { // grade is greater than or equal to 1.0\n           \
    \ result = append(result, \"D+\") // if true then append D\n        }\n      \
    \  if grade >= 0.7 { // grade is greater than or equal to 0.7\n            result\
    \ = append(result, \"D\") // if true then append D\n        }\n        if grade\
    \ >= 0.0 { // grade is greater than or equal to 0.0\n            result = append(result,\
    \ \"D-\") // if true then append D\n        }\n        if grade < 0.0 { // grade\
    \ is less than 0.0\n            result = append(result, \"E\") // if true then\
    \ append E\n        }\n    }\n    return result\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpiupxe3b__test.go:85: expected '[A+ B C- C A-]', got '[A+\
    \ B B- C+ C C- D+ D D- A+ B B- C+ C C- D+ D D- C C- D+ D D- C+ C C- D+ D D- A+\
    \ B B- C+ C C- D+ D D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__1\
    \ (0.00s)\n        tmpiupxe3b__test.go:85: expected '[D+]', got '[D+ D D-]'\n\
    \    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmpiupxe3b__test.go:85:\
    \ expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpiupxe3b__test.go:85: expected '[D D- C- B B+]', got '[D+\
    \ D D- D- C- D+ D D- B B- C+ C C- D+ D D- A+ B B- C+ C C- D+ D D-]'\n    --- FAIL:\
    \ TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmpiupxe3b__test.go:85:\
    \ expected '[E D-]', got '[D- D D-]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075617
- exit_code: 2
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    gradesLen := len(grades)\n    grade := \"E\"\n  \
    \  if gradesLen == 0 {\n        return []string{grade}\n    }\n    gradesMax :=\
    \ grades[len(grades)-1]\n    gradesMin := grades[0]\n    for _, grade := range\
    \ grades {\n        if grade >= gradesMax {\n            grade = gradesMax\n \
    \       } else if grade <= gradesMin {\n            grade = gradesMin\n      \
    \  } else {\n            grade = \"D-\"\n        }\n        grade = strings.ToUpper(grade)\n\
    \    }\n    return []string{grade}\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T)\
    \ {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected:\
    \ []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"\
    D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"}\
    \ },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoq_pag76_test.go:44:21: cannot use "D-" (untyped string constant) as float64
    value in assignment

    /tmp/tmpoq_pag76_test.go:46:17: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075617
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    result := []string{}\n    for _, grade := range grades\
    \ {\n        if grade > 3.7 || grade > 2.7 || grade > 1.7 {\n            grade\
    \ = grade - 0.2\n            if grade > 3.7 || grade > 2.7 || grade > 1.7 {\n\
    \                grade = grade - 0.2\n            }\n        }\n        grade\
    \ = grade * 10\n        grade = grade / 100\n        grade = grade / 10\n    \
    \    letterGrade := \"A+\"\n        if grade >= 4 && grade <= 4.3 {\n        \
    \    letterGrade = \"A\"\n        } else if grade > 4.3 && grade < 4.6 {\n   \
    \         letterGrade = \"A-\"\n        } else if grade > 4.6 && grade < 4.9 {\n\
    \            letterGrade = \"B+\"\n        } else if grade > 4.9 && grade < 5.2\
    \ {\n            letterGrade = \"B\"\n        } else if grade > 5.2 && grade <\
    \ 5.5 {\n            letterGrade = \"B-\"\n        } else if grade > 5.5 && grade\
    \ < 5.8 {\n            letterGrade = \"C+\"\n        } else if grade > 5.8 &&\
    \ grade < 6.01 {\n            letterGrade = \"C\"\n        } else if grade > 6.01\
    \ && grade < 6.14 {\n            letterGrade = \"C-\"\n        } else if grade\
    \ > 6.14 && grade < 6.27 {\n            letterGrade = \"D+\"\n        } else if\
    \ grade > 6.27 && grade < 6.40 {\n            letterGrade = \"D\"\n        } else\
    \ if grade > 6.40 && grade < 6.55 {\n            letterGrade = \"D-\"\n      \
    \  } else if grade > 6.55 && grade < 6.68 {\n            letterGrade = \"E\"\n\
    \        } else {\n            letterGrade = \"D-\"\n        }\n        result\
    \ = append(result, letterGrade)\n    }\n    return result\n}\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpthwz0u___test.go:92: expected '[A+ B C- C A-]', got '[D-\
    \ D- D- D- D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n\
    \        tmpthwz0u___test.go:92: expected '[D+]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3\
    \ (0.00s)\n        tmpthwz0u___test.go:92: expected '[E]', got '[D-]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmpthwz0u___test.go:92:\
    \ expected '[D D- C- B B+]', got '[D- D- D- D- D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5\
    \ (0.00s)\n        tmpthwz0u___test.go:92: expected '[E D-]', got '[D- D-]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075618
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var gradeStrings []string\n    \n    for i := len(grades)\
    \ - 1; i >= 0; i-- {\n        var tempGrade float64\n        var letter string\n\
    \        \n        // Loop through the list of grades and find the grade\n   \
    \     // with the highest value.\n        for j := 0; j < len(grades); j++ {\n\
    \            if grades[j] >= tempGrade {\n                tempGrade = grades[j]\n\
    \                letter = \"+\"\n            }\n        }\n        \n        //\
    \ If the last grade was a letter grade,\n        // then change the letter grade\
    \ to a minus.\n        if letter == \"+\" {\n            letter = \"-\"\n    \
    \    }\n        \n        // Now that we've converted a letter grade to plus\n\
    \        // or minus, the letter grade will be in the right place\n        //\
    \ to put into the grade string.\n        gradeStrings = append(gradeStrings, letter+fmt.Sprintf(\"\
    %f\", grades[i]))\n    }\n    return gradeStrings\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpcxdi7ggm_test.go:78: expected '[A+ B C- C A-]', got '[-3.500000\
    \ -2.000000 -1.700000 -3.000000 -4.000000]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__1\
    \ (0.00s)\n        tmpcxdi7ggm_test.go:78: expected '[D+]', got '[-1.200000]'\n\
    \    --- FAIL: TestNumerical_Letter_Grade/test_num__2 (0.00s)\n        tmpcxdi7ggm_test.go:78:\
    \ expected '[D-]', got '[-0.500000]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3\
    \ (0.00s)\n        tmpcxdi7ggm_test.go:78: expected '[E]', got '[-0.000000]'\n\
    \    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmpcxdi7ggm_test.go:78:\
    \ expected '[D D- C- B B+]', got '[-3.300000 -2.800000 -1.500000 -0.300000 -1.000000]'\n\
    \    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmpcxdi7ggm_test.go:78:\
    \ expected '[E D-]', got '[-0.700000 -0.000000]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075618
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    // Create an empty list\n    letter_grades := make([]string,\
    \ len(grades))\n\n    // Loop through the grade list and insert each grade into\
    \ the letter_grades list\n    for _, grade := range grades {\n        letter :=\
    \ \"\"\n        if grade >= 4.0 {\n            letter = \"A+\"\n        } else\
    \ if grade >= 3.7 {\n            letter = \"A\"\n        } else if grade >= 3.3\
    \ {\n            letter = \"A-\"\n        } else if grade >= 3.0 {\n         \
    \   letter = \"B+\"\n        } else if grade >= 2.7 {\n            letter = \"\
    B\"\n        } else if grade >= 2.3 {\n            letter = \"B-\"\n        }\
    \ else if grade >= 2.0 {\n            letter = \"C+\"\n        } else if grade\
    \ >= 1.7 {\n            letter = \"C\"\n        } else if grade >= 1.3 {\n   \
    \         letter = \"C-\"\n        } else if grade >= 1.0 {\n            letter\
    \ = \"D+\"\n        } else if grade >= 0.7 {\n            letter = \"D\"\n   \
    \     } else if grade >= 0.0 {\n            letter = \"D-\"\n        } else if\
    \ grade >= 0.0 {\n            letter = \"E\"\n        }\n        letter_grades\
    \ = append(letter_grades, letter)\n    }\n\n    return letter_grades\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nThis was a very clear explanation. Thanks for your\
    \ help.\n<|/ c |>\n<| a tags=go,for-loop,if-statement,arrays,function |>\nA different\
    \ way to do it:\n<code>\npackage main\n\nimport (\n    \"fmt\"\n)\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmptohnsrym_test.go:69:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075617
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    letter := make([]string, len(grades))\n    for i,\
    \ grade := range grades {\n        if grade == 0.0 {\n            letter[i] =\
    \ \"E\"\n        } else if grade > 3.0 {\n            letter[i] = \"C\"\n    \
    \    } else if grade > 2.7 {\n            letter[i] = \"C+\"\n        } else if\
    \ grade > 2.3 {\n            letter[i] = \"C-\"\n        } else if grade > 1.7\
    \ {\n            letter[i] = \"B+\"\n        } else if grade > 1.3 {\n       \
    \     letter[i] = \"B\"\n        } else if grade > 0.7 {\n            letter[i]\
    \ = \"B-\"\n        } else if grade > 0.3 {\n            letter[i] = \"A-\"\n\
    \        } else if grade > 0.0 {\n            letter[i] = \"A+\"\n        } else\
    \ if grade <= 0.0 {\n            letter[i] = \"D-\"\n        } else {\n      \
    \      letter[i] = \"D\"\n        }\n    }\n    return letter\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmptl23ovf0_test.go:78: expected '[A+ B C- C A-]', got '[C\
    \ C+ B B+ C]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n\
    \        tmptl23ovf0_test.go:78: expected '[D+]', got '[B-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2\
    \ (0.00s)\n        tmptl23ovf0_test.go:78: expected '[D-]', got '[A-]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmptl23ovf0_test.go:78:\
    \ expected '[D D- C- B B+]', got '[B- A+ B C+ C]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5\
    \ (0.00s)\n        tmptl23ovf0_test.go:78: expected '[E D-]', got '[E A-]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075618
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var letterGrades []string\n    for _, grade := range\
    \ grades {\n        if grade > 3.0 {\n            letterGrades = append(letterGrades,\
    \ \"B+\")\n        } else if grade > 2.7 {\n            letterGrades = append(letterGrades,\
    \ \"B\")\n        } else if grade > 2.3 {\n            letterGrades = append(letterGrades,\
    \ \"B-\")\n        } else if grade > 2.0 {\n            letterGrades = append(letterGrades,\
    \ \"C+\")\n        } else if grade > 1.7 {\n            letterGrades = append(letterGrades,\
    \ \"C\")\n        } else if grade > 1.3 {\n            letterGrades = append(letterGrades,\
    \ \"C-\")\n        } else if grade > 1.0 {\n            letterGrades = append(letterGrades,\
    \ \"D+\")\n        } else if grade > 0.7 {\n            letterGrades = append(letterGrades,\
    \ \"D\")\n        } else if grade > 0.0 {\n            letterGrades = append(letterGrades,\
    \ \"D-\")\n        } else {\n            letterGrades = append(letterGrades, \"\
    E\")\n        }\n    }\n    return letterGrades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpk08bvp9z_test.go:76: expected '[A+ B C- C A-]', got '[B+\
    \ B C- C B+]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075354
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    // Your code here\n    letterGrade := make([]string,\
    \ len(grades))\n    fmt.Printf(\"%v \\n\", grades)\n    fmt.Printf(\"%v \\n\"\
    , letterGrade)\n    for i := 0; i < len(grades); i++ {\n        letterGrade[i]\
    \ = grades[i] >= 3.6 && grades[i] < 4.0 ? (grades[i]-3)/3.6 : \"E\"\n    }\n \
    \   return letterGrade\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n\
    \  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0,\
    \ 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n\
    \     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n   \
    \  { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     {\
    \ actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual:\
    \ candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}),\
    \ expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpijy1tgbk_test.go:36:62: illegal character U+003F ''?''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075617
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var grades_string []string\n    for _, grade := range\
    \ grades {\n        if grade < 4.0 {\n            grades_string = append(grades_string,\
    \ \"A\")\n        } else if grade > 4.0 && (grade < 3.7) {\n            grades_string\
    \ = append(grades_string, \"A-\")\n        } else if grade > 3.7 && (grade < 3.3)\
    \ {\n            grades_string = append(grades_string, \"B+\")\n        } else\
    \ if grade > 3.3 {\n            grades_string = append(grades_string, \"B\")\n\
    \        } else if grade > 3.0 && (grade < 2.7) {\n            grades_string =\
    \ append(grades_string, \"B-\")\n        } else if grade > 2.7 {\n           \
    \ grades_string = append(grades_string, \"C+\")\n        } else if grade > 2.3\
    \ {\n            grades_string = append(grades_string, \"C\")\n        } else\
    \ if grade > 2.0 && (grade < 1.7) {\n            grades_string = append(grades_string,\
    \ \"C-\")\n        } else if grade > 1.7 {\n            grades_string = append(grades_string,\
    \ \"D+\")\n        } else if grade > 1.3 {\n            grades_string = append(grades_string,\
    \ \"D\")\n        } else if grade > 1.0 {\n            grades_string = append(grades_string,\
    \ \"D-\")\n        } else {\n            grades_string = append(grades_string,\
    \ \"E\")\n        }\n    }\n    return grades_string\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmp7p4c6f1c_test.go:80: expected '[A+ B C- C A-]', got '[B\
    \ A A A A]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n  \
    \      tmp7p4c6f1c_test.go:80: expected '[D+]', got '[A]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2\
    \ (0.00s)\n        tmp7p4c6f1c_test.go:80: expected '[D-]', got '[A]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmp7p4c6f1c_test.go:80:\
    \ expected '[E]', got '[A]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmp7p4c6f1c_test.go:80: expected '[D D- C- B B+]', got '[A\
    \ A A A A]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n  \
    \      tmp7p4c6f1c_test.go:80: expected '[E D-]', got '[A A]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075618
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var result []string\n    \n    \n    //check first\
    \ item\n    if grades[0] > 0 && grades[0] <= 3 {\n        result = append(result,\
    \ \"A+\")\n    }\n    \n    //check second item\n    if grades[1] > 3 && grades[1]\
    \ <= 7 {\n        result = append(result, \"A\")\n    }\n    \n    //check third\
    \ item\n    if grades[2] > 7 && grades[2] <= 11 {\n        result = append(result,\
    \ \"A-\")\n    }\n    \n    //check fourth item\n    if grades[3] > 11 && grades[3]\
    \ <= 15 {\n        result = append(result, \"B+\")\n    }\n    \n    //check fifth\
    \ item\n    if grades[4] > 15 && grades[4] <= 19 {\n        result = append(result,\
    \ \"B\")\n    }\n    \n    //check sixth item\n    if grades[5] > 19 && grades[5]\
    \ <= 21 {\n        result = append(result, \"B-\")\n    }\n    \n    //check seventh\
    \ item\n    if grades[6] > 21 && grades[6] <= 25 {\n        result = append(result,\
    \ \"C+\")\n    }\n    \n    //check eighth item\n    if grades[7] > 25 && grades[7]\
    \ <= 29 {\n        result = append(result, \"C\")\n    }\n    \n    //check ninth\
    \ item\n    if grades[8] > 29 && grades[8] <= 33.3 {\n        result = append(result,\
    \ \"C-\")\n    }\n    \n    //check tenth item\n    if grades[9] > 33.3 && grades[9]\
    \ <= 36 {\n        result = append(result, \"D+\")\n    }\n    \n    //check eleventh\
    \ item\n    if grades[10] > 36 && grades[10] <= 39 {\n        result = append(result,\
    \ \"D\")\n    }\n    \n    //check twelfth item\n    if grades[11] > 39 && grades[11]\
    \ <= 43.7 {\n        result = append(result, \"D-\")\n    }\n    \n    //check\
    \ thirteenth item\n    if grades[12] > 43.7 && grades[12] <= 47.3 {\n        result\
    \ = append(result, \"E\")\n    }\n    \n    return result\n}\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\npanic: runtime error: index\
    \ out of range [5] with length 5 [recovered]\n\tpanic: runtime error: index out\
    \ of range [5] with length 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513720,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513720, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.numerical_letter_grade({0xc0000c45f8, 0x5,\
    \ 0x0?})\n\t/tmp/tmpm4pm8gv8_test.go:60 +0xa45\ncommand-line-arguments_test.TestNumerical_Letter_Grade(0x0?)\n\
    \t/tmp/tmpm4pm8gv8_test.go:108 +0xc2\ntesting.tRunner(0xc0001a01a0, 0x529060)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075618
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    g := grades[len(grades)-1]\n    t := 0.10\n    f\
    \ := 0.90\n    if g > t && g > f {\n        return []string{\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\"}\n    } else if g > t && g < f {\n        return []string{\"\
    A-\", \"B\", \"C+\", \"C\", \"A-\"}\n    } else if g > f && g > t {\n        return\
    \ []string{\"A-\", \"B\", \"C\", \"C\", \"A-\"}\n    } else if g > f && g < t\
    \ {\n        return []string{\"A-\", \"B\", \"C+\", \"C\", \"A-\"}\n    } else\
    \ if g < t && g < f {\n        return []string{\"B+\", \"B\", \"C\", \"C\", \"\
    A-\"}\n    } else if g < t && g > f {\n        return []string{\"B-\", \"B\",\
    \ \"C\", \"C\", \"A-\"}\n    } else if g < f && g < t {\n        return []string{\"\
    B-\", \"B\", \"C+\", \"C\", \"A-\"}\n    } else if g < f && g > t {\n        return\
    \ []string{\"B+\", \"B\", \"C\", \"C\", \"A-\"}\n    } else {\n        return\
    \ []string{\"D+\", \"D\", \"E\"}\n    }\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__1\
    \ (0.00s)\n        tmp4kn31f_6_test.go:73: expected '[D+]', got '[A+ B C- C A-]'\n\
    \    --- FAIL: TestNumerical_Letter_Grade/test_num__2 (0.00s)\n        tmp4kn31f_6_test.go:73:\
    \ expected '[D-]', got '[A- B C+ C A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3\
    \ (0.00s)\n        tmp4kn31f_6_test.go:73: expected '[E]', got '[B+ B C C A-]'\n\
    \    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmp4kn31f_6_test.go:73:\
    \ expected '[D D- C- B B+]', got '[A+ B C- C A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5\
    \ (0.00s)\n        tmp4kn31f_6_test.go:73: expected '[E D-]', got '[A- B C+ C\
    \ A-]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075618
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var result []string\n    var total float64\n    for\
    \ _, grade := range grades {\n        total += grade\n        if total < 3.0 {\n\
    \            result.append(fmt.Sprintf(\"A+\"))\n        } else if total < 4.0\
    \ {\n            result.append(fmt.Sprintf(\"A\"))\n        } else if total <\
    \ 5.0 {\n            result.append(fmt.Sprintf(\"A-\"))\n        } else if total\
    \ < 6.0 {\n            result.append(fmt.Sprintf(\"B+\"))\n        } else if total\
    \ < 7.0 {\n            result.append(fmt.Sprintf(\"B\"))\n        } else if total\
    \ < 8.0 {\n            result.append(fmt.Sprintf(\"B-\"))\n        } else if total\
    \ < 9.0 {\n            result.append(fmt.Sprintf(\"C+\"))\n        } else if total\
    \ < 10.0 {\n            result.append(fmt.Sprintf(\"C\"))\n        } else if total\
    \ < 11.0 {\n            result.append(fmt.Sprintf(\"C-\"))\n        } else if\
    \ total < 12.0 {\n            result.append(fmt.Sprintf(\"D+\"))\n        } else\
    \ if total < 13.0 {\n            result.append(fmt.Sprintf(\"D\"))\n        }\
    \ else if total < 14.0 {\n            result.append(fmt.Sprintf(\"D-\"))\n   \
    \     } else if total < 15.0 {\n            result.append(fmt.Sprintf(\"E\"))\n\
    \        } else if total < 16.0 {\n            result.append(fmt.Sprintf(\"F\"\
    ))\n        }\n    }\n    return result\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\n\
    This doesn't seem to work for me. I've just tried it with your `grade_equation()`\
    \ function, and I get the same result as when I tried to use the `grades.Sort()`\
    \ function.\n<|/ c |>\n<| c |>\nThe first part of my answer was wrong. I've edited\
    \ it. It should work now.\n<|/ c |>\n<| a |>\nYou can sort the grades using a\
    \ variation of bubble sort or insertion sort, as each iteration of the loop will\
    \ change the average of the grades, making them less likely to appear in a sorted\
    \ list.\nIn pseudo-code, something like this:\n<code>\nfor i := 1 to length(grades)\n\
    \    grades_sorted := grades\n    for j := 1 to length(grades)\n        if grades[j]\
    \ < grades[i-1]\n            grades_sorted := swap_grades(grades, j, i-1)\n  \
    \  grades = grades_sorted\n</code>\nThis will be very slow and can take O(n^2)\
    \ time if you're sorting a large number of grades. I suspect there's not going\
    \ to be a better solution.\n<|/ a dscore=0 tags=algorithm,sorting,go |>\n<| a\
    \ |>\nA few days ago, I wrote a program to help calculate letter grades. I needed\
    \ it to \nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5yfihe7l_test.go:67:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075617
- exit_code: 2
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    sorted_grades := append([]float64{}, grades...)\n\
    \    sorted_grades = append([]float64{}, sorted_grades[:len(sorted_grades)-1])\n\
    \    sorted_grades = append([]float64{}, sorted_grades[len(sorted_grades)-1:])\n\
    \    sort.Float64s(sorted_grades)\n\n    grade_equation_array := make([]string,\
    \ len(sorted_grades))\n    grade_equation_array[0] = \"E+\"\n    grade_equation_array[1]\
    \ = \"E\"\n    for i := 2; i < len(sorted_grades); i++ {\n        grade_equation_array[i]\
    \ = grade_equation_array[i - 2] + \"+\"\n        grade_equation_array[i] += fmt.Sprintf(\"\
    %+d\", sorted_grades[i]/10)\n        grade_equation_array[i] += \"-\"\n    }\n\
    \    return grade_equation_array\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T)\
    \ {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected:\
    \ []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"\
    D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"}\
    \ },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdak0vlos_test.go:32:54: cannot use sorted_grades[:len(sorted_grades) -
    1] (value of type []float64) as type float64 in argument to append

    /tmp/tmpdak0vlos_test.go:33:54: cannot use sorted_grades[len(sorted_grades) -
    1:] (value of type []float64) as type float64 in argument to append

    /tmp/tmpdak0vlos_test.go:34:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075618
- exit_code: 2
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    letters := []string{\"A+\", \"B\", \"C-\", \"C\"\
    , \"A-\"}\n    return letters[0 : len(grades)] + append([]string{\"\"}, letters[len(grades)\
    \ : 2*len(grades)+len(letters)])\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T)\
    \ {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected:\
    \ []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"\
    D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"}\
    \ },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjio5shuk_test.go:32:19: invalid operation: operator + not defined on letters[0:len(grades)]
    (value of type []string)

    /tmp/tmpjio5shuk_test.go:32:67: cannot use letters[len(grades):2 * len(grades)
    + len(letters)] (value of type []string) as type string in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075618
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    g := make([]string, 0)\n    \n    for _, grade :=\
    \ range grades {\n        letter := \"D-\"\n        \n        if grade > 3.0 {\n\
    \            letter = \"B+\"\n        }\n        if grade > 3.3 {\n          \
    \  letter = \"B\"\n        }\n        if grade > 3.7 {\n            letter = \"\
    B\"\n        }\n        if grade > 3.0 {\n            letter = \"A+\"\n      \
    \  }\n        if grade > 3.0 {\n            letter = \"A\"\n        }\n      \
    \  if grade > 3.0 {\n            letter = \"A\"\n        }\n        if grade >\
    \ 2.0 {\n            letter = \"C+\"\n        }\n        if grade > 2.3 {\n  \
    \          letter = \"C\"\n        }\n        if grade > 2.7 {\n            letter\
    \ = \"C\"\n        }\n        if grade > 2.0 {\n            letter = \"B+\"\n\
    \        }\n        if grade > 2.0 {\n            letter = \"B\"\n        }\n\
    \        if grade > 2.0 {\n            letter = \"B\"\n        }\n        if grade\
    \ > 1.3 {\n            letter = \"C\"\n        }\n        if grade > 1.7 {\n \
    \           letter = \"C\"\n        }\n        if grade > 1.0 {\n            letter\
    \ = \"D+\"\n        }\n        if grade > 0.7 {\n            letter = \"D\"\n\
    \        }\n        if grade > 0.0 {\n            letter = \"D\"\n        }\n\
    \        if grade < 0.0 {\n            letter = \"E\"\n        }\n        \n \
    \       g = append(g, letter)\n    }\n    \n    return g\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpvm4nkxi6_test.go:115: expected '[A+ B C- C A-]', got '[D\
    \ D D D D]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n  \
    \      tmpvm4nkxi6_test.go:115: expected '[D+]', got '[D]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2\
    \ (0.00s)\n        tmpvm4nkxi6_test.go:115: expected '[D-]', got '[D]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmpvm4nkxi6_test.go:115:\
    \ expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpvm4nkxi6_test.go:115: expected '[D D- C- B B+]', got '[D\
    \ D D D D]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n  \
    \      tmpvm4nkxi6_test.go:115: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075618
- exit_code: 2
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    result := make([]string, len(grades))\n    i := 0\n\
    \    for j, g := range grades {\n        if i > 0 {\n            if g <= 4.0 {\n\
    \                result[i] = fmt.Sprintf(\"A+\", g, i+1)\n            } else if\
    \ g > 4.0 && g < 5.0 {\n                result[i] = fmt.Sprintf(\"A-\", g, i+1)\n\
    \            } else if g >= 5.0 {\n                result[i] = fmt.Sprintf(\"\
    B+\", g, i+1)\n            } else if g > 5.0 && g < 6.0 {\n                result[i]\
    \ = fmt.Sprintf(\"B-\", g, i+1)\n            } else if g >= 6.0 {\n          \
    \      result[i] = fmt.Sprintf(\"C+\", g, i+1)\n            } else if g > 6.0\
    \ && g < 7.0 {\n                result[i] = fmt.Sprintf(\"C\", g, i+1)\n     \
    \       } else if g >= 7.0 {\n                result[i] = fmt.Sprintf(\"D+\",\
    \ g, i+1)\n            } else if g > 7.0 && g < 8.0 {\n                result[i]\
    \ = fmt.Sprintf(\"D\", g, i+1)\n            } else if g >= 8.0 {\n           \
    \     result[i] = fmt.Sprintf(\"E\", g, i+1)\n            } else if g > 8.0 {\n\
    \                result[i] = fmt.Sprintf(\"F\", g, i+1)\n            }\n     \
    \       i++\n        }\n    }\n    return result\n}\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9snn0gum_test.go:33:9: j declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075618
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    output := make([]string, len(grades))\n    index\
    \ := 0\n    \n    for _, grade := range grades {\n        switch {\n        case\
    \ grade > 3.7:\n            output[index] = \"A+\"\n            index += 1\n \
    \       case grade > 3.3:\n            output[index] = \"A\"\n            index\
    \ += 1\n        case grade > 3:\n            output[index] = \"A-\"\n        \
    \    index += 1\n        case grade > 2.7:\n            output[index] = \"B+\"\
    \n            index += 1\n        case grade > 2.3:\n            output[index]\
    \ = \"B\"\n            index += 1\n        case grade > 2:\n            output[index]\
    \ = \"B-\"\n            index += 1\n        case grade > 1:\n            output[index]\
    \ = \"C+\"\n            index += 1\n        case grade > 1:\n            output[index]\
    \ = \"C\"\n            index += 1\n        case grade > 0.7:\n            output[index]\
    \ = \"C\"\n            index += 1\n        case grade > 0:\n            output[index]\
    \ = \"D+\"\n            index += 1\n        case grade > 0.7:\n            output[index]\
    \ = \"D\"\n            index += 1\n        case grade > 0:\n            output[index]\
    \ = \"D-\"\n            index += 1\n        case grade < 1:\n            output[index]\
    \ = \"E\"\n            index += 1\n        default:\n            break\n     \
    \   }\n    }\n    return output\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T)\
    \ {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected:\
    \ []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"\
    D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"}\
    \ },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpefmmgzav_test.go:100: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C+ C+ A]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n\
    \        tmpefmmgzav_test.go:100: expected '[D+]', got '[C+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2\
    \ (0.00s)\n        tmpefmmgzav_test.go:100: expected '[D-]', got '[D+]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmpefmmgzav_test.go:100:\
    \ expected '[D D- C- B B+]', got '[C D+ C+ B+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5\
    \ (0.00s)\n        tmpefmmgzav_test.go:100: expected '[E D-]', got '[E D+]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075618
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var letter_grades []string\n    for i := 0; i < len(grades);\
    \ i++ {\n        if grades[i] >= 3.3 {\n            letter_grades = append(letter_grades,\
    \ \"B+\")\n        } else if grades[i] >= 3.0 {\n            letter_grades = append(letter_grades,\
    \ \"B-\")\n        } else if grades[i] >= 2.7 {\n            letter_grades = append(letter_grades,\
    \ \"C+\")\n        } else if grades[i] >= 2.3 {\n            letter_grades = append(letter_grades,\
    \ \"C-\")\n        } else if grades[i] >= 1.7 {\n            letter_grades = append(letter_grades,\
    \ \"C\")\n        } else if grades[i] >= 1.3 {\n            letter_grades = append(letter_grades,\
    \ \"C-\")\n        } else if grades[i] >= 0.7 {\n            letter_grades = append(letter_grades,\
    \ \"D+\")\n        } else if grades[i] >= 0.0 {\n            letter_grades = append(letter_grades,\
    \ \"D-\")\n        } else if grades[i] >= 0.0 {\n            letter_grades = append(letter_grades,\
    \ \"E\")\n        }\n    }\n    return letter_grades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpmk0kl8h5_test.go:74: expected '[A+ B C- C A-]', got '[B+\
    \ B- C C B+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmpmk0kl8h5_test.go:74: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpmk0kl8h5_test.go:74: expected '[D D- C- B B+]', got '[D+\
    \ D- C- C+ B+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmpmk0kl8h5_test.go:74: expected '[E D-]', got '[D- D+]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075619
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    // Your code goes here:\n\n    return []string{\"\
    E\"}\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmptcqiq31x_test.go:54: expected '[A+ B C- C A-]', got '[E]'\n\
    \    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n        tmptcqiq31x_test.go:54:\
    \ expected '[D+]', got '[E]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2\
    \ (0.00s)\n        tmptcqiq31x_test.go:54: expected '[D-]', got '[E]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmptcqiq31x_test.go:54:\
    \ expected '[D D- C- B B+]', got '[E]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5\
    \ (0.00s)\n        tmptcqiq31x_test.go:54: expected '[E D-]', got '[E]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075619
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    grades = grades[0:len(grades)-1]\n    n := len(grades)\n\
    \    result := make([]string, n)\n    min := grades[0]\n    for i := 0; i < n;\
    \ i++ {\n        if grades[i] < min {\n            min = grades[i]\n        }\n\
    \    }\n    for i := 0; i < n; i++ {\n        if grades[i] > min {\n         \
    \   result[i] = fmt.Sprintf(\"%s+\", result[i])\n        } else {\n          \
    \  result[i] = fmt.Sprintf(\"%s\", result[i])\n        }\n    }\n    return result\n\
    }\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\npanic: runtime error: index\
    \ out of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out\
    \ of range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513720,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513720, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.numerical_letter_grade({0xc0000f5dd8, 0x0?,\
    \ 0x0?})\n\t/tmp/tmppvd4xdvg_test.go:34 +0x1d9\ncommand-line-arguments_test.TestNumerical_Letter_Grade(0x0?)\n\
    \t/tmp/tmppvd4xdvg_test.go:58 +0x117\ntesting.tRunner(0xc0001a0340, 0x529060)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075619
- exit_code: 2
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    gradesSorted := sort.Float64s(grades)\n    letterGrade\
    \ := make([]string, len(grades))\n    for idx, gp := range gradesSorted {\n  \
    \      if gp == 0 {\n            letterGrade[idx] = \"\"\n            continue\n\
    \        }\n        letter := \"-\"\n        if gp == 1.0 {\n            letter\
    \ = \"A+\"\n        } else if gp == 1.1 {\n            letter = \"A\"\n      \
    \  } else if gp == 1.2 {\n            letter = \"A+\"\n        } else if gp ==\
    \ 1.3 {\n            letter = \"A-\"\n        } else if gp == 1.4 {\n        \
    \    letter = \"B+\"\n        } else if gp == 1.5 {\n            letter = \"B\"\
    \n        } else if gp == 1.6 {\n            letter = \"B-\"\n        } else if\
    \ gp == 1.7 {\n            letter = \"C+\"\n        } else if gp == 1.8 {\n  \
    \          letter = \"C\"\n        } else if gp == 1.9 {\n            letter =\
    \ \"C-\"\n        } else if gp == 2.0 {\n            letter = \"D+\"\n       \
    \ } else if gp == 2.1 {\n            letter = \"D\"\n        } else if gp == 2.2\
    \ {\n            letter = \"D+\"\n        } else if gp == 2.3 {\n            letter\
    \ = \"D-\"\n        } else if gp == 2.4 {\n            letter = \"E\"\n      \
    \  }\n        letterGrade[idx] = letter\n    }\n    return letterGrade\n}\n\n\
    func TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp1apr24e_test.go:31:21: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075619
- exit_code: 2
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var letter_grade []string\n    switch {\n    case\
    \ len(grades) == 0: return letter_grade\n    case len(grades) == 1:\n        letter_grade\
    \ = append(letter_grade, strings.ToUpper(gradeToLetter(\"B+\")))\n    case len(grades)\
    \ == 2:\n        letter_grade = append(letter_grade, strings.ToUpper(gradeToLetter(\"\
    B\")))\n    case len(grades) == 3:\n        letter_grade = append(letter_grade,\
    \ strings.ToUpper(gradeToLetter(\"B-\")))\n    case len(grades) == 4:\n      \
    \  letter_grade = append(letter_grade, strings.ToUpper(gradeToLetter(\"C+\")))\n\
    \    case len(grades) == 5:\n        letter_grade = append(letter_grade, strings.ToUpper(gradeToLetter(\"\
    C\")))\n    case len(grades) == 6:\n        letter_grade = append(letter_grade,\
    \ strings.ToUpper(gradeToLetter(\"C-\")))\n    case len(grades) == 7:\n      \
    \  letter_grade = append(letter_grade, strings.ToUpper(gradeToLetter(\"D+\")))\n\
    \    case len(grades) == 8:\n        letter_grade = append(letter_grade, strings.ToUpper(gradeToLetter(\"\
    D\")))\n    case len(grades) == 9:\n        letter_grade = append(letter_grade,\
    \ strings.ToUpper(gradeToLetter(\"D-\")))\n    case len(grades) == 10:\n     \
    \   letter_grade = append(letter_grade, strings.ToUpper(gradeToLetter(\"E\")))\n\
    \    default: return letter_grade\n    }\n    return letter_grade\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp52a69nzl_test.go:35:45: undefined: strings

    /tmp/tmp52a69nzl_test.go:35:61: undefined: gradeToLetter

    /tmp/tmp52a69nzl_test.go:37:45: undefined: strings

    /tmp/tmp52a69nzl_test.go:37:61: undefined: gradeToLetter

    /tmp/tmp52a69nzl_test.go:39:45: undefined: strings

    /tmp/tmp52a69nzl_test.go:39:61: undefined: gradeToLetter

    /tmp/tmp52a69nzl_test.go:41:45: undefined: strings

    /tmp/tmp52a69nzl_test.go:41:61: undefined: gradeToLetter

    /tmp/tmp52a69nzl_test.go:43:45: undefined: strings

    /tmp/tmp52a69nzl_test.go:43:61: undefined: gradeToLetter

    /tmp/tmp52a69nzl_test.go:43:61: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075619
- exit_code: 2
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    sorted_grades := make([]float64, 0, len(grades))\n\
    \    sorted_grades = append(sorted_grades, grades...)\n    sorted_grades = append(sorted_grades,\
    \ 0.0)\n\n    // Sort the grades to increase the grade accuracy\n    sort.Float64s(sorted_grades)\n\
    \    \n    result := make([]string, len(sorted_grades))\n    \n    // The algorithm\
    \ begins with 0\n    result[0] = fmt.Sprintf(\"A+\", sorted_grades[0])\n\n   \
    \ // For each subsequent grade\n    for i := 1; i < len(sorted_grades); i++ {\n\
    \        // If the grade is less than or equal to previous grade\n        if sorted_grades[i]\
    \ <= sorted_grades[i-1] {\n            // Add grade to the result string\n   \
    \         result[i] = fmt.Sprintf(\"%+.0f \", sorted_grades[i])\n\n          \
    \  // If grade is greater than previous grade then subtract previous grade from\
    \ current grade\n        } else {\n            // If the grade is greater than\
    \ previous grade then subtract previous grade from current grade\n           \
    \ result[i] = fmt.Sprintf(\"%+.0f \", sorted_grades[i] - sorted_grades[i-1])\n\
    \        }\n    }\n    return result\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T)\
    \ {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected:\
    \ []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"\
    D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"}\
    \ },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqpia6i87_test.go:36:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075619
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    // Your code here\n\n    return []string{}\n}\n\n\
    func TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpn387h1us_test.go:54: expected '[A+ B C- C A-]', got '[]'\n\
    \    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n        tmpn387h1us_test.go:54:\
    \ expected '[D+]', got '[]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2\
    \ (0.00s)\n        tmpn387h1us_test.go:54: expected '[D-]', got '[]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmpn387h1us_test.go:54:\
    \ expected '[E]', got '[]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpn387h1us_test.go:54: expected '[D D- C- B B+]', got '[]'\n\
    \    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmpn387h1us_test.go:54:\
    \ expected '[E D-]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075619
- exit_code: 2
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    sort.Float64s(grades)\n    var letter []string\n\
    \    for i, gp := range grades {\n        if gp == 0.0 {\n            continue\n\
    \        }\n        if gp == 1.0 {\n            letter = append(letter, \"E\"\
    )\n            break\n        }\n        i, gp := grade_index(gp)\n        letter\
    \ = append(letter, alphabet_grade(gp))\n    }\n    return letter\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxa1fynzt_test.go:31:5: undefined: sort

    /tmp/tmpxa1fynzt_test.go:33:9: i declared but not used

    /tmp/tmpxa1fynzt_test.go:41:18: undefined: grade_index

    /tmp/tmpxa1fynzt_test.go:42:33: undefined: alphabet_grade

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075619
- exit_code: 2
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    alphabet := []string{\"A\", \"A-\", \"B+\", \"B\"\
    , \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\"}\n    gradeLength\
    \ := len(alphabet)\n    result := make([]string, gradeLength)\n    for _, grade\
    \ := range grades {\n        // find position of grade in alphabet\n        pos\
    \ := strings.Index(alphabet[grade >= 3.0], \":\")\n        if pos == -1 {\n  \
    \          // not a letter grade\n            continue\n        }\n        //\
    \ subtract gradeLength from pos to get position in result string\n        result[pos-gradeLength]\
    \ = alphabet[grade >= 3.0]\n    }\n    return result\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpt22mnjia_test.go:36:16: undefined: strings

    /tmp/tmpt22mnjia_test.go:36:39: cannot convert grade >= 3.0 (untyped bool value)
    to int

    /tmp/tmpt22mnjia_test.go:42:44: cannot convert grade >= 3.0 (untyped bool value)
    to int

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075619
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var letter_grades []string\n    for _, grade := range\
    \ grades {\n        switch {\n        case grade < 1.0:\n            letter_grades\
    \ = append(letter_grades, \"E\")\n        case grade < 2.0:\n            letter_grades\
    \ = append(letter_grades, \"D-\", \"B-\", \"B\", \"A-\", \"A+\", \"C\", \"C+\"\
    , \"B-\", \"B\", \"A-\", \"A+\", \"C\", \"C+\", \"B-\", \"B\", \"A-\", \"A+\"\
    , \"C\", \"C+\", \"B-\", \"B\", \"A-\", \"A+\", \"C\", \"C+\")\n        case grade\
    \ < 3.0:\n            letter_grades = append(letter_grades, \"C-\", \"B-\", \"\
    B\", \"A-\", \"A+\", \"C\", \"C+\", \"B-\", \"B\", \"A-\", \"A+\", \"C\", \"C+\"\
    , \"B-\", \"B\", \"A-\", \"A+\", \"C\", \"C+\", \"B-\", \"B\", \"A-\", \"A+\"\
    , \"C\", \"C+\", \"B-\", \"B\", \"A-\", \"A+\", \"C\", \"C+\")\n        case grade\
    \ < 4.0:\n            letter_grades = append(letter_grades, \"B-\", \"B\", \"\
    A-\", \"A+\", \"C\", \"C+\", \"B-\", \"B\", \"A-\", \"A+\", \"C\", \"C+\", \"\
    B-\", \"B\", \"A-\", \"A+\", \"C\", \"C+\", \"B-\", \"B\", \"A-\", \"A+\", \"\
    C\", \"C+\", \"B-\", \"B\", \"A-\", \"A+\", \"C\", \"C+\")\n        case grade\
    \ < 5.0:\n            letter_grades = append(letter_grades, \"B-\", \"B\", \"\
    A-\", \"A+\", \"C\", \"C+\", \"B-\", \"B\", \"A-\", \"A+\", \"C\", \"C+\", \"\
    B-\", \"B\", \"A-\", \"A+\", \"C\", \"C+\", \"B-\", \"B\", \"A-\", \"A+\", \"\
    C\", \"C+\", \"B-\", \"B\", \"A-\", \"A+\", \"C\", \"C+\", \"B-\", \"B\", \"A-\"\
    , \"A+\", \"C\", \"C+\")\n        case grade < 6.0:\n            letter_grades\
    \ = append(letter_grades, \"B-\", \"B\", \"A-\", \"A+\", \"C\", \"C+\", \"B-\"\
    , \"B\", \"A-\", \"A+\", \"C\", \"C+\", \"B-\", \"B\", \"A-\", \"A+\", \"C\",\
    \ \"C+\", \"B-\", \"B\", \"A-\", \"A+\", \"C\", \"C+\", \"B-\", \"B\", \"A-\"\
    , \"A+\", \"C\", \"C+\", \"B-\", \"B\", \"A-\", \"A+\", \"C\", \"C+\", \"B-\"\
    , \"B\", \"A-\", \"A+\", \"C\", \"C+\")\n        case grade < 7.0:\n         \
    \   letter_grades = append(letter_grades, \"B-\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpevl9gmnn_test.go:47:51: string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075618
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    if len(grades) != 7 {\n        fmt.Println(\"The\
    \ function should return 7 grades but there are \", len(grades))\n    }\n    var\
    \ letters []string\n    switch {\n    case grades[0] < 4.0:\n        letters =\
    \ []string{\"A+\"}\n    case grades[0] > 4.0 && grades[0] < 3.7:\n        letters\
    \ = []string{\"A\"}\n    case grades[0] > 3.7 && grades[0] < 3.3:\n        letters\
    \ = []string{\"A-\"}\n    case grades[0] > 3.3 && grades[0] < 3.0:\n        letters\
    \ = []string{\"B+\"}\n    case grades[0] > 3.0 && grades[0] < 2.7:\n        letters\
    \ = []string{\"B\"}\n    case grades[0] > 2.7 && grades[0] < 2.3:\n        letters\
    \ = []string{\"B-\"}\n    case grades[0] > 2.3 && grades[0] < 2.0:\n        letters\
    \ = []string{\"C+\"}\n    case grades[0] > 2.0 && grades[0] < 1.7:\n        letters\
    \ = []string{\"C\"}\n    case grades[0] > 1.7 && grades[0] < 1.3:\n        letters\
    \ = []string{\"C-\"}\n    case grades[0] > 1.3 && grades[0] < 1.0:\n        letters\
    \ = []string{\"D+\"}\n    case grades[0] > 1.0 && grades[0] < 0.7:\n        letters\
    \ = []string{\"D\"}\n    case grades[0] > 0.7 && grades[0] < 0.0:\n        letters\
    \ = []string{\"D-\"}\n    default:\n        letters = []string{\"E\"}\n    }\n\
    \    return letters\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate\
    \ := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0,\
    \ 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n\
    \     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n   \
    \  { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     {\
    \ actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual:\
    \ candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}),\
    \ expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "The function should return 7 grades but there are  5\nThe function should\
    \ return 7 grades but there are  1\nThe function should return 7 grades but there\
    \ are  1\nThe function should return 7 grades but there are  1\nThe function should\
    \ return 7 grades but there are  5\nThe function should return 7 grades but there\
    \ are  2\n--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmp1mnncp8p_test.go:84: expected '[A+ B C- C A-]', got '[E]'\n\
    \    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n        tmp1mnncp8p_test.go:84:\
    \ expected '[D+]', got '[A+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2\
    \ (0.00s)\n        tmp1mnncp8p_test.go:84: expected '[D-]', got '[A+]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmp1mnncp8p_test.go:84:\
    \ expected '[E]', got '[A+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmp1mnncp8p_test.go:84: expected '[D D- C- B B+]', got '[A+]'\n\
    \    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmp1mnncp8p_test.go:84:\
    \ expected '[E D-]', got '[A+]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660075619
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    \n    var grades_as_string = \"\"\n    \n    if grades\
    \ == nil {\n        return nil\n    }\n    \n    for index, grade := range grades\
    \ {\n        // If index == 0, then this is the first iteration of the loop\n\
    \        if index == 0 {\n            grades_as_string += fmt.Sprintf(\"%+f\"\
    , grade)\n            continue\n        }\n        // If index == len(grades),\
    \ then this is the last iteration of the loop\n        if index == len(grades)-1\
    \ {\n            grades_as_string += fmt.Sprintf(\"%+f\", grade)\n           \
    \ continue\n        }\n        \n        // If index is not 0, then this is the\
    \ second iteration of the loop\n        \n        // Find the two numbers before\
    \ the given grade (i.e. the number \n        // before 3.5 & number before 3.7)\n\
    \        \n        index_before_first_number_to_add := index - 1\n        index_before_second_number_to_add\
    \ := index - 2\n        \n        // Find the two numbers after the given grade\
    \ (i.e. the number \n        // before 4.0 & number after 2.0)\n        \n   \
    \     index_after_first_number_to_add := index + 1\n        index_after_second_number_to_add\
    \ := index + 2\n        \n        // Grade is 3.0 > 3.7 => A\n        // Grade\
    \ is 3.0 > 3.3 => A-\n        // Grade is 3.0 < 3.7 => B+\n        // Grade is\
    \ 3.0 < 3.3 => B\n        // Grade is 3.0 > 3.0 => B- \n        // Grade is 3.0\
    \ < 2.0 => C+\n        // Grade is 3.0 < 3.0 => C\n        // Grade is 3.0 < 1.7\
    \ => C-\n        // Grade is 3.0 > 1.0 => D+ \n        // Grade is 3.0 > 0.7 =>\
    \ D \n        // Grade is 3.0 < 0.0 => D-\n        // Grade is 3.0 => E\n    \
    \    // Grade is 3.0 > 0.3 => E\n        \n        // If the grade is >= 3.0,\
    \ then we have to add an \"A\" to the grades_as_string\n        if grade >= 3.0\
    \ {\n            grades_as_string += fmt.Sprintf(\"%+f\", grade)\n           \
    \ grades_as_string += fmt.Sprintf(\"%+f\", 1.0)\n            grades_as_string\
    \ += fmt.Sprintf(\"%+f\", 1.0)\n            \n        } else {\n            \n\
    \            // If the grade is < 3.0 and the index is before the first number\
    \ \n            // that is to add, then add A+ to the grades_as_string\n     \
    \       if index_before_first_number_to_add >= 0 {\n                grades_as_string\
    \ += fmt.Sprintf(\"%+f\", 3.0)\n                grades_as_string \nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1oj5jbh3_test.go:91:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075619
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var ret []string\n    switch len(grades) {\n    case\
    \ 0: return nil\n    case 1: return []string{\"\"}\n    case 2: \n        // We\
    \ want to return a letter and a +\n        if grades[0] >= 3.7 && grades[1] >=\
    \ 3.0 {\n            ret = append(ret, fmt.Sprintf(\"B+\"))\n        } else if\
    \ grades[0] >= 3.0 && grades[1] >= 2.7 {\n            ret = append(ret, fmt.Sprintf(\"\
    B\"))\n        } else if grades[0] >= 2.7 && grades[1] >= 2.3 {\n            ret\
    \ = append(ret, fmt.Sprintf(\"B-\"))\n        } else if grades[0] >= 2.3 && grades[1]\
    \ >= 1.7 { \n            ret = append(ret, fmt.Sprintf(\"C+\"))\n        } else\
    \ if grades[0] >= 1.7 && grades[1] >= 1.3 { \n            ret = append(ret, fmt.Sprintf(\"\
    C\"))\n        } else if grades[0] >= 1.3 && grades[1] >= 1.0 {\n            ret\
    \ = append(ret, fmt.Sprintf(\"C-\"))\n        } else if grades[0] >= 1.0 && grades[1]\
    \ >= 0.7 { \n            ret = append(ret, fmt.Sprintf(\"D+\"))\n        } else\
    \ if grades[0] >= 0.7 && grades[1] >= 0.0 { \n            ret = append(ret, fmt.Sprintf(\"\
    D\"))\n        } else {\n            ret = append(ret, fmt.Sprintf(\"D-\"))\n\
    \        }\n    case 3: \n        // We want to return a letter and a +\n    \
    \    if grades[0] >= 3.7 && grades[1] >= 3.0 { \n            ret = append(ret,\
    \ fmt.Sprintf(\"B+\"))\n        } else if grades[0] >= 3.0 && grades[1] >= 2.7\
    \ { \n            ret = append(ret, fmt.Sprintf(\"B\"))\n        } else if grades[0]\
    \ >= 2.7 && grades[1] >= 2.3 { \n            ret = append(ret, fmt.Sprintf(\"\
    B-\"))\n        } else if grades[0] >= 2.3 && grades[1] >= 1.7 { \n          \
    \  ret = append(ret, fmt.Sprintf(\"C+\"))\n        } else if grades[0] >= 1.7\
    \ && grades[1] >= 1.3 { \n            ret = append(ret, fmt.Sprintf(\"C\"))\n\
    \        } else if grades[0] >= 1.3 && grades[1] >= 1.0 { \n            ret =\
    \ append(ret, fmt.Sprintf(\"C-\"))\n        } else if grades[0] >= 1.0 && grades[1]\
    \ >= 0.7 { \n            ret = append(ret, fmt.Sprintf(\"D+\"))\n        } else\
    \ if grades[0] >= 0.7 && grades[1] >= 0.0 { \n            ret = append(ret, fmt.Sprintf(\"\
    D\"))\n        } else {\n            ret = append(ret, fmt.Sprintf(\"D-\"))\n\
    \        }\n        // Here we are not using the third grade\n    case 4: \n \
    \       // We want to return a letter and a +\n        if grades[0] >= \nfunc\
    \ TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwf801gtu_test.go:81:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075619
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    grades2 := make([]float64, 0, len(grades))\n    for\
    \ _, grade := range grades {\n        if grade <= 3.0 {\n            grades2 =\
    \ append(grades2, grade)\n        } else {\n            grades2 = append(grades2,\
    \ grade - 2.0)\n        }\n    }\n    grades3 := make([]float64, 0, len(grades2))\n\
    \    for _, grade := range grades2 {\n        if grade <= 3.0 {\n            grades3\
    \ = append(grades3, grade + 1.0)\n        } else {\n            grades3 = append(grades3,\
    \ grade - 2.0)\n        }\n    }\n    grades4 := make([]float64, 0, len(grades3))\n\
    \    for _, grade := range grades3 {\n        if grade <= 3.0 {\n            grades4\
    \ = append(grades4, grade + 1.0)\n        } else {\n            grades4 = append(grades4,\
    \ grade - 2.0)\n        }\n    }\n    grades5 := make([]float64, 0, len(grades4))\n\
    \    for _, grade := range grades4 {\n        if grade <= 3.0 {\n            grades5\
    \ = append(grades5, grade + 1.0)\n        } else {\n            grades5 = append(grades5,\
    \ grade - 2.0)\n        }\n    }\n    grades6 := make([]float64, 0, len(grades5))\n\
    \    for _, grade := range grades5 {\n        if grade <= 3.0 {\n            grades6\
    \ = append(grades6, grade + 1.0)\n        } else {\n            grades6 = append(grades6,\
    \ grade - 2.0)\n        }\n    }\n    grades7 := make([]float64, 0, len(grades6))\n\
    \    for _, grade := range grades6 {\n        if grade <= 3.0 {\n            grades7\
    \ = append(grades7, grade + 1.0)\n        } else {\n            grades7 = append(grades7,\
    \ grade - 2.0)\n        }\n    }\n    grades8 := make([]float64, 0, len(grades7))\n\
    \    for _, grade := range grades7 {\n        if grade <= 3.0 {\n            grades8\
    \ = append(grades8, grade + 1.0)\n        } else {\n            grades8 = append(grades8,\
    \ grade - 2.0)\n        }\n    }\n    grades9 := make([]float64, 0, len(grades8))\n\
    \    for _, grade := range grades8 {\n        if grade <= 3.0 {\n            grades9\
    \ = append(grades9, grade + 1.0)\n        } else {\n            grades9 = append(grades9,\
    \ grade - 2.0)\n        }\n    }\n    grades10 \nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpy7t91end_test.go:96:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075619
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    // Implement here your function\n    return nil\n\
    }\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmprycgqdst_test.go:53: expected '[A+ B C- C A-]', got '[]'\n\
    \    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n        tmprycgqdst_test.go:53:\
    \ expected '[D+]', got '[]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2\
    \ (0.00s)\n        tmprycgqdst_test.go:53: expected '[D-]', got '[]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmprycgqdst_test.go:53:\
    \ expected '[E]', got '[]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmprycgqdst_test.go:53: expected '[D D- C- B B+]', got '[]'\n\
    \    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmprycgqdst_test.go:53:\
    \ expected '[E D-]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075620
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    score := []float64{}\n    for _, grade := range grades\
    \ {\n        if grade > 3.0 {\n            score = append(score, 4.0)\n      \
    \  } else if grade > 2.7 {\n            score = append(score, 3.7)\n        }\
    \ else if grade > 2.3 {\n            score = append(score, 3.3)\n        } else\
    \ if grade > 1.9 {\n            score = append(score, 3.0)\n        } else if\
    \ grade > 1.7 {\n            score = append(score, 2.7)\n        } else if grade\
    \ > 1.3{\n            score = append(score, 2.3)\n        } else if grade > 1.0{\n\
    \            score = append(score, 2.0)\n        } else if grade > 0.7{\n    \
    \        score = append(score, 2.0)\n        } else if grade > 0.0{\n        \
    \    score = append(score, 2.0)\n        } else if grade > 0.0{\n            score\
    \ = append(score, 2.0)\n        }\n    }\n    result := []string{}\n    for _,\
    \ grade := range score {\n        if grade == 4.0 {\n            result = append(result,\
    \ \"A+\")\n        } else if grade == 3.7 {\n            result = append(result,\
    \ \"A\")\n        } else if grade == 3.3 {\n            result = append(result,\
    \ \"A-\")\n        } else if grade == 3.0 {\n            result = append(result,\
    \ \"B+\")\n        } else if grade == 2.7 {\n            result = append(result,\
    \ \"B\")\n        } else if grade == 2.3 {\n            result = append(result,\
    \ \"B-\")\n        } else if grade == 2.0 {\n            result = append(result,\
    \ \"C+\")\n        } else if grade == 1.7 {\n            result = append(result,\
    \ \"C\")\n        } else if grade == 1.3 {\n            result = append(result,\
    \ \"C-\")\n        } else if grade == 1.0 {\n            result = append(result,\
    \ \"D+\")\n        } else if grade == 0.7 {\n            result = append(result,\
    \ \"D\")\n        } else if grade == 0.0 {\n            result = append(result,\
    \ \"D-\")\n        }\n    }\n    return result\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmp_4222wdg_test.go:104: expected '[A+ B C- C A-]', got '[A+\
    \ A B- B+ A+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n\
    \        tmp_4222wdg_test.go:104: expected '[D+]', got '[C+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2\
    \ (0.00s)\n        tmp_4222wdg_test.go:104: expected '[D-]', got '[C+]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmp_4222wdg_test.go:104:\
    \ expected '[E]', got '[]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmp_4222wdg_test.go:104: expected '[D D- C- B B+]', got '[C+\
    \ C+ B- A A+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmp_4222wdg_test.go:104: expected '[E D-]', got '[C+]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075620
- exit_code: 2
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    result := []string{}\n    for _, grade := range grades\
    \ {\n        if grade > 0 && grade < 6 {\n            result := append(result,\
    \ \"A+\")\n        } else if (grade > 3 && grade < 6) {\n            result :=\
    \ append(result, \"A-\")\n        } else if (grade > 0 && grade < 3) {\n     \
    \       result := append(result, \"B+\")\n        } else if (grade > 2 && grade\
    \ < 3) {\n            result := append(result, \"B\")\n        } else if (grade\
    \ > 0 && grade < 2) {\n            result := append(result, \"B-\")\n        }\
    \ else if (grade > 0 && grade == 2) {\n            result := append(result, \"\
    C+\")\n        } else if (grade > 0 && grade < 2) {\n            result := append(result,\
    \ \"C\")\n        } else if (grade > 0 && grade == 2) {\n            result :=\
    \ append(result, \"C-\")\n        } else if (grade > 0 && grade == 0) {\n    \
    \        result := append(result, \"D+\")\n        } else if (grade > 0 && grade\
    \ < 1) {\n            result := append(result, \"D\")\n        } else if (grade\
    \ > 0 && grade == 1) {\n            result := append(result, \"D-\")\n       \
    \ } else if (grade == 0 && grade == 0) {\n            result := append(result,\
    \ \"E\")\n        }\n    }\n    return result\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplel74_0d_test.go:34:13: result declared but not used

    /tmp/tmplel74_0d_test.go:36:13: result declared but not used

    /tmp/tmplel74_0d_test.go:38:13: result declared but not used

    /tmp/tmplel74_0d_test.go:40:13: result declared but not used

    /tmp/tmplel74_0d_test.go:42:13: result declared but not used

    /tmp/tmplel74_0d_test.go:44:13: result declared but not used

    /tmp/tmplel74_0d_test.go:46:13: result declared but not used

    /tmp/tmplel74_0d_test.go:48:13: result declared but not used

    /tmp/tmplel74_0d_test.go:50:13: result declared but not used

    /tmp/tmplel74_0d_test.go:52:13: result declared but not used

    /tmp/tmplel74_0d_test.go:52:13: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075620
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    result := make([]string, len(grades))\n    for i,\
    \ grade := range grades {\n        if grade < 3.0 {\n            result[i] = \"\
    E\"\n        } else if grade > 3.7 {\n            result[i] = \"D-\"\n       \
    \ } else if grade > 3.3 {\n            result[i] = \"C+\"\n        } else if grade\
    \ > 2.7 {\n            result[i] = \"B\"\n        } else if grade > 2.3 {\n  \
    \          result[i] = \"B-\"\n        } else if grade > 2.0 {\n            result[i]\
    \ = \"A-\"\n        } else if grade > 1.7 {\n            result[i] = \"A\"\n \
    \       } else if grade > 1.3 {\n            result[i] = \"A+\"\n        } else\
    \ if grade > 1.0 {\n            result[i] = \"B+\"\n        } else if grade >\
    \ 0.7 {\n            result[i] = \"B\"\n        } else {\n            result[i]\
    \ = \"A\"\n        }\n    }\n    return result\n}\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpjw5zg6xp_test.go:77: expected '[A+ B C- C A-]', got '[D-\
    \ B E E C+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n \
    \       tmpjw5zg6xp_test.go:77: expected '[D+]', got '[E]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2\
    \ (0.00s)\n        tmpjw5zg6xp_test.go:77: expected '[D-]', got '[E]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmpjw5zg6xp_test.go:77:\
    \ expected '[D D- C- B B+]', got '[E E E E B]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5\
    \ (0.00s)\n        tmpjw5zg6xp_test.go:77: expected '[E D-]', got '[E E]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075620
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    // your code here\n    result := []string{}\n   \
    \ grade_sum := 0.0\n\n    // for each grade in the grades slice\n    for _, grade\
    \ := range grades {\n        // add the grade to the sum\n        grade_sum +=\
    \ grade\n\n        // if the sum is greater than 4.0, then we know that the student\
    \ has passed\n        // the exam\n        if grade_sum > 4.0 {\n            //\
    \ we append the letter \"A+\" to the result slice\n            result = append(result,\
    \ \"A+\")\n\n            // set the sum to 0.0 before we move on to the next student\n\
    \            grade_sum = 0.0\n        } else if grade_sum > 3.7 {\n          \
    \  result = append(result, \"A\")\n\n            // set the sum to 0.0 before\
    \ we move on to the next student\n            grade_sum = 0.0\n        } else\
    \ if grade_sum > 3.3 {\n            result = append(result, \"A-\")\n\n      \
    \      // set the sum to 0.0 before we move on to the next student\n         \
    \   grade_sum = 0.0\n        } else if grade_sum > 3.0 {\n            result =\
    \ append(result, \"B+\")\n\n            // set the sum to 0.0 before we move on\
    \ to the next student\n            grade_sum = 0.0\n        } else if grade_sum\
    \ > 2.7 {\n            result = append(result, \"B\")\n\n            // set the\
    \ sum to 0.0 before we move on to the next student\n            grade_sum = 0.0\n\
    \        } else if grade_sum > 2.3 {\n            result = append(result, \"B-\"\
    )\n\n            // set the sum to 0.0 before we move on to the next student\n\
    \            grade_sum = 0.0\n        } else if grade_sum > 2.0 {\n          \
    \  result = append(result, \"C+\")\n\n            // set the sum to 0.0 before\
    \ we move on to the next student\n            grade_sum = 0.0\n        } else\
    \ if grade_sum > 1.7 {\n            result = append(result, \"C\")\n\n       \
    \     // set the sum to 0.0 before we move on to the next student\n          \
    \  grade_sum = 0.0\n        } else if grade_sum > 1.3 {\n            result =\
    \ append(result, \"C-\")\n\n            // set the sum to 0.0 before we move on\
    \ to the next student\n            grade_sum = 0.0\n        } else if grade_sum\
    \ > 1.0 {\n            result = append(result, \"D+\")\n\n            // set the\
    \ sum to 0.0 before we move on to the next student\n            grade_sum = 0.0\n\
    \        } else if grade_sum > 0.7 {\n            result = append(result, \"D\"\
    )\n\n            // set the sum to 0.0 before we move on to the next student\n\
    \            grade_sum = 0.0\n        } else if grade_sum > 0.0 {\n          \
    \  result = append(result, \"D-\")\n\n            // set the sum to 0.0 before\
    \ we move on to the next student\n            grade_sum = 0.0\n        } else\
    \ {\n            result = append(result, \"E\")\n        }\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcq_fob38_test.go:107:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075619
- exit_code: 2
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var grade_list []string\n    for _, grade := range\
    \ grades {\n        if grade >= 3.7 && grade < 3.9 { // Grade between 3.3 and\
    \ 3.7\n            grade_list.append(\"A+\")\n        } else if grade >= 3.0 &&\
    \ grade < 3.7 { // Grade between 3.0 and 3.3\n            grade_list.append(\"\
    A-\")\n        } else if grade >= 2.7 && grade < 3.0 { // Grade between 2.7 and\
    \ 3.0\n            grade_list.append(\"B+\")\n        } else if grade >= 2.3 &&\
    \ grade < 2.7 { // Grade between 2.3 and 2.7\n            grade_list.append(\"\
    B\")\n        } else if grade >= 1.7 && grade < 2.0 { // Grade between 1.7 and\
    \ 2.0\n            grade_list.append(\"C+\")\n        } else if grade >= 1.3 &&\
    \ grade < 1.7 { // Grade between 1.3 and 1.7\n            grade_list.append(\"\
    C\")\n        } else if grade >= 1.0 && grade < 1.3 { // Grade between 1.0 and\
    \ 1.3\n            grade_list.append(\"D+\")\n        } else if grade >= 0.7 &&\
    \ grade < 1.0 { // Grade between 0.7 and 1.0\n            grade_list.append(\"\
    D\")\n        } else { // Grade between 0.0 and 0.7\n            grade_list.append(\"\
    E\")\n        }\n    }\n    return grade_list\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfkrsxec4_test.go:34:24: grade_list.append undefined (type []string has
    no field or method append)

    /tmp/tmpfkrsxec4_test.go:36:24: grade_list.append undefined (type []string has
    no field or method append)

    /tmp/tmpfkrsxec4_test.go:38:24: grade_list.append undefined (type []string has
    no field or method append)

    /tmp/tmpfkrsxec4_test.go:40:24: grade_list.append undefined (type []string has
    no field or method append)

    /tmp/tmpfkrsxec4_test.go:42:24: grade_list.append undefined (type []string has
    no field or method append)

    /tmp/tmpfkrsxec4_test.go:44:24: grade_list.append undefined (type []string has
    no field or method append)

    /tmp/tmpfkrsxec4_test.go:46:24: grade_list.append undefined (type []string has
    no field or method append)

    /tmp/tmpfkrsxec4_test.go:48:24: grade_list.append undefined (type []string has
    no field or method append)

    /tmp/tmpfkrsxec4_test.go:50:24: grade_list.append undefined (type []string has
    no field or method append)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075620
- exit_code: 2
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    \n    //  Write your code here\n    gpas := []float64{4.0,\
    \ 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0}\n    \n    grades_slice := make([]string,\
    \ len(grades))\n    for i := range grades {\n        grades_slice[i] = grades[i]\
    \ + '+'\n    }\n    \n    grades_slice := append(grades_slice, grades[len(grades)-1])\n\
    \    \n    for i := len(grades)-2; i >= 0; i-- {\n        \n        if grades[i]\
    \ == grades[i+1] {\n            if grades[i] > grades[i+1] {\n               \
    \ grades_slice = append(grades_slice, grades[i+1] + '-')\n            } else {\n\
    \                grades_slice = append(grades_slice, grades[i+1] + '+')\n    \
    \        }\n        }\n        \n    }\n    \n    return grades_slice\n}\n\nfunc\
    \ TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp57xxjp02_test.go:33:5: gpas declared but not used

    /tmp/tmp57xxjp02_test.go:37:27: cannot use grades[i] + ''+'' (value of type float64)
    as type string in assignment

    /tmp/tmp57xxjp02_test.go:40:18: no new variables on left side of :=

    /tmp/tmp57xxjp02_test.go:40:42: cannot use grades[len(grades) - 1] (variable of
    type float64) as type string in argument to append

    /tmp/tmp57xxjp02_test.go:46:53: cannot use grades[i + 1] + ''-'' (value of type
    float64) as type string in argument to append

    /tmp/tmp57xxjp02_test.go:48:53: cannot use grades[i + 1] + ''+'' (value of type
    float64) as type string in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075620
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    scores := make([]string, len(grades))\n    for index,\
    \ grade := range grades {\n        if grade > 3.0 { //\n            scores[index]\
    \ = \"D-\"\n        } else if grade > 2.0 { //\n            scores[index] = \"\
    C-\"\n        } else if grade > 1.7 { //\n            scores[index] = \"C\"\n\
    \        } else if grade > 1.3 { //\n            scores[index] = \"B-\"\n    \
    \    } else if grade > 1.2 { //\n            scores[index] = \"B\"\n        }\
    \ else if grade > 1.0 { //\n            scores[index] = \"A-\"\n        } else\
    \ { //\n            scores[index] = \"A\"\n        }\n    }\n    return scores\n\
    }\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpjrntpa0x_test.go:70: expected '[A+ B C- C A-]', got '[D-\
    \ C- B- C D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n\
    \        tmpjrntpa0x_test.go:70: expected '[D+]', got '[A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2\
    \ (0.00s)\n        tmpjrntpa0x_test.go:70: expected '[D-]', got '[A]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmpjrntpa0x_test.go:70:\
    \ expected '[E]', got '[A]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpjrntpa0x_test.go:70: expected '[D D- C- B B+]', got '[A\
    \ A B- C- D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmpjrntpa0x_test.go:70: expected '[E D-]', got '[A A]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075621
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    result := []string{}\n    var minGPA float64\n  \
    \  var maxGPA float64\n    var min float64\n    var max float64\n\n    for _,\
    \ grade := range grades {\n        if grade == 0 {\n            continue // No\
    \ need to calculate GPA for zero\n        }\n\n        // Calculate the GPA\n\
    \        gpa := grade * 3.14\n        \n        // Check if grade is above the\
    \ minimum value\n        if gpa > maxGPA {\n            maxGPA = gpa\n       \
    \ }\n\n        // Check if grade is below the minimum value\n        if gpa <\
    \ minGPA {\n            minGPA = gpa\n        }\n\n        // Check if gpa is\
    \ between min and max\n        if gpa > max {\n            max = gpa\n       \
    \ }\n\n        if gpa < min {\n            min = gpa\n        }\n    }\n\n   \
    \ // Calculate the letter grade with each letter in between the min and max\n\
    \    for range min <= max {\n        if min <= max {\n            if minGPA >\
    \ min {\n                result += append(result, \"A+\")\n            }\n\n \
    \           if maxGPA < max {\n                result += append(result, \"A-\"\
    )\n            }\n\n            if minGPA > min && maxGPA < max {\n          \
    \      result += append(result, \"B+\")\n            }\n\n            if maxGPA\
    \ < max && minGPA > min {\n                result += append(result, \"B\")\n \
    \           }\n\n            if minGPA > min && maxGPA < max {\n             \
    \   result += append(result, \"B-\")\n            }\n\n            if minGPA >\
    \ min && maxGPA < max {\n                result += append(result, \"C+\")\n  \
    \          }\n\n            if maxGPA < max && minGPA > min {\n              \
    \  result += append(result, \"C\")\n            }\n\n            if minGPA > min\
    \ && maxGPA < max {\n                result += append(result, \"C-\")\n      \
    \      }\n\n            if minGPA > min && maxGPA < max {\n                result\
    \ += append(result, \"D+\")\n            }\n\n            if maxGPA < max && minGPA\
    \ > min {\n                result += append(result, \"D\")\n            }\n\n\
    \            if minGPA > min && maxGPA < max {\n                result += append(result,\
    \ \"D-\")\n            }\n\n            if minGPA > min && maxGPA < max {\n  \
    \              result += append(result, \"E\")\n            }\n\n            if\
    \ maxGPA < max && minGPA > min {\n                result += append(result, \"\
    F\")\n            }\n        }\n\n        min = min + 0.1\n        max = max +\
    \ 0.1\n    }\n\n    return result\n\nfunc TestNumerical_Letter_Grade(t *testing.T)\
    \ {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected:\
    \ []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"\
    D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"}\
    \ },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp4shmx100_test.go:127:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075620
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    letterGrades := make([]string, len(grades))\n   \
    \ for i, grade := range grades {\n        if grade > 3.7 || grade < 0.0 {\n  \
    \          letterGrades[i] = \"D-\"\n            continue\n        }\n       \
    \ if grade < 3.0 {\n            letterGrades[i] = \"B+\"\n        } else if grade\
    \ < 3.3 {\n            letterGrades[i] = \"B\"\n        } else if grade < 3.7\
    \ {\n            letterGrades[i] = \"A-\"\n        } else if grade < 4.0 {\n \
    \           letterGrades[i] = \"A+\"\n        } else {\n            letterGrades[i]\
    \ = \"C+\"\n        }\n    }\n    return letterGrades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpm70gejsp_test.go:70: expected '[A+ B C- C A-]', got '[D-\
    \ B B+ B+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n\
    \        tmpm70gejsp_test.go:70: expected '[D+]', got '[B+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2\
    \ (0.00s)\n        tmpm70gejsp_test.go:70: expected '[D-]', got '[B+]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmpm70gejsp_test.go:70:\
    \ expected '[E]', got '[B+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpm70gejsp_test.go:70: expected '[D D- C- B B+]', got '[B+\
    \ B+ B+ B+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmpm70gejsp_test.go:70: expected '[E D-]', got '[B+ B+]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075621
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var grades_list []string\n    var sum float64\n \
    \   for i := 0; i < len(grades); i++ {\n        sum += grades[i]\n    }\n    for\
    \ i := 0; i < len(grades); i++ {\n        grades_list = append(grades_list, fmt.Sprintf(\"\
    %2.2f\", grades[i]/sum))\n    }\n    return grades_list\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpy8zjam0i_test.go:60: expected '[A+ B C- C A-]', got '[0.28\
    \ 0.21 0.12 0.14 0.25]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__1\
    \ (0.00s)\n        tmpy8zjam0i_test.go:60: expected '[D+]', got '[1.00]'\n   \
    \ --- FAIL: TestNumerical_Letter_Grade/test_num__2 (0.00s)\n        tmpy8zjam0i_test.go:60:\
    \ expected '[D-]', got '[1.00]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3\
    \ (0.00s)\n        tmpy8zjam0i_test.go:60: expected '[E]', got '[NaN]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmpy8zjam0i_test.go:60:\
    \ expected '[D D- C- B B+]', got '[0.11 0.03 0.17 0.31 0.37]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5\
    \ (0.00s)\n        tmpy8zjam0i_test.go:60: expected '[E D-]', got '[0.00 1.00]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075621
- exit_code: 2
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    n := len(grades)\n    i := n - 1\n    result := make([]string,\
    \ n)\n\n    for ; i >= 0; i-- {\n        result[i] = fmt.Sprintf(\"%d%+.2f\",\
    \ grades[i], grades[i])\n    }\n\n    result[0] =\"E\"\n    return result\n}\n\
    \nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test

    /tmp/tmpg1k1yyko_test.go:36:21: fmt.Sprintf format %d has arg grades[i] of wrong
    type float64

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075621
- exit_code: 2
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    result := []string{}\n    for _, grade := range grades\
    \ {\n        letterGrade := \"\"\n        for i := 0; i < len(grade); i++ {\n\
    \            if i%2 == 0 {\n                letterGrade += grade[i]\n        \
    \    } else {\n                if letterGrade != \"\" {\n                    letterGrade\
    \ += \"-\"\n                }\n            }\n        }\n        result = append(result,\
    \ letterGrade)\n    }\n    return result\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpldn36y14_test.go:34:29: invalid argument: grade (variable of type float64)
    for len

    /tmp/tmpldn36y14_test.go:36:37: invalid operation: cannot index grade (variable
    of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075621
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    grade_sum := 0.0\n    for _, grade := range grades\
    \ {\n        if grade == 0.0 {\n            continue\n        }\n        if grade\
    \ > 3.0 {\n            grade_sum += grade\n            continue\n        }\n \
    \       grade_sum += grade - 3.0\n    }\n    letters := []string{}\n    for i\
    \ := 0; i < len(grades)/2; i++ {\n        grade_i := grades[i]\n        grade_sum\
    \ -= grades[i]\n        grade_sum += grades[i]\n        if grade_i < 0 {\n   \
    \         grade_sum -= grade_i\n            grade_sum -= grade_sum\n         \
    \   letters = append(letters, \"E\")\n        } else {\n            if grade_sum\
    \ > 1.0 {\n                letters = append(letters, fmt.Sprintf(\"%+.2f\", grade_sum))\n\
    \            } else {\n                letters = append(letters, fmt.Sprintf(\"\
    %+.2f\", grade_sum))\n            }\n            if grade_sum > 1.0 {\n      \
    \          letters = append(letters, fmt.Sprintf(\"%+.2f\", grade_sum))\n    \
    \        }\n        }\n    }\n    return letters\n}\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmp85w6xnog_test.go:82: expected '[A+ B C- C A-]', got '[+5.20\
    \ +5.20 +5.20 +5.20]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n\
    \        tmp85w6xnog_test.go:82: expected '[D+]', got '[]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2\
    \ (0.00s)\n        tmp85w6xnog_test.go:82: expected '[D-]', got '[]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmp85w6xnog_test.go:82:\
    \ expected '[E]', got '[]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmp85w6xnog_test.go:82: expected '[D D- C- B B+]', got '[-3.10\
    \ -3.10]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n    \
    \    tmp85w6xnog_test.go:82: expected '[E D-]', got '[-2.30]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075621
- exit_code: 2
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    // Start by declaring a string array to hold the\
    \ letter grade for each GPA\n    var letter_grades []string\n\n    // Initialize\
    \ the array of grades\n    for _, grade := range grades {\n        letter_grades\
    \ = append(letter_grades, \"\")\n    }\n\n    // Loop through each GPA and calculate\
    \ the letter grade\n    for _, grade := range grades {\n        letter_grades[grade-1]\
    \ = \"A+\"\n        if grade > 3.7 && grade < 3.3 {\n            letter_grades[grade-1]\
    \ = \"A\"\n        } else if grade > 3.3 && grade < 3.0 {\n            letter_grades[grade-1]\
    \ = \"A-\"\n        } else if grade > 3.0 && grade < 2.7 {\n            letter_grades[grade-1]\
    \ = \"B+\"\n        } else if grade > 2.7 && grade < 2.3 {\n            letter_grades[grade-1]\
    \ = \"B\"\n        } else if grade > 2.3 && grade < 2.0 {\n            letter_grades[grade-1]\
    \ = \"B-\"\n        } else if grade > 2.0 && grade < 1.7 {\n            letter_grades[grade-1]\
    \ = \"C+\"\n        } else if grade > 1.7 && grade < 1.3 {\n            letter_grades[grade-1]\
    \ = \"C\"\n        } else if grade > 1.3 && grade < 1.0 {\n            letter_grades[grade-1]\
    \ = \"C-\"\n        } else if grade > 1.0 {\n            letter_grades[grade-1]\
    \ = \"D+\"\n        } else if grade > 0.7 {\n            letter_grades[grade-1]\
    \ = \"D\"\n        } else {\n            letter_grades[grade-1] = \"D-\"\n   \
    \     }\n    }\n\n    return letter_grades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvqpn9763_test.go:41:23: invalid argument: index grade - 1 (value of type
    float64) must be integer

    /tmp/tmpvqpn9763_test.go:43:27: invalid argument: index grade - 1 (value of type
    float64) must be integer

    /tmp/tmpvqpn9763_test.go:45:27: invalid argument: index grade - 1 (value of type
    float64) must be integer

    /tmp/tmpvqpn9763_test.go:47:27: invalid argument: index grade - 1 (value of type
    float64) must be integer

    /tmp/tmpvqpn9763_test.go:49:27: invalid argument: index grade - 1 (value of type
    float64) must be integer

    /tmp/tmpvqpn9763_test.go:51:27: invalid argument: index grade - 1 (value of type
    float64) must be integer

    /tmp/tmpvqpn9763_test.go:53:27: invalid argument: index grade - 1 (value of type
    float64) must be integer

    /tmp/tmpvqpn9763_test.go:55:27: invalid argument: index grade - 1 (value of type
    float64) must be integer

    /tmp/tmpvqpn9763_test.go:57:27: invalid argument: index grade - 1 (value of type
    float64) must be integer

    /tmp/tmpvqpn9763_test.go:59:27: invalid argument: index grade - 1 (value of type
    float64) must be integer

    /tmp/tmpvqpn9763_test.go:59:27: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075621
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    \n    var letterGrades []string\n    \n    // Your\
    \ code goes here\n    \n    return letterGrades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpbmycdjz4_test.go:57: expected '[A+ B C- C A-]', got '[]'\n\
    \    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n        tmpbmycdjz4_test.go:57:\
    \ expected '[D+]', got '[]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2\
    \ (0.00s)\n        tmpbmycdjz4_test.go:57: expected '[D-]', got '[]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmpbmycdjz4_test.go:57:\
    \ expected '[E]', got '[]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpbmycdjz4_test.go:57: expected '[D D- C- B B+]', got '[]'\n\
    \    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmpbmycdjz4_test.go:57:\
    \ expected '[E D-]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075621
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var grades_letter []string\n    var count_letter\
    \ int\n    var temp_fg float64\n    var temp_letter string\n    for _, grade :=\
    \ range grades {\n        temp_fg = float64(grade)\n        if temp_fg >= 4.0\
    \ {\n            temp_letter = \"A+\"\n            count_letter += 1\n       \
    \ } else if temp_fg > 3.7 && temp_fg <= 3.3 {\n            temp_letter = \"A\"\
    \n            count_letter += 1\n        } else if temp_fg > 3.3 && temp_fg <=\
    \ 3.0 {\n            temp_letter = \"A-\"\n            count_letter += 1\n   \
    \     } else if temp_fg > 3.0 && temp_fg <= 2.7 {\n            temp_letter = \"\
    B+\"\n            count_letter += 1\n        } else if temp_fg > 2.7 && temp_fg\
    \ <= 2.3 {\n            temp_letter = \"B\"\n            count_letter += 1\n \
    \       } else if temp_fg > 2.3 && temp_fg <= 2.0 {\n            temp_letter =\
    \ \"B-\"\n            count_letter += 1\n        } else if temp_fg > 2.0 && temp_fg\
    \ <= 1.7 {\n            temp_letter = \"C+\"\n            count_letter += 1\n\
    \        } else if temp_fg > 1.7 && temp_fg <= 1.3 {\n            temp_letter\
    \ = \"C\"\n            count_letter += 1\n        } else if temp_fg > 1.3 && temp_fg\
    \ <= 1.0 {\n            temp_letter = \"C-\"\n            count_letter += 1\n\
    \        } else if temp_fg > 1.0 && temp_fg <= 0.7 {\n            temp_letter\
    \ = \"D+\"\n            count_letter += 1\n        } else if temp_fg > 0.7 &&\
    \ temp_fg < 0.0 {\n            temp_letter = \"D\"\n            count_letter +=\
    \ 1\n        } else if temp_fg < 0.0 {\n            temp_letter = \"D-\"\n   \
    \         count_letter += 1\n        } else {\n            temp_letter = \"E\"\
    \n        }\n        grades_letter = append(grades_letter, temp_letter)\n    }\n\
    \    return grades_letter\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T)\
    \ {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected:\
    \ []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"\
    D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"}\
    \ },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpchtz5kus_test.go:99: expected '[A+ B C- C A-]', got '[A+\
    \ E E E E]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n  \
    \      tmpchtz5kus_test.go:99: expected '[D+]', got '[E]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2\
    \ (0.00s)\n        tmpchtz5kus_test.go:99: expected '[D-]', got '[E]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmpchtz5kus_test.go:99:\
    \ expected '[D D- C- B B+]', got '[E E E E E]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5\
    \ (0.00s)\n        tmpchtz5kus_test.go:99: expected '[E D-]', got '[E E]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075621
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    grades_count := len(grades)\n    letter_grades :=\
    \ make([]string, grades_count)\n    grade_index := 0\n    for grade_index < grades_count\
    \ {\n        if grades[grade_index] < 0 || grades[grade_index] > 4 {\n       \
    \     letter_grades[grade_index] = \"D-\"\n        } else if grades[grade_index]\
    \ == 0 {\n            letter_grades[grade_index] = \"D+\"\n        } else if grades[grade_index]\
    \ < 3 {\n            letter_grades[grade_index] = \"B-\"\n        } else if grades[grade_index]\
    \ == 3 {\n            letter_grades[grade_index] = \"B+\"\n        } else if grades[grade_index]\
    \ < 2 {\n            letter_grades[grade_index] = \"A-\"\n        } else if grades[grade_index]\
    \ == 2 {\n            letter_grades[grade_index] = \"A+\"\n        } else if grades[grade_index]\
    \ < 1 {\n            letter_grades[grade_index] = \"A-\"\n        } else if grades[grade_index]\
    \ == 1 {\n            letter_grades[grade_index] = \"A+\"\n        } else if grades[grade_index]\
    \ < 0.7 {\n            letter_grades[grade_index] = \"B-\"\n        } else if\
    \ grades[grade_index] == 0.7 {\n            letter_grades[grade_index] = \"B+\"\
    \n        } else if grades[grade_index] < 0.6 {\n            letter_grades[grade_index]\
    \ = \"C-\"\n        } else if grades[grade_index] == 0.6 {\n            letter_grades[grade_index]\
    \ = \"C+\"\n        } else if grades[grade_index] < 0.5 {\n            letter_grades[grade_index]\
    \ = \"C\"\n        } else if grades[grade_index] == 0.5 {\n            letter_grades[grade_index]\
    \ = \"C-\"\n        } else if grades[grade_index] < 0.4 {\n            letter_grades[grade_index]\
    \ = \"D\"\n        } else if grades[grade_index] == 0.4 {\n            letter_grades[grade_index]\
    \ = \"D+\"\n        } else if grades[grade_index] < 0.3 {\n            letter_grades[grade_index]\
    \ = \"D+\"\n        } else if grades[grade_index] == 0.3 {\n            letter_grades[grade_index]\
    \ = \"D-\"\n        } else if grades[grade_index] < 0.2 {\n            letter_grades[grade_index]\
    \ = \"D-\"\n        } else if grades[grade_index] == 0.2 {\n            letter_grades[grade_index]\
    \ = \"D+\"\n        } else if grades[grade_index] < 0.1 {\n            letter_grades[grade_index]\
    \ = \"E\"\n        } else if grades[grade_index] == 0.1 {\n            letter_grades[grade_index]\
    \ = \"E\"\n        } else {\n            letter_grades[grade_index] = \"E\"\n\
    \        }\n        grade\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n \
    \ candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0,\
    \ 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n\
    \     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n   \
    \  { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     {\
    \ actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual:\
    \ candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}),\
    \ expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbrt1y4j8_test.go:83:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075620
- exit_code: 2
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    \n    // Write your solution here\n    \n    return\
    \ grades\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate :=\
    \ numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0,\
    \ 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n\
    \     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n   \
    \  { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     {\
    \ actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual:\
    \ candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}),\
    \ expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2ftvka52_test.go:34:12: cannot use grades (variable of type []float64)
    as type []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075621
- exit_code: 2
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    //Write your code here\n    // For grading a student\n\
    \    \n    // Sort the grades\n    sort.Sort(sort.Reverse(grades))\n    \n   \
    \ // For all grades higher than zero\n    for i := 0; i < len(grades); i++ {\n\
    \        if grades[i] > 0 {\n            // A+ - add +\n            grades[i]\
    \ -= 1.0\n            \n            // If a is 0, remove it\n            if grades[i]\
    \ == 0 {\n                grades = append(grades[:i], grades[i+1:]...)\n     \
    \       } else {\n                // Go on with loop\n            }\n        }\n\
    \    }\n    \n    // For all grades below zero\n    for i := 0; i < len(grades);\
    \ i++ {\n        if grades[i] < 0 {\n            // A - subtract -1\n        \
    \    grades[i] += 1.0\n            \n            // If a is 0, remove it\n   \
    \         if grades[i] == 0 {\n                grades = append(grades[:i], grades[i+1:]...)\n\
    \            } else {\n                // Go on with loop\n            }\n   \
    \     }\n    }\n    \n    // Sort the grades\n    sort.Sort(sort.Reverse(grades))\n\
    \    \n    // Convert the grades to letters\n    letters := make([]string, len(grades))\n\
    \    for i := 0; i < len(grades); i++ {\n        // The grades go from lowest\
    \ to highest\n        letters[i] = gradeToLetter(grades[i])\n    }\n    \n   \
    \ return letters\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate\
    \ := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0,\
    \ 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n\
    \     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n   \
    \  { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     {\
    \ actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual:\
    \ candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}),\
    \ expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpei7f6juq_test.go:35:5: undefined: sort

    /tmp/tmpei7f6juq_test.go:68:5: undefined: sort

    /tmp/tmpei7f6juq_test.go:74:22: undefined: gradeToLetter

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075621
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    grades = append(grades, 0) // Add an extra value\
    \ to make room for 0-grades\n    grade_list := make([]string, len(grades))\n \
    \   var last_gpa, last_letter string\n    for i := range grades {\n        if\
    \ grades[i] > 0 || grades[i] == 0 {\n            // Grade is a letter grade.\n\
    \            last_gpa = fmt.Sprintf(\"%.3f\", grades[i])\n            last_letter\
    \ = \"D-\"\n        } else if grades[i] <= 2.3 {\n            last_gpa = fmt.Sprintf(\"\
    %.3f\", grades[i])\n            last_letter = \"B-\"\n        } else if grades[i]\
    \ <= 2.7 {\n            last_gpa = fmt.Sprintf(\"%.3f\", grades[i])\n        \
    \    last_letter = \"B-\"\n        } else if grades[i] <= 3.3 {\n            last_gpa\
    \ = fmt.Sprintf(\"%.3f\", grades[i])\n            last_letter = \"A-\"\n     \
    \   } else if grades[i] <= 3.7 {\n            last_gpa = fmt.Sprintf(\"%.3f\"\
    , grades[i])\n            last_letter = \"A+\"\n        } else if grades[i] <=\
    \ 4.0 {\n            last_gpa = fmt.Sprintf(\"%.3f\", grades[i])\n           \
    \ last_letter = \"A+\"\n        } else {\n            last_gpa = fmt.Sprintf(\"\
    %.3f\", grades[i])\n            last_letter = \"E\"\n        }\n        grade_list[i]\
    \ = last_letter + last_gpa\n    }\n    return grade_list\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmp0sguzkcd_test.go:81: expected '[A+ B C- C A-]', got '[D-4.000\
    \ D-3.000 D-1.700 D-2.000 D-3.500 D-0.000]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__1\
    \ (0.00s)\n        tmp0sguzkcd_test.go:81: expected '[D+]', got '[D-1.200 D-0.000]'\n\
    \    --- FAIL: TestNumerical_Letter_Grade/test_num__2 (0.00s)\n        tmp0sguzkcd_test.go:81:\
    \ expected '[D-]', got '[D-0.500 D-0.000]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3\
    \ (0.00s)\n        tmp0sguzkcd_test.go:81: expected '[E]', got '[D-0.000 D-0.000]'\n\
    \    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmp0sguzkcd_test.go:81:\
    \ expected '[D D- C- B B+]', got '[D-1.000 D-0.300 D-1.500 D-2.800 D-3.300 D-0.000]'\n\
    \    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmp0sguzkcd_test.go:81:\
    \ expected '[E D-]', got '[D-0.000 D-0.700 D-0.000]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075621
- exit_code: 2
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    // This function will need to have two parameters,\n\
    \    // a slice of grades, and a slice of letter grades.\n    // The slice of\
    \ grades should be sorted from lowest\n    // to highest grade. The slice of letter\
    \ grades\n    // should be the sorted letter grades using the \n    // same sorting\
    \ method as grade_equation().\n    // Your function will output a slice of letter\
    \ grades\n    // using the same sorting method as grade_equation().\n    // If\
    \ the input slice of grades is empty, the function should return\n    // an empty\
    \ slice of letter grades.\n    // If the slice of grades is empty, output an empty\
    \ slice of\n    // letter grades. If the slice of grades has 0 or 1 elements,\n\
    \    // output an empty slice of letter grades.\n    if len(grades) < 2 {\n  \
    \      return []string{}\n    }\n\n    grades_sorted, _ := GradeSort(grades)\n\
    \    letter_grades := []string{}\n    for i := range grades_sorted {\n       \
    \ if grades_sorted[i]-grades_sorted[i-1] >= 0.3 {\n            letter_grades =\
    \ append(letter_grades, \"C\")\n        } else if grades_sorted[i]-grades_sorted[i-1]\
    \ <= -0.3 {\n            letter_grades = append(letter_grades, \"B\")\n      \
    \  } else if grades_sorted[i]-grades_sorted[i-1] > 0.3 &&\n               grades_sorted[i]-grades_sorted[i-1]\
    \ < -0.3 {\n            letter_grades = append(letter_grades, \"A-\")\n      \
    \  } else if grades_sorted[i]-grades_sorted[i-1] < 0.3 {\n            letter_grades\
    \ = append(letter_grades, \"A-\")\n        } else if grades_sorted[i]-grades_sorted[i-1]\
    \ > -0.3 {\n            letter_grades = append(letter_grades, \"A+\")\n      \
    \  } else {\n            letter_grades = append(letter_grades, \"A\")\n      \
    \  }\n    }\n    return letter_grades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl22p5iol_test.go:48:25: undefined: GradeSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075621
- exit_code: 2
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var letters []string\n    for _, grade := range grades\
    \ {\n        letters = append(letters, toLetterGrade(grade))\n    }\n    return\
    \ letters\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate :=\
    \ numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0,\
    \ 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n\
    \     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n   \
    \  { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     {\
    \ actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual:\
    \ candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}),\
    \ expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2eycy4qo_test.go:33:35: undefined: toLetterGrade

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075621
- exit_code: 2
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    grades_len := len(grades)\n    if grades_len < 1\
    \ {\n        return []string{}\n    }\n    \n    letters := make([]string, grades_len)\n\
    \    for i := 0; i < grades_len; i++ {\n        letters[i] = letter_grade(grades[i])\n\
    \    }\n    return letters\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T)\
    \ {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected:\
    \ []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"\
    D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"}\
    \ },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpil6_jeea_test.go:38:22: undefined: letter_grade

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075621
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    if len(grades) < 1 || len(grades) > 10 {\n      \
    \  return []string{\"E\"}\n    }\n\n    grades.sort() \n    grade_sum := 0.0\n\
    \    letter_grade := \"\"\n    letter_grades = []string{}\n\n    // Calculate\
    \ the grades and add to grade_sum\n    for i, _ := range grades {\n        grade_sum\
    \ += grades[i]\n    }\n\n    // Calculate the letter grade for each grade \n \
    \   for _, grade := range grades {\n        if grade == 0.0 {\n            letter_grade\
    \ = \"E\"\n        } else {\n            if grade_sum < 3.0 {\n              \
    \  if grade > grade_sum {\n                    letter_grade = \"D-\"\n       \
    \         } else {\n                    letter_grade = \"D\"\n               \
    \ }\n            } else if grade_sum < 4.0 {\n                if grade > grade_sum\
    \ {\n                    letter_grade = \"C-\"\n                } else {\n   \
    \                 letter_grade = \"C\"\n                }\n            } else\
    \ if grade_sum < 4.6 {\n                if grade > grade_sum {\n             \
    \       letter_grade = \"B-\"\n                } else {\n                    letter_grade\
    \ = \"B\"\n                }\n            } else if grade_sum < 5.0 {\n      \
    \          if grade > grade_sum {\n                    letter_grade = \"B+\"\n\
    \                } else {\n                    letter_grade = \"B\"\n        \
    \        }\n            } else if grade_sum < 5.6 {\n                if grade\
    \ > grade_sum {\n                    letter_grade = \"A-\"\n                }\
    \ else {\n                    letter_grade = \"A\"\n                }\n      \
    \      } else if grade_sum < 6.0 {\n                if grade > grade_sum {\n \
    \                   letter_grade = \"A+\"\n                } else {\n        \
    \            letter_grade = \"A\"\n                }\n            } else if grade_sum\
    \ < 6.6 {\n                if grade > grade_sum {\n                    letter_grade\
    \ = \"A-\"\n                } else {\n                    letter_grade = \"A\"\
    \n                }\n            } else if grade_sum < 7.0 {\n               \
    \ if grade > grade_sum {\n                    letter_grade = \"C+\"\n        \
    \        } else {\n                    letter_grade = \"C\"\n                }\n\
    \            } else if grade_sum < 7.6 {\n                if grade > grade_sum\
    \ {\n                    letter_grade = \"C\"\n                } else {\n    \
    \                letter_grade = \"C\"\n                }\n            } else if\
    \ grade_sum < 8.0 {\n                if grade > grade_sum {\n                \
    \    letter_grade = \"B+\"\n                } else {\n                    letter_grade\
    \ = \"B\"\n                }\n            } else if grade_sum < 8.6 {\n      \
    \          if grade > grade_sum {\n                    letter_grade = \"B\"\n\
    \                } else {\n                    letter_grade = \"B\"\n        \
    \        }\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpos3rfq4z_test.go:116:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075621
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    // Write your code here\n    result := make([]string,\
    \ len(grades))\n    for index, grade := range grades {\n        if grade >= 3.7\
    \ { // > 3.7\n            result[index] = \"A+\"\n        } else if grade >= 3.3\
    \ { // > 3.3\n            result[index] = \"A\"\n        } else if grade >= 3\
    \ { // > 3\n            result[index] = \"A-\"\n        } else if grade >= 2.7\
    \ { // > 2.7\n            result[index] = \"B+\"\n        } else if grade >= 2.3\
    \ { // > 2.3\n            result[index] = \"B\"\n        } else if grade >= 2\
    \ { // > 2\n            result[index] = \"B-\"\n        } else if grade >= 1.7\
    \ { // > 1.7\n            result[index] = \"C+\"\n        } else if grade >= 1.3\
    \ { // > 1.3\n            result[index] = \"C\"\n        } else if grade >= 1\
    \ { // > 1\n            result[index] = \"C-\"\n        } else if grade >= 0.7\
    \ { // > 0.7\n            result[index] = \"D+\"\n        } else if grade >= 0\
    \ { // > 0\n            result[index] = \"D\"\n        } else { // <= 0\n    \
    \        result[index] = \"D-\"\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmp810og0kf_test.go:81: expected '[A+ B C- C A-]', got '[A+\
    \ A- C+ B- A]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n\
    \        tmp810og0kf_test.go:81: expected '[D+]', got '[C-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2\
    \ (0.00s)\n        tmp810og0kf_test.go:81: expected '[D-]', got '[D]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmp810og0kf_test.go:81:\
    \ expected '[E]', got '[D]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmp810og0kf_test.go:81: expected '[D D- C- B B+]', got '[C-\
    \ D C B+ A]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n \
    \       tmp810og0kf_test.go:81: expected '[E D-]', got '[D D+]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075622
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    grades_list := make([]string, len(grades))\n    \n\
    \    // The loop starts with the first element and ends at the end\n    for i\
    \ := 1; i < len(grades); i++ {\n        \n        // If we are above the 3rd place\
    \ of the grade list\n        // Then we have to move up 1 place in the grade list\n\
    \        if grades[i] >= 3.0 {\n            grades_list[i-1] = grades_list[i]\n\
    \            grades_list[i] = \"A+\"\n            \n            // Move back 2\
    \ places in the grade list\n            // This is because the grade A+ is the\
    \ 3rd place\n            // Move back 2 places so now grades list is [C- C - \
    \ A- A- B+ D- D- E]\n            // and we want the grade list to look like this:\
    \ [C- C -  A- A- B+ D- D- E]\n            i -= 2\n            \n        // If\
    \ we go below the 3rd place of the grade list\n        // We have to move down\
    \ 1 place in the grade list\n        } else {\n            grades_list[i-1] =\
    \ grades_list[i]\n            grades_list[i] = \"D-\"\n            \n        \
    \    // Move back 2 places in the grade list\n            // This is because the\
    \ grade D- is the 3rd place\n            // Move back 2 places so now grades list\
    \ is [C- C -  A- A- B+ D- D- E]\n            // and we want the grade list to\
    \ look like this: [C- C -  A- A- B+ D- D- E]\n            i -= 2\n        }\n\
    \    }\n    \n    // We also have to account for when the last grade is 0.0\n\
    \    // We do this by putting a E at the end of the grades list\n    grades_list[len(grades_list)-1]\
    \ = \"E\"\n    \n    // And we return the grades list\n    return grades_list\n\
    }\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\npanic: runtime error: index\
    \ out of range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\
    \ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513720, 0xc000014360})\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513720,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.numerical_letter_grade(...)\n\t/tmp/tmpuu9riv9q_test.go:39\n\
    command-line-arguments_test.TestNumerical_Letter_Grade(0x0?)\n\t/tmp/tmpuu9riv9q_test.go:77\
    \ +0xc19\ntesting.tRunner(0xc000192680, 0x529058)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075622
- exit_code: 2
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    // your code goes here\n    result := []string{}\n\
    \    index := 0\n    sum := 0\n    for _, grade := range grades {\n        sum\
    \ += grade\n    }\n    if sum < 0 {\n        index = len(grades) - 1\n    } else\
    \ {\n        index = int(math.Floor(math.Log10(sum))) - 2\n    }\n    index %=\
    \ len(grades)\n    if index > 0 {\n        sum = sum - grades[index] // subtract\
    \ from the sum the next grade\n    } else {\n        sum = sum / len(grades) //\
    \ divide by the number of grades\n    }\n    i := 0\n    for _, grade := range\
    \ grades {\n        if i == index {\n            result = append(result, fmt.Sprintf(\"\
    %s%s\", grade, grades[i+1]))\n            i++\n        } else {\n            result\
    \ = append(result, fmt.Sprintf(\"%s%s\", grade, grades[i]))\n        }\n    }\n\
    \    return result\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate\
    \ := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0,\
    \ 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n\
    \     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n   \
    \  { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     {\
    \ actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual:\
    \ candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}),\
    \ expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphusrv5jp_test.go:36:9: invalid operation: sum += grade (mismatched types
    int and float64)

    /tmp/tmphusrv5jp_test.go:41:21: undefined: math

    /tmp/tmphusrv5jp_test.go:45:15: invalid operation: sum - grades[index] (mismatched
    types int and float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075622
- exit_code: 2
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    letters := []string{}\n\n    for _, grade := range\
    \ grades {\n        if grade < 1 {\n            continue\n        }\n\n      \
    \  letters = append(letters, gradeAsLetter(grade))\n    }\n\n    return letters\n\
    }\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmju27cre_test.go:38:35: undefined: gradeAsLetter

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075622
- exit_code: 2
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    // The grades are sorted in descending order\n  \
    \  gradesSorted := sort.Float64Slice(grades)\n    gradesSorted.Sort()\n\n    //\
    \ The student with the highest GPA is the student with the highest letter grade\n\
    \    studentGPA := gradesSorted[len(gradesSorted)-1]\n    studentLetter := \"\"\
    \n    studentGPASort := []float64{}\n\n    // Calculate the grade letter\n   \
    \ for i := len(gradesSorted)-2; i >= 0; i-- {\n        if gradesSorted[i] >= studentGPA\
    \ {\n            studentGPA = gradesSorted[i]\n            studentLetter = gradesSorted[i+1]\n\
    \            break\n        }\n    }\n\n    // Sort the student GPA array in descending\
    \ order\n    studentGPASort = studentGPASort[:0]\n    studentGPASort = append(studentGPASort,\
    \ studentGPA)\n    studentGPASort = append(studentGPASort, studentLetter)\n  \
    \  studentGPASort.Sort()\n\n    // The student with the highest GPA is the student\
    \ with the lowest letter grade\n    studentLetter = studentGPASort[0]\n    studentGPA\
    \ = studentGPASort[1]\n\n    // Put the letter grade in alphabetical order\n \
    \   letterGrades := []string{}\n    for i := 0; i < len(studentGPASort); i++ {\n\
    \        if studentGPA < studentGPASort[i+1] {\n            letterGrades = append(letterGrades,\
    \ studentGPASort[i+1]+\"-\")\n        } else {\n            letterGrades = append(letterGrades,\
    \ studentGPASort[i])\n        }\n    }\n\n    return letterGrades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0jep1wgw_test.go:32:21: undefined: sort

    /tmp/tmp0jep1wgw_test.go:52:45: cannot use studentLetter (variable of type string)
    as type float64 in argument to append

    /tmp/tmp0jep1wgw_test.go:53:20: studentGPASort.Sort undefined (type []float64
    has no field or method Sort)

    /tmp/tmp0jep1wgw_test.go:56:21: cannot use studentGPASort[0] (variable of type
    float64) as type string in assignment

    /tmp/tmp0jep1wgw_test.go:63:49: invalid operation: studentGPASort[i + 1] + "-"
    (mismatched types float64 and untyped string)

    /tmp/tmp0jep1wgw_test.go:65:49: cannot use studentGPASort[i] (variable of type
    float64) as type string in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075622
- exit_code: 2
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    if len(grades) == 0 {\n        return []string{}\n\
    \    }\n    grades = append([]float64{}, grades...)\n    return grades[0:len(grades)-1].filter(lessThanZero).reduce(add).reduce(grade_to_string)\n\
    }\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpog0jfwbh_test.go:35:36: grades[0:len(grades) - 1].filter undefined (type
    []float64 has no field or method filter)

    /tmp/tmpog0jfwbh_test.go:35:43: undefined: lessThanZero

    /tmp/tmpog0jfwbh_test.go:35:64: undefined: add

    /tmp/tmpog0jfwbh_test.go:35:76: undefined: grade_to_string

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075622
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    // The code below uses two nested for loops to loop\
    \ through each element of the grades array and calculate the letter grade.\n \
    \   // There are three important things happening here:\n    // 1) The first for\
    \ loop loops through the entire grade array and prints each element into the grades\
    \ variable\n    // 2) The second for loop loops through the entire grade array\
    \ and calculates the letter grade for each grade\n    // 3) The third loop determines\
    \ if a grade is greater than a certain number, such as 3.6\n    // If this happens,\
    \ then the grade is printed into the grades variable and the grade variable is\
    \ incremented by 1\n    // This continues until the grade is less than a certain\
    \ number, such as 4.5\n\n    // Step 1: Loop through grades array\n    for i :=\
    \ 0; i < len(grades); i++ {\n        fmt.Printf(\"%f\\n\", grades[i])\n    }\n\
    \n    // Step 2: Loop through grades array\n    for i := 0; i < len(grades); i++\
    \ {\n        letter := \"\"\n        for j := i + 1; j < len(grades); j++ {\n\
    \            // Step 3: This if statement determines if the first number in the\
    \ array is less than or equal to the third number in the array\n            if\
    \ grades[i] <= grades[j] {\n                letter = \"B-\"\n                break\n\
    \            }\n            letter = \"A-\"\n        }\n        fmt.Println(grades[i],\
    \ letter)\n    }\n\n    // Step 4: This final else statement prints the letter\
    \ grade for zero values if the array has a zero value\n    if grades[0] == 0 {\n\
    \        fmt.Println(\"D-\", \"E\")\n    }\n\n    // Step 5: This final return\
    \ statement returns an array with the letter grade values\n    return []string{}\n\
    }\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "4.000000\n3.000000\n1.700000\n2.000000\n3.500000\n4 A-\n3 B-\n1.7 B-\n\
    2 B-\n3.5 \n1.200000\n1.2 \n0.500000\n0.5 \n0.000000\n0 \nD- E\n1.000000\n0.300000\n\
    1.500000\n2.800000\n3.300000\n1 B-\n0.3 B-\n1.5 B-\n2.8 B-\n3.3 \n0.000000\n0.700000\n\
    0 B-\n0.7 \nD- E\n--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL:\
    \ TestNumerical_Letter_Grade/test_num__0 (0.00s)\n        tmpt0rq3w9a_test.go:85:\
    \ expected '[A+ B C- C A-]', got '[]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__1\
    \ (0.00s)\n        tmpt0rq3w9a_test.go:85: expected '[D+]', got '[]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__2 (0.00s)\n        tmpt0rq3w9a_test.go:85:\
    \ expected '[D-]', got '[]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3\
    \ (0.00s)\n        tmpt0rq3w9a_test.go:85: expected '[E]', got '[]'\n    --- FAIL:\
    \ TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmpt0rq3w9a_test.go:85:\
    \ expected '[D D- C- B B+]', got '[]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5\
    \ (0.00s)\n        tmpt0rq3w9a_test.go:85: expected '[E D-]', got '[]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075622
- exit_code: 2
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n\n    var letter string = \"\"\n   \
    \ var sum float64 = 0.0\n    var length float64 = len(grades)\n\n    for _, grade\
    \ := range grades {\n        sum += grade\n        if sum >= 4.0 {\n         \
    \   letter = \"A+\"\n        }\n\n        if sum > 4.0 && sum <= 4.7 {\n     \
    \       letter = \"A\"\n        }\n\n        if sum > 4.7 && sum <= 4.9 {\n  \
    \          letter = \"A-\"\n        }\n\n        if sum > 4.9 && sum <= 5.0 {\n\
    \            letter = \"B+\"\n        }\n\n        if sum > 5.0 && sum <= 5.3\
    \ {\n            letter = \"B\"\n        }\n\n        if sum > 5.3 && sum <= 5.6\
    \ {\n            letter = \"B-\"\n        }\n\n        if sum > 5.6 && sum <=\
    \ 5.9 {\n            letter = \"C+\"\n        }\n\n        if sum > 5.9 && sum\
    \ <= 6.3 {\n            letter = \"C\"\n        }\n\n        if sum > 6.3 && sum\
    \ <= 6.7 {\n            letter = \"C-\"\n        }\n\n        if sum > 6.7 &&\
    \ sum <= 7.0 {\n            letter = \"D+\"\n        }\n\n        if sum > 7.0\
    \ && sum <= 7.4 {\n            letter = \"D\"\n        }\n\n        if sum > 7.4\
    \ && sum <= 7.6 {\n            letter = \"D-\"\n        }\n\n        if sum >\
    \ 7.6 && sum <= 7.9 {\n            letter = \"E\"\n        }\n    }\n\n    return\
    \ []string{letter}\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate\
    \ := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0,\
    \ 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n\
    \     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n   \
    \  { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     {\
    \ actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual:\
    \ candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}),\
    \ expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp87mhaior_test.go:44:26: cannot use len(grades) (value of type int) as
    type float64 in variable declaration

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075623
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    letter_grades := []string{}\n    for _, grade :=\
    \ range grades {\n        grade -= 0.5\n        if grade < 0.0 {\n           \
    \ grade = -0.2\n        }\n        letter_grades = append(letter_grades, fmt.Sprintf(\"\
    %g\", grade))\n    }\n    return letter_grades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpkjrgus3n_test.go:60: expected '[A+ B C- C A-]', got '[3.5\
    \ 2.5 1.2 1.5 3]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n\
    \        tmpkjrgus3n_test.go:60: expected '[D+]', got '[0.7]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2\
    \ (0.00s)\n        tmpkjrgus3n_test.go:60: expected '[D-]', got '[0]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmpkjrgus3n_test.go:60:\
    \ expected '[E]', got '[-0.2]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpkjrgus3n_test.go:60: expected '[D D- C- B B+]', got '[0.5\
    \ -0.2 1 2.3 2.8]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmpkjrgus3n_test.go:60: expected '[E D-]', got '[-0.2 0.19999999999999996]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075623
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var a []float64\n    for i, v := range grades {\n\
    \        if i <= 8 {\n            a = append(a, float64(grades[i]-grades[i-1]))\n\
    \        } else {\n            switch i {\n            case 9:\n             \
    \   a = append(a, float64(grades[i] - grades[i-9]))\n            case 8:\n   \
    \             a = append(a, float64(grades[i]-grades[i-8]))\n            case\
    \ 7:\n                a = append(a, float64(grades[i]-grades[i-7]))\n        \
    \    case 6:\n                a = append(a, float64(grades[i]-grades[i-6]))\n\
    \            case 5:\n                a = append(a, float64(grades[i]-grades[i-5]))\n\
    \            case 4:\n                a = append(a, float64(grades[i]-grades[i-4]))\n\
    \            case 3:\n                a = append(a, float64(grades[i]-grades[i-3]))\n\
    \            case 2:\n                a = append(a, float64(grades[i]-grades[i-2]))\n\
    \            case 1:\n                a = append(a, float64(grades[i]-grades[i-1]))\n\
    \            }\n        }\n    }\n    a := a[0:9]\n    var c []float64\n    for\
    \ _, v := range a {\n        if v <= 1.0 {\n            c = append(c, v)\n   \
    \     } else {\n            switch int(len(a)/2) {\n            case 4:\n    \
    \            c = append(c, float64(grades[int(len(a)/2)]-grades[int(len(a)/2-1)]))\n\
    \            case 3:\n                c = append(c, float64(grades[int(len(a)/2)]-grades[int(len(a)/2-1)]))\n\
    \            case 2:\n                c = append(c, float64(grades[int(len(a)/2)]-grades[int(len(a)/2-1)]))\n\
    \            case 1:\n                c = append(c, float64(grades[int(len(a)/2)]-grades[int(len(a)/2-1)]))\n\
    \            }\n        }\n    }\n    c := c[0 : len(c)+1]\n    var g []float64\n\
    \    for _, v := range c {\n        if v <= 1.0 {\n            g = append(g, v)\n\
    \        } else {\n            switch int(len(c)/2) {\n            case 4:\n \
    \               g = append(g, float64(grades[int(len(c)/2)]-grades[int(len(c)/2-1)]))\n\
    \            case 3:\n                g = append(g, float64(grades[int(len(c)/2)]-grades[int(len(c)/2-1)]))\n\
    \            case 2:\n                g = append(g, float64(grades[int(len(c)/2)]-grades[int(len(c)/2-1)]))\n\
    \            case 1:\n                g = append(g, float64(grades[int(len(c)/2)]-grades[int(len(c)/2-1)]))\n\
    \            }\n        }\n    }\n    g := g[0 : \nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp47doab7r_test.go:95:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075622
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    // Declare and initialize a variable named grades\n\
    \    // It holds the grades of the students\n    grades := make([]float64, len(grades))\n\
    \    \n    // Declare and initialize a variable named result \n    // It holds\
    \ a string with the letter grades\n    result := make([]string, len(grades))\n\
    \n    // Iterate over the grades and for each grade\n    for i := 0; i < len(grades);\
    \ i++ {\n        // If the grades is bigger than the highest grade\n        //\
    \ set the highest grade to that grade\n        if grades[i] > grades[len(grades)-1]\
    \ {\n            grades[len(grades)-1] = grades[i]\n        }\n        // If the\
    \ grades is lower than the lowest grade\n        // set the lowest grade to that\
    \ grade\n        if grades[i] < grades[0] {\n            grades[0] = grades[i]\n\
    \        }\n    }\n\n    // Iterate over the grades once again and for each grade\n\
    \    // check if the grade is bigger than the highest grade\n    // and lower\
    \ than the lowest grade\n    // if it is bigger than the highest grade and\n \
    \   // lower than the lowest grade, set the letter grade to \"E\"\n    // if it\
    \ is bigger than the highest grade and smaller than the lowest grade\n    // set\
    \ the letter grade to \"D-\"\n    // and if it is bigger than the lowest grade\
    \ and\n    // lower than the highest grade, set the letter grade to \"D\"\n  \
    \  // if it is bigger than the lowest grade and smaller than the highest grade\n\
    \    // set the letter grade to \"C-\"\n    // and if it is bigger than the lowest\
    \ grade and\n    // lower than the lowest grade, set the letter grade to \"B-\"\
    \n    // and if it is bigger than the lowest grade and smaller than the lowest\
    \ grade\n    // set the letter grade to \"B\"\n    // if it is bigger than the\
    \ lowest grade and\n    // lower than the highest grade, set the letter grade\
    \ to \"A-\"\n    // and if it is bigger than the lowest grade and\n    // lower\
    \ than the lowest grade, set the letter grade to \"A\"\n    // and if it is bigger\
    \ than the lowest grade and\n    // lower than the lowest grade, set the letter\
    \ grade to \"A+\"\n    // and if it is bigger than the highest grade and\n   \
    \ // lower than the lowest grade, set the letter grade to \"D\"\n    // and if\
    \ it is bigger than the lowest grade and\n    // lower than the highest grade,\
    \ set the letter grade to \"D+\"\n    // and if it is bigger than the highest\
    \ grade and\n    // lower than the highest grade, set the letter grade to \"E\n\
    func TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpd9g12c1s_test.go:80:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075622
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    letter := make([]string, len(grades))\n    for i,\
    \ grade := range grades {\n        if grade > 0.0 && grade < 1.0 {\n         \
    \   letter[i] = fmt.Sprintf(\"A+\")\n        }\n        if grade > 1.0 && grade\
    \ <= 2.0 {\n            letter[i] = fmt.Sprintf(\"A\")\n        }\n        if\
    \ grade > 2.0 && grade <= 3.0 {\n            letter[i] = fmt.Sprintf(\"A-\")\n\
    \        }\n        if grade > 3.0 && grade <= 3.7 {\n            letter[i] =\
    \ fmt.Sprintf(\"B+\")\n        }\n        if grade > 3.7 && grade <= 4.0 {\n \
    \           letter[i] = fmt.Sprintf(\"B\")\n        }\n        if grade > 4.0\
    \ && grade <= 4.7 {\n            letter[i] = fmt.Sprintf(\"B-\")\n        }\n\
    \        if grade > 4.7 && grade <= 5.0 {\n            letter[i] = fmt.Sprintf(\"\
    C+\")\n        }\n        if grade > 5.0 && grade <= 5.7 {\n            letter[i]\
    \ = fmt.Sprintf(\"C\")\n        }\n        if grade > 5.7 && grade <= 6.0 {\n\
    \            letter[i] = fmt.Sprintf(\"C-\")\n        }\n        if grade > 6.0\
    \ && grade <= 6.7 {\n            letter[i] = fmt.Sprintf(\"D+\")\n        }\n\
    \        if grade > 6.7 && grade <= 7.0 {\n            letter[i] = fmt.Sprintf(\"\
    D\")\n        }\n        if grade > 7.0 && grade <= 7.7 {\n            letter[i]\
    \ = fmt.Sprintf(\"D-\")\n        }\n        if grade > 7.7 && grade <= 8.0 {\n\
    \            letter[i] = fmt.Sprintf(\"E\")\n        }\n        if grade > 8.0\
    \ {\n            letter[i] = \"D-\"\n        }\n    }\n    return letter\n}\n\n\
    func TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpwbc5a65i_test.go:97: expected '[A+ B C- C A-]', got '[B\
    \ A- A A B+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n\
    \        tmpwbc5a65i_test.go:97: expected '[D+]', got '[A]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2\
    \ (0.00s)\n        tmpwbc5a65i_test.go:97: expected '[D-]', got '[A+]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmpwbc5a65i_test.go:97:\
    \ expected '[E]', got '[]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpwbc5a65i_test.go:97: expected '[D D- C- B B+]', got '[ A+\
    \ A A- B+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n  \
    \      tmpwbc5a65i_test.go:97: expected '[E D-]', got '[ A+]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075623
- exit_code: 2
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var grades_str []string\n    var total float64\n\
    \    for _, grade := range grades {\n        total += grade\n    }\n    for i\
    \ := 0; i < len(grades)-1; i++ {\n        grades_str = append(grades_str, fmt.Sprintf(\"\
    %.2f\", grades[i+1]-grades[i])+\n            fmt.Sprintf(\"%+\", total/float64(len(grades)-1)))\n\
    \    }\n    return grades_str\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T)\
    \ {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected:\
    \ []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"\
    D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"}\
    \ },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test

    /tmp/tmpvqxo869v_test.go:38:13: fmt.Sprintf format %+ is missing verb at end of
    string

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075623
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    // Only 3 grades\n    if len(grades) != 3 {\n   \
    \     return []string{}\n    }\n\n    // Average grade\n    var avg_grade float64\n\
    \    for _, grade := range grades {\n        avg_grade += grade\n    }\n\n   \
    \ avg_grade /= float64(len(grades))\n\n    // Calculate the letter grade\n   \
    \ letter_grade := \"\"\n    switch {\n    case (grades[0] < avg_grade + 0.1) ||\n\
    \        grades[0] > avg_grade + 0.7 ||\n        grades[0] > avg_grade + 0.3:\n\
    \        letter_grade = \"F\"\n    case (grades[1] < avg_grade + 0.1) ||\n   \
    \     grades[1] > avg_grade + 0.7 ||\n        grades[1] > avg_grade + 0.3:\n \
    \       letter_grade = \"D-\"\n    case (grades[2] < avg_grade + 0.1) ||\n   \
    \     grades[2] > avg_grade + 0.7 ||\n        grades[2] > avg_grade + 0.3:\n \
    \       letter_grade = \"D+\"\n    case (grades[3] < avg_grade + 0.1) ||\n   \
    \     grades[3] > avg_grade + 0.7 ||\n        grades[3] > avg_grade + 0.3:\n \
    \       letter_grade = \"C+\"\n    case (grades[0] > avg_grade + 0.7 ||\n    \
    \    grades[1] > avg_grade + 0.7 ||\n        grades[2] > avg_grade + 0.7 ||\n\
    \        grades[3] > avg_grade + 0.7) &&\n        grades[0] > grades[1] ||\n \
    \       grades[1] > grades[2] ||\n        grades[2] > grades[3]:\n        letter_grade\
    \ = \"C\"\n    case (grades[0] > avg_grade + 0.7 ||\n        grades[1] > avg_grade\
    \ + 0.7 ||\n        grades[2] > avg_grade + 0.7 ||\n        grades[3] > avg_grade\
    \ + 0.7) &&\n        grades[0] > grades[1] ||\n        grades[1] > grades[2] ||\n\
    \        grades[2] < grades[3]:\n        letter_grade = \"B-\"\n    case (grades[0]\
    \ > avg_grade + 0.7 ||\n        grades[1] > avg_grade + 0.7 ||\n        grades[2]\
    \ < avg_grade + 0.7 ||\n        grades[3] < avg_grade + 0.7) &&\n        grades[0]\
    \ > grades[1] ||\n        grades[1] > grades[2] ||\n        grades[2] < grades[3]:\n\
    \        letter_grade = \"B\"\n    case (grades[0] > avg_grade + 0.7 ||\n    \
    \    grades[1] > \nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate\
    \ := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0,\
    \ 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n\
    \     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n   \
    \  { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     {\
    \ actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual:\
    \ candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}),\
    \ expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmptsoisf55_test.go:89:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075622
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    result := []string{}\n    for _, grade := range grades\
    \ {\n        letterGrade := \"\"\n        if grade >= 3.7 && grade <= 4.0 {\n\
    \            letterGrade = \"A+\"\n        } else if grade >= 3.3 && grade <=\
    \ 3.7 {\n            letterGrade = \"A\"\n        } else if grade >= 3.0 && grade\
    \ <= 3.3 {\n            letterGrade = \"A-\"\n        } else if grade >= 2.7 &&\
    \ grade <= 3.0 {\n            letterGrade = \"B+\"\n        } else if grade >=\
    \ 2.3 && grade <= 2.7 {\n            letterGrade = \"B\"\n        } else if grade\
    \ >= 2.0 || grade <= 2.3 {\n            letterGrade = \"B-\"\n        } else if\
    \ grade >= 1.7 && grade <= 2.0 {\n            letterGrade = \"C+\"\n        }\
    \ else if grade >= 1.3 && grade <= 1.7 {\n            letterGrade = \"C\"\n  \
    \      } else if grade >= 1.0 || grade <= 1.3 {\n            letterGrade = \"\
    C-\"\n        } else if grade >= 0.7 && grade <= 1.0 {\n            letterGrade\
    \ = \"D+\"\n        } else if grade >= 0.0 && grade <= 0.7 {\n            letterGrade\
    \ = \"D\"\n        } else if grade >= 0.0 {\n            letterGrade = \"D-\"\n\
    \        }\n        result = append(result, letterGrade)\n    }\n    return result\n\
    }\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpql28pqar_test.go:82: expected '[A+ B C- C A-]', got '[A+\
    \ A- B- B- A]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n\
    \        tmpql28pqar_test.go:82: expected '[D+]', got '[B-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2\
    \ (0.00s)\n        tmpql28pqar_test.go:82: expected '[D-]', got '[B-]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmpql28pqar_test.go:82:\
    \ expected '[E]', got '[B-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpql28pqar_test.go:82: expected '[D D- C- B B+]', got '[B-\
    \ B- B- B+ A]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmpql28pqar_test.go:82: expected '[E D-]', got '[B- B-]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075623
- exit_code: 2
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var result []string\n    var sum, count, avg float64\n\
    \    for _, grade := range grades {\n        count++\n        sum += grade\n \
    \   }\n    avg = sum / float64(count)\n    for i, grade := range grades {\n  \
    \      if grade < avg {\n            result[i] = fmt.Sprintf(\"%s-\", grade)\n\
    \        } else if grade >= avg {\n            result[i] = fmt.Sprintf(\"%+d-\"\
    , grade)\n        } else {\n            result[i] = fmt.Sprintf(\"%d-\", grade)\n\
    \        }\n    }\n    return result\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T)\
    \ {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected:\
    \ []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"\
    D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"}\
    \ },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test

    /tmp/tmpqznjlprm_test.go:40:25: fmt.Sprintf format %s has arg grade of wrong type
    float64

    /tmp/tmpqznjlprm_test.go:42:25: fmt.Sprintf format %+d has arg grade of wrong
    type float64

    /tmp/tmpqznjlprm_test.go:44:25: fmt.Sprintf format %d has arg grade of wrong type
    float64

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075623
- exit_code: 2
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    grades := grades[:len(grades)-1]\n    grades := append([]float64{0.0},\
    \ grades...)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n\
    \    return letter_grade(grades, 0)\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T)\
    \ {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected:\
    \ []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"\
    D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"}\
    \ },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp65ilb_r1_test.go:31:12: no new variables on left side of :=

    /tmp/tmp65ilb_r1_test.go:32:12: no new variables on left side of :=

    /tmp/tmp65ilb_r1_test.go:35:12: undefined: letter_grade

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075623
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    grades_list := make([]string, 0, 10)\n    // Looping\
    \ through the array backwards to make the order of the grades \n    // correspond\
    \ to the letters.\n    for i := 0; i < len(grades); i++ {\n        if grades[i]\
    \ < 4 {\n            grades_list = append(grades_list, fmt.Sprintf(\"A+\"))\n\
    \        } else if grades[i] < 3.7 {\n            grades_list = append(grades_list,\
    \ fmt.Sprintf(\"A\"))\n        } else if grades[i] < 3.3 {\n            grades_list\
    \ = append(grades_list, fmt.Sprintf(\"A-\"))\n        } else if grades[i] < 3\
    \ {\n            grades_list = append(grades_list, fmt.Sprintf(\"B+\"))\n    \
    \    } else if grades[i] < 2.7 {\n            grades_list = append(grades_list,\
    \ fmt.Sprintf(\"B\"))\n        } else if grades[i] < 2.3 {\n            grades_list\
    \ = append(grades_list, fmt.Sprintf(\"B-\"))\n        } else if grades[i] < 2\
    \ {\n            grades_list = append(grades_list, fmt.Sprintf(\"C+\"))\n    \
    \    } else if grades[i] < 1.7 {\n            grades_list = append(grades_list,\
    \ fmt.Sprintf(\"C\"))\n        } else if grades[i] < 1.3 {\n            grades_list\
    \ = append(grades_list, fmt.Sprintf(\"C-\"))\n        } else if grades[i] < 1\
    \ {\n            grades_list = append(grades_list, fmt.Sprintf(\"D+\"))\n    \
    \    } else if grades[i] < 0.7 {\n            grades_list = append(grades_list,\
    \ fmt.Sprintf(\"D\"))\n        } else if grades[i] < 0 {\n            grades_list\
    \ = append(grades_list, fmt.Sprintf(\"D-\"))\n        } else {\n            grades_list\
    \ = append(grades_list, fmt.Sprintf(\"E\"))\n        }\n    }\n    return grades_list\n\
    }\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpaz1vhudm_test.go:84: expected '[A+ B C- C A-]', got '[E\
    \ A+ A+ A+ A+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n\
    \        tmpaz1vhudm_test.go:84: expected '[D+]', got '[A+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2\
    \ (0.00s)\n        tmpaz1vhudm_test.go:84: expected '[D-]', got '[A+]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmpaz1vhudm_test.go:84:\
    \ expected '[E]', got '[A+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpaz1vhudm_test.go:84: expected '[D D- C- B B+]', got '[A+\
    \ A+ A+ A+ A+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmpaz1vhudm_test.go:84: expected '[E D-]', got '[A+ A+]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075623
- exit_code: 2
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    // Create a map of letter grades, indexed by GPA\n\
    \    grade_letters := make(map[float64]string)\n    grade_letters[0.0] = \" 0.0\
    \ \"\n    grade_letters[1.0] = \"A+\"\n    grade_letters[1.7] = \"A\"\n    grade_letters[2.0]\
    \ = \"B+\"\n    grade_letters[2.7] = \"B\"\n    grade_letters[3.0] = \"C+\"\n\
    \    grade_letters[3.7] = \"C\"\n    grade_letters[4.0] = \"D+\"\n    grade_letters[5.0]\
    \ = \"D\"\n    grade_letters[6.0] = \"F\"\n\n    // Sort the grades and output\
    \ the result\n    sort.Float64s(grades)\n    letters := make([]string, len(grades))\n\
    \    for i := range letters {\n        letters[i] = grade_letters[grades[i]]\n\
    \    }\n\n    return letters\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T)\
    \ {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected:\
    \ []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"\
    D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"}\
    \ },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkwtf6a4p_test.go:45:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075623
- exit_code: 2
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    grades := make([]float64, len(grades))\n    for i\
    \ := 0; i < len(grades); i++ {\n        grades[i] = grades[i] / 4\n        if\
    \ grades[i] >= 3.7 {\n            grades[i] = \"A+\"\n        } else if grades[i]\
    \ >= 3.3 {\n            grades[i] = \"A\"\n        } else if grades[i] >= 3 {\n\
    \            grades[i] = \"A-\"\n        } else if grades[i] >= 2.7 {\n      \
    \      grades[i] = \"B+\"\n        } else if grades[i] >= 2.3 {\n            grades[i]\
    \ = \"B\"\n        } else if grades[i] >= 2 {\n            grades[i] = \"B-\"\n\
    \        } else if grades[i] >= 1.7 {\n            grades[i] = \"C+\"\n      \
    \  } else if grades[i] >= 1.3 {\n            grades[i] = \"C\"\n        } else\
    \ if grades[i] >= 1 {\n            grades[i] = \"C-\"\n        } else if grades[i]\
    \ >= 0.7 {\n            grades[i] = \"D+\"\n        } else if grades[i] >= 0 {\n\
    \            grades[i] = \"D\"\n        } else if grades[i] < 0 {\n          \
    \  grades[i] = \"E\"\n        }\n    }\n    return grades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpesdxvkkz_test.go:31:12: no new variables on left side of :=

    /tmp/tmpesdxvkkz_test.go:35:25: cannot use "A+" (untyped string constant) as float64
    value in assignment

    /tmp/tmpesdxvkkz_test.go:37:25: cannot use "A" (untyped string constant) as float64
    value in assignment

    /tmp/tmpesdxvkkz_test.go:39:25: cannot use "A-" (untyped string constant) as float64
    value in assignment

    /tmp/tmpesdxvkkz_test.go:41:25: cannot use "B+" (untyped string constant) as float64
    value in assignment

    /tmp/tmpesdxvkkz_test.go:43:25: cannot use "B" (untyped string constant) as float64
    value in assignment

    /tmp/tmpesdxvkkz_test.go:45:25: cannot use "B-" (untyped string constant) as float64
    value in assignment

    /tmp/tmpesdxvkkz_test.go:47:25: cannot use "C+" (untyped string constant) as float64
    value in assignment

    /tmp/tmpesdxvkkz_test.go:49:25: cannot use "C" (untyped string constant) as float64
    value in assignment

    /tmp/tmpesdxvkkz_test.go:51:25: cannot use "C-" (untyped string constant) as float64
    value in assignment

    /tmp/tmpesdxvkkz_test.go:51:25: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075623
- exit_code: 2
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    // Write code here\n    \n    gradesMap:= make(map[string]float64)\n\
    \    for _, grade := range grades {\n        gradesMap[strings.ToUpper(grade.String())]=\
    \ grade\n    }\n    \n    gradesKeys:= make([]string, len(gradesMap))\n    for\
    \ i, key := range gradesMap {\n        gradesKeys[i]= key\n    }\n    gradesValues:=\
    \ make([]float64, len(gradesMap))\n    for i, value := range gradesMap {\n   \
    \     gradesValues[i]= value\n    }\n    \n    sortedGradeValues:= make([]float64,\
    \ len(gradesValues))\n    sortedGradeKeys:= make([]string, len(gradesValues))\n\
    \    for i, grade := range gradesValues {\n        sortedGradeValues[i]= grade\n\
    \        sortedGradeKeys[i]= gradesKeys[i]\n    }\n    sort.Sort(sort.Reverse(sort.Float64Slice(sortedGradeValues)))\n\
    \    \n    sortedGradeKeysLength:= len(sortedGradeKeys)\n    \n    letterGrades:=\
    \ make([]string, len(sortedGradeValues))\n    \n    for i := 0; i < len(sortedGradeValues);\
    \ i++ {\n        letterGrades[i]= strings.ToUpper(sortedGradeKeys[i])\n    }\n\
    \    \n    letterGradesLength:=len(letterGrades)\n    \n    return letterGrades\n\
    }\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpghmiiah__test.go:35:19: undefined: strings

    /tmp/tmpghmiiah__test.go:35:41: grade.String undefined (type float64 has no field
    or method String)

    /tmp/tmpghmiiah__test.go:40:20: invalid argument: index i (variable of type string)
    must be integer

    /tmp/tmpghmiiah__test.go:40:24: cannot use key (variable of type float64) as type
    string in assignment

    /tmp/tmpghmiiah__test.go:44:22: invalid argument: index i (variable of type string)
    must be integer

    /tmp/tmpghmiiah__test.go:53:5: undefined: sort

    /tmp/tmpghmiiah__test.go:55:5: sortedGradeKeysLength declared but not used

    /tmp/tmpghmiiah__test.go:60:26: undefined: strings

    /tmp/tmpghmiiah__test.go:63:5: letterGradesLength declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075623
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    //your code here\n    n := len(grades)\n    if n\
    \ < 2 {\n        return []string{}\n    }\n    if n%2 != 0 {\n        return []string{}\n\
    \    }\n    grades := make([]float64, n/2)\n    for i := 0; i < n; i = i+2 {\n\
    \        grades[i] = grades[i] + grades[i+1]\n    }\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    return []string{\n        \"A+\"\
    , \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\",\
    \ \"D-\",\n        \"E\"\n    }[grades[len(grades)-1]]\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp0v1sqabd_test.go:47:12: missing '','' before newline in composite literal

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075622
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    // TODO: Write the algorithm here\n    // Hint: you\
    \ won't be able to do it by hand, just copy paste the code\n\n    var output []string\n\
    \    if len(grades) <= 0 {\n        output = make([]string, 0, 5)\n        return\
    \ output\n    }\n\n    // find the smallest number\n    var smallest_grade float64\n\
    \    for _, grade := range grades {\n        if grade > 0 {\n            smallest_grade\
    \ = grade\n            break\n        }\n    }\n\n    // calculate the amount\
    \ of letters you need based on the smallest number\n    var letters int\n    for\
    \ _, grade := range grades {\n        if grade == smallest_grade {\n         \
    \   letters++\n        } else if grade < smallest_grade {\n            letters++\n\
    \        } else {\n            letters++\n        }\n    }\n    // make a new\
    \ array of the right size\n    letter_grades := make([]string, letters)\n\n  \
    \  for _, grade := range grades {\n        // calculate the number of times you\
    \ have to print each letter\n        count := 0\n        if grade < smallest_grade\
    \ {\n            count = letters - 1\n        } else {\n            count = letters\
    \ - 2\n        }\n        // append the letter\n        letter_grades[count] =\
    \ fmt.Sprintf(\"%+.2f\", grade)\n    }\n\n    return letter_grades\n}\n\nfunc\
    \ TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\npanic: runtime error: index\
    \ out of range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\
    \ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513720, 0xc000014360})\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513720,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.numerical_letter_grade({0xc0000f5dd8, 0x1,\
    \ 0x0?})\n\t/tmp/tmphjpscd2b_test.go:72 +0x1b5\ncommand-line-arguments_test.TestNumerical_Letter_Grade(0x0?)\n\
    \t/tmp/tmphjpscd2b_test.go:86 +0x117\ntesting.tRunner(0xc0001a01a0, 0x529060)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075624
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    return []string{}\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmp_srwq95q_test.go:52: expected '[A+ B C- C A-]', got '[]'\n\
    \    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n        tmp_srwq95q_test.go:52:\
    \ expected '[D+]', got '[]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2\
    \ (0.00s)\n        tmp_srwq95q_test.go:52: expected '[D-]', got '[]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmp_srwq95q_test.go:52:\
    \ expected '[E]', got '[]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmp_srwq95q_test.go:52: expected '[D D- C- B B+]', got '[]'\n\
    \    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmp_srwq95q_test.go:52:\
    \ expected '[E D-]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075288
- exit_code: 2
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    grade_list := []string{}\n    if len(grades) == 0\
    \ {\n        grade_list[0] = \"E\"\n        return grade_list\n    }\n    sum\
    \ := 0.0\n    for _, grade := range grades {\n        sum += grade\n    }\n  \
    \  if sum < 4 {\n        grade_list[0] = \"E\"\n        return grade_list\n  \
    \  }\n    average := sum / (len(grades) - 1)\n    if average >= 3.0 {\n      \
    \  grade_list[0] = \"D+\"\n    } else if average >= 2.0 {\n        grade_list[0]\
    \ = \"D-\"\n    } else if average >= 1.0 {\n        grade_list[0] = \"D\"\n  \
    \  } else if average >= 0.7 {\n        grade_list[0] = \"C\"\n    } else if average\
    \ >= 0.3 {\n        grade_list[0] = \"C-\"\n    } else if average >= 0.0 {\n \
    \       grade_list[0] = \"B\"\n    } else if average >= -0.3 {\n        grade_list[0]\
    \ = \"B-\"\n    } else if average >= -0.7 {\n        grade_list[0] = \"B+\"\n\
    \    } else if average >= -1.0 {\n        grade_list[0] = \"A\"\n    } else if\
    \ average >= -1.7 {\n        grade_list[0] = \"A+\"\n    } else if average >=\
    \ -2.0 {\n        grade_list[0] = \"A-\"\n    } else {\n        grade_list[0]\
    \ = \"A+\"\n    }\n    return grade_list\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpndq1vsqw_test.go:44:16: invalid operation: sum / (len(grades) - 1) (mismatched
    types float64 and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075624
- exit_code: 2
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var letter []string\n\n    // You have to write the\
    \ algorithm for calculating the letter grade here\n    // The algorithm should\
    \ start by looping through all the grades and checking\n    // each one\n    //\
    \ If the grade is <0, set it to 0 and stop the algorithm (this will stop\n   \
    \ // the loop).\n    // If the grade is >=0 then calculate the letter grade and\
    \ append it\n    // to the letter slice.\n    // If the grade is >0 then keep\
    \ looping\n    // If you get to the end of the loop and letter has no elements\
    \ append \"E\"\n\n    for _, grade := range grades {\n        if grade < 0 {\n\
    \            grade = 0\n            break\n        }\n        if grade >= 0 {\n\
    \            letter := getLetterGrade(grade)\n            letter = append(letter,\
    \ letter)\n        }\n    }\n    if len(letter) == 0 {\n        letter = append(letter,\
    \ \"E\")\n    }\n    return letter\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T)\
    \ {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected:\
    \ []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"\
    D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"}\
    \ },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpamuh0__e_test.go:49:23: undefined: getLetterGrade

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075624
- exit_code: 2
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    letter := []string{}\n    // Your code goes here\n\
    \    letter := []string{\n        \"A+\",\n        \"B\",\n        \"C-\",\n \
    \       \"C\",\n        \"A-\",\n    }\n    return letter\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk2rfevto_test.go:33:12: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075624
- exit_code: 2
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    grades := grades[:len(grades)-1]\n    var letter\
    \ []string\n    for _, grade := range grades {\n        if grade > 0 && grade\
    \ <= 3.0 {\n            letter = append(letter, \"A+\")\n        } else if grade\
    \ > 3.0 && grade <= 4.0 {\n            letter = append(letter, \"A\")\n      \
    \  } else if grade > 4.0 && grade <= 5.0 {\n            letter = append(letter,\
    \ \"A-\")\n        } else if grade > 5.0 && grade <= 6.0 {\n            letter\
    \ = append(letter, \"B+\")\n        } else if grade > 6.0 && grade <= 7.0 {\n\
    \            letter = append(letter, \"B\")\n        } else if grade > 7.0 &&\
    \ grade <= 8.0 {\n            letter = append(letter, \"B-\")\n        } else\
    \ if grade > 8.0 && grade <= 9.0 {\n            letter = append(letter, \"C+\"\
    )\n        } else if grade > 9.0 && grade <= 10.0 {\n            letter = append(letter,\
    \ \"C\")\n        } else if grade > 10.0 && grade <= 11.0 {\n            letter\
    \ = append(letter, \"C-\")\n        } else if grade > 11.0 && grade <= 12.0 {\n\
    \            letter = append(letter, \"D+\")\n        } else if grade > 12.0 &&\
    \ grade <= 13.0 {\n            letter = append(letter, \"D\")\n        } else\
    \ if grade > 13.0 && grade <= 14.0 {\n            letter = append(letter, \"D-\"\
    )\n        } else if grade > 14.0 && grade <= 15.0 {\n            letter = append(letter,\
    \ \"E\")\n        } else {\n            letter = append(letter, \"D\")\n     \
    \   }\n    }\n    return letter\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T)\
    \ {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected:\
    \ []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"\
    D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"}\
    \ },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqgwodl7n_test.go:31:12: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075624
- exit_code: 2
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    if len(grades) < 5 {\n        return nil\n    }\n\
    \    grades := grades[:len(grades)-4]\n    gradesCount := 0\n    for _, grade\
    \ := range grades {\n        if grade >= 3.0 {\n            gradesCount += 3\n\
    \        }\n        if grade >= 2.0 {\n            gradesCount += 2\n        }\n\
    \        if grade >= 1.0 {\n            gradesCount += 1\n        }\n    }\n\n\
    \    result := []string{}\n    for i := 0; i < gradesCount; i++ {\n        if\
    \ grades[i] == 1.0 {\n            result := append(result, \"D\")\n        } else\
    \ if grades[i] == 0.7 {\n            result := append(result, \"C\")\n       \
    \ } else if grades[i] == 0.6 {\n            result := append(result, \"B\")\n\
    \        } else if grades[i] == 0.5 {\n            result := append(result, \"\
    A-\")\n        } else if grades[i] == 0.4 && grades[i+1] == 0.4 {\n          \
    \  result := append(result, \"A+\")\n        } else if grades[i] == 0.4 && grades[i+1]\
    \ == 0.5 {\n            result := append(result, \"A-\")\n        } else if grades[i]\
    \ == 0.4 && grades[i+1] == 0.6 {\n            result := append(result, \"A+\"\
    )\n        } else if grades[i] == 0.4 && grades[i+1] == 0.7 {\n            result\
    \ := append(result, \"A\")\n        } else if grades[i] == 0.4 && grades[i+1]\
    \ == 0.8 {\n            result := append(result, \"A\")\n        } else if grades[i]\
    \ == 0.4 && grades[i+1] == 0.9 {\n            result := append(result, \"A\")\n\
    \        } else if grades[i] == 0.4 && grades[i+1] == 1.0 {\n            result\
    \ := append(result, \"A\")\n        } else {\n            result := append(result,\
    \ fmt.Sprintf(\"%.1f\", grades[i]))\n        }\n    }\n\n    return result\n}\n\
    \nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk7inaffk_test.go:34:12: no new variables on left side of :=

    /tmp/tmpk7inaffk_test.go:51:13: result declared but not used

    /tmp/tmpk7inaffk_test.go:53:13: result declared but not used

    /tmp/tmpk7inaffk_test.go:55:13: result declared but not used

    /tmp/tmpk7inaffk_test.go:57:13: result declared but not used

    /tmp/tmpk7inaffk_test.go:59:13: result declared but not used

    /tmp/tmpk7inaffk_test.go:61:13: result declared but not used

    /tmp/tmpk7inaffk_test.go:63:13: result declared but not used

    /tmp/tmpk7inaffk_test.go:65:13: result declared but not used

    /tmp/tmpk7inaffk_test.go:67:13: result declared but not used

    /tmp/tmpk7inaffk_test.go:67:13: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075624
- exit_code: 2
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    grades = make([]float64, len(grades))\n    grades[0]\
    \ = 4.0\n    grades[1] = math.Max(grades[0], 3.7)\n    grades[2] = math.Max(grades[1],\
    \ 3.3)\n    grades[3] = math.Max(grades[2], 3.0)\n    grades[4] = math.Max(grades[3],\
    \ 2.7)\n    grades[5] = math.Max(grades[4], 2.3)\n    grades[6] = math.Max(grades[5],\
    \ 2.0)\n    grades[7] = math.Max(grades[6], 1.7)\n    grades[8] = math.Max(grades[7],\
    \ 1.3)\n    grades[9] = math.Max(grades[8], 1.0)\n    grades[10] = math.Max(grades[9],\
    \ 0.7)\n    grades[11] = math.Max(grades[10], 0.0)\n    grades[12] = 0.0\n\n \
    \   var letters []string\n    for i := 1; i <= 12; i++ {\n        if grades[i-1]\
    \ <= 0.0 {\n            letters = append(letters, \"\")\n        } else {\n  \
    \          letter := \"\"\n            if grades[i-1] > grades[i] {\n        \
    \        letter = grades[i-1] - grades[i]\n                letter = letter*grades[i-1]\n\
    \            } else {\n                letter = grades[i] - grades[i-1]\n    \
    \            letter = letter*grades[i]\n            }\n            letters = append(letters,\
    \ fmt.Sprintf(\"%+.1f\", letter))\n        }\n    }\n    return letters\n}\n\n\
    func TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3tug8e6g_test.go:33:17: undefined: math

    /tmp/tmp3tug8e6g_test.go:34:17: undefined: math

    /tmp/tmp3tug8e6g_test.go:35:17: undefined: math

    /tmp/tmp3tug8e6g_test.go:36:17: undefined: math

    /tmp/tmp3tug8e6g_test.go:37:17: undefined: math

    /tmp/tmp3tug8e6g_test.go:38:17: undefined: math

    /tmp/tmp3tug8e6g_test.go:39:17: undefined: math

    /tmp/tmp3tug8e6g_test.go:40:17: undefined: math

    /tmp/tmp3tug8e6g_test.go:41:17: undefined: math

    /tmp/tmp3tug8e6g_test.go:42:18: undefined: math

    /tmp/tmp3tug8e6g_test.go:42:18: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075624
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var grade_array []string\n    for _, grade := range\
    \ grades {\n        letter_grade := \"-\"\n        if grade >= 3.0 {\n       \
    \     if grade >= 4.0 {\n                letter_grade = \"A+\"\n            }\
    \ else {\n                if grade >= 2.7 {\n                    letter_grade\
    \ = \"B\"\n                } else {\n                    if grade >= 2.3 {\n \
    \                       letter_grade = \"B-\"\n                    } else {\n\
    \                        if grade >= 2.0 {\n                            letter_grade\
    \ = \"C+\"\n                        } else {\n                            if grade\
    \ >= 1.7 {\n                                letter_grade = \"C\"\n           \
    \                 } else {\n                                if grade >= 1.3 {\n\
    \                                    letter_grade = \"C-\"\n                 \
    \               } else {\n                                    if grade >= 1.0\
    \ {\n                                        letter_grade = \"D+\"\n         \
    \                           } else {\n                                       \
    \ if grade >= 0.7 {\n                                            letter_grade\
    \ = \"D\"\n                                        } else {\n                \
    \                            if grade >= 0.0 {\n                             \
    \                   letter_grade = \"D-\"\n                                  \
    \          } else {\n                                                if grade\
    \ > 0.0 {\n                                                    letter_grade =\
    \ \"E\"\n                                                }\n                 \
    \                           }\n                                        }\n   \
    \                                 }\n                                }\n     \
    \                       }\n                        }\n                    }\n\
    \                }\n            }\n        }\n        grade_array = append(grade_array,\
    \ letter_grade)\n    }\n    return grade_array\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpbxr6eghn_test.go:98: expected '[A+ B C- C A-]', got '[A+\
    \ B - - B]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n  \
    \      tmpbxr6eghn_test.go:98: expected '[D+]', got '[-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2\
    \ (0.00s)\n        tmpbxr6eghn_test.go:98: expected '[D-]', got '[-]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmpbxr6eghn_test.go:98:\
    \ expected '[E]', got '[-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpbxr6eghn_test.go:98: expected '[D D- C- B B+]', got '[-\
    \ - - - B]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n  \
    \      tmpbxr6eghn_test.go:98: expected '[E D-]', got '[- -]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075624
- exit_code: 2
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var result []string\n    result := make([]string,\
    \ len(grades))\n    index := 0\n    for _, grade := range grades {\n        if\
    \ grade > 3.0 {\n            index = index + 1\n            result[index] = fmt.Sprintf(\"\
    %s-%\", grade)\n        } else {\n            index += 1\n            result[index]\
    \ = fmt.Sprintf(\"%s+\", grade)\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2myehkt5_test.go:32:12: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075624
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    grades := grades[:len(grades)-1]\n    letter := make([]string,\
    \ len(grades))\n    sum := 0.0\n    for i := 0; i < len(grades)-1; i++ {\n   \
    \     sum += grades[i]\n    }\n    for i := 0; i < len(grades)-1; i++ {\n    \
    \    if sum >= 4.0 {\n            letter[i] = \"A+\"\n            sum += -4.0\n\
    \        } else if sum >= 3.7 {\n            letter[i] = \"A\"\n            sum\
    \ += -3.7\n        } else if sum >= 3.3 {\n            letter[i] = \"A-\"\n  \
    \          sum += -3.3\n        } else if sum >= 3.0 {\n            letter[i]\
    \ = \"B+\"\n            sum += -3.0\n        } else if sum >= 2.7 {\n        \
    \    letter[i] = \"B\"\n            sum += -2.7\n        } else if sum >= 2.3\
    \ {\n            letter[i] = \"B-\"\n            sum += -2.3\n        } else if\
    \ sum >= 2.0 {\n            letter[i] = \"C+\"\n            sum += -2.0\n    \
    \    } else if sum >= 1.7 {\n            letter[i] = \"C\"\n            sum +=\
    \ -1.7\n        } else if sum >= 1.3 {\n            letter[i] = \"C-\"\n     \
    \       sum += -1.3\n        } else if sum >= 1.0 {\n            letter[i] = \"\
    D+\"\n            sum += -1.0\n        } else if sum >= 0.7 {\n            letter[i]\
    \ = \"D\"\n            sum += -0.7\n        } else if sum == 0.0 {\n         \
    \   letter[i] = \"D-\"\n        } else {\n            letter[i] = \"E\"\n    \
    \    }\n    }\n    return letter\n}\n</code>\n<|/ a tags=go,algorithm,arrays |>\n\
    <| a dscore=0 tags=go,algorithm,arrays |>\nI've tried to use different types of\
    \ solutions but the results are not satisfying for the case below.\n<code>\nfunc\
    \ TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6ppkxkzc_test.go:79:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075623
- exit_code: 2
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var result = make([]string, 0, len(grades))\n   \
    \ for _, grade := range grades {\n        result := []string{\"\"}\n        result\
    \ := append(result, letter_grade(grade)[0])\n        for _, letter := range letter_grade(grade)\
    \ {\n            if letter != \"\" {\n                result = append(result,\
    \ letter)\n            }\n        }\n        if len(result) == 0 {\n         \
    \   result = append(result, letter_grade(grade)[0])\n        }\n        result\
    \ = append(result, letter_grade(grade)[1])\n        if result[len(result)-1] ==\
    \ \"\" {\n            result = result[:len(result)-1]\n        }\n        result\
    \ = append(result, letter_grade(grade)[2])\n        if len(result) == 0 {\n  \
    \          result = append(result, letter_grade(grade)[0])\n        }\n      \
    \  if result[len(result)-1] == \"\" {\n            result = result[:len(result)-1]\n\
    \        }\n        result = append(result, letter_grade(grade)[3])\n    }\n \
    \   return result\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate\
    \ := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0,\
    \ 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n\
    \     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n   \
    \  { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     {\
    \ actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual:\
    \ candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}),\
    \ expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw20dns2e_test.go:34:16: no new variables on left side of :=

    /tmp/tmpw20dns2e_test.go:34:34: undefined: letter_grade

    /tmp/tmpw20dns2e_test.go:35:32: undefined: letter_grade

    /tmp/tmpw20dns2e_test.go:41:37: undefined: letter_grade

    /tmp/tmpw20dns2e_test.go:43:33: undefined: letter_grade

    /tmp/tmpw20dns2e_test.go:47:33: undefined: letter_grade

    /tmp/tmpw20dns2e_test.go:49:37: undefined: letter_grade

    /tmp/tmpw20dns2e_test.go:54:33: undefined: letter_grade

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075624
- exit_code: 2
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    // Solution goes here\n    result := make([]string,\
    \ 0, len(grades)-1)\n    for i, x := range grades {\n        if x == 0 {\n   \
    \         continue // Do not need to check this case\n        }\n        if x\
    \ > 0 {\n            result += []string{\n                \"A+\", \"A\", \n  \
    \              \"A-\", \"B+\", \"B\", \n                \"B-\", \"C+\", \"C\"\
    , \n                \"C-\", \"D+\", \"D\", \n                \"D-\", \"E\", \"\
    F\",\n            }[x-0.1]\n        } else if x < 0 {\n            result += []string{\n\
    \                \"A+\", \"A\", \n                \"A-\", \"B+\", \"B\", \n  \
    \              \"B-\", \"C+\", \"C\", \n                \"C-\", \"D+\", \"D\"\
    , \n                \"D-\", \"E\", \"F\",\n            }[0.1*(-1-x)]\n       \
    \ }\n    }\n    return result\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T)\
    \ {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected:\
    \ []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"\
    D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"}\
    \ },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6sd0fbmv_test.go:33:9:\
    \ i declared but not used\n/tmp/tmp6sd0fbmv_test.go:38:13: invalid operation:\
    \ result += []string{\u2026}[x - 0.1] (mismatched types []string and string)\n\
    /tmp/tmp6sd0fbmv_test.go:44:15: invalid argument: index x - 0.1 (value of type\
    \ float64) must be integer\n/tmp/tmp6sd0fbmv_test.go:46:13: invalid operation:\
    \ result += []string{\u2026}[0.1 * (-1 - x)] (mismatched types []string and string)\n\
    /tmp/tmp6sd0fbmv_test.go:52:15: invalid argument: index 0.1 * (-1 - x) (value\
    \ of type float64) must be integer\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075624
- exit_code: 2
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    letter := make([]string, len(grades))\n    for _,\
    \ grade := range grades {\n        letter[gradeIndexOf(grade)] = \"A+\"\n    \
    \    letter[gradeIndexOf(grade - 1)] = \"A-\"\n        letter[gradeIndexOf(grade\
    \ - 2)] = \"B+\"\n        letter[gradeIndexOf(grade - 3)] = \"B\"\n        letter[gradeIndexOf(grade\
    \ - 4)] = \"B-\"\n        letter[gradeIndexOf(grade - 5)] = \"C+\"\n        letter[gradeIndexOf(grade\
    \ - 6)] = \"C\"\n        letter[gradeIndexOf(grade - 7)] = \"C-\"\n        letter[gradeIndexOf(grade\
    \ - 8)] = \"D+\"\n        letter[gradeIndexOf(grade - 9)] = \"D\"\n        letter[gradeIndexOf(grade\
    \ - 10)] = \"D-\"\n        letter[gradeIndexOf(grade - 11)] = \"E\"\n    }\n \
    \   return letter\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate\
    \ := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0,\
    \ 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n\
    \     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n   \
    \  { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     {\
    \ actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual:\
    \ candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}),\
    \ expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi2s9s59c_test.go:33:16: undefined: gradeIndexOf

    /tmp/tmpi2s9s59c_test.go:34:16: undefined: gradeIndexOf

    /tmp/tmpi2s9s59c_test.go:35:16: undefined: gradeIndexOf

    /tmp/tmpi2s9s59c_test.go:36:16: undefined: gradeIndexOf

    /tmp/tmpi2s9s59c_test.go:37:16: undefined: gradeIndexOf

    /tmp/tmpi2s9s59c_test.go:38:16: undefined: gradeIndexOf

    /tmp/tmpi2s9s59c_test.go:39:16: undefined: gradeIndexOf

    /tmp/tmpi2s9s59c_test.go:40:16: undefined: gradeIndexOf

    /tmp/tmpi2s9s59c_test.go:41:16: undefined: gradeIndexOf

    /tmp/tmpi2s9s59c_test.go:42:16: undefined: gradeIndexOf

    /tmp/tmpi2s9s59c_test.go:42:16: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075624
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    fmt.Println(grades)\n    var result []string\n  \
    \  for i := 0; i < len(grades); i++ {\n        if grades[i] < 3.7 { \n       \
    \     result[i] = \"A+\"\n        } else if grades[i] < 3.3 { \n            result[i]\
    \ = \"A\"\n        } else if grades[i] < 3 { \n            result[i] = \"A-\"\n\
    \        } else if grades[i] < 2.7 { \n            result[i] = \"B+\"\n      \
    \  } else if grades[i] < 2.3 { \n            result[i] = \"B\"\n        } else\
    \ if grades[i] < 2 { \n            result[i] = \"B-\"\n        } else if grades[i]\
    \ < 1.7 { \n            result[i] = \"C+\"\n        } else if grades[i] < 1.3\
    \ { \n            result[i] = \"C\"\n        } else if grades[i] < 1 { \n    \
    \        result[i] = \"C-\"\n        } else if grades[i] < 0.7 { \n          \
    \  result[i] = \"D+\"\n        } else if grades[i] < 0 { \n            result[i]\
    \ = \"D\"\n        } else if grades[i] == 0 {\n            result[i] = \"D-\"\n\
    \        } else {\n            result[i] = \"E\"\n        }\n    }\n    return\
    \ result \n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate :=\
    \ numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0,\
    \ 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n\
    \     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n   \
    \  { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     {\
    \ actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual:\
    \ candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}),\
    \ expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "[4 3 1.7 2 3.5]\n--- FAIL: TestNumerical_Letter_Grade (0.00s)\npanic: runtime\
    \ error: index out of range [0] with length 0 [recovered]\n\tpanic: runtime error:\
    \ index out of range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513880,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513880, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.numerical_letter_grade({0xc000024390?, 0x5,\
    \ 0x4b3393?})\n\t/tmp/tmpdjplhjzs_test.go:59 +0x169\ncommand-line-arguments_test.TestNumerical_Letter_Grade(0x0?)\n\
    \t/tmp/tmpdjplhjzs_test.go:72 +0x98\ntesting.tRunner(0xc0001924e0, 0x5291b8)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075625
- exit_code: 2
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    // Write your solution here\n    var grade float64\n\
    \    var letter_grade string\n\n    grades_set := make([]float64, len(grades))\n\
    \n    for _, grade := range grades {\n        grades_set[grade_index] = grade\n\
    \        grade_index++\n    }\n\n    grade_index = 0\n\n    for _, grade := range\
    \ grades_set {\n        if grade >= 3.0 {\n            if grade >= 2.0 {\n   \
    \             letter_grade = \"B-\"\n            } else {\n                letter_grade\
    \ = \"B-\"\n            }\n        } else if grade >= 2.7 {\n            letter_grade\
    \ = \"B-\"\n        } else if grade >= 2.3 {\n            letter_grade = \"B-\"\
    \n        } else if grade >= 2.0 {\n            letter_grade = \"B-\"\n      \
    \  } else if grade >= 1.7 {\n            letter_grade = \"B-\"\n        } else\
    \ if grade >= 1.3 {\n            letter_grade = \"B-\"\n        } else if grade\
    \ >= 1.0 {\n            letter_grade = \"B-\"\n        } else if grade >= 0.7\
    \ {\n            letter_grade = \"B-\"\n        } else if grade >= 0.3 {\n   \
    \         letter_grade = \"B-\"\n        } else if grade >= 0.0 {\n          \
    \  letter_grade = \"B-\"\n        } else {\n            letter_grade = \"B-\"\n\
    \        }\n\n        grade_index++\n    }\n\n    return letter_grade\n}\n\nfunc\
    \ TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmps43ley7u_test.go:32:9: grade declared but not used

    /tmp/tmps43ley7u_test.go:38:20: undefined: grade_index

    /tmp/tmps43ley7u_test.go:39:9: undefined: grade_index

    /tmp/tmps43ley7u_test.go:42:5: undefined: grade_index

    /tmp/tmps43ley7u_test.go:73:9: undefined: grade_index

    /tmp/tmps43ley7u_test.go:76:12: cannot use letter_grade (variable of type string)
    as type []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075625
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    \n    // Initialize the answer to the student's letter\
    \ grade.\n    var answers []string\n\n    // Iterate through the student's grades.\n\
    \    for _, grade := range grades {\n        \n        // If the student doesn't\
    \ have a grade yet, add \"E\" to the student's answers.\n        if answers ==\
    \ nil { \n            answers = []string{\"E\"}\n        }\n\n        // If the\
    \ student does have a grade already, check if the student's grade is less than\
    \ 3.7.\n        // If so, add \"A+\" to the student's answers.\n        // If\
    \ not, check if it is greater than 3.7. If so, add \"A\" to the student's answers.\n\
    \        // If not, check if it is greater than 3.3. If so, add \"A- \" to the\
    \ student's answers.\n        // If not, check if it is greater than 3.0. If so,\
    \ add \"B+\" to the student's answers.\n        // If not, check if it is greater\
    \ than 2.7. If so, add \"B\" to the student's answers.\n        // If not, check\
    \ if it is greater than 2.3. If so, add \"B-\" to the student's answers.\n   \
    \     // If not, check if it is greater than 2.0. If so, add \"C+\" to the student's\
    \ answers.\n        // If not, check if it is greater than 1.7. If so, add \"\
    C\" to the student's answers.\n        // If not, check if it is greater than\
    \ 1.3. If so, add \"C-\" to the student's answers.\n        // If not, check if\
    \ it is greater than 1.0. If so, add \"D+\" to the student's answers.\n      \
    \  // If not, check if it is greater than 0.7. If so, add \"D\" to the student's\
    \ answers.\n        // If not, check if it is greater than 0.0. If so, add \"\
    D-\" to the student's answers.\n        if grade < 3.7 { \n            if answers\
    \ == nil { \n                answers = []string{\"E\"}\n            }\n      \
    \      answers = append(answers, \"A+\")\n        } else if grade > 3.7 { \n \
    \           if answers == nil { \n                answers = []string{\"E\"}\n\
    \            }\n            answers = append(answers, \"A\")\n        } else if\
    \ grade > 3.3 { \n            if answers == nil { \n                answers =\
    \ []string{\"E\"}\n            }\n            answers = append(answers, \"A-\"\
    )\n        } else if grade > 3.0 { \n            if answers == nil { \n      \
    \          answers = []string{\"E\"}\n            }\n            answers = append(answers,\
    \ \"B+\")\n        } else if grade > 2.7 { \n            if answers == nil { \n\
    \                answers = []string{\"E\"}\n            }\n            answers\
    \ = append(answers, \"B\")\n        } else if grade > 2.3 { \n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpsrh4z8a0_test.go:83:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075624
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    grades = append([]float64{}, grades...)\n    sort.Float64s(grades)\n\
    \    grades = append([]float64{0.0}, grades...)\n    sort.Float64s(grades)\n \
    \   grades = append([]float64{}, grades...)\n    sort.Float64s(grades)\n    grades\
    \ = append([]float64{}, grades...)\n    sort.Float64s(grades)\n    grades = append([]float64{},\
    \ grades...)\n    sort.Float64s(grades)\n    grades = append([]float64{}, grades...)\n\
    \    sort.Float64s(grades)\n    grades = append([]float64{}, grades...)\n    sort.Float64s(grades)\n\
    \    grades = append([]float64{}, grades...)\n    sort.Float64s(grades)\n    grades\
    \ = append([]float64{}, grades...)\n    sort.Float64s(grades)\n    grades = append([]float64{},\
    \ grades...)\n    sort.Float64s(grades)\n    grades = append([]float64{}, grades...)\n\
    \    sort.Float64s(grades)\n    grades = append([]float64{}, grades...)\n    sort.Float64s(grades)\n\
    \    grades = append([]float64{}, grades...)\n    sort.Float64s(grades)\n    grades\
    \ = append([]float64{}, grades...)\n    sort.Float64s(grades)\n    grades = append([]float64{},\
    \ grades...)\n    sort.Float64s(grades)\n    grades = append([]float64{}, grades...)\n\
    \    sort.Float64s(grades)\n    grades = append([]float64{}, grades...)\n    sort.Float64s(grades)\n\
    \    grades = append([]float64{}, grades...)\n    sort.Float64s(grades)\n    grades\
    \ = append([]float64{}, grades...)\n    sort.Float64s(grades)\n    grades = append([]float64{},\
    \ grades...)\n    sort.Float64s(grades)\n    grades = append([]float64{}, grades...)\n\
    \    sort.Float64s(grades)\n    grades = append([]float64{}, grades...)\n    sort.Float64s(grades)\n\
    \    grades = append([]float64{}, grades...)\n    sort.Float64s(grades)\n    grades\
    \ = append([]float64{}, grades...)\n    sort.Float64s(grades)\n    grades = append([]float64{},\
    \ grades...)\n    sort.Float64s(grades)\n    grades = append([]float64{}, grades...)\n\
    func TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpawe17d9q_test.go:82:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075624
- exit_code: 2
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    gradeLength := len(grades)\n    if gradeLength <\
    \ 3 {\n        return nil\n    }\n    result := []string{}\n    for i := gradeLength\
    \ - 1; i >= 0; i-- {\n        if grades[i] > grades[i+1] {\n            result[len(result)]\
    \ = fmt.Sprintf(\"%d+\", grades[i])\n        } else {\n            result[len(result)]\
    \ = fmt.Sprintf(\"%d\", grades[i])\n        }\n    }\n    return result\n}\n\n\
    func TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test

    /tmp/tmp99go6s7o_test.go:38:35: fmt.Sprintf format %d has arg grades[i] of wrong
    type float64

    /tmp/tmp99go6s7o_test.go:40:35: fmt.Sprintf format %d has arg grades[i] of wrong
    type float64

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075625
- exit_code: 2
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    if len(grades)%2 != 0 {\n        return nil\n   \
    \ }\n    grades_copy := make([]float64, len(grades)/2)\n    i := 0\n    for _,\
    \ grade := range grades {\n        grades_copy[i*2] = grade\n        grades_copy[i*2+1]\
    \ = grade\n        i += 1\n    }\n    grades_copy := grades_copy[i:]\n    grades_copy\
    \ = append(grades_copy, grades_copy[0])\n    return grades_testGrade(grades_copy)\n\
    }\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpld_i40t5_test.go:41:17: no new variables on left side of :=

    /tmp/tmpld_i40t5_test.go:43:12: undefined: grades_testGrade

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075625
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    // Declare variables\n    letterGrades := make([]string,\
    \ len(grades))\n    i := 0\n    \n    for ; i < len(grades); i++ {\n        if\
    \ (grades[i] == 0.0) {\n            break\n        }\n        if ((grades[i] >\
    \ 3.0 && grades[i] <= 3.7) && grades[i] != 4.0) {\n            letterGrades[i]\
    \ = \"A+\"\n        } else if ((grades[i] > 3.0 && grades[i] <= 3.3) && grades[i]\
    \ != 3.7) {\n            letterGrades[i] = \"A\"\n        } else if ((grades[i]\
    \ > 3.0 && grades[i] <= 3.0) && grades[i] != 3.3) {\n            letterGrades[i]\
    \ = \"A-\"\n        } else if ((grades[i] > 2.7) && grades[i] != 3.0) {\n    \
    \        letterGrades[i] = \"B+\"\n        } else if ((grades[i] > 2.7) && grades[i]\
    \ != 2.7) {\n            letterGrades[i] = \"B\"\n        } else if ((grades[i]\
    \ > 2.7) && grades[i] != 2.3) {\n            letterGrades[i] = \"B-\"\n      \
    \  } else if ((grades[i] > 2.0 && grades[i] <= 2.7) && grades[i] != 2.0) {\n \
    \           letterGrades[i] = \"C+\"\n        } else if ((grades[i] > 2.0 && grades[i]\
    \ <= 2.3) && grades[i] != 2.7) {\n            letterGrades[i] = \"C\"\n      \
    \  } else if ((grades[i] > 2.0 && grades[i] <= 2.0) && grades[i] != 2.3) {\n \
    \           letterGrades[i] = \"C-\"\n        } else if ((grades[i] > 1.7) &&\
    \ grades[i] != 2.0) {\n            letterGrades[i] = \"D+\"\n        } else if\
    \ ((grades[i] > 1.7) && grades[i] != 1.7) {\n            letterGrades[i] = \"\
    D\"\n        } else if ((grades[i] > 1.7) && grades[i] != 1.3) {\n           \
    \ letterGrades[i] = \"D-\"\n        } else if ((grades[i] > 1.0) && grades[i]\
    \ != 1.7) {\n            letterGrades[i] = \"E\"\n        }\n    }\n    return\
    \ letterGrades\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate\
    \ := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0,\
    \ 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n\
    \     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n   \
    \  { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     {\
    \ actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual:\
    \ candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}),\
    \ expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmp8mtd649c_test.go:88: expected '[A+ B C- C A-]', got '[B+\
    \ B  D A+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n  \
    \      tmp8mtd649c_test.go:88: expected '[D+]', got '[E]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2\
    \ (0.00s)\n        tmp8mtd649c_test.go:88: expected '[D-]', got '[]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmp8mtd649c_test.go:88:\
    \ expected '[E]', got '[]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmp8mtd649c_test.go:88: expected '[D D- C- B B+]', got '[ \
    \ E B+ A+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n  \
    \      tmp8mtd649c_test.go:88: expected '[E D-]', got '[ ]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075625
- exit_code: 2
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n\n    return letterGrades(grades)\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0o_f_vvv_test.go:42:12: undefined: letterGrades

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075625
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    total := 0.0\n    grade_list := []string{}\n    for\
    \ _, grade := range grades {\n        total += grade\n        if total < 0 {\n\
    \            total = total + 5.0\n        }\n    }\n    if total > 4.0 {\n   \
    \     total = total - 5.0\n    }\n    for _, grade := range grades {\n       \
    \ if grade >= total {\n            grade_list = append(grade_list, \"B-\")\n \
    \       } else {\n            grade_list = append(grade_list, \"B-+\")\n     \
    \   }\n    }\n    for _, grade := range grades {\n        if grade >= total {\n\
    \            grade_list = append(grade_list, \"C+\")\n        } else {\n     \
    \       grade_list = append(grade_list, \"C\")\n        }\n    }\n    for _, grade\
    \ := range grades {\n        if grade >= total {\n            grade_list = append(grade_list,\
    \ \"C-\")\n        } else {\n            grade_list = append(grade_list, \"C-\"\
    )\n        }\n    }\n    for _, grade := range grades {\n        if grade >= total\
    \ {\n            grade_list = append(grade_list, \"A-\")\n        } else {\n \
    \           grade_list = append(grade_list, \"A\")\n        }\n    }\n    for\
    \ _, grade := range grades {\n        if grade >= total {\n            grade_list\
    \ = append(grade_list, \"A+\")\n        } else {\n            grade_list = append(grade_list,\
    \ \"A+\")\n        }\n    }\n    for _, grade := range grades {\n        if grade\
    \ >= total {\n            grade_list = append(grade_list, \"D+\")\n        } else\
    \ {\n            grade_list = append(grade_list, \"D\")\n        }\n    }\n  \
    \  for _, grade := range grades {\n        if grade >= total {\n            grade_list\
    \ = append(grade_list, \"D-\")\n        } else {\n            grade_list = append(grade_list,\
    \ \"D-\")\n        }\n    }\n    for _, grade := range grades {\n        if grade\
    \ >= total {\n            grade_list = append(grade_list, \"B-\")\n        } else\
    \ {\n            grade_list = append(grade_list, \"B\")\n        }\n    }\n  \
    \  return grade_list\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n \
    \ candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0,\
    \ 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n\
    \     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n   \
    \  { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     {\
    \ actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual:\
    \ candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}),\
    \ expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpipw0j5p2_test.go:119: expected '[A+ B C- C A-]', got '[B-+\
    \ B-+ B-+ B-+ B-+ C C C C C C- C- C- C- C- A A A A A A+ A+ A+ A+ A+ D D D D D\
    \ D- D- D- D- D- B B B B B]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__1\
    \ (0.00s)\n        tmpipw0j5p2_test.go:119: expected '[D+]', got '[B- C+ C- A-\
    \ A+ D+ D- B-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2 (0.00s)\n\
    \        tmpipw0j5p2_test.go:119: expected '[D-]', got '[B- C+ C- A- A+ D+ D-\
    \ B-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n       \
    \ tmpipw0j5p2_test.go:119: expected '[E]', got '[B- C+ C- A- A+ D+ D- B-]'\n \
    \   --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmpipw0j5p2_test.go:119:\
    \ expected '[D D- C- B B+]', got '[B-+ B-+ B-+ B-+ B-+ C C C C C C- C- C- C- C-\
    \ A A A A A A+ A+ A+ A+ A+ D D D D D D- D- D- D- D- B B B B B]'\n    --- FAIL:\
    \ TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmpipw0j5p2_test.go:119:\
    \ expected '[E D-]', got '[B-+ B- C C+ C- C- A A- A+ A+ D D+ D- D- B B-]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075626
- exit_code: 2
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    // your code here\n    \n    return grades\n}\n\n\
    func TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpas1u7l7n_test.go:33:12: cannot use grades (variable of type []float64)
    as type []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075625
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    \n    // Write a code that returns the letter grades\
    \ using the table above\n    // from the given list of GPAs. \n    // For example,\
    \ if the list is []float64{4.0, 3, 1.7, 2, 3.5}, \n    // the function should\
    \ return []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}.\n    \n    // Code here\n\
    \    \n    return nil\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n\
    \  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0,\
    \ 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n\
    \     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n   \
    \  { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     {\
    \ actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual:\
    \ candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}),\
    \ expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpu5pesfo6_test.go:60: expected '[A+ B C- C A-]', got '[]'\n\
    \    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n        tmpu5pesfo6_test.go:60:\
    \ expected '[D+]', got '[]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2\
    \ (0.00s)\n        tmpu5pesfo6_test.go:60: expected '[D-]', got '[]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmpu5pesfo6_test.go:60:\
    \ expected '[E]', got '[]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpu5pesfo6_test.go:60: expected '[D D- C- B B+]', got '[]'\n\
    \    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmpu5pesfo6_test.go:60:\
    \ expected '[E D-]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075626
- exit_code: 2
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    grades := append(grades, 0)\n    if len(grades) >=\
    \ 8 {\n        return []string{\"E\"}\n    }\n    if len(grades) >= 6 {\n    \
    \    return []string{\"C\", \"B-\", \"B-\", \"B-\", \"A-\", \"A-\", \"A-\"}\n\
    \    }\n    if len(grades) >= 5 {\n        return []string{\"C\", \"B-\", \"B-\"\
    , \"B-\", \"A-\"}\n    }\n    if len(grades) >= 4 {\n        return []string{\"\
    C\", \"B-\", \"B-\", \"B-\"}\n    }\n    if len(grades) >= 3 {\n        return\
    \ []string{\"C\", \"B-\", \"B-\"}\n    }\n    if len(grades) >= 2 {\n        return\
    \ []string{\"C\", \"B-\", \"B-\"}\n    }\n    if len(grades) >= 1 {\n        return\
    \ []string{\"C\", \"B-\", \"B-\"}\n    }\n    return []string{\"D-\", \"D-\",\
    \ \"D-\", \"D-\"}\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate\
    \ := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0,\
    \ 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n\
    \     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n   \
    \  { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     {\
    \ actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual:\
    \ candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}),\
    \ expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplaxhx4jr_test.go:31:12: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075625
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    letterGrades := make([]string, len(grades))\n   \
    \ averageGrade := float64(0.0) // The average grade\n    \n    // Calculate the\
    \ average of the grades\n    for i := range grades {\n        averageGrade +=\
    \ grades[i] // Add the grade to the average\n    }\n    averageGrade /= float64(len(grades))\
    \ // Divide the average by the number of grades\n    \n    // Loop through the\
    \ grades\n    for i := range grades {\n        letterGrades[i] = letterGradeLetter(grades[i])\
    \ // Find the letter grade for the given grade\n        // Calculate the average\
    \ of the letter grades based on the letter grade of \n        // the average grade\n\
    \        if letterGrades[i] == \"A\" {\n            if averageGrade >= averageGrade+4.0\
    \ {\n                letterGrades[i] = \"A+\"\n            } else if averageGrade\
    \ >= averageGrade+3.7 && averageGrade < averageGrade+3.0 {\n                letterGrades[i]\
    \ = \"A\"\n            } else if averageGrade >= averageGrade+3.3 && averageGrade\
    \ < averageGrade+2.7 {\n                letterGrades[i] = \"A-\"\n           \
    \ } else if averageGrade >= averageGrade+3.0 && averageGrade < averageGrade+2.3\
    \ {\n                letterGrades[i] = \"B+\"\n            } else if averageGrade\
    \ >= averageGrade+2.7 && averageGrade < averageGrade+2.0 {\n                letterGrades[i]\
    \ = \"B\"\n            } else if averageGrade >= averageGrade+2.3 && averageGrade\
    \ < averageGrade+1.7 {\n                letterGrades[i] = \"B-\"\n           \
    \ } else if averageGrade >= averageGrade+2.0 && averageGrade < averageGrade+1.7\
    \ {\n                letterGrades[i] = \"C+\"\n            } else if averageGrade\
    \ >= averageGrade+1.7 && averageGrade < averageGrade+1.3 {\n                letterGrades[i]\
    \ = \"C\"\n            } else if averageGrade >= averageGrade+1.3 && averageGrade\
    \ < averageGrade+1.0 {\n                letterGrades[i] = \"C-\"\n           \
    \ } else if averageGrade >= averageGrade+1.0 && averageGrade < averageGrade+0.7\
    \ {\n                letterGrades[i] = \"D+\"\n            } else if averageGrade\
    \ >= averageGrade+0.7 && averageGrade < averageGrade+0.0 {\n                letterGrades[i]\
    \ = \"D\"\n            } else if averageGrade >= averageGrade+0.0 && a\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmperjmpgd5_test.go:69:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075625
- exit_code: 2
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    // Your code here\n    g := make([]string, 0)\n \
    \   for i := 0; i < len(grades); i++ {\n        if grades[i] >= 3.7 { \n     \
    \       grades[i] = \"A+\"\n        } else if grades[i] >= 3.3 { \n          \
    \  grades[i] = \"A\"\n        } else if grades[i] >= 3 { \n            grades[i]\
    \ = \"A-\"\n        } else if grades[i] >= 2.7 { \n            grades[i] = \"\
    B+\"\n        } else if grades[i] >= 2.3 { \n            grades[i] = \"B\"\n \
    \       } else if grades[i] >= 2 { \n            grades[i] = \"B-\"\n        }\
    \ else if grades[i] >= 1.7 { \n            grades[i] = \"C+\"\n        } else\
    \ if grades[i] >= 1.3 { \n            grades[i] = \"C\"\n        } else if grades[i]\
    \ >= 1 { \n            grades[i] = \"C-\"\n        } else if grades[i] >= 0.7\
    \ { \n            grades[i] = \"D+\"\n        } else if grades[i] >= 0 { \n  \
    \          grades[i] = \"D\"\n        } else { \n            grades[i] = \"D-\"\
    \n        }\n        g = append(g, grades[i])\n    }\n    return g\n}\n\nfunc\
    \ TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbc05r68e_test.go:35:25: cannot use "A+" (untyped string constant) as float64
    value in assignment

    /tmp/tmpbc05r68e_test.go:37:25: cannot use "A" (untyped string constant) as float64
    value in assignment

    /tmp/tmpbc05r68e_test.go:39:25: cannot use "A-" (untyped string constant) as float64
    value in assignment

    /tmp/tmpbc05r68e_test.go:41:25: cannot use "B+" (untyped string constant) as float64
    value in assignment

    /tmp/tmpbc05r68e_test.go:43:25: cannot use "B" (untyped string constant) as float64
    value in assignment

    /tmp/tmpbc05r68e_test.go:45:25: cannot use "B-" (untyped string constant) as float64
    value in assignment

    /tmp/tmpbc05r68e_test.go:47:25: cannot use "C+" (untyped string constant) as float64
    value in assignment

    /tmp/tmpbc05r68e_test.go:49:25: cannot use "C" (untyped string constant) as float64
    value in assignment

    /tmp/tmpbc05r68e_test.go:51:25: cannot use "C-" (untyped string constant) as float64
    value in assignment

    /tmp/tmpbc05r68e_test.go:53:25: cannot use "D+" (untyped string constant) as float64
    value in assignment

    /tmp/tmpbc05r68e_test.go:53:25: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075626
- exit_code: 2
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var letters []string\n    n := len(grades)\n    k\
    \ := float64(n) / 4.0\n    for i := 0; i < n; i++ {\n        if grades[i]>k {\n\
    \            letters = append(letters, \"C\")\n            i -= k\n        } else\
    \ {\n            letters = append(letters, \"B\")\n            if i >= k {\n \
    \               i -= k\n                letters = append(letters, \"A-\")\n  \
    \          } else {\n                letters = append(letters, \"A+\")\n     \
    \       }\n        }\n    }\n    return letters\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphk8ms53e_test.go:37:13: invalid operation: i -= k (mismatched types int
    and float64)

    /tmp/tmphk8ms53e_test.go:40:21: invalid operation: i >= k (mismatched types int
    and float64)

    /tmp/tmphk8ms53e_test.go:41:17: invalid operation: i -= k (mismatched types int
    and float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075626
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var gpas []float64\n    gpas = append(gpas, grades[0])\n\
    \    for i := 1; i < len(grades); i++ {\n        if grades[i] > grades[i-1] {\n\
    \            gpas = append(gpas, grades[i])\n        } else {\n            gpas\
    \ = append(gpas, grades[i-1])\n        }\n    }\n\n    var letterGrades []string\n\
    \    for i := 0; i < len(gpas)-1; i++ {\n        if gpas[i] == 0.0 {\n       \
    \     letterGrades = append(letterGrades, fmt.Sprintf(\"E\"))\n            continue\n\
    \        }\n        if gpas[i+1] == 0.0 {\n            letterGrades = append(letterGrades,\
    \ fmt.Sprintf(\"D-\"))\n            continue\n        }\n        if gpas[i] ==\
    \ gpas[i+1] {\n            letterGrades = append(letterGrades, fmt.Sprintf(\"\
    D\"))\n            continue\n        }\n        if gpas[i] > gpas[i+1] {\n   \
    \         letterGrades = append(letterGrades, fmt.Sprintf(\"C-\"))\n        }\
    \ else {\n            letterGrades = append(letterGrades, fmt.Sprintf(\"C\"))\n\
    \        }\n    }\n\n    return letterGrades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpf0gdh0cb_test.go:83: expected '[A+ B C- C A-]', got '[D\
    \ C- C- C]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n  \
    \      tmpf0gdh0cb_test.go:83: expected '[D+]', got '[]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2\
    \ (0.00s)\n        tmpf0gdh0cb_test.go:83: expected '[D-]', got '[]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmpf0gdh0cb_test.go:83:\
    \ expected '[E]', got '[]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpf0gdh0cb_test.go:83: expected '[D D- C- B B+]', got '[D\
    \ C C C]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n    \
    \    tmpf0gdh0cb_test.go:83: expected '[E D-]', got '[E]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075626
- exit_code: 2
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    letter := []string{}\n    sort.Float64s(grades)\n\
    \    \n    counter := 0\n    for _, grade := range grades {\n        counter++\n\
    \        if counter >= 4 {\n            letter = append(letter, fmt.Sprintf(\"\
    A+\"))\n            counter = 0\n        } else if counter > 3 {\n           \
    \ letter = append(letter, fmt.Sprintf(\"A\"))\n            counter = 0\n     \
    \   } else if counter > 2 {\n            letter = append(letter, fmt.Sprintf(\"\
    A-\"))\n            counter = 0\n        } else if counter > 1 {\n           \
    \ letter = append(letter, fmt.Sprintf(\"B+\"))\n            counter = 0\n    \
    \    } else if counter > 0 {\n            letter = append(letter, fmt.Sprintf(\"\
    B\"))\n            counter = 0\n        } else {\n            letter = append(letter,\
    \ fmt.Sprintf(\"C+\"))\n            counter = 0\n        }\n    }\n    return\
    \ letter\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate :=\
    \ numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0,\
    \ 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n\
    \     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n   \
    \  { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     {\
    \ actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual:\
    \ candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}),\
    \ expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2nx6qexp_test.go:32:5: undefined: sort

    /tmp/tmp2nx6qexp_test.go:35:12: grade declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075626
- exit_code: 2
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var ret []string\n    sort.Float64s(grades)\n   \
    \ for i, grade := range grades {\n        switch {\n        case grade >= 3.0:\n\
    \            ret = append(ret, \"B-\")\n        case grade >= 2.0:\n         \
    \   ret = append(ret, \"B-\")\n        case grade >= 1.7:\n            ret = append(ret,\
    \ \"C\")\n        case grade >= 1.3:\n            ret = append(ret, \"C-\")\n\
    \        case grade >= 1.0:\n            ret = append(ret, \"C\")\n        case\
    \ grade >= 0.7:\n            ret = append(ret, \"D\")\n        case grade >= 0.0:\n\
    \            ret = append(ret, \"D\")\n        case grade >= 0.0:\n          \
    \  ret = append(ret, \"E\")\n        default:\n            ret = append(ret, \"\
    A+\")\n        }\n    }\n    return ret\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgm1uthlr_test.go:32:5: undefined: sort

    /tmp/tmpgm1uthlr_test.go:33:9: i declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075626
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    grades := append([]float64{}, grades...)\n    sort.Float64s(grades)\n\
    \    index := 0\n    result := make([]string, 0, 5)\n    for ; index < len(grades)-1;\
    \ index++ {\n        grade, err := grades[index], grades[index+1]\n        if\
    \ err != nil {\n            return result\n        }\n        if grade <= 3.3\
    \ {\n            results = append(result, \"B+\")\n        }\n        else if\
    \ grade <= 2.7 {\n            results = append(result, \"B\")\n        }\n   \
    \     else if grade <= 2.3 {\n            results = append(result, \"B-\")\n \
    \       }\n        else if grade <= 1.9 {\n            results = append(result,\
    \ \"C+\")\n        }\n        else if grade <= 1.7 {\n            results = append(result,\
    \ \"C\")\n        }\n        else if grade <= 1.3 {\n            results = append(result,\
    \ \"C-\")\n        }\n        else if grade <= 1.0 {\n            results = append(result,\
    \ \"D+\")\n        }\n        else if grade <= 0.7 {\n            results = append(result,\
    \ \"D\")\n        }\n        else if grade <= 0.0 {\n            results = append(result,\
    \ \"D-\")\n        }\n        else {\n            results = append(result, \"\
    E\")\n        }\n    }\n    return result\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpzghfl4z1_test.go:43:9: expected statement, found ''else''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075625
- exit_code: 2
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    sorted_grades := []float64{}\n    sorted_grades =\
    \ append(sorted_grades, grades...)\n    sorted_grades = append(sorted_grades,\
    \ 0.0)\n    sorted_grades = append(sorted_grades, 1.0)\n\n    grade_points :=\
    \ []float64{}\n    grade_points = append(grade_points, sorted_grades[:len(sorted_grades)-len(sorted_grades)%len(sorted_grades)])\n\
    \    grade_points = append(grade_points, sorted_grades[len(sorted_grades)-len(sorted_grades)%len(sorted_grades):])\n\
    \n    var letter_grades []string\n    for _, grade_point := range grade_points\
    \ {\n        if grade_point == 0 {\n            letter_grades = append(letter_grades,\
    \ \"E\")\n        } else {\n            letter_grades = append(letter_grades,\
    \ fmt.Sprintf(\"%+.2f\", grade_point/sorted_grades[len(sorted_grades)-len(sorted_grades)%len(sorted_grades)])+\"\
    -\")\n        }\n    }\n    return letter_grades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfndkas2q_test.go:37:54: cannot use sorted_grades[:len(sorted_grades) -
    len(sorted_grades) % len(sorted_grades)] (value of type []float64) as type float64
    in argument to append

    /tmp/tmpfndkas2q_test.go:38:54: cannot use sorted_grades[len(sorted_grades) -
    len(sorted_grades) % len(sorted_grades):] (value of type []float64) as type float64
    in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075626
- exit_code: 2
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    result := []string{}\n    for _, grade := range grades\
    \ {\n        if grade > 0 && grade < 3.0 {\n            result += []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"}\n            break\n        } else if grade\
    \ > 3.0 && grade < 4.0 {\n            result += []string{\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\", \"B+\"}\n            break\n        } else if grade > 4.0 &&\
    \ grade < 5.0 {\n            result += []string{\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\", \"B-\", \"B\"}\n            break\n        } else if grade > 5.0 &&\
    \ grade < 6.0 {\n            result += []string{\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\", \"B-\", \"B-\", \"B+\", \"C+\", \"D+\", \"D\", \"D-\", \"D\"}\n    \
    \        break\n        } else if grade > 6.0 && grade < 7.0 {\n            result\
    \ += []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\", \"B-\", \"B-\", \"B-\", \"\
    B+\", \"C+\", \"D+\", \"D\", \"D-\", \"D-\", \"D\"}\n            break\n     \
    \   } else if grade > 7.0 && grade < 8.0 {\n            result += []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\", \"B-\", \"B-\", \"B-\", \"B+\", \"C+\", \"\
    D+\", \"D\", \"D-\", \"D-\", \"D-\", \"D\"}\n            break\n        } else\
    \ if grade > 8.0 && grade < 9.0 {\n            result += []string{\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\", \"B-\", \"B-\", \"B-\", \"B+\", \"C+\", \"D+\", \"D\"\
    , \"D-\", \"D-\", \"D-\", \"D-\", \"D\"}\n            break\n        } else if\
    \ grade > 9.0 {\n            result += []string{\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\", \"B-\", \"B-\", \"B-\", \"B+\", \"C+\", \"D+\", \"D\", \"D-\", \"D-\"\
    , \"D-\", \"D-\", \"D-\", \"D\"}\n            break\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate :=\
    \ numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0,\
    \ 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n\
    \     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n   \
    \  { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     {\
    \ actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual:\
    \ candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}),\
    \ expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7iovagu6_test.go:34:13: invalid operation: operator + not defined on result
    (variable of type []string)

    /tmp/tmp7iovagu6_test.go:37:13: invalid operation: operator + not defined on result
    (variable of type []string)

    /tmp/tmp7iovagu6_test.go:40:13: invalid operation: operator + not defined on result
    (variable of type []string)

    /tmp/tmp7iovagu6_test.go:43:13: invalid operation: operator + not defined on result
    (variable of type []string)

    /tmp/tmp7iovagu6_test.go:46:13: invalid operation: operator + not defined on result
    (variable of type []string)

    /tmp/tmp7iovagu6_test.go:49:13: invalid operation: operator + not defined on result
    (variable of type []string)

    /tmp/tmp7iovagu6_test.go:52:13: invalid operation: operator + not defined on result
    (variable of type []string)

    /tmp/tmp7iovagu6_test.go:55:13: invalid operation: operator + not defined on result
    (variable of type []string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075626
- exit_code: 2
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var letterGrades []string\n    \n    var GPAs []float64\n\
    \    for _, grade := range grades {\n        GPA = grade / 4.0\n        \n   \
    \     if GPA <= 3.7 {\n            letterGrade = fmt.Sprintf(\"A+\", GPA)\n  \
    \      } else if GPA > 3.7 && GPA < 3.3 {\n            letterGrade = fmt.Sprintf(\"\
    A\", GPA)\n        } else if GPA > 3.3 && GPA < 3.0 {\n            letterGrade\
    \ = fmt.Sprintf(\"A-\", GPA)\n        } else if GPA > 3.0 && GPA < 2.7 {\n   \
    \         letterGrade = fmt.Sprintf(\"B+\", GPA)\n        } else if GPA > 2.7\
    \ && GPA < 2.3 {\n            letterGrade = fmt.Sprintf(\"B\", GPA)\n        }\
    \ else if GPA > 2.3 && GPA < 2.0 {\n            letterGrade = fmt.Sprintf(\"B-\"\
    , GPA)\n        } else if GPA > 2.0 && GPA < 1.7 {\n            letterGrade =\
    \ fmt.Sprintf(\"C+\", GPA)\n        } else if GPA > 1.7 && GPA < 1.3 {\n     \
    \       letterGrade = fmt.Sprintf(\"C\", GPA)\n        } else if GPA > 1.3 &&\
    \ GPA < 1.0 {\n            letterGrade = fmt.Sprintf(\"C-\", GPA)\n        } else\
    \ if GPA > 1.0 && GPA <= 0.7 {\n            letterGrade = fmt.Sprintf(\"D+\",\
    \ GPA)\n        } else if GPA > 0.7 && GPA <= 0.0 {\n            letterGrade =\
    \ fmt.Sprintf(\"D\", GPA)\n        } else if GPA <= 0.0 {\n            letterGrade\
    \ = fmt.Sprintf(\"E\", GPA)\n        }\n        \n        letterGrades = append(letterGrades,\
    \ letterGrade)\n    }\n    \n    return letterGrades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp52in7sn2_test.go:35:9: undefined: GPA

    /tmp/tmp52in7sn2_test.go:37:12: undefined: GPA

    /tmp/tmp52in7sn2_test.go:38:13: undefined: letterGrade

    /tmp/tmp52in7sn2_test.go:38:45: undefined: GPA

    /tmp/tmp52in7sn2_test.go:39:19: undefined: GPA

    /tmp/tmp52in7sn2_test.go:40:13: undefined: letterGrade

    /tmp/tmp52in7sn2_test.go:40:44: undefined: GPA

    /tmp/tmp52in7sn2_test.go:41:19: undefined: GPA

    /tmp/tmp52in7sn2_test.go:42:13: undefined: letterGrade

    /tmp/tmp52in7sn2_test.go:42:45: undefined: GPA

    /tmp/tmp52in7sn2_test.go:42:13: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075626
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    grade := []string{}\n    \n    max := 0\n    \n \
    \   for _, grade := range grades {\n        max = max > grade ? max : grade\n\
    \    }\n    \n    for _, grade := range grades {\n        grade /= max\n     \
    \   \n        switch {\n        case grade < 4.0:\n            grade = \"A+\"\
    \ \n            break\n        case grade < 3.7:\n            grade = \"A \"\n\
    \            break\n        case grade < 3.3:\n            grade = \"A-\"\n  \
    \          break\n        case grade < 3.0:\n            grade = \"B+\"\n    \
    \        break\n        case grade < 2.7:\n            grade = \"B \"\n      \
    \      break\n        case grade < 2.3:\n            grade = \"B-\"\n        \
    \    break\n        case grade < 2.0:\n            grade = \"C+\"\n          \
    \  break\n        case grade < 1.7:\n            grade = \"C \"\n            break\n\
    \        case grade < 1.3:\n            grade = \"C-\"\n            break\n  \
    \      case grade < 1.0:\n            grade = \"D+\"\n            break\n    \
    \    case grade < 0.7:\n            grade = \"D \"\n            break\n      \
    \  case grade < 0.0:\n            grade = \"D-\"\n            break\n        case\
    \ grade < 0.0:\n            grade = \"E\"\n            break\n        }\n    \
    \    grade = string(grade)\n        grade = grade[0:1] + grade[1:]\n        grade\
    \ = grade + \" \"\n        grade = string(grade)\n        grade = grade + \"+\"\
    \n        fmt.Println(grade)\n        grade = grade + \"\\n\"\n        grade =\
    \ grade + \"\\n\"\n    }\n    \n    return grade\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpd5xesgia_test.go:36:27: illegal character U+003F ''?''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075625
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    letterGrade := []string{}\n    for _, grade := range\
    \ grades {\n        if grade > 0 {\n            letterGrade = append(letterGrade,\
    \ fmt.Sprintf(\"A+\"))\n        } else if grade > 3 {\n            letterGrade\
    \ = append(letterGrade, fmt.Sprintf(\"A\"))\n        } else if grade > 2.7 {\n\
    \            letterGrade = append(letterGrade, fmt.Sprintf(\"A-\"))\n        }\
    \ else if grade > 2.3 {\n            letterGrade = append(letterGrade, fmt.Sprintf(\"\
    B+\"))\n        } else if grade > 1.7 {\n            letterGrade = append(letterGrade,\
    \ fmt.Sprintf(\"B\"))\n        } else if grade > 1.3 {\n            letterGrade\
    \ = append(letterGrade, fmt.Sprintf(\"B-\"))\n        } else if grade > 1.0 {\n\
    \            letterGrade = append(letterGrade, fmt.Sprintf(\"C+\"))\n        }\
    \ else if grade > 0.7 {\n            letterGrade = append(letterGrade, fmt.Sprintf(\"\
    C\"))\n        } else if grade > 0.3 {\n            letterGrade = append(letterGrade,\
    \ fmt.Sprintf(\"C-\"))\n        } else if grade > 0.0 {\n            letterGrade\
    \ = append(letterGrade, fmt.Sprintf(\"D+\"))\n        } else if grade > -0.7 {\n\
    \            letterGrade = append(letterGrade, fmt.Sprintf(\"D\"))\n        }\
    \ else if grade > -1.3 {\n            letterGrade = append(letterGrade, fmt.Sprintf(\"\
    D-\"))\n        } else if grade > -1.0 {\n            letterGrade = append(letterGrade,\
    \ fmt.Sprintf(\"E\"))\n        }\n    }\n    return letterGrade\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpc8gdo0r8_test.go:82: expected '[A+ B C- C A-]', got '[A+\
    \ A+ A+ A+ A+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n\
    \        tmpc8gdo0r8_test.go:82: expected '[D+]', got '[A+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2\
    \ (0.00s)\n        tmpc8gdo0r8_test.go:82: expected '[D-]', got '[A+]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmpc8gdo0r8_test.go:82:\
    \ expected '[E]', got '[D]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpc8gdo0r8_test.go:82: expected '[D D- C- B B+]', got '[A+\
    \ A+ A+ A+ A+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmpc8gdo0r8_test.go:82: expected '[E D-]', got '[D A+]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075626
- exit_code: 2
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    // Use a map to store the grades as key and its GPA\
    \ as value\n    gradeMap := make(map[float64]string)\n\n    // Sort the grades\
    \ in ascending order\n    sort.Float64s(grades)\n\n    // Get the GPA for the\
    \ first student\n    gpa := grades[0]\n\n    // Iterate through the grades and\
    \ find the corresponding grade in the map\n    for _, grade := range grades {\n\
    \        gradeMap[grade] = gradeMap[grade] + \" + \" + strings.ToUpper(fmt.Sprintf(\"\
    %.2f\", gpa)[0:-1])\n    }\n\n    // Return the string array with the grades\n\
    \    return gradeMap[\"E\"]\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T)\
    \ {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected:\
    \ []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"\
    D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"}\
    \ },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzgys2run_test.go:35:5: undefined: sort

    /tmp/tmpzgys2run_test.go:42:53: undefined: strings

    /tmp/tmpzgys2run_test.go:42:96: invalid argument: index -1 (constant of type int)
    must not be negative

    /tmp/tmpzgys2run_test.go:46:12: cannot use gradeMap["E"] (map index expression
    of type string) as type []string in return statement

    /tmp/tmpzgys2run_test.go:46:21: cannot use "E" (untyped string constant) as float64
    value in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075626
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    gradeList := make([]string, len(grades))\n    \n\
    \    // First add an E for the final grade\n    gradeList[len(gradeList)-1] =\
    \ \"E\"\n    \n    // Go through each of the grades\n    for i := 1; i < len(grades);\
    \ i++ {\n        // Grade is greater than previous grade\n        if grades[i-1]\
    \ > grades[i] {\n            // Grade is higher than the previous, and lower than\
    \ the current\n            if grades[i-1] < grades[i] && grades[i] > grades[i-1]\
    \ {\n                gradeList[i] = fmt.Sprintf(\"A+\")\n            } else if\
    \ grades[i-1] > grades[i] { // Grade is lower than current and higher than the\
    \ previous\n                gradeList[i] = fmt.Sprintf(\"A-\")\n            }\
    \ else if grades[i-1] == grades[i] { // Grade is the same as the previous\n  \
    \              gradeList[i] = fmt.Sprintf(\"A\")\n            } else {\n     \
    \           gradeList[i] = fmt.Sprintf(\"B+\")\n            }\n        } else\
    \ { // Grade is less than previous grade\n            if grades[i-1] < grades[i]\
    \ { // Grade is lower than the previous\n                gradeList[i] = fmt.Sprintf(\"\
    B-\")\n            } else if grades[i-1] > grades[i] { // Grade is higher than\
    \ the previous\n                gradeList[i] = fmt.Sprintf(\"B\")\n          \
    \  } else { // Grade is the same\n                gradeList[i] = fmt.Sprintf(\"\
    C+\")\n            }\n        }\n    }\n    \n    // Return the grades list\n\
    \    return gradeList\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n\
    \  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0,\
    \ 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n\
    \     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n   \
    \  { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     {\
    \ actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual:\
    \ candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}),\
    \ expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpho5csv18_test.go:83: expected '[A+ B C- C A-]', got '[ A-\
    \ A- B- B-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n \
    \       tmpho5csv18_test.go:83: expected '[D+]', got '[E]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2\
    \ (0.00s)\n        tmpho5csv18_test.go:83: expected '[D-]', got '[E]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmpho5csv18_test.go:83:\
    \ expected '[D D- C- B B+]', got '[ A- B- B- B-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5\
    \ (0.00s)\n        tmpho5csv18_test.go:83: expected '[E D-]', got '[ B-]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075626
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var letterGrades []string\n    for _, grade := range\
    \ grades {\n        var letter string\n        if grade >= 3.0 { // A+\n     \
    \       letter = \"A+\"\n        }\n        if grade >= 2.7 { // B\n         \
    \   letter = \"B\"\n        }\n        if grade >= 2.3 { // B-\n            letter\
    \ = \"B-\"\n        }\n        if grade >= 2.0 { // C+\n            letter = \"\
    C+\"\n        }\n        if grade >= 1.7 { // C\n            letter = \"C\"\n\
    \        }\n        if grade >= 1.3 { // C-\n            letter = \"C\"\n    \
    \    }\n        if grade >= 1.0 { // D+\n            letter = \"D+\"\n       \
    \ }\n        if grade >= 0.7 { // D\n            letter = \"D\"\n        }\n \
    \       if grade >= 0.0 { // D-\n            letter = \"D-\"\n        }\n    \
    \    if grade == 0.0 { // E\n            letter = \"E\"\n        }\n        letterGrades\
    \ = append(letterGrades, letter)\n    }\n    return letterGrades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpi8ylne7r_test.go:87: expected '[A+ B C- C A-]', got '[D-\
    \ D- D- D- D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n\
    \        tmpi8ylne7r_test.go:87: expected '[D+]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpi8ylne7r_test.go:87: expected '[D D- C- B B+]', got '[D-\
    \ D- D- D- D-]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075626
