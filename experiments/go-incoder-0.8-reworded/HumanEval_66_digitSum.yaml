name: HumanEval_66_digitSum
language: go_test.go
prompt: "package digitSum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
  \ Task\n// Write a function that takes a string as input and returns the sum of\
  \ the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\"\
  )\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n\
  // >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>>\
  \ digitSum(\"aAaaaXa\")\n// 153\nfunc digitSum(s string) int {\n"
tests: "func TestDigitsum(t *testing.T) {\n  candidate := digitSum\n\ttype test struct\
  \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
  \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abAB\"\
  ), expected: 131 },\n     { actual: candidate(\"abcCd\"), expected: 67 },\n    \
  \ { actual: candidate(\"helloE\"), expected: 69 },\n     { actual: candidate(\"\
  woArBld\"), expected: 131 },\n     { actual: candidate(\"aAaaaXa\"), expected: 153\
  \ },\n     { actual: candidate(\" How are yOu?\"), expected: 151 },\n     { actual:\
  \ candidate(\"You arE Very Smart\"), expected: 327 },\n   }\n\n\tfor i, tc := range\
  \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\
  \tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
  \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\
  \t}\n}\n"
completions: ["    // write your code here\n    // start solution here\n    ints :=\
    \ make([]int, len(s))\n    for idx, c := range s {\n        if c >= 'a' && c <=\
    \ 'z' {\n            ints[idx] += int(c-'a')\n        }\n    }\n    return sum(ints)\n\
    \    // end solution here\n}\n", "    var sum int\n    for _, c := range s {\n\
    \        if int(c) > 96 {\n            sum += int(c) - 96\n        } else {\n\
    \            sum += int(c)\n        }\n    }\n    return sum\n}\n", "    var sum\
    \ = 0\n    for _, char := range s {\n        if char == 'A' || char == 'a' {\n\
    \            sum += char - 'A'\n        }\n    }\n    return sum\n}\n", "    var\
    \ sum int = 0\n    for i := 0; i < len(s); i++ {\n        if s[i].ToUpper() ==\
    \ 'A' {\n            sum += s[i].ToInt() - 65\n        } else {\n            sum\
    \ += s[i].ToInt() - 97\n        }\n    }\n    return sum\n}\n", "    \n    var\
    \ sum = 0\n    for _, char := range s {\n        if char >= 'A' && char <= 'Z'\
    \ {\n            sum += char - 'A' + 10\n        }\n    }\n    return sum\n}\n",
  "    result := 0\n    for _, c := range s {\n        result += int(c)\n    }\n \
    \   return result\n}\n", "    return 0\n}\n", "    output := 0\n    for _, char\
    \ := range s {\n        if char >= '0' && char <= '9' {\n            output +=\
    \ int(char) - int('0')\n        }\n    }\n    return output\n}\n", "    // base\
    \ case\n    if len(s) == 0 {\n        return 0\n    }\n\n    // recursive case\n\
    \    chars := make([]rune, 0)\n    for _, c := range s {\n        chars = append(chars,\
    \ int(c))\n    }\n\n    return digitSumHelper(chars, len(chars))\n}\n", "    var\
    \ sum int\n    for i, char:= range s {\n        if char >= 'a' && char <= 'z'\
    \ {\n            sum += char - 'a'\n        } else {\n            continue\n \
    \       }\n    }\n    return sum\n}\n", "    var sum int = 0\n    for _, c :=\
    \ range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c - 'A')\
    \ + 1\n        }\n    }\n    return sum\n}\n", "    result := 0\n    for _, char\
    \ := range s {\n        result += (int(char) - 'A' + 10)\n    }\n    return result\n\
    }\n", "    if s == \"\" {\n        return 0\n    }\n\n    sum := 0\n    for _,\
    \ d := range s {\n        if d >= 'a' && d <= 'z' {\n            sum += int(d\
    \ - 'a')\n        }\n    }\n\n    return sum\n}\n", "    // Write code here\n\
    \    var result int\n    for _, v := range s {\n        if v >= 'a' && v <= 'z'\
    \ {\n            result += int(v) - int(v) + int('A')\n        }\n    }\n    return\
    \ result\n}\n</code>\n<|/ a dscore=0 tags=go,string,int |>\n<| a |>\n<code>\n\
    package main\n\nimport (\n    \"bytes\"\n    \"encoding/binary\"\n    \"fmt\"\n\
    \    \"math\"\n)\n", "    res := 0\n    for _, v := range s {\n        res +=\
    \ int(v)\n    }\n    return res\n}\n", "    // TODO: Write your code here\n\n\
    }\n", "    sum := 0\n    for _, v := range s {\n        sum += int(v)\n    }\n\
    \    return sum\n}\n", "    var result int\n    if len(s) == 0 {\n        result\
    \ = 0\n    } else if s[0] == '-' || s[0] == '+' || s[0] == '.' {\n        result\
    \ = s[0]\n    } else {\n        result = int(s[0])\n        for _, char := range\
    \ s[1:] {\n            result += int(char)\n        }\n    }\n    return result\n\
    }\n", "    var acc int\n    len := len(s)\n    for i := 0; i < len; i++ {\n  \
    \      if s[i] > '9' {\n            acc += s[i] - '9'\n        } else {\n    \
    \        acc += s[i] - '0'\n        }\n    }\n    return acc\n}\n", "    sum =\
    \ 0\n    for _, r := range s {\n        if r >= 'a' && r <= 'z' {\n          \
    \  sum += int(r) - int('a')\n        } else {\n            continue\n        }\n\
    \    }\n    return sum\n}\n", "    var ans int = 0\n    for _, c := range s {\n\
    \        if c > 'z' {\n            ans += 26\n            c -= 'a'\n        }\n\
    \        ans += int(c-'0')\n    }\n    return ans\n}\n", "    // Write your logic\
    \ here\n    sum := 0\n    for _, c := range s {\n        if c >= '0' && c <= '9'\
    \ {\n            sum += int(c)\n        }\n    }\n    return sum\n}\n", "    if\
    \ len(s) == 0 {\n        return 0\n    }\n    var sum = 0\n    for _, char :=\
    \ range s {\n        if char == 'A' || char == 'a' {\n            sum += 64\n\
    \        }\n    }\n    return sum\n}\n", "    var i, acc int\n    for ; i < len(s);\
    \ i++ {\n        if s[i] == \"\" {\n            continue\n        }\n        if\
    \ s[i] > '9' {\n            continue\n        }\n        acc = acc * 10 + int(s[i]\
    \ - '0')\n    }\n    return acc\n}\n", "    return 0\n}\n", "    var sum = 0\n\
    \    for _, v := range s {\n        if v <= '9' {\n            sum += int(v)\n\
    \        } else {\n            sum += int(v-'0')\n        }\n    }\n    return\
    \ sum\n}\n", "    sum := 0\n    for _, char := range s {\n        sum += int(char)\n\
    \    }\n    return sum\n}\n", "    return 0\n}", "    sum := 0\n    for _, v :=\
    \ range s {\n        sum += int(v)\n    }\n    return sum\n}\n", "    count :=\
    \ 0\n    for _, x := range s {\n        if x >= 'a' && x <= 'z' {\n          \
    \  count = count + int(x - 'a') + 1\n        }\n    }\n    return count\n}\n",
  "    var sum int\n    for _, v := range s {\n        sum += int(v) - 48\n    }\n\
    \    return sum\n}\n</code>\nMy questions are: \n\nWhat's the best practice for\
    \ such questions -- what steps should I take to ensure the code is testable and\
    \ robust? \nIs there a standard library function that provides functions to deal\
    \ with strings efficiently?\n<|/ q |>\n<| c |>\nThe string package doesn't have\
    \ anything for this. Write your own version of it.\n<|/ c |>\n<| c |>\nThe string\
    \ package is _way_ more than just a simple string and `len` of a string are already\
    \ a part of it. I'd just write my own func for it.\n<|/ c |>\n<| c |>\n`len(str)`\
    \ has `O(n)` complexity already. What do you think would make it faster?\n<|/\
    \ c |>\n<| c |>\nThanks for the feedback. I was actually asking about standard\
    \ library functions that deal with strings (without having to write my own). Something\
    \ like `strings.Map` or `strings.Replace` etc.\n<|/ c |>\n<| c |>\nNo such functions\
    \ are provided by the standard library. As soon as you consider `len`, you get\
    \ to the `strlen` function. It's a common misconception that `len` is an `O(1)`\
    \ operation. It's not. It's `O(n)` where n is the number of characters in the\
    \ string. So a library implementation will be _much_ slower than your own.\n<|/\
    \ c |>\n<| a tags=string,go |>\nI came up with one possible solution to my own\
    \ question. Maybe it helps someone else.\n<code>\npackage digitSum_test\n\nimport\
    \ (\n    \"testing\"\n    \"fmt\"\n    \"strings\"\n)\n", "    var result int\n\
    \    for _, c := range s {\n        if c >= '0' && c <= '9' {\n            result\
    \ += int(c - '0')\n        }\n    }\n    return result\n}\n", "    return sumUpToIndex(s)\n\
    }\n", "    return 0\n}\n", "    ans := 0\n    for _, c := range s {\n        if\
    \ c > '9' {\n            ans += int(c-'0')\n        } else {\n            ans\
    \ += int(10+c-'0')\n        }\n    }\n    return ans\n}\n", "    // Start coding\
    \ here\n    // Write your code here\n    sumUpper := 0\n    for _, r := range\
    \ s {\n        if ('A' <= r && r <= 'Z') {\n            sumUpper += int(r) - int('A')\n\
    \        }\n    }\n    return sumUpper\n}\n</code>\nPlayground\n<|/ a dscore=1\
    \ |>\n<| a tags=recursion,algorithm,go dscore=1 |>\nYou can do it using only recursion\
    \ and basic functions:\n\nSplit the string into its lower and upper case\nFind\
    \ the sum of all the lower case characters recursively\nAdd the sum of lower case\
    \ characters\n\n<code>\npackage main\n\nimport (\n    \"fmt\"\n    \"strings\"\
    \n)\n", "    sum := 0\n    ch := 0\n    for _, r := range s {\n        if r ==\
    \ 'A' || r == 'a' {\n            sum += 48\n        } else if r == 'B' || r ==\
    \ 'b' {\n            sum += 49\n        } else if r == 'C' || r == 'c' {\n   \
    \         sum += 50\n        } else if r == 'D' || r == 'd' {\n            sum\
    \ += 51\n        } else if r == 'E' || r == 'e' {\n            sum += 52\n   \
    \     } else if r == 'F' || r == 'f' {\n            sum += 53\n        } else\
    \ if r == 'G' || r == 'g' {\n            sum += 54\n        } else if r == 'H'\
    \ || r == 'h' {\n            sum += 55\n        } else if r == 'I' || r == 'i'\
    \ {\n            sum += 56\n        } else if r == 'J' || r == 'j' {\n       \
    \     sum += 57\n        } else if r == 'K' || r == 'k' {\n            sum +=\
    \ 58\n        } else if r == 'L' || r == 'l' {\n            sum += 59\n      \
    \  } else if r == 'M' || r == 'm' {\n            sum += 60\n        } else if\
    \ r == 'N' || r == 'n' {\n            sum += 61\n        } else if r == 'O' ||\
    \ r == 'o' {\n            sum += 62\n        } else if r == 'P' || r == 'p' {\n\
    \            sum += 63\n        } else if r == 'Q' || r == 'q' {\n           \
    \ sum += 64\n        } else if r == 'R' || r == 'r' {\n            sum += 65\n\
    \        } else if r == 'S' || r == 's' {\n            sum += 66\n        } else\
    \ if r == 'T' || r == 't' {\n            sum += 67\n        } else if r == 'U'\
    \ || r == 'u' {\n            sum += 68\n        } else if r == 'V' || r == 'v'\
    \ {\n            sum += 69\n        } else if r == 'W' || r == 'w' {\n       \
    \     sum += 70\n        } else if r == 'X' || r == 'x' {\n            sum +=\
    \ 71\n        } else if r == 'Y' || r == 'y' {\n            sum += 72\n      \
    \  } else if r == 'Z' || r == 'z' {\n            sum += 73\n        }\n    }\n\
    \    return sum\n}", "    var sum = 0\n    for _, i := range s {\n        if i\
    \ > 48 && i < 58 {\n            sum += int(i - 48)\n        }\n    }\n    return\
    \ sum\n}\n", "    sum = 0\n    for _, c := range s {\n        if c >= 'A' && c\
    \ <= 'Z' {\n            sum += int(c - 'A' + 10)\n        }\n    }\n    return\
    \ sum\n}\n", "    // Return the sum of all of the digits of every character in\
    \ the string\n    result := 0\n    digitCount := 0\n    for _, char := range s\
    \ {\n        if char >= '0' && char <= '9' {\n            result += int(char)\
    \ - '0'\n            digitCount++\n        }\n    }\n    if digitCount > 0 {\n\
    \        result = result / digitCount\n    }\n    return result\n}\n", "    var\
    \ sum int = 0\n    for _, char := range s {\n        if char > 'z' {\n       \
    \     sum -= 26\n        }\n        sum += int(char)\n    }\n    return sum\n\
    }\n</code>\n<|/ a tags=go |>\n<| c |>\nIt would help to add some explanation.\
    \ Just dumping code on SO is not a good idea.\n<|/ c |>\n<| c |>\nHow about `fmt.Sprintf(\"\
    %+v\", digitSum(\"aAaaaXa\"))`?\n<|/ c |>\n<| c |>\nWhy not just `func digitSum(s\
    \ string) int { return len(strings.Map(func(r rune) int { if r > 'z' { return\
    \ r-26 }; return int(r) }, s)) }`?\n<|/ c |>\n<| a dscore=0 tags=go |>\nI created\
    \ a package based on this answer:\n<code>\npackage main\n\nimport \"fmt\"\nimport\
    \ \"strings\"\n", "    var sum = 0\n    for _, char := range s {\n        sum\
    \ += int(char - 'A' + 1)\n    }\n    return sum\n}\n", "    if len(s) == 0 {\n\
    \        return 0\n    }\n\n    return int(s[len(s)-1])\n}\n", "    var sum =\
    \ 0\n    for _, char := range s {\n        if char >= '0' && char <= '9' {\n \
    \           sum += int(char-'0')\n        }\n    }\n    return sum\n}\n", "  \
    \  return 0\n}\n", "    var sum = 0\n    for _, v := range s {\n        if v >\
    \ 9 {\n            sum += int(v) - 10\n        } else {\n            sum += int(v)\n\
    \        }\n    }\n    return sum\n}\n", "    var res = 0\n    for _, r := range\
    \ s {\n        if r == 'A' || r == 'a' {\n            res += 26\n        } else\
    \ {\n            res += int(r)\n        }\n    }\n    return res\n}\n", "    var\
    \ result = int (0)\n    for _, char := range s {\n        if char >= 'A' && char\
    \ <= 'Z' {\n            result += char - 'A' + 1\n        }\n    }\n    return\
    \ result\n}\n", "    var sum int = 0\n    switch len(s) {\n    case   0:\n   \
    \     return 0\n    case 1:\n        sum *= int(s[0])\n        return sum\n  \
    \  default:\n        for i := 0; i < len(s); i++ {\n            sum += int(s[i])\n\
    \        }\n        return sum\n    }\n}\n", "    var ret int = 0\n    for _,\
    \ r := range s {\n        if r >= 'A' && r <= 'Z' {\n            ret += r-'A'\n\
    \        }\n    }\n    return ret\n}\n", "    result := 0\n    for _, v := range\
    \ s {\n        if v >= '0' && v <= '9' {\n            result += int(v-'0')\n \
    \       }\n    }\n    return result\n}\n", "    s := String(s)\n    result :=\
    \ 0\n    for _, r := range s {\n        if r >= 'a' && r <= 'z' {\n          \
    \  result -= int(c - 'a')\n        }\n    }\n    return result\n}\n", "    var\
    \ sum = 0\n    for _, letter := range s {\n        if letter == 'A' {\n      \
    \      sum += 65\n        } else if letter == 'B' {\n            sum += 66\n \
    \       } else if letter == 'C' {\n            sum += 67\n        } else if letter\
    \ == 'D' {\n            sum += 68\n        } else if letter == 'E' {\n       \
    \     sum += 69\n        } else if letter == 'F' {\n            sum += 70\n  \
    \      } else if letter == 'G' {\n            sum += 71\n        } else if letter\
    \ == 'H' {\n            sum += 72\n        } else if letter == 'I' {\n       \
    \     sum += 73\n        } else if letter == 'J' {\n            sum += 74\n  \
    \      } else if letter == 'K' {\n            sum += 75\n        } else if letter\
    \ == 'L' {\n            sum += 76\n        } else if letter == 'M' {\n       \
    \     sum += 77\n        } else if letter == 'N' {\n            sum += 78\n  \
    \      } else if letter == 'O' {\n            sum += 79\n        } else if letter\
    \ == 'P' {\n            sum += 80\n        } else if letter == 'Q' {\n       \
    \     sum += 81\n        } else if letter == 'R' {\n            sum += 82\n  \
    \      } else if letter == 'S' {\n            sum += 83\n        } else if letter\
    \ == 'T' {\n            sum += 84\n        } else if letter == 'U' {\n       \
    \     sum += 85\n        } else if letter == 'V' {\n            sum += 86\n  \
    \      } else if letter == 'W' {\n            sum += 87\n        } else if letter\
    \ == 'X' {\n            sum += 88\n        } else if letter == 'Y' {\n       \
    \     sum += 89\n        } else if letter == 'Z' {\n            sum += 90\n  \
    \      } else if letter == 'a' {\n            sum += 65\n        } else if letter\
    \ == 'b' {\n            sum += 66\n        } else if letter == 'c' {\n       \
    \     sum += 67\n        } else if letter == 'd' {\n            sum += 68\n  \
    \      } else if letter == 'e' {\n            sum += 69\n        } else if letter\
    \ == 'f' {\n            sum += 70\n        } else if letter == 'g' {\n       \
    \     sum += 71\n        } else if letter == 'h' {\n            sum += 72\n  \
    \      } else if letter == 'i' {\n            sum += 73\n        } else if letter\
    \ == 'j' {\n            sum += 74\n        } else if letter == 'k' {\n       \
    \     sum += 75\n        } else if letter == 'l' {\n            sum += 76\n  \
    \      } else if letter == 'm' {\n", "    var sum = 0\n    for _, char := range\
    \ s {\n        if char == 'A' || char == 'B' || char == 'C' || char == 'D' ||\
    \ char == 'E' || char == 'F' || char == 'G' || char == 'H' || char == 'I' || char\
    \ == 'J' || char == 'K' || char == 'L' || char == 'M' || char == 'N' || char ==\
    \ 'O' || char == 'P' || char == 'Q' || char == 'R' || char == 'S' || char == 'T'\
    \ || char == 'U' || char == 'V' || char == 'W' || char == 'X' || char == 'Y' ||\
    \ char == 'Z' {\n            sum += int(char) - int('A')\n        }\n    }\n \
    \   return sum\n}\n", "    // Write your code here\n    var sum int = 0\n    for\
    \ _, v := range s {\n        sum += int(v)\n    }\n    return sum\n}\n", "   \
    \ var sum int\n    for _, char := range s {\n        sum += int(char) - int('A')\
    \ + 1\n    }\n    return sum\n}\n", "    sum, i, sum := 0, 0, 0\n    for _, v\
    \ := range s {\n        sum += int(v)\n        i++\n        if i >= len(s) {\n\
    \            i = 0\n        }\n    }\n    return sum\n}\n", "    sum := 0\n  \
    \  for _, ch := range s {\n        sum += int(ch) - 48\n    }\n    return sum\n\
    }\n", "    sum := 0\n    max := len(s) - 1\n    for i := 0; i < max; i++ {\n \
    \       if s[i] > 0 {\n            sum += s[i] - 'A' + 1\n        }\n    }\n \
    \   return sum\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 tags=go |>\nHere's\
    \ a solution that works with ASCII:\n<code>\npackage main\n\nimport (\n    \"\
    fmt\"\n)\n", "    if s == \"\" {\n        return 0\n    }\n    total = 0\n   \
    \ for _, c := range s {\n        if c >= 'a' && c <= 'z' {\n            total\
    \ += int(c-'a')\n        }\n    }\n    return total\n}\n", "    if s == \"\" {\n\
    \        return 0\n    }\n    var sum = 0\n    for i := 0; i < len(s); i++ {\n\
    \        sum += int(s[i] - 'A')\n    }\n    return sum\n}\n", "    t := 0\n  \
    \  for _, c := range s {\n        t += int(c - 'A' + 1)\n    }\n    return t\n\
    }\n", "    var result int = 0\n    for _, char := range s {\n        if char >\
    \ 'a' && char < 'z' {\n            result += char - 'a'\n        }\n    }\n  \
    \  return result\n}\n", "    return int(fmt.Sprintf(\"%d\", sumUpUppperChars(s)))\n\
    }\n", "    var totalDigit int = 0\n    for _, char := range s {\n        if char\
    \ >= 'A' && char <= 'Z' {\n            totalDigit += int(char - 'A' + 10)\n  \
    \      } else {\n            totalDigit += int(char - '0')\n        }\n    }\n\
    \    return totalDigit\n}\n", "    var result int = 0\n    for _, char := range\
    \ s {\n        result += int(char)\n    }\n    return result\n}\n", "    sum,\
    \ _ := 0, 0\n    for _, c := range s {\n        sum += int(c)\n    }\n    return\
    \ sum\n}\n", "    n := 0\n    for _, char := range s {\n        n += int(char)\n\
    \    }\n    return n\n}\n", "    if len(s) == 0 {\n        return 0\n    }\n \
    \   sum := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] >= 'a' && s[i]\
    \ <= 'z' {\n            sum += s[i] - 'a'\n        } else if s[i] >= 'A' && s[i]\
    \ <= 'Z' {\n            sum += s[i] - 'A'\n        }\n    }\n    return sum\n\
    }\n", "    var result int\n    sum, _ := strconv.Atoi(string(s[:1]))\n    for\
    \ _, c := range s[1:] {\n        sum += int(c)\n        result = sum % 10 + result\n\
    \    }\n    return result\n}", "    var sum = 0\n    for _, v := range s {\n \
    \       if v > 'z' {\n            return sum\n        }\n        sum += int(v)\n\
    \    }\n    return sum\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=go,string,recursion\
    \ |>\nIt is a good idea to write a functional program with immutable data - that\
    \ is, data which doesn't change once it is set.\nYou can do so by using the go\
    \ keyword and by writing \"main\" as a function.\n<code>\npackage main\n\nimport\
    \ (\n    \"fmt\"\n)\n", "    sum := 0\n    for _, char := range s {\n        if\
    \ char >= 'A' && char <= 'Z' {\n            sum += int(char) - 'A' + 1\n     \
    \   }\n    }\n    return sum\n}\n", "    var sum = 0 \n    for _, char := range\
    \ s {\n        sum += int(char)\n    }\n    return sum\n}\n", "    sum := 0\n\
    \    for _, v := range s {\n        if v >= 'a' && v <= 'z' {\n            sum\
    \ += int(v - 'a')\n        }\n    }\n    return sum\n}\n", "    var sum = 0\n\
    \    for _, v := range s {\n        if v >= '0' && v <= '9' {\n            sum\
    \ += int(v-'0')\n        }\n    }\n    return sum\n}\n", "    // Your code here\n\
    \    if len(s) == 0 {\n        return 0\n    }\n    digitSum, i := 0, 0\n    for\
    \ i < len(s) {\n        if s[i] == 'A' || s[i] == 'a' {\n            digitSum\
    \ += int(s[i+1])\n            i++\n        }\n        i++\n    }\n    return digitSum\n\
    }\n", "    return 0\n}\n", "    n := 0\n    for _, v := range s {\n        if\
    \ v > '9' {\n            n = n + 10\n            n = n + int(v - '0')\n      \
    \  } else {\n            n = n + int(v - '9')\n        }\n    }\n    return n\n\
    }\n", "    sumUpper := 0\n    for _, c := range s {\n        if ('A' <= c && c\
    \ <= 'Z') {\n            sumUpper += int(c - 'A' + 1)\n        }\n    }\n    return\
    \ sumUpper\n}\n", "    sum := 0\n    for i := 0; i < len(s); i++ {\n        if\
    \ s[i] > 9 {\n            sum += s[i] - 9\n        } else {\n            sum +=\
    \ s[i]\n        }\n    }\n    return sum\n}\n", "    var sum int\n    for _, character\
    \ := range s {\n        if character >= 'A' && character <= 'Z' {\n          \
    \  sum += int(character - 'A' + 10)\n        } else {\n            sum += character\n\
    \        }\n    }\n    return sum\n}\n", "    sum, length := 0, 0\n    for _,\
    \ r := range s {\n        sum += int(unicode.ToUpper(r))\n        length++\n \
    \   }\n    return sum\n}\n", "    var sum = 0\n    for _, char := range s {\n\
    \        if char >= '0' && char <= '9' {\n            sum += int(char - '0')\n\
    \        }\n    }\n    return sum\n}\n", "    if len(s) == 0 {\n        return\
    \ 0\n    }\n    var sum = 0\n    for _, c := range s {\n        sum += int(unicode.ToLower(c))\
    \ // Convert to lowercase first\n    }\n    return sum\n}\n", "    sum := 0\n\
    \    for _, c := range s {\n        if 'a' <= c && c <= 'z' {\n            sum\
    \ += int(c-'a')\n        }\n    }\n    return sum\n}\n", "    ret := 0\n    for\
    \ _, r := range s {\n        if r >= 'a' && r <= 'z' {\n            ret += (r\
    \ - 'a')\n        }\n    }\n    return ret\n}\n", "    sum := 0\n    for _, r\
    \ := range s {\n        sum = (sum + int(r))\n    }\n    return sum\n}\n", " \
    \   r := 0\n    for _, i := range s {\n        if i > 32 {\n            r ^= i\n\
    \        }\n    }\n    return r\n}\n", "    var sum int = 0\n    for _, r := range\
    \ s {\n        if r >= 'a' && r <= 'z' {\n            sum += int(r) - int('A')\n\
    \        } else {\n            sum += int(r) - int(0)\n        }\n    }\n    return\
    \ sum\n}\n", "    if s == \"\" {\n        return 0\n    }\n\n    result := 0\n\
    \    for _, char := range s {\n        if char >= 'a' && char <= 'z' {\n     \
    \       result += char - 'a' + 1\n        }\n    }\n\n    return result\n}\n",
  "    var total = 0\n    for _, c := range s {\n        if c >= 'a' && c <= 'z' {\n\
    \            total += int(c - 'a')\n        }\n    }\n    return total\n}\n",
  "    var sum = 0\n    for _, r := range s {\n        if r >= '0' && r <= '9' {\n\
    \            sum += int(r-'0')\n        }\n    }\n    return sum\n}\n", "    sum\
    \ := 0\n    lowercase := false\n\n    for _, letter := range s {\n        if letter\
    \ == 'a' || letter == 'A' {\n            sum += 32\n            lowercase = true\n\
    \        } else {\n            if lowercase {\n                sum += int(letter\
    \ - 'a')\n            } else {\n                sum += int(letter - 'A')\n   \
    \         }\n            lowercase = false\n        }\n    }\n\n    return sum\n\
    }\n", "    var sum = 0\n    for i := 0; i < len(s); i++ {\n        sum += int(s[i])\
    \ - 'A' + 1\n    }\n    return sum\n}\n", "    var sum = 0\n    for _, r := range\
    \ s {\n        if r <= '9' && r >= '0' {\n            sum += int(r-'0')\n    \
    \    } else {\n            sum += 10\n        }\n    }\n    return sum\n}", " \
    \   result := 0\n    for _, char := range s {\n        if char == 'A' || char\
    \ == 'a' {\n            result += char - 'A'\n        }\n    }\n    return result\n\
    }\n", "    var sum int\n    for _, char := range s {\n        if char >= '0' &&\
    \ char <= '9' {\n            sum += int(char) - 48\n        }\n    }\n    return\
    \ sum\n}\n", "    sum := 0\n    for _, r := range s {\n        if r < 'A' || r\
    \ > 'Z' {\n            return sum\n        }\n        sum += int(r-'A')\n    }\n\
    \    return sum\n}\n", "    n := 0\n    for _, i := range s {\n        if i <\
    \ 65 {\n            n += int(i)\n        } else {\n            n += 9\n      \
    \  }\n    }\n    return n\n}\n", "    sum := 0\n    for _, char := range s {\n\
    \        if char == 'A' {\n            sum += 65\n        } else if char == 'a'\
    \ {\n            sum += 97\n        } else if char == '0' {\n            sum +=\
    \ 48\n        } else {\n            sum += int(char)\n        }\n    }\n    return\
    \ sum\n}\n", "    var sum = 0\n    for _, s := range s {\n        sum += int(s)\n\
    \    }\n    return sum\n}\n", "    // Write code here\n    return 0\n}\n", " \
    \   if len(s) < 1 {\n        return 0\n    }\n    total := 0\n    for _, i :=\
    \ range s {\n        total += int(i)\n    }\n    return total\n}\n", "    if len(s)\
    \ == 0 {\n        return 0\n    }\n\n    sum = 0\n    i := 0\n\n    for ; i <\
    \ len(s); i++ {\n        sum += int(s[i])\n    }\n\n    return sum\n}\n", "  \
    \  var sum int\n    for _, char := range s {\n        if char > '9' {\n      \
    \      sum -= int(char-32)\n        } else {\n            sum += int(char-48)\n\
    \        }\n    }\n    return sum\n}\n", "    sum := 0\n    for i := 0; i < len(s);\
    \ i++ {\n        sum += int(s[i])\n    }\n    return sum\n}\n", "    ans := 0\n\
    \    for _, r := range s {\n        if r >= 'A' && r <= 'Z' {\n            ans\
    \ = ans + int(r-'A')\n        }\n    }\n    return ans\n}\n", "    intSum, length\
    \ := 0, 0\n    for _, c := range s {\n        if c > 'a' || c < 'A' {\n      \
    \      continue\n        }\n        intSum += int(c - 'a')\n    }\n    return\
    \ intSum\n}\n", "    s := s[:len(s)-1] // removes trailing 'a'\n    sum := 0\n\
    \    for _, d := range s {\n        if d > '9' {\n            sum += int(d) -\
    \ '9'\n        } else {\n            sum += int(d)\n        }\n    }\n    return\
    \ sum\n}\n", "    sum = 0\n    for i := 0; i < len(s); i++ {\n        sum += int(s[i]\
    \ - 'A' + 10)\n    }\n    return sum\n}\n", "    n := 0\n    for _, c := range\
    \ s {\n        n += int(c)\n    }\n    return n\n}\n", "    // ...\n}", "    //\
    \ Your code here\n    // return 0\n    var sum int = 0\n    for _, v := range\
    \ s {\n        if v >= 65 && v < 90 {\n            sum += int(v - 64)\n      \
    \  } else {\n            sum += 0\n        }\n    }\n    return sum\n}\n</code>\n\
    <|/ a tags=go dscore=2 |>\n<| a dscore=1 |>\nThis may help you or give some ideas\
    \ (though this one isn't the most efficient, since it uses loops and functions)\n\
    <code>\npackage main\n\nimport (\n    \"fmt\"\n    \"unicode/utf8\"\n)\n", " \
    \   var sum int\n    for _, v := range s {\n        if v >= 'A' && v <= 'Z' {\n\
    \            sum += int(v) - int('A')\n        }\n    }\n    return sum\n}\n",
  "    sum := 0\n    for _, char := range s {\n        if char >= 'A' && char <= 'Z'\
    \ {\n            sum += char - 'A' + 1\n        }\n    }\n    return sum\n}\n",
  "    // Your code here\n\n    intStr := make([]int, len(s))\n    for idx, char :=\
    \ range s {\n        intStr[idx] = int(char)\n    }\n    return sumDigits(intStr)\n\
    }\n", "    sum := 0\n    for _, v := range s {\n        sum += int(v)\n    }\n\
    \    return sum\n}\n", "    // base case\n    if len(s) == 0 {\n        return\
    \ 0\n    }\n\n    // recurse case\n    sum := 0\n    first := s[0]\n\n    for\
    \ i := 0; i < len(s); i++ {\n        c := s[i]\n        if c >= first {\n    \
    \        sum += int(c - first)\n        }\n        first = s[i]\n    }\n\n   \
    \ return sum\n}\n</code>\n<|/ a dscore=1 tags=go,string,ascii,function |>\n<|\
    \ a tags=go,string,ascii,function |>\n<code>\npackage main\n\nimport (\n    \"\
    fmt\"\n    \"unicode/utf8\"\n)\n", "    // Write code here\n    return 0\n}\n",
  "    sum := 0\n    for _, r := range s {\n        sum += int(r)\n    }\n    return\
    \ sum\n}\n", "    return int(strings.Map(strconv.ParseUint, s, nil))\n}\n", " \
    \   var sum = 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == s[i] {\n\
    \            sum += int(s[i] - '0')\n        } else {\n            sum += 0\n\
    \        }\n    }\n    return sum\n}\n", "    result := 0\n    str := make([]rune,\
    \ len(s))\n    for idx, val := range str {\n        str[idx] = rune(val)\n   \
    \ }\n    for _, val := range str {\n        result = result + val\n    }\n   \
    \ return result\n}\n", "    return digitSumSum(s[:len(s)-1])\n}\n", "    sum :=\
    \ 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n          \
    \  sum += int(c - 'A') + 1\n        }\n    }\n    return sum\n}\n</code>\n<|/\
    \ a tags=go |>\n<| a tags=go |>\nThe package golang.org/x/text/transform/strings\
    \ contains methods for converting strings to upper case, lower case, title, and\
    \ trim. \nHere's an example of how to convert the first letter of each word to\
    \ upper case:\n<code>\nimport \"golang.org/x/text/transform/strings\"\n", "  \
    \  return len(s) * 10 + len(strings.Split(s, \"a\")) - len(strings.Split(s, \"\
    A\"))\n}\n", "    sum := 0\n    for _, c := range s {\n        if ('A' <= c &&\
    \ c <= 'Z') {\n            sum += int(c-'A')\n        }\n    }\n    return sum\n\
    }\n", "    var result int = 0\n    for _, v := range s {\n        result = result\
    \ + int(v)\n    }\n    return result\n}\n", "    result := 0\n    for _, i :=\
    \ range s {\n        if i > 'a' && i < 'z' {\n            result += int(i - 'a')\n\
    \        }\n    }\n    return result\n}", "    return 0\n}\n", "    r := 0\n \
    \   for _, s := range s {\n        if s > '9' {\n            s += 'A' - '9'\n\
    \        }\n        r += int(s)\n    }\n    return r\n}\n", "    // Write the\
    \ code here\n    sum := 0\n    for _, char := range s {\n        switch char {\n\
    \        case 'a':\n            sum += 65\n        case 'b':\n            sum\
    \ += 66\n        case 'c':\n            sum += 67\n        case 'd':\n       \
    \     sum += 68\n        case 'e':\n            sum += 69\n        case 'f':\n\
    \            sum += 70\n        case 'g':\n            sum += 71\n        case\
    \ 'h':\n            sum += 72\n        case 'i':\n            sum += 73\n    \
    \    case 'j':\n            sum += 74\n        case 'k':\n            sum += 75\n\
    \        case 'l':\n            sum += 76\n        case 'm':\n            sum\
    \ += 77\n        case 'n':\n            sum += 78\n        case 'o':\n       \
    \     sum += 79\n        case 'p':\n            sum += 80\n        case 'q':\n\
    \            sum += 81\n        case 'r':\n            sum += 82\n        case\
    \ 's':\n            sum += 83\n        case 't':\n            sum += 84\n    \
    \    case 'u':\n            sum += 85\n        case 'v':\n            sum += 86\n\
    \        case 'w':\n            sum += 87\n        case 'x':\n            sum\
    \ += 88\n        case 'y':\n            sum += 89\n        case 'z':\n       \
    \     sum += 90\n        }\n    }\n    return sum\n}\n</code>\n<|/ a |>\n<| c\
    \ |>\nWhat makes you think OP does not know C?\n<|/ c |>\n<| c |>\nI didn't ask\
    \ the OP, I just thought it might be useful to someone new to C.\n<|/ c |>\n<|\
    \ c |>\n: I doubt that. OP is newer to C, but new to programming, so he is probably\
    \ just starting out (but still not knowing much), so I think the answer would\
    \ be valuable to someone who doesn't know the basics yet.\n<|/ c |>\n<| c |>\n\
    It can be useful to someone new to C too, since it makes his code simpler and\
    \ the same amount of work no matter what\n<|/ c |>\n<| c |>\n: Of course it is,\
    \ but it is not the *best* answer, just a solution.\n<|/ c |>\n<| a |>\nYou could\
    \ try this :\n<code>\nint digitSum(char ch) {\n    int result = 0;\n    if (ch\
    \ >= '0' && ch <= '9') {\n        result = ch - '0';\n    }\n    if (ch >= 'a'\
    \ && ch <= 'z') {\n        result = result + 10 + ch - 'a';\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a tags=c,string dscore=2 |>\n<| a |>\n<code>\nint digitSum(char\
    \ *s) {\n  int sum = 0;\n", "    result := 0\n    chars := make([]rune, len(s))\n\
    \n    for idx, r := range s {\n        chars[idx] = rune(r)\n    }\n    sort.Sort(sort.Reverse(runeSlice(chars)))\n\
    \    for idx, r := range chars {\n        if r >= 65 && r <= 90 {\n          \
    \  result += r - 65\n        }\n    }\n    return result\n}\n", "    return len(strings.Split(s,\
    \ \"\"))\n}\n", "    return sum(digits(s)[0])\n}\n", "    return digitSum_test.digitSum(s)\n\
    }\n", "    var result int\n    for _, char := range s {\n        result += int(char)\n\
    \    }\n    return result\n}\n", "    var sum = 0\n    for _, v := range s {\n\
    \        sum += int(v)\n    }\n    return sum\n}\n", "    // Initialize sum and\
    \ counter\n    var sum = 0, i int\n\n    // Loop through all characters\n    for\
    \ ; i < len(s); i++ {\n        // Get current character\n        var c rune =\
    \ s[i]\n\n        // If current character is uppercase add it to sum\n       \
    \ if ('A' <= c && c <= 'Z') {\n            sum += int(c - 'A')\n        }\n  \
    \  }\n\n    return sum\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=go dscore=0 |>\n\
    A possible solution using only builtin functions (no loops or conditionals):\n\
    <code>", "    // Your code here\n    return 0\n}", "    sum := 0\n    for _, ch\
    \ := range s {\n        if ch >= 'A' && ch <= 'Z' {\n            sum += int(ch-'A'+1)\n\
    \        }\n    }\n    return sum\n}\n", "    // Write code here\n    sum := 0\n\
    \    for _, ch := range s {\n        sum += int(ch) - int('A') + 1\n    }\n  \
    \  return sum\n}\n", "    // Write code here\n    sum := 0\n    for _, char :=\
    \ range s {\n        if char >= 'A' && char <= 'Z' {\n            sum += char\
    \ - 'A' + 1\n        }\n    }\n    return sum\n}\n</code>\nI hope this helps.\n\
    <|/ a dscore=1 |>\n<| a tags=char,string,go dscore=0 |>\nYou can do it without\
    \ looping by getting substring and converting it to ASCII and summing up.\n<code>\n\
    package main\n\nimport (\n    \"fmt\"\n)\n", "    // code goes here\n    sum =\
    \ 0\n    for _, ch:= range s {\n        if ch > '9' {\n            sum += int(ch-'0')\n\
    \        } else {\n            sum += int(ch-'0')\n        }\n    }\n    return\
    \ sum\n}\n", "    sum = 0\n    for _, charVal := range s {\n        if charVal\
    \ >= 'a' && charVal <= 'z' {\n            sum += int(charVal - 'a')\n        }\n\
    \    }\n    return sum\n}\n", "    var result int\n    for _, x := range s {\n\
    \        if x != x {\n            result += int(string(x)) + int(string([]rune{x,\
    \ 'a'})) + int(string([]rune{x, 'A'}))\n        }\n    }\n    return result\n\
    }\n", "    sum := 0\n    for _, v := range s {\n        sum += int(v) - 32\n \
    \   }\n    return sum\n}\n", "    return digitSum_test.digitSum(s)\n}\n", "  \
    \  result := 0\n    for _, char := range s {\n        result += (int(char) - 48)\n\
    \    }\n    return result\n}\n", "    var sum = 0\n    for _, r := range s {\n\
    \        if r >= 'a' && r <= 'z' {\n            sum += int(r - 'a')\n        }\n\
    \    }\n    return sum\n}", "    var sum int\n    for _, v := range s {\n    \
    \    if v > 47 && v <= 51 {\n            sum += int(v)\n        }\n    }\n   \
    \ return sum\n}", "    var sum int\n    for _, r := range s {\n        if r >\
    \ 97 {\n            sum += int(r) - 96\n        } else {\n            sum += int(r)\n\
    \        }\n    }\n    return sum\n}\n", "    if len(s) <= 0 {\n        return\
    \ 0\n    }\n    \n    return int('0' + s[0]) + digitSum(s[1:])\n}", "    result\
    \ := 0\n    for _, item := range s {\n        if item >= 'A' && item <= 'Z' {\n\
    \            result += int(item - 'A')\n        }\n    }\n    return result\n\
    }\n", "    return sum(digits, s)\n}\n", "    fmt.Println(s)\n    total := 0\n\
    \    for _, letter := range s {\n        if letter == 'A' || letter == 'a' {\n\
    \            total += 65\n        }\n    }\n    return total\n}\n", "    total\
    \ := 0\n    for _, val := range s {\n        if val > '9' {\n            total\
    \ += 10 - val\n        } else {\n            total += val\n        }\n    }\n\
    \    return total\n}\n", "    // TODO: write your code in here\n    return 0\n\
    }\n", "    var sum int = 0\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'A' {\n            sum += 26\n        } else {\n            sum += s[i]-'A'\
    \ + 1\n        }\n    }\n    return sum\n}\n", "    sum, i := 0, 0\n    for _,\
    \ c := range s {\n        if c == 'A' || c == 'a' {\n            sum += (65 -\
    \ i) * 10\n        }\n        if c == 'B' || c == 'b' {\n            sum += (97\
    \ - i) * 10\n        }\n        i++\n    }\n    return sum\n}\n", "    var sum\
    \ = 0\n    for _, ch := range s {\n        if ('A' <= ch && ch <= 'Z') sum +=\
    \ int(ch)\n    }\n    return sum\n}\n", "    var result int\n    for i, r := range\
    \ s {\n        if r < 'a' || r > 'z' {\n            continue\n        }\n    \
    \    result += int(r) - int('A')\n    }\n    return result\n}\n", "    return\
    \ 0 // TODO: implement\n}\n", "    result := 0\n    for _, character := range\
    \ s {\n        if characterUpper := 'A' <= character && character <= 'Z'; characterUpper\
    \ {\n            result += int(character) - int(characterUpper)\n        }\n \
    \   }\n    return result\n}\n", "    var result int = 0\n    chars := []rune(s)\n\
    \    for _, char := range chars {\n        result += int(char) - int(rune('A'))\n\
    \    }\n    return result\n}\n", "    sum := 0\n    for _, character := range\
    \ s {\n        if character>='A' && character<='Z' {\n            sum += (character-'A')\n\
    \        }\n    }\n    return sum\n}\n", "    // Write code here\n    var sum\
    \ = 0;\n    for _, char := range s {\n        sum += int(char)\n    }\n    return\
    \ sum\n}\n", "    sum := 0\n    for _, c := range s {\n        sum += int(c)\n\
    \    }\n    return sum\n}", "    sum := 0\n    for i := 0; i < len(s); i++ {\n\
    \        if s[i] >= 'a' && s[i] <= 'z' {\n            sum += int(s[i] - 'a')\n\
    \        } else {\n            sum -= int(s[i] - '0')\n        }\n    }\n    return\
    \ sum\n}", "    sum := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] ==\
    \ 'A' || s[i] == 'B' || s[i] == 'C' || s[i] == 'D' || s[i] == 'E' || s[i] == 'F'\
    \ || s[i] == 'G' || s[i] == 'H' || s[i] == 'I' || s[i] == 'J' || s[i] == 'K' ||\
    \ s[i] == 'L' || s[i] == 'M' || s[i] == 'N' || s[i] == 'O' || s[i] == 'P' || s[i]\
    \ == 'Q' || s[i] == 'R' || s[i] == 'S' || s[i] == 'T' || s[i] == 'U' || s[i] ==\
    \ 'V' || s[i] == 'W' || s[i] == 'X' || s[i] == 'Y' || s[i] == 'Z' {\n        \
    \    sum += s[i]-'A' + 1\n        }\n    }\n    return sum\n}\n", "    // Start\
    \ coding here\n    var sum int = 0\n    for i := 0; i < len(s); i++ {\n      \
    \  // fmt.Print(s[i])\n        sum += int(s[i]) - 48\n    }\n    return sum\n\
    }\n", "    return sum(digitSumASCII(s))\n}\n", "    return len(s) - strings.Count(s,\
    \ \"[A-Z]\") // return lenth of string minus number of capital letters\n}\n",
  "    total := 0\n    for _, char := range s {\n        if char >= 'a' && char <=\
    \ 'z' {\n            total += char - 'a'\n        }\n    }\n    return total\n\
    }\n</code>\n<|/ a tags=go |>\n<| c |>\nThanks for the solution !!\n<|/ c |>\n\
    <| a |>\nGo has built in functions to make your life easier\n<code>\npackage main\n\
    \nimport (\n    \"fmt\"\n    \"strings\"\n)\n", "    var result int = 0\n    var\
    \ temp int\n    for _, v := range s {\n        temp = v\n        if v > 9 {\n\
    \            temp = v - 10\n        }\n        result += temp\n    }\n    return\
    \ result\n}\n", "    // TODO\n    fmt.Println(s)\n    return 0\n}", "    result\
    \ := 0\n    for _, i := range s {\n        if i >= 'a' && i <= 'z' {\n       \
    \     result += int(i - 'a')\n        }\n    }\n    return result\n}\n", "   \
    \ var result int = 0\n    for _, char := range s {\n        if char >= '0' &&\
    \ char <= '9' {\n            result *= 10\n            result += int(char - '0')\n\
    \        }\n    }\n    return result\n}\n", "    var sum int = 0\n    for _, char\
    \ := range s {\n        sum += int(char) - 65\n    }\n    return sum\n}\n", " \
    \   var result int = 0\n    max := 0\n    for _, char := range s {\n        charCode\
    \ := char.ToInt()\n        if charCode < 32 {\n            result += charCode\
    \ - 32\n        }\n        if charCode > max {\n            max = charCode\n \
    \       }\n    }\n    return result + max\n}\n", "    // TODO: Write your code\
    \ here\n    return 0\n}\n</code>\nTest Suite\n<code>\npackage digitSum_test\n\n\
    import (\n    \"testing\"\n    \"fmt\"\n)\n", "    // Your code here\n    var\
    \ sum int = 0\n    for _, char := range s {\n        if ('A' <= char && char <=\
    \ 'Z') || (char >= 'a' && char <= 'z') {\n            sum += int(char)\n     \
    \   }\n    }\n    return sum\n}\n", "    sum := 0\n    for _, char := range s\
    \ {\n        if char == 'A' || char == 'B' || char == 'C' || char == 'D' || char\
    \ == 'E' || char == 'F' || char == 'G' || char == 'H' || char == 'I' || char ==\
    \ 'J' || char == 'K' || char == 'L' || char == 'M' || char == 'N' || char == 'O'\
    \ || char == 'P' || char == 'Q' || char == 'R' || char == 'S' || char == 'T' ||\
    \ char == 'U' || char == 'V' || char == 'W' || char == 'X' || char == 'Y' || char\
    \ == 'Z' {\n            sum += int(char)\n        }\n    }\n    return sum\n}\n",
  "    var sum int = 0\n    for _, i := range s {\n        if i < '0' || i > '9' {\n\
    \            continue\n        }\n        sum += int(i - '0')\n    }\n    return\
    \ sum\n}\n", "    return digitSum_test.CountUpperCase(string(s))\n}\n", "    result\
    \ := 0\n    for _, x := range s {\n        if x >= 'a' && x <= 'z' {\n       \
    \     result += x-'a'\n        }\n    }\n    return result\n}\n", "    ans :=\
    \ 0\n    for _, v := range s {\n        if v >= '0' && v <= '9' {\n          \
    \  ans += int(v)\n        }\n    }\n    return ans\n}\n", "    output := 0\n \
    \   c := 0\n    for _, r := range s {\n        c = c + int(r)\n    }\n    if c\
    \ > 0 {\n        output = output + int(c % 10)\n    }\n    return output\n}\n",
  "    n := 0\n    for _, char := range s {\n        if char >= 'a' && char <= 'z'\
    \ {\n            n += char - 'a'\n        }\n    }\n    return n\n}\n", "    n\
    \ := 0\n    for _, i := range s {\n        if i == ' ' || i == '.' {\n       \
    \     continue\n        }\n        if i > 96 && i <= 123 {\n            n = n\
    \ + int(i)\n        }\n    }\n    return n\n}\n", "    if s == \"\" {\n      \
    \  return 0\n    }\n    digits := map[rune]int{}\n    for _, r := range s {\n\
    \        digits[r]++\n    }\n    sum := 0\n    for _, v := range digits {\n  \
    \      sum += v\n    }\n    return sum\n}\n", "    var sum = 0\n    for _, v :=\
    \ range s {\n        sum += int(v)\n    }\n    return sum\n}\n", "    sum = 0\n\
    \    ch := s[0]\n    for i := 1; i < len(s); i++ {\n        ch = s[i]\n      \
    \  if ch >= 'a' && ch <= 'z' {\n            sum += int(ch - 'a')\n        }\n\
    \    }\n    return sum\n}\n", "    return sum([...]int{'0', '1', '2', '3', '4',\
    \ '5', '6', '7', '8', '9'}, s)\n}\n", "    // Your code here\n    if s == \"\"\
    \ {\n        return 0\n    }\n    var result int = 0\n    for _, c := range s\
    \ {\n        if c > 47 && c < 58 {\n            result += int(c - 48)\n      \
    \  }\n    }\n    return result\n}\n", "    var result int = 0\n\n    for _, char\
    \ := range s {\n        result += (char)\n    }\n\n    return result\n}\n", " \
    \   return 0\n}\n", "    // Solution here\n}\n", "    sum := 0\n    for _, r :=\
    \ range s {\n        sum += int(rune(r) - '0')\n    }\n    return sum\n}\n", " \
    \   var sum = 0\n\n    for _, char := range s {\n        sum += int(char)\n  \
    \  }\n\n    return sum\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
