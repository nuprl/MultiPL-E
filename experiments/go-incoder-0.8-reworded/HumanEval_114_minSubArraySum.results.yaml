language: go_test.go
name: HumanEval_114_minSubArraySum
results:
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return -1\n    }\n    var minSum int\n\
    \    for i := 0; i < len(nums); i++ {\n        sum := 0\n        for j := i; j\
    \ < len(nums); j++ {\n            sum += nums[j]\n        }\n        if sum <\
    \ minSum {\n            minSum = sum\n        }\n    }\n    return minSum\n}\n\
    \nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n\
    \     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpnyv4ijxr_test.go:56: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__5 (0.00s)\n        tmpnyv4ijxr_test.go:56:\
    \ expected '%!s(int=-6)', got '%!s(int=-5)'\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmpnyv4ijxr_test.go:56: expected '%!s(int=-6)', got '%!s(int=-5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__7 (0.00s)\n        tmpnyv4ijxr_test.go:56:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__8\
    \ (0.00s)\n        tmpnyv4ijxr_test.go:56: expected '%!s(int=-33)', got '%!s(int=-4)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__10 (0.00s)\n        tmpnyv4ijxr_test.go:56:\
    \ expected '%!s(int=7)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075626
- exit_code: 2
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    // Your code here\n    if nums == nil {\n        return 0\n    }\n\
    \n    if len(nums) == 0 {\n        return 0\n    }\n\n    // Sort and remove duplicates\n\
    \    sort.Ints(nums)\n    sort.Ints(nums[0 : len(nums)-1])\n    nums = nums[:len(nums)-1]\n\
    \n    // Iterate over original list\n    sum, i := 0, 0\n    for _, n := range\
    \ nums {\n        sum += n\n        i++\n\n        // Find minimal sum\n     \
    \   if sum < 0 {\n            return sum\n        }\n\n        if sum > 0 {\n\
    \            if i > 1 {\n                sum -= nums[i-2]\n            }\n   \
    \     }\n    }\n\n    return sum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n\
    \  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpscsarjzx_test.go:26:5: undefined: sort

    /tmp/tmpscsarjzx_test.go:27:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075626
- exit_code: 2
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    // TODO: Write a better solution\n    sort.Sort(nums)\n    return\
    \ nums[len(nums)-1]\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp62zlxp0a_test.go:17:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075626
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    // Base case is when nums is empty\n    if len(nums) == 0 {\n   \
    \     return 0\n    }\n\n    // Initialize min with the first element of nums\n\
    \    min := nums[0]\n\n    // Starting from second element of nums\n    for i\
    \ := 1; i < len(nums); i++ {\n        // Get the current sum which is min so far\n\
    \        sum := min + nums[i]\n\n        // Update min if current sum is greater\
    \ than the existing min\n        if sum > min {\n            min = sum\n     \
    \   }\n    }\n    return min\n}\n</code>\n<|/ a |>\n<| c |>\nWhile this code may\
    \ answer the question, providing additional context regarding how and/or why it\
    \ solves the problem would improve the answer's long-term value.\n<|/ c |>\n<|\
    \ c |>\nPlease explain what your code does. What does `range` do? What is `range`\
    \ for? What does `minSubArraySum` do? What does `i` do? What does `sum` do? What\
    \ does `i` do?\n<|/ c |>\n<| c |>\nWhat is `range` for? What is `range` for? What\
    \ does `minSubArraySum` do? What does `i` do? What does `sum` do? What does `i`\
    \ do?\n<|/ c |>\n<| c |>\n`range` is a built-in function in Python for defining\
    \ iterators. See https://docs.python.org/3/library/functions.html#range.\n<|/\
    \ c |>\n<| c |>\nWhat is `range` for? What is `range` for? What does `minSubArraySum`\
    \ do? What does `i` do? What does `sum` do? What does `i` do?\n<|/ c |>\n<| a\
    \ tags=go,arrays,algorithm dscore=4 |>\nMy solution in golang:\n<code>\npackage\
    \ main\n\nimport (\n    \"fmt\"\n)\n\nfunc TestMinsubarraysum(t *testing.T) {\n\
    \  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp8ereq3c1_test.go:36:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075625
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if nums == nil {\n        return -1\n    }\n    s := 0\n    for _,\
    \ v := range nums {\n        s += v\n    }\n    if s > 0 {\n        return s\n\
    \    }\n    return -1\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpq2rsuhks_test.go:53: expected '%!s(int=1)', got '%!s(int=16)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpq2rsuhks_test.go:53:\
    \ expected '%!s(int=-6)', got '%!s(int=-1)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpq2rsuhks_test.go:53: expected '%!s(int=-14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__3 (0.00s)\n        tmpq2rsuhks_test.go:53:\
    \ expected '%!s(int=-9999999999999999)', got '%!s(int=-1)'\n    --- FAIL: TestMinsubarraysum/test_num__4\
    \ (0.00s)\n        tmpq2rsuhks_test.go:53: expected '%!s(int=0)', got '%!s(int=1000030)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__5 (0.00s)\n        tmpq2rsuhks_test.go:53:\
    \ expected '%!s(int=-6)', got '%!s(int=-1)'\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmpq2rsuhks_test.go:53: expected '%!s(int=-6)', got '%!s(int=99)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__7 (0.00s)\n        tmpq2rsuhks_test.go:53:\
    \ expected '%!s(int=3)', got '%!s(int=49)'\n    --- FAIL: TestMinsubarraysum/test_num__8\
    \ (0.00s)\n        tmpq2rsuhks_test.go:53: expected '%!s(int=-33)', got '%!s(int=96)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__9 (0.00s)\n        tmpq2rsuhks_test.go:53:\
    \ expected '%!s(int=-10)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075626
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    // Write your code here.\n    return -1\n}\n</cell>\n<cell>\n# Run\
    \ this cell to check if your solution matches ours.\nmaxSubArraySum([]int{2, 3,\
    \ 4, 1, 2, 4})\n</cell>\n<cell>\n# Run this cell to check if your solution matches\
    \ ours.\nminSubArraySum([]int{-1, -2, -3})\n</cell>\n<text>\nSolution\nWrite a\
    \ function that takes in a list of integers and returns the minimum sum of a non-empty\
    \ sub-list of that list.\n\n\n</text>\n<cell>\n# Write your function below:\n\n\
    def minSubArraySum(nums):\n    # Write your code here.\n    return -1\n</cell>\n\
    <text>\nTest your function by calling it with the values below.\n\nInput:\n[4,\
    \ 2, 3, 1]\n\nOutput:\n3\n\n\n</text>\n<cell>\nminSubArraySum([4, 2, 3, 1])\n\
    </cell>\n<text>\nExpected:\n3\n\n\n</text>\n<text>\nGreat! You are done. Ready\
    \ to move on to part 2.\n\n\n</text>\n<text>\nPart 2: Palindromes\nYou are given\
    \ a string s, you are to determine if it is a palindrome. Palindromes are words\
    \ that read the same backwards. For example, \"radar\" is a palindrome.\n\nTo\
    \ define a palindrome, you are given a non-empty string and you have to determine\
    \ if it is a palindrome.\n\nExample 1:\nInput: \"A man, a plan, a canal: Panama\"\
    \n\nOutput: True\n\nExplanation: \"mana\" is a palindrome.\n\n\nExample 2:\nInput:\
    \ \"race a car\"\n\nOutput: False\n\nExplanation: \"racecar\" is not a palindrome.\n\
    \n\nNote:\n\nThe input string will only contain lower case letters and spaces.\n\
    The string length will be between 1 and 1,000,000 characters.\nThe input string\
    \ will not contain leading or trailing spaces or punctuation marks.\nThe only\
    \ character used will be lower case letters and spaces.\n\n\n</text>\n<text>\n\
    Solution\nWrite a function that takes a string and determines if it is a palindrome.\n\
    \n\n</text>\n<cell>\ndef isPalindrome(s):\n    # Write your code here.\n    return\
    \ -1\n</cell>\n<text>\nTest your function by calling it with the values below.\n\
    \nInput:\n\"A man, a plan, a canal: Panama\"\n\nOutput:\nTrue\n\n\n</text>\n<cell>\n\
    isPalindrome(\"A man, a plan, a canal: Panama\")\n</cell>\n<text>\nExpected:\n\
    True\n\n\n</text>\n<text>\nGreat! You are done. Ready to \nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_kaf8kur_test.go:19:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075625
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if nums == nil || len(nums) == 0 {\n        return 0\n    }\n   \
    \ min := nums[0]\n    for _, v := range nums {\n        if v < min {\n       \
    \     min = v\n        }\n    }\n    return min\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__1\
    \ (0.00s)\n        tmp1az95dxb_test.go:52: expected '%!s(int=-6)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__2 (0.00s)\n        tmp1az95dxb_test.go:52:\
    \ expected '%!s(int=-14)', got '%!s(int=-10)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmp1az95dxb_test.go:52: expected '%!s(int=-6)', got '%!s(int=-5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmp1az95dxb_test.go:52:\
    \ expected '%!s(int=-6)', got '%!s(int=-5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075626
- exit_code: 2
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    min := Int64(0)\n    max := Int64(0)\n    for _, v := range nums\
    \ {\n        if v < min {\n            min = v\n        }\n        if v > max\
    \ {\n            max = v\n        }\n    }\n    return max\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxjwmcul7_test.go:16:12: undefined: Int64

    /tmp/tmpxjwmcul7_test.go:17:12: undefined: Int64

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075626
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) <= 1 {\n        return nums[0]\n    }\n    total :=\
    \ nums[0]\n    for i := 1; i < len(nums); i++ {\n        total += nums[i]\n  \
    \      if total < 0 {\n            total = 0\n        }\n    }\n    return total\n\
    }\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmptw0c9bf7_test.go:53: expected '%!s(int=1)', got '%!s(int=16)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmptw0c9bf7_test.go:53:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmptw0c9bf7_test.go:53: expected '%!s(int=-14)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmptw0c9bf7_test.go:53:\
    \ expected '%!s(int=0)', got '%!s(int=1000030)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmptw0c9bf7_test.go:53: expected '%!s(int=-6)', got '%!s(int=5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmptw0c9bf7_test.go:53:\
    \ expected '%!s(int=-6)', got '%!s(int=99)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmptw0c9bf7_test.go:53: expected '%!s(int=3)', got '%!s(int=49)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmptw0c9bf7_test.go:53:\
    \ expected '%!s(int=-33)', got '%!s(int=96)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmptw0c9bf7_test.go:53: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075626
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    // base case: base cases are the hardest to find bugs.\n    if len(nums)\
    \ == 0 {\n        return 0\n    }\n\n    result := nums[0]\n    for _, n := range\
    \ nums[1:] {\n        result += n\n    }\n    return result\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmp51kajb2o_test.go:52: expected '%!s(int=1)', got '%!s(int=16)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmp51kajb2o_test.go:52:\
    \ expected '%!s(int=0)', got '%!s(int=1000030)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmp51kajb2o_test.go:52: expected '%!s(int=-6)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmp51kajb2o_test.go:52:\
    \ expected '%!s(int=-6)', got '%!s(int=99)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmp51kajb2o_test.go:52: expected '%!s(int=3)', got '%!s(int=49)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmp51kajb2o_test.go:52:\
    \ expected '%!s(int=-33)', got '%!s(int=96)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmp51kajb2o_test.go:52: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075626
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    result := nums[0]\n    for _, num := range nums {\n        if num\
    \ < result {\n            result = num\n        }\n    }\n    return result\n\
    }\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__1\
    \ (0.00s)\n        tmpapjw4w6y_test.go:49: expected '%!s(int=-6)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__2 (0.00s)\n        tmpapjw4w6y_test.go:49:\
    \ expected '%!s(int=-14)', got '%!s(int=-10)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpapjw4w6y_test.go:49: expected '%!s(int=-6)', got '%!s(int=-5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpapjw4w6y_test.go:49:\
    \ expected '%!s(int=-6)', got '%!s(int=-5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075626
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    m := make(map[int]int, len(nums))\n    for i, v := range nums {\n\
    \        m[v] = i\n    }\n    min := len(nums) - 1\n    for i, v := range nums\
    \ {\n        for j := i + 1; j < len(nums); j++ {\n            if nums[j] < v\
    \ {\n                min = minSubArraySum(nums[:j])\n                break\n \
    \           }\n            min = m[nums[j]]\n        }\n    }\n    return min\n\
    }\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmp426hj0cn_test.go:57: expected '%!s(int=1)', got '%!s(int=5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmp426hj0cn_test.go:57:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmp426hj0cn_test.go:57: expected '%!s(int=-14)', got '%!s(int=3)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__3 (0.00s)\n        tmp426hj0cn_test.go:57:\
    \ expected '%!s(int=-9999999999999999)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__4\
    \ (0.00s)\n        tmp426hj0cn_test.go:57: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__5 (0.00s)\n        tmp426hj0cn_test.go:57:\
    \ expected '%!s(int=-6)', got '%!s(int=3)'\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmp426hj0cn_test.go:57: expected '%!s(int=-6)', got '%!s(int=4)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__7 (0.00s)\n        tmp426hj0cn_test.go:57:\
    \ expected '%!s(int=3)', got '%!s(int=5)'\n    --- FAIL: TestMinsubarraysum/test_num__8\
    \ (0.00s)\n        tmp426hj0cn_test.go:57: expected '%!s(int=-33)', got '%!s(int=4)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__9 (0.00s)\n        tmp426hj0cn_test.go:57:\
    \ expected '%!s(int=-10)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__10\
    \ (0.00s)\n        tmp426hj0cn_test.go:57: expected '%!s(int=7)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__11 (0.00s)\n        tmp426hj0cn_test.go:57:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075626
- exit_code: 2
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    min := INT_MAX\n    last := 0\n\n    for _, v := range nums {\n \
    \       if v < min {\n            min = v\n        }\n        last += 1\n    }\n\
    \n    return min + last\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppobcr2it_test.go:16:12: undefined: INT_MAX

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075626
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    // base case\n    if len(nums) == 0 {\n        return -1\n    }\n\
    \    // initialize minimum\n    minimum := nums[0]\n    for i := 0; i < len(nums);\
    \ i++ {\n        if nums[i] > minimum {\n            minimum = nums[i]\n     \
    \   }\n    }\n    // find the sum of all the elements in the original list\n \
    \   total := 0\n    for _, num := range nums {\n        total += num\n    }\n\
    \    // iterate over nums and compare the sum to minimum\n    for i := 0; i <\
    \ len(nums); i++ {\n        if nums[i] > minimum {\n            total -= nums[i]\n\
    \            minimum = total\n        } else {\n            total += nums[i]\n\
    \        }\n    }\n    return minimum\n}\nfunc TestMinsubarraysum(t *testing.T)\
    \ {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpoa8tbntv_test.go:67: expected '%!s(int=1)', got '%!s(int=4)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpoa8tbntv_test.go:67:\
    \ expected '%!s(int=-6)', got '%!s(int=-1)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpoa8tbntv_test.go:67: expected '%!s(int=-14)', got '%!s(int=2)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmpoa8tbntv_test.go:67:\
    \ expected '%!s(int=0)', got '%!s(int=1000000)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpoa8tbntv_test.go:67: expected '%!s(int=-6)', got '%!s(int=10)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpoa8tbntv_test.go:67:\
    \ expected '%!s(int=-6)', got '%!s(int=100)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpoa8tbntv_test.go:67: expected '%!s(int=3)', got '%!s(int=13)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpoa8tbntv_test.go:67:\
    \ expected '%!s(int=-33)', got '%!s(int=100)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpoa8tbntv_test.go:67: expected '%!s(int=-1)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075626
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    min := nums[0]\n\
    \    for _, v := range nums {\n        if v < min {\n            min = v\n   \
    \     }\n    }\n    return min\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n\
    \  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__1\
    \ (0.00s)\n        tmp14z80bft_test.go:52: expected '%!s(int=-6)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__2 (0.00s)\n        tmp14z80bft_test.go:52:\
    \ expected '%!s(int=-14)', got '%!s(int=-10)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmp14z80bft_test.go:52: expected '%!s(int=-6)', got '%!s(int=-5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmp14z80bft_test.go:52:\
    \ expected '%!s(int=-6)', got '%!s(int=-5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075370
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    // Find the length of the input array\n    var arrayLength int =\
    \ len(nums)\n    \n    // Find the minimum sum of the left half of the input array\n\
    \    var leftHalf int\n    leftHalf = minSum(arrayLength, nums[:arrayLength/2])\n\
    \    \n    // Find the minimum sum of the right half of the input array\n    var\
    \ rightHalf int\n    rightHalf = minSum(arrayLength, nums[arrayLength/2:])\n\n\
    \    // Find the maximum sum of any non-empty sub-array of the input array\n \
    \   // that is less than or equal to the minimum sum of the left half of the input\
    \ array\n    var maxSumLessLeftHalf int\n    \n    // Find the maximum sum of\
    \ any non-empty sub-array of the input array\n    // that is less than or equal\
    \ to the minimum sum of the right half of the input array\n    var maxSumLessRightHalf\
    \ int\n    \n    for i := 0; i < arrayLength; i++ {\n        // If no non-empty\
    \ sub-arrays with length smaller than the minimum sum of the left half\n     \
    \   // are less than the current minimum sum of the left half, add the current\
    \ element \n        // to the left half\n        if nums[i] <= leftHalf {\n  \
    \          leftHalf += nums[i]\n            continue\n        }\n        \n  \
    \      // If no non-empty sub-arrays with length smaller than the minimum sum\
    \ of the right half\n        // are less than the current maximum sum of the right\
    \ half, add the current element \n        // to the right half\n        if nums[i]\
    \ <= rightHalf {\n            rightHalf += nums[i]\n            continue\n   \
    \     }\n        \n        // If the current element is not a number or is less\
    \ than the minimum sum of the left half\n        // or the minimum sum of the\
    \ right half, then check if the array is not empty\n        if nums[i] != 0 {\n\
    \            // If it's less than the minimum sum of the left half, then check\
    \ if the array is empty\n            // and subtract that number from the minimum\
    \ sum of the left half and continue with the loop\n            if nums[i] <= leftHalf\
    \ {\n                leftHalf -= nums[i]\n                continue\n         \
    \   }\n            \n            // If it's less than the minimum sum of the right\
    \ half, then check if the array is empty\n            // and subtract that number\
    \ from the maximum sum of the right half and continue with the loop\n        \
    \    if nums[i] <= rightHalf {\n                rightHalf -= nums[i]\n       \
    \         continue\n            }\n            \n            // If it's greater\
    \ than the minimum sum of the left half, add the current element\n           \
    \ // to the left half\n            if nums[i] > leftHalf {\n                leftHalf\
    \ += nums[i]\n                continue\n            }\n            \n        \
    \    // If it's greater than the minimum sum of the right half, add the current\
    \ element\n            // to the right half\n            if nums[i] > rightHalf\
    \ {\n                rightHalf += nums[i]\n\nfunc TestMinsubarraysum(t *testing.T)\
    \ {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpoquf5y3i_test.go:81:6: expected ''('', found TestMinsubarraysum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075625
- exit_code: 2
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    // Initialize the result with the minimum sum.\n    var result int\n\
    \    \n    // Keep a track of the smallest sum found in any sub-list.\n    var\
    \ smallestSum = INT_MIN\n\n    // Keep a track of the number of elements in nums.\n\
    \    var numElementsInList int\n    \n    // Iterate over the sub-lists.\n   \
    \ for _, n := range nums {\n        // If this number does not fit into the current\
    \ sub-list, then\n        // move onto the next number.\n        if numElementsInList\
    \ >= len(nums) {\n            break\n        }\n        \n        // Add the number\
    \ to the current sub-list and decrease the number\n        // of elements we have\
    \ left to keep track of the sum.\n        result += n\n        numElementsInList--\n\
    \        \n        // If we have found a new smallest sum, then reset the result\
    \ to\n        // the current sub-list sum.\n        if result < smallestSum {\n\
    \            smallestSum = result\n        }\n    }\n    \n    // Return the result\
    \ if the smallest sum could not be found in any sub-list.\n    if smallestSum\
    \ == INT_MIN {\n        return 0\n    }\n    \n    // Return the smallest sum\
    \ if possible.\n    return smallestSum\n}\n\nfunc TestMinsubarraysum(t *testing.T)\
    \ {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq8gl_682_test.go:20:23: undefined: INT_MIN

    /tmp/tmpq8gl_682_test.go:46:23: undefined: INT_MIN

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075626
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    max := nums[0]\n    min := nums[0]\n    for _, v := range nums[1:]\
    \ {\n        if v < min {\n            min = v\n        }\n        if v > max\
    \ {\n            max = v\n        }\n    }\n    return min + max\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmp4oiggtii_test.go:53: expected '%!s(int=1)', got '%!s(int=5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmp4oiggtii_test.go:53:\
    \ expected '%!s(int=-6)', got '%!s(int=-4)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmp4oiggtii_test.go:53: expected '%!s(int=-14)', got '%!s(int=-8)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__3 (0.00s)\n        tmp4oiggtii_test.go:53:\
    \ expected '%!s(int=-9999999999999999)', got '%!s(int=-19999999999999998)'\n \
    \   --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmp4oiggtii_test.go:53:\
    \ expected '%!s(int=0)', got '%!s(int=1000000)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmp4oiggtii_test.go:53: expected '%!s(int=-6)', got '%!s(int=5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmp4oiggtii_test.go:53:\
    \ expected '%!s(int=-6)', got '%!s(int=95)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmp4oiggtii_test.go:53: expected '%!s(int=3)', got '%!s(int=16)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmp4oiggtii_test.go:53:\
    \ expected '%!s(int=-33)', got '%!s(int=67)'\n    --- FAIL: TestMinsubarraysum/test_num__9\
    \ (0.00s)\n        tmp4oiggtii_test.go:53: expected '%!s(int=-10)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__10 (0.00s)\n        tmp4oiggtii_test.go:53:\
    \ expected '%!s(int=7)', got '%!s(int=14)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmp4oiggtii_test.go:53: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075626
- exit_code: null
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    // Write your code here.\n    i := 0\n    sum := nums[0]\n    for\
    \ i < len(nums) {\n        sum += nums[i]\n        if sum < nums[i] && i != 0\
    \ {\n            sum -= nums[i]\n            i = 0\n        } else {\n       \
    \     i += 1\n        }\n    }\n    return sum\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660075637
- exit_code: 2
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if nums == nil || len(nums) == 0 {\n        return math.MaxInt32\n\
    \    }\n    sub := nums[0:len(nums)-1]\n    result := 0\n    for i := 0; i < len(sub);\
    \ i++ {\n        result += sub[i]\n        if result < 0 {\n            result\
    \ = -result\n        }\n    }\n    return result\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjkxmeqiv_test.go:17:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075626
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    var minNum int = nums[0]\n    for _, num := range nums {\n      \
    \  if minNum < num {\n            minNum = num\n        }\n    }\n    return minNum\n\
    }\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpnso03gy8_test.go:49: expected '%!s(int=1)', got '%!s(int=4)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpnso03gy8_test.go:49:\
    \ expected '%!s(int=-6)', got '%!s(int=-1)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpnso03gy8_test.go:49: expected '%!s(int=-14)', got '%!s(int=2)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmpnso03gy8_test.go:49:\
    \ expected '%!s(int=0)', got '%!s(int=1000000)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpnso03gy8_test.go:49: expected '%!s(int=-6)', got '%!s(int=10)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpnso03gy8_test.go:49:\
    \ expected '%!s(int=-6)', got '%!s(int=100)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpnso03gy8_test.go:49: expected '%!s(int=3)', got '%!s(int=13)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpnso03gy8_test.go:49:\
    \ expected '%!s(int=-33)', got '%!s(int=100)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpnso03gy8_test.go:49: expected '%!s(int=-1)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075626
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    var minSum, sum int\n    for _, num := range nums {\n        sum\
    \ += num\n        if sum < minSum {\n            minSum = sum\n        }\n   \
    \ }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmp7n3yhawy_test.go:50: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmp7n3yhawy_test.go:50:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmp7n3yhawy_test.go:50: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmp7n3yhawy_test.go:50:\
    \ expected '%!s(int=-33)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__10\
    \ (0.00s)\n        tmp7n3yhawy_test.go:50: expected '%!s(int=7)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__11 (0.00s)\n        tmp7n3yhawy_test.go:50:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075626
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    n := len(nums)\n    if n <= 0 {\n        return 0\n    }\n    i :=\
    \ n - 1\n    max := nums[i]\n    for i < len(nums) {\n        max += nums[i]\n\
    \        i -= 1\n        if max == nums[0] {\n            nums[i] = nums[i]\n\
    \            i -= 1\n        }\n    }\n    return max\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\npanic: runtime error: index out of\
    \ range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\n\
    goroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.minSubArraySum(...)\n\t/tmp/tmpw7yzq931_test.go:23\n\
    command-line-arguments_test.TestMinsubarraysum(0x0?)\n\t/tmp/tmpw7yzq931_test.go:40\
    \ +0xc65\ntesting.tRunner(0xc0000da340, 0x528f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075626
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n\n    var minSum =\
    \ nums[0]\n\n    for _, num := range nums {\n        minSum = minSum - num\n \
    \       if minSum < 0 {\n            minSum = 0\n        }\n    }\n\n    return\
    \ minSum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmp967t8vus_test.go:56: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmp967t8vus_test.go:56:\
    \ expected '%!s(int=-6)', got '%!s(int=5)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmp967t8vus_test.go:56: expected '%!s(int=-14)', got '%!s(int=13)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__3 (0.00s)\n        tmp967t8vus_test.go:56:\
    \ expected '%!s(int=-9999999999999999)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmp967t8vus_test.go:56: expected '%!s(int=-6)', got '%!s(int=5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmp967t8vus_test.go:56:\
    \ expected '%!s(int=-6)', got '%!s(int=5)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmp967t8vus_test.go:56: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmp967t8vus_test.go:56:\
    \ expected '%!s(int=-33)', got '%!s(int=4)'\n    --- FAIL: TestMinsubarraysum/test_num__9\
    \ (0.00s)\n        tmp967t8vus_test.go:56: expected '%!s(int=-10)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__10 (0.00s)\n        tmp967t8vus_test.go:56:\
    \ expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmp967t8vus_test.go:56: expected '%!s(int=-1)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075626
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) < 1 {\n        return 0\n    }\n\n    sum := nums[0]\n\
    \    lastSum := nums[0]\n\n    for _, num := range nums[1:] {\n        if sum\
    \ > num {\n            sum = lastSum\n        }\n\n        lastSum = num\n   \
    \ }\n\n    return sum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__1\
    \ (0.00s)\n        tmpxl47j3c__test.go:58: expected '%!s(int=-6)', got '%!s(int=-2)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__2 (0.00s)\n        tmpxl47j3c__test.go:58:\
    \ expected '%!s(int=-14)', got '%!s(int=2)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpxl47j3c__test.go:58: expected '%!s(int=-6)', got '%!s(int=10)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpxl47j3c__test.go:58:\
    \ expected '%!s(int=-6)', got '%!s(int=10)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpxl47j3c__test.go:58: expected '%!s(int=-1)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075627
- exit_code: 2
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    return minSubArraySumHelper(nums, 0, len(nums))\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpneqssihp_test.go:16:12: undefined: minSubArraySumHelper

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075627
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    // TODO: Finish this method\n    \n    // Your code here\n    \n\
    \    return -1\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmp7m6gc3vz_test.go:47: expected '%!s(int=1)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmp7m6gc3vz_test.go:47:\
    \ expected '%!s(int=-6)', got '%!s(int=-1)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmp7m6gc3vz_test.go:47: expected '%!s(int=-14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__3 (0.00s)\n        tmp7m6gc3vz_test.go:47:\
    \ expected '%!s(int=-9999999999999999)', got '%!s(int=-1)'\n    --- FAIL: TestMinsubarraysum/test_num__4\
    \ (0.00s)\n        tmp7m6gc3vz_test.go:47: expected '%!s(int=0)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__5 (0.00s)\n        tmp7m6gc3vz_test.go:47:\
    \ expected '%!s(int=-6)', got '%!s(int=-1)'\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmp7m6gc3vz_test.go:47: expected '%!s(int=-6)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__7 (0.00s)\n        tmp7m6gc3vz_test.go:47:\
    \ expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestMinsubarraysum/test_num__8\
    \ (0.00s)\n        tmp7m6gc3vz_test.go:47: expected '%!s(int=-33)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__9 (0.00s)\n        tmp7m6gc3vz_test.go:47:\
    \ expected '%!s(int=-10)', got '%!s(int=-1)'\n    --- FAIL: TestMinsubarraysum/test_num__10\
    \ (0.00s)\n        tmp7m6gc3vz_test.go:47: expected '%!s(int=7)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075627
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    var subsum, total int = 0, 0\n    for _, num := range nums {\n  \
    \      if subsum > total {\n            total = subsum\n        } else {\n   \
    \         subsum += num\n        }\n    }\n    return total\n}\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmp50jtwhrt_test.go:50: expected '%!s(int=1)', got '%!s(int=8)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmp50jtwhrt_test.go:50:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmp50jtwhrt_test.go:50: expected '%!s(int=-14)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__3 (0.00s)\n        tmp50jtwhrt_test.go:50:\
    \ expected '%!s(int=-9999999999999999)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__4\
    \ (0.00s)\n        tmp50jtwhrt_test.go:50: expected '%!s(int=0)', got '%!s(int=10)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__5 (0.00s)\n        tmp50jtwhrt_test.go:50:\
    \ expected '%!s(int=-6)', got '%!s(int=4)'\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmp50jtwhrt_test.go:50: expected '%!s(int=-6)', got '%!s(int=105)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__7 (0.00s)\n        tmp50jtwhrt_test.go:50:\
    \ expected '%!s(int=3)', got '%!s(int=26)'\n    --- FAIL: TestMinsubarraysum/test_num__8\
    \ (0.00s)\n        tmp50jtwhrt_test.go:50: expected '%!s(int=-33)', got '%!s(int=132)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__9 (0.00s)\n        tmp50jtwhrt_test.go:50:\
    \ expected '%!s(int=-10)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__10\
    \ (0.00s)\n        tmp50jtwhrt_test.go:50: expected '%!s(int=7)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__11 (0.00s)\n        tmp50jtwhrt_test.go:50:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075628
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    i := 0\n    sum := nums[0]\n    for len(nums) > 0 {\n        sum\
    \ += nums[i]\n        i++\n        if sum < 0 {\n            sum = 0\n       \
    \     break\n        }\n        nums = nums[i:]\n    }\n    return sum\n}\n\n\
    func TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n\
    \     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\npanic: runtime error: index out of\
    \ range [2] with length 1 [recovered]\n\tpanic: runtime error: index out of range\
    \ [2] with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.minSubArraySum(...)\n\t/tmp/tmpkz7lpwv8_test.go:19\n\
    command-line-arguments_test.TestMinsubarraysum(0x0?)\n\t/tmp/tmpkz7lpwv8_test.go:41\
    \ +0xd65\ntesting.tRunner(0xc0000da340, 0x528f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075628
- exit_code: 2
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    // Initialize results to 0\n    var result int = 0\n    for _, v\
    \ := range nums {\n        // Initialize sum to 0\n        sum := 0\n        for\
    \ i := 0; i < len(nums); i++ {\n            // Add to sum\n            sum +=\
    \ nums[i]\n            // If sum is greater than result, update result\n     \
    \       if sum > result {\n                result = sum\n            }\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n\
    \  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp501afwpf_test.go:18:12: v declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075628
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    d := len(nums)\n    if d == 0 {\n        return 0\n    }\n    for\
    \ d > 1 {\n        if nums[d-1] == 0 {\n            d = d - 1\n        } else\
    \ {\n            d -= 1\n        }\n    }\n    d += 1\n    if d >= len(nums) {\n\
    \        return 0\n    }\n\n    return d + minSubArraySum(nums[:d])\n}\n\nfunc\
    \ TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n\
    \     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpcl7np8bt_test.go:59: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpcl7np8bt_test.go:59:\
    \ expected '%!s(int=-6)', got '%!s(int=2)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpcl7np8bt_test.go:59: expected '%!s(int=-14)', got '%!s(int=2)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__3 (0.00s)\n        tmpcl7np8bt_test.go:59:\
    \ expected '%!s(int=-9999999999999999)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__4\
    \ (0.00s)\n        tmpcl7np8bt_test.go:59: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__5 (0.00s)\n        tmpcl7np8bt_test.go:59:\
    \ expected '%!s(int=-6)', got '%!s(int=2)'\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmpcl7np8bt_test.go:59: expected '%!s(int=-6)', got '%!s(int=2)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__7 (0.00s)\n        tmpcl7np8bt_test.go:59:\
    \ expected '%!s(int=3)', got '%!s(int=2)'\n    --- FAIL: TestMinsubarraysum/test_num__8\
    \ (0.00s)\n        tmpcl7np8bt_test.go:59: expected '%!s(int=-33)', got '%!s(int=2)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__9 (0.00s)\n        tmpcl7np8bt_test.go:59:\
    \ expected '%!s(int=-10)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__10\
    \ (0.00s)\n        tmpcl7np8bt_test.go:59: expected '%!s(int=7)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__11 (0.00s)\n        tmpcl7np8bt_test.go:59:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075628
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    sort.Ints(nums)\n    var min, maxInt, maxIndexMin int\n    for i\
    \ := 0; i < len(nums); i++ {\n        if nums[i] != 0 {\n            min = nums[i]\n\
    \            maxInt = maxInt\n            maxIndexMin = i\n        }\n       \
    \ if nums[i] < min {\n            min = nums[i]\n            maxInt = nums[i]\n\
    \            maxIndexMin = i\n        }\n        if nums[i] > max {\n        \
    \    max = nums[i]\n        }\n    }\n    // min is now the minimum sub-array\
    \ sum\n    // maxInt is now the maximum element in the sub-array that is < the\
    \ maxInt\n    // maxIndexMin is now the index of the minimum element in that sub-array\
    \ that is < the maxInt\n    // If min == maxInt then maxIndexMin == len(nums)-1\n\
    \    // If minInt == maxInt then maxIndexMin == 0\n    return maxInt\n}\n</code>\n\
    <|/ a tags=algorithm,go dscore=1 |>\n<| a |>\nAs far as I can see, all the other\
    \ solutions don't work for negative numbers, i.e. minSubArraySum([-1, -2, -3,\
    \ 0]) is -1. Here's a modification that does work: \n<code>\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpeq15pc4l_test.go:40:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075627
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    // write your code here\n    result := nums[0]\n    for _, val :=\
    \ range nums {\n        if val > result {\n            result = val\n        }\n\
    \    }\n    return result\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpwjf3c_a9_test.go:50: expected '%!s(int=1)', got '%!s(int=4)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpwjf3c_a9_test.go:50:\
    \ expected '%!s(int=-6)', got '%!s(int=-1)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpwjf3c_a9_test.go:50: expected '%!s(int=-14)', got '%!s(int=2)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmpwjf3c_a9_test.go:50:\
    \ expected '%!s(int=0)', got '%!s(int=1000000)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpwjf3c_a9_test.go:50: expected '%!s(int=-6)', got '%!s(int=10)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpwjf3c_a9_test.go:50:\
    \ expected '%!s(int=-6)', got '%!s(int=100)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpwjf3c_a9_test.go:50: expected '%!s(int=3)', got '%!s(int=13)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpwjf3c_a9_test.go:50:\
    \ expected '%!s(int=-33)', got '%!s(int=100)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpwjf3c_a9_test.go:50: expected '%!s(int=-1)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075628
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    start := 0\n  \
    \  end := len(nums) - 1\n    if nums[start] <= 0 {\n        return 0\n    }\n\
    \    for i := 0; i < len(nums); i++ {\n        start := end\n        end := i\n\
    \        if nums[end] < 0 {\n            end -= 1\n        }\n        if start\
    \ > end {\n            continue\n        }\n        nums2 := make([]int, len(nums)-start)\n\
    \        copy(nums2, nums[start:end])\n        nums2[start] = -nums2[start]\n\
    \        if nums[start] + nums2[start] < 0 {\n            continue\n        }\n\
    \        return nums[start] + minSubArraySum(nums2)\n    }\n    return nums[start]\n\
    }\n</code>\n<|/ a tags=recursion,algorithm,arrays,go |>\n<| c |>\nThis code works\
    \ with negative numbers as well.\n<|/ c |>\n<| c |>\nWhat if the list is sorted\
    \ in descending order and want to find the largest sum sub list which can be made\
    \ from given array. How does your answer change?\n<|/ c |>\n<| a tags=recursion,algorithm,arrays,go\
    \ |>\nHere is my implementation without using any extra space and using the golang\
    \ built-in sort function, which is implemented in O(nlogn).\n<code>\npackage main\n\
    \nimport \"fmt\"\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpod_jtwre_test.go:43:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075627
- exit_code: 2
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    ans := 0\n    end := len(nums) - 1\n    for i := 0; i < end; i++\
    \ {\n        ans = max(ans, nums[i]+nums[i+1])\n    }\n    return ans\n}\n\nfunc\
    \ TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n\
    \     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7gbyk02h_test.go:19:15: undefined: max

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075628
- exit_code: 2
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    return minSubArraySum_(nums,\
    \ 0, len(nums)-1, 0)\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpew4co2oq_test.go:19:12: undefined: minSubArraySum_

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075628
- exit_code: 2
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    return minSubArraySumHelper(nums, 0, len(nums)-1)\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplcqyd5c8_test.go:16:12: undefined: minSubArraySumHelper

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075628
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    // initialize a list with minimum value 0\n    output := int(0)\n\
    \    output += nums[0]\n\n    for _, value := range nums[1:] {\n        output\
    \ += value\n    }\n\n    return output\n}\n\nfunc TestMinsubarraysum(t *testing.T)\
    \ {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmp5zip3m31_test.go:51: expected '%!s(int=1)', got '%!s(int=16)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmp5zip3m31_test.go:51:\
    \ expected '%!s(int=0)', got '%!s(int=1000030)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmp5zip3m31_test.go:51: expected '%!s(int=-6)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmp5zip3m31_test.go:51:\
    \ expected '%!s(int=-6)', got '%!s(int=99)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmp5zip3m31_test.go:51: expected '%!s(int=3)', got '%!s(int=49)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmp5zip3m31_test.go:51:\
    \ expected '%!s(int=-33)', got '%!s(int=96)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmp5zip3m31_test.go:51: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075628
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    // Find sum\n    var sum int\n    for _, num := range nums {\n  \
    \      sum += num\n    }\n    \n    // Add negative to sum to get first negative\n\
    \    for _, num := range nums {\n        if num < 0 {\n            sum -= num\n\
    \            break\n        }\n    }\n    \n    // Return negative if no negative\
    \ found\n    if sum < 0 {\n        return -1\n    }\n    \n    // Subtract sum\
    \ from all numbers in array\n    for _, num := range nums {\n        sum -= num\n\
    \    }\n    \n    // Return negative, if not all numbers in array are negative\n\
    \    if sum < 0 {\n        return -1\n    }\n    \n    // Return sum\n    return\
    \ sum\n}\n</cell>\n<text>\nQuestion 3\n\n</text>\n<cell>\n%%writefile arrays_exercises.go\n\
    \npackage minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    func TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n\
    \     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp8fqryrle_test.go:48:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075627
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    max := nums[0]\n    var minSum int = nums[0]\n    for _, num := range\
    \ nums {\n        if num > max {\n            max = num\n        }\n        minSum\
    \ = minSum + num\n    }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t *testing.T)\
    \ {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmp3csp3clv_test.go:51: expected '%!s(int=1)', got '%!s(int=18)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmp3csp3clv_test.go:51:\
    \ expected '%!s(int=-6)', got '%!s(int=-7)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmp3csp3clv_test.go:51: expected '%!s(int=-14)', got '%!s(int=-15)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__3 (0.00s)\n        tmp3csp3clv_test.go:51:\
    \ expected '%!s(int=-9999999999999999)', got '%!s(int=-19999999999999998)'\n \
    \   --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmp3csp3clv_test.go:51:\
    \ expected '%!s(int=0)', got '%!s(int=1000030)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmp3csp3clv_test.go:51: expected '%!s(int=-6)', got '%!s(int=-2)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmp3csp3clv_test.go:51:\
    \ expected '%!s(int=-6)', got '%!s(int=199)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmp3csp3clv_test.go:51: expected '%!s(int=3)', got '%!s(int=59)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmp3csp3clv_test.go:51:\
    \ expected '%!s(int=-33)', got '%!s(int=196)'\n    --- FAIL: TestMinsubarraysum/test_num__9\
    \ (0.00s)\n        tmp3csp3clv_test.go:51: expected '%!s(int=-10)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__10 (0.00s)\n        tmp3csp3clv_test.go:51:\
    \ expected '%!s(int=7)', got '%!s(int=14)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmp3csp3clv_test.go:51: expected '%!s(int=-1)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075628
- exit_code: 2
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    min := nums[0]\n\
    \    for _, val := range nums {\n        min = min(val, min+val)\n    }\n    return\
    \ min\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc7irf1xj_test.go:20:12: val declared but not used

    /tmp/tmpc7irf1xj_test.go:21:15: invalid operation: cannot call non-function min
    (variable of type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075628
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    min := nums[0]\n\
    \    max := nums[0]\n    for i := 1; i < len(nums); i++ {\n        if nums[i]\
    \ < min {\n            min = nums[i]\n        }\n        if nums[i] > max {\n\
    \            max = nums[i]\n        }\n    }\n\n    min += minSubArraySum(nums[1:])\n\
    \    max += minSubArraySum(nums[1:])\n    return min\n}\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpylhgvjm9_test.go:58: expected '%!s(int=1)', got '%!s(int=10)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpylhgvjm9_test.go:58:\
    \ expected '%!s(int=-6)', got '%!s(int=-9)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpylhgvjm9_test.go:58: expected '%!s(int=-14)', got '%!s(int=-50)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmpylhgvjm9_test.go:58:\
    \ expected '%!s(int=0)', got '%!s(int=1000030)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpylhgvjm9_test.go:58: expected '%!s(int=-6)', got '%!s(int=-25)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpylhgvjm9_test.go:58:\
    \ expected '%!s(int=-6)', got '%!s(int=-30)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpylhgvjm9_test.go:58: expected '%!s(int=3)', got '%!s(int=19)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpylhgvjm9_test.go:58:\
    \ expected '%!s(int=-33)', got '%!s(int=-74)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpylhgvjm9_test.go:58: expected '%!s(int=-1)', got '%!s(int=-2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075628
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if nums == nil {\n        return -1\n    }\n    s := make(map[int]int)\n\
    \    for _, v := range nums {\n        if v, ok := s[v]; ok {\n            s[v]\
    \ = s[v] + 1\n        } else {\n            s[v] = 1\n        }\n    }\n    for\
    \ v, count := range s {\n        if count == 1 {\n            return v\n     \
    \   }\n    }\n    return -1\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmp8r0l3c6z_test.go:59: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmp8r0l3c6z_test.go:59:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmp8r0l3c6z_test.go:59: expected '%!s(int=-14)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__3 (0.00s)\n        tmp8r0l3c6z_test.go:59:\
    \ expected '%!s(int=-9999999999999999)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmp8r0l3c6z_test.go:59: expected '%!s(int=-6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmp8r0l3c6z_test.go:59:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmp8r0l3c6z_test.go:59: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmp8r0l3c6z_test.go:59:\
    \ expected '%!s(int=-33)', got '%!s(int=1)'\n    --- FAIL: TestMinsubarraysum/test_num__9\
    \ (0.00s)\n        tmp8r0l3c6z_test.go:59: expected '%!s(int=-10)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__10 (0.00s)\n        tmp8r0l3c6z_test.go:59:\
    \ expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmp8r0l3c6z_test.go:59: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075628
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    i := 0\n    min := nums[0]\n    for _, n := range nums[1:] {\n  \
    \      if n < min {\n            min = n\n        }\n    }\n    for _, n := range\
    \ nums {\n        if n < min {\n            min = n\n        }\n    }\n    return\
    \ min\n}\n</code>\n<|/ a |>\n<| a tags=go,arrays,sum,algorithm |>\nThe most efficient\
    \ solution I have come up with is just to sort the array and then sum the first\
    \ elements.\n<code>\npackage main\n\nimport (\n    \"fmt\"\n    \"sort\"\n)\n\n\
    func TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n\
    \     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbjozbsbt_test.go:30:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075627
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    // Your code here\n    \n    return 0\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpuvcph2eg_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpuvcph2eg_test.go:45:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpuvcph2eg_test.go:45: expected '%!s(int=-14)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__3 (0.00s)\n        tmpuvcph2eg_test.go:45:\
    \ expected '%!s(int=-9999999999999999)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpuvcph2eg_test.go:45: expected '%!s(int=-6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpuvcph2eg_test.go:45:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpuvcph2eg_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpuvcph2eg_test.go:45:\
    \ expected '%!s(int=-33)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__9\
    \ (0.00s)\n        tmpuvcph2eg_test.go:45: expected '%!s(int=-10)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__10 (0.00s)\n        tmpuvcph2eg_test.go:45:\
    \ expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpuvcph2eg_test.go:45: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075628
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    max := nums[0]\n\
    \    min := nums[0]\n    for _, v := range nums {\n        if v < 0 {\n      \
    \      return -1\n        }\n        if v > max {\n            max = v\n     \
    \   }\n        if v < min {\n            min = v\n        }\n    }\n    return\
    \ min + max\n}\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpjvov7eq3_test.go:58: expected '%!s(int=1)', got '%!s(int=5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpjvov7eq3_test.go:58:\
    \ expected '%!s(int=-6)', got '%!s(int=-1)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpjvov7eq3_test.go:58: expected '%!s(int=-14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__3 (0.00s)\n        tmpjvov7eq3_test.go:58:\
    \ expected '%!s(int=-9999999999999999)', got '%!s(int=-1)'\n    --- FAIL: TestMinsubarraysum/test_num__4\
    \ (0.00s)\n        tmpjvov7eq3_test.go:58: expected '%!s(int=0)', got '%!s(int=1000000)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__5 (0.00s)\n        tmpjvov7eq3_test.go:58:\
    \ expected '%!s(int=-6)', got '%!s(int=-1)'\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmpjvov7eq3_test.go:58: expected '%!s(int=-6)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__7 (0.00s)\n        tmpjvov7eq3_test.go:58:\
    \ expected '%!s(int=3)', got '%!s(int=16)'\n    --- FAIL: TestMinsubarraysum/test_num__8\
    \ (0.00s)\n        tmpjvov7eq3_test.go:58: expected '%!s(int=-33)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__9 (0.00s)\n        tmpjvov7eq3_test.go:58:\
    \ expected '%!s(int=-10)', got '%!s(int=-1)'\n    --- FAIL: TestMinsubarraysum/test_num__10\
    \ (0.00s)\n        tmpjvov7eq3_test.go:58: expected '%!s(int=7)', got '%!s(int=14)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075628
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n\n    size := len(nums)\n\
    \    for i := 0; i < size; i++ {\n        for j := 0; j < i; j++ {\n         \
    \   if nums[i] > nums[j] {\n                nums[i], nums[j] = nums[j], nums[i]\n\
    \            }\n        }\n    }\n\n    for i := 0; i < size; i++ {\n        for\
    \ j := size-1; j > i; j-- {\n            if nums[i] > nums[j] {\n            \
    \    nums[i], nums[j] = nums[j], nums[i]\n            }\n        }\n    }\n\n\
    \    for i := 0; i < size; i++ {\n        nums[i] = nums[i] + minSubArraySum(nums[i+1:])\n\
    \    }\n\n    return nums[0]\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n \
    \ candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpjnk1ws8l_test.go:68: expected '%!s(int=1)', got '%!s(int=16)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmpjnk1ws8l_test.go:68:\
    \ expected '%!s(int=0)', got '%!s(int=1000030)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpjnk1ws8l_test.go:68: expected '%!s(int=-6)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpjnk1ws8l_test.go:68:\
    \ expected '%!s(int=-6)', got '%!s(int=99)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpjnk1ws8l_test.go:68: expected '%!s(int=3)', got '%!s(int=49)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpjnk1ws8l_test.go:68:\
    \ expected '%!s(int=-33)', got '%!s(int=96)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpjnk1ws8l_test.go:68: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075629
- exit_code: 2
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    // Write your code here.\n    if nums == nil || len(nums) <= 0 {\n\
    \        return -1\n    }\n\n    var subList []int\n    for _, v := range nums\
    \ {\n        subList = append(subList, v)\n    }\n    \n    var minSum, minIndex\
    \ int\n\n    for _, v := range subList {\n        minSum += v\n        minIndex\
    \ = subList\n    }\n\n    return minSum\n}\n\nfunc TestMinsubarraysum(t *testing.T)\
    \ {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3wsl141e_test.go:30:20: cannot use subList (variable of type []int) as
    type int in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075629
- exit_code: 2
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    // The code below is based on the code from\n    // https://leetcode.com/problems/sum-minimum-numbers-in-subarray-without-repeating-numbers/discuss/191213/JavaScript-version\n\
    \    if len(nums) == 0 {\n        return INT_MIN\n    }\n\n    // The code below\
    \ is based on the code from\n    // https://leetcode.com/problems/sum-minimum-numbers-in-subarray-without-repeating-numbers/discuss/191213/JavaScript-version\n\
    \    if len(nums) == 1 {\n        return nums[0]\n    }\n\n    // The code below\
    \ is based on code from\n    // https://leetcode.com/problems/sum-minimum-numbers-in-subarray-without-repeating-numbers/discuss/191213/JavaScript-version\n\
    \    min := INT_MAX\n    ans := nums[0]\n\n    for _, v := range nums[1:] {\n\
    \        ans += v\n        if ans < min {\n            min = ans\n        }\n\
    \    }\n\n    return min\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprsugl49k_test.go:19:16: undefined: INT_MIN

    /tmp/tmprsugl49k_test.go:30:12: undefined: INT_MAX

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075629
- exit_code: 2
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    return len(nums)*minSum(nums[:len(nums)])\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpiytki1e4_test.go:16:22: undefined: minSum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075629
- exit_code: 2
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if nums == nil || len(nums) == 0 {\n        return 0\n    }\n   \
    \ sort.Ints(nums)\n    var sub []int\n    max := 0\n    for _, n := range nums\
    \ {\n        if n == 0 {\n            continue\n        }\n        for _, n2 :=\
    \ range nums {\n            sum += n2\n            if sum > n {\n            \
    \    sum -= n\n                sub = append(sub, n2)\n            }\n        }\n\
    \    }\n    return sub\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfzpt1q82_test.go:19:5: undefined: sort

    /tmp/tmpfzpt1q82_test.go:21:5: max declared but not used

    /tmp/tmpfzpt1q82_test.go:27:13: undefined: sum

    /tmp/tmpfzpt1q82_test.go:28:16: undefined: sum

    /tmp/tmpfzpt1q82_test.go:29:17: undefined: sum

    /tmp/tmpfzpt1q82_test.go:34:12: cannot use sub (variable of type []int) as type
    int in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075629
- exit_code: 2
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    s := 0\n    for _, n := range nums {\n        for _, i := range nums[:len(nums)-n]\
    \ {\n            s += n\n        }\n    }\n    return s\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwzc0hbec_test.go:18:16: i declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075629
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    if nums[0] < 0\
    \ {\n        return minSubArraySum(nums[1:]) + nums[0]\n    }\n    lowSubArraySum\
    \ := minSubArraySum(nums[1:])\n    lowSubArrayNum := len(nums) - lowSubArraySum\n\
    \    for _, num := range nums[:lowSubArrayNum] {\n        lowSubArraySum = lowSubArraySum\
    \ + num\n    }\n    return lowSubArraySum\n}\n\nfunc TestMinsubarraysum(t *testing.T)\
    \ {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [:-2] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [:-2]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.minSubArraySum({0xc0000afd10, 0x2, 0x2})\n\
    \t/tmp/tmpdo8_dbxz_test.go:24 +0xe5\ncommand-line-arguments_test.minSubArraySum({0xc00008dd08,\
    \ 0x3, 0x3})\n\t/tmp/tmpdo8_dbxz_test.go:22 +0x65\ncommand-line-arguments_test.minSubArraySum({0xc00008dd00,\
    \ 0x4, 0x4})\n\t/tmp/tmpdo8_dbxz_test.go:22 +0x65\ncommand-line-arguments_test.minSubArraySum({0xc00008dcf8,\
    \ 0x5, 0x5})\n\t/tmp/tmpdo8_dbxz_test.go:22 +0x65\ncommand-line-arguments_test.minSubArraySum({0xc00008dcf0,\
    \ 0x6, 0x6})\n\t/tmp/tmpdo8_dbxz_test.go:22 +0x65\ncommand-line-arguments_test.TestMinsubarraysum(0x0?)\n\
    \t/tmp/tmpdo8_dbxz_test.go:37 +0xb4\ntesting.tRunner(0xc0000da340, 0x528f48)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075630
- exit_code: 2
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    return minSubArraySumIterative(nums, 0, len(nums))\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsbh8e_nh_test.go:16:12: undefined: minSubArraySumIterative

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075629
- exit_code: 2
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    min := int64(math.MaxInt64)\n    for _, v := range nums {\n     \
    \   current := int64(v)\n        total := min - current\n        if current >\
    \ 0 && total < min {\n            min = total\n        }\n    }\n    return min\n\
    }\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7qjnbi82_test.go:16:18: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075630
- exit_code: 2
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    // base case\n    if len(nums) == 0 {\n        return nums[0]\n \
    \   }\n\n    // Recursive call\n    idx := len(nums) - 2\n    if idx < 0 {\n \
    \       return minSubArraySum(nums[:len(nums)-1])\n    }\n\n    // Recursive call\n\
    \    left = nums[idx]\n    right = nums[idx+1]\n\n    leftIdx := len(nums) - 2\n\
    \    rightIdx := len(nums) - 2\n    if leftIdx > 0 {\n        leftIdx -= 1\n \
    \   }\n    if rightIdx > 0 {\n        rightIdx -= 1\n    }\n\n    if left < right\
    \ {\n        return minSubArraySum(nums[:leftIdx]) + minSubArraySum(nums[rightIdx])\n\
    \    }\n    return minSubArraySum(nums[leftIdx:]) + minSubArraySum(nums[rightIdx:])\n\
    }\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi0lnjn06_test.go:28:5: undefined: left

    /tmp/tmpi0lnjn06_test.go:29:5: undefined: right

    /tmp/tmpi0lnjn06_test.go:40:8: undefined: left

    /tmp/tmpi0lnjn06_test.go:40:15: undefined: right

    /tmp/tmpi0lnjn06_test.go:41:64: cannot use nums[rightIdx] (variable of type int)
    as type []int in argument to minSubArraySum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075630
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    size := len(nums)\n    if size < 2 {\n        return 0\n    }\n \
    \   max := 0\n    for i := 0; i < size; i++ {\n        max += nums[i]\n    }\n\
    \    return max\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate :=\
    \ minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpcxk_nw8o_test.go:51: expected '%!s(int=1)', got '%!s(int=16)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__3 (0.00s)\n        tmpcxk_nw8o_test.go:51:\
    \ expected '%!s(int=-9999999999999999)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__4\
    \ (0.00s)\n        tmpcxk_nw8o_test.go:51: expected '%!s(int=0)', got '%!s(int=1000030)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__5 (0.00s)\n        tmpcxk_nw8o_test.go:51:\
    \ expected '%!s(int=-6)', got '%!s(int=-1)'\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmpcxk_nw8o_test.go:51: expected '%!s(int=-6)', got '%!s(int=99)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__7 (0.00s)\n        tmpcxk_nw8o_test.go:51:\
    \ expected '%!s(int=3)', got '%!s(int=49)'\n    --- FAIL: TestMinsubarraysum/test_num__8\
    \ (0.00s)\n        tmpcxk_nw8o_test.go:51: expected '%!s(int=-33)', got '%!s(int=96)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__9 (0.00s)\n        tmpcxk_nw8o_test.go:51:\
    \ expected '%!s(int=-10)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__10\
    \ (0.00s)\n        tmpcxk_nw8o_test.go:51: expected '%!s(int=7)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__11 (0.00s)\n        tmpcxk_nw8o_test.go:51:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075630
- exit_code: 2
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return -1\n    }\n\n    max := 0\n \
    \   smallest := nums[0]\n\n    for _, n := range nums[1:] {\n        if n > smallest\
    \ {\n            smallest = n\n        }\n        max = max(max, smallest + n)\n\
    \    }\n    return max\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz55kxpmu_test.go:27:15: invalid operation: cannot call non-function max
    (variable of type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075630
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if nums == nil || len(nums) == 0 {\n        return 0\n    }\n   \
    \ min := nums[0]\n    for i := 0; i < len(nums); i++ {\n        sum += nums[i]\n\
    \        if sum < min {\n            min = sum\n        }\n    }\n    return min\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a tags=python,arrays,algorithm,language-agnostic,sorting\
    \ |>\nIf you're able to use Python, here's an O(n) solution that's straightforward\
    \ and easy to understand:\n<code>\ndef min_subarray_sum(nums):\n    sorted_nums\
    \ = sorted(nums)\n    cur_sum = 0\n    cur_min_sum = None\n    for num in sorted_nums:\n\
    \        cur_sum += num\n        if cur_sum < cur_min_sum:\n            cur_min_sum\
    \ = cur_sum\n    return cur_min_sum\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\n\
    def minSubArraySum(arr):\n    if arr == [] or len(arr) == 0:\n        return 0\n\
    \    sum_arr = [sum(i) for i in arr]\n    sum_index = 0\n    min_sum = min(sum_arr)\n\
    \    for i in range(0, len(sum_arr)):\n        if sum_arr[i] < min_sum:\n    \
    \        sum_arr[i], min_sum = min_sum, sum_arr[i]\n    return min_sum\n</code>\n\
    <|/ a tags=python,arrays,algorithm,language-agnostic,sorting dscore=0 |>\n<| c\
    \ |>\nCode dumps without any explanation are not helpful. Stack Overflow is about\
    \ learning, not providing snippets to blindly copy and paste. Please [edit] your\
    \ question and explain how it answers the specific question being asked. See [answer]\
    \ for more details.\n<|/ c |>\n<| a dscore=0 tags=python,arrays,algorithm,language-agnostic,sorting\
    \ |>\n<code>\ndef min_sum(arr):\n    \n    sum=0\n    for i in range(0,len(arr)):\n\
    \        if arr[i]>0:\n            sum+=arr[i]\n    \n    min=sum\n\n    for i\
    \ in range(0,len(arr)):\n        if arr[i]<min:\n            min=arr[i]\n    return\
    \ min\n    \nprint(min_sum([2,7,1,5,3,-2]))\n</code>\n<|/ a |>\n<| a tags=python,arrays,algorithm,language-agnostic,sorting\
    \ |>\nUsing O(nlogn) time complexity and O(n) space complexity\n\n<code>\n#include\
    \ <bits/stdc++.h>\nusing namespace std;\n#define INF 100000000\nint main(){\n\
    int n; cin>>n;\nint a[n],i,minSum,minIndex\nfunc TestMinsubarraysum(t *testing.T)\
    \ {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpmib7suke_test.go:28:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075629
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    result := 0\n    start := 0\n    end := len(nums) - 1\n    for start\
    \ < end {\n        sum += nums[start]\n        if sum < result {\n           \
    \ result = sum\n        }\n        sum += nums[end]\n        if sum < result {\n\
    \            result = sum\n        }\n        start += 1\n        end -= 1\n \
    \   }\n    return result\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis is not\
    \ the right answer. This solution does not take in to account the possibility\
    \ of negative integers.\n<|/ c |>\n<| a tags=go,arrays,algorithm,sum |>\nI solved\
    \ this problem by creating a map of positive integers and their sum.\n<code>\n\
    func TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n\
    \     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp03494ps9_test.go:33:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075629
- exit_code: 2
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) < 1 {\n        return -1\n    }\n\n    sumOfNums :=\
    \ 0\n\n    leftArr, leftArr := nums[:len(nums)/2], nums[len(nums)/2:]\n    for\
    \ _, num := range leftArr {\n        sumOfNums += num\n    }\n\n    rightArr,\
    \ rightArr := nums[len(nums)/2:], nums[:len(nums)/2]\n    for _, num := range\
    \ rightArr {\n        sumOfNums += num\n    }\n\n    if sumOfNums == 0 {\n   \
    \     return 0\n    }\n\n    if sumOfNums < leftArr[0] + rightArr[0] {\n     \
    \   return minSubArraySum(leftArr)\n    }\n    return minSubArraySum(rightArr)\n\
    }\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3buatisv_test.go:22:14: leftArr repeated on left side of :=

    /tmp/tmp3buatisv_test.go:27:15: rightArr repeated on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075630
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    sum := 0\n    for _, n := range nums {\n        sum += n\n    }\n\
    \    return sum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate :=\
    \ minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpho32zn3j_test.go:47: expected '%!s(int=1)', got '%!s(int=16)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmpho32zn3j_test.go:47:\
    \ expected '%!s(int=0)', got '%!s(int=1000030)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpho32zn3j_test.go:47: expected '%!s(int=-6)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpho32zn3j_test.go:47:\
    \ expected '%!s(int=-6)', got '%!s(int=99)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpho32zn3j_test.go:47: expected '%!s(int=3)', got '%!s(int=49)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpho32zn3j_test.go:47:\
    \ expected '%!s(int=-33)', got '%!s(int=96)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpho32zn3j_test.go:47: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075630
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return -1\n    }\n    minSum := nums[0]\n\
    \    for _, v := range nums[1:] {\n        minSum = minSum - v\n    }\n    return\
    \ minSum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpnd9qlpo6_test.go:50: expected '%!s(int=1)', got '%!s(int=-12)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpnd9qlpo6_test.go:50:\
    \ expected '%!s(int=-6)', got '%!s(int=4)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpnd9qlpo6_test.go:50: expected '%!s(int=-14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmpnd9qlpo6_test.go:50:\
    \ expected '%!s(int=0)', got '%!s(int=-1000030)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpnd9qlpo6_test.go:50: expected '%!s(int=-6)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpnd9qlpo6_test.go:50:\
    \ expected '%!s(int=-6)', got '%!s(int=101)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpnd9qlpo6_test.go:50: expected '%!s(int=3)', got '%!s(int=-29)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpnd9qlpo6_test.go:50:\
    \ expected '%!s(int=-33)', got '%!s(int=104)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpnd9qlpo6_test.go:50: expected '%!s(int=-1)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075631
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    result := 0\n    // find the first negative number\n    firstNegative\
    \ := -1\n    for i := range nums {\n        if nums[i] < 0 {\n            if firstNegative\
    \ == -1 {\n                firstNegative = i\n            }\n            continue\n\
    \        }\n        break\n    }\n    for i := range nums {\n        if i != firstNegative\
    \ {\n            result += nums[i]\n        }\n    }\n    return result\n}\n</code>\n\
    <|/ a |>\n<| a |>\nA recursive solution:\n<code>\nfunc TestMinsubarraysum(t *testing.T)\
    \ {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbrtsznje_test.go:35:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075630
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    size := len(nums)\n    sub := make([]int, size)\n    subLen := 0\n\
    \    minVal := nums[0]\n    for i := 1; i < size; i++ {\n        val := nums[i]\n\
    \        if val < minVal {\n            minVal = val\n        } else {\n     \
    \       if val < sub[subLen] {\n                sub[subLen] = val\n          \
    \      subLen += 1\n            } else {\n                subLen -= 1\n      \
    \      }\n        }\n    }\n    return minVal\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\npanic: runtime error: index out of\
    \ range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\n\
    goroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.minSubArraySum(...)\n\t/tmp/tmpnoyi1438_test.go:25\n\
    command-line-arguments_test.TestMinsubarraysum(0x0?)\n\t/tmp/tmpnoyi1438_test.go:43\
    \ +0xc53\ntesting.tRunner(0xc0000da340, 0x528f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075631
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n\n    arr := make([]int,\
    \ len(nums))\n\n    for i := 0; i < len(nums); i++ {\n        arr[i] = nums[i]\n\
    \    }\n\n    var min int\n    var sum int\n\n    for i := 0; i < len(arr); i++\
    \ {\n        for j := i + 1; j < len(arr); j++ {\n            sum += arr[i]\n\
    \            sum += arr[j]\n\n            if sum < min {\n                min\
    \ = sum\n            }\n        }\n    }\n\n    return min\n}\n</code>\n<|/ a\
    \ tags=algorithm |>\n<| a tags=algorithm |>\n<code>\ndef min_sub_array(arr):\n\
    \    ans = 0\n    sub_array = []\n    for num in arr:\n        if len(sub_array)\
    \ < 1:\n            sub_array.append(num)\n        else:\n            sub_array\
    \ = [num] + sub_array\n            ans = max(sub_array, ans)\n            sub_array.pop()\n\
    \    return ans\n</code>\n<|/ a dscore=0 |>\n<| c |>\nWhy do you pop sub_array\
    \ if you pop the array itself?\n<|/ c |>\n<| c |>\nBecause I want the last element\
    \ to be the minimum sum from the sub_array. I don't want to remove it.\n<|/ c\
    \ |>\n<| c |>\nThen instead of pop sub_array just append to it\n<|/ c |>\n<| a\
    \ dscore=0 |>\nYou can try this approach\n<code>\nfunc TestMinsubarraysum(t *testing.T)\
    \ {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpd_jyn6jy_test.go:42:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075630
- exit_code: 2
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) < 2 {\n        return 0\n    }\n    \n    length :=\
    \ len(nums)\n    \n    // find the minimum subarray size from length 2 to length\
    \ + 1 \n    // if num[length] is 0, then length is 1 and we can use 0 as \n  \
    \  // the minimum subarray size\n    length := length + 1\n    \n    min := 0\n\
    \    \n    for i := length - 1; i >= 2; i-- {\n        sum := 0\n        for j\
    \ := i-1; j >= 0; j-- {\n            sum += nums[j]\n            if sum < 0 {\n\
    \                sum = 0\n                break\n            }\n        }\n  \
    \      min = math.Min(min, sum)\n    }\n    \n    return min + minSubArraySum(nums[:min])\n\
    }\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6jvp1456_test.go:25:12: no new variables on left side of :=

    /tmp/tmp6jvp1456_test.go:38:15: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075630
- exit_code: 2
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    result := intMax\n    for _, num := range nums {\n        result\
    \ += num\n    }\n    return result\n}\n\nfunc TestMinsubarraysum(t *testing.T)\
    \ {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpue8rukp7_test.go:16:15: undefined: intMax

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075630
- exit_code: 2
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    var min = math.MaxInt32\n    var curr = 0\n    for _, num := range\
    \ nums {\n        curr = num + curr\n        if curr < min {\n            min\
    \ = curr\n        }\n    }\n    return min\n}\n\nfunc TestMinsubarraysum(t *testing.T)\
    \ {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_i_cku98_test.go:16:15: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075631
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    // Create an empty array to hold the current minSum.\n    arr :=\
    \ make([]int, len(nums))\n    arr[0] = nums[0]\n    currMinSum := arr[0]\n\n \
    \   // For each integer in the list...\n    for _, num := range nums {\n     \
    \   // If the current min sum is greater than or equal to the\n        // current\
    \ number in the list, update the current min sum to the\n        // current number\
    \ and move on to the next number. If that number\n        // is smaller than the\
    \ current min sum, update that value to the\n        // current min sum.\n   \
    \     if currMinSum < num {\n            arr[len(arr) - 1] = num\n           \
    \ currMinSum = num\n        } else {\n            arr[len(arr) - 1] += num\n \
    \           currMinSum = arr[len(arr) - 1]\n        }\n    }\n\n    // Return\
    \ the min sum at the end.\n    return arr[len(arr) - 1]\n}\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpd86sb48j_test.go:64: expected '%!s(int=1)', got '%!s(int=11)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__2 (0.00s)\n        tmpd86sb48j_test.go:64:\
    \ expected '%!s(int=-14)', got '%!s(int=-8)'\n    --- FAIL: TestMinsubarraysum/test_num__3\
    \ (0.00s)\n        tmpd86sb48j_test.go:64: expected '%!s(int=-9999999999999999)',\
    \ got '%!s(int=-19999999999999998)'\n    --- FAIL: TestMinsubarraysum/test_num__4\
    \ (0.00s)\n        tmpd86sb48j_test.go:64: expected '%!s(int=0)', got '%!s(int=1000000)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__5 (0.00s)\n        tmpd86sb48j_test.go:64:\
    \ expected '%!s(int=-6)', got '%!s(int=5)'\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmpd86sb48j_test.go:64: expected '%!s(int=-6)', got '%!s(int=99)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__7 (0.00s)\n        tmpd86sb48j_test.go:64:\
    \ expected '%!s(int=3)', got '%!s(int=28)'\n    --- FAIL: TestMinsubarraysum/test_num__8\
    \ (0.00s)\n        tmpd86sb48j_test.go:64: expected '%!s(int=-33)', got '%!s(int=96)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__9 (0.00s)\n        tmpd86sb48j_test.go:64:\
    \ expected '%!s(int=-10)', got '%!s(int=-20)'\n    --- FAIL: TestMinsubarraysum/test_num__10\
    \ (0.00s)\n        tmpd86sb48j_test.go:64: expected '%!s(int=7)', got '%!s(int=14)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__11 (0.00s)\n        tmpd86sb48j_test.go:64:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075631
- exit_code: 2
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    // The idea is to keep track of the min sum as we go along and keep\
    \ adding\n    // the rest of the sum to the current min sum. We stop the sum adding\
    \ when\n    // we add 1 to the current min.\n    var min int\n    for _, x :=\
    \ range nums {\n        // Check if the sum is smaller than the current min sum.\n\
    \        if x <= min {\n            min = x\n            continue\n        }\n\
    \n        // Add the remaining elements to the current min sum.\n        sum +=\
    \ x\n        min = sum\n    }\n    return min\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp_ig3jvr_test.go:28:9: undefined: sum

    /tmp/tmpp_ig3jvr_test.go:29:15: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075631
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    // Your code here\n    if nums == nil || len(nums) == 0 {\n     \
    \   return 0\n    }\n    sum := nums[0]\n    for _, n := range nums {\n      \
    \  sum += n\n    }\n    return sum\n}\n\nfunc TestMinsubarraysum(t *testing.T)\
    \ {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpotnmkx5q_test.go:51: expected '%!s(int=1)', got '%!s(int=18)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpotnmkx5q_test.go:51:\
    \ expected '%!s(int=-6)', got '%!s(int=-7)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpotnmkx5q_test.go:51: expected '%!s(int=-14)', got '%!s(int=-15)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__3 (0.00s)\n        tmpotnmkx5q_test.go:51:\
    \ expected '%!s(int=-9999999999999999)', got '%!s(int=-19999999999999998)'\n \
    \   --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmpotnmkx5q_test.go:51:\
    \ expected '%!s(int=0)', got '%!s(int=1000030)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpotnmkx5q_test.go:51: expected '%!s(int=-6)', got '%!s(int=-2)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpotnmkx5q_test.go:51:\
    \ expected '%!s(int=-6)', got '%!s(int=199)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpotnmkx5q_test.go:51: expected '%!s(int=3)', got '%!s(int=59)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpotnmkx5q_test.go:51:\
    \ expected '%!s(int=-33)', got '%!s(int=196)'\n    --- FAIL: TestMinsubarraysum/test_num__9\
    \ (0.00s)\n        tmpotnmkx5q_test.go:51: expected '%!s(int=-10)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__10 (0.00s)\n        tmpotnmkx5q_test.go:51:\
    \ expected '%!s(int=7)', got '%!s(int=14)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpotnmkx5q_test.go:51: expected '%!s(int=-1)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075631
- exit_code: 2
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    return minSubArraySumHelper(nums,\
    \ 0, len(nums)-1)\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate :=\
    \ minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpomteyfn8_test.go:19:12: undefined: minSubArraySumHelper

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075631
- exit_code: 2
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) <= 1 {\n        return nums[0]\n    }\n    sum, _ :=\
    \ minSubArraySum([]int{})\n    sum -= nums[0]\n    for _, n := range nums[1 :\
    \ len(nums)] {\n        sum += n\n    }\n    return sum\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjf_ftacr_test.go:19:15: assignment mismatch: 2 variables but minSubArraySum
    returns 1 value

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075631
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    return 0\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpck589dqy_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpck589dqy_test.go:43:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpck589dqy_test.go:43: expected '%!s(int=-14)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__3 (0.00s)\n        tmpck589dqy_test.go:43:\
    \ expected '%!s(int=-9999999999999999)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpck589dqy_test.go:43: expected '%!s(int=-6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpck589dqy_test.go:43:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpck589dqy_test.go:43: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpck589dqy_test.go:43:\
    \ expected '%!s(int=-33)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__9\
    \ (0.00s)\n        tmpck589dqy_test.go:43: expected '%!s(int=-10)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__10 (0.00s)\n        tmpck589dqy_test.go:43:\
    \ expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpck589dqy_test.go:43: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075632
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) < 1 {\n        return -1\n    }\n\n    var sum int\n\
    \    for _, num := range nums {\n        sum += num\n    }\n\n    return sum\n\
    }\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpjk_pkba1_test.go:52: expected '%!s(int=1)', got '%!s(int=16)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmpjk_pkba1_test.go:52:\
    \ expected '%!s(int=0)', got '%!s(int=1000030)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpjk_pkba1_test.go:52: expected '%!s(int=-6)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpjk_pkba1_test.go:52:\
    \ expected '%!s(int=-6)', got '%!s(int=99)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpjk_pkba1_test.go:52: expected '%!s(int=3)', got '%!s(int=49)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpjk_pkba1_test.go:52:\
    \ expected '%!s(int=-33)', got '%!s(int=96)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpjk_pkba1_test.go:52: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075632
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) <= 1 {\n        return 0\n    }\n\n    minSum := 0\n\
    \    i := 0\n    for i < len(nums)-1 {\n        minSum = nums[i] + minSum\n  \
    \      i = i + 1\n    }\n\n    j := len(nums)-1\n    for j > 0 {\n        minSum\
    \ = nums[j] + minSum\n        j = j - 1\n    }\n\n    return minSum\n}\n\nfunc\
    \ TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n\
    \     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmp171vfv0o_test.go:60: expected '%!s(int=1)', got '%!s(int=26)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmp171vfv0o_test.go:60:\
    \ expected '%!s(int=-6)', got '%!s(int=-8)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmp171vfv0o_test.go:60: expected '%!s(int=-14)', got '%!s(int=-17)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__3 (0.00s)\n        tmp171vfv0o_test.go:60:\
    \ expected '%!s(int=-9999999999999999)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__4\
    \ (0.00s)\n        tmp171vfv0o_test.go:60: expected '%!s(int=0)', got '%!s(int=1000060)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__5 (0.00s)\n        tmp171vfv0o_test.go:60:\
    \ expected '%!s(int=-6)', got '%!s(int=4)'\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmp171vfv0o_test.go:60: expected '%!s(int=-6)', got '%!s(int=103)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__7 (0.00s)\n        tmp171vfv0o_test.go:60:\
    \ expected '%!s(int=3)', got '%!s(int=84)'\n    --- FAIL: TestMinsubarraysum/test_num__8\
    \ (0.00s)\n        tmp171vfv0o_test.go:60: expected '%!s(int=-33)', got '%!s(int=94)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__9 (0.00s)\n        tmp171vfv0o_test.go:60:\
    \ expected '%!s(int=-10)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__10\
    \ (0.00s)\n        tmp171vfv0o_test.go:60: expected '%!s(int=7)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__11 (0.00s)\n        tmp171vfv0o_test.go:60:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075632
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 || nums[0] == 0 {\n        return 0\n    }\n  \
    \  if len(nums) == 1 {\n        return nums[0]\n    }\n    smallerSums := minSubArraySum(nums[:len(nums)-1])\n\
    \    largerSums := minSubArraySum(nums[len(nums)-1:])\n    return smallerSums\
    \ + largerSums\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmp9npk4x4w_test.go:51: expected '%!s(int=1)', got '%!s(int=16)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__5 (0.00s)\n        tmp9npk4x4w_test.go:51:\
    \ expected '%!s(int=-6)', got '%!s(int=-1)'\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmp9npk4x4w_test.go:51: expected '%!s(int=-6)', got '%!s(int=99)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__7 (0.00s)\n        tmp9npk4x4w_test.go:51:\
    \ expected '%!s(int=3)', got '%!s(int=49)'\n    --- FAIL: TestMinsubarraysum/test_num__8\
    \ (0.00s)\n        tmp9npk4x4w_test.go:51: expected '%!s(int=-33)', got '%!s(int=96)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__11 (0.00s)\n        tmp9npk4x4w_test.go:51:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075632
- exit_code: null
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    stack := make([]int, len(nums))\n    for i := range nums {\n    \
    \    stack[i] = nums[i]\n    }\n\n    for len(stack) > 0 {\n        max := stack[len(stack)-1]\n\
    \        idx := len(stack) - 1\n        for i := len(stack) - 2; i >= 0; i-- {\n\
    \            if nums[idx] > max {\n                max = nums[idx]\n         \
    \       idx = i\n            }\n        }\n        stack[idx] = -max\n    }\n\
    \    return stack[0]\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660075645
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    var min = nums[0]\n    for _, num := range nums {\n        // if\
    \ the current number is less than the minimum already found\n        if num <\
    \ min {\n            // then update the minimum\n            min = num\n     \
    \   }\n    }\n    // return the minimum\n    return min\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__1\
    \ (0.00s)\n        tmppf30hwbd_test.go:52: expected '%!s(int=-6)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__2 (0.00s)\n        tmppf30hwbd_test.go:52:\
    \ expected '%!s(int=-14)', got '%!s(int=-10)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmppf30hwbd_test.go:52: expected '%!s(int=-6)', got '%!s(int=-5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmppf30hwbd_test.go:52:\
    \ expected '%!s(int=-6)', got '%!s(int=-5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075632
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    length := len(nums)\n    if length == 0 {\n        return 0\n   \
    \ }\n    minimum := nums[0]\n    minimum += minSubArraySum(nums[1:])\n\n    for\
    \ _, v := range nums {\n        if v < minimum {\n            minimum = v\n  \
    \      }\n    }\n\n    return minimum\n}\n\nfunc TestMinsubarraysum(t *testing.T)\
    \ {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpl4ov8z0d_test.go:56: expected '%!s(int=-14)', got '%!s(int=-16)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__5 (0.00s)\n        tmpl4ov8z0d_test.go:56:\
    \ expected '%!s(int=-6)', got '%!s(int=-11)'\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmpl4ov8z0d_test.go:56: expected '%!s(int=-6)', got '%!s(int=-5)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075632
- exit_code: 2
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    var minSum int\n    for _, v := range nums {\n        minSum = math.Max(minSum,\
    \ minSubArraySumOfSingleElement(v, nums))\n    }\n    return minSum\n}\n\nfunc\
    \ TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n\
    \     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3o57jlgx_test.go:18:18: undefined: math

    /tmp/tmp3o57jlgx_test.go:18:35: undefined: minSubArraySumOfSingleElement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075632
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    // O(n) time and O(n) space - create a temporary array for traversal\
    \ of nums\n    tempNums := make([]int, len(nums))\n    for i := 0; i < len(tempNums);\
    \ i++ {\n        tempNums[i] = nums[i]\n    }\n\n    // O(n) time and O(1) space\
    \ - O(n) traversal is O(n)\n    for i := 0; i < len(tempNums)-1; i++ {\n     \
    \   left := tempNums[i]\n        right := tempNums[i+1]\n        sum := left +\
    \ right\n        for j := i + 2; j < len(tempNums); j++ {\n            sum +=\
    \ tempNums[j]\n            if sum < left {\n                left = sum\n     \
    \       }\n            if sum > right {\n                right = sum\n       \
    \     }\n        }\n        if left < right {\n            tempNums[i] = left\n\
    \        } else {\n            tempNums[i] = right\n        }\n    }\n\n    return\
    \ tempNums[len(tempNums)-1]\n}\n</code>\n<|/ a tags=algorithm,language-agnostic,dynamic-programming,np-complete\
    \ |>\n<| c |>\nThis solution isn't correct. It can not give the correct result\
    \ for `minSubArraySum([]int{-1, -2, -3})`.\n<|/ c |>\n<| c |>\nIt does not work\
    \ for negative numbers. It works only for positive numbers. If you change the\
    \ line `for j := i + 1; j < len(tempNums); j++ {` by `for j := i; j < len(tempNums);\
    \ j++ {` it should work for negative numbers.\n<|/ c |>\n<| c |>\nThank you. Fixed.\n\
    <|/ c |>\n<| c |>\nThank you! This algorithm is awesome\n<|/ c |>\n<| a |>\nThe\
    \ algorithm you are looking for is called the subset sum problem. \nThe basic\
    \ idea is that you just need to add up all possible combinations of elements that\
    \ belong to one subset and then the difference between those sums and the one\
    \ that you are looking for.\nFor example lets say you have a list of n elements\
    \ with distinct values. You want to find the subset that has the minimum sum so\
    \ that\n\nEach element has its own distinct subset\nThe sum of subsets is minimized.\n\
    \nIn that case you can just sum up the different combinations of subsets and subtract\
    \ from the actual sum.\nThe same algorithm is also described in Donald Knuth's\
    \ Art of Computer Programming volume 2 chapter 14 (page 393) and more specifically\
    \ here\n<|/ a dscore=4 tags=algorithm,language-agnostic,dynamic-programming,np-complete\
    \ |>\n<| c |>\nThis sound\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp72r00mjp_test.go:45:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075631
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    // Initialize min to the first element in the list.\n    var min\
    \ = nums[0]\n    for i := 1; i < len(nums); i++ {\n        if nums[i] < min {\n\
    \            min = nums[i]\n        }\n    }\n\n    // Keep looping while min\
    \ is not greater than every number in the list.\n    for i := 1; i < len(nums);\
    \ i++ {\n        if nums[i] < min {\n            // Add the difference between\
    \ min and every number in the list to the sum.\n            min += nums[i] - min\n\
    \        }\n    }\n\n    return min\n}\n\nfunc TestMinsubarraysum(t *testing.T)\
    \ {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__1\
    \ (0.00s)\n        tmpzxgjvvt5_test.go:59: expected '%!s(int=-6)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__2 (0.00s)\n        tmpzxgjvvt5_test.go:59:\
    \ expected '%!s(int=-14)', got '%!s(int=-10)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpzxgjvvt5_test.go:59: expected '%!s(int=-6)', got '%!s(int=-5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpzxgjvvt5_test.go:59:\
    \ expected '%!s(int=-6)', got '%!s(int=-5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075632
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    sum := nums[0]\n\
    \    for _, n := range nums[1:] {\n        sum = sum + n\n        if sum < 0 {\n\
    \            sum = 0\n        }\n    }\n    return sum\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmp37i9_0ze_test.go:53: expected '%!s(int=1)', got '%!s(int=16)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmp37i9_0ze_test.go:53:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmp37i9_0ze_test.go:53: expected '%!s(int=-14)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmp37i9_0ze_test.go:53:\
    \ expected '%!s(int=0)', got '%!s(int=1000030)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmp37i9_0ze_test.go:53: expected '%!s(int=-6)', got '%!s(int=5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmp37i9_0ze_test.go:53:\
    \ expected '%!s(int=-6)', got '%!s(int=99)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmp37i9_0ze_test.go:53: expected '%!s(int=3)', got '%!s(int=49)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmp37i9_0ze_test.go:53:\
    \ expected '%!s(int=-33)', got '%!s(int=96)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmp37i9_0ze_test.go:53: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075632
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    min := nums[0]\n    for _, num := range nums[1:] {\n        if min\
    \ > num {\n            min = num\n        }\n    }\n    return min\n}\n\nfunc\
    \ TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n\
    \     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__1\
    \ (0.00s)\n        tmprhvkh53b_test.go:49: expected '%!s(int=-6)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__2 (0.00s)\n        tmprhvkh53b_test.go:49:\
    \ expected '%!s(int=-14)', got '%!s(int=-10)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmprhvkh53b_test.go:49: expected '%!s(int=-6)', got '%!s(int=-5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmprhvkh53b_test.go:49:\
    \ expected '%!s(int=-6)', got '%!s(int=-5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075632
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if nums == nil {\n        return -1\n    }\n    if len(nums) < 2\
    \ {\n        return nums[0]\n    }\n\n    min := nums[0]\n    max := nums[0]\n\
    \    for _, num := range nums[1:] {\n        if num > max {\n            max =\
    \ num\n        } else if num < min {\n            min = num\n        }\n    }\n\
    \    return min\n}\n</code>\n<|/ a tags=algorithm,go |>\n<| c |>\nthis should\
    \ be the accepted answer as it does a fast and memory efficient job, with code\
    \ examples (though they don't explain much)\n<|/ c |>\n<| a |>\nTry this:\n<code>\n\
    package main\n\nimport (\n    \"fmt\"\n    \"sort\"\n)\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpdg8lz2pz_test.go:34:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075632
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    result := -9999999\n    for _, num := range nums {\n        if num\
    \ > 0 {\n            if result < num {\n                result = num\n       \
    \     }\n        }\n    }\n    return result\n}\n\nfunc TestMinsubarraysum(t *testing.T)\
    \ {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmp9l1h7lkq_test.go:51: expected '%!s(int=1)', got '%!s(int=4)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmp9l1h7lkq_test.go:51:\
    \ expected '%!s(int=-6)', got '%!s(int=-9999999)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmp9l1h7lkq_test.go:51: expected '%!s(int=-14)', got '%!s(int=2)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__3 (0.00s)\n        tmp9l1h7lkq_test.go:51:\
    \ expected '%!s(int=-9999999999999999)', got '%!s(int=-9999999)'\n    --- FAIL:\
    \ TestMinsubarraysum/test_num__4 (0.00s)\n        tmp9l1h7lkq_test.go:51: expected\
    \ '%!s(int=0)', got '%!s(int=1000000)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmp9l1h7lkq_test.go:51: expected '%!s(int=-6)', got '%!s(int=10)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmp9l1h7lkq_test.go:51:\
    \ expected '%!s(int=-6)', got '%!s(int=100)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmp9l1h7lkq_test.go:51: expected '%!s(int=3)', got '%!s(int=13)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmp9l1h7lkq_test.go:51:\
    \ expected '%!s(int=-33)', got '%!s(int=100)'\n    --- FAIL: TestMinsubarraysum/test_num__9\
    \ (0.00s)\n        tmp9l1h7lkq_test.go:51: expected '%!s(int=-10)', got '%!s(int=-9999999)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__11 (0.00s)\n        tmp9l1h7lkq_test.go:51:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075633
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    // Write your code here\n    max := 0\n    for _, i := range nums\
    \ {\n        if i > max {\n            max = i\n        }\n    }\n    for _, i\
    \ := range nums {\n        for _, j := range nums {\n            if i == j {\n\
    \                continue\n            }\n            max -= j\n            if\
    \ max < 0 {\n                max = 0\n            }\n        }\n    }\n    return\
    \ max\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpmd078c3a_test.go:61: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpmd078c3a_test.go:61:\
    \ expected '%!s(int=-6)', got '%!s(int=12)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpmd078c3a_test.go:61: expected '%!s(int=-14)', got '%!s(int=58)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__3 (0.00s)\n        tmpmd078c3a_test.go:61:\
    \ expected '%!s(int=-9999999999999999)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpmd078c3a_test.go:61: expected '%!s(int=-6)', got '%!s(int=14)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpmd078c3a_test.go:61:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpmd078c3a_test.go:61: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpmd078c3a_test.go:61:\
    \ expected '%!s(int=-33)', got '%!s(int=2)'\n    --- FAIL: TestMinsubarraysum/test_num__9\
    \ (0.00s)\n        tmpmd078c3a_test.go:61: expected '%!s(int=-10)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__11 (0.00s)\n        tmpmd078c3a_test.go:61:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075633
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    sum := nums[0]\n    for _, numStr := range nums[1:] {\n        sum\
    \ += numStr\n    }\n    return sum\n}\n\nfunc TestMinsubarraysum(t *testing.T)\
    \ {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmp93sbv9m6_test.go:47: expected '%!s(int=1)', got '%!s(int=16)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmp93sbv9m6_test.go:47:\
    \ expected '%!s(int=0)', got '%!s(int=1000030)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmp93sbv9m6_test.go:47: expected '%!s(int=-6)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmp93sbv9m6_test.go:47:\
    \ expected '%!s(int=-6)', got '%!s(int=99)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmp93sbv9m6_test.go:47: expected '%!s(int=3)', got '%!s(int=49)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmp93sbv9m6_test.go:47:\
    \ expected '%!s(int=-33)', got '%!s(int=96)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmp93sbv9m6_test.go:47: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075633
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    // write your code here\n    if len(nums) == 0 {\n        return\
    \ -1\n    }\n    \n    var res int\n    \n    if nums[0] == -1 || nums[0] == -2\
    \ {\n        res = nums[0]\n    }\n    \n    for _, n := range nums {\n      \
    \  if n == -1 {\n            res -= 2\n        } else if n == -2 {\n         \
    \   res = -1\n        }\n        \n        if res < n {\n            res = n\n\
    \        }\n    }\n    \n    return res\n}\n\nfunc TestMinsubarraysum(t *testing.T)\
    \ {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpkrpicrxw_test.go:66: expected '%!s(int=1)', got '%!s(int=4)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpkrpicrxw_test.go:66:\
    \ expected '%!s(int=-6)', got '%!s(int=-1)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpkrpicrxw_test.go:66: expected '%!s(int=-14)', got '%!s(int=2)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__3 (0.00s)\n        tmpkrpicrxw_test.go:66:\
    \ expected '%!s(int=-9999999999999999)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__4\
    \ (0.00s)\n        tmpkrpicrxw_test.go:66: expected '%!s(int=0)', got '%!s(int=1000000)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__5 (0.00s)\n        tmpkrpicrxw_test.go:66:\
    \ expected '%!s(int=-6)', got '%!s(int=10)'\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmpkrpicrxw_test.go:66: expected '%!s(int=-6)', got '%!s(int=10)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__7 (0.00s)\n        tmpkrpicrxw_test.go:66:\
    \ expected '%!s(int=3)', got '%!s(int=13)'\n    --- FAIL: TestMinsubarraysum/test_num__8\
    \ (0.00s)\n        tmpkrpicrxw_test.go:66: expected '%!s(int=-33)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__9 (0.00s)\n        tmpkrpicrxw_test.go:66:\
    \ expected '%!s(int=-10)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075633
- exit_code: 2
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    var maxSubArrayLen int\n    var minSubArraySum int\n    for _, v\
    \ := range nums {\n        if maxSubArrayLen < len(v) - 1 {\n            maxSubArrayLen\
    \ = len(v) - 1\n        }\n        minSubArraySum = maxSubArraySum\n        for\
    \ i := 0; i < len(v); i++ {\n            if minSubArraySum < v[i] {\n        \
    \        minSubArraySum = v[i]\n            }\n        }\n    }\n    return minSubArraySum\n\
    }\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3nc8s562_test.go:19:33: invalid argument: v (variable of type int) for
    len

    /tmp/tmp3nc8s562_test.go:20:34: invalid argument: v (variable of type int) for
    len

    /tmp/tmp3nc8s562_test.go:22:26: undefined: maxSubArraySum

    /tmp/tmp3nc8s562_test.go:23:29: invalid argument: v (variable of type int) for
    len

    /tmp/tmp3nc8s562_test.go:24:34: invalid operation: cannot index v (variable of
    type int)

    /tmp/tmp3nc8s562_test.go:25:35: invalid operation: cannot index v (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075633
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n\n    var minSum =\
    \ nums[0]\n    for _, v := range nums {\n        minSum = minSum - v\n       \
    \ if minSum < 0 {\n            minSum = 0\n        }\n    }\n\n    return minSum\n\
    }\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpkfzk9sae_test.go:55: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpkfzk9sae_test.go:55:\
    \ expected '%!s(int=-6)', got '%!s(int=5)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpkfzk9sae_test.go:55: expected '%!s(int=-14)', got '%!s(int=13)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__3 (0.00s)\n        tmpkfzk9sae_test.go:55:\
    \ expected '%!s(int=-9999999999999999)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpkfzk9sae_test.go:55: expected '%!s(int=-6)', got '%!s(int=5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpkfzk9sae_test.go:55:\
    \ expected '%!s(int=-6)', got '%!s(int=5)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpkfzk9sae_test.go:55: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpkfzk9sae_test.go:55:\
    \ expected '%!s(int=-33)', got '%!s(int=4)'\n    --- FAIL: TestMinsubarraysum/test_num__9\
    \ (0.00s)\n        tmpkfzk9sae_test.go:55: expected '%!s(int=-10)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__10 (0.00s)\n        tmpkfzk9sae_test.go:55:\
    \ expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpkfzk9sae_test.go:55: expected '%!s(int=-1)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075633
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    var min int\n    min += nums[0]\n    for _, n := range nums[1:] {\n\
    \        if n+min < 0 {\n            min = -n - min\n        } else {\n      \
    \      min += n\n        }\n    }\n    return min\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpqhz8i6il_test.go:52: expected '%!s(int=1)', got '%!s(int=16)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpqhz8i6il_test.go:52:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpqhz8i6il_test.go:52: expected '%!s(int=-14)', got '%!s(int=8)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmpqhz8i6il_test.go:52:\
    \ expected '%!s(int=0)', got '%!s(int=1000030)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpqhz8i6il_test.go:52: expected '%!s(int=-6)', got '%!s(int=5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpqhz8i6il_test.go:52:\
    \ expected '%!s(int=-6)', got '%!s(int=99)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpqhz8i6il_test.go:52: expected '%!s(int=3)', got '%!s(int=49)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpqhz8i6il_test.go:52:\
    \ expected '%!s(int=-33)', got '%!s(int=96)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpqhz8i6il_test.go:52: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075633
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return -1\n    }\n\n    minSum, indexMin\
    \ := nums[0], 0\n    for _, num := range nums {\n        if num < minSum {\n \
    \           indexMin = 0\n            continue\n        }\n        if num == minSum\
    \ {\n            indexMin++\n            continue\n        }\n        if num >\
    \ minSum {\n            indexMin = 0\n        }\n        minSum, indexMin = num,\
    \ indexMin\n    }\n    if indexMin < len(nums)-1 {\n        minSum, indexMin =\
    \ nums[indexMin], indexMin+1\n    }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpn9sd42e9_test.go:65: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpn9sd42e9_test.go:65:\
    \ expected '%!s(int=-6)', got '%!s(int=-1)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpn9sd42e9_test.go:65: expected '%!s(int=-14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__5 (0.00s)\n        tmpn9sd42e9_test.go:65:\
    \ expected '%!s(int=-6)', got '%!s(int=-1)'\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmpn9sd42e9_test.go:65: expected '%!s(int=-6)', got '%!s(int=100)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__7 (0.00s)\n        tmpn9sd42e9_test.go:65:\
    \ expected '%!s(int=3)', got '%!s(int=10)'\n    --- FAIL: TestMinsubarraysum/test_num__8\
    \ (0.00s)\n        tmpn9sd42e9_test.go:65: expected '%!s(int=-33)', got '%!s(int=100)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__11 (0.00s)\n        tmpn9sd42e9_test.go:65:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075633
- exit_code: 2
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return nums[0]\n    }\n    p := make([]int,\
    \ 0, len(nums))\n    min := nums[0]\n    for _, v := range nums {\n        if\
    \ v < min {\n            min = v\n        }\n        p := append(p, v)\n    }\n\
    \    var minp int\n    for _, v := range p {\n        if v < min {\n         \
    \   minp = len(p)\n            min = v\n        }\n    }\n    return min\n}\n\n\
    func TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n\
    \     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpioyd8iky_test.go:25:9: p declared but not used

    /tmp/tmpioyd8iky_test.go:27:9: minp declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075633
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    min := 0\n    for _, value := range nums {\n        if value > 0\
    \ {\n            sum += value\n            if min > sum {\n                min\
    \ = sum\n            }\n        }\n    }\n    return min\n}\n</code>\n<|/ a dscore=1\
    \ tags=algorithm,go,dynamic-programming |>\n<| a tags=algorithm,go,dynamic-programming\
    \ dscore=0 |>\nThe solution can be done using dynamic programming. \nThe idea\
    \ behind dynamic programming is that you remember all subproblems you've already\
    \ solved, so you can reuse them for subsequent subproblems. In your case, you'll\
    \ need to remember a tuple (nums[j], i, subProblem) where i is the index of the\
    \ current sub-array and j is the index inside the current sub-array.\nThe code\
    \ should look something like this:\n<code>\nfunc TestMinsubarraysum(t *testing.T)\
    \ {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp49mw275l_test.go:27:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075633
- exit_code: 2
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if nums == nil || len(nums) == 0 {\n        return nums\n    }\n\n\
    \    sub := nums[:0]\n    max := nums[0]\n    min := nums[0]\n\n    for _, num\
    \ := range nums {\n        diff = max - num\n        if min > num {\n        \
    \    min = num\n        } else if num > max {\n            max = num\n       \
    \ }\n\n        sub = append(sub, num)\n    }\n\n    return min + sumSubArray(int64(max),\
    \ int64(min), int64(sub))\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpskyzfs6b_test.go:17:16: cannot use nums (variable of type []int) as type
    int in return statement

    /tmp/tmpskyzfs6b_test.go:25:9: undefined: diff

    /tmp/tmpskyzfs6b_test.go:35:18: undefined: sumSubArray

    /tmp/tmpskyzfs6b_test.go:35:60: cannot convert sub (variable of type []int) to
    type int64

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075633
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    lenList := len(nums)\n    if lenList == 0 {\n        return 0\n \
    \   }\n\n    // The length of sub-array we will be processing is lenList + 1\n\
    \    // We will be processing sub-arrays of length 1 to lenList\n    lenSubArray\
    \ := lenList + 1\n\n    // Min of first sub-array will be sum of first 1 to lenSubArray\
    \ numbers. Min of first sub-array will be sum of first 1 to lenSubArray numbers.\
    \ Min of first sub-array will be sum of first 1 to lenSubArray numbers\n    var\
    \ minOfFirstSubArray int\n    minOfFirstSubArray = nums[0]\n\n    // Min of the\
    \ remaining sub-arrays will be sum of lenSubArray + 1 to last number, because\
    \ of the inclusion of lenSubArray in the loop\n    var minOfRemainingSubArrays\
    \ int\n    minOfRemainingSubArrays = nums[lenList]\n\n    // Loop for all sub-arrays\
    \ of length 1 to lenSubArray\n    for i := 1; i < lenSubArray; i++ {\n       \
    \ // Update min of the remaining sub-arrays\n        minOfRemainingSubArrays -=\
    \ nums[i]\n\n        // Check if min of the current sub-array is greater than\
    \ the minimum of the remaining sub-arrays\n        if minOfRemainingSubArrays\
    \ < minOfFirstSubArray {\n            minOfFirstSubArray = minOfRemainingSubArrays\n\
    \        }\n    }\n\n    return minOfFirstSubArray\n}\n</code>\n<|/ a |>\n<| c\
    \ |>\nThank you for posting this! It was exactly what I needed.\n<|/ c |>\n<|\
    \ a dscore=2 |>\n<code>\n#include <stdio.h>\n#include <math.h>\n\nint main(void)\
    \ {\n  int arr[30];\n  printf(\"Enter 30 integers separated by space: \");\n \
    \ scanf(\"%d\", arr);\n  int n = sizeof(arr) / sizeof(arr[0]);\n  int minSum =\
    \ 0;\n  int totalSum = 0;\n  int mid = n/2;\n  int i, j, temp;\n  for (i = 0;\
    \ i < n; i++) {\n    minSum = INT_MAX;\n    for (j = mid + 1; j <= n; j++) {\n\
    \      temp = (int)(arr[j] - arr[j - mid]);\n      if (temp < minSum) {\n    \
    \    minSum = temp;\n      }\n    }\n    totalSum = totalSum + minSum;\n  }\n\
    \  printf(\"Minimum Sum = %d\", totalSum);\n}\n</code>\n<|/ a tags=arrays,c,algorithm\
    \ |>\n<| a dscore=2 |>\n<code>\nint minSum(vector<int>& nums, int len){\n    if(nums.size()<1)\n\
    \        return INT_MAX;\n    int mid = len/2;\n    vector<int> minSum(mid+1,\n\
    func TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n\
    \     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbo5bjkc7_test.go:46:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075633
- exit_code: 2
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    // TODO: Finish this function\n    // return -1\n    var result int\n\
    \    var current int\n    var min int\n\n    // start from index 0 to n-1\n  \
    \  for i := 0; i < len(nums); i++ {\n        if nums[i] == -1 {\n            continue\n\
    \        }\n\n        // add current number to result if current number is smaller\n\
    \        if current > nums[i] {\n            result += current\n        }\n  \
    \      // set the current number as new min number\n        min = nums[i]\n\n\
    \        // set current number as the current number\n        current = nums[i]\n\
    \n        // set result as the min sum if current number is smaller\n        //\
    \ if current number is larger, add the new current number\n        // as the current\
    \ number\n        if current > nums[i] {\n            result += current\n    \
    \    }\n    }\n    return result\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n\
    \  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpje0l5257_test.go:20:9: min declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075634
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    min := nums[0]\n\
    \    sum := 0\n    for _, n := range nums[1:] {\n        sum += n\n        if\
    \ sum < min {\n            min = sum\n        }\n    }\n    return min\n}\n</code>\n\
    And then you can test it by passing it a list of numbers and checking that the\
    \ expected result is returned.\n<code>\npackage minSubArraySum_test\n\nimport\
    \ (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc TestMinsubarraysum(t *testing.T)\
    \ {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_4q40e0z_test.go:29:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075633
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    // return -1 for empty list\n    if nums == nil {\n        return\
    \ -1\n    }\n\n    // nums[0] has min sum of any non-empty sub-list\n    sum :=\
    \ nums[0]\n\n    // loop through rest of numbers\n    for _, n := range nums[1:]\
    \ {\n        // check if n is larger than min sum so far\n        if n > sum {\n\
    \            // if so, set sum to n, which will keep the overall min sum of rest\
    \ of numbers\n            sum = n\n        }\n    }\n\n    return sum\n}\n\nfunc\
    \ TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n\
    \     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmp5sg5kl4b_test.go:60: expected '%!s(int=1)', got '%!s(int=4)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmp5sg5kl4b_test.go:60:\
    \ expected '%!s(int=-6)', got '%!s(int=-1)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmp5sg5kl4b_test.go:60: expected '%!s(int=-14)', got '%!s(int=2)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmp5sg5kl4b_test.go:60:\
    \ expected '%!s(int=0)', got '%!s(int=1000000)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmp5sg5kl4b_test.go:60: expected '%!s(int=-6)', got '%!s(int=10)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmp5sg5kl4b_test.go:60:\
    \ expected '%!s(int=-6)', got '%!s(int=100)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmp5sg5kl4b_test.go:60: expected '%!s(int=3)', got '%!s(int=13)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmp5sg5kl4b_test.go:60:\
    \ expected '%!s(int=-33)', got '%!s(int=100)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmp5sg5kl4b_test.go:60: expected '%!s(int=-1)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075634
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    arr := make([]int, len(nums))\n    arr[0] = nums[0]\n    min := arr[0]\n\
    \    for i := 1; i < len(nums); i++ {\n        arr[i] = nums[i] + arr[i-1]\n \
    \       if arr[i] < min {\n            min = arr[i]\n        }\n    }\n    return\
    \ min\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpwea4j8y6_test.go:52: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpwea4j8y6_test.go:52:\
    \ expected '%!s(int=-6)', got '%!s(int=94)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpwea4j8y6_test.go:52: expected '%!s(int=3)', got '%!s(int=10)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpwea4j8y6_test.go:52:\
    \ expected '%!s(int=-33)', got '%!s(int=67)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpwea4j8y6_test.go:52: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075634
- exit_code: 2
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    \n    // Initialize\
    \ a stack to hold nums\n    // - nums will be popped off each iteration\n    var\
    \ stack []int\n    \n    // Add first element of nums to stack\n    stack = append(stack,\
    \ nums[0])\n    \n    // Iterate until stack is empty\n    for i := 1; i < len(nums);\
    \ i++ {\n        // Add current element of nums to stack\n        stack = append(stack,\
    \ nums[i])\n        \n        // Remove current element of nums from stack\n \
    \       stack = append(stack[:len(stack)-1], stack[len(stack)-1])\n    }\n   \
    \ \n    // Pop off last element of stack\n    nums = stack[len(stack)-1]\n   \
    \ \n    // Return sum of last elements of stack\n    return int(nums)\n}\n\nfunc\
    \ TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n\
    \     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_3trndad_test.go:37:12: cannot use stack[len(stack) - 1] (variable of
    type int) as type []int in assignment

    /tmp/tmp_3trndad_test.go:40:16: cannot convert nums (variable of type []int) to
    type int

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075634
- exit_code: 2
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if nums == nil || len(nums) == 0 {\n        return 0\n    }\n\n \
    \   // sort the array first since we need the min sum later\n    sliceOfNums :=\
    \ nums\n    sliceOfNums = append(sliceOfNums, sliceOfNums...)\n    sliceOfNums\
    \ = append(sliceOfNums, sliceOfNums...)\n    sort.Ints(sliceOfNums)\n\n    min\
    \ := 0\n    var leftIndexAndSum = leftIndexAndSum{index: 0, sum: 0}\n\n    for\
    \ i := 0; i < len(sliceOfNums); i++ {\n        leftIndexAndSum.sum += sliceOfNums[i]\n\
    \        if leftIndexAndSum.sum < min {\n            min = leftIndexAndSum.sum\n\
    \        }\n\n        leftIndexAndSum.index++\n        if leftIndexAndSum.index\
    \ == len(nums) {\n            leftIndexAndSum.index = 0\n            leftIndexAndSum.sum\
    \ = 0\n        }\n    }\n\n    return min\n}\n\nfunc TestMinsubarraysum(t *testing.T)\
    \ {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzwxc7ak8_test.go:24:5: undefined: sort

    /tmp/tmpzwxc7ak8_test.go:27:27: undefined: leftIndexAndSum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075634
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    min := nums[0]\n    for _, num := range nums {\n        if num >\
    \ 0 {\n            min += num\n        }\n    }\n    return min\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpn_oiwman_test.go:49: expected '%!s(int=1)', got '%!s(int=18)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpn_oiwman_test.go:49:\
    \ expected '%!s(int=-6)', got '%!s(int=-1)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpn_oiwman_test.go:49: expected '%!s(int=-14)', got '%!s(int=1)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmpn_oiwman_test.go:49:\
    \ expected '%!s(int=0)', got '%!s(int=1000030)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpn_oiwman_test.go:49: expected '%!s(int=-6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpn_oiwman_test.go:49:\
    \ expected '%!s(int=-6)', got '%!s(int=210)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpn_oiwman_test.go:49: expected '%!s(int=3)', got '%!s(int=59)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpn_oiwman_test.go:49:\
    \ expected '%!s(int=-33)', got '%!s(int=232)'\n    --- FAIL: TestMinsubarraysum/test_num__10\
    \ (0.00s)\n        tmpn_oiwman_test.go:49: expected '%!s(int=7)', got '%!s(int=14)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__11 (0.00s)\n        tmpn_oiwman_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075634
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) < 2 {\n        return 0\n    }\n    m := len(nums)\n\
    \    result := nums[0] + minSubArraySum(nums[1:])\n    for i := 1; i < m; i++\
    \ {\n        result += nums[i]\n        if result < nums[i] {\n            break\n\
    \        }\n        result = nums[i]\n    }\n    return result\n}\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmplmfss1o5_test.go:54: expected '%!s(int=1)', got '%!s(int=4)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmplmfss1o5_test.go:54:\
    \ expected '%!s(int=-6)', got '%!s(int=-8)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmplmfss1o5_test.go:54: expected '%!s(int=-14)', got '%!s(int=-19)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__3 (0.00s)\n        tmplmfss1o5_test.go:54:\
    \ expected '%!s(int=-9999999999999999)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__4\
    \ (0.00s)\n        tmplmfss1o5_test.go:54: expected '%!s(int=0)', got '%!s(int=1000000)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__5 (0.00s)\n        tmplmfss1o5_test.go:54:\
    \ expected '%!s(int=-6)', got '%!s(int=-5)'\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmplmfss1o5_test.go:54: expected '%!s(int=-6)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__7 (0.00s)\n        tmplmfss1o5_test.go:54:\
    \ expected '%!s(int=3)', got '%!s(int=4)'\n    --- FAIL: TestMinsubarraysum/test_num__8\
    \ (0.00s)\n        tmplmfss1o5_test.go:54: expected '%!s(int=-33)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__9 (0.00s)\n        tmplmfss1o5_test.go:54:\
    \ expected '%!s(int=-10)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__10\
    \ (0.00s)\n        tmplmfss1o5_test.go:54: expected '%!s(int=7)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075635
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    var sum, minSum int\n    for _, num := range nums {\n        sum\
    \ += num\n        if sum < minSum {\n            minSum = sum\n        }\n   \
    \ }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmp71ounazu_test.go:50: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmp71ounazu_test.go:50:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmp71ounazu_test.go:50: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmp71ounazu_test.go:50:\
    \ expected '%!s(int=-33)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__10\
    \ (0.00s)\n        tmp71ounazu_test.go:50: expected '%!s(int=7)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__11 (0.00s)\n        tmp71ounazu_test.go:50:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075635
- exit_code: 2
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    length := len(nums)\n    if length == 0 {\n        return 0\n   \
    \ }\n\n    start := 0\n    end := length - 1\n\n    sub := 0\n    min := nums[start]\n\
    \n    for start < end {\n        sum += nums[start]\n        if sum < min {\n\
    \            min = sum\n            sub = start\n        }\n\n        sum -= nums[end]\n\
    \        if sum < min {\n            min = sum\n            sub = end\n      \
    \  }\n    }\n    return min\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0u6vu1xn_test.go:24:5: sub declared but not used

    /tmp/tmp0u6vu1xn_test.go:28:9: undefined: sum

    /tmp/tmp0u6vu1xn_test.go:29:12: undefined: sum

    /tmp/tmp0u6vu1xn_test.go:30:19: undefined: sum

    /tmp/tmp0u6vu1xn_test.go:34:9: undefined: sum

    /tmp/tmp0u6vu1xn_test.go:35:12: undefined: sum

    /tmp/tmp0u6vu1xn_test.go:36:19: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075634
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    min := nums[0]\n    for _, v := range nums {\n        min = min +\
    \ v\n    }\n    return min\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpfg59lep0_test.go:47: expected '%!s(int=1)', got '%!s(int=18)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpfg59lep0_test.go:47:\
    \ expected '%!s(int=-6)', got '%!s(int=-7)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpfg59lep0_test.go:47: expected '%!s(int=-14)', got '%!s(int=-15)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__3 (0.00s)\n        tmpfg59lep0_test.go:47:\
    \ expected '%!s(int=-9999999999999999)', got '%!s(int=-19999999999999998)'\n \
    \   --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmpfg59lep0_test.go:47:\
    \ expected '%!s(int=0)', got '%!s(int=1000030)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpfg59lep0_test.go:47: expected '%!s(int=-6)', got '%!s(int=-2)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpfg59lep0_test.go:47:\
    \ expected '%!s(int=-6)', got '%!s(int=199)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpfg59lep0_test.go:47: expected '%!s(int=3)', got '%!s(int=59)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpfg59lep0_test.go:47:\
    \ expected '%!s(int=-33)', got '%!s(int=196)'\n    --- FAIL: TestMinsubarraysum/test_num__9\
    \ (0.00s)\n        tmpfg59lep0_test.go:47: expected '%!s(int=-10)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__10 (0.00s)\n        tmpfg59lep0_test.go:47:\
    \ expected '%!s(int=7)', got '%!s(int=14)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpfg59lep0_test.go:47: expected '%!s(int=-1)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075635
- exit_code: 2
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    n := len(nums)\n    if n == 0 {\n        return 0\n    }\n    \n\
    \    min := nums[n-1]\n    for i := n - 2; i >= 0; i-- {\n        sum += nums[i]\n\
    \        if sum < min {\n            min = sum\n        }\n    }\n    return min\n\
    }\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk8unv9kv_test.go:23:9: undefined: sum

    /tmp/tmpk8unv9kv_test.go:24:12: undefined: sum

    /tmp/tmpk8unv9kv_test.go:25:19: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075635
- exit_code: 2
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n\n    result := nums[0]\n\
    \    for _, num := range nums[1:] {\n        result = min(result, num+result)\n\
    \    }\n    return result\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp84ibxx_t_test.go:22:18: undefined: min

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075635
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    var minimum int = 0\n    for _, v := range nums {\n        minimum\
    \ = minimum + v\n    }\n    return minimum\n}\n\nfunc TestMinsubarraysum(t *testing.T)\
    \ {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpiz_jxbew_test.go:47: expected '%!s(int=1)', got '%!s(int=16)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmpiz_jxbew_test.go:47:\
    \ expected '%!s(int=0)', got '%!s(int=1000030)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpiz_jxbew_test.go:47: expected '%!s(int=-6)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpiz_jxbew_test.go:47:\
    \ expected '%!s(int=-6)', got '%!s(int=99)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpiz_jxbew_test.go:47: expected '%!s(int=3)', got '%!s(int=49)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpiz_jxbew_test.go:47:\
    \ expected '%!s(int=-33)', got '%!s(int=96)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpiz_jxbew_test.go:47: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075635
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    ans := 0\n    for _, num := range nums {\n        ans = num + ans\n\
    \    }\n    return ans\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpgke2pfwm_test.go:47: expected '%!s(int=1)', got '%!s(int=16)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmpgke2pfwm_test.go:47:\
    \ expected '%!s(int=0)', got '%!s(int=1000030)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpgke2pfwm_test.go:47: expected '%!s(int=-6)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpgke2pfwm_test.go:47:\
    \ expected '%!s(int=-6)', got '%!s(int=99)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpgke2pfwm_test.go:47: expected '%!s(int=3)', got '%!s(int=49)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpgke2pfwm_test.go:47:\
    \ expected '%!s(int=-33)', got '%!s(int=96)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpgke2pfwm_test.go:47: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075635
- exit_code: 2
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return -1\n    }\n    minSum := nums[0]\n\
    \    for _, num := range nums {\n        sum, found := findSum(num, minSum)\n\
    \        if found {\n            minSum = sum\n        }\n    }\n    return minSum\n\
    }\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcfkyhn_c_test.go:21:23: undefined: findSum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075635
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) <= 0 {\n        return 0\n    }\n    min := nums[0]\n\
    \    sum := 0\n    for i := 1; i < len(nums); i++ {\n        sum += nums[i]\n\
    \        if sum < min {\n            min = sum\n        }\n    }\n    return min\n\
    }\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpsl2g5v60_test.go:54: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpsl2g5v60_test.go:54:\
    \ expected '%!s(int=-6)', got '%!s(int=-5)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpsl2g5v60_test.go:54: expected '%!s(int=-14)', got '%!s(int=-13)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__5 (0.00s)\n        tmpsl2g5v60_test.go:54:\
    \ expected '%!s(int=-6)', got '%!s(int=-5)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpsl2g5v60_test.go:54: expected '%!s(int=3)', got '%!s(int=10)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075635
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    size := len(nums)\n    if size == 0 {\n        return 0\n    }\n\
    \    sums := make([]int, size)\n    for i := 0; i < size; i++ {\n        for j\
    \ := i; j < size; j++ {\n            sums[i] += nums[j] + nums[i]\n        }\n\
    \    }\n    return sums[size-1]\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n\
    \  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmp1970k98v_test.go:53: expected '%!s(int=1)', got '%!s(int=8)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__2 (0.00s)\n        tmp1970k98v_test.go:53:\
    \ expected '%!s(int=-14)', got '%!s(int=-20)'\n    --- FAIL: TestMinsubarraysum/test_num__3\
    \ (0.00s)\n        tmp1970k98v_test.go:53: expected '%!s(int=-9999999999999999)',\
    \ got '%!s(int=-19999999999999998)'\n    --- FAIL: TestMinsubarraysum/test_num__4\
    \ (0.00s)\n        tmp1970k98v_test.go:53: expected '%!s(int=0)', got '%!s(int=2000000)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__5 (0.00s)\n        tmp1970k98v_test.go:53:\
    \ expected '%!s(int=-6)', got '%!s(int=-10)'\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmp1970k98v_test.go:53: expected '%!s(int=-6)', got '%!s(int=-10)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__7 (0.00s)\n        tmp1970k98v_test.go:53:\
    \ expected '%!s(int=3)', got '%!s(int=8)'\n    --- FAIL: TestMinsubarraysum/test_num__8\
    \ (0.00s)\n        tmp1970k98v_test.go:53: expected '%!s(int=-33)', got '%!s(int=-4)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__9 (0.00s)\n        tmp1970k98v_test.go:53:\
    \ expected '%!s(int=-10)', got '%!s(int=-20)'\n    --- FAIL: TestMinsubarraysum/test_num__10\
    \ (0.00s)\n        tmp1970k98v_test.go:53: expected '%!s(int=7)', got '%!s(int=14)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__11 (0.00s)\n        tmp1970k98v_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=-2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075635
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    // Write your code here.\n    // Initialize min to first element\
    \ and num to second element in the list\n    var min, num : int , tmp = nums[1]\n\
    \    // Iterate over the list until you reach the end\n    for _, element := range\
    \ nums[1 : ] {\n        // Subtract current element from num\n        tmp = num\
    \ - element\n        // If tmp is smaller than min, then update min\n        if\
    \ tmp < min {\n            min = tmp\n        }\n    }\n    // return the minimum\
    \ number\n    return min\n}\n</code>\n<|/ a tags=arrays,go |>\n<| c |>\nthis works\
    \ only with non negative numbers\n<|/ c |>\n<| a |>\nHere is another simple solution\
    \ with one O(n) pass over the input:\n<code>\npackage main\n\nimport (\n    \"\
    fmt\"\n)\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpevux57ac_test.go:18:18: expected '';'', found '':''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075635
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    // Your code here\n    if nums == nil {\n        return 0\n    }\n\
    \    \n    if len(nums) <= 0 {\n        return 0\n    }\n    \n    for i := range\
    \ nums {\n        for j := range nums {\n            if j >= i {\n           \
    \     break\n            }\n            nums[j] -= nums[i]\n        }\n    }\n\
    \    \n    return nums[0]\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpmrtjou6y_test.go:61: expected '%!s(int=1)', got '%!s(int=-12)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpmrtjou6y_test.go:61:\
    \ expected '%!s(int=-6)', got '%!s(int=4)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpmrtjou6y_test.go:61: expected '%!s(int=-14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmpmrtjou6y_test.go:61:\
    \ expected '%!s(int=0)', got '%!s(int=-1000030)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpmrtjou6y_test.go:61: expected '%!s(int=-6)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpmrtjou6y_test.go:61:\
    \ expected '%!s(int=-6)', got '%!s(int=101)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpmrtjou6y_test.go:61: expected '%!s(int=3)', got '%!s(int=-29)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpmrtjou6y_test.go:61:\
    \ expected '%!s(int=-33)', got '%!s(int=104)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpmrtjou6y_test.go:61: expected '%!s(int=-1)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075636
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    // If nums is empty, return 0\n    if len(nums) == 0 {\n        return\
    \ 0\n    }\n\n    // Initialise min to first element in array\n    var min int\n\
    \    min = nums[0]\n\n    // For each element in the array, add it to the minimum\n\
    \    // if it is larger than the current minimum\n    for i := 1; i < len(nums);\
    \ i++ {\n        if nums[i] > min {\n            min = nums[i]\n        }\n  \
    \  }\n\n    // If there is only one element in the array, return\n    // that\
    \ element\n    if len(nums) == 1 {\n        return min\n    }\n\n    // For each\
    \ element in the array, subtract the minimum\n    // from the element and keep\
    \ track of the smallest value\n    // that comes out of it\n    for i := 1; i\
    \ < len(nums); i++ {\n        nums[i] -= min\n        if nums[i] < 0 {\n     \
    \       return min\n        }\n        min = nums[i]\n    }\n    return min\n\
    }\n</code>\n<|/ a dscore=3 |>\n<| a dscore=2 |>\nYou can use recursion. As you\
    \ see in this code:\n<code>\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmptni67a7a_test.go:51:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075635
- exit_code: 2
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    return minSubArraySum_test.minSubArraySum(nums)\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp03r8ykcq_test.go:16:12: undefined: minSubArraySum_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075635
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    min := nums[0]\n\
    \    max := nums[0]\n    for i := 1; i < len(nums); i++ {\n        if nums[i]\
    \ < min {\n            min = nums[i]\n        } else if nums[i] > max {\n    \
    \        max = nums[i]\n        }\n    }\n    return min\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__1\
    \ (0.00s)\n        tmpjzt_yj3x_test.go:55: expected '%!s(int=-6)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__2 (0.00s)\n        tmpjzt_yj3x_test.go:55:\
    \ expected '%!s(int=-14)', got '%!s(int=-10)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpjzt_yj3x_test.go:55: expected '%!s(int=-6)', got '%!s(int=-5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpjzt_yj3x_test.go:55:\
    \ expected '%!s(int=-6)', got '%!s(int=-5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075636
- exit_code: 2
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    var i, j int\n    var res int\n\n    for i = 0; i < len(nums); i++\
    \ {\n        res, _ = maxSubArraySum(nums, i, 0)\n\n        if res == nums[i]\
    \ {\n            i++\n            continue\n        }\n\n        res, _ = maxSubArraySum(nums,\
    \ i, 1)\n\n        if res < nums[i] {\n            break\n        }\n\n      \
    \  i++\n    }\n\n    return res\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n\
    \  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpil1vgiwl_test.go:16:12: j declared but not used

    /tmp/tmpil1vgiwl_test.go:20:18: undefined: maxSubArraySum

    /tmp/tmpil1vgiwl_test.go:27:18: undefined: maxSubArraySum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075636
- exit_code: 2
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) <= 0 {\n        return 0\n    }\n    return minSubArraySumHelper(nums,\
    \ 0, len(nums)-1)\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate :=\
    \ minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzjva9c93_test.go:19:12: undefined: minSubArraySumHelper

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075636
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    var min int\n \
    \   for i := 0; i < len(nums)-1; i++ {\n        min = nums[i] + min\n        for\
    \ j := i + 1; j < len(nums); j++ {\n            min = nums[j] + min\n        }\n\
    \    }\n    return min\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpqnthyi2q_test.go:53: expected '%!s(int=1)', got '%!s(int=54)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpqnthyi2q_test.go:53:\
    \ expected '%!s(int=-6)', got '%!s(int=-11)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpqnthyi2q_test.go:53: expected '%!s(int=-14)', got '%!s(int=-46)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__3 (0.00s)\n        tmpqnthyi2q_test.go:53:\
    \ expected '%!s(int=-9999999999999999)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__4\
    \ (0.00s)\n        tmpqnthyi2q_test.go:53: expected '%!s(int=0)', got '%!s(int=3000080)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__5 (0.00s)\n        tmpqnthyi2q_test.go:53:\
    \ expected '%!s(int=-6)', got '%!s(int=6)'\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmpqnthyi2q_test.go:53: expected '%!s(int=-6)', got '%!s(int=105)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__7 (0.00s)\n        tmpqnthyi2q_test.go:53:\
    \ expected '%!s(int=3)', got '%!s(int=138)'\n    --- FAIL: TestMinsubarraysum/test_num__8\
    \ (0.00s)\n        tmpqnthyi2q_test.go:53: expected '%!s(int=-33)', got '%!s(int=116)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__9 (0.00s)\n        tmpqnthyi2q_test.go:53:\
    \ expected '%!s(int=-10)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__10\
    \ (0.00s)\n        tmpqnthyi2q_test.go:53: expected '%!s(int=7)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__11 (0.00s)\n        tmpqnthyi2q_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075636
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    // We are going to be using a map to keep track of what numbers are\
    \ already seen and what sums are seen\n    // We will use two maps to maintain\
    \ this data.\n    seen := map[int]int{}\n    sums := map[int]int{}\n    // We\
    \ will assume that the first sum in the map must be 0 (we will initialize it later)\n\
    \    sums[0] = 0\n    min := 0\n\n    for i := range nums {\n        // If we\
    \ see this number before, then update the map with its new sum.\n        // Note\
    \ that we are using an int, and will have to wrap around\n        seen[nums[i]]\
    \ = i + sums[nums[i]]\n        sums[nums[i]] = sums[nums[i]] + nums[i]\n     \
    \   if sums[nums[i]] == min {\n            min = sums[nums[i]]\n        }\n  \
    \  }\n    return min\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmppou48ewg_test.go:60: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmppou48ewg_test.go:60:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmppou48ewg_test.go:60: expected '%!s(int=-14)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__3 (0.00s)\n        tmppou48ewg_test.go:60:\
    \ expected '%!s(int=-9999999999999999)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmppou48ewg_test.go:60: expected '%!s(int=-6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmppou48ewg_test.go:60:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmppou48ewg_test.go:60: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmppou48ewg_test.go:60:\
    \ expected '%!s(int=-33)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__9\
    \ (0.00s)\n        tmppou48ewg_test.go:60: expected '%!s(int=-10)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__10 (0.00s)\n        tmppou48ewg_test.go:60:\
    \ expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmppou48ewg_test.go:60: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075636
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    s := 0\n    for _, v := range nums {\n        s += v\n    }\n   \
    \ return s\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpt8_wob16_test.go:47: expected '%!s(int=1)', got '%!s(int=16)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmpt8_wob16_test.go:47:\
    \ expected '%!s(int=0)', got '%!s(int=1000030)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpt8_wob16_test.go:47: expected '%!s(int=-6)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpt8_wob16_test.go:47:\
    \ expected '%!s(int=-6)', got '%!s(int=99)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpt8_wob16_test.go:47: expected '%!s(int=3)', got '%!s(int=49)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpt8_wob16_test.go:47:\
    \ expected '%!s(int=-33)', got '%!s(int=96)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpt8_wob16_test.go:47: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075636
- exit_code: 2
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    min := intMax\n    sum := 0\n    for _, x := range nums {\n     \
    \   sum += x\n        if sum < min {\n            min = sum\n        }\n    }\n\
    \    return min\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate :=\
    \ minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjl0ljqi2_test.go:16:12: undefined: intMax

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075636
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    if nums[0] < 0\
    \ {\n        return minSubArraySum(nums[1:])\n    }\n    return minSubArraySum(nums[:len(nums)-1])\
    \ + nums[len(nums)-1]\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpxw3xk1gr_test.go:49: expected '%!s(int=1)', got '%!s(int=16)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpxw3xk1gr_test.go:49:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpxw3xk1gr_test.go:49: expected '%!s(int=-14)', got '%!s(int=-8)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__3 (0.00s)\n        tmpxw3xk1gr_test.go:49:\
    \ expected '%!s(int=-9999999999999999)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__4\
    \ (0.00s)\n        tmpxw3xk1gr_test.go:49: expected '%!s(int=0)', got '%!s(int=1000030)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__5 (0.00s)\n        tmpxw3xk1gr_test.go:49:\
    \ expected '%!s(int=-6)', got '%!s(int=5)'\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmpxw3xk1gr_test.go:49: expected '%!s(int=-6)', got '%!s(int=99)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__7 (0.00s)\n        tmpxw3xk1gr_test.go:49:\
    \ expected '%!s(int=3)', got '%!s(int=49)'\n    --- FAIL: TestMinsubarraysum/test_num__8\
    \ (0.00s)\n        tmpxw3xk1gr_test.go:49: expected '%!s(int=-33)', got '%!s(int=96)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__9 (0.00s)\n        tmpxw3xk1gr_test.go:49:\
    \ expected '%!s(int=-10)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpxw3xk1gr_test.go:49: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075637
- exit_code: 2
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    s := sumOfSubArrays(nums)\n\
    \    if s == 0 {\n        return 0\n    }\n    return s\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx5s02l38_test.go:19:10: undefined: sumOfSubArrays

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075636
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    result := 0\n    for _, num := range nums {\n        result += num\n\
    \    }\n    return result\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpupxa9zf9_test.go:47: expected '%!s(int=1)', got '%!s(int=16)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmpupxa9zf9_test.go:47:\
    \ expected '%!s(int=0)', got '%!s(int=1000030)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpupxa9zf9_test.go:47: expected '%!s(int=-6)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpupxa9zf9_test.go:47:\
    \ expected '%!s(int=-6)', got '%!s(int=99)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpupxa9zf9_test.go:47: expected '%!s(int=3)', got '%!s(int=49)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpupxa9zf9_test.go:47:\
    \ expected '%!s(int=-33)', got '%!s(int=96)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpupxa9zf9_test.go:47: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075370
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    minSum := nums[0]\n\
    \    lastNum := nums[0]\n    for _, num := range nums[1:] {\n        minSum -=\
    \ lastNum\n        minSum = minSum + num\n        lastNum = num\n    }\n    return\
    \ minSum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmp8ppge3q9_test.go:53: expected '%!s(int=1)', got '%!s(int=4)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmp8ppge3q9_test.go:53:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmp8ppge3q9_test.go:53: expected '%!s(int=-14)', got '%!s(int=-10)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmp8ppge3q9_test.go:53:\
    \ expected '%!s(int=0)', got '%!s(int=1000000)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmp8ppge3q9_test.go:53: expected '%!s(int=-6)', got '%!s(int=-5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmp8ppge3q9_test.go:53:\
    \ expected '%!s(int=-6)', got '%!s(int=-5)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmp8ppge3q9_test.go:53: expected '%!s(int=3)', got '%!s(int=4)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmp8ppge3q9_test.go:53:\
    \ expected '%!s(int=-33)', got '%!s(int=-2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075637
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    result := 0\n    start := 0\n    end := len(nums)\n\n    for start\
    \ < end {\n        for end > start && nums[end-1] <= nums[end] {\n           \
    \ end--\n        }\n        result += nums[start]\n        for end > start &&\
    \ nums[end-1] >= nums[end] {\n            end--\n        }\n        result +=\
    \ nums[start]\n        start += 1\n    }\n\n    return result\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\npanic: runtime error: index out of\
    \ range [6] with length 6 [recovered]\n\tpanic: runtime error: index out of range\
    \ [6] with length 6\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.minSubArraySum(...)\n\t/tmp/tmpp931rqdv_test.go:21\n\
    command-line-arguments_test.TestMinsubarraysum(0x0?)\n\t/tmp/tmpp931rqdv_test.go:42\
    \ +0x148c\ntesting.tRunner(0xc0000da340, 0x528f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075637
- exit_code: 2
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    min := nums[0]\n    for _, v := range nums {\n        min = min(v,\
    \ min)\n    }\n    return min\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n\
    \  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp16jc90i5_test.go:17:12: v declared but not used

    /tmp/tmp16jc90i5_test.go:18:15: invalid operation: cannot call non-function min
    (variable of type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075636
- exit_code: 2
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    var min = nums[0]\n    for _, num := range nums {\n        min =\
    \ min(num, min)\n    }\n    return min\n}\n\nfunc TestMinsubarraysum(t *testing.T)\
    \ {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzc31udu4_test.go:17:12: num declared but not used

    /tmp/tmpzc31udu4_test.go:18:15: invalid operation: cannot call non-function min
    (variable of type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075636
- exit_code: 2
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    if len(nums) ==\
    \ 1 {\n        return nums[0]\n    }\n    leftSum, _ := minSubArraySum(nums[0:len(nums)-1])\n\
    \    rightSum, _ := minSubArraySum(nums[len(nums)-1:len(nums)])\n    return leftSum\
    \ + rightSum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppm68vly0_test.go:22:19: assignment mismatch: 2 variables but minSubArraySum
    returns 1 value

    /tmp/tmppm68vly0_test.go:23:20: assignment mismatch: 2 variables but minSubArraySum
    returns 1 value

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075636
- exit_code: 2
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    for len(nums) > 0 {\n        var min int\n        var sub []int\n\
    \        for i := 0; i < len(nums); i++ {\n            sum += nums[i]\n      \
    \      if sum < min {\n                min = sum\n                sub = nums[:i]\n\
    \            } else {\n                break\n            }\n        }\n     \
    \   nums = sub\n    }\n    return min\n}\n\nfunc TestMinsubarraysum(t *testing.T)\
    \ {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp08p6at45_test.go:20:13: undefined: sum

    /tmp/tmp08p6at45_test.go:21:16: undefined: sum

    /tmp/tmp08p6at45_test.go:22:23: undefined: sum

    /tmp/tmp08p6at45_test.go:30:12: undefined: min

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075636
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) < 1 {\n        return 0\n    }\n    min := nums[0]\n\
    \    for _, i := range nums {\n        if min > i {\n            min = i\n   \
    \     }\n    }\n    return min\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n\
    \  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__1\
    \ (0.00s)\n        tmp5_bonruu_test.go:52: expected '%!s(int=-6)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__2 (0.00s)\n        tmp5_bonruu_test.go:52:\
    \ expected '%!s(int=-14)', got '%!s(int=-10)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmp5_bonruu_test.go:52: expected '%!s(int=-6)', got '%!s(int=-5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmp5_bonruu_test.go:52:\
    \ expected '%!s(int=-6)', got '%!s(int=-5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075637
- exit_code: 2
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    minimum := nums[0]\n    for _, v := range nums {\n        minimum\
    \ = min (minimum, v - minimum)\n    }\n    return minimum\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpeqb357zm_test.go:18:19: undefined: min

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075637
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    sum := 0\n    for _, v := range nums {\n        sum += v\n    }\n\
    \    return sum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate :=\
    \ minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmp4wlm23pi_test.go:47: expected '%!s(int=1)', got '%!s(int=16)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmp4wlm23pi_test.go:47:\
    \ expected '%!s(int=0)', got '%!s(int=1000030)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmp4wlm23pi_test.go:47: expected '%!s(int=-6)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmp4wlm23pi_test.go:47:\
    \ expected '%!s(int=-6)', got '%!s(int=99)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmp4wlm23pi_test.go:47: expected '%!s(int=3)', got '%!s(int=49)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmp4wlm23pi_test.go:47:\
    \ expected '%!s(int=-33)', got '%!s(int=96)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmp4wlm23pi_test.go:47: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075370
- exit_code: 2
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    return minSubArraySum_test(nums, 0, len(nums)-1, nums)\n}\n\nfunc\
    \ TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n\
    \     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpolrndrb6_test.go:16:12: undefined: minSubArraySum_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075637
- exit_code: 2
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    // find the lowest negative number\n    lowNegativeNum := nums[0]\n\
    \    for _, num := range nums[1:] {\n        if num < 0 {\n            lowNegativeNum\
    \ = num\n        }\n    }\n\n    // if the lowest negative number is 0, the lowest\
    \ negative number is\n    // the lowest sum of negative numbers in the array\n\
    \    if lowNegativeNum == 0 {\n        return 0\n    }\n\n    // initialize the\
    \ sum of the negative numbers and add it to the lowest negative number\n    lowestNegativeNum\
    \ := lowNegativeNum\n    lowestNegativeSum := lowNegativeNum\n    for _, num :=\
    \ range nums {\n        if num < 0 {\n            lowestNegativeSum = lowestNegativeSum\
    \ + num\n        }\n        if lowestNegativeSum > lowNegativeSum {\n        \
    \    lowestNegativeSum = lowestNegativeSum + num\n        }\n    }\n\n    // if\
    \ the lowest negative number is negative, then there is not an\n    // optimal\
    \ solution because the sum of the negative numbers is lower than the lowest negative\
    \ number\n    if lowestNegativeNum < 0 {\n        return 0\n    }\n\n    // if\
    \ the lowest negative number is positive, find the lowest sum that is equal to\
    \ the lowest negative number\n    if lowestNegativeNum > 0 {\n        for i :=\
    \ 1; i < len(nums); i++ {\n            if nums[i] == lowestNegativeNum {\n   \
    \             lowestNegativeSum = lowestNegativeSum + lowestNegativeNum\n    \
    \            if lowestNegativeSum > lowNegativeSum {\n                    return\
    \ lowestNegativeSum\n                }\n            }\n        }\n    }\n\n  \
    \  return lowestNegativeSum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9ayb13td_test.go:37:32: undefined: lowNegativeSum

    /tmp/tmp9ayb13td_test.go:53:40: undefined: lowNegativeSum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075637
- exit_code: 2
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) < 1 {\n        return -1\n    }\n    var result int\n\
    \    idx := 0\n    for idx < len(nums) {\n        result += nums[idx]\n      \
    \  nums[idx], result = minSubArraySum(nums[idx:])\n    }\n    return result\n\
    }\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkp7__rc5_test.go:23:29: assignment mismatch: 2 variables but minSubArraySum
    returns 1 value

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075637
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    sum := nums[0]\n\
    \    for _, i := range nums {\n        if sum < i {\n            sum = i\n   \
    \     }\n    }\n    return sum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n\
    \  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmph2p2i5uy_test.go:52: expected '%!s(int=1)', got '%!s(int=4)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmph2p2i5uy_test.go:52:\
    \ expected '%!s(int=-6)', got '%!s(int=-1)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmph2p2i5uy_test.go:52: expected '%!s(int=-14)', got '%!s(int=2)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmph2p2i5uy_test.go:52:\
    \ expected '%!s(int=0)', got '%!s(int=1000000)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmph2p2i5uy_test.go:52: expected '%!s(int=-6)', got '%!s(int=10)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmph2p2i5uy_test.go:52:\
    \ expected '%!s(int=-6)', got '%!s(int=100)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmph2p2i5uy_test.go:52: expected '%!s(int=3)', got '%!s(int=13)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmph2p2i5uy_test.go:52:\
    \ expected '%!s(int=-33)', got '%!s(int=100)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmph2p2i5uy_test.go:52: expected '%!s(int=-1)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075638
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    var minSum int\n    for _, num := range nums {\n        currSum :=\
    \ 0\n        for _, n := range nums {\n            if n == num {\n           \
    \     currSum += n\n            }\n        }\n        minSum = minSum < currSum\
    \ ? currSum : minSum\n    }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp8i9jigcx_test.go:24:35: illegal character U+003F ''?''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075637
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) < 2 {\n        return nums[0]\n    }\n    min := nums[0]\n\
    \    max := nums[0]\n    for _, v := range nums[1:] {\n        if v < min {\n\
    \            min = v\n        }\n        if v > max {\n            max = v\n \
    \       }\n    }\n\n    for _, v := range nums {\n        if min > v {\n     \
    \       min = v\n        }\n        if max < v {\n            max = v\n      \
    \  }\n    }\n\n    return min\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n\
    \  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__1\
    \ (0.00s)\n        tmp_blaije8_test.go:66: expected '%!s(int=-6)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__2 (0.00s)\n        tmp_blaije8_test.go:66:\
    \ expected '%!s(int=-14)', got '%!s(int=-10)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmp_blaije8_test.go:66: expected '%!s(int=-6)', got '%!s(int=-5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmp_blaije8_test.go:66:\
    \ expected '%!s(int=-6)', got '%!s(int=-5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075638
- exit_code: 2
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    // We have to start off by having a list of all possible sums.\n\
    \    allSums := make(map[int]int)\n    for _, n := range nums {\n        allSums[n]\
    \ = n + minSubArraySum(nums[:len(nums)-1]) + minSubArraySum(nums[1:])\n    }\n\
    \n    // Now we go through this map and find the minimum sum possible for our\
    \ input.\n    min := -math.MaxInt64\n    for key, val := range allSums {\n   \
    \     if val < min {\n            min = val\n        }\n    }\n    return min\n\
    }\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmps5kwsppg_test.go:23:13: undefined: math

    /tmp/tmps5kwsppg_test.go:24:9: key declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075638
- exit_code: 2
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    var sum int\n    i := 0\n    for i; i < len(nums); i++ {\n      \
    \  sum += nums[i]\n    }\n    return sum\n}\n\nfunc TestMinsubarraysum(t *testing.T)\
    \ {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqdysq4ej_test.go:18:9: i (variable of type int) is not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075638
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if nums == nil {\n        return 0\n    }\n    min := nums[0]\n \
    \   for _, n := range nums[1:] {\n        min = min+n\n    }\n    return min\n\
    }\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpq3xr74bf_test.go:50: expected '%!s(int=1)', got '%!s(int=16)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmpq3xr74bf_test.go:50:\
    \ expected '%!s(int=0)', got '%!s(int=1000030)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpq3xr74bf_test.go:50: expected '%!s(int=-6)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpq3xr74bf_test.go:50:\
    \ expected '%!s(int=-6)', got '%!s(int=99)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpq3xr74bf_test.go:50: expected '%!s(int=3)', got '%!s(int=49)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpq3xr74bf_test.go:50:\
    \ expected '%!s(int=-33)', got '%!s(int=96)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpq3xr74bf_test.go:50: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075638
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    \n    var res int\n\n    // Start with first element in array\n \
    \   for i := 0; i < len(nums); i++ {\n        \n        // Iterate over all elements\
    \ that would have fallen out of range (including it)\n        for j := i; j <\
    \ len(nums)-i; j++ {\n            \n            // If this element is greater\
    \ than the current min so far, update min\n            if nums[j] > res+nums[j]\
    \ {\n                res = nums[j]\n            }\n        }\n    }\n    \n  \
    \  return res\n}\n</code>\n<|/ a dscore=0 |>\n<| a |>\nThis is a more concise\
    \ and readable solution that uses slices and a for loop:\n<code>\npackage main\n\
    \nimport (\n    \"fmt\"\n)\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvummms9c_test.go:34:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075638
- exit_code: 2
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return -1\n    }\n\n    // Initialize\
    \ sum to first item\n    var sum int\n    sum := nums[0]\n\n    // Keep track\
    \ of the minimum sum seen so far\n    var minSum int\n    minSum = nums[0]\n\n\
    \    // For all remaining items\n    for _, num := range nums[1:] {\n        //\
    \ Add the current item to the sum\n        sum += num\n\n        // If the current\
    \ sum is less than the minimum, set it as the minimum\n        if sum < minSum\
    \ {\n            minSum = sum\n        }\n    }\n\n    return minSum\n}\n\nfunc\
    \ TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n\
    \     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5p63v1fd_test.go:22:9: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075638
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    total := 0\n    for _, v := range nums {\n        if v > 0 {\n  \
    \          total += v\n        }\n    }\n    return total\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmp7bvtb5uk_test.go:49: expected '%!s(int=1)', got '%!s(int=16)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmp7bvtb5uk_test.go:49:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmp7bvtb5uk_test.go:49: expected '%!s(int=-14)', got '%!s(int=2)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__3 (0.00s)\n        tmp7bvtb5uk_test.go:49:\
    \ expected '%!s(int=-9999999999999999)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__4\
    \ (0.00s)\n        tmp7bvtb5uk_test.go:49: expected '%!s(int=0)', got '%!s(int=1000030)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__5 (0.00s)\n        tmp7bvtb5uk_test.go:49:\
    \ expected '%!s(int=-6)', got '%!s(int=10)'\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmp7bvtb5uk_test.go:49: expected '%!s(int=-6)', got '%!s(int=110)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__7 (0.00s)\n        tmp7bvtb5uk_test.go:49:\
    \ expected '%!s(int=3)', got '%!s(int=49)'\n    --- FAIL: TestMinsubarraysum/test_num__8\
    \ (0.00s)\n        tmp7bvtb5uk_test.go:49: expected '%!s(int=-33)', got '%!s(int=132)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__9 (0.00s)\n        tmp7bvtb5uk_test.go:49:\
    \ expected '%!s(int=-10)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmp7bvtb5uk_test.go:49: expected '%!s(int=-1)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075639
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) < 1 {\n        return 0\n    }\n    sum := nums[0]\n\
    \    for _, num := range nums[1:] {\n        sum += num\n    }\n    return sum\n\
    }\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpyjbegorh_test.go:50: expected '%!s(int=1)', got '%!s(int=16)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmpyjbegorh_test.go:50:\
    \ expected '%!s(int=0)', got '%!s(int=1000030)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpyjbegorh_test.go:50: expected '%!s(int=-6)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpyjbegorh_test.go:50:\
    \ expected '%!s(int=-6)', got '%!s(int=99)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpyjbegorh_test.go:50: expected '%!s(int=3)', got '%!s(int=49)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpyjbegorh_test.go:50:\
    \ expected '%!s(int=-33)', got '%!s(int=96)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpyjbegorh_test.go:50: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075639
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    var total int\n    for _, num := range nums {\n        total += num\n\
    \    }\n    return total\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmp1qwx3md__test.go:47: expected '%!s(int=1)', got '%!s(int=16)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmp1qwx3md__test.go:47:\
    \ expected '%!s(int=0)', got '%!s(int=1000030)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmp1qwx3md__test.go:47: expected '%!s(int=-6)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmp1qwx3md__test.go:47:\
    \ expected '%!s(int=-6)', got '%!s(int=99)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmp1qwx3md__test.go:47: expected '%!s(int=3)', got '%!s(int=49)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmp1qwx3md__test.go:47:\
    \ expected '%!s(int=-33)', got '%!s(int=96)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmp1qwx3md__test.go:47: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075639
- exit_code: 2
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    min := nums[0]\n\
    \    for _, v := range nums[1:] {\n        min = min(v, min)\n    }\n    return\
    \ min\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_4jqh3pl_test.go:20:12: v declared but not used

    /tmp/tmp_4jqh3pl_test.go:21:15: invalid operation: cannot call non-function min
    (variable of type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075373
- exit_code: 2
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    max := 0\n    minimum := 0\n    for i, x := range nums {\n      \
    \  minimum += x\n        if minimum > max {\n            max = minimum\n     \
    \   }\n    }\n    return max\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n \
    \ candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7evlhrtf_test.go:18:9: i declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075638
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    // write your code here\n    result := nums[0]\n    for _, num :=\
    \ range nums[1:] {\n        result -= num\n    }\n    return result\n}\n</code>\n\
    Test\n<code>\npackage minSubArraySum_test\n\nimport (\n    \"testing\"\n)\n\n\
    func TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n\
    \     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp40qq1rlb_test.go:23:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075638
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    var minSum int\n    for _, i := range nums {\n        minSum = i\
    \ + minSum\n    }\n    return minSum\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=dynamic-programming,algorithm,sorting,arrays\
    \ |>\nThis problem is similar to knapsack problem, where you try to make some\
    \ items of your array as big as possible, here the only difference is you try\
    \ all items instead of only a fraction.\nLet's take a look at this problem. \n\
    Lets say you have a knapsack of size n, which you can only fit into 3 items. We\
    \ have 2 items of value 1, and 3 items of value 2. \nIn our example: \n<code>\n\
    1 2 3 \n</code>\nSo you have 2 items of value 1, and 2 items of value 2. So you\
    \ can fit 4 items in your knapsack.\nWe now have a list of n positive integers\
    \ and we want to find the total minimum value of our knapsack that can fit into\
    \ these items. \nIn our example, we can make the first 3 items as big as possible,\
    \ so we have this:\n<code>\n1 1 1\n</code>\nNow we can fit 4 items in our knapsack,\
    \ so we can make 2 of them bigger:\n<code>\n1 2 3\n</code>\nWe can fit 4 more\
    \ and we have:\n<code>\n1 3 6 \n</code>\nWe can fit 3 items in our knapsack, so\
    \ we can make 3 of them bigger:\n<code>\n1 2 4\n</code>\nWe fit 2 more and we\
    \ have:\n<code>\n1 4 9\n</code>\nWe can fit 2 more and we have:\n<code>\n1 5 12\n\
    </code>\nWe can fit 2 more and we have:\n<code>\n1 6 18\n</code>\nWe can fit 2\
    \ more and we have:\n<code>\n1 7 24\n</code>\nWe can fit 2 more and we have:\n\
    <code>\n1 8 30\n</code>\nWe can fit 2 more and we have:\n<code>\n1 9 36\n</code>\n\
    We can fit 1 item and we have:\n<code>\n2 10 42\n</code>\nWe can fit 1 item and\
    \ we have:\n<code>\n2 11 48\n</code>\nWe can fit 1 item and we have:\n<code>\n\
    2 12 54\n</code>\nWe can fit 1 item and we have:\n<code>\n2 13 60\n</code>\nWe\
    \ can fit 1 item and we have:\n<code>\n2 14 66\n</code>\nWe can fit 1 item and\
    \ we have:\n<code>\n2 15 72\n</code>\nWe can fit 1 item and we have:\n<code>\n\
    2 16 78\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpe5j0ld75_test.go:22:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075638
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    var min int\n    for _, v := range nums {\n        min = min > v+min\
    \ ? v+min : min\n    }\n    return min\n}\n</code>\n<|/ a tags=algorithm,go |>\n\
    <| a tags=algorithm,go |>\nHere is a Python solution that uses a variation of\
    \ your algorithm:\n<code>\ndef minSubArraySum(nums):\n    sum, i, n = sum(nums),\
    \ -1, 0\n    while sum != 0 and i < len(nums):\n        sum += nums[i]\n     \
    \   if sum > n:\n            n, i = sum, i+1\n        sum -= nums[i]\n    return\
    \ n\n</code>\n<|/ a dscore=0 |>\n<| a tags=algorithm,go |>\nWe can simply use\
    \ a map and sort the array in O(nlogn) time\n<code>\npackage main\n\nimport (\n\
    \    \"fmt\"\n    \"sort\"\n)\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpldxtl67v_test.go:18:27: illegal character U+003F ''?''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075638
- exit_code: 2
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    // Sort the list to ensure the left and right parts have the same\
    \ size\n    // and thus we can determine if there is still room in the right part\n\
    \    // of the array to add the current number.\n    sort.Ints(nums)\n\n    sumMin\
    \ := nums[0]\n    sumMax := nums[0]\n    leftIndex := 0\n    rightIndex := len(nums)\
    \ - 1\n\n    for leftIndex < rightIndex {\n        // Add the current number to\
    \ the sum min and max if the current sum max is greater than the\n        // current\
    \ sum min. If this is the first time we see a number in the right part of the\
    \ array,\n        // we need to set it to 0 and start over.\n        sumMax +=\
    \ nums[rightIndex]\n\n        // If the current number does not meet the requirement\
    \ to add the current sum to sum min\n        // and the sum max is less than the\
    \ current sum min, the current sum min needs to be\n        // updated and we\
    \ need to move the left pointer.\n        if sumMax-sumMin > 0 {\n           \
    \ sumMin += nums[leftIndex]\n        }\n\n        // If the current number does\
    \ not meet the requirement to add the current sum to sum min\n        // and the\
    \ sum max is greater than the current sum min, the current sum min needs to be\n\
    \        // updated and we need to move the right pointer.\n        if sumMax-sumMin\
    \ < 0 {\n            sumMax -= nums[rightIndex]\n        }\n\n        // The current\
    \ sum min has exceeded the current sum max. We are done.\n        if sumMax >\
    \ sumMin {\n            break\n        }\n\n        // If we are here, we can\
    \ conclude that the current sum min has not exceeded the current sum max.\n  \
    \      // We need to move the left and right pointers together.\n        if leftIndex\
    \ == rightIndex {\n            if sumMax < sumMin {\n                rightIndex--\n\
    \            } else {\n                leftIndex++\n            }\n        }\n\
    \    }\n\n    return sumMin\n}\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpusjc9ukn_test.go:19:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075639
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    var cur int = 0\n    var min int = 1e9\n    for _, num := range nums\
    \ {\n        cur += num\n        if cur < min {\n            min = cur\n     \
    \   }\n    }\n    return min\n}\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpjy09gzx5_test.go:50: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpjy09gzx5_test.go:50:\
    \ expected '%!s(int=-6)', got '%!s(int=94)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpjy09gzx5_test.go:50: expected '%!s(int=3)', got '%!s(int=10)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpjy09gzx5_test.go:50:\
    \ expected '%!s(int=-33)', got '%!s(int=67)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpjy09gzx5_test.go:50: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075639
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    var n int = 0\n    for _, v := range nums {\n        if v > n {\n\
    \            n = v\n        }\n    }\n\n    if n%2 == 0 {\n        return n\n\
    \    }\n\n    leftSum, rightSum := 0, 0\n    for _, v := range nums {\n      \
    \  if v > n {\n            leftSum += v\n        } else {\n            rightSum\
    \ += v\n        }\n    }\n    return leftSum + rightSum\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpnvfx05e0_test.go:62: expected '%!s(int=1)', got '%!s(int=4)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpnvfx05e0_test.go:62:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpnvfx05e0_test.go:62: expected '%!s(int=-14)', got '%!s(int=2)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__3 (0.00s)\n        tmpnvfx05e0_test.go:62:\
    \ expected '%!s(int=-9999999999999999)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__4\
    \ (0.00s)\n        tmpnvfx05e0_test.go:62: expected '%!s(int=0)', got '%!s(int=1000000)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__5 (0.00s)\n        tmpnvfx05e0_test.go:62:\
    \ expected '%!s(int=-6)', got '%!s(int=10)'\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmpnvfx05e0_test.go:62: expected '%!s(int=-6)', got '%!s(int=100)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__7 (0.00s)\n        tmpnvfx05e0_test.go:62:\
    \ expected '%!s(int=3)', got '%!s(int=49)'\n    --- FAIL: TestMinsubarraysum/test_num__8\
    \ (0.00s)\n        tmpnvfx05e0_test.go:62: expected '%!s(int=-33)', got '%!s(int=100)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__9 (0.00s)\n        tmpnvfx05e0_test.go:62:\
    \ expected '%!s(int=-10)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpnvfx05e0_test.go:62: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075639
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n\n    // Sort nums\
    \ in O(n*log(n)) time\n    nums = nums[:len(nums)/2]\n    nums = append(nums,\
    \ nums[len(nums)/2:]...)\n    nums = append(nums, nums[:len(nums)/2]...)\n\n \
    \   // find min_sum\n    start := 0\n    sum := 0\n    for i := 0; i < len(nums);\
    \ i++ {\n        sum = sum + nums[i]\n        if sum < nums[start] {\n       \
    \     start = i\n            sum = nums[i]\n        }\n    }\n\n    // min_sum\
    \ = start+nums[start]\n    // nums[start] = sum - nums[start]\n    return sum\
    \ - nums[start]\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate :=\
    \ minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\npanic: runtime error: index out of\
    \ range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range\
    \ [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.minSubArraySum({0xc0000afc50?, 0x0?, 0x0?})\n\
    \t/tmp/tmpz53gj_sg_test.go:38 +0x1bc\ncommand-line-arguments_test.TestMinsubarraysum(0x0?)\n\
    \t/tmp/tmpz53gj_sg_test.go:51 +0x1d4\ntesting.tRunner(0xc0000da340, 0x528f48)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075639
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    max := 0\n    for _, num := range nums {\n        if num > max {\n\
    \            max = num\n        }\n    }\n    for _, num := range nums {\n   \
    \     max -= num\n    }\n    return max\n}\n\nfunc TestMinsubarraysum(t *testing.T)\
    \ {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmp67dctvka_test.go:52: expected '%!s(int=1)', got '%!s(int=-12)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmp67dctvka_test.go:52:\
    \ expected '%!s(int=-6)', got '%!s(int=6)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmp67dctvka_test.go:52: expected '%!s(int=-14)', got '%!s(int=16)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__3 (0.00s)\n        tmp67dctvka_test.go:52:\
    \ expected '%!s(int=-9999999999999999)', got '%!s(int=9999999999999999)'\n   \
    \ --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmp67dctvka_test.go:52:\
    \ expected '%!s(int=0)', got '%!s(int=-30)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmp67dctvka_test.go:52: expected '%!s(int=-6)', got '%!s(int=11)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmp67dctvka_test.go:52:\
    \ expected '%!s(int=-6)', got '%!s(int=1)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmp67dctvka_test.go:52: expected '%!s(int=3)', got '%!s(int=-36)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmp67dctvka_test.go:52:\
    \ expected '%!s(int=-33)', got '%!s(int=4)'\n    --- FAIL: TestMinsubarraysum/test_num__9\
    \ (0.00s)\n        tmp67dctvka_test.go:52: expected '%!s(int=-10)', got '%!s(int=10)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__10 (0.00s)\n        tmp67dctvka_test.go:52:\
    \ expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmp67dctvka_test.go:52: expected '%!s(int=-1)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075639
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    // base case\n    if len(nums) <= 0 {\n        return 0\n    }\n\
    \    // recurse on sublists starting from last element\n    return 1 + minSubArraySum(nums[:len(nums)-1])\n\
    }\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpf3svph2p_test.go:48: expected '%!s(int=1)', got '%!s(int=6)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpf3svph2p_test.go:48:\
    \ expected '%!s(int=-6)', got '%!s(int=3)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpf3svph2p_test.go:48: expected '%!s(int=-14)', got '%!s(int=5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__3 (0.00s)\n        tmpf3svph2p_test.go:48:\
    \ expected '%!s(int=-9999999999999999)', got '%!s(int=1)'\n    --- FAIL: TestMinsubarraysum/test_num__4\
    \ (0.00s)\n        tmpf3svph2p_test.go:48: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__5 (0.00s)\n        tmpf3svph2p_test.go:48:\
    \ expected '%!s(int=-6)', got '%!s(int=5)'\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmpf3svph2p_test.go:48: expected '%!s(int=-6)', got '%!s(int=6)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__7 (0.00s)\n        tmpf3svph2p_test.go:48:\
    \ expected '%!s(int=3)', got '%!s(int=6)'\n    --- FAIL: TestMinsubarraysum/test_num__8\
    \ (0.00s)\n        tmpf3svph2p_test.go:48: expected '%!s(int=-33)', got '%!s(int=6)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__9 (0.00s)\n        tmpf3svph2p_test.go:48:\
    \ expected '%!s(int=-10)', got '%!s(int=1)'\n    --- FAIL: TestMinsubarraysum/test_num__10\
    \ (0.00s)\n        tmpf3svph2p_test.go:48: expected '%!s(int=7)', got '%!s(int=1)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__11 (0.00s)\n        tmpf3svph2p_test.go:48:\
    \ expected '%!s(int=-1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075639
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    // Your code here\n    result := 0\n    start := 0\n    end := len(nums)\
    \ - 1\n    for start < end {\n        result += nums[start]\n        if nums[start]\
    \ > result {\n            result = nums[start]\n        }\n        if nums[end]\
    \ < result {\n            result = nums[end]\n        }\n        start += 1\n\
    \        end -= 1\n    }\n    return result\n}\nfunc TestMinsubarraysum(t *testing.T)\
    \ {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__1\
    \ (0.00s)\n        tmphvy4lmz4_test.go:57: expected '%!s(int=-6)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__2 (0.00s)\n        tmphvy4lmz4_test.go:57:\
    \ expected '%!s(int=-14)', got '%!s(int=-2)'\n    --- FAIL: TestMinsubarraysum/test_num__3\
    \ (0.00s)\n        tmphvy4lmz4_test.go:57: expected '%!s(int=-9999999999999999)',\
    \ got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n   \
    \     tmphvy4lmz4_test.go:57: expected '%!s(int=0)', got '%!s(int=10)'\n    ---\
    \ FAIL: TestMinsubarraysum/test_num__5 (0.00s)\n        tmphvy4lmz4_test.go:57:\
    \ expected '%!s(int=-6)', got '%!s(int=-2)'\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmphvy4lmz4_test.go:57: expected '%!s(int=-6)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__7 (0.00s)\n        tmphvy4lmz4_test.go:57:\
    \ expected '%!s(int=3)', got '%!s(int=8)'\n    --- FAIL: TestMinsubarraysum/test_num__8\
    \ (0.00s)\n        tmphvy4lmz4_test.go:57: expected '%!s(int=-33)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__9 (0.00s)\n        tmphvy4lmz4_test.go:57:\
    \ expected '%!s(int=-10)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__10\
    \ (0.00s)\n        tmphvy4lmz4_test.go:57: expected '%!s(int=7)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075639
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    min := nums[0]\n    sum := 0\n    i := 0\n    for j, val := range\
    \ nums {\n        if val < min {\n            min = val\n            sum = j\n\
    \        }\n        sum += j\n    }\n    return sum - i\n}\n</code>\nI used the\
    \ golang std library slice function.\n<|/ a |>\n<| a dscore=0 tags=algorithm,c++,java,python\
    \ |>\n<code>\npackage array;\n\nimport java.util.Scanner;\n\npublic class ArrayMinSum\
    \ {\n    public static void main(String[] args) {\n        int n, minSum;\n  \
    \      Scanner scanner = new Scanner(System.in);\n        System.out.println(\"\
    Enter the size of the array\");\n        n = scanner.nextInt();\n        int[]\
    \ array = new int[n];\n        System.out.println(\"Enter the elements in array\"\
    );\n        for(int i = 0; i < n; i++){\n            array[i] = scanner.nextInt();\n\
    \        }\n        System.out.println(\"The Minimum Sum is: \" + minSubArraySum(array));\n\
    \        scanner.close();\n    }\n\n    public static int minSubArraySum(int[]\
    \ array){\n        int minSum = array[0], subSum = 0;\n        for(int i = 0;\
    \ i < array.length; i++){\n            subSum += i;\n            if(subSum < minSum){\n\
    \                minSum = subSum;\n            }\n        }\n        return minSum;\n\
    \    }\n}\n</code>\n<|/ a |>\n<| c |>\nPlease explain your answer, how does it\
    \ solve the problem?\n<|/ c |>\n<| a tags=algorithm,c++,java,python dscore=0 |>\n\
    <code>\nimport java.util.*;\n\npublic class minSum {\n\npublic static void main(String[]\
    \ args) {\n    Scanner sc = new Scanner(System.in);\n    int n, sum = 0, sumArray[]\
    \ = {0}, i = 0; \n    System.out.println(\"Enter the number of elements in an\
    \ array: \");\n    n = sc.nextInt();\n\n    System.out.println(\"Enter \" + n\n\
    \            + \" elements in the array: \");\n    for (i = 0; i < n; i++) {\n\
    \        sumArray[i] = sc.nextInt();\n        sum += sumArray[i];\n    }\n   \
    \ sc.close();\n    System.out.println(\"Minimum Sum: \" + minSum(sumArray));\n\
    }\n\npublic static int minSum(int[] array) {\n    int sum = 0;\n    int minSum\
    \ = array[0];\n    for (int i = 0; i < array.length; i++) {\n        if (array[i]\
    \ < minSum) {\n            minSum = array[i];\n        }\n    }\n    return minSum;\n\
    }\n}\n</code>\n<|/ a |>\n<| a dscore=0 tags=algorithm,c++,java,python |>\n<code>\n\
    import java.util.*;\n\npublic class MinSum{\n\n   public \nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpa9ny_w6b_test.go:28:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075639
- exit_code: 2
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    min := math.MaxInt32\n    var min int\n\n    for _, n := range nums\
    \ {\n        current := n\n        var cur int\n\n        for _, curNum := range\
    \ nums {\n            if cur == current {\n                continue\n        \
    \    }\n            current = (n + curNum) % 256\n            cur++\n        }\n\
    \n        if cur > min {\n            min = cur\n        }\n    }\n    return\
    \ min\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpsbjfds66_test.go:16:12:\
    \ undefined: math\n/tmp/tmpsbjfds66_test.go:17:9: min redeclared in this block\n\
    \t/tmp/tmpsbjfds66_test.go:16:5: other declaration of min\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075640
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    // Write your code here\n    sums := make([]int, len(nums))\n   \
    \ for i := range nums {\n        sums[i] = nums[i]\n    }\n    max := 0\n    for\
    \ i := len(nums)-1; i >= 0; i-- {\n        for j := i-1; j >= 0 ; j-- {\n    \
    \        max += sums[i]-sums[j]\n            sums[j] = sums[i]\n            sums[i]\
    \ = max\n        }\n    }\n    return sums[0]\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpj4sot4hu_test.go:56: expected '%!s(int=1)', got '%!s(int=4)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpj4sot4hu_test.go:56:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpj4sot4hu_test.go:56: expected '%!s(int=-14)', got '%!s(int=-10)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmpj4sot4hu_test.go:56:\
    \ expected '%!s(int=0)', got '%!s(int=1000000)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpj4sot4hu_test.go:56: expected '%!s(int=-6)', got '%!s(int=-5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpj4sot4hu_test.go:56:\
    \ expected '%!s(int=-6)', got '%!s(int=-5)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpj4sot4hu_test.go:56: expected '%!s(int=3)', got '%!s(int=4)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpj4sot4hu_test.go:56:\
    \ expected '%!s(int=-33)', got '%!s(int=-2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075640
- exit_code: 2
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if nums == nil || len(nums) == 0 {\n        return nums\n    }\n\
    \    max := nums[0]\n    min := nums[0]\n    for _, n := range nums {\n      \
    \  if n > max {\n            max = n\n        }\n        if n < min {\n      \
    \      min = n\n        }\n    }\n    if max <= min {\n        return max\n  \
    \  }\n    totalMin := 0\n    for _, n := range nums {\n        totalMin = totalMin\
    \ + n\n    }\n    return totalMin\n}\n\nfunc TestMinsubarraysum(t *testing.T)\
    \ {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4hh9wmai_test.go:17:16: cannot use nums (variable of type []int) as type
    int in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075640
- exit_code: 2
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    var result int\n    for _, val := range nums {\n        result =\
    \ math.Min(result, val+minSubArraySum(nums)+result)\n    }\n    return result\n\
    }\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw046enhy_test.go:18:18: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075640
- exit_code: 2
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    // Initialize minSum.\n    var minSum int\n\n    // Find the minimum\
    \ subarray sum from left to right. Traverse the list once.\n    // Start from\
    \ the leftmost index.\n    for i := 0; i < len(nums); i++ {\n        minSum =\
    \ findMinSum(nums, i, i+1, minSum)\n    }\n\n    return minSum\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4eyput6m_test.go:22:18: undefined: findMinSum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075640
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    n := len(nums)\n    min := -math.MaxInt32\n    sum := 0\n    for\
    \ i := 0; i < n; i++ {\n        sum += nums[i]\n        if sum < min {\n     \
    \       min = sum\n        }\n    }\n    return min\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nPlease explain your answer too.\n<|/ c |>\n<| c |>\nWhat would\
    \ be the complexity of this solution?\n<|/ c |>\n<| c |>\nO(n) where n is the\
    \ length of the array. Also the complexity of any approach is O(n) which we calculate\
    \ in every step by iterating over all the numbers inside the array.\n<|/ c |>\n\
    <| a dscore=0 tags=arrays,algorithm,data-\nfunc TestMinsubarraysum(t *testing.T)\
    \ {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpihxgwp9v_test.go:27:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075639
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    var min = nums[0]\n    for _, v := range nums {\n        for i :=\
    \ 0; i < len(nums); i++ {\n            if nums[i] > v {\n                nums[i]\
    \ = nums[i] - v\n                break\n            }\n        }\n        min\
    \ = min(v, min)\n    }\n    return min\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ tags=data-\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpubueponm_test.go:28:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075639
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) < 2 {\n        return nums[0]\n    }\n    var minSum,\
    \ lastSum, minIndex := nums[0], nums[0], 0\n    for _, v := range nums {\n   \
    \     lastSum = lastSum-v\n        if lastSum > minSum {\n            minSum =\
    \ lastSum\n            minIndex = index\n        }\n        index++\n    }\n \
    \   return minSum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate :=\
    \ minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgx43uoai_test.go:19:35: expected '';'', found '':=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075640
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    var sumSubArray int\n    for _, num := range nums {\n        sumSubArray\
    \ = sumSubArray + num\n    }\n    return sumSubArray\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpynidqwt4_test.go:47: expected '%!s(int=1)', got '%!s(int=16)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmpynidqwt4_test.go:47:\
    \ expected '%!s(int=0)', got '%!s(int=1000030)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpynidqwt4_test.go:47: expected '%!s(int=-6)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpynidqwt4_test.go:47:\
    \ expected '%!s(int=-6)', got '%!s(int=99)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpynidqwt4_test.go:47: expected '%!s(int=3)', got '%!s(int=49)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpynidqwt4_test.go:47:\
    \ expected '%!s(int=-33)', got '%!s(int=96)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpynidqwt4_test.go:47: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075641
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    n := len(nums)\n    if (n == 0) || (n == 1) {\n        return nums[0]\n\
    \    }\n\n    // Find the length of sub array\n    i := 0\n    for ; i < n; i++\
    \ {\n        if nums[i] < 0 {\n            break\n        }\n    }\n    j := i\
    \ + 1\n    for ; j < n; j++ {\n        if nums[j] >= nums[i] {\n            break\n\
    \        }\n    }\n\n    // Calculate the sum of sub array\n    s := 0\n    for\
    \ ; j < n; j++ {\n        s += nums[j]\n    }\n\n    // Find the minimum sub-array\n\
    \    if s <= 0 {\n        return 0\n    }\n    for ; i < n; i++ {\n        if\
    \ s <= nums[i] {\n            return s\n        }\n        if s >= nums[i] {\n\
    \            s = s - nums[i]\n        }\n    }\n    return 0\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpuhe2tkbn_test.go:80: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpuhe2tkbn_test.go:80:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpuhe2tkbn_test.go:80: expected '%!s(int=-14)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__5 (0.00s)\n        tmpuhe2tkbn_test.go:80:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmpuhe2tkbn_test.go:80: expected '%!s(int=-6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__7 (0.00s)\n        tmpuhe2tkbn_test.go:80:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__8\
    \ (0.00s)\n        tmpuhe2tkbn_test.go:80: expected '%!s(int=-33)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__11 (0.00s)\n        tmpuhe2tkbn_test.go:80:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075641
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if nums == nil || len(nums) == 0 {\n        return 0\n    }\n   \
    \ n := len(nums)\n    currentMin := nums[0]\n    for i := 1; i < n; i++ {\n  \
    \      if nums[i] < currentMin {\n            currentMin = nums[i]\n        }\n\
    \    }\n    return currentMin\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n\
    \  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__1\
    \ (0.00s)\n        tmpj0g5vvg4_test.go:53: expected '%!s(int=-6)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__2 (0.00s)\n        tmpj0g5vvg4_test.go:53:\
    \ expected '%!s(int=-14)', got '%!s(int=-10)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpj0g5vvg4_test.go:53: expected '%!s(int=-6)', got '%!s(int=-5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpj0g5vvg4_test.go:53:\
    \ expected '%!s(int=-6)', got '%!s(int=-5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075641
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    result := nums[0]\n\
    \    for _, value := range nums[1:] {\n        result += value\n    }\n    return\
    \ result\n}\n</code>\n<|/ a tags=arrays,go,list |>\n<| a tags=arrays,go,list |>\n\
    Here is the solution using binary search for the last element of the array, if\
    \ all the elements are greater, the element will be the last element. \n<code>\n\
    package main\n\nimport (\n    \"fmt\"\n)\n\nfunc TestMinsubarraysum(t *testing.T)\
    \ {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpe8x80jgb_test.go:25:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075640
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    // TODO: implement this function\n    return 0\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmp76cauuy2_test.go:44: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmp76cauuy2_test.go:44:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmp76cauuy2_test.go:44: expected '%!s(int=-14)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__3 (0.00s)\n        tmp76cauuy2_test.go:44:\
    \ expected '%!s(int=-9999999999999999)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmp76cauuy2_test.go:44: expected '%!s(int=-6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmp76cauuy2_test.go:44:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmp76cauuy2_test.go:44: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmp76cauuy2_test.go:44:\
    \ expected '%!s(int=-33)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__9\
    \ (0.00s)\n        tmp76cauuy2_test.go:44: expected '%!s(int=-10)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__10 (0.00s)\n        tmp76cauuy2_test.go:44:\
    \ expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmp76cauuy2_test.go:44: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075641
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) < 1 {\n        return 0\n    }\n    sum := nums[0]\n\
    \    for _, v := range nums[1:] {\n        if v < 0 {\n            sum += -v\n\
    \        } else {\n            sum += v\n        }\n    }\n    return sum\n}\n\
    \nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n\
    \     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpnmfq_whm_test.go:54: expected '%!s(int=1)', got '%!s(int=16)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpnmfq_whm_test.go:54:\
    \ expected '%!s(int=-6)', got '%!s(int=4)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpnmfq_whm_test.go:54: expected '%!s(int=-14)', got '%!s(int=16)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmpnmfq_whm_test.go:54:\
    \ expected '%!s(int=0)', got '%!s(int=1000030)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpnmfq_whm_test.go:54: expected '%!s(int=-6)', got '%!s(int=19)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpnmfq_whm_test.go:54:\
    \ expected '%!s(int=-6)', got '%!s(int=121)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpnmfq_whm_test.go:54: expected '%!s(int=3)', got '%!s(int=49)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpnmfq_whm_test.go:54:\
    \ expected '%!s(int=-33)', got '%!s(int=168)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpnmfq_whm_test.go:54: expected '%!s(int=-1)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075641
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    if len(nums) ==\
    \ 1 {\n        return nums[0]\n    }\n    m := len(nums) // 2\n    left := minSubArraySum(nums[:m])\n\
    \    right := minSubArraySum(nums[m+1:])\n    if left > right {\n        return\
    \ left\n    }\n    return right\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n\
    \  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0200e0390\
    \ stack=[0xc0200e0000, 0xc0400e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x520348?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.minSubArraySum({0xc0400dfcf0?,\
    \ 0x6, 0x6?})\n\t/tmp/tmp9m1whrw__test.go:15 +0x6c fp=0xc0200e03a0 sp=0xc0200e0398\
    \ pc=0x4ef6cc\ncommand-line-arguments_test.minSubArraySum({0xc0400dfcf0?, 0x6,\
    \ 0x0?})\n\t/tmp/tmp9m1whrw__test.go:23 +0x49 fp=0xc0200e03c8 sp=0xc0200e03a0\
    \ pc=0x4ef6a9\ncommand-line-arguments_test.minSubArraySum({0xc0400dfcf0?, 0x6,\
    \ 0x0?})\n\t/tmp/tmp9m1whrw__test.go:23 +0x49 fp=0xc0200e03f0 sp=0xc0200e03c8\
    \ pc=0x4ef6a9\ncommand-line-arguments_test.minSubArraySum({0xc0400dfcf0?, 0x6,\
    \ 0x0?})\n\t/tmp/tmp9m1whrw__test.go:23 +0x49 fp=0xc0200e0418 sp=0xc0200e03f0\
    \ pc=0x4ef6a9\ncommand-line-arguments_test.minSubArraySum({0xc0400dfcf0?, 0x6,\
    \ 0x0?})\n\t/tmp/tmp9m1whrw__test.go:23 +0x49 fp=0xc0200e0440 sp=0xc0200e0418\
    \ pc=0x4ef6a9\ncommand-line-arguments_test.minSubArraySum({0xc0400dfcf0?, 0x6,\
    \ 0x0?})\n\t/tmp/tmp9m1whrw__test.go:23 +0x49 fp=0xc0200e0468 sp=0xc0200e0440\
    \ pc=0x4ef6a9\ncommand-line-arguments_test.minSubArraySum({0xc0400dfcf0?, 0x6,\
    \ 0x0?})\n\t/tmp/tmp9m1whrw__test.go:23 +0x49 fp=0xc0200e0490 sp=0xc0200e0468\
    \ pc=0x4ef6a9\ncommand-line-arguments_test.minSubArraySum({0xc0400dfcf0?, 0x6,\
    \ 0x0?})\n\t/tmp/tmp9m1whrw__test.go:23 +0x49 fp=0xc0200e04b8 sp=0xc0200e0490\
    \ pc=0x4ef6a9\ncommand-line-arguments_test.minSubArraySum({0xc0400dfcf0?, 0x6,\
    \ 0x0?})\n\t/tmp/tmp9m1whrw__test.go:23 +0x49 fp=0xc0200e04e0 sp=0xc0200e04b8\
    \ pc=0x4ef6a9\ncommand-line-arguments_test.minSubArraySum({0xc0400dfcf0?, 0x6,\
    \ 0x0?})\n\t/tmp/tmp9m1whrw__test.go:23 +0x49 fp=0xc0200e0508 sp=0xc0200e04e0\
    \ pc=0x4ef6a9\ncommand-line-arguments_test.minSubArraySum({0xc0400dfcf0?, 0x6,\
    \ 0x0?})\n\t/tmp"
  timestamp: 1660075642
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if nums == nil || len(nums) == 0 {\n        return 0\n    }\n\n \
    \   start := 0\n    end := len(nums) - 1\n    minimum := nums[0]\n\n    for start\
    \ < end {\n        for i := start; i < end; i++ {\n            switch {\n    \
    \        case nums[i] > minimum:\n                minimum = nums[i]\n        \
    \    case nums[i] < minimum:\n                for k := start; k <= i; k++ {\n\
    \                    minimum -= nums[k]\n                }\n                break\n\
    \            }\n        }\n        start += 1\n        end -= 1\n    }\n    return\
    \ minimum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpvvf3czd6_test.go:66: expected '%!s(int=1)', got '%!s(int=4)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpvvf3czd6_test.go:66:\
    \ expected '%!s(int=-6)', got '%!s(int=2)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpvvf3czd6_test.go:66: expected '%!s(int=-14)', got '%!s(int=19)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmpvvf3czd6_test.go:66:\
    \ expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpvvf3czd6_test.go:66: expected '%!s(int=-6)', got '%!s(int=17)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpvvf3czd6_test.go:66:\
    \ expected '%!s(int=-6)', got '%!s(int=22)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpvvf3czd6_test.go:66: expected '%!s(int=3)', got '%!s(int=13)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpvvf3czd6_test.go:66:\
    \ expected '%!s(int=-33)', got '%!s(int=4)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpvvf3czd6_test.go:66: expected '%!s(int=-1)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075641
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if nums == nil || len(nums) == 0 {\n        return 0\n    }\n   \
    \ result := nums[0]\n    for i := 0; i < len(nums); i++ {\n        if nums[i]\
    \ < result {\n            result = nums[i]\n        }\n    }\n    return result\n\
    }\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__1\
    \ (0.00s)\n        tmp1i6st65d_test.go:52: expected '%!s(int=-6)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__2 (0.00s)\n        tmp1i6st65d_test.go:52:\
    \ expected '%!s(int=-14)', got '%!s(int=-10)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmp1i6st65d_test.go:52: expected '%!s(int=-6)', got '%!s(int=-5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmp1i6st65d_test.go:52:\
    \ expected '%!s(int=-6)', got '%!s(int=-5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075641
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) < 2 {\n        return nums[0]\n    }\n\n    min := nums[0]\n\
    \    for _, v := range nums[1:] {\n        if v < min {\n            min = v\n\
    \        }\n    }\n    return min\n}\n</code>\n<|/ a tags=arrays,sorting,algorithm,sum\
    \ |>\n<| c |>\nThis is not correct. Read the example given by OP in their question.\
    \ The first two numbers being `2` and `3` would give an answer of `5`, which is\
    \ not the minimum sub-array sum.\n<|/ c |>\n<| c |>\nYou are right, but I think\
    \ the solution is correct and OP is asking for the correct way to solve this problem.\n\
    <|/ c |>\n<| c |>\nThis algorithm is not O(n), but O(n^2) due to the `for _, v\
    \ := range nums[1:] {` which is O(n).\n<|/ c |>\n<| c |>\nO(n) solution can be\
    \ found on other StackOverflow thread https://stackoverflow.com/questions/3457455/find-minimum-number-in-a-sequence-of-non-negative-numbers\n\
    <|/ c |>\n<| a tags=arrays,sorting,algorithm,sum dscore=2 |>\nIf you don't mind\
    \ using hash table and recursion, there is a O(n) solution.\n<code>\nminSubArraySum(nums)\n\
    \    if nums.length <= 2\n        return nums[0]\n    \n    sum = 0\n    for num\
    \ in nums\n        sum += num\n    \n    for num in nums\n        if sum - num\
    \ > 0\n            sum -= num\n    return sum\n</code>\n<|/ a |>\n<| c |>\nFor\
    \ an array of length 10 or more, your solution will take O(n^2) time.\n<|/ c |>\n\
    <| c |>\nThe time complexity is `O(n)` since we have no recursion here.\n<|/ c\
    \ |>\n<| a |>\n<code>\n#include <bits/stdc++.h>\n#define lld long long\nusing\
    \ namespace std;\n#define pb push_back\n#define mp make_pair\n#define f first\n\
    #define s second\n#define all(x) begin(x) \n#define end(x) end(x)\n#define nd\
    \ make_pair\n#define pb push_back\n#define pf push_front\n#define mp make_pair\n\
    #define f first\n#define s second\n#define all(x) begin(x) \n#define end(x) end(x)\n\
    #define nd make_pair\n#define pb push_back\n#define pf push_front\n#define mp\
    \ make_pair\n#define f first\n#define s second\n#define all(x) begin(x) \n#define\
    \ end(x) end(x)\n#define \nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp238wgujp_test.go:28:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075641
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    // Find min and max values of array (ignore -ve values)\n    min\
    \ := nums[0]\n    max := nums[0]\n    for _, v := range nums {\n        if v <\
    \ min {\n            min = v\n        }\n        if v > max {\n            max\
    \ = v\n        }\n    }\n\n    // Initialize sum of current sub-list and min\n\
    \    var sum int\n    var minSum int\n    minSum = max\n    sum = 0\n\n    //\
    \ Run through array, adding sum as we go\n    for _, v := range nums {\n     \
    \   sum += v\n        // Adjust sum for next sub-list to determine min\n     \
    \   if sum < minSum {\n            minSum = sum\n        }\n    }\n\n    // Return\
    \ min sum\n    return minSum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n \
    \ candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmp50ntlghk_test.go:71: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmp50ntlghk_test.go:71:\
    \ expected '%!s(int=-6)', got '%!s(int=94)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmp50ntlghk_test.go:71: expected '%!s(int=3)', got '%!s(int=10)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmp50ntlghk_test.go:71:\
    \ expected '%!s(int=-33)', got '%!s(int=67)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmp50ntlghk_test.go:71: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075641
- exit_code: 2
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    if len(nums) ==\
    \ 1 {\n        return nums[0]\n    }\n    smallerNums := []int{}\n    largeNums\
    \ := []int{}\n\n    firstNum := nums[0]\n    for _, num := range nums {\n    \
    \    if num < firstNum {\n            smallerNums = append(smallerNums, num)\n\
    \        } else {\n            largeNums = append(largeNums, num)\n        }\n\
    \    }\n    smallerNums = append(smallerNums, firstNum)\n    largeNums = append(largeNums,\
    \ firstNum)\n\n    smallerNumsSubArraySum, _ := minSubArraySum(smallerNums)\n\
    \    largeNumsSubArraySum, _ := minSubArraySum(largeNums)\n\n    return smallerNumsSubArraySum\
    \ + largeNumsSubArraySum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpftbidvjv_test.go:36:34: assignment mismatch: 2 variables but minSubArraySum
    returns 1 value

    /tmp/tmpftbidvjv_test.go:37:32: assignment mismatch: 2 variables but minSubArraySum
    returns 1 value

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075641
- exit_code: 2
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    return minSubArraySum_test(nums, 0, len(nums))\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn819rzuj_test.go:16:12: undefined: minSubArraySum_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075641
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    i := len(nums)\
    \ - 1\n    sum := nums[i]\n    for j := i - 1; j >= 0; j-- {\n        if nums[j]\
    \ <= sum {\n            sum = nums[j] + sum\n        } else {\n            sum\
    \ = sum - nums[j] + nums[i]\n        }\n        i = j\n    }\n    return sum\n\
    }\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmp4be5neli_test.go:56: expected '%!s(int=1)', got '%!s(int=16)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmp4be5neli_test.go:56:\
    \ expected '%!s(int=-6)', got '%!s(int=-5)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmp4be5neli_test.go:56: expected '%!s(int=-14)', got '%!s(int=-19)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmp4be5neli_test.go:56:\
    \ expected '%!s(int=0)', got '%!s(int=1000030)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmp4be5neli_test.go:56: expected '%!s(int=-6)', got '%!s(int=-9)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmp4be5neli_test.go:56:\
    \ expected '%!s(int=-6)', got '%!s(int=-110)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmp4be5neli_test.go:56: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmp4be5neli_test.go:56:\
    \ expected '%!s(int=-33)', got '%!s(int=-104)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmp4be5neli_test.go:56: expected '%!s(int=-1)', got '%!s(int=-3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075641
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    return 0\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpck589dqy_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpck589dqy_test.go:43:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpck589dqy_test.go:43: expected '%!s(int=-14)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__3 (0.00s)\n        tmpck589dqy_test.go:43:\
    \ expected '%!s(int=-9999999999999999)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpck589dqy_test.go:43: expected '%!s(int=-6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpck589dqy_test.go:43:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpck589dqy_test.go:43: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpck589dqy_test.go:43:\
    \ expected '%!s(int=-33)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__9\
    \ (0.00s)\n        tmpck589dqy_test.go:43: expected '%!s(int=-10)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__10 (0.00s)\n        tmpck589dqy_test.go:43:\
    \ expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpck589dqy_test.go:43: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075632
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    // The idea is to keep a sum of previous sub-arrays so far.\n   \
    \ sum := 0\n    for _, v := range nums {\n        sum += v\n    }\n\n    for i\
    \ := 0; i < len(nums); i++ {\n        for j := i + 1; j < len(nums); j++ {\n \
    \           sum += nums[i] - nums[j]\n        }\n    }\n    return sum\n}\n\n\
    func TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n\
    \     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmplprsnn0a_test.go:54: expected '%!s(int=1)', got '%!s(int=12)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmplprsnn0a_test.go:54:\
    \ expected '%!s(int=-6)', got '%!s(int=-2)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmplprsnn0a_test.go:54: expected '%!s(int=-14)', got '%!s(int=14)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmplprsnn0a_test.go:54:\
    \ expected '%!s(int=0)', got '%!s(int=-1999980)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmplprsnn0a_test.go:54: expected '%!s(int=-6)', got '%!s(int=-9)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmplprsnn0a_test.go:54:\
    \ expected '%!s(int=-6)', got '%!s(int=592)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmplprsnn0a_test.go:54: expected '%!s(int=3)', got '%!s(int=108)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmplprsnn0a_test.go:54:\
    \ expected '%!s(int=-33)', got '%!s(int=540)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmplprsnn0a_test.go:54: expected '%!s(int=-1)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075641
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    minimum := nums[0]\n\
    \    sum := nums[0]\n    for _, num := range nums[1:] {\n        sum += num\n\
    \        if sum < minimum {\n            minimum = sum\n        }\n    }\n   \
    \ return minimum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate :=\
    \ minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpeb30jlqq_test.go:54: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpeb30jlqq_test.go:54:\
    \ expected '%!s(int=-6)', got '%!s(int=94)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpeb30jlqq_test.go:54: expected '%!s(int=3)', got '%!s(int=10)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpeb30jlqq_test.go:54:\
    \ expected '%!s(int=-33)', got '%!s(int=67)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpeb30jlqq_test.go:54: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n"
  timestamp: 1660075641
- exit_code: 2
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    var result int\n    result := nums[0]\n    for _, nn := range nums\
    \ {\n        result += nn\n        if result < nums[0] {\n            result =\
    \ nums[0]\n        }\n    }\n    return result\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpslwn6api_test.go:17:12: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075641
- exit_code: 2
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    var result int\n    n := len(nums)\n    result := nums[0]\n    for\
    \ i := 1; i < n; i++ {\n        result := nums[i] - result\n        if result\
    \ < 0 {\n            result -= n\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n\
    \     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoothzc33_test.go:18:12: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075641
- exit_code: 2
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    return minSubArraySumHelper(nums, 0, len(nums)-1, 0)\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnk21r93w_test.go:16:12: undefined: minSubArraySumHelper

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075641
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    minimum := nums[0]\n\
    \    minimum += minSubArraySum(nums[1:])\n    return minimum\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpshntgyns_test.go:48: expected '%!s(int=1)', got '%!s(int=16)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmpshntgyns_test.go:48:\
    \ expected '%!s(int=0)', got '%!s(int=1000030)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpshntgyns_test.go:48: expected '%!s(int=-6)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpshntgyns_test.go:48:\
    \ expected '%!s(int=-6)', got '%!s(int=99)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpshntgyns_test.go:48: expected '%!s(int=3)', got '%!s(int=49)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpshntgyns_test.go:48:\
    \ expected '%!s(int=-33)', got '%!s(int=96)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpshntgyns_test.go:48: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075642
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    var sum int = 0\n    var prev int = 0\n    for _, v := range nums\
    \ {\n        sum += v\n        if sum < prev {\n            sum += prev\n    \
    \    }\n        prev = sum\n    }\n    return sum\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpsekhfo_n_test.go:52: expected '%!s(int=1)', got '%!s(int=16)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpsekhfo_n_test.go:52:\
    \ expected '%!s(int=-6)', got '%!s(int=-11)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpsekhfo_n_test.go:52: expected '%!s(int=-14)', got '%!s(int=-28)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmpsekhfo_n_test.go:52:\
    \ expected '%!s(int=0)', got '%!s(int=1000030)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpsekhfo_n_test.go:52: expected '%!s(int=-6)', got '%!s(int=-7)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpsekhfo_n_test.go:52:\
    \ expected '%!s(int=-6)', got '%!s(int=1593)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpsekhfo_n_test.go:52: expected '%!s(int=3)', got '%!s(int=49)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpsekhfo_n_test.go:52:\
    \ expected '%!s(int=-33)', got '%!s(int=792)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpsekhfo_n_test.go:52: expected '%!s(int=-1)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075642
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    var minSum = nums[0]\n    for _, v := range nums {\n        minSum\
    \ = minSum - v\n        if minSum < 0 {\n            return minSum\n        }\n\
    \    }\n    return 0\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpxvcfaam5_test.go:50: expected '%!s(int=1)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpxvcfaam5_test.go:50:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpxvcfaam5_test.go:50: expected '%!s(int=-14)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__3 (0.00s)\n        tmpxvcfaam5_test.go:50:\
    \ expected '%!s(int=-9999999999999999)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__4\
    \ (0.00s)\n        tmpxvcfaam5_test.go:50: expected '%!s(int=0)', got '%!s(int=-10)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__5 (0.00s)\n        tmpxvcfaam5_test.go:50:\
    \ expected '%!s(int=-6)', got '%!s(int=-5)'\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmpxvcfaam5_test.go:50: expected '%!s(int=-6)', got '%!s(int=-4)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__7 (0.00s)\n        tmpxvcfaam5_test.go:50:\
    \ expected '%!s(int=3)', got '%!s(int=-11)'\n    --- FAIL: TestMinsubarraysum/test_num__8\
    \ (0.00s)\n        tmpxvcfaam5_test.go:50: expected '%!s(int=-33)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__9 (0.00s)\n        tmpxvcfaam5_test.go:50:\
    \ expected '%!s(int=-10)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__10\
    \ (0.00s)\n        tmpxvcfaam5_test.go:50: expected '%!s(int=7)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__11 (0.00s)\n        tmpxvcfaam5_test.go:50:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075642
- exit_code: 2
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    max := nums[0]\n    minSubArraySum := nums[0]\n\n    for _, i :=\
    \ range nums {\n        if i == 0 {\n            continue\n        }\n       \
    \ max = max(i, nums[i-1])\n        minSubArraySum = minSubArraySum + max\n   \
    \ }\n\n    return minSubArraySum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n\
    \  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5n9ttmjq_test.go:23:15: invalid operation: cannot call non-function max
    (variable of type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075641
- exit_code: 2
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    return minSubArraySum_test(nums, 0, len(nums)-1, 0)\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9n5u67bf_test.go:16:12: undefined: minSubArraySum_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075642
