language: go_test.go
name: HumanEval_31_is_prime
results:
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    start\
    \ := 2\n    divisor := 3\n    for start <= n {\n        if n%start == 0 {\n  \
    \          divisor++\n            if divisor==3 {\n                return true\n\
    \            }\n        }\n        start++\n    }\n    return false\n}\n\nfunc\
    \ TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__1\
    \ (0.00s)\n        tmpirq0hbxj_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__2 (0.00s)\n        tmpirq0hbxj_test.go:63:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__3\
    \ (0.00s)\n        tmpirq0hbxj_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__4 (0.00s)\n        tmpirq0hbxj_test.go:63:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__7\
    \ (0.00s)\n        tmpirq0hbxj_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__8 (0.00s)\n        tmpirq0hbxj_test.go:63:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__9\
    \ (0.00s)\n        tmpirq0hbxj_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660073491
- exit_code: 2
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n%2\
    \ == 0 {\n        return false\n    }\n    if n < 1 {\n        return true\n \
    \   }\n    // We only need to check odd numbers up to sqrt(n).\n    for i := 3;\
    \ i <= int(math.Sqrt(n)); i += 2 {\n        if n%i == 0 {\n            return\
    \ false\n        }\n    }\n    return true\n}\nfunc TestIs_Prime(t *testing.T)\
    \ {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqb_7nohg_test.go:31:26: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073491
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n%i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073491
- exit_code: null
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n    if n == 2 {\n        return true\n\
    \    }\n\n    var ok bool\n    for i := 3; i <= (n-1); i++ {\n        if n%i ==\
    \ 0 {\n            ok = false\n            break\n        }\n    }\n    if ok\
    \ {\n        return true\n    } else {\n        return is_prime(n - 1)\n    }\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073502
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    prime := true\n    for i := 2; i <=\
    \ n/2; i++ {\n        if n % i == 0 {\n            prime = false\n           \
    \ break\n        }\n    }\n    return prime\n}\n\nfunc TestIs_Prime(t *testing.T)\
    \ {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073491
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n\n    for i := 2; i <= n/2; i++ {\n   \
    \     if n%i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073491
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    // Check\
    \ to see if n is even.\n    if (n&(n-1) != 0) {\n        return false\n    }\n\
    \n    // We only need to check the odd numbers for primality.\n    for i := 2;\
    \ i <= n/2; i++ {\n        if (n%i == 0) {\n            return false\n       \
    \ }\n    }\n\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate\
    \ := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(6), expected: false },\n  \
    \   { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__1\
    \ (0.00s)\n        tmpszupuup3_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__2 (0.00s)\n        tmpszupuup3_test.go:64:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__3\
    \ (0.00s)\n        tmpszupuup3_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__4 (0.00s)\n        tmpszupuup3_test.go:64:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__6\
    \ (0.00s)\n        tmpszupuup3_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Prime/test_num__7 (0.00s)\n        tmpszupuup3_test.go:64:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__8\
    \ (0.00s)\n        tmpszupuup3_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__9 (0.00s)\n        tmpszupuup3_test.go:64:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073491
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 || n%2 == 0 {\n        return false\n    }\n    if n == 2 {\n        return\
    \ true\n    }\n    for i := 3; i < n; i++ {\n        if n%i == 0 {\n         \
    \   return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t\
    \ *testing.T) {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073491
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n%2\
    \ == 0 {\n        for i := 3; i < n; i++ {\n            if n%i == 0 {\n      \
    \          return false\n            }\n        }\n        return true\n    }\
    \ else {\n        for i := 3; i < n; i++ {\n            if n%i == 0 {\n      \
    \          return false\n            }\n        }\n        return false\n    }\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__1\
    \ (0.00s)\n        tmpklhycdqw_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__2 (0.00s)\n        tmpklhycdqw_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__3\
    \ (0.00s)\n        tmpklhycdqw_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__4 (0.00s)\n        tmpklhycdqw_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__5\
    \ (0.00s)\n        tmpklhycdqw_test.go:66: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Prime/test_num__7 (0.00s)\n        tmpklhycdqw_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__8\
    \ (0.00s)\n        tmpklhycdqw_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__9 (0.00s)\n        tmpklhycdqw_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073491
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n%2 == 0 {\n        return false\n    }\n\n    var primes [11]bool\n\
    \n    for i := 3; i <= (n/3); i++ {\n        if primes[i] {\n            continue\n\
    \        }\n\n        if n%3 == 0 {\n            return false\n        }\n\n \
    \       if i%2 == 0 {\n            primes[i/2] = true\n        }\n\n        for\
    \ j := i*i; j < n; j += i {\n            primes[j] = true\n        }\n    }\n\
    \    return true\n}\n</code>\n<|/ a |>\n<| a tags=go,sieve-of-eratosthenes |>\n\
    Here's a solution using the sieve of Eratosthenes in Go, which is described here:\n\
    <code>\npackage main\n\nimport (\n    \"fmt\"\n    \"math/big\"\n    \"crypto/rand\"\
    \n)\n\nconst N = 1000\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(101), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(13441), expected: true },\n     { actual:\
    \ candidate(61), expected: true },\n     { actual: candidate(4), expected: false\
    \ },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3vvr_7fn_test.go:55:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073490
- exit_code: 2
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 1 {\n        return true\n \
    \   }\n    if n % 2 == 0 {\n        return false\n    }\n    if n%3 == 0 {\n \
    \       return false\n    }\n\n    r := 6\n    for i := 3; i <= sqrt(n); i +=\
    \ 3 {\n        if n%i == 0 {\n            return false\n        }\n        if\
    \ n%(i+2) == 0 {\n            return false\n        }\n    }\n\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp03ipfgv2_test.go:37:5: r declared but not used

    /tmp/tmp03ipfgv2_test.go:38:22: undefined: sqrt

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073491
- exit_code: 2
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    return\
    \ n == 1 || is_prime_test(n-1, n)\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate\
    \ := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(6), expected: false },\n  \
    \   { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5sotgwi8_test.go:24:22: undefined: is_prime_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073491
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    for i\
    \ := 2; i <= n/2; i++ {\n        if n%i == 0 {\n            return false\n   \
    \     }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate\
    \ := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(6), expected: false },\n  \
    \   { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__6\
    \ (0.00s)\n        tmp5vgkqeui_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073491
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n    if n == 2 {\n        return true\n\
    \    }\n\n    for i := 2; i <= n/2; i++ {\n        if n % i == 0 {\n         \
    \   return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t\
    \ *testing.T) {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073491
- exit_code: null
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n\n    // Sieve of Eratosthenes.\n    //\
    \ https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes\n    sieve1 := make([]bool,\
    \ (n+1)/2)\n    sieve2 := make([]bool, (n+1)/2)\n\n    for i := 0; i < n; i++\
    \ {\n        if sieve1[i] {\n            continue\n        }\n\n        for j\
    \ := i*i; j < n; j += i {\n            sieve1[j] = true\n        }\n    }\n\n\
    \    for i := 0; i < n; i++ {\n        if sieve2[i] {\n            continue\n\
    \        }\n\n        for j := i+i+1; j < n; j += i {\n            sieve2[j] =\
    \ true\n        }\n    }\n\n    for i := 0; i < n; i++ {\n        if sieve1[i]\
    \ {\n            return false\n        }\n\n        if sieve2[i] {\n         \
    \   return true\n        }\n    }\n\n    return true\n}\n\nfunc TestIs_Prime(t\
    \ *testing.T) {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073502
- exit_code: 2
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 2 {\n        return true\n    }\n    if n%2 == 0 {\n        return false\n\
    \    }\n    if n < 2 {\n        return false\n    }\n    for i := 3; i <= sqrt(n);\
    \ i++ {\n        if n%i == 0 {\n            return false\n        }\n    }\n \
    \   return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(101), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(13441), expected: true },\n     { actual:\
    \ candidate(61), expected: true },\n     { actual: candidate(4), expected: false\
    \ },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp97sbtolu_test.go:33:22: undefined: sqrt

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073491
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n\n    if n == 2 {\n        return true\n\
    \    }\n\n    if n % 2 == 0 {\n        return false\n    }\n\n    i := 3\n\n \
    \   for i < n {\n        if n%i == 0 {\n            return false\n        }\n\n\
    \        i += 2\n    }\n\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T)\
    \ {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073491
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n\n    var max int\n\n    for i := 2; i\
    \ <= n/2; i++ {\n        if n%i == 0 {\n            max = i\n            break\n\
    \        }\n    }\n\n    if max == 0 {\n        return true\n    }\n\n    return\
    \ false\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(6), expected: false },\n     { actual:\
    \ candidate(101), expected: true },\n     { actual: candidate(11), expected: true\
    \ },\n     { actual: candidate(13441), expected: true },\n     { actual: candidate(61),\
    \ expected: true },\n     { actual: candidate(4), expected: false },\n     { actual:\
    \ candidate(1), expected: false },\n     { actual: candidate(5), expected: true\
    \ },\n     { actual: candidate(11), expected: true },\n     { actual: candidate(17),\
    \ expected: true },\n     { actual: candidate(85), expected: false },\n     {\
    \ actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073491
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 0 {\n        return false\n    }\n    if n == 1 {\n        return true\n\
    \    }\n    d := 2\n    m := 3\n    for i := 2; i <= n/d; i++ {\n        if n%d\
    \ == 0 {\n            m = m + 1\n        }\n        d = d + 2\n    }\n    if m\
    \ == n {\n        return true\n    }\n    return false\n}\n\nfunc TestIs_Prime(t\
    \ *testing.T) {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__1\
    \ (0.00s)\n        tmpou_1mljs_test.go:69: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__2 (0.00s)\n        tmpou_1mljs_test.go:69:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__3\
    \ (0.00s)\n        tmpou_1mljs_test.go:69: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__4 (0.00s)\n        tmpou_1mljs_test.go:69:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__5\
    \ (0.00s)\n        tmpou_1mljs_test.go:69: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Prime/test_num__6 (0.00s)\n        tmpou_1mljs_test.go:69:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Prime/test_num__7\
    \ (0.00s)\n        tmpou_1mljs_test.go:69: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__8 (0.00s)\n        tmpou_1mljs_test.go:69:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__9\
    \ (0.00s)\n        tmpou_1mljs_test.go:69: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073491
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    var i int\n    if n > 1 {\n        i\
    \ = 2\n        for {\n            if n %i == 0 {\n                break\n    \
    \        }\n            i += 1\n        }\n    }\n    return n == 1 || n == i\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073491
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    x :=\
    \ n\n    if x < 2 {\n        return false\n    }\n\n    if x == 2 {\n        return\
    \ true\n    }\n    if x % 2 == 0 {\n        return false\n    }\n    for i:= 3;\
    \ i <= x/2 ; i++ {\n        if x%i == 0 {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate :=\
    \ is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(6), expected: false },\n  \
    \   { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073491
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n    if n == 2 {\n        return true\n\
    \    }\n    if n <= 3 {\n        return false\n    }\n    if n % 2 == 0 || n <=\
    \ 5 {\n        return false\n    }\n    for i := 3; i <= n; i = i*2 {\n      \
    \  if n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__7\
    \ (0.00s)\n        tmplzocmzfp_test.go:69: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__10 (0.00s)\n        tmplzocmzfp_test.go:69:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Prime/test_num__11\
    \ (0.00s)\n        tmplzocmzfp_test.go:69: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Prime/test_num__12 (0.00s)\n        tmplzocmzfp_test.go:69:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073491
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n\n    var max_test int\n    if n > 100 {\n\
    \        max_test = n\n    } else {\n        max_test = 100\n    }\n\n    if n\
    \ > 1000 {\n        max_test = n\n    } else {\n        max_test = 1000\n    }\n\
    \n    if n > 2000 {\n        max_test = n\n    } else {\n        max_test = 2000\n\
    \    }\n\n    if n > 4000 {\n        max_test = n\n    } else {\n        max_test\
    \ = 4000\n    }\n\n    if n > 8000 {\n        max_test = n\n    } else {\n   \
    \     max_test = 8000\n    }\n\n    if n > 10000 {\n        max_test = n\n   \
    \ } else {\n        max_test = 10000\n    }\n\n    if n > 20000 {\n        max_test\
    \ = n\n    } else {\n        max_test = 20000\n    }\n\n    if n > 40000 {\n \
    \       max_test = n\n    } else {\n        max_test = 40000\n    }\n\n    if\
    \ n > 80000 {\n        max_test = n\n    } else {\n        max_test = 80000\n\
    \    }\n\n    if n > 100000 {\n        max_test = n\n    } else {\n        max_test\
    \ = 100000\n    }\n\n    if n > 200000 {\n        max_test = n\n    } else {\n\
    \        max_test = 200000\n    }\n\n    if n > 400000 {\n        max_test = n\n\
    \    } else {\n        max_test = 400000\n    }\n\n    if n > 800000 {\n     \
    \   max_test = n\n    } else {\n        max_test = 800000\n    }\n\n    if n >\
    \ 1000000 {\n        max_test = n\n    } else {\n        max_test = 1000000\n\
    \    }\n\n    if n > 2000000 {\n        max_test = n\n    } else {\n        max_test\
    \ = 2000000\n    }\n\n    if n > 4000000 {\n        max_test = n\n    } else {\n\
    \        max_test = 4000000\n    }\n\n    if n > 8000000 {\n        max_test =\
    \ n\n    } else {\n        max_test = 8000000\n    }\n\n    if n > 10000000 {\n\
    \        max_test = n\n    } else {\n        max_test = 10000000\n    }\n\n  \
    \  if n > 20000000 {\n        max_test = n\n    } else {\n        max_test = 20000000\n\
    \    }\n\n    if n > 40000000 {\n        max_test = n\n    } else {\n        max_test\
    \ = 40000000\n    }\n\n    if n > 80000000 {\n        max_test = n\n    } else\
    \ {\n        max_test = 80000000\n    }\n\n    if n > 100000000 {\n        max_test\
    \ = n\n    } else {\n        max_test = 100000000\n    }\n\n    if n > 200000000\
    \ {\n        max_test = n\n    } else {\n        max_test = 200000000\n    }\n\
    \n    if n > 400000000 {\n        max_test = n\n    } else {\n        max_test\
    \ = 400000000\n    }\n\n    if n > 800000000 {\n        max_test = n\n    } else\
    \ {\n        max_test = 800000000\n    }\n\n    if n > 1000000000 {\n        max_test\
    \ = n\n    } else {\n        max_test = 1000000000\n    }\n\n    if n > 2000000000\
    \ {\n        max_test = n\n    } else {\n        max_test = 2000000000\n    }\n\
    \n    if n > 400000000\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(101), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(13441), expected: true },\n     { actual:\
    \ candidate(61), expected: true },\n     { actual: candidate(4), expected: false\
    \ },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpdxq8al6v_test.go:192:6: expected ''('', found TestIs_Prime

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073490
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n%2\
    \ == 0 {\n        return false\n    }\n\n    for i := 3; i <= n/2; i++ {\n   \
    \     if n%i == 0 {\n            return false\n        }\n    }\n\n    return\
    \ true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(6), expected: false },\n     { actual:\
    \ candidate(101), expected: true },\n     { actual: candidate(11), expected: true\
    \ },\n     { actual: candidate(13441), expected: true },\n     { actual: candidate(61),\
    \ expected: true },\n     { actual: candidate(4), expected: false },\n     { actual:\
    \ candidate(1), expected: false },\n     { actual: candidate(5), expected: true\
    \ },\n     { actual: candidate(11), expected: true },\n     { actual: candidate(17),\
    \ expected: true },\n     { actual: candidate(85), expected: false },\n     {\
    \ actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__6\
    \ (0.00s)\n        tmpxxbvs538_test.go:62: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073492
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n % 2 == 0 {\n   \
    \     return false\n    }\n    if n == 3 {\n        return true\n    }\n    if\
    \ n <= 5 {\n        return false\n    }\n    if n % 3 == 0 {\n        return false\n\
    \    }\n    if n <= 3 {\n        return true\n    }\n    if n % 5 == 0 {\n   \
    \     return false\n    }\n    if n <= 7 {\n        return true\n    }\n    return\
    \ is_prime(n - 1)\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(101), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(13441), expected: true },\n     { actual:\
    \ candidate(61), expected: true },\n     { actual: candidate(4), expected: false\
    \ },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__1\
    \ (0.00s)\n        tmp8ju9_hu6_test.go:82: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__2 (0.00s)\n        tmp8ju9_hu6_test.go:82:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__3\
    \ (0.00s)\n        tmp8ju9_hu6_test.go:82: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__4 (0.00s)\n        tmp8ju9_hu6_test.go:82:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__7\
    \ (0.00s)\n        tmp8ju9_hu6_test.go:82: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__8 (0.00s)\n        tmp8ju9_hu6_test.go:82:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__9\
    \ (0.00s)\n        tmp8ju9_hu6_test.go:82: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073492
- exit_code: 2
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    n -= 2\n    for i := 2; i < n; i += 2 {\n        if isprime[i] {\n\
    \            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t\
    \ *testing.T) {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkolkqj_f_test.go:32:12: undefined: isprime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073492
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n\n    if n == 2 {\n        return true\n\
    \    }\n\n    if n > 2 && n % 2 == 0 {\n        return false\n    }\n\n    for\
    \ i := 3; i < n; i += 2 {\n        if n % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n \
    \ candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6), expected:\
    \ false },\n     { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073493
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    switch\
    \ n%2 {\n    case 0: return n == 1\n    case 1: return n == 3 || n == 5 || n ==\
    \ 7 || n == 9\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n\
    \  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6), expected:\
    \ false },\n     { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__1\
    \ (0.00s)\n        tmpvss7grnc_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__2 (0.00s)\n        tmpvss7grnc_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__3\
    \ (0.00s)\n        tmpvss7grnc_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__4 (0.00s)\n        tmpvss7grnc_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__8\
    \ (0.00s)\n        tmpvss7grnc_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__9 (0.00s)\n        tmpvss7grnc_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073492
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n\n    for i := 2; i <= n; i += 1 {\n   \
    \     if n % i == 0 {\n            return false\n        }\n    }\n\n    return\
    \ true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(6), expected: false },\n     { actual:\
    \ candidate(101), expected: true },\n     { actual: candidate(11), expected: true\
    \ },\n     { actual: candidate(13441), expected: true },\n     { actual: candidate(61),\
    \ expected: true },\n     { actual: candidate(4), expected: false },\n     { actual:\
    \ candidate(1), expected: false },\n     { actual: candidate(5), expected: true\
    \ },\n     { actual: candidate(11), expected: true },\n     { actual: candidate(17),\
    \ expected: true },\n     { actual: candidate(85), expected: false },\n     {\
    \ actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__1\
    \ (0.00s)\n        tmpl5rmezl2_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__2 (0.00s)\n        tmpl5rmezl2_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__3\
    \ (0.00s)\n        tmpl5rmezl2_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__4 (0.00s)\n        tmpl5rmezl2_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__7\
    \ (0.00s)\n        tmpl5rmezl2_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__8 (0.00s)\n        tmpl5rmezl2_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__9\
    \ (0.00s)\n        tmpl5rmezl2_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073493
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 1 {\n        return true\n    }\n    if n <= 2 {\n        return false\n\
    \    }\n    if n <= 3 {\n        return n == 1\n    }\n\n    // See https://en.wikipedia.org/wiki/Primality_test#Naive_method\n\
    \    // for details.\n    const maxint = (1 << 64) - 1\n    const minint = (1\
    \ << 63) - 1\n    const step = 2\n\n    var i, limit, modN, result int\n\n   \
    \ limit = maxint / minint\n    for i = minint; i <= limit; i += step {\n     \
    \   modN = i\n        result = 0\n        for n := 1; n <= modN; n++ {\n     \
    \       if modN % n == 0 {\n                result++\n                break\n\
    \            }\n        }\n        if result > n {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n \
    \ candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6), expected:\
    \ false },\n     { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__0\
    \ (0.00s)\n        tmpy1kdt3ov_test.go:84: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Prime/test_num__5 (0.00s)\n        tmpy1kdt3ov_test.go:84:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Prime/test_num__6\
    \ (0.00s)\n        tmpy1kdt3ov_test.go:84: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Prime/test_num__10 (0.00s)\n        tmpy1kdt3ov_test.go:84:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Prime/test_num__11\
    \ (0.00s)\n        tmpy1kdt3ov_test.go:84: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Prime/test_num__12 (0.00s)\n        tmpy1kdt3ov_test.go:84:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073493
- exit_code: 2
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    var k int = 0\n    var sqrt int = int(math.Sqrt(float64(n)))\n\
    \    for ; k < sqrt; k++ {\n        if n % k == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n \
    \ candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6), expected:\
    \ false },\n     { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyh8xpj5t_test.go:28:24: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073493
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n    if n == 2 {\n        return true\n\
    \    }\n\n    if n % 2 == 0 {\n        return is_prime(n/2)\n    }\n\n    i :=\
    \ 3\n    for ; i*i <= n; i += 2 {\n        if n % i == 0 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T)\
    \ {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__0\
    \ (0.00s)\n        tmpq23rpsum_test.go:69: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Prime/test_num__5 (0.00s)\n        tmpq23rpsum_test.go:69:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073493
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 || n > 30 {\n        return false\n    }\n\n    if n == 2 || n == 3 {\n\
    \        return true\n    }\n\n    var i int\n    var count int\n\n    // prime\
    \ number is odd if even number of odd divisors\n    for i = 2; i*i <= n; i +=\
    \ 2 {\n        count = 1\n        if n%i == 0 {\n            count++\n       \
    \ }\n        for j := i; i*j < n; j += i {\n            if n%j == 0 {\n      \
    \          count++\n            }\n        }\n        if count == i {\n      \
    \      return false\n        }\n    }\n    return true\n}\n</cell>\n<cell>\n%%bash\n\
    go test -test.bench=.\n</cell>\n<text>\nExercise: Find the prime numbers between\
    \ 1 and 10. Test whether they are prime using your own is_prime function.\n\n\n\
    </text>\n<text>\nExercise: How many times are you required to compute the Fibonacci\
    \ series from 0 through 100 in Go?\n\n\n</text>\n<text>\nExercise: What is 2^3\
    \ in Go?\n\n\n</text>\n<text>\nExercise: Find the prime factorization of 1000.\
    \ Find the prime factorization of 600.\n\n\n</text>\n<text>\nExercise: What is\
    \ 2^3 in Go?\n\n\n</text>\n<text>\nExercise: Find the prime factorization of 100.\
    \ Find the prime factorization of 100.\n\n\n</text>\n<text>\nExercise: What is\
    \ 2^3 in Go?\n\n\n</text>\n<text>\nExercise: What is 2^3 in Go?\n\n\n</text>\n\
    <text>\nExercise: What is 2^3 in Go?\n\n\n</text>\n<text>\nExercise: Find the\
    \ prime factorization of 100. Find the prime factorization of 100.\n\n\n</text>\n\
    <text>\nExercise: What is 2^3 in Go?\n\n\n</text>\n<text>\nExercise: What is 2^3\
    \ in Go?\n\n\n</text>\n<text>\nExercise: What is 2^3 in Go?\n\n\n</text>\n<text>\n\
    Exercise: Find the prime factorization of 1000. Find the prime factorization of\
    \ 600.\n\n\n</text>\n<text>\nExercise: What is 2^3 in Go?\n\n\n</text>\n<text>\n\
    Exercise: What is 2^3 in Go?\n\n\n</text>\n<text>\nExercise: What is 2^3 in Go?\n\
    \n\n</text>\n<text>\nExercise: What is 2^3 in Go?\n\n\n</text>\n<text>\nExercise:\
    \ Find the prime factorization of 1000. Find the prime factorization of 600.\n\
    \n\n</text>\n<text>\nExercise: What is 2^3 in Go?\n\n\n</text>\n<text>\nExercise:\
    \ What is 2^3 in Go?\n\n\n</text>\n<text>\nExercise: \nfunc TestIs_Prime(t *testing.T)\
    \ {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpkod42at__test.go:52:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073492
- exit_code: 2
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    m :=\
    \ int32(n)\n    if m <= 1 {\n        return false\n    }\n    if m == 2 {\n  \
    \      return true\n    }\n    if m == 3 {\n        return true\n    }\n\n   \
    \ // Compute n-1-m\n    m -= 1\n    for i := m - 1; i > 0; i-- {\n        if n\
    \ == i {\n            return false\n        }\n    }\n\n    // Compute n+m-1\n\
    \    m += 1\n    for i := m; i < int32(math.Sqrt(float64(n))); i++ {\n       \
    \ if n == i {\n            return true\n        }\n    }\n    return false\n}\n\
    \nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfekwmdmq_test.go:38:17: invalid operation: n == i (mismatched types int
    and int32)

    /tmp/tmpfekwmdmq_test.go:45:27: undefined: math

    /tmp/tmpfekwmdmq_test.go:46:17: invalid operation: n == i (mismatched types int
    and int32)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073493
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return true\n    }\n\n    k := 1\n    sum := 2\n    for i :=\
    \ 3; i <= n; i++ {\n        if k%i == 0 {\n            sum += i\n        }\n \
    \       k++\n    }\n\n    if sum >= n {\n        return true\n    }\n\n    return\
    \ false\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(6), expected: false },\n     { actual:\
    \ candidate(101), expected: true },\n     { actual: candidate(11), expected: true\
    \ },\n     { actual: candidate(13441), expected: true },\n     { actual: candidate(61),\
    \ expected: true },\n     { actual: candidate(4), expected: false },\n     { actual:\
    \ candidate(1), expected: false },\n     { actual: candidate(5), expected: true\
    \ },\n     { actual: candidate(11), expected: true },\n     { actual: candidate(17),\
    \ expected: true },\n     { actual: candidate(85), expected: false },\n     {\
    \ actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__1\
    \ (0.00s)\n        tmpcdzxl_bh_test.go:69: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__2 (0.00s)\n        tmpcdzxl_bh_test.go:69:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__3\
    \ (0.00s)\n        tmpcdzxl_bh_test.go:69: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__4 (0.00s)\n        tmpcdzxl_bh_test.go:69:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__6\
    \ (0.00s)\n        tmpcdzxl_bh_test.go:69: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Prime/test_num__7 (0.00s)\n        tmpcdzxl_bh_test.go:69:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__8\
    \ (0.00s)\n        tmpcdzxl_bh_test.go:69: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__9 (0.00s)\n        tmpcdzxl_bh_test.go:69:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073493
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    var prime\
    \ bool\n    if n < 2 {\n        return true\n    }\n    for i := 2; i < n; i++\
    \ {\n        if n%i == 0 {\n            prime = false\n            break\n   \
    \     }\n    }\n    if prime {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__1\
    \ (0.00s)\n        tmp4vufwl63_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__2 (0.00s)\n        tmp4vufwl63_test.go:65:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__3\
    \ (0.00s)\n        tmp4vufwl63_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__4 (0.00s)\n        tmp4vufwl63_test.go:65:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__6\
    \ (0.00s)\n        tmp4vufwl63_test.go:65: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Prime/test_num__7 (0.00s)\n        tmp4vufwl63_test.go:65:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__8\
    \ (0.00s)\n        tmp4vufwl63_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__9 (0.00s)\n        tmp4vufwl63_test.go:65:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073493
- exit_code: 2
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    prime\
    \ := true\n    prime &= n != 1 && !is_prime_test.prime[n-1]\n    for i := 2; i\
    \ <= n; i++ {\n        if n%i == 0 {\n            prime = false\n            break\n\
    \        }\n    }\n    return prime\n}\n\nfunc TestIs_Prime(t *testing.T) {\n\
    \  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6), expected:\
    \ false },\n     { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_gv6wtqn_test.go:25:25: undefined: is_prime_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073493
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n\n    if n == 2 {\n        return true\n\
    \    }\n\n    if n%2 == 0 {\n        return false\n    }\n\n    if n%3 == 0 {\n\
    \        return false\n    }\n\n    s := n/4\n    t := n%12\n\n    for i := 3;\
    \ i <= 12; i++ {\n        if i%t == 0 {\n            return false\n        }\n\
    \n        if i*i > n{\n            return false\n        }\n\n        if i*s ==\
    \ n {\n            return true\n        }\n    }\n\n    return false\n}\n\nfunc\
    \ TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__1\
    \ (0.00s)\n        tmpommr_z96_test.go:85: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__2 (0.00s)\n        tmpommr_z96_test.go:85:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__3\
    \ (0.00s)\n        tmpommr_z96_test.go:85: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__4 (0.00s)\n        tmpommr_z96_test.go:85:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__7\
    \ (0.00s)\n        tmpommr_z96_test.go:85: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__8 (0.00s)\n        tmpommr_z96_test.go:85:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__9\
    \ (0.00s)\n        tmpommr_z96_test.go:85: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073493
- exit_code: 2
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    // https://en.wikipedia.org/wiki/Primality_test\n\
    \    if n < 2 || n > 1000 {\n        return false\n    }\n    sieveOfAtkin(primes,\
    \ n)\n    x := n\n    for {\n        // fmt.Printf(\"%v \", x)\n        if x ==\
    \ 0 {\n            return false\n        }\n        if primes[x / 2] {\n     \
    \       return false\n        }\n        x /= 2\n    }\n}\n\nfunc TestIs_Prime(t\
    \ *testing.T) {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo5dxr8lg_test.go:28:5: undefined: sieveOfAtkin

    /tmp/tmpo5dxr8lg_test.go:28:18: undefined: primes

    /tmp/tmpo5dxr8lg_test.go:35:12: undefined: primes

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073493
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 2 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073493
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n%2 == 0 {\n        return is_prime(n/2)\n\
    \    }\n    if n == 2 {\n        return true\n    }\n    if n%3 != 0 {\n     \
    \   return false\n    }\n    for i := 3; i <= n/3; i++ {\n        if n%i == 0\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t\
    \ *testing.T) {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__0\
    \ (0.00s)\n        tmpzlranyzx_test.go:69: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Prime/test_num__1 (0.00s)\n        tmpzlranyzx_test.go:69:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__2\
    \ (0.00s)\n        tmpzlranyzx_test.go:69: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__3 (0.00s)\n        tmpzlranyzx_test.go:69:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__4\
    \ (0.00s)\n        tmpzlranyzx_test.go:69: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__7 (0.00s)\n        tmpzlranyzx_test.go:69:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__8\
    \ (0.00s)\n        tmpzlranyzx_test.go:69: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__9 (0.00s)\n        tmpzlranyzx_test.go:69:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073493
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 1 {\n        return true\n    }\n    if n <= 1 {\n        return false\n\
    \    }\n\n    for i := 2; i < n; i++ {\n        if n%i == 0 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T)\
    \ {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__6\
    \ (0.00s)\n        tmpwwm9xuq8_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073493
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 1 {\n        return true\n    }\n    if n < 2 {\n        return false\n \
    \   }\n    if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n    \
    \    return false\n    }\n    if n%3 == 0 {\n        return false\n    }\n\n \
    \   return is_prime_test(n)\n}\n</cell>\n<text>\nExercise 6. Recursive prime function\
    \ with memoization.\nWrite a function that returns the prime factor of a number.\
    \ This function should be written in recursive form and should use memoization\
    \ to improve performance.\n\n\n</text>\n<cell>\npackage is_prime_recursive\n\n\
    import (\n    \"fmt\"\n    \"math/big\"\n)\n\nfunc TestIs_Prime(t *testing.T)\
    \ {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpafvib6dg_test.go:42:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073492
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 || n > 1000 {\n        return false\n    }\n\n    prime := true\n\n    for\
    \ i := 2; i <= n/i; i++ {\n        if n%i == 0 {\n            prime = false\n\
    \            break\n        }\n    }\n\n    return prime\n}\n\nfunc TestIs_Prime(t\
    \ *testing.T) {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__3\
    \ (0.00s)\n        tmpzakrhhec_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073493
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n==1\
    \ {\n        return true\n    }\n    prime := true\n    for i := 2; i <= n/2;\
    \ i++) {\n        if n % i == 0 {\n            prime = false\n            break\n\
    \        }\n    }\n    return prime\n}\n\nfunc TestIs_Prime(t *testing.T) {\n\
    \  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6), expected:\
    \ false },\n     { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgw345nzg_test.go:28:30: expected ''{'', found '')''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073493
- exit_code: 2
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n%2 == 0 {\n        return false\n\
    \    }\n    sqrt_n := int(math.Sqrt(float64(n)))\n    for i := 3; i <= sqrt_n;\
    \ i++ {\n        if n%i == 0 {\n            return false\n        }\n    }\n \
    \   return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(101), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(13441), expected: true },\n     { actual:\
    \ candidate(61), expected: true },\n     { actual: candidate(4), expected: false\
    \ },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjuafr2m7_test.go:30:19: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073494
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n%2\
    \ == 0 {\n        return true\n    }\n\n    for i := 3; i < n; i = i * 2 {\n \
    \       if n%i == 0 {\n            return false\n        }\n    }\n\n    return\
    \ true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(6), expected: false },\n     { actual:\
    \ candidate(101), expected: true },\n     { actual: candidate(11), expected: true\
    \ },\n     { actual: candidate(13441), expected: true },\n     { actual: candidate(61),\
    \ expected: true },\n     { actual: candidate(4), expected: false },\n     { actual:\
    \ candidate(1), expected: false },\n     { actual: candidate(5), expected: true\
    \ },\n     { actual: candidate(11), expected: true },\n     { actual: candidate(17),\
    \ expected: true },\n     { actual: candidate(85), expected: false },\n     {\
    \ actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__0\
    \ (0.00s)\n        tmpc2orz92v_test.go:62: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Prime/test_num__5 (0.00s)\n        tmpc2orz92v_test.go:62:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Prime/test_num__6\
    \ (0.00s)\n        tmpc2orz92v_test.go:62: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Prime/test_num__10 (0.00s)\n        tmpc2orz92v_test.go:62:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Prime/test_num__11\
    \ (0.00s)\n        tmpc2orz92v_test.go:62: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Prime/test_num__12 (0.00s)\n        tmpc2orz92v_test.go:62:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073494
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    // First\
    \ trial division test\n    if n == 1 {\n        return true\n    }\n    for i\
    \ := 2; i < n; i++ {\n        if (n%i) == 0 {\n            return false\n    \
    \    }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate\
    \ := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(6), expected: false },\n  \
    \   { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__6\
    \ (0.00s)\n        tmpmbndrdb4_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073494
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    // Optimized\
    \ version of is_prime_test().\n    // http://blog.nathanj.net/faster-prime-number-checking-algorithm-python/\n\
    \    if n < 2 {\n        return false\n    }\n    m := 2\n    i := 0\n    // Prime\
    \ starts with 2, so skip even numbers.\n    for ; i < m && n%2 == 0; i++ {\n \
    \       n = n + 1\n    }\n    for ; i < m; i++ {\n        if n % i == 0 {\n  \
    \          return false\n        }\n    }\n    return n == 1\n}\n\nfunc TestIs_Prime(t\
    \ *testing.T) {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\npanic: runtime error: integer divide by\
    \ zero [recovered]\n\tpanic: runtime error: integer divide by zero\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x5038a0, 0x5f29a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5038a0, 0x5f29a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_prime(...)\n\t/tmp/tmp34i_fkse_test.go:36\n\
    command-line-arguments_test.TestIs_Prime(0x0?)\n\t/tmp/tmp34i_fkse_test.go:51\
    \ +0x8d4\ntesting.tRunner(0xc0001a0340, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073494
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n\n    if n == 2 {\n        return true\n\
    \    }\n\n    if n % 2 == 0 {\n        return false\n    }\n\n    max := n\n \
    \   for i := 3; i <= max; i, p = i*(i+1)/2 + p, n%p != 0 {\n    }\n\n    return\
    \ n == 1\n}\n</code>\nYou can test it at https://play.golang.org/p/X0N5YzLQK5w\n\
    <|/ a |>\n<| a tags=go,algorithm dscore=3 |>\nI suggest using a simple sieve algorithm\
    \ for this: first make an array containing all numbers from 1 to 1000 and then\
    \ make an array of bools of the same size, initially all set to false. After that,\
    \ just go through your range-array and set the corresponding bool to true for\
    \ the corresponding array positions.\n<|/ a |>\n<| a |>\nHere's my go version\
    \ using bit wise operations\n<code>\npackage main\n\nimport (\n        \"fmt\"\
    \n)\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(6), expected: false },\n     { actual:\
    \ candidate(101), expected: true },\n     { actual: candidate(11), expected: true\
    \ },\n     { actual: candidate(13441), expected: true },\n     { actual: candidate(61),\
    \ expected: true },\n     { actual: candidate(4), expected: false },\n     { actual:\
    \ candidate(1), expected: false },\n     { actual: candidate(5), expected: true\
    \ },\n     { actual: candidate(11), expected: true },\n     { actual: candidate(17),\
    \ expected: true },\n     { actual: candidate(85), expected: false },\n     {\
    \ actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvglhjb35_test.go:42:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073494
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n\n    if n%2 == 0 {\n        return true\n\
    \    }\n\n    for i := 3; i*i <= n; i += 2 {\n        if n%i == 0 {\n        \
    \    return false\n        }\n    }\n\n    return true\n}\n\nfunc TestIs_Prime(t\
    \ *testing.T) {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__0\
    \ (0.00s)\n        tmpuo_51b0j_test.go:66: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Prime/test_num__5 (0.00s)\n        tmpuo_51b0j_test.go:66:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073495
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n % 2 == 0 {\n        return false\n    }\n    if n == 3 {\n   \
    \     return true\n    }\n    if n == 4 {\n        return true\n    }\n    if\
    \ n == 5 {\n        return true\n    }\n    if n == 6 {\n        return true\n\
    \    }\n    if n == 7 {\n        return true\n    }\n    if n == 8 {\n       \
    \ return true\n    }\n    if n == 9 {\n        return true\n    }\n    return\
    \ false\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\npackage main\n\
    \nimport (\n    \"fmt\"\n)\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate :=\
    \ is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(6), expected: false },\n  \
    \   { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpfs15i236_test.go:56:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073494
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return true\n    }\n\n    if n == 2 {\n        return true\n\
    \    }\n\n    for d := 3; d < n; d++ {\n        if n%d == 0 {\n            return\
    \ false\n        }\n    }\n\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T)\
    \ {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__5\
    \ (0.00s)\n        tmpm1egyqwl_test.go:66: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Prime/test_num__6 (0.00s)\n        tmpm1egyqwl_test.go:66:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073495
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 1 {\n        return true\n \
    \   }\n    if n%2 == 0 {\n        return false\n    }\n    if n%3 == 0 {\n   \
    \     return false\n    }\n\n    d := 3\n    for i := 4; i*d <= n; i++ {\n   \
    \     if n%d-i == 0 {\n            return false\n        }\n        d += 2\n \
    \   }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate :=\
    \ is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(6), expected: false },\n  \
    \   { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__3\
    \ (0.00s)\n        tmpdubltvfp_test.go:72: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__10 (0.00s)\n        tmpdubltvfp_test.go:72:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Prime/test_num__11\
    \ (0.00s)\n        tmpdubltvfp_test.go:72: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073495
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return true\n    }\n    if n%2 == 0 {\n        return is_prime(n/2)\n\
    \    }\n    return is_prime(n/3)\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate\
    \ := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(6), expected: false },\n  \
    \   { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__0\
    \ (0.00s)\n        tmpm8h7sk1f_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Prime/test_num__5 (0.00s)\n        tmpm8h7sk1f_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Prime/test_num__6\
    \ (0.00s)\n        tmpm8h7sk1f_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Prime/test_num__10 (0.00s)\n        tmpm8h7sk1f_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Prime/test_num__11\
    \ (0.00s)\n        tmpm8h7sk1f_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Prime/test_num__12 (0.00s)\n        tmpm8h7sk1f_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073495
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    // Prime\
    \ numbers are greater than 1.\n    if n < 1 || n >= 100 {\n        return false\n\
    \    }\n    \n    // Sieve of Eratosthenes is a prime test, so we will use it\n\
    \    // to test the primeness condition of the number being tested.\n    for i\
    \ := 2; i < n; i++ {\n        if n%i == 0 {\n            return false\n      \
    \  }\n    }\n\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate\
    \ := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(6), expected: false },\n  \
    \   { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__1\
    \ (0.00s)\n        tmpveec5wu__test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__3 (0.00s)\n        tmpveec5wu__test.go:65:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__6\
    \ (0.00s)\n        tmpveec5wu__test.go:65: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073495
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n<2\
    \ {\n        return true\n    }\n    if n%2 == 0 {\n        return false\n   \
    \ }\n    for i := 3; i*i <= n; i+=2 {\n        if n%i == 0 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T)\
    \ {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__6\
    \ (0.00s)\n        tmp3h7wzdw__test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073495
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n==1\
    \ {\n        return true\n    }\n    if n%2 == 0 {\n        return false\n   \
    \ }\n    var j int\n    for j = 3; j < n; j+=2 {\n        if n%j == 0 {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t\
    \ *testing.T) {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__6\
    \ (0.00s)\n        tmpx3j6yid0_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073495
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n < 7 && n % 2 == 0 {\n        return true\n    }\n    if n < 13\
    \ && n % 5 == 0 {\n        return true\n    }\n    if n < 17 && n % 7 == 0 {\n\
    \        return true\n    }\n    if n < 41 && n % 3 == 0 {\n        return true\n\
    \    }\n    if n < 47 && n % 5 == 0 {\n        return true\n    }\n    if n <\
    \ 59 && n % 7 == 0 {\n        return true\n    }\n    if n < 87 && n % 11 == 0\
    \ {\n        return true\n    }\n    if n < 1000 && n % 13 == 0 {\n        return\
    \ true\n    }\n    if n < 1001 && n % 17 == 0 {\n        return true\n    }\n\
    \    if n < 1009 && n % 19 == 0 {\n        return true\n    }\n    if n < 2000\
    \ && n % 23 == 0 {\n        return true\n    }\n    if n < 2001 && n % 29 == 0\
    \ {\n        return true\n    }\n    if n < 2007 && n % 31 == 0 {\n        return\
    \ true\n    }\n    if n < 2049 && n % 37 == 0 {\n        return true\n    }\n\
    \    if n < 2050 && n % 39 == 0 {\n        return true\n    }\n    if n < 2097\
    \ && n % 43 == 0 {\n        return true\n    }\n    if n < 2111 && n % 47 == 0\
    \ {\n        return true\n    }\n    if n < 2117 && n % 49 == 0 {\n        return\
    \ true\n    }\n    if n < 2141 && n % 53 == 0 {\n        return true\n    }\n\
    \    if n < 2143 && n % 57 == 0 {\n        return true\n    }\n    if n < 2151\
    \ && n % 59 == 0 {\n        return true\n    }\n    if n < 2153 && n % 61 == 0\
    \ {\n        return true\n    }\n    if n < 2155 && n % 63 == 0 {\n        return\
    \ true\n    }\n    if n < 2175 && n % 67 == 0 {\n        return true\n    }\n\
    \    if n < 2179 && n % 71 == 0 {\n        return true\n    }\n    if n < 2191\
    \ && n % 73 == 0 {\n        return true\n    }\n    if n < 2197 && n % 79 == 0\
    \ {\n        return true\n    }\n    if n < 2203 && n % 83 == 0 {\n        return\
    \ true\n    }\n    if n < 2237 && n % 87 == 0 {\n        return true\n    }\n\
    \    if n < 2251 && n % 89 == 0 {\n        return true\n    }\n    if n < 2273\
    \ && n % 97 == 0 {\n        return true\n    }\n    if n < 2293 && n % 101 ==\
    \ 0 {\n        return true\n    }\n    if n < 2303 && n % 103 == 0 {\n       \
    \ return true\n    }\n    if n < 2327 && n % 105 == 0 {\n        return true\n\
    \    }\n    if n < \nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(101), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(13441), expected: true },\n     { actual:\
    \ candidate(61), expected: true },\n     { actual: candidate(4), expected: false\
    \ },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp8t5sl366_test.go:133:6: expected ''('', found TestIs_Prime

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073494
- exit_code: null
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 1 {\n        return false\n    }\n    if n == 2 {\n        return true\n\
    \    }\n\n    d := 2\n    for {\n        if n % d == 0 {\n            return false\n\
    \        }\n        d += 2\n    }\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate\
    \ := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(6), expected: false },\n  \
    \   { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073508
- exit_code: 2
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n%2\
    \ == 0 {\n        return false\n    }\n    if n%3 == 0 {\n        return false\n\
    \    }\n    n := int(sqrt(n)) + 1\n    i := 2\n    p := true\n    for i <= n {\n\
    \        if n % i == 0 {\n            p = false\n        }\n        i += 2\n \
    \   }\n    return p\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(101), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(13441), expected: true },\n     { actual:\
    \ candidate(61), expected: true },\n     { actual: candidate(4), expected: false\
    \ },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6me8bpfx_test.go:30:7: no new variables on left side of :=

    /tmp/tmp6me8bpfx_test.go:30:14: undefined: sqrt

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073495
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    // Check\
    \ for divisibility by 2 (we only need to check up to square root of\n    // n).\n\
    \    if n < 2 {\n        return false\n    }\n    for i := 2; i <= n; i += 1 {\n\
    \        if n % i == 0 {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(6), expected: false },\n     { actual:\
    \ candidate(101), expected: true },\n     { actual: candidate(11), expected: true\
    \ },\n     { actual: candidate(13441), expected: true },\n     { actual: candidate(61),\
    \ expected: true },\n     { actual: candidate(4), expected: false },\n     { actual:\
    \ candidate(1), expected: false },\n     { actual: candidate(5), expected: true\
    \ },\n     { actual: candidate(11), expected: true },\n     { actual: candidate(17),\
    \ expected: true },\n     { actual: candidate(85), expected: false },\n     {\
    \ actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__1\
    \ (0.00s)\n        tmplg1tarxj_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__2 (0.00s)\n        tmplg1tarxj_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__3\
    \ (0.00s)\n        tmplg1tarxj_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__4 (0.00s)\n        tmplg1tarxj_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__7\
    \ (0.00s)\n        tmplg1tarxj_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__8 (0.00s)\n        tmplg1tarxj_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__9\
    \ (0.00s)\n        tmplg1tarxj_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073495
- exit_code: 2
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 1 {\n        return false\n    }\n    if n == 2 {\n        return true\n\
    \    }\n    if n == 3 {\n        return true\n    }\n\n    var prime bool\n  \
    \  if n % 2 == 0 {\n        prime = true\n    } else if n % 3 == 0 {\n       \
    \ prime = true\n    } else if n%5 == 0 {\n        prime = true\n    } else {\n\
    \        for i := 3; i <= int(sqrt(n)); i++ {\n            if n%i == 0 {\n   \
    \             prime = true\n                break\n            }\n        }\n\
    \    }\n\n    return prime\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate\
    \ := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(6), expected: false },\n  \
    \   { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7lr65dwz_test.go:42:30: undefined: sqrt

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073495
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n%2 == 0 {\n        return true\n\
    \    }\n    for i := 3; i <= n; i++ {\n        if n%i == 0 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T)\
    \ {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__0\
    \ (0.00s)\n        tmp5nlt_itv_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Prime/test_num__1 (0.00s)\n        tmp5nlt_itv_test.go:63:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__2\
    \ (0.00s)\n        tmp5nlt_itv_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__3 (0.00s)\n        tmp5nlt_itv_test.go:63:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__4\
    \ (0.00s)\n        tmp5nlt_itv_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__5 (0.00s)\n        tmp5nlt_itv_test.go:63:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Prime/test_num__7\
    \ (0.00s)\n        tmp5nlt_itv_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__8 (0.00s)\n        tmp5nlt_itv_test.go:63:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__9\
    \ (0.00s)\n        tmp5nlt_itv_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073495
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n < 4 {\n        return true\n  \
    \  }\n    if n % 2 == 0 || n % 3 == 0 {\n        return false\n    }\n\n    //\
    \ 5 is prime.\n    if n == 5 || n == 17 || n == 19 || n == 231 {\n        return\
    \ true\n    }\n\n    for i := 5; i <= (n / 2); i += 7 {\n        if n % i == 0\
    \ || n % (i + 2) == 0 {\n            return false\n        }\n    }\n\n    return\
    \ true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(6), expected: false },\n     { actual:\
    \ candidate(101), expected: true },\n     { actual: candidate(11), expected: true\
    \ },\n     { actual: candidate(13441), expected: true },\n     { actual: candidate(61),\
    \ expected: true },\n     { actual: candidate(4), expected: false },\n     { actual:\
    \ candidate(1), expected: false },\n     { actual: candidate(5), expected: true\
    \ },\n     { actual: candidate(11), expected: true },\n     { actual: candidate(17),\
    \ expected: true },\n     { actual: candidate(85), expected: false },\n     {\
    \ actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073495
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n%2\
    \ == 0 {\n        return false\n    }\n    k := 3\n    for ii := 5; ii <= n; ii\
    \ += 2 {\n        if ii%k == 0 {\n            return false\n        }\n      \
    \  k += 2\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate\
    \ := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(6), expected: false },\n  \
    \   { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__6\
    \ (0.00s)\n        tmphuliz57z_test.go:62: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Prime/test_num__10 (0.00s)\n        tmphuliz57z_test.go:62:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Prime/test_num__11\
    \ (0.00s)\n        tmphuliz57z_test.go:62: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Prime/test_num__12 (0.00s)\n        tmphuliz57z_test.go:62:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073495
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n%i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__6\
    \ (0.00s)\n        tmptjs7kr8m_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073496
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n%2\
    \ == 0 {\n        for i := 3; i <= n/2; i++ {\n            if n%i == 0 {\n   \
    \             return false\n            }\n        }\n        return true\n  \
    \  }\n    for i := 3; i <= n/2; i += 2 {\n        if n%i == 0 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T)\
    \ {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__5\
    \ (0.00s)\n        tmp7tux0t8h_test.go:65: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Prime/test_num__6 (0.00s)\n        tmp7tux0t8h_test.go:65:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073496
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n % 2 == 0 {\n        return false\n    }\n    for i := 3; i <=\
    \ int(n/2); i += 2 {\n        if n%i == 0 {\n            return false\n      \
    \  }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate\
    \ := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(6), expected: false },\n  \
    \   { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073496
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    for i\
    \ := 1; i <= n/2; i++ {\n        if n%i == 0 {\n            return false\n   \
    \     }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate\
    \ := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(6), expected: false },\n  \
    \   { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__1\
    \ (0.00s)\n        tmpcmd9vl4h_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__2 (0.00s)\n        tmpcmd9vl4h_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__3\
    \ (0.00s)\n        tmpcmd9vl4h_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__4 (0.00s)\n        tmpcmd9vl4h_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__6\
    \ (0.00s)\n        tmpcmd9vl4h_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Prime/test_num__7 (0.00s)\n        tmpcmd9vl4h_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__8\
    \ (0.00s)\n        tmpcmd9vl4h_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__9 (0.00s)\n        tmpcmd9vl4h_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073496
- exit_code: 2
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    // The\
    \ primes less than the number are only even numbers.\n    if n%2 != 0 {\n    \
    \    return false\n    }\n    // The number is prime if and only if only its only\
    \ prime factor is one.\n    return primes[n] == 1\n}\n\nfunc TestIs_Prime(t *testing.T)\
    \ {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0wujrv1i_test.go:29:12: undefined: primes

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073496
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n\n    for i := 2; i <= n; i++ {\n      \
    \  if n%i == 0 {\n            return false\n        }\n    }\n\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__1\
    \ (0.00s)\n        tmp43bqrjhm_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__2 (0.00s)\n        tmp43bqrjhm_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__3\
    \ (0.00s)\n        tmp43bqrjhm_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__4 (0.00s)\n        tmp43bqrjhm_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__7\
    \ (0.00s)\n        tmp43bqrjhm_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__8 (0.00s)\n        tmp43bqrjhm_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__9\
    \ (0.00s)\n        tmp43bqrjhm_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073496
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n%i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073496
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n\n    if n == 2 {\n        return true\n\
    \    }\n\n    if n % 2 == 0 {\n        return false\n    }\n\n    if n > 3 {\n\
    \        return false\n    }\n\n    for i := 3; i <= int(n); i += 2 {\n      \
    \  if n % i == 0 {\n            return false\n        }\n    }\n\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__1\
    \ (0.00s)\n        tmpphbr8sjt_test.go:74: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__2 (0.00s)\n        tmpphbr8sjt_test.go:74:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__3\
    \ (0.00s)\n        tmpphbr8sjt_test.go:74: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__4 (0.00s)\n        tmpphbr8sjt_test.go:74:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__7\
    \ (0.00s)\n        tmpphbr8sjt_test.go:74: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__8 (0.00s)\n        tmpphbr8sjt_test.go:74:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__9\
    \ (0.00s)\n        tmpphbr8sjt_test.go:74: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073497
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n\n    for i := 2; i <= n; i += 1 {\n  \
    \      if n%i == 0 {\n            return false\n        }\n    }\n\n    return\
    \ true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(6), expected: false },\n     { actual:\
    \ candidate(101), expected: true },\n     { actual: candidate(11), expected: true\
    \ },\n     { actual: candidate(13441), expected: true },\n     { actual: candidate(61),\
    \ expected: true },\n     { actual: candidate(4), expected: false },\n     { actual:\
    \ candidate(1), expected: false },\n     { actual: candidate(5), expected: true\
    \ },\n     { actual: candidate(11), expected: true },\n     { actual: candidate(17),\
    \ expected: true },\n     { actual: candidate(85), expected: false },\n     {\
    \ actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__1\
    \ (0.00s)\n        tmpfbae3a69_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__2 (0.00s)\n        tmpfbae3a69_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__3\
    \ (0.00s)\n        tmpfbae3a69_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__4 (0.00s)\n        tmpfbae3a69_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__7\
    \ (0.00s)\n        tmpfbae3a69_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__8 (0.00s)\n        tmpfbae3a69_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__9\
    \ (0.00s)\n        tmpfbae3a69_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073497
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    var prime\
    \ bool\n    if n%2 == 0 {\n        for i := 3; i < n; i += 2 {\n            if\
    \ n%i == 0 {\n                prime = false\n                break\n         \
    \   }\n        }\n    } else {\n        for i := 3; i < n; i += 2 {\n        \
    \    if n%i == 0 {\n                prime = true\n                break\n    \
    \        }\n        }\n    }\n    return prime\n}\n\nfunc TestIs_Prime(t *testing.T)\
    \ {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__1\
    \ (0.00s)\n        tmpiv7c_xvo_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__2 (0.00s)\n        tmpiv7c_xvo_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__3\
    \ (0.00s)\n        tmpiv7c_xvo_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__4 (0.00s)\n        tmpiv7c_xvo_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__7\
    \ (0.00s)\n        tmpiv7c_xvo_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__8 (0.00s)\n        tmpiv7c_xvo_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__9\
    \ (0.00s)\n        tmpiv7c_xvo_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__10 (0.00s)\n        tmpiv7c_xvo_test.go:68:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Prime/test_num__11\
    \ (0.00s)\n        tmpiv7c_xvo_test.go:68: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Prime/test_num__12 (0.00s)\n        tmpiv7c_xvo_test.go:68:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073497
- exit_code: 2
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 1 {\n        return true\n    }\n    if n < 1 {\n        return false\n \
    \   }\n    if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return\
    \ true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n\n    // Use\
    \ Sieve of Eratosthenes here\n    // https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes\n\
    \    var a []int\n    var p int\n    var q int\n    var j bool\n    a = make([]int,\
    \ math.MaxInt)\n    for j = 1; j < n; j++ {\n        a = append(a, j)\n    }\n\
    \n    for i = 3; i <= math.MaxInt; i++ {\n        for j := 0; j < len(a); j++\
    \ {\n            if a[i]%i == 0 {\n                a[j] = 0\n            }\n \
    \       }\n    }\n\n    for j := 0; j < len(a); j++ {\n        if a[j] == 1 {\n\
    \            if j == 0 {\n                p = i\n            }\n        }\n  \
    \  }\n    for j := 0; j < len(a); j++ {\n        if a[j] == 0 {\n            q\
    \ = j\n        }\n    }\n    if p > q {\n        p = q\n    }\n    return p ==\
    \ q\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(6), expected: false },\n     { actual:\
    \ candidate(101), expected: true },\n     { actual: candidate(11), expected: true\
    \ },\n     { actual: candidate(13441), expected: true },\n     { actual: candidate(61),\
    \ expected: true },\n     { actual: candidate(4), expected: false },\n     { actual:\
    \ candidate(1), expected: false },\n     { actual: candidate(5), expected: true\
    \ },\n     { actual: candidate(11), expected: true },\n     { actual: candidate(17),\
    \ expected: true },\n     { actual: candidate(85), expected: false },\n     {\
    \ actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp714dkdlm_test.go:46:21: undefined: math

    /tmp/tmp714dkdlm_test.go:47:13: cannot use 1 (untyped int constant) as bool value
    in assignment

    /tmp/tmp714dkdlm_test.go:47:20: invalid operation: j < n (mismatched types bool
    and int)

    /tmp/tmp714dkdlm_test.go:47:23: invalid operation: j++ (non-numeric type bool)

    /tmp/tmp714dkdlm_test.go:48:23: cannot use j (variable of type bool) as type int
    in argument to append

    /tmp/tmp714dkdlm_test.go:51:9: undefined: i

    /tmp/tmp714dkdlm_test.go:51:21: undefined: math

    /tmp/tmp714dkdlm_test.go:51:34: undefined: i

    /tmp/tmp714dkdlm_test.go:53:18: undefined: i

    /tmp/tmp714dkdlm_test.go:62:21: undefined: i

    /tmp/tmp714dkdlm_test.go:62:21: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073496
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n\n    if n == 2 {\n        return true\n\
    \    }\n\n    if n == 3 {\n        return true\n    }\n\n    if n % 2 == 0 {\n\
    \        return false\n    }\n\n    var counter int\n    for i := 3; i <= n/2;\
    \ i++ {\n        if n%i == 0 {\n            counter++\n            if counter\
    \ == 2 {\n                return true\n            }\n        }\n    }\n\n   \
    \ return false\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(101), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(13441), expected: true },\n     { actual:\
    \ candidate(61), expected: true },\n     { actual: candidate(4), expected: false\
    \ },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__1\
    \ (0.00s)\n        tmpm1506l6g_test.go:78: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__2 (0.00s)\n        tmpm1506l6g_test.go:78:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__3\
    \ (0.00s)\n        tmpm1506l6g_test.go:78: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__4 (0.00s)\n        tmpm1506l6g_test.go:78:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__7\
    \ (0.00s)\n        tmpm1506l6g_test.go:78: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__8 (0.00s)\n        tmpm1506l6g_test.go:78:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__9\
    \ (0.00s)\n        tmpm1506l6g_test.go:78: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__10 (0.00s)\n        tmpm1506l6g_test.go:78:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Prime/test_num__11\
    \ (0.00s)\n        tmpm1506l6g_test.go:78: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Prime/test_num__12 (0.00s)\n        tmpm1506l6g_test.go:78:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073497
- exit_code: 2
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n <= 1 {\n        return true\n \
    \   }\n    if n % 2 == 0 {\n        return false\n    }\n    for i := 3; i <=\
    \ Math.Sqrt(float64(n) + 1); i++ {\n        if n % i == 0 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T)\
    \ {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcbdpqlse_test.go:33:22: undefined: Math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073497
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    for i\
    \ := 2; i <= n/2; i++ {\n        if n%i == 0 {\n            return false\n   \
    \     }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate\
    \ := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(6), expected: false },\n  \
    \   { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__6\
    \ (0.00s)\n        tmp5vgkqeui_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073491
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n%2\
    \ == 0 {\n        for i := 3; i <= n/2; i+=2 {\n            if n%i == 0 {\n  \
    \              return false\n            }\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__5\
    \ (0.00s)\n        tmptmfuhdxb_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Prime/test_num__6 (0.00s)\n        tmptmfuhdxb_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Prime/test_num__10\
    \ (0.00s)\n        tmptmfuhdxb_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Prime/test_num__11 (0.00s)\n        tmptmfuhdxb_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Prime/test_num__12\
    \ (0.00s)\n        tmptmfuhdxb_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073497
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n%2 == 0 {\n        return false\n\
    \    }\n    p := 3\n    for i := 3; i <= int(n); i += 2 {\n        if n%i == 0\
    \ {\n            return false\n        }\n        if p <= i {\n            p +=\
    \ 2\n        }\n    }\n    return true\n}\nfunc TestIs_Prime(t *testing.T) {\n\
    \  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6), expected:\
    \ false },\n     { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__1\
    \ (0.00s)\n        tmpto_j04r1_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__2 (0.00s)\n        tmpto_j04r1_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__3\
    \ (0.00s)\n        tmpto_j04r1_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__4 (0.00s)\n        tmpto_j04r1_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__7\
    \ (0.00s)\n        tmpto_j04r1_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__8 (0.00s)\n        tmpto_j04r1_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__9\
    \ (0.00s)\n        tmpto_j04r1_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073497
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    \n    // If number is a power of two,\
    \ it is prime.\n    if n&(n-1) == 0 {\n        return true\n    }\n    \n    //\
    \ Generate prime numbers of form 2k+1 and 2k+2 and add them up to\n    // determine\
    \ if number is a prime.\n    primes := [2]int{2, 2}\n    for i := 3; i <= n/2;\
    \ i++ {\n        if primes[0]+primes[1] <= n {\n            primes[0] += primes[1]\n\
    \            primes[1] += 2\n        } else {\n            return false\n    \
    \    }\n    }\n    \n    // If number is not a prime number, it is a composite\
    \ number.\n    return primes[0] < n\n}\n</code>\n<|/ a tags=go,primes |>\n<| a\
    \ dscore=2 tags=go,primes |>\nSure, just create an array of bools and set all\
    \ values to false except the ones you want prime:\n<code>\nfunc TestIs_Prime(t\
    \ *testing.T) {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp58kvemur_test.go:48:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073496
- exit_code: 2
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n\n    m := uint32(n)\n    if m%2 == 0 {\n\
    \        for i := 3; i < m; i = i+2 {\n            if m%i == 0 {\n           \
    \     return false\n            }\n        }\n    } else {\n        for i := 3;\
    \ i <= m; i = i+2 {\n            if m%i == 0 {\n                return false\n\
    \            }\n        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T)\
    \ {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc2d7tqfx_test.go:30:25: invalid operation: i < m (mismatched types int
    and uint32)

    /tmp/tmpc2d7tqfx_test.go:31:16: invalid operation: m % i (mismatched types uint32
    and int)

    /tmp/tmpc2d7tqfx_test.go:36:26: invalid operation: i <= m (mismatched types int
    and uint32)

    /tmp/tmpc2d7tqfx_test.go:37:16: invalid operation: m % i (mismatched types uint32
    and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073497
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    switch\
    \ {\n    case n <= 1:\n        return false\n    case n%2 == 0: // 0 and 1 are\
    \ not prime\n        return false\n    default:\n        for i := 3; i <= n/2;\
    \ i++ {\n            if n%i == 0 {\n                return false\n           \
    \ }\n        }\n    }\n    return true\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\n\
    This fails to detect prime numbers above `2^32-1`.\n<|/ c |>\n<| c |>\nit fails\
    \ for numbers above `2^32` as well\n<|/ c |>\n<| c |>\nWhat about `2^64`? Your\
    \ code fails for me on that too. Why should I believe that OP only wants to check\
    \ up to `2^64`? I don't think it's reasonable to require a program to check for\
    \ primes up to `2^64`. That is like trying to check up to `2^32` for a real number\
    \ `2^32`. I don't think that's reasonable at all.\n<|/ c |>\n<| c |>\nI agree\
    \ with you, but I didn't see any requirement that he wants upto 2^64 numbers.\
    \ I assumed he was checking for prime numbers in the range of some random numbers.\
    \ I think it's better to put such constraints on his questions.\n<|/ c |>\n<|\
    \ a tags=go,sieve-of-eratosthenes |>\nIt doesn't take any memory and doesn't require\
    \ you to check all numbers. I tested it with 1000000 random numbers in the range\
    \ [1, 1000000000] (which is actually larger than the range you would ever need,\
    \ since all numbers are prime except 2) and it worked for me. \n<code>\npackage\
    \ main\n\nimport (\n    \"math\"\n)\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate\
    \ := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(6), expected: false },\n  \
    \   { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpkht86c8d_test.go:38:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073496
- exit_code: 2
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 1 {\n        return true\n    }\n    if n%2 == 0 {\n        return false\n\
    \    }\n    if n%3 == 0 {\n        return false\n    }\n    for i := 4; i <= sqrt(n);\
    \ i += 2 {\n        if n%i == 0 {\n            return false\n        }\n    }\n\
    \    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(101), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(13441), expected: true },\n     { actual:\
    \ candidate(61), expected: true },\n     { actual: candidate(4), expected: false\
    \ },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphy86oa1h_test.go:33:22: undefined: sqrt

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073497
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n == 3 {\n       \
    \ return true\n    }\n    if n%2 == 0 {\n        return false\n    }\n    if n%3\
    \ != 0 {\n        return false\n    }\n    for i := 4; i <= n; i += 2 {\n    \
    \    if n%i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__1\
    \ (0.00s)\n        tmpxrtc7t6i_test.go:74: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__2 (0.00s)\n        tmpxrtc7t6i_test.go:74:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__3\
    \ (0.00s)\n        tmpxrtc7t6i_test.go:74: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__4 (0.00s)\n        tmpxrtc7t6i_test.go:74:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__7\
    \ (0.00s)\n        tmpxrtc7t6i_test.go:74: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__8 (0.00s)\n        tmpxrtc7t6i_test.go:74:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__9\
    \ (0.00s)\n        tmpxrtc7t6i_test.go:74: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073497
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n\n    m := 2\n\n    for i := 2; i <= n;\
    \ i++ {\n        if n % i == 0 {\n            m = i\n        } else {\n      \
    \      break\n        }\n    }\n\n    return m == 2 || n == m\n}\n\nfunc TestIs_Prime(t\
    \ *testing.T) {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__5\
    \ (0.00s)\n        tmpppbs489h_test.go:66: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Prime/test_num__10 (0.00s)\n        tmpppbs489h_test.go:66:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Prime/test_num__11\
    \ (0.00s)\n        tmpppbs489h_test.go:66: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Prime/test_num__12 (0.00s)\n        tmpppbs489h_test.go:66:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073498
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    // Check\
    \ if n is prime.\n    // If n is divisible by 2 then it's prime.\n    // If n\
    \ is divisible by 3 then it's prime.\n    // If n is divisible by 5 then it's\
    \ prime.\n    // If n is divisible by 7 then it's prime.\n    // If n is divisible\
    \ by 11 then it's prime.\n    // If n is divisible by 13 then it's prime.\n  \
    \  // If n is divisible by 17  then it's prime.\n    // If n is divisible by 19\
    \ then it's prime.\n    // If n is divisible by 23 then it's prime.\n    // If\
    \ n is divisible by 29 then it's prime.\n    // If n is divisible by 31 then it's\
    \ prime.\n    // If n is divisible by 37 then it's prime.\n    // If n is divisible\
    \ by 43 then it's prime.\n    // If n is divisible by 51 then it's prime.\n  \
    \  // If n is divisible by 67 then it's prime.\n    // If n is divisible by 73\
    \ then it's prime.\n    // If n is divisible by 79 then it's prime.\n    // If\
    \ n is divisible by 83 then it's prime.\n    // If n is divisible by 89 then it's\
    \ prime.\n    // If n is divisible by 97 then it's prime.\n    // If n is divisible\
    \ by 101 then it's prime.\n    // If n is divisible by 103 then it's prime.\n\
    \    // If n is divisible by 107 then it's prime.\n    // If n is divisible by\
    \ 113 then it's prime.\n    // If n is divisible by 127 then it's prime.\n   \
    \ // If n is divisible by 131 then it's prime.\n    // If n is divisible by 137\
    \ then it's prime.\n    // If n is divisible by 139 then it's prime.\n    // If\
    \ n is divisible by 143 then it's prime.\n    // If n is divisible by 149 then\
    \ it's prime.\n    // If n is divisible by 153 then it's prime.\n    // If n is\
    \ divisible by 157 then it's prime.\n    // If n is divisible by 161 then it's\
    \ prime.\n    // If n is divisible by 163 then it's prime.\n    // If n is divisible\
    \ by 167 then it's prime.\n    // If n is divisible by 173 then it's prime.\n\
    \    // If n is divisible by 179 then it's pri\nfunc TestIs_Prime(t *testing.T)\
    \ {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpzqmjx6an_test.go:62:6: expected ''('', found TestIs_Prime

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073497
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    for i\
    \ := 2; i <= n; i++ {\n        if n%i == 0 {\n            return false\n     \
    \   }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate\
    \ := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(6), expected: false },\n  \
    \   { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__1\
    \ (0.00s)\n        tmpzn3_ovmw_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__2 (0.00s)\n        tmpzn3_ovmw_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__3\
    \ (0.00s)\n        tmpzn3_ovmw_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__4 (0.00s)\n        tmpzn3_ovmw_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__6\
    \ (0.00s)\n        tmpzn3_ovmw_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Prime/test_num__7 (0.00s)\n        tmpzn3_ovmw_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__8\
    \ (0.00s)\n        tmpzn3_ovmw_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__9 (0.00s)\n        tmpzn3_ovmw_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073498
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n    if n == 2 {\n        return true\n\
    \    }\n    for i := 3; i <= n/2; i++ {\n        if n%i == 0 {\n            return\
    \ false\n        }\n    }\n    return true\n}\nfunc TestIs_Prime(t *testing.T)\
    \ {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__5\
    \ (0.00s)\n        tmpidhyfdk0_test.go:62: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073498
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n%2 == 0 {\n        return true\n\
    \    }\n    for i := 3; i <= n/2; i = i+2 {\n        if n%i == 0 {\n         \
    \   return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t\
    \ *testing.T) {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__0\
    \ (0.00s)\n        tmpyy7t65df_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Prime/test_num__5 (0.00s)\n        tmpyy7t65df_test.go:63:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073498
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    q :=\
    \ n\n\n    x := 2\n    for {\n        if q%x == 0 {\n            return false\n\
    \        }\n        q = q*x\n        x++\n    }\n}\n\nfunc TestIs_Prime(t *testing.T)\
    \ {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__1\
    \ (0.00s)\n        tmpjl9t_8i8_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__2 (0.00s)\n        tmpjl9t_8i8_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__3\
    \ (0.00s)\n        tmpjl9t_8i8_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__4 (0.00s)\n        tmpjl9t_8i8_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__7\
    \ (0.00s)\n        tmpjl9t_8i8_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__8 (0.00s)\n        tmpjl9t_8i8_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__9\
    \ (0.00s)\n        tmpjl9t_8i8_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073498
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    // The\
    \ only even prime is 2.\n    if n == 2 || n == 3 {\n        return true\n    }\n\
    \n    // All primes divisible by 3; that is, except 2 and 3.\n    if n % 3 ==\
    \ 0 {\n        return false\n    }\n\n    // All primes except 2 and 3.\n    for\
    \ i := 5; i < n; i++ {\n        if n % i == 0 {\n            return false\n  \
    \      }\n    }\n\n    // Test for primeness of 6 (divisible by 2).\n    if n\
    \ == 6 {\n        return true\n    }\n\n    // All primes except 6, and 6.\n \
    \   for i := 7; i < n; i++ {\n        if n % i == 0 {\n            return false\n\
    \        }\n    }\n\n    return true\n}\n*/\n\nfunc TestIs_Prime(t *testing.T)\
    \ {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvpuajh4i_test.go:55:1: expected declaration, found ''*''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073497
- exit_code: 2
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    // Base\
    \ Case: If the given number is 1 or -1, it is prime.\n    if n == 1 {\n      \
    \  return true\n    }\n\n    // If n is even, it is not.\n    if n % 2 == 0 {\n\
    \        return false\n    }\n\n    // If n is odd, it is prime.\n    var candidate\
    \ = 2*n - 1\n    for i := 3; i <= int(math.Log(candidate, 2)); i++ {\n       \
    \ if candidate % i == 0 {\n            return false\n        }\n    }\n\n    //\
    \ If n is prime, return true.\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T)\
    \ {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3w0f75qj_test.go:36:26: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073498
- exit_code: 2
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n <= 1 {\n        return true\n \
    \   }\n    if n == 2 {\n        return true\n    }\n    if n%2 == 0 {\n      \
    \  return false\n    }\n    var i int\n    if n <= 3 {\n        return true\n\
    \    }\n    i, _ = is_prime_test.next_prime(n)\n    if i == n {\n        return\
    \ true\n    }\n    return is_prime(i)\n}\n\nfunc TestIs_Prime(t *testing.T) {\n\
    \  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6), expected:\
    \ false },\n     { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprnshjcff_test.go:40:12: undefined: is_prime_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073498
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n%2\
    \ == 0 {\n        return false\n    }\n    divisor := 3\n    square := n\n\n \
    \   while true{\n        if square%divisor == 0 {\n            return false\n\
    \        }\n        divisor++\n        square = square/2 + 1\n    }\n    return\
    \ true\n}\n</code>\nThe code above is working perfectly, but if I try to implement\
    \ it using the \"prime\" package, it doesn't work. Here it is:\n<code>\npackage\
    \ main\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc TestIs_Prime(t *testing.T)\
    \ {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwsduvn0i_test.go:30:11: expected '';'', found true

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073498
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n<2\
    \ {\n        return false\n    }\n    if n<7 {\n        return n%2==0\n    }\n\
    \    if n<27 {\n        return (n%7==0)\n    }\n    if n<83 {\n        return\
    \ ((n%7==0)&&(n%5==0))\n    }\n    if n<8670 {\n        return ((n%7==0)&&(n%5==0)&&(n%3==0))\n\
    \    }\n    return false\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate\
    \ := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(6), expected: false },\n  \
    \   { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__0\
    \ (0.00s)\n        tmpt3jbog39_test.go:67: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Prime/test_num__1 (0.00s)\n        tmpt3jbog39_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__2\
    \ (0.00s)\n        tmpt3jbog39_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__3 (0.00s)\n        tmpt3jbog39_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__4\
    \ (0.00s)\n        tmpt3jbog39_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__5 (0.00s)\n        tmpt3jbog39_test.go:67:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Prime/test_num__7\
    \ (0.00s)\n        tmpt3jbog39_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__8 (0.00s)\n        tmpt3jbog39_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__9\
    \ (0.00s)\n        tmpt3jbog39_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073498
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    \n    var is_prime bool\n    \n    for i := 0; i < n; i++ {\n     \
    \   if n % i == 0 {\n            is_prime = false\n            break\n       \
    \ }\n    }\n    \n    return is_prime\n}\n\nfunc TestIs_Prime(t *testing.T) {\n\
    \  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6), expected:\
    \ false },\n     { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\npanic: runtime error: integer divide by\
    \ zero [recovered]\n\tpanic: runtime error: integer divide by zero\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x5038a0, 0x5f29a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5038a0, 0x5f29a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_prime(...)\n\t/tmp/tmpewc90dj9_test.go:34\n\
    command-line-arguments_test.TestIs_Prime(0x0?)\n\t/tmp/tmpewc90dj9_test.go:50\
    \ +0x599\ntesting.tRunner(0xc0001a01a0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073499
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    // if\
    \ n is 1, return true\n    if n == 1 {\n        return true\n    }\n    // if\
    \ n is even and hence not prime, return false\n    if n%2 == 0 {\n        return\
    \ false\n    }\n    // if n is odd and hence not prime, return true\n    // else\
    \ if n is odd and hence prime, return false\n    // else if n is prime and not\
    \ even, return false\n    // else if n is prime and even, return true\n    //\
    \ else return false (as n cannot be prime)\n    return ((n % 2 == 0 && n%4 ==\
    \ 0) || n%2 == 0 && n%8 == 0 || n%4 == 0 && n%8 == 0)\n}\n\nfunc TestIs_Prime(t\
    \ *testing.T) {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__1\
    \ (0.00s)\n        tmpxdddt3c7_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__2 (0.00s)\n        tmpxdddt3c7_test.go:65:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__3\
    \ (0.00s)\n        tmpxdddt3c7_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__4 (0.00s)\n        tmpxdddt3c7_test.go:65:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__6\
    \ (0.00s)\n        tmpxdddt3c7_test.go:65: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Prime/test_num__7 (0.00s)\n        tmpxdddt3c7_test.go:65:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__8\
    \ (0.00s)\n        tmpxdddt3c7_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__9 (0.00s)\n        tmpxdddt3c7_test.go:65:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073499
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    // TODO:\
    \ implement this function\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T)\
    \ {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__0\
    \ (0.00s)\n        tmpi_ad1_u2_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Prime/test_num__5 (0.00s)\n        tmpi_ad1_u2_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Prime/test_num__6\
    \ (0.00s)\n        tmpi_ad1_u2_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Prime/test_num__10 (0.00s)\n        tmpi_ad1_u2_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Prime/test_num__11\
    \ (0.00s)\n        tmpi_ad1_u2_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Prime/test_num__12 (0.00s)\n        tmpi_ad1_u2_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073499
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n % 2 == 0 {\n        return false\n    }\n    for i := 3; i < n;\
    \ i = i + 2 {\n        if n%i == 0 {\n            return false\n        }\n  \
    \  }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate :=\
    \ is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(6), expected: false },\n  \
    \   { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073499
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    // Check\
    \ and make sure n is a positive int\n    if n < 1 {\n        return false\n  \
    \  }\n\n    // Loop over all numbers from 2 to n-1\n    for i := 2; i <= n-1;\
    \ i++ {\n        // If n is divisible by i, return false\n        if n % i ==\
    \ 0 {\n            return false\n        }\n    }\n\n    // All numbers in 2..(n-1)\
    \ are prime\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate\
    \ := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(6), expected: false },\n  \
    \   { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__6\
    \ (0.00s)\n        tmpqs4nj3w2_test.go:66: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073499
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n\n    if n == 2 {\n        return true\n\
    \    }\n\n    last := n - 2\n    var prime bool\n    for i := 3; i <= last; i++\
    \ {\n        if n%i == 0 {\n            prime = false\n            break\n   \
    \     }\n    }\n    if prime {\n        return true\n    }\n\n    for i := 3;\
    \ i <= last/2; i++ {\n        if n%i == 0 {\n            return false\n      \
    \  }\n    }\n\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate\
    \ := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(6), expected: false },\n  \
    \   { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__0\
    \ (0.00s)\n        tmp4_grha9y_test.go:78: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Prime/test_num__5 (0.00s)\n        tmp4_grha9y_test.go:78:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073499
- exit_code: 2
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n\n    var i uint\n    if n == 1 {\n   \
    \     return true\n    }\n\n    for i = 3; i*i <= n; i += 2 {\n        if n %\
    \ i == 0 {\n            return false\n        }\n    }\n\n    return true\n}\n\
    \nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvuxsmfpo_test.go:33:23: invalid operation: i * i <= n (mismatched types
    uint and int)

    /tmp/tmpvuxsmfpo_test.go:34:12: invalid operation: n % i (mismatched types int
    and uint)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073499
- exit_code: 2
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    var n\
    \ int\n    fmt.Println(\"n is\", n)\n    if n%2 == 0 {\n        return false\n\
    \    }\n    var counter int\n    var count int\n    for counter = n / 2 - 2; counter\
    \ >= 1; counter -= 2 {\n        count++\n        if counter == 1 {\n         \
    \   break\n        }\n    }\n    if counter == 1 {\n        return true\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return\
    \ true\n    }\n    if n%100 > 0 {\n        return false\n    }\n    if n%100 <\
    \ 2 {\n        return false\n    }\n    if n % 100 == 0 {\n        return false\n\
    \    }\n    for counter = 2; counter <= int(n/divisor); counter++ {\n        if\
    \ n%d == 0 {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp108j13jr_test.go:24:9:\
    \ n redeclared in this block\n\t/tmp/tmp108j13jr_test.go:23:15: other declaration\
    \ of n\n/tmp/tmp108j13jr_test.go:55:39: undefined: divisor\n/tmp/tmp108j13jr_test.go:56:14:\
    \ undefined: d\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073499
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    var x\
    \ bool\n    if n < 2 {\n        x = true\n    } else {\n        for i := 2; i\
    \ < n; i++ {\n            if n%i == 0 {\n                x = false\n         \
    \       break\n            }\n        }\n    }\n    return x\n}\n\nfunc TestIs_Prime(t\
    \ *testing.T) {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__1\
    \ (0.00s)\n        tmp1wbncaa6_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__2 (0.00s)\n        tmp1wbncaa6_test.go:63:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__3\
    \ (0.00s)\n        tmp1wbncaa6_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__4 (0.00s)\n        tmp1wbncaa6_test.go:63:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__6\
    \ (0.00s)\n        tmp1wbncaa6_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Prime/test_num__7 (0.00s)\n        tmp1wbncaa6_test.go:63:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__8\
    \ (0.00s)\n        tmp1wbncaa6_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__9 (0.00s)\n        tmp1wbncaa6_test.go:63:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073499
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 1 {\n        return false\n    }\n\n    m := n\n    for i := 2; i <= m; i++\
    \ {\n        if n % i == 0 {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(101), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(13441), expected: true },\n     { actual:\
    \ candidate(61), expected: true },\n     { actual: candidate(4), expected: false\
    \ },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__1\
    \ (0.00s)\n        tmpf0x8sccu_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__2 (0.00s)\n        tmpf0x8sccu_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__3\
    \ (0.00s)\n        tmpf0x8sccu_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__4 (0.00s)\n        tmpf0x8sccu_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__7\
    \ (0.00s)\n        tmpf0x8sccu_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__8 (0.00s)\n        tmpf0x8sccu_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__9\
    \ (0.00s)\n        tmpf0x8sccu_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073499
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    // http://en.wikipedia.org/wiki/Primality_test\n\
    \    // If n is even then it is not prime\n    if n%2 == 0 {\n        return false\n\
    \    }\n\n    // if n is divisible by any number other than 2, then it is not\
    \ prime\n    var i = 3\n    while i*i < n {\n        if n%i == 0 {\n         \
    \   return false\n        }\n        i = i + 2\n    }\n\n    return true\n}\n\n\
    func TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmprsdikypv_test.go:32:11: expected '';'', found i

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073498
- exit_code: 2
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n%2\
    \ == 0 {\n        return false\n    }\n    for i := 3; i <= int(sqrt(n)); i++\
    \ {\n        if n%i == 0 {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(6), expected: false },\n     { actual:\
    \ candidate(101), expected: true },\n     { actual: candidate(11), expected: true\
    \ },\n     { actual: candidate(13441), expected: true },\n     { actual: candidate(61),\
    \ expected: true },\n     { actual: candidate(4), expected: false },\n     { actual:\
    \ candidate(1), expected: false },\n     { actual: candidate(5), expected: true\
    \ },\n     { actual: candidate(11), expected: true },\n     { actual: candidate(17),\
    \ expected: true },\n     { actual: candidate(85), expected: false },\n     {\
    \ actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4bsctta__test.go:27:26: undefined: sqrt

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073499
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 0 {\n        return true\n    }\n    if n%2 == 0 {\n        return is_prime(n/2)\n\
    \    }\n    if n%3 == 0 {\n        return is_prime(n/3)\n    }\n    for i := 4;\
    \ i <= n/3; i++ {\n        if n%i == 0 {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate :=\
    \ is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(6), expected: false },\n  \
    \   { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__0\
    \ (0.00s)\n        tmp1qr_fhtw_test.go:66: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Prime/test_num__5 (0.00s)\n        tmp1qr_fhtw_test.go:66:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Prime/test_num__6\
    \ (0.00s)\n        tmp1qr_fhtw_test.go:66: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073500
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 2 {\n        return true\n    }\n    if n == 1 {\n        return false\n\
    \    }\n    if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n   \
    \     return false\n    }\n    if n == 3 {\n        return true\n    }\n    for\
    \ i := 4; i <= n/2; i++ {\n        if n%i == 0 {\n            return false\n \
    \       }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate\
    \ := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(6), expected: false },\n  \
    \   { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__6\
    \ (0.00s)\n        tmp1kjjk7rv_test.go:72: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073500
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    // Base\
    \ case for when n is 1 or 2.\n    if n == 1 || n == 2 {\n        return true\n\
    \    }\n\n    // Check for small numbers.\n    if n < 2 {\n        return false\n\
    \    }\n\n    // For numbers in the range [2, n/2], the for loop will terminate.\n\
    \    for i := 2; i < n/2; i++ {\n        if n % i == 0 {\n            return false\n\
    \        }\n    }\n\n    // If the loop terminated without returning false, then\
    \ n is prime.\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate\
    \ := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(6), expected: false },\n  \
    \   { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__5\
    \ (0.00s)\n        tmpvgw0yvv2_test.go:70: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Prime/test_num__6 (0.00s)\n        tmpvgw0yvv2_test.go:70:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073500
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n    prime := true\n    for i := 2; i <=\
    \ n/2; i++ {\n        if n%i == 0 {\n            prime = false\n            break\n\
    \        }\n    }\n    return prime\n}\n\nfunc TestIs_Prime(t *testing.T) {\n\
    \  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6), expected:\
    \ false },\n     { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073500
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    n -=\
    \ 1\n\n    if n == 0 || n%2 == 0 {\n        return false\n    }\n\n    n /= 2\n\
    \n    for i := 3; i < n; i += 2 {\n        if n%i == 0 {\n            return false\n\
    \        }\n    }\n\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n\
    \  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6), expected:\
    \ false },\n     { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__0\
    \ (0.00s)\n        tmpfjw7oivg_test.go:66: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Prime/test_num__1 (0.00s)\n        tmpfjw7oivg_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__2\
    \ (0.00s)\n        tmpfjw7oivg_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__3 (0.00s)\n        tmpfjw7oivg_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__4\
    \ (0.00s)\n        tmpfjw7oivg_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__5 (0.00s)\n        tmpfjw7oivg_test.go:66:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Prime/test_num__7\
    \ (0.00s)\n        tmpfjw7oivg_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__8 (0.00s)\n        tmpfjw7oivg_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__9\
    \ (0.00s)\n        tmpfjw7oivg_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073500
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 1 {\n        return true\n \
    \   }\n    for i := 2; i <= n; i++ {\n        if n % i == 0 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T)\
    \ {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__1\
    \ (0.00s)\n        tmpcoy8_qo6_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__2 (0.00s)\n        tmpcoy8_qo6_test.go:63:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__3\
    \ (0.00s)\n        tmpcoy8_qo6_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__4 (0.00s)\n        tmpcoy8_qo6_test.go:63:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__7\
    \ (0.00s)\n        tmpcoy8_qo6_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__8 (0.00s)\n        tmpcoy8_qo6_test.go:63:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__9\
    \ (0.00s)\n        tmpcoy8_qo6_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073500
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    // Trial\
    \ division algorithm\n    for n != 1 {\n        if n == 0 {\n            return\
    \ false\n        }\n        if n%2 != 0 {\n            return false\n        }\n\
    \        n /= 2\n    }\n    return true\n}\n</code>\n<|/ a dscore=4 tags=algorithm,primes,go\
    \ |>\n<| c |>\nIn Go, this will loop forever if n is not a power of two.\n<|/\
    \ c |>\n<| a dscore=4 |>\nHere is a simple recursive function that checks if a\
    \ number is prime:\n<code>\npackage main\n\nimport (\n    \"fmt\"\n)\n\nfunc TestIs_Prime(t\
    \ *testing.T) {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp62zps1bq_test.go:36:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073499
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    x := n\n    if n % 2 == 0 {\n      \
    \  while x != 1 {\n            if x % 2 == 0 {\n                return false\n\
    \            }\n            x /= 2\n        }\n        return true\n    }\n  \
    \  for i = 3; i*i <= n; i += 2 {\n        if n%i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n \
    \ candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6), expected:\
    \ false },\n     { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpsvoblvge_test.go:29:15: expected '';'', found x

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073500
- exit_code: 2
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n\n    for i := 3; i < n; i++ {\n       \
    \ if n%d == 0 {\n            return false\n        }\n    }\n\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_k9rgawu_test.go:29:14: undefined: d

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073500
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n%2 == 0 {\n        return false\n\
    \    }\n    d := 3\n    for ; d*d <= n; d += 2 {\n        if n%d == 0 {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t\
    \ *testing.T) {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073500
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n\n    if n%2 == 0 {\n        return true\n\
    \    }\n\n    for i := 3; i <= n/2; i++ {\n        if n%i==0 {\n            return\
    \ false\n        }\n    }\n\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T)\
    \ {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__0\
    \ (0.00s)\n        tmps5xsvg7h_test.go:66: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Prime/test_num__5 (0.00s)\n        tmps5xsvg7h_test.go:66:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073500
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    var count int\n    for i := 0; i < n;\
    \ i++ {\n        if n % i == 0 {\n            count = count + 1\n        }\n \
    \   }\n    return count == 1\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate\
    \ := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(6), expected: false },\n  \
    \   { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\npanic: runtime error: integer divide by\
    \ zero [recovered]\n\tpanic: runtime error: integer divide by zero\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x5038a0, 0x5f29a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5038a0, 0x5f29a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_prime(...)\n\t/tmp/tmpy3h_utfj_test.go:29\n\
    command-line-arguments_test.TestIs_Prime(0x0?)\n\t/tmp/tmpy3h_utfj_test.go:43\
    \ +0x74a\ntesting.tRunner(0xc0001a0340, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073501
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n%2\
    \ == 0 {\n        for i := 3; i <= n/2; i++ {\n            if n%i == 0:\n    \
    \            return false\n            }\n        }\n        return true\n   \
    \ }\n    return false\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate :=\
    \ is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(6), expected: false },\n  \
    \   { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpxkh77fqx_test.go:26:24: illegal label declaration

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073500
- exit_code: 2
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n    if n <= 3 {\n        return true\n\
    \    }\n\n    if n % 2 == 0 {\n        return false\n    }\n\n    for i := 3;\
    \ i <= int(sqrt(n)); i += 2 {\n        if n % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n \
    \ candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6), expected:\
    \ false },\n     { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk59_75yd_test.go:35:26: undefined: sqrt

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073500
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n%i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073496
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    // https://en.wikipedia.org/wiki/Primality_test\n\
    \    \n    if n < 2 {\n        return false\n    }\n    \n    // Check for even\
    \ numbers (other than 2 and 3), since these are prime numbers.\n    if n % 2 ==\
    \ 0 || n % 3 == 0 {\n        return false\n    }\n    \n    for i := 4; i <= (n-1);\
    \ i += 2 {\n        if n % i == 0 {\n            return false\n        }\n   \
    \ }\n    \n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate\
    \ := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(6), expected: false },\n  \
    \   { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__10\
    \ (0.00s)\n        tmp22cozwy8_test.go:69: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Prime/test_num__11 (0.00s)\n        tmp22cozwy8_test.go:69:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Prime/test_num__12\
    \ (0.00s)\n        tmp22cozwy8_test.go:69: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073501
- exit_code: 2
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    m :=\
    \ primes[n]\n    if m == 0 {\n        m = pow(2, n)\n        primes[n] = m\n \
    \   }\n    for i := 0; i < m-1; i++ {\n        if n%i == 0 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T)\
    \ {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptounzhdn_test.go:24:10: undefined: primes

    /tmp/tmptounzhdn_test.go:26:13: undefined: pow

    /tmp/tmptounzhdn_test.go:27:9: undefined: primes

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073500
- exit_code: 2
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 1 {\n        return false\n    }\n\n    max := int(n ** 0.5)\n    if max\
    \ < 2 {\n        return true\n    }\n\n    for i := 2; i < max; i++ {\n      \
    \  if n % i == 0 {\n            return false\n        }\n    }\n\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq3pbi0du_test.go:28:21: invalid operation: cannot indirect 0.5 (untyped
    float constant)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073500
- exit_code: 2
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    // prime\
    \ sieve\n    prime := make([]bool, len(primes))\n\n    // init all to true\n \
    \   for i := range prime {\n        prime[i] = true\n    }\n\n    // mark non-primes\
    \ from 2 to n-1\n    for i := 2; i < n; i++ {\n        if prime[i] {\n       \
    \     for j := i + i; j < n; j += i {\n                prime[j] = false\n    \
    \        }\n        }\n    }\n\n    // check for prime\n    for i := n; i > 2;\
    \ i-- {\n        if prime[i] {\n            return false\n        }\n    }\n \
    \   return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(101), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(13441), expected: true },\n     { actual:\
    \ candidate(61), expected: true },\n     { actual: candidate(4), expected: false\
    \ },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp35kveg85_test.go:25:31: undefined: primes

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073501
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    for i\
    \ := 2; i <= n; i++ {\n        if n%i == 0 {\n            return false\n     \
    \   }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate\
    \ := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(6), expected: false },\n  \
    \   { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__1\
    \ (0.00s)\n        tmpzn3_ovmw_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__2 (0.00s)\n        tmpzn3_ovmw_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__3\
    \ (0.00s)\n        tmpzn3_ovmw_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__4 (0.00s)\n        tmpzn3_ovmw_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__6\
    \ (0.00s)\n        tmpzn3_ovmw_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Prime/test_num__7 (0.00s)\n        tmpzn3_ovmw_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__8\
    \ (0.00s)\n        tmpzn3_ovmw_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__9 (0.00s)\n        tmpzn3_ovmw_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073498
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    n -=\
    \ 1\n    if n < 2 {\n        return true\n    }\n    if n == 2 {\n        return\
    \ true\n    }\n\n    if m := n / 2; m != int(m) {\n        return is_prime(m)\n\
    \    }\n\n    return is_prime(n)\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate\
    \ := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(6), expected: false },\n  \
    \   { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.03s)\n    --- FAIL: TestIs_Prime/test_num__0\
    \ (0.00s)\n        tmpjj_udxjj_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Prime/test_num__5 (0.00s)\n        tmpjj_udxjj_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Prime/test_num__6\
    \ (0.00s)\n        tmpjj_udxjj_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Prime/test_num__10 (0.00s)\n        tmpjj_udxjj_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Prime/test_num__11\
    \ (0.00s)\n        tmpjj_udxjj_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Prime/test_num__12 (0.00s)\n        tmpjj_udxjj_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.032s\nFAIL\n"
  timestamp: 1660073501
- exit_code: 2
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    p :=\
    \ make([]bool, len(primes))\n    for i := range primes {\n        p[i] = i%n ==\
    \ 0\n    }\n\n    for i := range p {\n        if !p[i] {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n \
    \ candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6), expected:\
    \ false },\n     { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvqcw5im8_test.go:24:27: undefined: primes

    /tmp/tmpvqcw5im8_test.go:25:20: undefined: primes

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073501
- exit_code: 2
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 || n == 1 {\n        return false\n    }\n    if n == 2 || n == 3 {\n  \
    \      return true\n    }\n\n    for i := 4; i <= (sqrt(n) - 1); i += 2 {\n  \
    \      if n%i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2ma7caxv_test.go:31:23: undefined: sqrt

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073501
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    prime\
    \ := true\n    factor := 2\n\n    for n > 2 {\n        if n % factor == 0 {\n\
    \            prime = false\n            break\n        }\n        factor++\n \
    \   }\n\n    return prime\n}\n</code>\nThe output of this program was:\n<code>\n\
    $ go test is_prime_test.go\n--- PASS: is_prime (0.032s)\n    ./is_prime_test.go:10:\
    \ expected 2, got 1\nFAIL\nFAIL    github.com/shirousak/prime_number [build failed]\n\
    $ \n</code>\n<|/ a tags=algorithm,go,primes,math |>\n<| c |>\nThis is a very interesting\
    \ approach, thank you, +1. However, it seems to have a few problems: 1) It doesn't\
    \ take into account the fact that two factors aren't necessarily primes (which\
    \ was my original idea), and 2) It doesn't return False if the number is prime,\
    \ it returns True if it's divisible by any even number less than or equal to sqrt(n).\
    \ Also, it doesn't return False if the number is not divisible by any factor of\
    \ the form 2 or 3, which would be ideal. I'm going to try to find a solution from\
    \ here.\n<|/ c |>\n<| c |>\n, 1) I didn't consider the fact that factors of 2\
    \ aren't primes. 2) This was my mistake. I've corrected my answer. 3) I've updated\
    \ the code to return False if the number is not divisible by any factor of the\
    \ form 2 or 3.\n<|/ c |>\n<| c |>\n, I've added a version that returns false if\
    \ n is not a prime number.\n<|/ c |>\n<| a dscore=3 |>\nYou can use the Sieve\
    \ of Eratosthenes algorithm. Its time complexity is O(sqrt(n)), so if you need\
    \ a fast solution, then use this algorithm for prime numbers.\nYou can find an\
    \ implementation of this algorithm in Go in the following thread: Sieve of Eratosthenes\
    \ implementation in Golang\n<|/ a tags=algorithm,go,primes,math |>\n<| a dscore=3\
    \ tags=algorithm,go,primes,math |>\nThe answer to the original question is here:\
    \  \n<code>\npackage main\n\nimport \"fmt\"\n\nfunc TestIs_Prime(t *testing.T)\
    \ {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5uz1p_wn_test.go:37:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073501
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 || n%2 == 0 {\n        return false\n    }\n    for i := 3; i <= n/2; i++\
    \ {\n        if n%i == 0 {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(6), expected: false },\n     { actual:\
    \ candidate(101), expected: true },\n     { actual: candidate(11), expected: true\
    \ },\n     { actual: candidate(13441), expected: true },\n     { actual: candidate(61),\
    \ expected: true },\n     { actual: candidate(4), expected: false },\n     { actual:\
    \ candidate(1), expected: false },\n     { actual: candidate(5), expected: true\
    \ },\n     { actual: candidate(11), expected: true },\n     { actual: candidate(17),\
    \ expected: true },\n     { actual: candidate(85), expected: false },\n     {\
    \ actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073502
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n\n    for i := 2; i <= n/2; i++ {\n    \
    \    if n%i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073502
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 3 {\n        return true\n    }\n    count := 2\n    if count*count\
    \ > n {\n        return false\n    }\n    for i := 3; i < n; i++ {\n        if\
    \ n % i == 0 {\n            count += 2\n            if count == n {\n        \
    \        return true\n            }\n        }\n    }\n    return false\n}\n\n\
    func TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__1\
    \ (0.00s)\n        tmp95yjtnfm_test.go:73: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__2 (0.00s)\n        tmp95yjtnfm_test.go:73:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__3\
    \ (0.00s)\n        tmp95yjtnfm_test.go:73: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__4 (0.00s)\n        tmp95yjtnfm_test.go:73:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__7\
    \ (0.00s)\n        tmp95yjtnfm_test.go:73: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__8 (0.00s)\n        tmp95yjtnfm_test.go:73:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__9\
    \ (0.00s)\n        tmp95yjtnfm_test.go:73: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073502
- exit_code: 2
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    // Sieve\
    \ of Eratosthenes\n    prime := make([]bool, len(primes)+1)\n    for i := range\
    \ prime {\n        prime[i] = true\n    }\n\n    for i := 2; i <= n && prime[i];\
    \ i++ {\n        if i%2 == 0 {\n            prime[i] = false\n        }\n    \
    \    for j := i*i; j < n; j += i {\n            prime[j] = false\n        }\n\
    \    }\n\n    return prime[n]\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate\
    \ := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(6), expected: false },\n  \
    \   { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprcb37cpl_test.go:25:31: undefined: primes

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073501
- exit_code: 2
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n    if n%2 == 0 {\n        return false\n\
    \    }\n    for i := 3; i <= int(math.Sqrt(float64(n))); i += 2 {\n        if\
    \ n%i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp758a4m4t_test.go:30:26: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073501
- exit_code: 2
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    // Sieve\
    \ of Eratosthenes http://en.wikipedia.org/wiki/Sieve_of_Eratosthenes\n    s :=\
    \ make([]bool, len(primes))\n    for i := 0; i < len(primes); i++ {\n        //\
    \ If we find any number in the primes list, then it is prime already\n       \
    \ if s[i] == true {\n            continue\n        }\n\n        // If n is divisible\
    \ by any prime in primes list, then it is not prime\n        if n % primes[i]\
    \ == 0 {\n            return false\n        }\n\n        // Add the number to\
    \ the list of candidates to be tested.\n        // The candidate must be divisible\
    \ by all prime numbers before it in the list\n        for j := i + 1; j < len(primes);\
    \ j++ {\n            if n % primes[j] == 0 {\n                s[j] = true\n  \
    \              break\n            }\n        }\n    }\n    return true\n}\n\n\
    func TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi66yf5kp_test.go:25:27: undefined: primes

    /tmp/tmpi66yf5kp_test.go:26:25: undefined: primes

    /tmp/tmpi66yf5kp_test.go:33:16: undefined: primes

    /tmp/tmpi66yf5kp_test.go:39:33: undefined: primes

    /tmp/tmpi66yf5kp_test.go:40:20: undefined: primes

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073501
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 1 {\n        return false\n    }\n\n    if n == 1 {\n        return true\n\
    \    }\n\n    if n == 2 {\n        return true\n    }\n\n    for i := 2; i <=\
    \ n/2; i++ {\n        if n%i == 0 {\n            return false\n        }\n   \
    \ }\n\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate :=\
    \ is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(6), expected: false },\n  \
    \   { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__6\
    \ (0.00s)\n        tmp3mzk62se_test.go:70: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073502
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n%2 == 0 {\n        return false\n    }\n    var c int\n    for\
    \ c = 3; c*c <= n; c++ {\n        if n%c == 0 {\n            return false\n  \
    \      }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate\
    \ := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(6), expected: false },\n  \
    \   { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073502
- exit_code: 2
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    p :=\
    \ primes[:n]\n    var i int\n    for i = 0; i < n; i++ {\n        if p[i] == 0\
    \ {\n            p[i] = 2\n        }\n        for j := 1; j <= p[i]/2; j++ {\n\
    \            if p[i] % j == 0 {\n                p[i] = 0\n                break\n\
    \            }\n        }\n    }\n    return p[n] == 1\n}\n\nfunc TestIs_Prime(t\
    \ *testing.T) {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz45kdbcl_test.go:24:10: undefined: primes

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073502
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 1 {\n        return true\n    }\n\n    for i := 2; i <= n/2; i++ {\n    \
    \    if n%i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__6\
    \ (0.00s)\n        tmpq3_jq112_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073502
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    for i := 3; i <= n; i++ {\n        if n%i == 0 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T)\
    \ {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__1\
    \ (0.00s)\n        tmp91drwte4_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__2 (0.00s)\n        tmp91drwte4_test.go:63:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__3\
    \ (0.00s)\n        tmp91drwte4_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__4 (0.00s)\n        tmp91drwte4_test.go:63:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__7\
    \ (0.00s)\n        tmp91drwte4_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__8 (0.00s)\n        tmp91drwte4_test.go:63:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__9\
    \ (0.00s)\n        tmp91drwte4_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073502
- exit_code: 2
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n\n    // Divisors of 2, 3, 5, 7, and 11,\
    \ for which only even numbers are prime.\n    var (\n        divisor_2 = 3\n \
    \       divisor_3 = 3\n        divisor_5 = 3\n        divisor_7 = 3\n        divisor_11\
    \ = 3\n    )\n\n    // If a number is not divisible by any of these divisors,\
    \ it is not prime.\n    if !(n % divisor_2) {\n        return false\n    }\n \
    \   if !(n % divisor_3) {\n        return false\n    }\n    if !(n % divisor_5)\
    \ {\n        return false\n    }\n    if !(n % divisor_7) {\n        return false\n\
    \    }\n    if !(n % divisor_11) {\n        return false\n    }\n\n    for i :=\
    \ 7; i >= 5; i-- {\n        var (\n            divisor_2i = 2 * i\n          \
    \  divisor_3i = 3 * i\n            divisor_5i = (5 * i) + 4\n            divisor_7i\
    \ = (7 * i) + 3\n            divisor_11i = (11 * i) + 2\n        )\n\n       \
    \ // If a number is not divisible by any of these divisors, it is not prime.\n\
    \        if !(n % divisor_2i) {\n            return false\n        }\n       \
    \ if !(n % divisor_3i) {\n            return false\n        }\n        if !(n\
    \ % divisor_5i) {\n            return false\n        }\n        if !(n % divisor_7i)\
    \ {\n            return false\n        }\n        if !(n % divisor_11i) {\n  \
    \          return false\n        }\n    }\n\n    // If n is prime then it has\
    \ at least one divisor less than two.\n    // If n is divisible by 2, it has no\
    \ divisors less than two.\n    // If n is divisible by 3, it has no divisors less\
    \ than three.\n    // If n is divisible by 5, it has no divisors less than six.\n\
    \    // If n is divisible by 7, it has no divisors less than 10.\n    // If n\
    \ is divisible by 11, it has no divisors less than 13.\n    return true\n}\n\n\
    func TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp04yacj7a_test.go:38:9: invalid operation: operator ! not defined on (n
    % divisor_2) (value of type int)

    /tmp/tmp04yacj7a_test.go:41:9: invalid operation: operator ! not defined on (n
    % divisor_3) (value of type int)

    /tmp/tmp04yacj7a_test.go:44:9: invalid operation: operator ! not defined on (n
    % divisor_5) (value of type int)

    /tmp/tmp04yacj7a_test.go:47:9: invalid operation: operator ! not defined on (n
    % divisor_7) (value of type int)

    /tmp/tmp04yacj7a_test.go:50:9: invalid operation: operator ! not defined on (n
    % divisor_11) (value of type int)

    /tmp/tmp04yacj7a_test.go:64:13: invalid operation: operator ! not defined on (n
    % divisor_2i) (value of type int)

    /tmp/tmp04yacj7a_test.go:67:13: invalid operation: operator ! not defined on (n
    % divisor_3i) (value of type int)

    /tmp/tmp04yacj7a_test.go:70:13: invalid operation: operator ! not defined on (n
    % divisor_5i) (value of type int)

    /tmp/tmp04yacj7a_test.go:73:13: invalid operation: operator ! not defined on (n
    % divisor_7i) (value of type int)

    /tmp/tmp04yacj7a_test.go:76:13: invalid operation: operator ! not defined on (n
    % divisor_11i) (value of type int)

    /tmp/tmp04yacj7a_test.go:76:13: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073502
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    switch\
    \ {\n    case n < 2:\n        return false\n    case n == 1:\n        return true\n\
    \    }\n    \n    n -= 2\n    switch {\n    case n < 2:\n        return false\n\
    \    case n == 2:\n        return true\n    case n % 2 == 1:\n        return false\n\
    \    }\n    \n    i := 3\n    j := 2\n    for ; i <= n/3; i++ {\n        if n%i\
    \ == 0 {\n            return false\n        }\n    }\n    for ; j < i; j++ {\n\
    \        if n%j == 0 {\n            return false\n        }\n    }\n    return\
    \ true\n}\n</code>\n<|/ a tags=go |>\n<| a dscore=0 |>\nThis is a simple prime\
    \ test written in Go.\n<code>\npackage main\n\nimport (\n    \"fmt\"\n)\n\nfunc\
    \ TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbmmh14u6_test.go:55:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073501
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n\n    n -= 2\n\n    for i := 2; i <= n;\
    \ i++ {\n        if n%i == 0 {\n            return false\n        }\n    }\n\n\
    \    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(101), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(13441), expected: true },\n     { actual:\
    \ candidate(61), expected: true },\n     { actual: candidate(4), expected: false\
    \ },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__1\
    \ (0.00s)\n        tmpndyo5hab_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__2 (0.00s)\n        tmpndyo5hab_test.go:64:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__3\
    \ (0.00s)\n        tmpndyo5hab_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__4 (0.00s)\n        tmpndyo5hab_test.go:64:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__7\
    \ (0.00s)\n        tmpndyo5hab_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__8 (0.00s)\n        tmpndyo5hab_test.go:64:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__9\
    \ (0.00s)\n        tmpndyo5hab_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073502
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n%3 == 0 {\n        return false\n    }\n    if n%5 == 0 {\n   \
    \     return true\n    }\n    for i := 5; i <= n; i++ {\n        if n%i == 0 {\n\
    \            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t\
    \ *testing.T) {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__1\
    \ (0.00s)\n        tmp1q68b3eb_test.go:69: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__2 (0.00s)\n        tmp1q68b3eb_test.go:69:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__3\
    \ (0.00s)\n        tmp1q68b3eb_test.go:69: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__4 (0.00s)\n        tmp1q68b3eb_test.go:69:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__5\
    \ (0.00s)\n        tmp1q68b3eb_test.go:69: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Prime/test_num__8 (0.00s)\n        tmp1q68b3eb_test.go:69:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__9\
    \ (0.00s)\n        tmp1q68b3eb_test.go:69: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__10 (0.00s)\n        tmp1q68b3eb_test.go:69:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    p :=\
    \ 2\n    for i := 3; i <= n; i += 2 {\n        if n%i == 0 {\n            p =\
    \ false\n            break\n        }\n    }\n    return p\n}\n\nfunc TestIs_Prime(t\
    \ *testing.T) {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpe0phf381_test.go:27:17: cannot use false (untyped bool constant) as int
    value in assignment

    /tmp/tmpe0phf381_test.go:31:12: cannot use p (variable of type int) as type bool
    in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n\n    // All prime numbers are of the form\
    \ 6n+1 or 6n+1, so we\n    // only need to test odd numbers\n    if n%2 != 0 {\n\
    \        return false\n    }\n\n    // If n is a square number, then we only need\
    \ to check that\n    // there are an even number of factors.\n    if n == 1 {\n\
    \        return true\n    }\n\n    // If n is even, then we can just test against\
    \ the odd factors\n    // of n\n    if n%2 == 0 {\n        return is_prime_test.factors(n)\
    \ == [2]int{2, 1}\n    }\n\n    // If we reached this point, then n is not a prime\
    \ number\n\n    // If n is a prime, then there will be an odd number of factors,\n\
    \    // so  we can just return true\n    return is_prime_test.factors(n) == []int{1}\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpro8bsjt__test.go:43:16: undefined: is_prime_test

    /tmp/tmpro8bsjt__test.go:50:12: undefined: is_prime_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 1 {\n        return false\n    }\n    if n == 2 {\n        return true\n\
    \    }\n    if n%3 == 0 {\n        return false\n    }\n    i = 5\n    for i <=\
    \ n/3 {\n        if n%i == 0 {\n            return false\n        }\n        i\
    \ = i + 6\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate\
    \ := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(6), expected: false },\n  \
    \   { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_azvp7w5_test.go:33:5: undefined: i

    /tmp/tmp_azvp7w5_test.go:34:9: undefined: i

    /tmp/tmp_azvp7w5_test.go:35:14: undefined: i

    /tmp/tmp_azvp7w5_test.go:38:13: undefined: i

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return true\n    }\n    if n == 2 {\n        return true\n  \
    \  }\n    if n == 3 {\n        return true\n    }\n    for i := 3; i <= int(n/3);\
    \ i++ {\n        if n%i == 0 {\n            return false\n        }\n    }\n \
    \   return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(101), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(13441), expected: true },\n     { actual:\
    \ candidate(61), expected: true },\n     { actual: candidate(4), expected: false\
    \ },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__0\
    \ (0.00s)\n        tmpk7t8gfrq_test.go:66: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Prime/test_num__5 (0.00s)\n        tmpk7t8gfrq_test.go:66:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Prime/test_num__6\
    \ (0.00s)\n        tmpk7t8gfrq_test.go:66: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    // The\
    \ prime number theorem states that a number is prime if that\n    // number divides\
    \ two without leaving a remainder, other than 1 and itself.\n    // If that last\
    \ statement is true, then a number n is prime if n\n    // divides 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11, 12, 13, 14, or 15.\n    // If it isn't true, the number\
    \ is prime, otherwise, it isn't.\n    // Therefore, the only way to know if the\
    \ number n is prime is to try dividing it\n    // by all the numbers from 2 to\
    \ n.\n    // For every number, we check if it divides the number n. If it divides\
    \ n, we know\n    // that n is prime.\n    // We also know that n is prime if\
    \ none of the numbers less than n divide n.\n    // If none of them do, n isn't\
    \ prime.\n    // We also know that n is prime if all the numbers less than n divide\
    \ n.\n\n    // This function is just an example. It could be a prime number finder\n\
    \    // algorithm or something else.\n    if n < 2 {\n        return false\n \
    \   }\n\n    if n == 1 {\n        return true\n    }\n\n    if n > 1 {\n     \
    \   return is_prime_test(n - 1)\n    }\n\n    return false\n}\n\nfunc TestIs_Prime(t\
    \ *testing.T) {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpolf4cr80_test.go:48:16: undefined: is_prime_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 2
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n\n    var sieve = make([]bool,\
    \ sieveSize)\n    sieve[0] = true\n    sieve[1] = true\n    sieve[2] = true\n\n\
    \    for i := 3; i <= n; i++ {\n        if sieve[i] {\n            for j := i\
    \ * i; j < n; j += i {\n                sieve[j] = false\n            }\n    \
    \    }\n    }\n\n    return !sieve[n]\n}\n\nfunc TestIs_Prime(t *testing.T) {\n\
    \  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6), expected:\
    \ false },\n     { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp90wjtxwp_test.go:34:30: undefined: sieveSize

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n\n    for i := 2; i <= n; i++ {\n     \
    \   if n%i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__1\
    \ (0.00s)\n        tmpi3i5mzjx_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__2 (0.00s)\n        tmpi3i5mzjx_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__3\
    \ (0.00s)\n        tmpi3i5mzjx_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__4 (0.00s)\n        tmpi3i5mzjx_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__7\
    \ (0.00s)\n        tmpi3i5mzjx_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__8 (0.00s)\n        tmpi3i5mzjx_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__9\
    \ (0.00s)\n        tmpi3i5mzjx_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073504
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n\n    // Loop over the prime numbers starting\
    \ from 2.\n    // Prime numbers are odd numbers except for 2 and 3.\n    for i\
    \ := 2; i < n; i += 2 {\n        // If n is divisible by i, then n is not prime.\n\
    \        if i%n == 0 {\n            return false\n        }\n    }\n\n    // n\
    \ is prime. Return true.\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T)\
    \ {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__0\
    \ (0.00s)\n        tmp9i0lj40i_test.go:66: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Prime/test_num__5 (0.00s)\n        tmp9i0lj40i_test.go:66:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Prime/test_num__10\
    \ (0.00s)\n        tmp9i0lj40i_test.go:66: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Prime/test_num__11 (0.00s)\n        tmp9i0lj40i_test.go:66:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Prime/test_num__12\
    \ (0.00s)\n        tmp9i0lj40i_test.go:66: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073504
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n % 2 == 0 {\n        return false\n    }\n    // if number is evenly\
    \ divisible by 2, then it is not prime.\n    if n%2 == 0 {\n        return false\n\
    \    }\n    var candidateDivisors = make([]int, 0, 2)\n    candidateDivisors =\
    \ append(candidateDivisors, 2, 3)\n    // if number is evenly divisible by 3,\
    \ then it is not prime.\n    if n%3 == 0 {\n        return false\n    }\n    for\
    \ i := 4; i <= int(sqrt(n)); i++ {\n        // if i is odd, skip all even numbers.\n\
    \        if i%2 == 0 {\n            continue\n        }\n        // if number\
    \ is evenly divisible by i, then it is not prime.\n        if n%i == 0 {\n   \
    \         return false\n        }\n        // if i is odd, then we can skip all\
    \ odd numbers.\n        if i%2 == 1 {\n            continue\n        }\n     \
    \   // if number is evenly divisible by i, then it is not prime.\n        if n%i\
    \ == 0 {\n            return false\n        }\n        // if i is odd, then we\
    \ can skip all odd numbers.\n        if i%2 == 1 {\n            continue\n   \
    \     }\n        // if number is evenly divisible by i, then it is not prime.\n\
    \        if n%i == 0 {\n            return false\n        }\n        // if i is\
    \ odd, then we can skip all odd numbers.\n        if i%2 == 1 {\n            continue\n\
    \        }\n        // if number is evenly divisible by i, then it is not prime.\n\
    \        if n%i == 0 {\n            return false\n        }\n        // if i is\
    \ odd, then we can skip all odd numbers.\n        if i%2 == 1 {\n            continue\n\
    \        }\n        // if number is evenly divisible by i, then it is not prime.\n\
    \        if n%i == 0 {\n            return false\n        }\n        // if i is\
    \ odd, then we can skip all odd numbers.\n        if i%2 == 1 {\n            continue\n\
    \        }\n        // if number is evenly divisible by i, then it is not prime.\n\
    \        if n%i == 0 {\n            return false\n        }\n        // if i is\
    \ odd, then we can skip all odd numbers.\n        if i%2 == 1 {\n            continue\n\
    \        }\n        // if number is evenly divisible by i, then it is not prime.\n\
    \        if n%i == 0 {\n            return false\n        }\n        // if i is\
    \ odd, then we can skip all odd numbers.\n        if i%2 == 1 {\n            continue\n\
    \        }\n        // if number is evenly divisible by i, then it is not prime.\n\
    \        if n%i == 0 {\n            return false\n        }\n        // if i is\
    \ odd, then we can skip all odd numbers.\n        if i\nfunc TestIs_Prime(t *testing.T)\
    \ {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpatyo9cdj_test.go:110:6: expected ''('', found TestIs_Prime

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073503
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n <= 1 {\n        return true\n \
    \   }\n    if n <= 3 {\n        return n == 1 || n == 3\n    }\n    if n % 2 ==\
    \ 0 {\n        return false\n    }\n    if n % 3 == 0 {\n        return false\n\
    \    }\n\n    // Check odd and even numbers first\n    if n <= 5 {\n        return\
    \ n == 1 || n == 3\n    }\n    if n % 6 == 0 {\n        return false\n    }\n\n\
    \    // Check prime numbers starting with 6\n    if n <= 7 {\n        return n\
    \ == 1 || n == 3 || n == 5\n    }\n    if n % 12 == 0 {\n        return false\n\
    \    }\n\n    // Check prime numbers starting with 7\n    if n%13 == 0 {\n   \
    \     return false\n    }\n    if n%5 == 0 {\n        return false\n    }\n\n\
    \    // Check prime numbers starting with 8\n    if n%11 == 0 {\n        return\
    \ false\n    }\n    if n%7 == 0 {\n        return false\n    }\n\n    // Check\
    \ prime numbers starting with 9\n    if n%11 == 0 {\n        return false\n  \
    \  }\n    if n%11 == 0 {\n        return false\n    }\n    if n%11 == 0 {\n  \
    \      return false\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T)\
    \ {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__2\
    \ (0.00s)\n        tmp6_dkq7cb_test.go:110: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__7 (0.00s)\n        tmp6_dkq7cb_test.go:110:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__8\
    \ (0.00s)\n        tmp6_dkq7cb_test.go:110: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__12 (0.00s)\n        tmp6_dkq7cb_test.go:110:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073504
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return true\n    }\n    if n <= 1 {\n        return false\n \
    \   }\n    if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return\
    \ true\n    }\n\n    for i := 2; i < n; i += 1 {\n        if n % i == 0 {\n  \
    \          return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t\
    \ *testing.T) {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__6\
    \ (0.00s)\n        tmp4wwgke8o_test.go:70: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073504
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n\n    for i := 2; i < n; i++ {\n      \
    \  if n % i == 0 {\n            return false\n        }\n    }\n\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n%2\
    \ == 0 {\n        return false\n    }\n    for i := 3; i <= int(n/3); i++ {\n\
    \        if n%i == 0 {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(6), expected: false },\n     { actual:\
    \ candidate(101), expected: true },\n     { actual: candidate(11), expected: true\
    \ },\n     { actual: candidate(13441), expected: true },\n     { actual: candidate(61),\
    \ expected: true },\n     { actual: candidate(4), expected: false },\n     { actual:\
    \ candidate(1), expected: false },\n     { actual: candidate(5), expected: true\
    \ },\n     { actual: candidate(11), expected: true },\n     { actual: candidate(17),\
    \ expected: true },\n     { actual: candidate(85), expected: false },\n     {\
    \ actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__6\
    \ (0.00s)\n        tmp71lf88ep_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073504
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n%2\
    \ == 0 {\n        return true\n    }\n    for i := 3; i <= n/2; i = i*2 {\n  \
    \      if n%i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__0\
    \ (0.00s)\n        tmplv6sjx0__test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Prime/test_num__5 (0.00s)\n        tmplv6sjx0__test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Prime/test_num__6\
    \ (0.00s)\n        tmplv6sjx0__test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Prime/test_num__10 (0.00s)\n        tmplv6sjx0__test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Prime/test_num__11\
    \ (0.00s)\n        tmplv6sjx0__test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Prime/test_num__12 (0.00s)\n        tmplv6sjx0__test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073504
- exit_code: 2
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 0 {\n        return false\n    }\n    if n == 1 {\n        return true\n\
    \    }\n    if n % 2 == 0 {\n        return false\n    }\n    i := 3\n    for\
    \ j := 3; j <= intsqrt(n); j += 2 {\n        if n%j == 0 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T)\
    \ {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcp7yvm1a_test.go:33:5: i declared but not used

    /tmp/tmpcp7yvm1a_test.go:34:22: undefined: intsqrt

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073504
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 1 {\n        return true\n    }\n    if n == 2 || n == 3 {\n        return\
    \ true\n    }\n    if n%2 == 0 {\n        return false\n    }\n    if n%3 == 0\
    \ {\n        return false\n    }\n    i := 5\n    for ; i <= n/2; i += 2 {\n \
    \       if n%i == 0 {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(6), expected: false },\n     { actual:\
    \ candidate(101), expected: true },\n     { actual: candidate(11), expected: true\
    \ },\n     { actual: candidate(13441), expected: true },\n     { actual: candidate(61),\
    \ expected: true },\n     { actual: candidate(4), expected: false },\n     { actual:\
    \ candidate(1), expected: false },\n     { actual: candidate(5), expected: true\
    \ },\n     { actual: candidate(11), expected: true },\n     { actual: candidate(17),\
    \ expected: true },\n     { actual: candidate(85), expected: false },\n     {\
    \ actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__6\
    \ (0.00s)\n        tmpg4rxmlys_test.go:70: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073504
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n%2 == 0 {\n        return true\n\
    \    }\n    for i := 3; i < n/2; i++ {\n        if n%i == 0 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T)\
    \ {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__0\
    \ (0.00s)\n        tmpvcslgakx_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Prime/test_num__5 (0.00s)\n        tmpvcslgakx_test.go:63:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073504
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    s := (n-1)/2\n    for x := 2; x*x <= s; x++ {\n        if n%x == 0\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t\
    \ *testing.T) {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__0\
    \ (0.00s)\n        tmp4v7scnl9_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Prime/test_num__5 (0.00s)\n        tmp4v7scnl9_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Prime/test_num__11\
    \ (0.00s)\n        tmp4v7scnl9_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073504
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    // Trial\
    \ division algorithm to determine if a number is prime:\n    // \"The first ten\
    \ million prime numbers are 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, and 83, so they cannot be evenly divided by\
    \ any integer greater than 1.\"\n    // Source: http://en.wikipedia.org/wiki/Primality_test\n\
    \    num := n + 1\n    for num > 2 {\n        if n % num == 0 {\n            return\
    \ false\n        }\n        num /= 2\n    }\n    return true\n}\n\nfunc TestIs_Prime(t\
    \ *testing.T) {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__5\
    \ (0.00s)\n        tmpg8wcka94_test.go:62: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Prime/test_num__6 (0.00s)\n        tmpg8wcka94_test.go:62:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Prime/test_num__11\
    \ (0.00s)\n        tmpg8wcka94_test.go:62: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Prime/test_num__12 (0.00s)\n        tmpg8wcka94_test.go:62:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073504
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n%i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073491
- exit_code: 2
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    switch\
    \ {\n    case n <= 1:\n        return false\n    case n <= 3:\n        return\
    \ true\n    case n % 2 == 0 || n % 3 == 0 || n%5 == 0 || (n%7==0 && n%11 == 0):\n\
    \        return false\n    }\n    m := new(big.Int).Mod(n,100)\n    return m.Bit(8)\
    \ == 0\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(6), expected: false },\n     { actual:\
    \ candidate(101), expected: true },\n     { actual: candidate(11), expected: true\
    \ },\n     { actual: candidate(13441), expected: true },\n     { actual: candidate(61),\
    \ expected: true },\n     { actual: candidate(4), expected: false },\n     { actual:\
    \ candidate(1), expected: false },\n     { actual: candidate(5), expected: true\
    \ },\n     { actual: candidate(11), expected: true },\n     { actual: candidate(17),\
    \ expected: true },\n     { actual: candidate(85), expected: false },\n     {\
    \ actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpavwl9rvc_test.go:32:14: undefined: big

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073504
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    // https://en.wikipedia.org/wiki/Primality_test#Primality_of_a_number\n\
    \    if n < 2 || n%2 == 0 {\n        return false\n    }\n\n    d := 3\n\n   \
    \ for i := 3; i <= (n/d); i++ {\n        if n%i == 0 {\n            return false\n\
    \        }\n    }\n\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n\
    \  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6), expected:\
    \ false },\n     { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073504
- exit_code: 2
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    const\
    \ (\n        primes    = []int{2, 3, 5, 7, 11, 13, 17, 19}\n        odd_primes\
    \ = []int{1, 3, 7, 9, 11, 13}\n    )\n\n    for _, prime := range primes {\n \
    \       if n % prime == 0 {\n            return true\n        }\n    }\n\n   \
    \ for _, odd_prime := range odd_primes {\n        if n % odd_prime == 0 {\n  \
    \          return false\n        }\n    }\n    return n == 1\n}\n\nfunc TestIs_Prime(t\
    \ *testing.T) {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpf5m0g9tq_test.go:25:21:\
    \ []int{\u2026} (value of type []int) is not constant\n/tmp/tmpf5m0g9tq_test.go:26:22:\
    \ []int{\u2026} (value of type []int) is not constant\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073504
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n%2\
    \ == 0 {\n        return false\n    }\n\n    for i := 3; i <= n/2; i++ {\n   \
    \     if n%i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__6\
    \ (0.00s)\n        tmpwiw0f7ul_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073505
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n    // Check only even numbers.\n    if\
    \ n % 2 == 0 {\n        return is_prime(n - 2)\n    }\n\n    // Check only odd\
    \ numbers if n is even.\n    if n % 2 == 1 {\n        return is_prime(n - 3)\n\
    \    }\n\n    // Check only prime numbers if n is odd and even.\n    return is_prime(n\
    \ - 1)\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(6), expected: false },\n     { actual:\
    \ candidate(101), expected: true },\n     { actual: candidate(11), expected: true\
    \ },\n     { actual: candidate(13441), expected: true },\n     { actual: candidate(61),\
    \ expected: true },\n     { actual: candidate(4), expected: false },\n     { actual:\
    \ candidate(1), expected: false },\n     { actual: candidate(5), expected: true\
    \ },\n     { actual: candidate(11), expected: true },\n     { actual: candidate(17),\
    \ expected: true },\n     { actual: candidate(85), expected: false },\n     {\
    \ actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.01s)\n    --- FAIL: TestIs_Prime/test_num__1\
    \ (0.00s)\n        tmppfn14fef_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__2 (0.00s)\n        tmppfn14fef_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__3\
    \ (0.00s)\n        tmppfn14fef_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__4 (0.00s)\n        tmppfn14fef_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__7\
    \ (0.00s)\n        tmppfn14fef_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__8 (0.00s)\n        tmppfn14fef_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__9\
    \ (0.00s)\n        tmppfn14fef_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.017s\nFAIL\n"
  timestamp: 1660073505
- exit_code: 2
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n%2\
    \ == 0 {\n        for i := 3; i <= int(math.Sqrt(float64(n))); i++ {\n       \
    \     if n%i == 0 {\n                return false\n            }\n        }\n\
    \    } else {\n        for i := 3; i <= int(math.Sqrt(float64(n))); i++ {\n  \
    \          if n%i == 0 {\n                return true\n            }\n       \
    \ }\n    }\n    return false\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate\
    \ := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(6), expected: false },\n  \
    \   { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbgr62x3v_test.go:25:30: undefined: math

    /tmp/tmpbgr62x3v_test.go:31:30: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073504
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    // Sieve of Eratosthenes\n    sievePrimes\
    \ := make([]bool, 1<<(n-1))\n    for i := 2; i < int(n); i++ {\n        if sievePrimes[i]\
    \ {\n            continue\n        }\n        sievePrimes[i / 2] = true\n    \
    \    for j := i*i; j < int(n); j += i {\n            sievePrimes[j] = false\n\
    \        }\n    }\n    return sievePrimes[n-1]\n}\n\nfunc TestIs_Prime(t *testing.T)\
    \ {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\npanic: runtime error: index out of range\
    \ [2] with length 0 [recovered]\n\tpanic: runtime error: index out of range [2]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_prime(...)\n\t/tmp/tmpsh_ek0su_test.go:30\n\
    command-line-arguments_test.TestIs_Prime(0x0?)\n\t/tmp/tmpsh_ek0su_test.go:49\
    \ +0xb5\ntesting.tRunner(0xc0001a0340, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073505
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 1 {\n        return false\n    }\n    if n == 2 {\n        return true\n\
    \    }\n    if n%2 == 0 {\n        return false\n    }\n    for i := 3; i < n/2;\
    \ i++ {\n        if n%i == 0 {\n            return false\n        }\n    }\n \
    \   return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(101), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(13441), expected: true },\n     { actual:\
    \ candidate(61), expected: true },\n     { actual: candidate(4), expected: false\
    \ },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073505
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n%2 == 0 {\n        return true\n\
    \    }\n    for i := 3; i < n; i += 2 {\n        if n%i == 0 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T)\
    \ {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__0\
    \ (0.00s)\n        tmpdzzbovq2_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Prime/test_num__5 (0.00s)\n        tmpdzzbovq2_test.go:63:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073505
- exit_code: 2
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    var i,\
    \ primes bool\n\n    if n < 1 {\n        return false\n    }\n\n    primes = true\n\
    \n    for i = 2; i < n; i++ {\n        if n%i == 0 {\n            primes = false\n\
    \            break\n        }\n    }\n\n    return primes\n}\n\nfunc TestIs_Prime(t\
    \ *testing.T) {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprsqald4q_test.go:32:13: cannot use 2 (untyped int constant) as bool value
    in assignment

    /tmp/tmprsqald4q_test.go:32:20: invalid operation: i < n (mismatched types bool
    and int)

    /tmp/tmprsqald4q_test.go:32:23: invalid operation: i++ (non-numeric type bool)

    /tmp/tmprsqald4q_test.go:33:12: invalid operation: n % i (mismatched types int
    and bool)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073505
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    // Okay,\
    \ I hear you like loops, so here they are!\n    for i := 2; i <= n/2; i++ {\n\
    \        if n%i == 0 {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(6), expected: false },\n     { actual:\
    \ candidate(101), expected: true },\n     { actual: candidate(11), expected: true\
    \ },\n     { actual: candidate(13441), expected: true },\n     { actual: candidate(61),\
    \ expected: true },\n     { actual: candidate(4), expected: false },\n     { actual:\
    \ candidate(1), expected: false },\n     { actual: candidate(5), expected: true\
    \ },\n     { actual: candidate(11), expected: true },\n     { actual: candidate(17),\
    \ expected: true },\n     { actual: candidate(85), expected: false },\n     {\
    \ actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__6\
    \ (0.00s)\n        tmph9cyzb4t_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073505
- exit_code: 2
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    s := n\n    for i := 1; i <= int(math.Sqrt(float64(n)));\
    \ i++ {\n        if s == 0 {\n            return false\n        }\n        if\
    \ n % i == 0 {\n            return false\n        }\n        if s > n/i {\n  \
    \          return false\n        }\n        if s >= 2 {\n            return true\n\
    \        }\n        s /= i\n    }\n    return false\n}\n\nfunc TestIs_Prime(t\
    \ *testing.T) {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdrd5afz5_test.go:28:26: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073505
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n\n    d := 1\n    for i := 2; i < n; i++\
    \ {\n        if n%d == 0 {\n            return false\n        }\n        d = d*d\
    \ + 1\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate\
    \ := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(6), expected: false },\n  \
    \   { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__1\
    \ (0.00s)\n        tmp8c__bd11_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__2 (0.00s)\n        tmp8c__bd11_test.go:63:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__3\
    \ (0.00s)\n        tmp8c__bd11_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__4 (0.00s)\n        tmp8c__bd11_test.go:63:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__7\
    \ (0.00s)\n        tmp8c__bd11_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__8 (0.00s)\n        tmp8c__bd11_test.go:63:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__9\
    \ (0.00s)\n        tmp8c__bd11_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073505
- exit_code: 2
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n\n    // Only loop to odd numbers greater\
    \ than 2.\n    for n >= 2 && n % 2 == 0 {\n        n = n / 2\n    }\n\n    for\
    \ n >= 2 && n % 2 == 0 {\n        n = n / 2\n    }\n\n    // Only loop to prime\
    \ numbers greater than 2.\n    for n >= 2 {\n        if n == 1 {\n           \
    \ return true\n        }\n\n        // Check divisibility by all prime numbers\
    \ up to sqrt(n).\n        for i := 2; i <= int(sqrt(n)); i++ {\n            if\
    \ n % i == 0 {\n                return false\n            }\n        }\n    }\n\
    \n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(101), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(13441), expected: true },\n     { actual:\
    \ candidate(61), expected: true },\n     { actual: candidate(4), expected: false\
    \ },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmkikc72e_test.go:44:30: undefined: sqrt

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073505
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    // Check\
    \ up to sqrt of n.\n    if n < 2 {\n        return true\n    }\n    if n <= 3\
    \ {\n        return n == 1\n    }\n\n    // Check all the even numbers up to sqrt\
    \ of n.\n    for i := 2; i <= n/2; i++ {\n        if n % i == 0 {\n          \
    \  return false\n        }\n    }\n    \n    return true\n}\n\nfunc TestIs_Prime(t\
    \ *testing.T) {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__6\
    \ (0.00s)\n        tmpj0buk6p5_test.go:67: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073506
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n    if n == 2 {\n        return true\n\
    \    }\n    if n % 2 == 0 {\n        return false\n    }\n    for i := 3; i <=\
    \ n; i = i + 2 {\n        if n % i == 0 {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate :=\
    \ is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(6), expected: false },\n  \
    \   { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__1\
    \ (0.00s)\n        tmphtm2ef0j_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__2 (0.00s)\n        tmphtm2ef0j_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__3\
    \ (0.00s)\n        tmphtm2ef0j_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__4 (0.00s)\n        tmphtm2ef0j_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__7\
    \ (0.00s)\n        tmphtm2ef0j_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__8 (0.00s)\n        tmphtm2ef0j_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__9\
    \ (0.00s)\n        tmphtm2ef0j_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073506
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n<2\
    \ {\n        return false\n    }\n    for i:=2; i<n; i++ {\n        if n%i==0\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t\
    \ *testing.T) {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073506
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 1 {\n        return true\n    }\n    if n <= 1 {\n        return false\n\
    \    }\n    for i := 2; i < n; i++ {\n        if n%i == 0 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T)\
    \ {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__6\
    \ (0.00s)\n        tmp4kqkwx1d_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073506
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    switch\
    \ n%4 {\n    case 1:\n        return false\n    case 2:\n        return true\n\
    \    case 3:\n        return n == 1\n    case 4:\n        return n == 2\n    default:\n\
    \        return is_prime(n - 3)\n    }\n}\n\nfunc TestIs_Prime(t *testing.T) {\n\
    \  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6), expected:\
    \ false },\n     { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__0\
    \ (0.00s)\n        tmpwmnzsred_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Prime/test_num__1 (0.00s)\n        tmpwmnzsred_test.go:63:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__2\
    \ (0.00s)\n        tmpwmnzsred_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__3 (0.00s)\n        tmpwmnzsred_test.go:63:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__4\
    \ (0.00s)\n        tmpwmnzsred_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__7 (0.00s)\n        tmpwmnzsred_test.go:63:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__8\
    \ (0.00s)\n        tmpwmnzsred_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__9 (0.00s)\n        tmpwmnzsred_test.go:63:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073506
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 || n == 3 {\n        return\
    \ true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if n % 3\
    \ == 0 {\n        return false\n    }\n\n    for i := 5; i * i <= n; i += 6 {\n\
    \        if n%i == 0 || n % (i + 2) == 0 {\n            return false\n       \
    \ }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate\
    \ := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(6), expected: false },\n  \
    \   { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073506
- exit_code: 2
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n\n    p := make([]int, n+1)\n\n    if n%2\
    \ == 0 {\n        return true\n    }\n\n    p[0] = true\n\n    for i := 1; i <=\
    \ n; i++ {\n        if p[i] == true {\n            p[i*2] = false\n        }\n\
    \n        if p[i/2] == true {\n            p[(i/2)*2] = false\n        }\n   \
    \ }\n\n    return p[n/2]\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate\
    \ := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(6), expected: false },\n  \
    \   { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqmepx_2m_test.go:34:12: cannot use true (untyped bool constant) as int
    value in assignment

    /tmp/tmpqmepx_2m_test.go:37:20: invalid operation: p[i] == true (mismatched types
    int and untyped bool)

    /tmp/tmpqmepx_2m_test.go:38:22: cannot use false (untyped bool constant) as int
    value in assignment

    /tmp/tmpqmepx_2m_test.go:41:22: invalid operation: p[i / 2] == true (mismatched
    types int and untyped bool)

    /tmp/tmpqmepx_2m_test.go:42:26: cannot use false (untyped bool constant) as int
    value in assignment

    /tmp/tmpqmepx_2m_test.go:46:12: cannot use p[n / 2] (variable of type int) as
    type bool in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073506
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n%2 == 0 {\n        return n == 2\n\
    \    }\n    if n%3 == 0 {\n        return n == 3 || n == 7\n    }\n    // If n\
    \ is evenly divisible by 2 or 3, then it's prime by definition.\n    // All numbers\
    \ with an even number of factors are prime.\n    for i := 4; i <= n/2; i++ {\n\
    \        if n%i == 0 {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(6), expected: false },\n     { actual:\
    \ candidate(101), expected: true },\n     { actual: candidate(11), expected: true\
    \ },\n     { actual: candidate(13441), expected: true },\n     { actual: candidate(61),\
    \ expected: true },\n     { actual: candidate(4), expected: false },\n     { actual:\
    \ candidate(1), expected: false },\n     { actual: candidate(5), expected: true\
    \ },\n     { actual: candidate(11), expected: true },\n     { actual: candidate(17),\
    \ expected: true },\n     { actual: candidate(85), expected: false },\n     {\
    \ actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073506
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    for i\
    \ := 2; i < n; i++ {\n        if n%i == 0 {\n            return false\n      \
    \  }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate\
    \ := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(6), expected: false },\n  \
    \   { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__6\
    \ (0.00s)\n        tmp1yyqvmcf_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073506
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    for i\
    \ := 2; i < n; i++ {\n        if n%i == 0 {\n            return false\n      \
    \  }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate\
    \ := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(6), expected: false },\n  \
    \   { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__6\
    \ (0.00s)\n        tmp1yyqvmcf_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073506
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n%2 == 0 {\n        return true\n\
    \    }\n    if n%3 == 0 {\n        return false\n    }\n    x := 3\n    y := 2\n\
    \    for y <= n-1 {\n        if n%y == 0 {\n            return false\n       \
    \ }\n        x += y\n        y += 2\n    }\n    return true\n}\n\nfunc TestIs_Prime(t\
    \ *testing.T) {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__0\
    \ (0.00s)\n        tmpurn0amw5_test.go:70: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Prime/test_num__5 (0.00s)\n        tmpurn0amw5_test.go:70:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Prime/test_num__10\
    \ (0.00s)\n        tmpurn0amw5_test.go:70: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Prime/test_num__11 (0.00s)\n        tmpurn0amw5_test.go:70:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Prime/test_num__12\
    \ (0.00s)\n        tmpurn0amw5_test.go:70: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073506
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 0 || n == 1 {\n        return false\n    }\n\n    if n <= 3 {\n        return\
    \ true\n    }\n\n    for i := 2; i < n; i += 1 {\n        if n%i == 0 {\n    \
    \        return false\n        }\n    }\n\n    return true\n}\n\nfunc TestIs_Prime(t\
    \ *testing.T) {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073506
- exit_code: 2
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return true\n    }\n    sqrt_n := int(math.Sqrt(float64(n)))\n\
    \    divisor_count := int(math.Ceil(float64(sqrt_n) / float64(2)))\n    if divisor_count\
    \ < 2 {\n        return true\n    }\n    for i := 1; i <= divisor_count; i++ {\n\
    \        if n%i == 0 {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(6), expected: false },\n     { actual:\
    \ candidate(101), expected: true },\n     { actual: candidate(11), expected: true\
    \ },\n     { actual: candidate(13441), expected: true },\n     { actual: candidate(61),\
    \ expected: true },\n     { actual: candidate(4), expected: false },\n     { actual:\
    \ candidate(1), expected: false },\n     { actual: candidate(5), expected: true\
    \ },\n     { actual: candidate(11), expected: true },\n     { actual: candidate(17),\
    \ expected: true },\n     { actual: candidate(85), expected: false },\n     {\
    \ actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6882pq79_test.go:27:19: undefined: math

    /tmp/tmp6882pq79_test.go:28:26: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073506
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    // Sieve\
    \ of Eratosthenes\n    primes := make([]int, 0, n)\n    primes = append(primes,\
    \ 2)\n    for i := 3; i < n; i += 2 {\n        if primes[i] != 0 {\n         \
    \   continue\n        }\n        if i%2 == 0 {\n            continue\n       \
    \ }\n        if i*i > n {\n            return false\n        }\n        for j\
    \ := i * i; j < n; j += i {\n            primes = append(primes, j)\n        }\n\
    \    }\n    return true\n}\n</code>\nNow if you run this code you will get\n<code>\n\
    > go test -bench=.\nBenchmark_prime_sieve_golang/is_prime_test        0.002  \
    \  165040        1720 ns/op\nBenchmark_prime_sieve_golang/is_prime_test2   2.792\
    \    3330372        3159 ns/op\n</code>\nHere are some additional benchmarks,\
    \ I did them in Ubuntu 16.04 with go 1.7.1 (it could be different in other OS's\
    \ or with other Go version).\n<code>\n> go test -bench=.\nBenchmark_prime_sieve_golang/is_prime_test\
    \        0.494    130225        1325 ns/op\nBenchmark_prime_sieve_golang/is_prime_test2\
    \   1.696    5079612        5049 ns/op\n</code>\nHere are the benchmarks for your\
    \ code\n<code>\n> go test -bench=.\nBenchmark_prime_sieve_golang/is_prime_test\
    \        0.015    123769        1226 ns/op\nBenchmark_prime_sieve_golang/is_prime_test2\
    \   2.747    3946794        3944 ns/op\n</code>\nThe second benchmark has almost\
    \ no impact on performance (unless you use big numbers), that is why it can be\
    \ ignored.\n<|/ a |>\n<| c |>\nI see a very significant difference in running\
    \ times for `is_prime_test` and other solutions. `is_prime_test` takes around\
    \ 2.2 seconds to run on my machine and other solutions take around 0.3 seconds.\
    \ Do you see anything else that can be improved in `is_prime_test`?\n<|/ c |>\n\
    <| c |>\nDo you mean that `is_prime_test` is slower ? I thought you wanted to\
    \ make your code faster. Did you run the code on Windows ?\n<|/ c |>\n<| c |>\n\
    Yes, I meant that `is_prime_test` is s\nfunc TestIs_Prime(t *testing.T) {\n  candidate\
    \ := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(6), expected: false },\n  \
    \   { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1c18g1pr_test.go:43:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073506
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 1 || n == 2 {\n        return true\n    }\n\n    for i := 3; i <= n/2; i\
    \ += 2 {\n        if n%i == 0 {\n            return false\n        }\n    }\n\n\
    \    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(101), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(13441), expected: true },\n     { actual:\
    \ candidate(61), expected: true },\n     { actual: candidate(4), expected: false\
    \ },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__5\
    \ (0.00s)\n        tmpjlnyl3_0_test.go:62: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Prime/test_num__6 (0.00s)\n        tmpjlnyl3_0_test.go:62:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073506
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 3 {\n        return true\n    }\n    if n % 2 == 0 {\n    \
    \    return false\n    }\n    var j int\n    for j = 3; j <= n/2; j = j + 2 {\n\
    \        if n%j == 0 {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(6), expected: false },\n     { actual:\
    \ candidate(101), expected: true },\n     { actual: candidate(11), expected: true\
    \ },\n     { actual: candidate(13441), expected: true },\n     { actual: candidate(61),\
    \ expected: true },\n     { actual: candidate(4), expected: false },\n     { actual:\
    \ candidate(1), expected: false },\n     { actual: candidate(5), expected: true\
    \ },\n     { actual: candidate(11), expected: true },\n     { actual: candidate(17),\
    \ expected: true },\n     { actual: candidate(85), expected: false },\n     {\
    \ actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073506
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 1 {\n        return false\n    }\n    if n == 2 {\n        return true\n\
    \    }\n    if n < 2 {\n        return false\n    }\n\n    if n > 500 {\n    \
    \    return true\n    }\n\n    for i := 3; i < n; i += 2 {\n        if n % i ==\
    \ 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc\
    \ TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__5\
    \ (0.00s)\n        tmpwkr22f30_test.go:71: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Prime/test_num__12 (0.00s)\n        tmpwkr22f30_test.go:71:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073506
