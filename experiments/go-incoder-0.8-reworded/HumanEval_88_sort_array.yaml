name: HumanEval_88_sort_array
language: go_test.go
prompt: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
  // Given a list of non-negative integers, return a cogo of the given list after\
  \ sorting,\n// you will sort the given list in ascending order if the sum( first\
  \ index value, last index value) is odd,\n// or sort it in descending order if the\
  \ sum( first index value, last index value) is even.\n// Note:\n// * don't change\
  \ the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH list\n//\
  \ >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0, 1,\
  \ 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5, 6})\n\
  // []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n"
tests: "func TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
  \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests :=\
  \ []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
  \ candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
  \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
  \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
  \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
  \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
  \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
  \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\
  \tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
  \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\
  \t}\n}\n"
completions: ["    var sum int\n    for _, v := range array {\n        sum += v\n\
    \    }\n    switch sum%2 {\n    case 0:\n        sort.Ints(array)\n    case 1:\n\
    \        sort.Reverse(array)\n    }\n    return array\n}", "    \n    var ret\
    \ []int\n    for _, val := range array {\n        ret := append(ret, val)\n  \
    \  }\n    \n    var sum int\n    for _, val := range ret {\n        sum += val\n\
    \    }\n    \n    if sum%2 == 0 {\n        for i := 0; i < len(ret)/2; i++ {\n\
    \            var tmp = ret[i]\n            ret[i] = ret[len(ret)-1-i]\n      \
    \      ret[len(ret)-1-i] = tmp\n        }\n    } else {\n        for i := 0; i\
    \ < len(ret)/2; i++ {\n            var tmp = ret[len(ret)-1-i]\n            ret[len(ret)-1-i]\
    \ = ret[i]\n            ret[i] = tmp\n        }\n    }\n    \n    return ret\n\
    }", "    array := array[0 : len(array):len(array)]\n    sort := []int{}\n\n  \
    \  for _, value := range array {\n        sum += value\n    }\n    if sum%2 !=\
    \ 0 {\n        sort = append(sort, array[len(array) - 1]...)\n        sort = append(sort,\
    \ array[:len(array)-1]...)\n    } else {\n        sort = append(sort, array[len(array)\
    \ - 1]...)\n        sort = append(sort, array[:len(array)-1]...)\n    }\n    return\
    \ sort\n}\n", "    if len(array) < 2 {\n        return array\n    }\n    left,\
    \ right := 0, len(array)\n    temp, sum := 0, array[0]\n    for right < len(array)\
    \ {\n        if array[right] > sum {\n            temp = array[right]\n      \
    \      sum += array[right]\n            array[right] = temp\n        }\n     \
    \   left += 1\n        right += 1\n    }\n    return array[:left] + sort_array(array[:left])\
    \ + array[left:] + sort_array(array[left:])\n}\n", "    if len(array) <= 1 {\n\
    \        return array\n    }\n    sum := 0\n    for _, num := range array {\n\
    \        sum += num\n    }\n    if sum%2 == 0 {\n        return sort_array_desc(array)\n\
    \    } else {\n        return sort_array_asc(array)\n    }\n}\n", "    // code\
    \ here\n    sum := 0\n    for _, n := range array {\n        sum += n\n    }\n\
    \    sort.Ints(array)\n    if sum%2 != 0 {\n        sort.Sort(sort.Reverse(array))\n\
    \    } else {\n        sort.Sort(array)\n    }\n    return array\n}\n", "    length\
    \ := len(array)\n    if length == 0 {\n        return []int{}\n    }\n\n    //\
    \ Find the sum of the first and last elements.\n    var sum int\n    for i :=\
    \ 0; i < length; i++ {\n        sum += array[i]\n    }\n\n    // Sort the array\
    \ in ascending order.\n    if sum%2 != 0 {\n        for i := 0; i < length-1;\
    \ i++ {\n            for j := 0; j < length-i; j++ {\n                if array[j]\
    \ > array[j+1] {\n                    array[j], array[j+1] = array[j+1], array[j]\n\
    \                }\n            }\n        }\n    }\n\n    // Sort the array in\
    \ descending order.\n    if sum%2 == 0 {\n        for i := 0; i < length-1; i++\
    \ {\n            for j := 0; j < length-i; j++ {\n                if array[j]\
    \ > array[j+1] {\n                    array[j], array[j+1] = array[j+1], array[j]\n\
    \                }\n            }\n        }\n    }\n\n    return array\n}\n",
  "    // write code here\n    var total int = 0\n    for _, value := range array\
    \ {\n        total += value\n    }\n\n    if total % 2 == 1 {\n        for _,\
    \ value := range array {\n            array.remove(value)\n        }\n    }\n\
    \    return array\n}\n</code>\n<|/ a |>\n<| c |>\nYou should include your test\
    \ cases here, too.\n<|/ c |>\n<| c |>\nThis answer is terrible for most practical\
    \ uses, as it's not scalable and thus horribly inefficient.\n<|/ c |>\n<| c |>\n\
    the idea is to sort integers only, so why do you think it wouldn't work?\n<|/\
    \ c |>\n<| c |>\nI thought the idea was to sort integers only and return the list\
    \ sorted.\n<|/ c |>\n<| c |>\nthe question is \"sort the given list in ascending\
    \ order if the sum( first index value, last index value) is odd, or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\"\
    \ The above is just an example that explains the idea, not something that can\
    \ be used in practice. The OP should provide some real data that shows how his\
    \ real use case works.\n<|/ c |>\n<| a tags=algorithm,sorting,go |>\n<code>\n\
    package main\n\nimport (\n    \"testing\"\n    \"sort\"\n)\n", "    if len(array)\
    \ == 0 {\n        return array\n    }\n    sum := array[0]\n    index := 1\n \
    \   for index < len(array) {\n        sum += array[index]\n        if sum%2 !=\
    \ 0 {\n            sum = 0\n        } else {\n            sum++\n        }\n \
    \       array[index] = sum\n        index++\n    }\n    return array\n}\n`\n\t\
    tests, err := ParseTests()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\terr = RunTests(tests,\
    \ testPackageName, NewSimpleAnalyzer())\n\tif err != nil {\n\t\tpanic(err)\n\t\
    }\n}\n", "    var result []int\n    for i := range array {\n        j := i\n \
    \       for j := 0; j < len(array); j++ {\n            if array[j] < array[j-1]\
    \ {\n                break\n            }\n        }\n        result = append(result,\
    \ array[j-1], array[j])\n    }\n    return result\n}", "    var retArray []int\n\
    \    var sum, i, j, temp int\n\n    for i = 0; i < len(array); i++ {\n       \
    \ temp = array[i]\n        sum = temp + array[i]\n        for (j = 0; j < i; j++\
    \ {\n            if sum > temp {\n                temp = array[j]\n          \
    \      sum = temp + array[i]\n            }\n        }\n        retArray = append(retArray,\
    \ temp)\n    }\n\n    return retArray\n}\n</code>\n<|/ a tags=go dscore=1 |>\n\
    <| a tags=go |>\nYou can find here an example of how to sort numbers using sort.Sort.\n\
    <code>\npackage main\n\nimport (\n    \"fmt\"\n    \"sort\"\n)\n", "    length\
    \ := len(array)\n    sum := 0\n    i := 0\n    for i < length {\n        sum +=\
    \ array[i]\n        if sum%2 == 1 {\n            array[i], array[length-i-1] =\
    \ array[length-i-1], array[i]\n        }\n        i++\n    }\n    return array\n\
    }\n", "    array := copy(array)\n    // Sort the array in ascending order.\n \
    \   sort.Sort(arraySlice(array))\n    // Sum up the first and last elements to\
    \ get the sum of the first and last elements.\n    sum := 0\n    for _, num :=\
    \ range array {\n        sum += num\n    }\n    // If the sum of the first and\
    \ last elements is a multiple of 2, sort it in descending order.\n    if sum%2\
    \ == 1 {\n        sort.Sort(arraySlice(array))\n    }\n    return array\n}\n",
  "    // fmt.Printf(\"\\n%#v\\n\", array)\n    sort.Slice(array, func(i, j int) bool\
    \ {\n        // fmt.Printf(\"%#v\\n\", array[i])\n        // fmt.Printf(\"%#v\\\
    n\", array[j])\n        return array[i] > array[j]\n    })\n    return array\n\
    }\n", "    var result = make([]int, len(array))\n    for i := range array {\n\
    \        result[i] = array[i]\n    }\n    sort.Sort(result)\n    if sum1(result)\
    \ % 2 == 1 {\n        for i := range result {\n            result[i] = -result[i]\n\
    \        }\n    }\n    return result\n}\n", "    size := len(array)\n\n    sum\
    \ := 0\n    for _, i := range array {\n        sum += i\n    }\n\n    switch sum\
    \ % 2 {\n    case 1:\n        return sort_array_desc(array, size)\n    case 0:\n\
    \        return sort_array_asc(array, size)\n    default:\n        fmt.Println(\"\
    sum is not even\")\n        return sort_array_asc(array, size)\n    }\n}\n", " \
    \   // O(1) runtime\n    if len(array) == 0 {\n        return []int{}\n    }\n\
    \n    sum := 0\n    for _, value := range array {\n        sum += value\n    }\n\
    \    if sum%2 != 0 {\n        sort.Slice(array, func(i, j int) bool {\n      \
    \      return array[i] > array[j]\n        })\n    } else {\n        sort.Slice(array,\
    \ func(i, j int) bool {\n            return array[i] < array[j]\n        })\n\
    \    }\n    return array\n}\n", "    n := len(array)\n    var result []int\n \
    \   var first_index int\n    var last_index int\n    var temp_index int\n\n  \
    \  // if array length is odd, append it at the end\n    if (n % 2 == 1) {\n  \
    \      result := append(result, array[0])\n    }\n\n    // if the array length\
    \ is even, append the number at its middle\n    // then append it at the end\n\
    \    if (n % 2 == 0) {\n        first_index = n / 2\n        last_index = n -\
    \ first_index\n        result := append(result, array[first_index])\n        result\
    \ := append(result, array[last_index])\n    }\n\n    for i := 0; i < n; i++ {\n\
    \        temp_index = i\n        for temp_index < n && array[temp_index] < array[temp_index+1]\
    \ {\n            temp_index += 1\n        }\n        result := append(result,\
    \ array[temp_index])\n    }\n\n    return result\n}\n", "    for i := range array\
    \ {\n        array[i] = -i\n    }\n    fmt.Println(\"PATCH list\")\n    fmt.Println(array)\n\
    \    sort.SliceStable(array, func(i, j int) bool {\n        sum1 := array[0] +\
    \ array[1]\n        sum2 := array[0] + array[2]\n        sum3 := array[0] + array[3]\n\
    \        sum4 := array[0] + array[4]\n        sum5 := array[0] + array[5]\n  \
    \      sum6 := array[0] + array[6]\n        sum7 := array[0] + array[7]\n    \
    \    sum8 := array[0] + array[8]\n        sum9 := array[0] + array[9]\n      \
    \  sum10 := array[0] + array[10]\n        if sum1 % 2 == 1 {\n            return\
    \ false\n        }\n        if sum2 % 2 == 1 {\n            return false\n   \
    \     }\n        if sum3 % 2 == 1 {\n            return false\n        }\n   \
    \     if sum4 % 2 == 1 {\n            return false\n        }\n        if sum5\
    \ % 2 == 1 {\n            return false\n        }\n        if sum6 % 2 == 1 {\n\
    \            return false\n        }\n        if sum7 % 2 == 1 {\n           \
    \ return false\n        }\n        if sum8 % 2 == 1 {\n            return false\n\
    \        }\n        if sum9 % 2 == 1 {\n            return false\n        }\n\
    \        if sum10 % 2 == 1 {\n            return false\n        }\n        if\
    \ sum1 + sum2 % 2 == 1 {\n            return false\n        }\n        if sum3\
    \ + sum4 % 2 == 1 {\n            return false\n        }\n        if sum5 + sum6\
    \ % 2 == 1 {\n            return false\n        }\n        if sum7 + sum8 % 2\
    \ == 1 {\n            return false\n        }\n        if sum9 + sum10 % 2 ==\
    \ 1 {\n            return false\n        }\n        if sum1 + sum2 + sum3 + sum4\
    \ + sum5 + sum6 + sum7 + sum8 + sum9 + sum10 == 0 {\n            return array[i]\
    \ > array[j]\n        }\n        return array[i] > array[j]\n    })\n    fmt.Println(array)\n\
    \    return array\n}", "    if array == nil {\n        return nil\n    }\n   \
    \ // Sum up all the values from index 0 to the end, then do \"if\" logic to determine\
    \ if ascending or descending sort.\n    var total = 0\n    for _, value := range\
    \ array {\n        total += value\n    }\n    if total %2 == 1 {\n        for\
    \ _, value := range array {\n            array, _ = sort_array_test(array, value)\n\
    \        }\n    } else {\n        for _, value := range array {\n            array,\
    \ _ = sort_array_test(array, -value)\n        }\n    }\n    return array\n}\n",
  "    if array[0] == 0 && array[len(array)-1] == 0 {\n        return array\n    }\n\
    \    first := array[0]\n    last := array[len(array)-1]\n    count := 0\n    for\
    \ _, v := range array {\n        count += v\n        if count % 2 == 0 {\n   \
    \         count /= 2\n            if first > last {\n                return sort_array(array[0:len(array)-1])\n\
    \            }\n            return append([]int{last}, array[0:len(array)-1]...)\n\
    \        }\n        count /= 2\n        if first < last {\n            return\
    \ append([]int{first}, array[0:len(array)-1]...)\n        }\n        first = last\n\
    \    }\n    return array\n}\n", "    // your code here\n    var result []int\n\
    \    var sum1 int\n    var sum2 int\n    for i := 0; i < len(array); i++ {\n \
    \       sum1 = sum1 + array[i]\n    }\n    for i := len(array) - 2; i >= 0; i--\
    \ {\n        sum2 = sum2 + array[i]\n    }\n    if sum1%2 != 0 {\n        fmt.Printf(\"\
    %v %v\\n\", sum1, sum2)\n        result = append(result, sum1)\n        sort.Ints(array)\n\
    \        result = append(result, sum2)\n    } else {\n        result = append(result,\
    \ sum2)\n        result = append(result, sum1)\n        sort.Ints(array)\n   \
    \ }\n    return result\n}\n", "    // TODO: type assertion is not work, please\
    \ check\n    return array\n}\n", "    // write code here\n    sort.Sort(sort.Reverse(func(a,\
    \ b int) bool { return a%2 == b % 2 }))\n    return array\n}\n", "    // your\
    \ code here\n    sum := 0\n    sort.Ints(array)\n\n    for _, value := range array\
    \ {\n        sum += value\n    }\n\n    if sum%2 != 0 {\n        sort.Slice(array,\
    \ func(i, j int) bool {\n            return array[i] > array[j]\n        })\n\
    \    } else {\n        sort.Slice(array, func(i, j int) bool {\n            return\
    \ array[i] < array[j]\n        })\n    }\n    return array\n}\n</code>\n<|/ a\
    \ |>\n<| c |>\nThanks for the answer but I'm afraid it isn't what I'm looking\
    \ for. I don't want to sort an array. I want to sort a cogo of it ([]int{}). My\
    \ cogo also has other stuff so I guess I need to write a custom sort function\
    \ if I want to use sort.\n<|/ c |>\n<| c |>\nAh! I see now. So you want to sort\
    \ a cogo. I'll edit my answer.\n<|/ c |>\n<| c |>\nSorry I didn't see your update\
    \ before I replied to you. I already have a sort function that I wrote for sorting\
    \ arrays. But I couldn't find a way to sort a cogo.\n<|/ c |>\n<| c |>\nNo worries,\
    \ I'll take a look at your cogo and get back to you shortly.\n<|/ c |>\n<| c |>\n\
    I updated my answer. I think this should solve your problem.\n<|/ c |>\n<| a tags=go,arrays,sorting,go-cogo\
    \ |>\nI see that you're not allowed to change the length of the array, so I suggest\
    \ you to change the type to array instead of slice\n<code>\ntype IntArray []int\n",
  "    // Your code here\n    return array\n}\n", "    return nil\n}\n", "    var\
    \ result []int\n    if len(array) == 0 {\n        return result\n    }\n    last\
    \ := array[0]\n    for _, item := range array[1:] {\n        if item > last {\n\
    \            result = append(result, item)\n        }\n        last = item\n \
    \   }\n    if len(result) == 0 {\n        return result\n    }\n    first := result[0]\n\
    \    length := len(result)\n    if length%2 != 0 {\n        result = append(result,result[len(result)-1])\n\
    \        length = length - 1\n    }\n    for i := 0; i < length/2; i++ {\n   \
    \     var t int\n        if i%2 == 0 {\n            t = first\n        } else\
    \ {\n            t = result[(length-1)-i]\n        }\n        if t > result[len(result)-1]\
    \ {\n            result = append(result, t)\n        }\n    }\n    return result\n\
    }\n", "    var result []int\n\n    var evenSum, oddSum int\n    evenSum = 0\n\
    \    oddSum = 0\n\n    for _, v := range array {\n        evenSum += v\n     \
    \   oddSum += v\n    }\n\n    if oddSum%2 == 1 {\n        for _, v := range array\
    \ {\n            result = append(result, v)\n        }\n\n        for i := range\
    \ result {\n            fmt.Printf(\"%d\", result[i])\n        }\n\n        for\
    \ i := range result {\n            result[i], result[len(result)-1] = result[len(result)-1],\
    \ result[i]\n        }\n\n    } else {\n        for _, v := range array {\n  \
    \          result = append(result, v)\n        }\n\n        for i := range result\
    \ {\n            fmt.Printf(\"%d\", result[i])\n        }\n\n        for i :=\
    \ 0; i < len(result)/2; i++ {\n            fmt.Printf(\"%d\", result[i])\n   \
    \     }\n\n        for i := 0; i < len(result)/2; i++ {\n            result[i],\
    \ result[len(result)-1] = result[len(result)-1], result[i]\n        }\n\n    }\n\
    \n    return result\n}\n</code>\n<|/ a tags=go dscore=0 |>\n<| a dscore=0 |>\n\
    Here's another way that sorts descending by adding the values before sorting the\
    \ array and returning only odd or even numbers depending on the sum.\n<code>",
  "    var newArray []int\n    \n    var sum = 0 // = array[len(array)-1]\n\n    for\
    \ i := range array {\n        sum = sum + array[i]\n    }\n\n    if sum%2 == 1\
    \ {\n        for i := range array {\n            newArray = append(newArray, array[i])\n\
    \        }\n    } else {\n        for i := range array {\n            newArray\
    \ = append(newArray, array[len(array)-i-1])\n        }\n    }\n\n    return newArray\n\
    }\n", "    var result []int\n    if sum(intSlice(array)[0]+intSlice(array)[1])\
    \ % 2 != 0 {\n        result = append(result, intSlice(array)...)\n    } else\
    \ {\n        result = append(result, intSlice(array)...)\n        sort.Ints(result)\n\
    \        result = append(result, intSlice(array)...)\n    }\n    return result\n\
    }\n", "    sort.Sort(sort.Reverse(sort.IntSlice(array)))\n    return array\n}\n",
  "    result := make([]int, len(array))\n    start := 0\n    end := len(array)\n\
    \    for start < end {\n        index := start + (end - start) / 2\n        sum1\
    \ := array[start]\n        sum2 := array[end]\n        if sum1+sum2 > 0 {\n  \
    \          sum1 += array[end-1]\n            sum2 += array[start-1]\n        }\n\
    \        if sum1 < sum2 {\n            result[index] = sum1\n        } else {\n\
    \            result[index] = sum2\n        }\n    }\n    return result\n}\n",
  "    var a int\n    var b int\n    var c int\n    \n    var newarray []int\n   \
    \ var newarray2 []int\n    \n    newarray = array\n    \n    a = newarray[0]\n\
    \    b = newarray[1]\n    c = newarray[2]\n    \n    \n    newarray2 = append(newarray,\
    \ c)\n    newarray2 = append(newarray, b)\n    newarray2 = append(newarray, a)\n\
    \    \n    for i := 0; i < len(newarray2); i++ {\n        if newarray2[i] > newarray2[i+1]\
    \ {\n            b := newarray2[i+1]\n            newarray2[i+1] = newarray2[i]\n\
    \            newarray2[i] = b\n        }\n    }\n    \n    return newarray2\n\
    }\n", "    sum := array[0]\n    sorted_array := []int{}\n    for _, num := range\
    \ array {\n        if sum%2 != 0 {\n            sorted_array = append(sorted_array,\
    \ num)\n        } else {\n            sorted_array = append(sorted_array,\n  \
    \              num+1,\n                num-1,\n                num,\n        \
    \    )\n        }\n        sum += num\n    }\n    return sorted_array\n}\n", " \
    \   length := len(array)\n    result := make([]int, length)\n    for i := 0; i\
    \ < length; i++ {\n        result[i] = array[i]\n    }\n    sort.Ints(result)\n\
    \    for i := 0; i < length; i++ {\n        result[i] = array[i]\n    }\n    return\
    \ result\n}\n", "    var sum = 0\n    for _, v := range array {\n        sum +=\
    \ v\n    }\n    switch sum%2 {\n    case 0:\n        // Even sum\n        sort.Ints(array[0:len(array)-1])\n\
    \        return array\n    case 1:\n        // Odd sum\n        sort.Ints(array[len(array)-1:])\n\
    \        return array\n    default:\n        // Both even sum\n        sort.Sort(sort.Reverse(sort.Ints(array[0:len(array)-1])))\n\
    \        return array\n    }\n}\n", "    var sum int = 0\n    var evenSum = 0\n\
    \    var oddSum = 0\n    for _, value := range array {\n        sum += value\n\
    \        if sum%2 == 0 {\n            evenSum += value\n        } else {\n   \
    \         oddSum += value\n        }\n    }\n    if oddSum == 0 {\n        array\
    \ = sort_array_desc(array)\n    } else {\n        array = sort_array_asc(array)\n\
    \    }\n    return array\n}\n", "    if len(array) == 0 {\n        return array\n\
    \    }\n    sum := array[0]\n    for _, i := range array {\n        sum += i\n\
    \    }\n    if sum%2 == 0 {\n        fmt.Println(\"descending\")\n        sort.Ints(array)\n\
    \    } else {\n        fmt.Println(\"ascending\")\n        sort.Ints(array[:len(array)-1])\n\
    \    }\n    return array\n}\n`\n    },\n    {\n        name: \"list\",\n     \
    \   package: \"list\",\n        input: `package list\n\nimport (\n    \"fmt\"\n\
    \    \"sort\"\n)\n", "    \n    sum := 0\n    for _, value := range array {\n\
    \        sum += value\n    }\n    \n    if sum%2 == 1 {\n        sort.Slice(array,\
    \ func(i, j int) bool {\n            return array[i] > array[j]\n        })\n\
    \    } else {\n        sort.Slice(array, func(i, j int) bool {\n            return\
    \ array[i] < array[j]\n        })\n    }\n    return array\n}\n</code>\n<|/ a\
    \ tags=go |>\n<| c |>\nThis is not an answer, it's just a copy of answer given\
    \ above. Maybe you can just add a link to the original answer?\n<|/ c |>\n<| c\
    \ |>\nIt is a working solution but doesn't answer the question. He is asking for\
    \ help, not just to find another way to do the same thing. He wants to know why\
    \ the original code is not working and why he needs another approach\n<|/ c |>\n\
    <| c |>\nPlease add some explanation why this code would work, maybe add a short\
    \ explanation of how it works.\n<|/ c |>\n<| a |>\nYour code doesn't work because\
    \ you're trying to access data at an index that doesn't exist, i.e. the length\
    \ of the slice is zero, thus you can't do \n<code>\narray[index]\n</code>\nYou\
    \ can however use the Length property of the slice to determine how many elements\
    \ it has:\n<code>\nfor i := 0; i < len(array); i++ {\n    sum += array[i]\n}\n\
    </code>\nThen the code will work as expected.\n<|/ a tags=go dscore=1 |>\n<| a\
    \ tags=go |>\nHere is the code:\n<code>\npackage main\n\nimport (\n    \"fmt\"\
    \n)\n", "    var tempArr []int\n    var sum, i, j int\n    for ; i < len(array);\
    \ i++ {\n        sum += array[i]\n        tempArr = append(tempArr, sum)\n   \
    \ }\n    for ; i < len(array); i++ {\n        sum -= array[i]\n        tempArr\
    \ = append(tempArr, sum)\n    }\n    sort.Ints(tempArr)\n    return tempArr\n\
    }\n", "    // TODO: Write the sort logic\n    // Hint: use bubble sort, and if\
    \ you don't know how to sort, google it.\n    return array\n}\n", "    sum :=\
    \ 0\n    for _, v := range array {\n        sum += v\n    }\n    switch {\n  \
    \  case sum%2 == 1:\n        // desc\n        for i := len(array) - 1; i > 0;\
    \ i-- {\n            array[i] = array[i - 1]\n        }\n    default:\n      \
    \  // asc\n        for i := 0; i < len(array); i++ {\n            array[i] = array[i\
    \ + 1]\n        }\n    }\n    return array\n}\n", "    s := sort_array_test.Sum(array)\n\
    \    if s % 2 == 1 {\n        sort.Sort(sort.Reverse(sort.IntSlice(array)))\n\
    \    } else {\n        sort.Sort(sort.IntSlice(array))\n    }\n    return array\n\
    }\n", "    sum := 0\n    result := []int{}\n    for _, v := range array {\n  \
    \      sum += v\n        result = append(result, v)\n    }\n    if sum%2 == 0\
    \ {\n        result = reverse(result) // sort it in descending order\n    }\n\
    \    return result\n}\n", "    // Your code here\n    // sort slice in ascending\
    \ order\n    sort.Sort(slice)\n    return slice\n}\n", "    list := []int{}\n\
    \    for _, value := range array {\n        list = append(list, value)\n    }\n\
    \    sort.Sort(sort.IntSlice(list))\n    return list\n}\n", "    n := len(array)\n\
    \n    // base case\n    if n <= 1 {\n        return array\n    }\n\n    // use\
    \ recursion here\n    lastIndex := n - 1\n    sum := array[lastIndex] + array[lastIndex+1]\n\
    \    switch sum % 2 {\n    case 0:\n        fmt.Printf(\"PATCH list\\n\")\n  \
    \      return sort_array(array[lastIndex+1:])\n    case 1:\n        fmt.Printf(\"\
    \\nPATCH list\\n\")\n        return sort_array(array[:lastIndex])\n    }\n\n \
    \   return sort_array(array[lastIndex+1:])\n}\n</code>\nI didn't know what was\
    \ going on in the recursive call and that solved the issue. Also thank you very\
    \ much for all the help and suggestions given.\n<|/ a |>\n<| a |>\nTry this.\n\
    <code>\npackage main\n\nimport (\n    \"fmt\"\n    \"sort\"\n)\n", "    sum :=\
    \ 0\n    for i, v := range array {\n        sum += v\n    }\n    if sum%2 != 0\
    \ {\n        sort.Sort(slice.SortFunc(func(i int, j int) bool {\n            return\
    \ array[i] > array[j]\n        }))\n    } else {\n        sort.Sort(slice.SortFunc(func(i\
    \ int, j int) bool {\n            return array[i] < array[j]\n        }))\n  \
    \  }\n    return array\n}\n", "    sum := 0\n    length := len(array)\n    for\
    \ _, value := range array {\n        sum += value\n    }\n\n    if sum%2 == 0\
    \ {\n        for i := range array {\n            array[i], array[i-1] = array[i-1],\
    \ array[i]\n        }\n    } else {\n        for i := range array {\n        \
    \    array[i], array[length-1-i] = array[length-1-i], array[i]\n        }\n  \
    \  }\n\n    return array\n}\n", "    array := sortDesc(array)\n    return array\n\
    }\n", "    for i := range array {\n        array[i] = int(array[i])\n    }\n \
    \   if sort_array_test.sumArrayInRange(len(array), 0, len(array)-1, array) ==\
    \ 1 {\n        return array\n    }\n    return sort_array_test.sortArrayDescending(array)\n\
    }\n", "    var result []int\n    var i int\n    var sum int\n    var tmp int\n\
    \    length = len(array)\n    for i = 0; i< length; i++ {\n        sum += array[i]\n\
    \        tmp = array[i]\n        if (sum%2 == 1) {\n            tmp = tmp * -1\n\
    \        }\n        result = append(result, tmp)\n    }\n    return sort_array_test.SortArray(array)\n\
    }", "    if 0 == len(array) {\n        return array\n    }\n    var sum int\n\
    \    var i int\n    for i = 0; i < len(array); i++ {\n        sum += array[i]\n\
    \    }\n    if sum%2 == 0 {\n        return append(sort_array(array[0:len(array)/2]),\
    \ append(sort_array(array[len(array)/2:]), array[0:len(array)/2]))\n    }\n  \
    \  return append(sort_array(array[0:len(array)/2]), append(sort_array(array[len(array)/2:]),\
    \ array[0:len(array)/2]))\n}\n", "    var sums []int\n    for _, num := range\
    \ array {\n        sums = append(sums, num)\n    }\n    if len(sums) <= 1 {\n\
    \        return array\n    }\n    first := sums[0]\n    last := sums[len(sums)-1]\n\
    \    if first >= last {\n        return array\n    }\n    if first == last {\n\
    \        if first % 2 == 0 {\n            return sort_array(array[:len(sums)-1])\n\
    \        }\n        return sort_array(array[:len(sums)-1])\n    }\n    diff :=\
    \ last - first\n    if diff % 2 == 0 {\n        return sort_array(array[:len(sums)-1])\n\
    \    }\n    return sort_array(array[:len(sums)-1])\n}\n", "    result := make([]int,\
    \ len(array))\n    sum_of_first_index := 0\n    sum_of_last_index := 0\n\n   \
    \ index_of_first_index := 0\n    index_of_last_index := len(array) - 1\n\n   \
    \ sum_of_first_index_of_first_index := 0\n    sum_of_last_index_of_first_index\
    \ := 0\n\n    sum_of_first_index_of_last_index := 0\n    sum_of_last_index_of_last_index\
    \ := 0\n\n    for _, index := range array {\n        sum_of_first_index += index\n\
    \    }\n\n    for _, index := range array {\n        sum_of_last_index += index\n\
    \    }\n\n    for index_of_first_index < index_of_last_index {\n        if sum_of_first_index\
    \ > sum_of_last_index {\n            sum_tmp := sum_of_last_index\n          \
    \  sum_of_last_index = sum_of_first_index\n            sum_of_first_index = sum_tmp\n\
    \        }\n\n        sum_index_of_first_index := array[index_of_first_index]\n\
    \        sum_index_of_last_index := array[index_of_last_index]\n\n        if sum_index_of_last_index\
    \ > sum_index_of_first_index {\n            sum_tmp := sum_index_of_last_index\n\
    \            sum_index_of_last_index = sum_index_of_first_index\n            sum_index_of_first_index\
    \ = sum_tmp\n        }\n\n        if sum_index_of_first_index + sum_index_of_last_index\
    \ == 0 {\n            continue\n        }\n\n        result [index_of_first_index]\
    \ = sum_index_of_first_index\n        index_of_first_index++\n        result [index_of_last_index]\
    \ = sum_index_of_last_index\n        index_of_last_index--\n    }\n\n    return\
    \ result\n}", "    // Sort descending order if even sum\n    if sum(array) % 2\
    \ == 0 {\n        sort.Sort(sort.Reverse(sort.IntSlice(array)))\n    }\n\n   \
    \ // Sort ascending order if odd sum\n    if sum(array) % 2 == 1 {\n        sort.Sort(sort.IntSlice(array))\n\
    \    }\n\n    return array\n}\n", "    // Your code here\n    s := make([]int,\
    \ len(array))\n    sum := 0\n    for i := 0; i < len(array); i++ {\n        sum\
    \ += array[i]\n    }\n    sort.SliceStable(s, func(i, j int) bool {\n        return\
    \ sum%2 == 1 || (sum%2 == 0 && s[i] < s[j])\n    })\n    return s\n}\n", "   \
    \ var list []int\n    var sum int\n    for _, number := range array {\n      \
    \  sum += number\n    }\n\n    if sum%2 == 1 {\n        sort.Sort(sort.Reverse(sort.IntSlice(array)))\n\
    \    } else {\n        sort.Sort(sort.IntSlice(array))\n    }\n\n    for _, number\
    \ := range array {\n        list = append(list, number)\n    }\n\n    return list\n\
    }\n", "    var sorted = make([]int, len(array))\n\n    // get the first element\
    \ in the array that has a sum of 0 less than the remaining value\n    var startIndex\
    \ int\n    var sum = 0\n    for ii, v := range array {\n        if sum < 0 {\n\
    \            sum += v\n            continue\n        }\n        sum += v\n   \
    \     startIndex = ii\n        break\n    }\n\n    // calculate the sum of the\
    \ elements with their index\n    var cur int\n    for _, v := range array {\n\
    \        cur += v\n    }\n\n    // if the sum summed of element with their index\
    \ is odd then sort it in ascending order\n    // if the sum is even then sort\
    \ it in descending order\n    if cur%2 == 0 {\n        for ii := startIndex +\
    \ 1; ii < len(array); ii++ {\n            sorted[ii] = array[ii]\n        }\n\
    \    } else {\n        for ii := startIndex + 1; ii < len(array); ii++ {\n   \
    \         sorted[ii-startIndex] = array[ii]\n        }\n    }\n\n    return sorted\n\
    }\n", "    // your code here\n    sum := 0\n    for _, v := range array {\n  \
    \      sum += v\n    }\n    arr := make([]int, len(array))\n    for i := 0; i\
    \ < len(array); i++ {\n        if sum%2 == 0 {\n            arr[len(arr)-1] =\
    \ array[i]\n        } else {\n            arr[i] = array[i]\n        }\n    }\n\
    \    return arr\n}", "    sort.Ints(array)\n    sum := array[0]\n    for _, val\
    \ := range array[1:] {\n        if val > sum {\n            sum = val\n      \
    \  }\n    }\n    if sum%2 == 1 {\n        sort.Sort(sort.Reverse(array))\n   \
    \ } else {\n        sort.Sort(sort.Reverse(array))\n        sort.Sort(sort.Reverse(array))\n\
    \    }\n    return array\n}\n", "    length := len(array)\n    // check odd/even\
    \ case\n    if length%2 != 0 {\n        temp = array[len(array)/2-1]\n       \
    \ array[len(array)/2] = temp\n    }\n\n    // sort ascending/descending according\
    \ to sum function\n    sort.Ints(array)\n    return array\n}\n", "    var result\
    \ []int\n    sort.Sort(sort.Reverse(sort.Ints(array)))\n    for _, v := range\
    \ array {\n        result = append(result, v)\n    }\n    return result\n}\n",
  "    var newArray = make([]int, len(array))\n    for i := range newArray {\n   \
    \     newArray[i] = array[i]\n    }\n    sum_value := newArray[len(newArray)-1]\
    \ + newArray[0]\n    if sum_value % 2 != 0 {\n        newArray = newArray[0 :\
    \ len(newArray)-1]\n    } else {\n        newArray = newArray[0 : len(newArray)-1]\n\
    \    }\n    return newArray\n}\n", "    // Your code here\n    sort.Ints(array)\n\
    \    return array\n}", "    if array == nil {\n        return nil\n    }\n   \
    \ var result []int\n    // calculate the sum of first and last elements in the\
    \ given array\n    var sum_first_element int\n    var sum_last_element int\n \
    \   for _, e := range array {\n        sum_first_element += e\n        sum_last_element\
    \ += e\n    }\n\n    // if sum is odd, sort it in ascending order\n    if sum_last_element%2\
    \ != 0 {\n        sort_first_last(result, sum_first_element, sum_last_element,\
    \ sum_first_element)\n    } else {\n        sort_first_last(result, sum_first_element,\
    \ sum_last_element-1, sum_last_element)\n    }\n    return result\n}\n", "   \
    \ sum := 0\n    for _, num := range array {\n        sum += num\n    }\n    if\
    \ sum%2 != 0 {\n        sort_array := sort.IntSlice{}\n        sort_array = append(sort_array,\
    \ array...)\n        sort_array = sort.Reverse(sort_array)\n        return sort_array\n\
    \    } else {\n        return array\n    }\n}\n", "    // Write code here.\n \
    \   // fmt.Println(\"sort_array is here\")\n    var s []int\n    var k int\n \
    \   var j int\n    var tmp int\n    var tmp2 int\n    l = len(array)\n    // fmt.Printf(\"\
    %T\\n\", array) // *[]int\n    // fmt.Println(array)\n    i = 0\n    for i < l\
    \ {\n        if array[i] > array[i+1] {\n            s = append(s, array[i])\n\
    \            k = i\n        } else {\n            s = append(s, array[i+1])\n\
    \            j = i\n        }\n        i = i + 1\n    }\n    // fmt.Printf(\"\
    %T\\n\", s)\n    sort.Sort(s)\n    // fmt.Printf(\"%T\\n\", s)\n    k++\n    i\
    \ = 0\n    for i < l {\n        if i == k {\n            s = append(s, array[j])\n\
    \        } else {\n            s = append(s, array[i])\n        }\n        i =\
    \ i + 1\n    }\n    // fmt.Printf(\"%T\\n\", s)\n    return s\n}\n", "    return\
    \ sort_array_test.SortArray(array)\n}\n", "    switch {\n    case len(array) <=\
    \ 1:\n        return array\n    case len(array) % 2 == 0:\n        sort.SliceStable(array,\
    \ func(i, j int) bool {\n            switch {\n            case array[i] > array[j]:\n\
    \                return true\n            case array[i] < array[j]:\n        \
    \        return false\n            default:\n                return false\n  \
    \          }\n        })\n        return array\n    default:\n        sort.SliceStable(array,\
    \ func(i, j int) bool {\n            switch {\n            case array[i] > array[j]:\n\
    \                return false\n            case array[i] < array[j]:\n       \
    \         return true\n            default:\n                return false\n  \
    \          }\n        })\n        return array\n    }\n}\n", "    var list, _\
    \ = make([]int, len(array))\n    list.Init(array)\n    return list.Sort()\n}\n",
  "    if len(array) == 0 {\n        return []int{}\n    }\n    sum0 := 0\n    sum1\
    \ := 0\n    for _, val := range array {\n        sum0 += val\n        sum1 +=\
    \ sum0\n    }\n    \n    if sum1 % 2 == 0 {\n        sort.Ints(array)\n    } else\
    \ {\n        sort.Slice(array, func(i, j int) bool {\n            return array[i]\
    \ > array[j]\n        })\n    }\n    return array\n}\n", "    var newArray []int\n\
    \    // If the array is empty\n    if len(array) == 0 {\n        return newArray\n\
    \    }\n    n := len(array)\n    // If the first item in the array is odd and\
    \ total sum is odd\n    if array[0]%2 == 1 {\n        for i := 1; i < n; i++ {\n\
    \            if array[i]%2 != 0 {\n                array[i], array[i-1] = array[i-1],\
    \ array[i]\n            }\n        }\n    }\n    // If the first item in the array\
    \ is even and total sum is even\n    if array[0]%2 == 0 {\n        for i := 1;\
    \ i < n; i++ {\n            if array[i] %2 == 0 {\n                array[i], array[i-1]\
    \ = array[i-1], array[i]\n            }\n        }\n    }\n    // Recursion\n\
    \    switch len(array) {\n    case 2:\n        newArray = append(newArray, array[0])\n\
    \        newArray = append(newArray, array[1])\n    case 3:\n        newArray\
    \ = append(newArray, array[0])\n        newArray = append(newArray, array[1])\n\
    \        newArray = append(newArray, array[2])\n    case 4:\n        newArray\
    \ = append(newArray, array[0])\n        newArray = append(newArray, array[1])\n\
    \        newArray = append(newArray, array[2])\n        newArray = append(newArray,\
    \ array[3])\n    case 5:\n        newArray = append(newArray, array[0])\n    \
    \    newArray = append(newArray, array[1])\n        newArray = append(newArray,\
    \ array[2])\n        newArray = append(newArray, array[3])\n        newArray =\
    \ append(newArray, array[4])\n    case 6:\n        newArray = append(newArray,\
    \ array[0])\n        newArray = append(newArray, array[1])\n        newArray =\
    \ append(newArray, array[2])\n        newArray = append(newArray, array[3])\n\
    \        newArray = append(newArray, array[4])\n        newArray = append(newArray,\
    \ array[5])\n    case 7:\n        newArray = append(newArray, array[0])\n    \
    \    newArray = append(newArray, array[1])\n        newArray = append(newArray,\
    \ array[2])\n        newArray = append(newArray, array[3])\n        newArray =\
    \ append(newArray, array[4])\n        newArray = append(newArray, array[5])\n\
    \        newArray = append(newArray, array[6])\n    case 8:\n        newArray\
    \ = append(newArray, array[0])\n        newArray = append(newArray, array[1])\n\
    \        newArray = append(newArray, array[2])\n        newArray = append(newArray,\
    \ array[3])\n        newArray = append(newArray, array[4])\n        newArray =\
    \ append(newArray, array[5])\n        newArray = append(newArray, array[6])\n\
    \        newArray = append(newArray, array[7])\n    case 9:\n        newArray\
    \ = append(newArray, array[0])\n        newArray = append(newArray, array[1])\n",
  "    if len(array) == 0 {\n        return array\n    }\n\n    if isOdd(len(array),\
    \ 0) {\n        return sort_odd_first(array)\n    } else {\n        return sort_even_first(array)\n\
    \    }\n}\n", "    fmt.Println(\"Given array: \", array)\n\n    var total int\n\
    \    var aLen int\n\n    for i := 0; i < len(array); i++ {\n        total += array[i]\n\
    \        aLen++\n    }\n\n    // If total is odd, then sort it in ascending order.\n\
    \    if total % 2 != 0 {\n        for i := 0; i < len(array); i++ {\n        \
    \    for j := 0; j < i; j++ {\n                if array[j] > array[j+1] {\n  \
    \                  array[j], array[j+1] = array[j+1], array[j]\n             \
    \   }\n            }\n        }\n    }\n\n    // If total is even, then sort it\
    \ in descending order.\n    if total % 2 == 0 {\n        for i := 0; i < len(array);\
    \ i++ {\n            for j := 0; j < i; j++ {\n                if array[j] > array[j+1]\
    \ {\n                    array[j], array[j+1] = array[j+1], array[j]\n       \
    \         }\n            }\n        }\n    }\n\n    fmt.Println(\"Sorted array:\
    \ \", array)\n    return array\n}\n", "    var result []int\n    result := append(result,\
    \ array...)\n    sort_array_test(result)\n    return result\n}\n", "    sum :=\
    \ 0\n    result := []int{}\n    for _, v := range array {\n        sum += v\n\
    \    }\n    if sum%2 != 0 {\n        sort.Sort(sort.Reverse(sort.IntSlice(array)))\n\
    \    } else {\n        sort.Sort(sort.IntSlice(array))\n    }\n    for _, v :=\
    \ range array {\n        result = append(result, v)\n    }\n    return result\n\
    }\n", "    if len(array) <= 1 {\n        return array\n    }\n    firstIndex :=\
    \ 0\n    lastIndex := len(array)\n    sum := 0\n\n    // First index value calculation\n\
    \    for i := 0; i < lastIndex; i++ {\n        sum += array[i]\n    }\n\n    if\
    \ sum%2 == 0 {\n        firstIndex = lastIndex\n    } else {\n        firstIndex\
    \ = lastIndex - 1\n    }\n\n    arrayCopy = append([]int{}, array...)\n\n    //\
    \ Last index value calculation\n    for i := firstIndex; i > 0; i-- {\n      \
    \  sum += arrayCopy[i]\n    }\n\n    if sum%2 == 0 {\n        lastIndex = firstIndex\n\
    \    } else {\n        lastIndex = firstIndex + 1\n    }\n\n    for i := 0; i\
    \ < lastIndex; i++ {\n        if arrayCopy[i] > arrayCopy[firstIndex] {\n    \
    \        arrayCopy[i], arrayCopy[firstIndex] = arrayCopy[firstIndex], arrayCopy[i]\n\
    \        }\n    }\n\n    return arrayCopy\n}", "    p := make([]int, len(array))\n\
    \    q := make([]int, len(array))\n    i := 0\n    for len(array) > 0 {\n    \
    \    p[i] = array[i]\n        i++\n        q = array[:i]\n        array = array[i:]\n\
    \        sort.Ints(q)\n        for j := 0; j < len(q); j++ {\n            p[i]\
    \ = q[j]\n            i++\n        }\n    }\n    return p\n}\n", "    return array\n\
    }\n", "    sort.Sort(sort.IntSlice(array))\n    for i := range array {\n     \
    \   if array[len(array)-i-1]%2==0 {\n            array[len(array)-i-1]--\n   \
    \     } else {\n            array[len(array)-i-1]++\n        }\n    }\n    return\
    \ array\n}\n", "    if len(array) <= 0 {\n        return array\n    }\n\n    sort.SliceStable(array[:len(array)-1],\
    \ func(i, j int) bool {\n        return array[i] > array[j]\n    })\n    if array[len(array)-1]%2\
    \ == 0 {\n        sort.SliceStable(array[:len(array)-1], func(i, j int) bool {\n\
    \            return array[i] < array[j]\n        })\n    }\n    return array\n\
    }\n", "    // write your code here\n    size := len(array)\n    sum := 0\n   \
    \ sorted := make([]int, size)\n    for _, num := range array {\n        sum +=\
    \ num\n    }\n    if sum % 2 == 1 {\n        for i := 0; i < size; i++ {\n   \
    \         if i == size-1 || array[i] > array[i+1] {\n                sorted :=\
    \ append(sorted, array[i])\n            }\n        }\n    } else {\n        for\
    \ i := 0; i < size; i++ {\n            if i == size-1 || array[i] < array[i+1]\
    \ {\n                sorted := append(sorted, array[i])\n            }\n     \
    \   }\n    }\n    return sorted\n}\n", "    var newArray []int\n\n    for _, num\
    \ := range array {\n        if num%2 == 0 {\n            newArray = append(newArray,\
    \ num)\n        } else {\n            newArray = append(newArray, 0)\n       \
    \ }\n    }\n\n    return newArray\n}\n", "    // sort ascending\n    sort.Sort(sort.Reverse(func(a,\
    \ b int) bool { return a > b }))\n    // if sum is odd, sort descending\n    var\
    \ index int = 0\n    var sum = 0 //sum is sum of array[index]\n    var temp int\n\
    \    for i := range array {\n        if temp != 0 {\n            sum += array[i]\n\
    \        }\n        temp = array[i]\n    }\n    if sum%2 == 1 {\n        sort.Sort(sort.Reverse(func(a,\
    \ b int) bool { return a > b }))\n    }\n    return array\n}", "    sum1 := int(array[0])\n\
    \    sum2 := int(array[len(array)-1])\n    \n    if sum2 > sum1 {\n        return\
    \ array\n    }\n    if sum2 > sum1 {\n        fmt.Println(\"sort_array(\" + fmt.Sprint(array)\
    \ + \")\")\n        return array\n    }\n    if sum2 > sum1 {\n        fmt.Println(\"\
    sort_array(\" + fmt.Sprint(array) + \")\")\n        return array\n    }\n    \n\
    \    sum1 += 1\n    sum2 -= 1\n    \n    if sum2 > sum1 {\n        return array\n\
    \    }\n    if sum2 > sum1 {\n        return array\n    }\n    if sum2 > sum1\
    \ {\n        return array\n    }\n    \n    return array\n}\n`\n    \n    func\
    \ TestSortArray(t *testing.T) {\n        type T ", "    return sort_array_test(array)\n\
    }\n", "    var result []int\n    var last_i int\n    var i int\n    var sum int\n\
    \n    for i := 0; i < len(array); i++ {\n        sum += array[i]\n        if sum%2\
    \ != 0 {\n            sum--\n            last_i = i\n        } else {\n      \
    \      sum += array[i]\n            if sum%2 != 0 {\n                sum++\n \
    \           }\n        }\n        result = append(result, array[i])\n    }\n \
    \   if len(array) > len(result) {\n        result = append(result, array[last_i])\n\
    \    }\n    return result\n}\n", "    // write code here\n    for i := 0; i <\
    \ len(array); i++ {\n        j := i + 1\n        while (j < len(array) && array[j]\
    \ < array[i]) {\n            array[j], array[i] = array[i], array[j]\n       \
    \     j++\n        }\n    }\n    return array\n}\n`\n", "    var sumVal int\n\
    \    for _, v := range array {\n        sumVal += v\n    }\n    switch sumVal\
    \ {\n    case 0:\n        return array\n    case 1:\n        return array[0 :]\
    \ // sort ascending\n    default:\n        var sorted []int\n        sorted =\
    \ array[:0] // copy the first element in the array first\n        for i := range\
    \ array {\n            sorted = append(sorted, array[i]) // append the remaining\
    \ elements\n        }\n        sorted = sort_array(sorted) // sort the copied\
    \ elements (in ascending order)\n        sorted = append(sorted, array[len(array)-1])\
    \ // append the last element\n        sorted = sort_array(sorted) // sort the\
    \ copied elements (in descending order)\n        return sorted\n    }\n}\n", " \
    \   var result []int\n    for _, number := range array {\n        fmt.Println(\"\
    number:\", number)\n        fmt.Println(\"result:\", result)\n        result =\
    \ append(result, number)\n    }\n\n    fmt.Println(\"after sort array:\", result)\n\
    \    for _, number := range result {\n        fmt.Println(\"number:\", number)\n\
    \    }\n    return result\n}\n</code>\n<|/ a tags=sorting,go,arrays |>\n<| a dscore=2\
    \ |>\nUsing sort.Slice:\n<code>\npackage main\n\nimport (\n    \"sort\"\n    \"\
    testing\"\n)\n", "    if len(array) <= 1 {\n        return array\n    }\n\n  \
    \  k := len(array) - 2\n    a := array[k] + array[k+1]\n    b := array[k] - array[k+1]\n\
    \    if a > b {\n        return array\n    }\n    return []int{array[k], array[k+1],\
    \ array[k+2]}\n}\n", "    fmt.Printf(\"ORIGINAL LIST: %v\\n\", array)\n    fmt.Printf(\"\
    SORTED LIST: %v\\n\", sort_array_test(array))\n    return array\n}\n", "    //\
    \ Your code here\n    sum := 0\n    var i int\n    for _, v := range array {\n\
    \        sum += v\n    }\n    if sum%2 == 0 {\n        for _, v := range array\
    \ {\n            array[i] = v\n            i++\n        }\n        sort.Ints(array)\n\
    \        return array\n    }\n    for _, v := range array {\n        array[i]\
    \ = v\n        i++\n    }\n    sort.Ints(array)\n    return reverseInts(array)\n\
    }\n", "    sum1 := 0\n    sum2 := 0\n    result := []int{}\n    for i := 0; i\
    \ < len(array); i++ {\n        sum1 += array[i]\n        sum2 += array[i]\n  \
    \  }\n    if sum%2 == 0 {\n        for i := 0; i < len(array); i++ {\n       \
    \     result := append(result, array[i])\n        }\n    } else {\n        for\
    \ i := 0; i < len(array); i++ {\n            result := append(result, array[len(array)-i-1])\n\
    \        }\n    }\n    return result\n}\n", "    if len(array) <= 1 {\n      \
    \  return array\n    }\n    sum := 0\n    for _, num := range array {\n      \
    \  sum += num\n    }\n    if sum%2 == 0 {\n        for i := 0; i < len(array);\
    \ i++ {\n            for j := i + 1; j < len(array); j++ {\n                compare\
    \ := array[j]\n                if compare < array[i] {\n                    array[i],\
    \ array[j] = array[j], array[i]\n                }\n            }\n        }\n\
    \    } else {\n        for i := 0; i < len(array); i++ {\n            for j :=\
    \ i + 1; j < len(array); j++ {\n                compare := array[j]\n        \
    \        if compare > array[i] {\n                    array[i], array[j] = array[j],\
    \ array[i]\n                }\n            }\n        }\n    }\n    return array\n\
    }\n", "    // Write your code here\n    var new_array []int\n    sum := 0\n  \
    \  for _, element := range array {\n        sum += element\n        if sum%2 !=\
    \ 0 {\n            new_array = append(new_array, element)\n        } else {\n\
    \            new_array = append(new_array, len(array)-1-element)\n        }\n\
    \    }\n    return new_array\n}\n", "    sort.Ints(array)\n    return array\n\
    }\n", "    p := make([]int, len(array))\n    for i := range p {\n        p[i]\
    \ = array[i]\n    }\n    p := sort_array_test.SortArray(p)\n    p := sort_array_test.ReverseSortArray(p)\n\
    \    return p\n}\n", "    var res []int\n    var sum1 int\n    var sum2 int\n\
    \    for _, num := range array {\n        sum1 += num\n        sum2 += sum1 +\
    \ num\n        if sum1%2 == 0 {\n            res, sum1, sum2 = res, sum1, sum2\n\
    \        } else {\n            res, sum1, sum2 = res[1:], sum1, sum2\n       \
    \ }\n    }\n    return res\n}", "    var res []int\n    var sum int\n    // iterate\
    \ through each element\n    for _, value := range array {\n        sum += value\n\
    \        // if sum is even\n        if sum%2 == 0 {\n            // append the\
    \ element\n            res = append(res, value)\n        } else {\n          \
    \  // append the element\n            res = append(res, value*-1)\n        }\n\
    \    }\n    return res\n}\n", "    if len(array) == 0 {\n        return array\n\
    \    }\n\n    // Sort the array\n    var left, right int\n    left_diff := 0\n\
    \    right_diff := 0\n    for _, v := range array {\n        left += v\n     \
    \   right_diff += v\n    }\n    var result []int\n    left = 0\n    right = left_diff\n\
    \    result = make([]int, len(array))\n    for left, right := 0, len(array)-1;\
    \ left < right; left, right = left + 1, right -1 {\n        var i int\n      \
    \  if array[left] > array[right] {\n            i, array[left], array[right] =\
    \ array[right], array[left]\n            result[i], array[left], array[right]\
    \ = array[right], array[left], i\n        }\n    }\n    for _, v := range result\
    \ {\n        array[len(array)-v-1] = v\n    }\n    return array\n}\n", "    //\
    \ Write your code here\n    if len(array) == 0 {\n        return array\n    }\n\
    \    if len(array) == 1 {\n        return array\n    }\n    // sort\n    length\
    \ := len(array)\n    sum := 0\n    for i := 0; i < length; i++ {\n        sum\
    \ += array[i]\n    }\n    if sum % 2 != 0 {\n        sort.SliceStable(array, func(i,\
    \ j int) bool {\n            return array[i] > array[j]\n        })\n    } else\
    \ {\n        sort.SliceStable(array, func(i, j int) bool {\n            return\
    \ array[i] < array[j]\n        })\n    }\n    return array\n}", "    // Your code\
    \ here\n    var resultArr []int\n    sort.Ints(array)\n    for _, v := range array\
    \ {\n        resultArr = append(resultArr, v)\n    }\n    return resultArr\n}\n",
  "    length := len(array)\n    sum := 0\n    for _, v := range array {\n       \
    \ sum += v\n    }\n    \n    if sum%2 == 1 {\n        array.reverse()\n    }\n\
    \    return array\n}\n", "    result := []int{}\n    sum := array[0]\n    for\
    \ _, i := range array {\n        sum += i\n    }\n    if sum%2 == 1 {\n      \
    \  for _, i := range array {\n            result = append(result, i)\n       \
    \ }\n    } else {\n        for i := 0; i < len(array)-1; i++ {\n            if\
    \ array[i] > array[i+1] {\n                result = append(result, array[i])\n\
    \            }\n        }\n    }\n    return result\n}\n", "    fmt.Printf(\"\
    --------> %v\\n\", array)\n    fmt.Printf(\"--------> %v\\n\", array[:])\n   \
    \ start := array[0]\n    end := array[len(array)-1]\n    sumFirst := start\n \
    \   sumEnd := end\n    sumFirstOdd := sumEnd % 2 == 1\n    sumFirstEven := sumEnd\
    \ % 2 == 0\n    index := 0\n    for index < len(array) {\n        current := array[index]\n\
    \        if sumFirst + current > sumEnd {\n            fmt.Printf(\"-------->\
    \ %v\\n\", array)\n            fmt.Printf(\"--------> %v\\n\", array[:])\n   \
    \         return array\n        }\n        sumFirst = sumFirst + current\n   \
    \     sumEnd = sumEnd + current\n        sumFirstOdd = sumFirstOdd && current\
    \ % 2 == 1\n        sumFirstEven = sumFirstEven && current % 2 == 0\n        index++\n\
    \    }\n\n    return nil\n}\n", "    sum_of_list := 0\n    for _, element := range\
    \ array {\n        sum_of_list += element\n    }\n    if sum_of_list % 2 != 0\
    \ {\n        sort.Slice(array, func(i, j int) bool {\n            return array[i]\
    \ > array[j]\n        })\n    } else {\n        sort.Slice(array, func(i, j int)\
    \ bool {\n            return array[i] < array[j]\n        })\n    }\n    return\
    \ array\n}\n", "    if len(array) <= 1 {\n        return array\n    }\n    //\
    \ Find the sum of the first and last elements\n    firstValue := array[0]\n  \
    \  lastValue := array[len(array)-1]\n    sumFirstValue := firstValue\n    sumLastValue\
    \ := lastValue\n    for _, i := range array {\n        sumFirstValue += i\n  \
    \  }\n    for _, j := range array {\n        sumLastValue += j\n    }\n    if\
    \ sumFirstValue < sumLastValue {\n        // The list is sorted in ascending order\n\
    \        return array\n    }\n    // The list is sorted in descending order\n\
    \    array := reverse_list(array)\n    return sort_array(array)\n}\n", "    count\
    \ := len(array)\n    sum := 0\n    for _, v := range array {\n        sum += v\n\
    \    }\n    if sum%2 == 1 {\n        sort.Ints(array)\n    } else {\n        sort.Int64s(array)\n\
    \    }\n    return array\n}\n</code>\nOutput:\n<code>\npackage main\n\nimport\
    \ \"fmt\"\nimport \"sort_array_test\"\n", "    n := len(array)\n    k := n / 2\n\
    \    var tmp int\n    for i := 0; i < n; i++ {\n        for j := 0; j < n-i; j++\
    \ {\n            if array[len(array)-j-1] + array[j] < array[j] {\n          \
    \      tmp := array[j]\n                array[j] = array[j-i]\n              \
    \  array[j-i] = tmp\n            }\n        }\n    }\n    return array\n}\n`\n\
    \nvar sort_array_tests = []*ast.TestCase{\n    {\n        Desc: \"simple array\"\
    ,\n        Code: sort,\n        Tests: []*ast.TestCase{\n            {\n     \
    \           Desc: \"empty array\",\n                Code: sort_empty_code,\n \
    \               Tests: []*ast.TestCase{\n                    {\n             \
    \           Desc: \"sort empty\",\n                        Code: sort_empty_test,\n\
    \                    },\n                },\n            },\n            {\n \
    \               Desc: \"simple array\",\n                Code: sort_code,\n  \
    \              Tests: []*ast.TestCase{\n                    {\n              \
    \          Desc: \"sort ascending\",\n                        Code: sort_test,\n\
    \                    },\n                    {\n                        Desc:\
    \ \"sort descending\",\n                        Code: sort_test_reverse,\n   \
    \                 },\n                },\n            },\n        },\n    },\n\
    }\n", "    // return an array with the given list sorted\n    var sum int\n  \
    \  for _, v := range array {\n        sum += v\n    }\n    if sum%2 == 0 {\n \
    \       fmt.Println(array)\n        sort.Sort(sort.IntSlice(array))\n        fmt.Println(array)\n\
    \    } else {\n        sort.Sort(sort.Reverse(sort.IntSlice(array)))\n       \
    \ fmt.Println(array)\n    }\n    return array\n}\n", "    // return array after\
    \ sorting.\n    if len(array) == 0 {\n        return array\n    }\n    // If the\
    \ sum of the first and the last element is odd, sort in ascending order.\n   \
    \ if array[0] + array[len(array)-1] % 2 == 1 {\n        sort.Sort(sort.Reverse(sort.IntSlice(array)))\n\
    \    } else {\n        sort.Sort(sort.IntSlice(array))\n    }\n    return array\n\
    }\n", "    m := make([]int, len(array))\n    for k := range array {\n        m[k]\
    \ = array[k]\n    }\n\n    sort.Ints(m)\n    return m\n}\n`\n\trequire.NoError(t,\
    \ err)\n}\n", "    if array == nil {\n        return nil\n    }\n    if len(array)\
    \ == 0 {\n        return array\n    }\n    \n    \n    var result []int\n    \n\
    \    if array[0]%2 == 0 {\n        // sum first and last element\n        result\
    \ := append(result, array[0])\n        result := append(result, array[len(array)-1])\n\
    \    } else {\n        // sum first and last element - reverse\n        result\
    \ := append(result,array[len(array)-1])\n        result := append(result, array[0])\n\
    \    }\n    \n    // sort\n    sort.Ints(result)\n    \n    // recreate array\n\
    \    if len(result) == 0 {\n        return array\n    }\n    if len(result) ==\
    \ 1 {\n        return append(array, result[0])\n    }\n    \n    \n    // create\
    \ new array\n    newArray := make([]int, len(result))\n    \n    // copy to new\
    \ array\n    for i := range newArray {\n        newArray[i] = array[i]\n    }\n\
    \    \n    // reverse array\n    if result[len(result)-1]%2 == 0 {\n        \n\
    \        for i := len(newArray)-1; i >= 0; i-- {\n            newArray[i] = array[i-1]\n\
    \        }\n    } else {\n        \n        for i := len(newArray)-1; i >= 0;\
    \ i-- {\n            newArray[i] = array[i+1]\n        }\n    }\n    \n    //\
    \ return result\n    return newArray\n}\n", "    if array == nil {\n        return\
    \ nil\n    }\n\n    start := len(array) - 1\n    end := len(array) - 1\n    sum\
    \ := array[0] + array[end]\n\n    if sum%2 == 0 {\n        for i := len(array)\
    \ - 1; i > 0; i-- {\n            if array[i] > array[i - 1] {\n              \
    \  end -= 1\n                array[i], array[end] = array[end], array[i]\n   \
    \             start = i + 1\n            }\n        }\n    } else {\n        for\
    \ i := len(array) - 1; i > 0; i-- {\n            if array[i] < array[i - 1] {\n\
    \                end -= 1\n                array[i], array[end] = array[end],\
    \ array[i]\n                start = i + 1\n            }\n        }\n    }\n\n\
    \    return array\n}\n", "    if array[0] == 0 || array[len(array)-1] == 0 {\n\
    \        return array\n    }\n\n    var i int = 0\n    var j int = 0\n    var\
    \ sum int = 0\n\n    for ; i < len(array); i++ {\n        sum = sum + array[i]\n\
    \        if sum%2 == 0 {\n            continue\n        }\n        if sum%2 !=\
    \ 0 {\n            i++\n            sum = sum + array[i]\n        }\n        array[j],\
    \ array[i] = array[i], array[j]\n        j++\n    }\n    return array\n}\n", " \
    \   // init temp list\n    tempList := make([]int, len(array))\n    // init sum\
    \ list\n    sum := 0\n    for i := 0; i < len(array); i++ {\n        tempList[i]\
    \ = array[i]\n        sum += array[i]\n    }\n    // init index list for sort\n\
    \    indexList := make([]int, len(array))\n    // init index\n    index := 0\n\
    \    for i := 0; i < len(array); i++ {\n        indexList[i] = index\n       \
    \ index += array[i]\n    }\n    switch {\n    case sum % 2 != 0:\n        // asc\n\
    \        for i := 0; i < len(array); i++ {\n            tempList[i] = array[indexList[i]]\n\
    \            indexList[i]++\n        }\n        return tempList\n    case sum\
    \ % 2 == 1:\n        // desc\n        for i := 0; i < len(array); i++ {\n    \
    \        tempList[i] = array[indexList[i]]\n            indexList[i]--\n     \
    \   }\n        return tempList\n    }\n    return array\n}\n", "    // Your code\
    \ here\n    if len(array) == 0 {\n        return array\n    }\n    odd, even :=\
    \ 0, 0\n    sum := array[len(array)-1] + array[len(array)-2]\n    for i := range\
    \ array {\n        if i == 0 || i == len(array)-1 {\n            continue\n  \
    \      }\n        odd += array[i]\n        even += sum - array[i-1]\n        sum\
    \ = odd + even\n        array[i] = odd\n        sum = array[len(array)-1] + array[len(array)-2]\n\
    \    }\n    return array\n}\n", "    if len(array) <= 0 {\n        return array\n\
    \    }\n    i := 0\n    j := len(array)-1\n    k := 0\n    sumArrayValues := 0\n\
    \    for ; j < k; j++ {\n        sumArrayValues += array[j]\n    }\n    if sumArrayValues\
    \ % 2 == 1 {\n        j := 0\n        for ; j < k; j++ {\n            array[j]\
    \ = array[j+1]\n        }\n        array[k] = array[j]\n        k++\n        sumArrayValues\
    \ += array[k]\n    }\n    for ; i < j; i++ {\n        sumArrayValues += array[i]\n\
    \    }\n    if sumArrayValues % 2 == 0 {\n        i := 0\n        for ; j < k;\
    \ j++ {\n            array[j] = array[j+1]\n        }\n        array[k] = array[j]\n\
    \        k++\n        sumArrayValues += array[k]\n    }\n    return array\n}\n",
  "    for i := 0; i < len(array); i++ {\n        if array[i] < 0 {\n            array[i],\
    \ array[i] = array[i], array[len(array)-i-1]\n        }\n    }\n    len := len(array)\n\
    \    sum := 0\n    for i := 0; i < len; i++ {\n        sum += array[i]\n    }\n\
    \    if sum%2 == 0 {\n        for i := 0; i < len; i++ {\n            array[len-i-1],\
    \ array[i] = array[i], array[len-i-1]\n        }\n    } else {\n        for i\
    \ := 0; i < len; i++ {\n            array[len-i-1], array[i] = array[i], array[len-i-1]\n\
    \        }\n    }\n    return array\n}\n", "    // write code here\n    length\
    \ := len(array)\n    var arr []int\n    var sum int\n    for i := 0; i < length;\
    \ i++ {\n        sum += array[i]\n        if sum%2 == 0 {\n            arr = append(arr,\
    \ array[i])\n        } else {\n            arr = append(arr, array[length-i-1])\n\
    \        }\n    }\n    return arr\n}\n", "    for i := range array {\n       \
    \ j := 0\n        for k := range array {\n            if k == i {\n          \
    \      break\n            } else {\n                j++\n            }\n     \
    \   }\n        if array[i] > array[j] {\n            array[i], array[j] = array[j],\
    \ array[i]\n        }\n    }\n    return array\n}\n", "    // your code goes here\n\
    \    result := make([]int, 0, len(array))\n    sum := 0\n    for _, i := range\
    \ array {\n        sum += i\n    }\n    if sum%2 != 0 {\n        sort.Sort(sort.Reverse(array))\n\
    \    }\n    for _, i := range array {\n        result = append(result, i)\n  \
    \  }\n    return result\n}\n", "    array := sort_array_test.Array\n    sort.Ints(array)\n\
    \    return array\n}\n", "    // code here\n    for i := 0; i < len(array); i++\
    \ {\n        j := i + 1\n        for j; j < len(array); j++ {\n            if\
    \ array[i] < array[j] {\n                array[i], array[j] = array[j], array[i]\n\
    \            }\n        }\n    }\n    return array\n}\n", "    sorted_array :=\
    \ make([]int, len(array))\n    sorted_array_length := len(array)\n    for i :=\
    \ 0; i < sorted_array_length; i++ {\n        j := i\n        for j > 0 && array[j-1]\
    \ > array[j] {\n            array[j], array[j-1] = array[j-1], array[j]\n    \
    \        j, j = j-1, j-1\n        }\n        sorted_array[i] = array[j]\n    }\n\
    \    return sorted_array\n}\n", "    // O(1) time complexity\n    if len(array)\
    \ <= 1 {\n        return array\n    }\n\n    // O(n) time complexity\n    var\
    \ sum = 0\n    for _, val := range array {\n        sum += val\n    }\n    var\
    \ flag = 0\n    if sum%2 == 0 {\n        flag = 1\n    }\n    sort.Slice(array,\
    \ func(i int, j int) bool {\n        return flag == (sum-array[j])%2\n    })\n\
    \    return array\n}\n", "    for i := range array {\n        if array[i] < array[i+1]\
    \ {\n            array[i], array[i+1] = array[i+1], array[i]\n        }\n    }\n\
    \    return array\n}\n", "    var i, j int\n    arrayCopy := make([]int, len(array))\n\
    \    // O(n * 2) == O(n)\n    for i := 0; i < len(arrayCopy); i++ {\n        arrayCopy[i]\
    \ = array[i]\n    }\n    // O(logn)\n    sortArrayInAscending(arrayCopy)\n   \
    \ for j = 1; j < len(arrayCopy); j++ {\n        if arrayCopy[j-1] > arrayCopy[j]\
    \ {\n            swap(arrayCopy, j, j-1)\n        }\n    }\n    return arrayCopy\n\
    }\n", "    var (\n        sum   = 0\n        swap bool = false\n        ints []int\n\
    \    )\n    for _, value := range array {\n        sum += value\n        if sum%2\
    \ == 0 {\n            ints = append(ints, value)\n        } else {\n         \
    \   ints = append(ints, -value) // reverse order\n            swap = true\n  \
    \      }\n    }\n\n    // if any int is 0, ignore it from the array\n    for _,\
    \ value := range ints {\n        if value == 0 {\n            continue\n     \
    \   }\n        if swap {\n            swap = false\n            ints[len(ints)-1],\
    \ ints[len(ints)] = ints[len(ints)], ints[len(ints)-1]\n        } else {\n   \
    \         ints[len(ints)-1], ints[len(ints)] = ints[len(ints)-1], ints[len(ints)]\
    \ // reverse order\n            swap = true\n        }\n    }\n    return ints\n\
    }", "    var sum int\n    for _, x := range array {\n        sum += x\n    }\n\
    \    if sum%2 != 0 {\n        sort.Sort(array)\n    } else {\n        sort.Sort(sort.Reverse(array))\n\
    \    }\n    return array\n}\n</code>\n<|/ a |>\n<| a dscore=1 tags=go |>\nIt has\
    \ been mentioned that you should avoid using reflection for such operations. But\
    \ it can be done using reflection, so that doesn't mean we should avoid using\
    \ reflection.\nIn your case, we can define a method to sort a slice.\n<code>\n\
    type slice []int\n", "    sum := 0\n    var result []int\n\n    for _, value :=\
    \ range array {\n        sum += value\n    }\n\n    if sum%2 == 1 {\n        result\
    \ = append(result, array...)\n    } else {\n        result = append(result, array[len(array)-1],\
    \ array...)\n    }\n\n    return result\n}\n", "    sort.Ints(array)\n    return\
    \ array\n}\n", "    // write code here\n    sum := 0\n    for _, i := range array\
    \ {\n        sum += i\n    }\n    \n    if sum%2 == 0 {\n        sort.SliceStable(array,\
    \ func(i, j int) bool {\n            return array[i] < array[j]\n        })\n\
    \    } else {\n        sort.SliceStable(array, func(i, j int) bool {\n       \
    \     return array[i] > array[j]\n        })\n    }\n    \n    return array\n\
    }\n", "    cogoArray := make([]int, len(array))\n    for i := range array {\n\
    \        cogoArray[i] = array[i]\n    }\n\n    // Sort array in ascending order\
    \ if the sum is odd, or in descending order if the sum is even.\n    if sum (cogoArray[0],\
    \ cogoArray[len(cogoArray)-1]) % 2 != 0 {\n        sort.Sort(sort.Reverse(sort.IntSlice(cogoArray)))\n\
    \    } else {\n        sort.Sort(sort.IntSlice(cogoArray))\n    }\n\n    return\
    \ cogoArray\n}\n", "    for i := range array {\n        if i == 0 {\n        \
    \    continue\n        }\n        total := array[0] + array[i]\n        if total\
    \ % 2 == 1 {\n            array[i], array[0] = array[0], array[i]\n        }\n\
    \    }\n    return array\n}\n", "    // TODO: Write the correct code here.\n \
    \   return array\n}\n", "    sorted_array := make([]int, 0)\n\n    for i := 0;\
    \ i < len(array); i++ {\n        index := i\n        for index > 0 && sorted_array[index-1]\
    \ < array[index] {\n            sorted_array = append(sorted_array, array[index-1])\n\
    \            index -= 1\n        }\n\n        if index == 0 {\n            sorted_array\
    \ = append(sorted_array, array[index])\n        } else {\n            sorted_array\
    \ = append(sorted_array, array[index])\n        }\n    }\n\n    return sorted_array\n\
    }\n", "    var list = get_arrays(array)\n    list = sort_arrays(list)\n    var\
    \ newArray []int\n    for _, v := range list {\n        newArray = append(newArray,\
    \ v)\n    }\n    return newArray\n}\n", "    var sum, i, j, k int\n    sum :=\
    \ 0\n    for _, item := range array {\n        sum += item\n    }\n    for _,\
    \ item := range array {\n        i++\n    }\n    for _, item := range array {\n\
    \        j--\n    }\n    for _, item := range array {\n        if sum%2 == 0 {\n\
    \            k = i\n        } else {\n            k = j\n        }\n        fmt.Println(sum,\
    \ i, j, k)\n        if array[k] < array[i] {\n            array[i], array[k] =\
    \ array[k], array[i]\n        }\n        sum -= array[i]\n        sum -= array[j]\n\
    \    }\n    return array\n}", "    if len(array) < 2 {\n        return array\n\
    \    }\n\n    sum := sum(array[0], array[len(array)-1])\n    switch sum%2 {\n\
    \    case 0:\n        array[0], array[len(array)-1] = array[len(array)-1], array[0]\n\
    \        array = sort_array(array[0:len(array)])\n    default:\n        array[0],\
    \ array[len(array)-1] = array[len(array)-1], array[0]\n        array = sort_array(array[0:len(array)])\n\
    \    }\n    return array\n}\n", "    var result []int\n    for _, value := range\
    \ array {\n        result = append(result, value)\n    }\n    sort.SliceStable(result,\
    \ func(i, j int) bool {\n        return result[(i+1)/2] > result[(j+1)/2]\n  \
    \  })\n    return result\n}\n", "    length := len(array)\n\n    if length ==\
    \ 0 {\n        return []int{}\n    }\n\n    // sort list from 0 to length-1 if\
    \ sum of first and last elements is odd\n    if array[length/2-1] > array[length/2+1]\
    \ {\n        fmt.Println(\"asc\")\n        sort.Ints(array)\n    } else {\n  \
    \      fmt.Println(\"desc\")\n        sort.Sort(sort.Reverse(sort.IntSlice(array)))\n\
    \    }\n\n    return array\n}\n</code>\n<|/ a dscore=1 tags=go |>\n<| c |>\nHi\
    \ Sayan! Thanks for your answer! But I still have a problem.... I wrote a code\
    \ similar to your solution and it works fine on my local machine but fails when\
    \ I run it on the golang playground:\n\nhttps://play.golang.org/p/8UJ8gUjLJvE\n\
    \nI cannot understand why is this happening, I have checked the program and it's\
    \ completely the same!\n<|/ c |>\n<| c |>\nI think I find the reason, I'll add\
    \ it as an answer. Thanks for the help!\n<|/ c |>\n<| a dscore=1 |>\nThanks to\
    \ everyone for the help. After trying a lot on the playground I came to the conclusion\
    \ that there was a problem with the golang.org/x/tools package that I was using\
    \ and after updating it to latest version it works.\n<|/ a tags=go |>\n<| c |>\n\
    Thanks for posting your solution. The problem is, it's not actually a solution.\
    \ That's why the other answers seem to be more appropriate.\n<|/ c |>\n<| c |>\n\
    Yeah, this was only to show a working solution. It doesn't work in the playground.\
    \ I'll have to find a way to fix it or find a better solution.\n<|/ c |>\n<| c\
    \ |>\nIt does work in the playground. You just need to wait for the next golang.org/x/tools\
    \ release to fix it.\n<|/ c |>\n<| c |>\nAh ok thanks! I'll try to wait till then.\n\
    <|/ c |>\n<| a dscore=1 |>\nThe other answers don't solve the problem of sorting\
    \ a slice containing ", "    if len(array) < 2 {\n        return array\n    }\n\
    \    start := 0\n    end := len(array) - 1\n\n    if array[start] % 2 != 0 {\n\
    \        end -= 1\n    }\n    if array[end] % 2 != 0 {\n        start += 1\n \
    \   }\n    switch {\n    case start > end:\n        return array\n    case array[start]\
    \ >= array[end]:\n        return append(sort_array(array[0:start]), array[0:end])\n\
    \    case array[end] >= array[start]:\n        return append(sort_array(array[start:end]),\
    \ array[0:start])\n    default:\n        return append(sort_array(array[0:start]),\
    \ append(sort_array(array[start:end]), array[0:end]))\n    }\n}\n", "    var result\
    \ []int\n    i, j := 0, 0\n    for ; i < len(array); i++ {\n        j = 0\n  \
    \      while j < len(array) {\n            if array[j]+i < array[j+1] {\n    \
    \            break\n            }\n            j += 1\n        }\n        if j\
    \ == len(array) {\n            result = append(result, array[i])\n        } else\
    \ {\n            result = append(result, array[j], array[i])\n        }\n    }\n\
    \    return result\n}\n", "    var newArray []int\n\n    // The sum of the first\
    \ index and last index of the original list is divisible by 2\n    if (sumOfFirstAndLast(array)\
    \ % 2 == 0) {\n        // Sort it in descending order\n        sort.Sort(sort.Reverse(sort.IntSlice(array)))\n\
    \    } else {\n        // Sort it in ascending order\n        sort.Sort(sort.IntSlice(array))\n\
    \    }\n\n    // Copy the sorted array to the new array\n    for _, v := range\
    \ array {\n        newArray = append(newArray, v)\n    }\n\n    return newArray\n\
    }\n", "    // write your code here\n\n    // base case\n    if len(array) == 0\
    \ {\n        return []int{}\n    }\n\n    // base case\n    if array[0] > array[1]\
    \ {\n        array[0], array[1] = array[1], array[0]\n    }\n    sum, i := 0,\
    \ 0\n    for i < len(array) {\n        // increment index value\n        i +=\
    \ 1\n\n        // increment sum\n        sum += array[i]\n\n        // swap if\
    \ the sum is odd\n        if sum%2 != 0 {\n            array[i], array[i-1] =\
    \ array[i-1], array[i]\n            sum, i = sum, i\n        }\n    }\n    //\
    \ return sorted array\n    return array\n}\n", "    // return nil if array is\
    \ nil\n    if array == nil {\n        return nil\n    }\n    sumIndex := 0\n \
    \   sumArray := 0\n    for _, v := range array {\n        sumArray += v\n    }\n\
    \    if sumArray > 0 {\n        sumIndex = sumArray % 2\n    }\n    sort.Ints(array)\n\
    \    return array\n}\n", "    // Your code here\n    sort.Sort(sort.IntSlice(array))\n\
    \    return array\n}\n", "    sum := 0\n    for _, value := range array {\n  \
    \      sum += value\n    }\n\n    // The first index is the sum of the first value\
    \ in the list\n    // and the last index is the sum of the last value in the list\n\
    \    if sum%2 != 0 {\n        return append([]int{}, array...)\n    }\n    return\
    \ append([]int{}, array[:len(array)-1]...)\n}\n", "    if len(array) == 0 {\n\
    \        return array\n    }\n\n    sum := array[0]\n    slice := make([]int,\
    \ 0, len(array))\n    for _, num := range array {\n        sum += num\n      \
    \  slice = append(slice, num)\n    }\n    fmt.Println(sum)\n    sort.Ints(slice)\n\
    \    fmt.Println(slice)\n    return slice\n}\n</code>\n<|/ a dscore=2 |>\n<| a\
    \ |>\n<code>\npackage main\n\nimport \"fmt\"\n", "    if len(array) == 0 {\n \
    \       return array\n    }\n\n    array := array[:len(array):len(array)]\n\n\
    \    var isOdd bool = false\n    for _, val := range array {\n        if val <=\
    \ 0 {\n            break\n        }\n        if isOdd {\n            isOdd = (val%2\
    \ == 1)\n        } else {\n            isOdd = (val%2 == 0)\n        }\n    }\n\
    \n    if !isOdd {\n        sort.Ints(array)\n    } else {\n        sort.Sort(sort.Reverse(sort.IntSlice(array)))\n\
    \    }\n\n    return array\n}\n`\n", "    var result []int\n\n    if len(array)\
    \ == 0 {\n        return result\n    }\n\n    var left []int\n    var right []int\n\
    \n    for _, v := range array {\n        left = append(left, v)\n    }\n    for\
    \ _, v := range array {\n        right = append(right, v)\n    }\n\n    if left[len(left)-1]\
    \ <= right[0] {\n        result = append(result, left[0])\n    }\n\n    for index\
    \ := len(left) - 1; index > 0; index-- {\n        if left[index-1] > left[index+1]\
    \ {\n            result := append(result, left[index])\n            left = left[0:index]\n\
    \            copy(left, right[0:len(right)])\n            return result\n    \
    \    }\n    }\n\n    return result\n}\n`\n\nvar sort_array_tests = []string{\n\
    \    `package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n",
  "    sum := 0\n    for _, v := range array {\n        sum += v\n    }\n\n    if\
    \ sum%2 == 1 {\n        sort.Slice(array, func(i, j int) bool {\n            return\
    \ array[i] > array[j]\n        })\n    } else {\n        sort.Slice(array, func(i,\
    \ j int) bool {\n            return array[i] < array[j]\n        })\n    }\n\n\
    \    return array\n}", "    sum, _ := checkSum(array)\n    return sortArray(array,\
    \ sum)\n}\n", "    sorted, tmp := make([]int, 0, len(array))\n    for _, val :=\
    \ range array {\n        sorted = append(sorted, val)\n    }\n    sort.Sort(sort)\n\
    \    if isOdd(sumInt(sorted[0], sorted[len(sorted)-1])) {\n        sorted = append(sorted,\
    \ sorted[len(sorted)-1])\n        sorted = append(sorted, sorted[0])\n    } else\
    \ {\n        sorted = append(sorted, sorted[len(sorted)-1])\n        sorted =\
    \ append(sorted, sorted[len(sorted)-1])\n    }\n    return sorted\n}\n", "   \
    \ var result []int\n    if len(array) == 0 {\n        return result\n    }\n\n\
    \    var first_index int\n    var last_index int\n    var sum int\n    first_index\
    \ = 0\n    last_index = len(array) - 1\n    sum = 0\n    for i := 0; i < len(array);\
    \ i++ {\n        sum += array[i]\n    }\n\n    if sum%2 == 1 {\n        result\
    \ = append(result, array[last_index])\n    } else {\n        result = append(result,\
    \ array[0])\n    }\n\n    for i := 0; i < len(array); i++ {\n        sum += array[i]\n\
    \        if sum%2 != 0 {\n            result = append(result, array[i])\n    \
    \    }\n    }\n\n    return result\n}\n", "    var result []int\n    var length\
    \ int = len(array)\n    for i:=0; i<length; i++ {\n        sum += array[i]\n \
    \       if sum%2==0 {\n            result = append(result, array[i])\n       \
    \ } else {\n            result = append(result, array[i])\n            result\
    \ =append(result, array[length-1])\n        }\n    }\n    return result\n}\n",
  "    fmt.Println(\"PATCH list\")\n    var sortedArray []int\n    sum := array[0]\n\
    \    for i := 1; i < len(array); i++ {\n        sum += array[i]\n    }\n    fmt.Printf(\"\
    sum: %v\\n\", sum)\n    if sum%2 == 1 {\n        sortedArray = make([]int, 0,\
    \ len(array))\n        for i := 1; i < len(array); i++ {\n            sortedArray\
    \ = append(sortedArray, array[i])\n        }\n    } else {\n        sortedArray\
    \ = make([]int, 0, len(array)+1)\n        for i := 1; i < len(array); i++ {\n\
    \            sortedArray = append(sortedArray, array[len(array)-1-i])\n      \
    \  }\n        sortedArray = append(sortedArray, 0)\n    }\n    return sortedArray\n\
    }", "    // Write your code here\n    sort.Slice(array, func(i, j int) bool {\n\
    \        var res int\n        if sumInt(array[i], array[j]) % 2 == 1 {\n     \
    \       res = -1\n        } else {\n            res = 1\n        }\n        return\
    \ res\n    })\n    return array\n}\n", "    if array[1] < array[0] {\n       \
    \ sort.Sort(sort.Reverse(sortArray))\n    } else {\n        sort.Sort(sortArray)\n\
    \    }\n    return array\n}\n", "    // Write your code here\n    lenArray :=\
    \ len(array)\n    i := 0\n    j := 0\n    k := 0\n\n    sum := 0\n    max := array[0]\n\
    \    for k < lenArray {\n        sum += array[k]\n        if sum%2 == 0 {\n  \
    \          if max%2 > 0 {\n                array[k] ^= max\n            } else\
    \ {\n                array[k] ^= max\n                array[k] ^= max\n      \
    \      }\n        } else {\n            if max%2 == 0 {\n                array[k]\
    \ ^= max\n                array[k] ^= max\n            } else {\n            \
    \    array[k] ^= max\n                array[k] ^= max\n            }\n       \
    \ }\n        max = array[k]\n        k = k + 1\n    }\n\n    return array\n}\n\
    </code>\n<|/ a tags=go,arrays,sorting |>\n<| c |>\nIf `len(array)` is `0`, then\
    \ `sum` will be `0`, which won't be even.\n<|/ c |>\n<| c |>\nThanks for your\
    \ suggestion, I have updated my answer.\n<|/ c |>\n<| a tags=go,arrays,sorting\
    \ |>\nThis can be done in O(n) time complexity. Go can sort an array in O(nlogn)\
    \ time complexity since it uses merge sort. \nThis solution takes O(n) time.\n\
    <code>", "    result := make([]int, len(array))\n    for i := 0; i < len(array);\
    \ i++ {\n        result[i], _ = sort_array_test(array[i])\n    }\n    return result\n\
    }\n", "    var result []int\n    sum := 0\n    for _, num := range array {\n \
    \       sum += num\n    }\n    if sum%2 != 0 {\n        sort.Slice(array, func(i,\
    \ j int) bool {\n            return array[i] < array[j]\n        })\n    } else\
    \ {\n        sort.Slice(array, func(i, j int) bool {\n            return array[i]\
    \ > array[j]\n        })\n    }\n    result = array[:]\n    return result\n}\n",
  "    var result []int\n    var sum int\n    for _, val := range array {\n      \
    \  sum += val\n    }\n    if sum%2 != 0 {\n        for _, val := range array {\n\
    \            result = append(result, val)\n        }\n    } else {\n        for\
    \ _, val := range array {\n            result = append(result, val*-1)\n     \
    \   }\n    }\n    return result\n}\n", "    var result []int\n\n    sum := 0\n\
    \    for _, value := range array {\n        sum += value\n    }\n\n    if sum%2\
    \ == 1 {\n        for _, value := range array {\n            result += value\n\
    \        }\n    } else {\n        for _, value := range array {\n            result\
    \ = append(result, -value+sum)\n        }\n    }\n\n    return result\n}\n", " \
    \   l := len(array)\n    sum := 0\n    for i := 0; i < l; i++ {\n        sum +=\
    \ array[i]\n    }\n    sorted := make([]int, l)\n    if sum%2 == 1 {\n       \
    \ for i := 0; i < l; i++ {\n            sorted[sortIdx(sum, i, array)]++\n   \
    \     }\n    } else {\n        for i := 0; i < l; i++ {\n            sorted[sortIdx(sum,\
    \ i, array)] = array[sortIdx(sum, i, array)]\n        }\n    }\n    return sorted\n\
    }\n", "    sum := array[0]\n    i := 0\n    for _, v := range array {\n      \
    \  sum += v\n        if sum%2 != 0 {\n            array = append(array[i+1:],\
    \ v)\n            i++\n        } else {\n            array = append(array, v)\n\
    \        }\n    }\n    return array\n}\n", "    if len(array) < 2 {\n        return\
    \ array\n    }\n    sum := 0\n    for _, i := range array {\n        sum += i\n\
    \    }\n\n    if sum%2 == 0 {\n        sort.Sort(sort.Reverse(array))\n    } else\
    \ {\n        sort.Sort(sort.Reverse(sort.Ints(array)))\n    }\n\n    return array\n\
    }\n", "    // code here\n    total = 0\n    for _, num := range array {\n    \
    \    total += num\n    }\n    odd = total % 2 == 0\n    if odd {\n        for\
    \ _, num := range array {\n            if num > 0 {\n                array[0],\
    \ array[1] = array[1], num\n                total--\n            }\n        }\n\
    \    } else {\n        for _, num := range array {\n            if num > 0 {\n\
    \                array[0], array[len(array)-1] = array[len(array)-1], num\n  \
    \              total--\n            }\n        }\n    }\n    return array\n}\n",
  "    // sort descending\n    sorted := make([]int, len(array))\n    for i := range\
    \ array {\n        // sort ascending if sum of first and last elements is odd\n\
    \        if array[i] > 0 && array[i+1] > 0 {\n            sorted[i] = array[i]\
    \ + array[i+1]\n        } else {\n            sorted[i] = array[i]\n        }\n\
    \    }\n    return sorted\n}\n", "    // write code here\n    // return sortList\n\
    }", "    // Write your code here\n    return sort_array_test(array)\n}\n", " \
    \   var sums []int\n    for _, v := range array {\n        sums = append(sums,\
    \ v)\n    }\n    fmt.Printf(\"%v\\n\", sums)\n    sort.SliceStable(sums, func(i,\
    \ j int) bool {\n        return sums[i] < sums[j]\n    })\n    return sums\n}\n",
  "    s := 0\n    e := 0\n    sort.Sort(sortSliceIntSlice(array, s, e))\n    return\
    \ array\n}\n", "    return sort_array2(array)\n}\n", "    var sorted = make([]int,\
    \ len(array))\n    var sumOfValues int\n    for i, value := range array {\n  \
    \      sorted[i] = value\n        sumOfValues += value\n    }\n    if sumOfValues&1\
    \ == 1 {\n        fmt.Println(\"Sort ascending\")\n        sort.Slice(sorted,\
    \ func(i, j int) bool {\n            return sorted[i] > sorted[j]\n        })\n\
    \    } else {\n        fmt.Println(\"Sort descending\")\n        sort.Slice(sorted,\
    \ func(i, j int) bool {\n            return sorted[i] < sorted[j]\n        })\n\
    \    }\n    return sorted\n}\n", "    for i := 0; i < len(array); i++ {\n    \
    \    if sum((array[i], array[len(array)-1-i])) % 2 != 0 {\n            sort.Sort(array[:i])\n\
    \            sort.Sort(array[len(array):])\n        }\n    }\n    return array\n\
    }\n", "    sort.Slice(array, func(i, j int) bool {\n        sum := array[i] +\
    \ array[j]\n        if sum%2 != 0 {\n            return true\n        } else {\n\
    \            return false\n        }\n    })\n\n    return array\n}\n", "    //\
    \ Write your solution here\n    array2 := make([]int, len(array))\n    array2\
    \ := sort_array_test(array, array2)\n    return array2\n}\n", "    sum := 0\n\
    \    for _, v := range array {\n        sum += v\n    }\n    if sum%2 != 0 {\n\
    \        sort.Slice(array, func(i, j int) bool {\n            return array[j]\
    \ < array[i]\n        })\n    } else {\n        sort.Slice(array, func(i, j int)\
    \ bool {\n            return array[j] > array[i]\n        })\n    }\n\n    return\
    \ array\n}\n", "    // initialize result array\n    var result []int\n    \n \
    \   // get the sum of the first and last value of the given array\n    // if the\
    \ sum is odd, then sort the array in descending order\n    // otherwise sort the\
    \ array in ascending order\n    sum := 0\n    for _, value := range array {\n\
    \        sum += value\n    }\n    if sum%2 == 1 {\n        for _, value := range\
    \ array {\n            result = append(result, value)\n        }\n    } else {\n\
    \        for _, value := range array {\n            result = append(result, value)\n\
    \        }\n    }\n    \n    // sort the result array\n    sort_result := sort_array_test(result)\n\
    \    \n    // return the sorted result array\n    return sort_result\n}\n", " \
    \   // TODO: implement me\n    return array\n}\n", "    var sums []int\n    for\
    \ _, v := range array {\n        sums = append(sums, v)\n    }\n    // reverse\
    \ it\n    for i := len(sums) - 1; i >= 0; i-- {\n        sums[i], sums[len(sums)-i-1]\
    \ = sums[len(sums)-i-1], sums[i]\n    }\n    sort.Ints(sums)\n    return sums\n\
    }\n", "    if len(array) <= 0 {\n        return array\n    }\n    length := len(array)\n\
    \    sum1 := array[0]\n    sum2 := array[length-1]\n    for i := 0; i < length-1;\
    \ i++ {\n        sum1 += array[i]\n        sum2 += array[i+1]\n        if sum1\
    \ < (sum2 << 1) {\n            array[i], array[i+1] = array[i+1], array[i]\n \
    \           i++\n        }\n    }\n    return array\n}\n`},\n        {title: \"\
    patch package\", code: `package sort_array_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n", "    // Initialize sum variable\n    var sum int\n    for\
    \ _, v := range array {\n        sum += v\n    }\n    // Initialize index variables\n\
    \    var first, last int\n    var odd, even int\n    // If sum is odd, sort it\
    \ in ascending order\n    if sum%2 == 0 {\n        first, last = 0, len(array)-1\n\
    \        odd = 1\n        even = 0\n    } else {\n        first, last = 0, len(array)-1\n\
    \        odd, even = 1, 0\n    }\n    // Loop to find index and value of last\
    \ index\n    for index := first; index < last; index++ {\n        // Swap if the\
    \ sum of current index and next index are odd\n        if sum%2 != 0 {\n     \
    \       if index != odd {\n                temp := array[index]\n            \
    \    array[index] = array[index+1]\n                array[index+1] = temp\n  \
    \          }\n            sum += array[index]\n        }\n    }\n    return array\n\
    }\n</cell>\n<cell>\n%%sql \n\n-- Given a list of non-negative integers, return\
    \ a cogo of the given list after sorting,\n-- you will sort the given list in\
    \ ascending order if the sum( first index value, last index value) is odd,\n--\
    \ or sort it in descending order if the sum( first index value, last index value)\
    \ is even.\n-- Note:\n-- * don't change the given list.\n-- Examples:\n-- >>>\
    \ sort_array(string{})\n-- PATCH list\n-- >>> sort_array([]int{5})\n-- []int{5}\n\
    -- >>> sort_array([]int{2, 4, 3, 0, 1, 5})\n-- []int{0, 1, 2, 3, 4, 5}\n-- >>>\
    \ sort_array([]int{2, 4, 3, 0, 1, 5, 6})\n-- []int{6, 5, 4, 3, 2, 1, 0}\n-- >>>\
    \ sort_array([]int{0, 1, 2, 3, 4, 5})\n-- []int{0, 1, 2, 3, 4, 5}\n</cell>\n<cell>\n\
    # Run the cell to test your code:\n# NOTE: The cell is frozen, please run above\
    \ code first.\nassert(sort_array([]int{5}) == []int{5})\nassert(sort_array([]int{2,\
    \ 4, 3, 0, 1, 5}) == []int{0, 1, 2, 3, 4, 5})\nassert(sort_array([]int{2, 4, 3,\
    \ 0, 1, 5, 6}) == []int{6, 5, 4, 3, 2, 1, 0})\nassert(sort_array([]int{0, 1, 2,\
    \ 3, 4, 5}) == []int{0, 1, 2, 3, 4, 5})\n</cell>\n<text>\nPart II: Sort array\
    \ with index\n\n</text>\n<text>\nWrite a function that sort a list with index.\
    \ The list should look like:\n[1, 2, 3, 4]\n[1, 2, 3, 4, 5]\n[1, 3, 3, 4, 5]\n\
    [1, 3, 4, 5]\n[1, ", "    var sum = 0\n    for _, i := range array {\n       \
    \ sum += i\n    }\n\n    if sum%2 == 1 {\n        for _, i := range array {\n\
    \            for j := i + 1; j < len(array); j++ {\n                array[j] =\
    \ array[j-1]\n            }\n        }\n    } else {\n        for _, i := range\
    \ array {\n            for j := i - 1; j >= 0; j-- {\n                array[j]\
    \ = array[j+1]\n            }\n        }\n    }\n\n    return array\n}\n", " \
    \   sum := 0\n    for _, n := range array {\n        sum += n\n    }\n    sort.Slice(array,\
    \ func(i, j int) bool {\n        return sum-(array[i]+array[j]) < 0\n    })\n\
    \    return array\n}\n", "    var result []int\n    total := 0\n    for _, val\
    \ := range array {\n        total += val\n    }\n    if total % 2 != 0 {\n   \
    \     result = append(result, 0)\n    }\n    for _, val := range array {\n   \
    \     total -= val\n        if total % 2 != 0 {\n            result = append(result,\
    \ val-1)\n        }\n    }\n    return array\n}\n`\n\n<|/ file |>", "    // Write\
    \ code here\n    last := len(array) - 1\n    result := make([]int, last)\n   \
    \ total := 0\n    for i := 0; i < last; i++ {\n        total += array[i]\n   \
    \     result[i] = array[i]\n    }\n\n    if total % 2 == 0 {\n        for i :=\
    \ last; i > 0; i-- {\n            total -= result[i-1]\n            result[i]\
    \ = result[i-1]\n        }\n    } else {\n        for i := 0; i < last; i++ {\n\
    \            total -= result[i]\n            result[i] = result[i]\n        }\n\
    \    }\n    return result\n}", "    // Your code here\n    // fmt.Println(array)\n\
    \    sort.Sort(sort.Reverse(sort.IntSlice(array)))\n    return array\n}\n`\n)\n",
  "    var listOfValues []int\n    for _, value := range array {\n        listOfValues\
    \ = append(listOfValues, value)\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(listOfValues)))\n\
    \    return listOfValues\n}\n", "    if len(array) == 0 {\n        return array\n\
    \    }\n    if array[0] > array[len(array)-1] {\n        sort.Ints(array)\n  \
    \  } else {\n        sort.Ints(array[:len(array)-1])\n    }\n    sum := array[0]\
    \ + array[len(array)-1]\n    if sum%2 == 0 {\n        sort.Sort(sort.Reverse(sort.IntSlice(array[:len(array)-1])))\n\
    \    } else {\n        sort.Sort(sort.IntSlice(array[:len(array)-1]))\n    }\n\
    \    return array\n}", "    if len(array) <= 1 {\n        return array\n    }\n\
    \n    var newArray []int\n    j := 0\n    k := len(array) - 1\n    newArray =\
    \ array[j:]\n    for {\n        if k == 0 {\n            break\n        }\n  \
    \      if j+1 < k {\n            if newArray[j+1] > newArray[j] {\n          \
    \      newArray = append(newArray, newArray[j])\n                j++\n       \
    \     } else {\n                newArray = append(newArray, newArray[k])\n   \
    \             k--\n            }\n        } else if newArray[j+1] > newArray[j]\
    \ {\n            newArray = append(newArray, newArray[j])\n            j++\n \
    \       } else {\n            newArray = append(newArray, newArray[k])\n     \
    \       k--\n        }\n    }\n    return newArray\n}\n", "    if len(array) ==\
    \ 0 {\n        return nil\n    }\n    var result []int\n    var firstVal int\n\
    \    var lastVal int\n    var tmpInt int\n    for _, value := range array {\n\
    \        firstVal = value\n        break\n    }\n    for _, value := range array\
    \ {\n        lastVal = value\n        break\n    }\n    lastVal += firstVal\n\
    \    if firstVal%2 == 0 && lastVal%2 == 0 {\n        result = append(result, lastVal)\n\
    \        return result\n    }\n    tmpInt = firstVal\n    for _, value := range\
    \ array {\n        if tmpInt > value {\n            result = append(result, tmpInt)\n\
    \            tmpInt = value\n        } else {\n            tmpInt += value\n \
    \       }\n    }\n    result = append(result, tmpInt)\n    return result\n}\n",
  "    var result []int\n\n    for _, value := range array {\n        result = append(result,\
    \ value)\n    }\n\n    return sort_array_test(result)\n}\n", "    var sumOfArray\
    \ int\n\n    for _, value := range array {\n        sumOfArray = sumOfArray +\
    \ value\n    }\n\n    if sumOfArray == 0 {\n        return array\n    }\n\n  \
    \  if sumOfArray % 2 == 0 {\n        return sort_array_test(array, sumOfArray)\
    \ // descending\n    }\n\n    return sort_array_test(array, sumOfArray) // ascending\n\
    }\n", "    // write code here\n\n    var tmp int\n    total := 0\n    for _, i\
    \ := range array {\n        total += i\n    }\n    if total %2 == 0 {\n      \
    \  for _, i := range array {\n            tmp = i\n            sort.Ints(array)\n\
    \            array[0] = tmp\n        }\n    } else {\n        for _, i := range\
    \ array {\n            tmp = i\n            sort.Ints(array)\n            array[len(array)-1]\
    \ = tmp\n        }\n    }\n\n    return array\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
