language: go_test.go
name: HumanEval_155_even_odd_count
results:
- exit_code: null
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    sum := 0\n    even := 0\n    odd := 0\n    if num\
    \ >= 0 {\n        num /= 10\n    }\n    for {\n        sum += num\n        if\
    \ sum % 2 == 0 {\n            even++\n        } else {\n            odd++\n  \
    \      }\n        if sum < 0 {\n            break\n        }\n        num /= 10\n\
    \    }\n    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Count(t *testing.T)\
    \ {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074595
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    arr := make([]interface{}, 0)\n    sum := 0\n    for\
    \ i := 0; i < num; i++ {\n        sum = (sum * 10) + (num % 10)\n        num /=\
    \ 10\n    }\n    for i := 0; i < 10; i++ {\n        if ((sum + i)%2 != 0) {\n\
    \            arr = append(arr, sum+i)\n        }\n    }\n    return arr\n}\n\n\
    func TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n\
    \     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual:\
    \ candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected:\
    \ []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmp3qjksalh_test.go:49: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15)]'\n    --- FAIL:\
    \ TestEven_Odd_Count/test_num__1 (0.00s)\n        tmp3qjksalh_test.go:49: expected\
    \ '[%!s(int=1) %!s(int=1)]', got '[%!s(int=1) %!s(int=3) %!s(int=5) %!s(int=7)\
    \ %!s(int=9)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n       \
    \ tmp3qjksalh_test.go:49: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=255)\
    \ %!s(int=257) %!s(int=259) %!s(int=261) %!s(int=263)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3\
    \ (0.00s)\n        tmp3qjksalh_test.go:49: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=11265) %!s(int=11267) %!s(int=11269) %!s(int=11271) %!s(int=11273)]'\n\
    \    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmp3qjksalh_test.go:49:\
    \ expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=1) %!s(int=3) %!s(int=5) %!s(int=7)\
    \ %!s(int=9)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n       \
    \ tmp3qjksalh_test.go:49: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=1)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=9)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmp3qjksalh_test.go:49: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=1) %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=9)]'\n    --- FAIL:\
    \ TestEven_Odd_Count/test_num__7 (0.00s)\n        tmp3qjksalh_test.go:49: expected\
    \ '[%!s(int=1) %!s(int=0)]', got '[%!s(int=1) %!s(int=3) %!s(int=5) %!s(int=7)\
    \ %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074586
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    list := make([]interface{}, 0)\n    for i := 0; i\
    \ < num; {\n        // get the digit\n        d := num % 10\n\n        // if the\
    \ digit is even\n        if d%2 == 0 {\n            // append the digit\n    \
    \        list = append(list, d)\n\n            // if even number has ended\n \
    \           if i != num {\n                // get the next digit\n           \
    \     i++\n            }\n        } else {\n            // append a space\n  \
    \          list = append(list, \" \")\n\n            // if odd number has ended\n\
    \            if i != num {\n                // get the next digit\n          \
    \      i++\n            }\n        }\n    }\n    return list\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.12s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmpdibj7q53_test.go:64: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[             ]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n\
    \        tmpdibj7q53_test.go:64: expected '[%!s(int=1) %!s(int=1)]', got '[]'\n\
    \    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmpdibj7q53_test.go:64:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(i"
  timestamp: 1660074586
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even_list, odd_list := make([]interface{}, 0, 0),\
    \ make([]interface{}, 0, 0)\n    str_num := fmt.Sprintf(\"%d\", num)\n    for\
    \ _, n := range str_num {\n        if n%2 == 0 {\n            even_list = append(even_list,\
    \ n)\n        } else {\n            odd_list = append(odd_list, n)\n        }\n\
    \    }\n    return even_list, odd_list\n}\n\nfunc TestEven_Odd_Count(t *testing.T)\
    \ {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpxwc4edkg_test.go:24:23:\
    \ too many return values\n\thave ([]interface{}, []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074585
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    n := make([]int, 0)\n    i := 0\n    for num > 0 {\n\
    \        n := append(n, num%10)\n        num /= 10\n    }\n\n    for i := 0; i\
    \ < len(n); i += 2 {\n        n[i+1] = n[i]\n    }\n\n    return n\n}\n\nfunc\
    \ TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n\
    \     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual:\
    \ candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected:\
    \ []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwoj14mln_test.go:16:5: i declared but not used

    /tmp/tmpwoj14mln_test.go:18:9: n declared but not used

    /tmp/tmpwoj14mln_test.go:26:12: cannot use n (variable of type []int) as type
    []interface{} in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074585
- exit_code: null
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    // Initialize list\n    result := []interface{}{}\n\
    \n    // Find even digits\n    for i := 0; num > 0; i++ {\n        if num % 2\
    \ == 0 {\n            result = append(result, fmt.Sprintf(\"%d\", i))\n      \
    \      num /= 2\n        }\n    }\n\n    // Find odd digits\n    for i := 0; num\
    \ > 0; i++ {\n        if num % 2 == 1 {\n            result = append(result, fmt.Sprintf(\"\
    %d\", i))\n            num /= 2\n        }\n    }\n\n    return result\n}\n\n\
    func TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n\
    \     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual:\
    \ candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected:\
    \ []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074595
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    odd_count := 0\n    even_count := 0\n    for i :=\
    \ 0; i < num; i++ {\n        if num % 2 == 0 {\n            even_count++\n   \
    \     } else {\n            odd_count++\n        }\n    }\n    list := make([]interface{},\
    \ 2)\n    list[0] = even_count\n    list[1] = odd_count\n    return list\n}\n\n\
    func TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n\
    \     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual:\
    \ candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected:\
    \ []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmpxmzi7hfg_test.go:50: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=7)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmpxmzi7hfg_test.go:50: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmpxmzi7hfg_test.go:50: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=3452) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3\
    \ (0.00s)\n        tmpxmzi7hfg_test.go:50: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=346211)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmpxmzi7hfg_test.go:50: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmpxmzi7hfg_test.go:50: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmpxmzi7hfg_test.go:50: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpxmzi7hfg_test.go:50: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074586
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    // Implement me\n    return nil\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmpimbemuuq_test.go:39: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpimbemuuq_test.go:39:\
    \ expected '[%!s(int=1) %!s(int=1)]', got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmpimbemuuq_test.go:39: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmpimbemuuq_test.go:39:\
    \ expected '[%!s(int=3) %!s(int=3)]', got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmpimbemuuq_test.go:39: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpimbemuuq_test.go:39:\
    \ expected '[%!s(int=1) %!s(int=0)]', got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmpimbemuuq_test.go:39: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpimbemuuq_test.go:39:\
    \ expected '[%!s(int=1) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074586
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    result := make([]interface{},\
    \ 0)\n    for i := 0; i < num; i++ {\n        if i%2 != 0 {\n            result\
    \ = append(result, i)\n        } else {\n            odd++\n        }\n      \
    \  if i%2 == 0 {\n            result = append(result, i)\n            even++\n\
    \        }\n    }\n\n    return append([]interface{}{even, odd}, result...)\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.19s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmpdkkjv_y5_test.go:52: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=4) %!s(int=4) %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)\
    \ %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n\
    \        tmpdkkjv_y5_test.go:52: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n       \
    \ tmpdkkjv_y5_test.go:52: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1726)\
    \ %!s(int=1726) %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)\
    \ %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=10) %!s(int=11) %!s(int=12)\
    \ %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17) %!s(int=18) %!s(int=19)\
    \ %!s(int=20) %!s(int=21) %!s(int=22) %!s(int=23) %!s(int=24) %!s(int=25) %!s(int=26)\
    \ %!s(int=27) %!s(int=28) %!s(int=29) %!s(int=30) %!s(int=31) %!s(int=32) %!s(int=33)\
    \ %!s(int=34) %!s(int=35) %!s(int=36) %!s(int=37) %!s(int=38) %!s(int=39) %!s(int=40)\
    \ %!s(int=41) %!s(int=42) %!s(int=43) %!s(int=44) %!s(int=45) %!s(int=46) %!s(int=47)\
    \ %!s(int=48) %!s(int=49) %!s(int=50) %!s(int=51) %!s(int=52) %!s(int=53) %!s(int=54)\
    \ %!s(int=55) %!s(int=56) %!s(int=57) %!s(int=58) %!s(int=59) %!s(int=60) %!s(int=61)\
    \ %!s(int=62) %!s(int=63) %!s(int=64) %!s(int=65) %!s(int=66) %!s(int=67) %!s(int=68)\
    \ %!s(int=69) %!s(int=70) %!s(int=71) %!s(int=72) %!s(int=73) %!s(int=74) %!s(int=75)\
    \ %!s(int=76) %!s(int=77) %!s(int=78) %!s(int=79) %!s(int=80) %!s(int=81) %!s(int=82)\
    \ %!s(int=83) %!s(int=84) %!s(int=85) %!s(int=86) %!s(int=87) %!s(int=88) %!s(int=89)\
    \ %!s(int=90) %!s(int=91) %!s(int=92) %!s(int=93) %!s(int=94) %!s(int=95) %!s(int=96)\
    \ %!s(int=97) %!s(int=98) %!s(int=99) %!s(int=100) %!s(int=101) %!s(int=102) %!s(int=103)\
    \ %!s(int=104) %!s(int=105) %!s(int=106) %!s(int=107) %!s(int=108) %!s(int=109)\
    \ %!s(int=110) %!s(int=111) %!s(int=112) %!s(int=113) %!s(int=114) %!s(int=115)\
    \ %!s(int=116) %!s(int=117) %!s(int=118) %!s(int=119) %!s(int=120) %!s(int=121)\
    \ %"
  timestamp: 1660074586
- exit_code: null
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    lists := make([]interface{}, 2)\n    if num < 0 {\n\
    \        fmt.Println(\"Invalid input: less than zero\")\n        return []interface{}{}\n\
    \    }\n    for i := int(num/10); num > 0; i-- {\n        if num % 10 == 0 {\n\
    \            lists[0] = i\n            lists[1] = 1\n            break\n     \
    \   }\n    }\n    for i := 0; i < int(num/10); i++ {\n        if num % 10 != 0\
    \ {\n            lists[1] = i\n            break\n        }\n    }\n    return\
    \ lists\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074595
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    sumOfEvenDigits := 0\n    sumOfOddDigits := 0\n  \
    \  evenDigits := []interface{}{}\n    oddDigits := []interface{}{}\n\n    for\
    \ num > 0 {\n        if num % 2 != 0 {\n            oddDigits = append(oddDigits,\
    \ num%10)\n            sumOfOddDigits += num % 10\n        } else if num % 2 ==\
    \ 0 {\n            evenDigits = append(evenDigits, num%10)\n            sumOfEvenDigits\
    \ += num % 10\n        }\n\n        num /= 10\n    }\n\n    return []interface{}{\n\
    \        sumOfEvenDigits / 2,\n        sumOfOddDigits / 2,\n        evenDigits,\n\
    \        oddDigits,\n    }\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate\
    \ := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected:\
    \ []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmp87hf0syv_test.go:60: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=3) [] [%!s(int=7)]]'\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmp87hf0syv_test.go:60: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=0) [] []]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmp87hf0syv_test.go:60: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=3) %!s(int=4) [%!s(int=2) %!s(int=4)] [%!s(int=5) %!s(int=3)]]'\n\
    \    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmp87hf0syv_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=6) %!s(int=2) [%!s(int=2)\
    \ %!s(int=6) %!s(int=4)] [%!s(int=1) %!s(int=1) %!s(int=3)]]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmp87hf0syv_test.go:60: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0) [] []]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmp87hf0syv_test.go:60: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0) [] []]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmp87hf0syv_test.go:60: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0) [] []]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp87hf0syv_test.go:60: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0) [] []]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074586
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    result :=\
    \ []interface{}{}\n    for num != 0 {\n        if num % 2 == 0 {\n           \
    \ even_count++\n            num /= 2\n        } else {\n            odd_count++\n\
    \            num *= 10\n        }\n    }\n    even_odd_list := make([]interface{},\
    \ even_count)\n    for i := 0; i < even_count; i++ {\n        even_odd_list[i]\
    \ = fmt.Sprint(even_count)\n    }\n    for i := 0; i < odd_count; i++ {\n    \
    \    even_odd_list[i] = fmt.Sprint(odd_count)\n    }\n    even_odd_list = append(even_odd_list,\
    \ fmt.Sprint(num))\n    return even_odd_list\n}\n\nfunc TestEven_Odd_Count(t *testing.T)\
    \ {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp54_d3xdc_test.go:17:5: result declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074585
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even := 0\n    odd := 0\n    i := 1\n    for ; i <\
    \ num; i++ {\n        if num%10%2 == 0 {\n            even++\n        } else {\n\
    \            odd++\n        }\n    }\n    return []interface{}{even, odd}\n}\n\
    \nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n\
    \     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual:\
    \ candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected:\
    \ []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmpka4z0bob_test.go:48: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=6)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmpka4z0bob_test.go:48: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmpka4z0bob_test.go:48: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=3451) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3\
    \ (0.00s)\n        tmpka4z0bob_test.go:48: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=346210)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmpka4z0bob_test.go:48: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmpka4z0bob_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmpka4z0bob_test.go:48: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpka4z0bob_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074586
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    var evenCount, oddCount int\n\n    for i := 0; i <\
    \ len(strconv.Itoa(num)); i++ {\n        if num % 2 == 0 {\n            evenCount++\n\
    \        } else {\n            oddCount++\n        }\n    }\n\n    return []interface{}{evenCount,\
    \ oddCount}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjevqks57_test.go:17:25: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074585
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    evenCount, oddCount := 0, 0\n    for i := 0; i < num;\
    \ i++ {\n        if num%2 == 0 {\n            evenCount++\n        } else {\n\
    \            oddCount++\n        }\n    }\n    return []interface{}{evenCount,\
    \ oddCount}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmpwtbfyc22_test.go:46: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=7)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmpwtbfyc22_test.go:46: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmpwtbfyc22_test.go:46: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=3452) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3\
    \ (0.00s)\n        tmpwtbfyc22_test.go:46: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=346211)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmpwtbfyc22_test.go:46: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmpwtbfyc22_test.go:46: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmpwtbfyc22_test.go:46: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpwtbfyc22_test.go:46: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074586
- exit_code: null
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    if num < 0 {\n        return []interface{}{1, 1}\n\
    \    }\n    even_count := 0\n    odd_count := 0\n    sum_num := num\n    for num\
    \ > 0 {\n        num %= 10\n        if num % 2 == 0 {\n            even_count++\n\
    \        } else {\n            odd_count++\n        }\n        sum_num -= num\
    \ * 10\n    }\n    sum_num /= 10\n    ans := []interface{}{}\n    if sum_num %\
    \ 2 == 0 {\n        ans = append(ans, odd_count)\n    } else {\n        ans =\
    \ append(ans, even_count)\n    }\n    return ans\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074595
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    ans := make([]interface{}, 0, 1)\n    if num > 0 {\n\
    \        digits, num := num, num\n        total := 0\n        while num != 0 {\n\
    \            digits -= int(num % 10)\n            total = total + int(num / 10)\n\
    \            num = digits % 10\n            digits = digits / 10\n           \
    \ ans = append(ans, int(total))\n        }\n    }\n    return ans\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwa7wj1dl_test.go:19:15: expected '';'', found num

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074584
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    list := []interface{}{}\n    digit, err := strconv.ParseInt(strconv.FormatInt(num,\
    \ 10), 10, 64)\n    if err != nil {\n        panic(err)\n    }\n\n    list :=\
    \ append(list, digit)\n    \n    if num%2 == 0 {\n        list = append(list,\
    \ \"even\")\n    } else {\n        list = append(list, \"odd\")\n    }\n    \n\
    \    return list\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate :=\
    \ even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected:\
    \ []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3j3hq3gc_test.go:16:19: undefined: strconv

    /tmp/tmp3j3hq3gc_test.go:21:10: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074585
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even_odd_count_list_t := make([]interface{}, 0)\n\
    \    for i := 0; i < len(strconv.Itoa(num)); i++ {\n        char := strconv.Itoa(int(num\
    \ % 10))\n        if char == '2' {\n            even_odd_count_list_t = append(even_odd_count_list_t,\
    \ 1)\n        } else {\n            even_odd_count_list_t = append(even_odd_count_list_t,\
    \ 0)\n        }\n        num /= 10\n    }\n    return even_odd_count_list_t\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyslmq4ez_test.go:16:25: undefined: strconv

    /tmp/tmpyslmq4ez_test.go:17:17: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074585
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    digits :=\
    \ []int{0, 1}\n\n    for i := 0; i < 10; i++ {\n        digit = num % 10\n   \
    \     if digit == 0 {\n            even_count++\n        } else {\n          \
    \  odd_count++\n        }\n        num = num / 10\n    }\n\n    return []interface{}{even_count,\
    \ odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp55eob9cf_test.go:17:5: digits declared but not used

    /tmp/tmp55eob9cf_test.go:20:9: undefined: digit

    /tmp/tmp55eob9cf_test.go:21:12: undefined: digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074585
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    result := make([]interface{}, 2)\n    \n    odd_count\
    \ := 0\n    even_count := 0\n    for num > 0 {\n        digit := num % 10\n  \
    \      \n        if digit % 2 == 0 {\n            even_count++\n        } else\
    \ {\n            odd_count++\n        }\n        \n        num = num / 10\n  \
    \  }\n    \n    result[0] = even_count\n    result[1] = odd_count\n    return\
    \ result\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmpnidw8ysz_test.go:56: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmpnidw8ysz_test.go:56: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmpnidw8ysz_test.go:56: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmpnidw8ysz_test.go:56: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpnidw8ysz_test.go:56: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074586
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    result := make([]interface{}, 2)\n    if num < 0 {\n\
    \        return result\n    }\n\n    digits, err := strconv.Atoi(string(num))\n\
    \    if err != nil {\n        return result\n    }\n\n    for i := 0; i < len(digits)/2;\
    \ i++ {\n        even, err := strconv.Atoi(string(digits[:len(digits)/2]))\n \
    \       if err != nil {\n            return result\n        }\n        odd, err\
    \ := strconv.Atoi(string(digits[len(digits)/2:]))\n        if err != nil {\n \
    \           return result\n        }\n        result[0] = even\n        result[1]\
    \ = odd\n    }\n    return result\n}\n\nfunc TestEven_Odd_Count(t *testing.T)\
    \ {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsi89aq6v_test.go:20:20: undefined: strconv

    /tmp/tmpsi89aq6v_test.go:26:22: undefined: strconv

    /tmp/tmpsi89aq6v_test.go:30:21: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074585
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    var result []interface{}\n    counter := 0\n    for\
    \ i := int(num / 10); i >= 0; i-- {\n        if num%10%2 == 0 {\n            counter++\n\
    \        } else {\n            result[counter] = i\n        }\n    }\n    result[counter]\
    \ = num%10\n    return result\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n\
    \  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\npanic: runtime error: index out of\
    \ range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range\
    \ [0] with length 0\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.even_odd_count(...)\n\t/tmp/tmpry_i57n5_test.go:21\n\
    command-line-arguments_test.TestEven_Odd_Count(0x0?)\n\t/tmp/tmpry_i57n5_test.go:35\
    \ +0x25\ntesting.tRunner(0xc0001031e0, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074586
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    result := make([]interface{}, 0)\n\n    // Iterate\
    \ until num is 0, since we need two digits per digit.\n    for num /= 10; num\
    \ > 0; num-- {\n        // Iterate through each digit.\n        for _, n := range\
    \ String(num) {\n            if n == '0' {\n                // Add two zero at\
    \ the back of the list.\n                res = append(res, \"00\")\n         \
    \   } else {\n                // Add 1 to the list.\n                res = append(res,\
    \ 1)\n            }\n        }\n    }\n    return res\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppdn8g3ye_test.go:15:5: result declared but not used

    /tmp/tmppdn8g3ye_test.go:20:27: undefined: String

    /tmp/tmppdn8g3ye_test.go:23:30: undefined: res

    /tmp/tmppdn8g3ye_test.go:26:30: undefined: res

    /tmp/tmppdn8g3ye_test.go:30:12: undefined: res

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074587
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    oddList := []int{}\n    evenList := []int{}\n    if\
    \ num == 0 {\n        return evenList\n    }\n    for i := 0; i < 10; i++ {\n\
    \        oddList = append(oddList, num%10) // append first digit\n        num\
    \ /= 10 // remove first digit\n    }\n    for i := 0; i < num; i++ {\n       \
    \ evenList = append(evenList, num%10) // append second digit\n        num /= 10\
    \ // remove second digit\n    }\n    // fmt.Printf(\"oddList: %v\\n\", oddList)\n\
    \    // fmt.Printf(\"evenList: %v\\n\", evenList)\n    // fmt.Printf(\"%v\\n\"\
    , evenList)\n    return evenList\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n\
    \  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw9jyut3r_test.go:18:16: cannot use evenList (variable of type []int) as
    type []interface{} in return statement

    /tmp/tmpw9jyut3r_test.go:31:12: cannot use evenList (variable of type []int) as
    type []interface{} in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even_odd := make([]interface{}, 0, 1)\n    even_odd[0]\
    \ = int(num / 10)\n    num %= 10\n    even_odd[1] = num % 2\n    return even_odd\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\npanic: runtime error: index out of\
    \ range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range\
    \ [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.even_odd_count(...)\n\t/tmp/tmp2nbkakd7_test.go:16\n\
    command-line-arguments_test.TestEven_Odd_Count(0x0?)\n\t/tmp/tmp2nbkakd7_test.go:29\
    \ +0x38\ntesting.tRunner(0xc0001a01a0, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    var even = []interface{}{}\n    var odd = []interface{}{}\n\
    \n    // Iterate over the input number\n    for _, n := range []int{num, num /\
    \ 10, num / 100, num / 1000, num / 10000, num / 100000} {\n        // If the current\
    \ number has even number of digits\n        if n%2 == 0 {\n            even =\
    \ append(even, n)\n        }\n        // If the current number has odd number\
    \ of digits\n        else {\n            odd = append(odd, n)\n        }\n   \
    \ }\n    // Return results\n    return append(even, odd)\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpt4mu3574_test.go:25:9: expected statement, found ''else''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074587
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    var result []interface{}\n    result := append(result,\
    \ num)\n    result := append(result, 1)\n    result := append(result, 1)\n   \
    \ result := append(result, 1)\n    result := append(result, 1)\n    result :=\
    \ append(result, 1)\n    result := append(result, 1)\n    result := append(result,\
    \ 1)\n    result := append(result, 1)\n    result := append(result, 1)\n    result\
    \ := append(result, 1)\n    result := append(result, 1)\n    return result\n}\n\
    \nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n\
    \     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual:\
    \ candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected:\
    \ []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2ct4mjwf_test.go:16:12: no new variables on left side of :=

    /tmp/tmp2ct4mjwf_test.go:17:12: no new variables on left side of :=

    /tmp/tmp2ct4mjwf_test.go:18:12: no new variables on left side of :=

    /tmp/tmp2ct4mjwf_test.go:19:12: no new variables on left side of :=

    /tmp/tmp2ct4mjwf_test.go:20:12: no new variables on left side of :=

    /tmp/tmp2ct4mjwf_test.go:21:12: no new variables on left side of :=

    /tmp/tmp2ct4mjwf_test.go:22:12: no new variables on left side of :=

    /tmp/tmp2ct4mjwf_test.go:23:12: no new variables on left side of :=

    /tmp/tmp2ct4mjwf_test.go:24:12: no new variables on left side of :=

    /tmp/tmp2ct4mjwf_test.go:25:12: no new variables on left side of :=

    /tmp/tmp2ct4mjwf_test.go:25:12: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074588
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    var even = make([]interface{}, 0)\n    var odd = make([]interface{},\
    \ 0)\n    for x := num; x > 0; {\n        digit, x := x%10, x//10\n        if\
    \ digit % 2 == 0 {\n            even = append(even, digit)\n        } else {\n\
    \            odd = append(odd, digit)\n        }\n    }\n    return even, odd\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5fkw5j6k_test.go:18:16:\
    \ x declared but not used\n/tmp/tmp5fkw5j6k_test.go:25:18: too many return values\n\
    \thave ([]interface{}, []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    if num < 0 {\n        return []interface{}{-1, -1}\n\
    \    }\n\n    evens, odds := make([]int, 0, 0), make([]int, 0, 1)\n\n    // Get\
    \ list of even and odd digits\n    for i := 0; i < 10; i++ {\n        if num %\
    \ 2 == 0 {\n            evens = append(evens, i)\n        } else {\n         \
    \   odds = append(odds, i)\n        }\n\n        num /= 10\n    }\n\n    // Return\
    \ the list\n    return []interface{}{evens, odds}\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmpwgmdnijq_test.go:56: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)\
    \ %!s(int=8) %!s(int=9)] [%!s(int=0)]]'\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmpwgmdnijq_test.go:56: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=-1) %!s(int=-1)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmpwgmdnijq_test.go:56: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[[%!s(int=0) %!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)] [%!s(int=1) %!s(int=3)]]'\n    --- FAIL: TestEven_Odd_Count/test_num__3\
    \ (0.00s)\n        tmpwgmdnijq_test.go:56: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[[%!s(int=2) %!s(int=3) %!s(int=4) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]\
    \ [%!s(int=0) %!s(int=1) %!s(int=5)]]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmpwgmdnijq_test.go:56: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=-1) %!s(int=-1)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmpwgmdnijq_test.go:56: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=-1) %!s(int=-1)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmpwgmdnijq_test.go:56: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=-1) %!s(int=-1)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpwgmdnijq_test.go:56: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8) %!s(int=9)] []]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    list := []interface{}{}\n    for i := 0; i < num;\
    \ i++ {\n        digit, ok := isEvenDigit(i)\n        if ok {\n            list\
    \ = append(list, digit)\n        } else {\n            list = append(list, oddDigit(i))\n\
    \        }\n    }\n    return list\n}\n\nfunc TestEven_Odd_Count(t *testing.T)\
    \ {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_v0iw11y_test.go:17:22: undefined: isEvenDigit

    /tmp/tmp_v0iw11y_test.go:21:33: undefined: oddDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    var even = []interface{}{}\n    var odd = []interface{}{}\n\
    \n    // Convert the integer to a string\n    str := fmt.Sprintf(\"%v\", num)\n\
    \n    // Iterate through each digit of the string\n    for _, digit := range str\
    \ {\n        // If the digit is even, add the digit to the even list\n       \
    \ if str[int(digit)]%2 == 0 {\n            even = append(even, digit)\n      \
    \  } else {\n            // If the digit is odd, add the digit to the odd list\n\
    \            odd = append(odd, digit)\n        }\n    }\n\n    // Return the list\
    \ with even and odd digits\n    return []interface{}{even, odd}\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nthank you so much! this helped a ton! I'm going to\
    \ look through your solution one day and try to understand the differences between\
    \ yours and mine\n<|/ c |>\n<| c |>\n- I added some comments to my answer. Let\
    \ me know if you have any questions or if anything needs clarification.\n<|/ c\
    \ |>\n<| c |>\nThank you so much! I added a few comments to my code and changed\
    \ it up a bit to allow for negative numbers. I have one last question, if you\
    \ don't mind. how do you get it to return an int instead of a string?\n<|/ c |>\n\
    <| c |>\n- I added an update to my answer that shows you how to convert back to\
    \ an `int`. However, I should point out that your code is very inefficient. You\
    \ are basically iterating over every digit in the string and adding them to the\
    \ list regardless of which digit it is (since you are always adding it to the\
    \ even list regardless). You could easily just check whether the digit is even\
    \ or odd after you add it to the list.\n<|/ c |>\n<| c |>\n- You're welcome. Glad\
    \ I could help. I added a link to the Go Blog post that explains why my code is\
    \ inefficient. http://blog.golang.org/slices - Good luck!\n<|/ c |>\n<| a |>\n\
    Here is one way that uses bit manipulation:\n<code>\npackage main\n\nimport (\n\
    \    \"fmt\"\n)\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcodwj2rm_test.go:35:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074587
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    var result = []interface{}{}\n    num /= 10\n    count\
    \ := 0\n    digit := num / 10\n    for num > 0 {\n        count += num % 10\n\
    \        num /= 10\n    }\n    result.Put(digit)\n    result.Put(count)\n    return\
    \ result\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplde3zxzp_test.go:23:12: result.Put undefined (type []interface{} has no
    field or method Put)

    /tmp/tmplde3zxzp_test.go:24:12: result.Put undefined (type []interface{} has no
    field or method Put)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074589
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    if num < 0 {\n        return nil\n    }\n\n    even_count\
    \ := 0\n    odd_count := 0\n    for i := num; i > 0; i/= 10 {\n        if i%2\
    \ == 0 {\n            even_count++\n        } else {\n            odd_count++\n\
    \        }\n    }\n\n    return []interface{}{even_count, odd_count}\n}\n\nfunc\
    \ TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n\
    \     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual:\
    \ candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected:\
    \ []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmp9rlzxw_s_test.go:52: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmp9rlzxw_s_test.go:52:\
    \ expected '[%!s(int=3) %!s(int=3)]', got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmp9rlzxw_s_test.go:52: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmp9rlzxw_s_test.go:52:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp9rlzxw_s_test.go:52: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074589
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    if num < 0 {\n        return []interface{}{0, 0}\n\
    \    }\n\n    var even, odd int\n\n    // initialize odd counter to 1\n    odd++\n\
    \n    // initialize even counter to 0\n    even++\n\n    // loop from 0 to num\n\
    \    for i := 0; i < num; i++ {\n        // if the i's digit is odd then add 1\
    \ to odd counter\n        if num%10%2 == 0 {\n            odd++\n        }\n\n\
    \        // if the i's digit is even then add 1 to even counter\n        if num%10%2\
    \ == 1 {\n            even++\n        }\n    }\n\n    // return odd list and even\
    \ list in a slice with index 0 and 1\n    return []interface{}{odd, even}\n}\n\
    \nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n\
    \     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual:\
    \ candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected:\
    \ []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmp7nmaqmdq_test.go:64: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=1) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmp7nmaqmdq_test.go:64: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmp7nmaqmdq_test.go:64: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=3453) %!s(int=1)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3\
    \ (0.00s)\n        tmp7nmaqmdq_test.go:64: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=1) %!s(int=346212)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmp7nmaqmdq_test.go:64: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmp7nmaqmdq_test.go:64: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmp7nmaqmdq_test.go:64: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp7nmaqmdq_test.go:64: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=1) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074589
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    \n    var even = []interface{}{}\n    var odd = []interface{}{}\n\
    \n    // get the remainder of the division after dividing by 2\n    rem := num\
    \ % 2\n    num /= 2\n    \n    if num > 0 {\n        even = append(even, num)\n\
    \    }\n    if rem == 1 {\n        odd = append(odd, 1)\n    }\n    \n    if num\
    \ > 0 {\n        even = append(even, num)\n    }\n    if rem == 0 {\n        odd\
    \ = append(odd, 1)\n    }\n    \n    if num > 0 {\n        even = append(even,\
    \ num)\n    }\n    if rem == 1 {\n        odd = append(odd, 1)\n    }\n    \n\
    \    if num > 0 {\n        even = append(even, num)\n    }\n    if rem == 0 {\n\
    \        odd = append(odd, 1)\n    }\n    \n    if num > 0 {\n        even = append(even,\
    \ num)\n    }\n    if rem == 1 {\n        odd = append(odd, 1)\n    }\n    \n\
    \    if num > 0 {\n        even = append(even, num)\n    }\n    if rem == 0 {\n\
    \        odd = append(odd, 1)\n    }\n    \n    if num > 0 {\n        even = append(even,\
    \ num)\n    }\n    if rem == 1 {\n        odd = append(odd, 1)\n    }\n    \n\
    \    if num > 0 {\n        even = append(even, num)\n    }\n    if rem == 0 {\n\
    \        odd = append(odd, 1)\n    }\n    \n    if num > 0 {\n        even = append(even,\
    \ num)\n    }\n    if rem == 1 {\n        odd = append(odd, 1)\n    }\n    \n\
    \    if num > 0 {\n        even = append(even, num)\n    }\n    if rem == 0 {\n\
    \        odd = append(odd, 1)\n    }\n    \n    if num > 0 {\n        even = append(even,\
    \ num)\n    }\n    if rem == 1 {\n        odd = append(odd, 1)\n    }\n    \n\
    \    if num > 0 {\n        even = append(even, num)\n    }\n    if rem == 0 {\n\
    \        odd = append(odd, 1)\n    }\n    \n    if num > 0 {\n        even = append(even,\
    \ num)\n    }\n    if rem == 1 {\n        odd = append(odd, 1)\n    }\n    \n\
    \    if num > 0 {\n        even = append(even, num)\n    }\n    if rem == 0 {\n\
    \        odd = append(odd, 1)\n    }\n    \n    if num > 0 {\n        even = append(even,\
    \ num)\n    }\n    if rem == 1 {\n        \nfunc TestEven_Odd_Count(t *testing.T)\
    \ {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6nld7ppc_test.go:126:6: expected ''('', found TestEven_Odd_Count

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    result := []interface{}{}\n    result := append(result,\
    \ num)\n    temp1 := 0\n    temp2 := 0\n    for i := 0; i < len(result); i++ {\n\
    \        if result[i] % 2 == 0 {\n            fmt.Println(\"even temp1 is %v\"\
    , temp1)\n            temp1 = temp1 + 1\n        } else {\n            fmt.Println(\"\
    odd temp2 is %v\", temp2)\n            temp2 = temp2 + 1\n        }\n    }\n \
    \   return []interface{}{temp1, temp2}\n}\n</code>\nHere is the output:\n<code>\n\
    [root@localhost ~]# go test even_odd_count_test.go\ntesting package even_odd_count_test\n\
    --- PASS: even_odd_count_test 0.01s\nok      github.com/ramya-p/countEvenOdd \
    \  0.33s\n</code>\n<|/ a tags=go dscore=0 |>\n<| a tags=go |>\nWe can do it in\
    \ two simple steps\n<code>\npackage main\n\nimport (\n    \"fmt\"\n    \"math\"\
    \n)\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpfizomfci_test.go:30:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    // implement here\n    sum := 0\n    i := 0\n    evenList\
    \ := []interface{}{}\n    oddList := []interface{}{}\n    for i < num {\n    \
    \    if (num % 2 == 0) {\n            evenList = append(evenList, num)\n     \
    \   } else {\n            oddList = append(oddList, num)\n        }\n        sum\
    \ += num\n        i++\n    }\n    if sum%2 == 0 {\n        evenList = append(evenList,\
    \ sum)\n    } else {\n        oddList = append(oddList, sum)\n    }\n    return\
    \ evenList\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.05s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmpla4hoi1l_test.go:57: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpla4hoi1l_test.go:57:\
    \ expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmpla4hoi1l_test.go:57: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=3452) %!s(int=3452) %!s(int=3452) %!s(int=3452) %!s(int=3452)\
    \ %!s(int=3452) %!s(int=3452) %!s(int=3452) %!s(int=3452) %!s(int=3452) %!s(int=3452)\
    \ %!s(int=3452) %!s(int=3452) %!s(int=3452) %!s(int=3452) %!s(int=3452) %!s(int=3452)\
    \ %!s(int=3452) %!s(int=3452) %!s(int=3452) %!s(int=3452) %!s(int=3452) %!s(int=3452)\
    \ %!s(int=3452) %!s(int=3452) %!s(int=3452) %!s(int=3452) %!s(int=3452) %!s(int=3452)\
    \ %!s(int=3452) %!s(int=3452) %!s(int=3452) %!s(int=3452) %!s(int=3452) %!s(int=3452)\
    \ %!s(int=3452) %!s(int=3452) %!s(int=3452) %!s(int=3452) %!s(int=3452) %!s(int=3452)\
    \ %!s(int=3452) %!s(int=3452) %!s(int=3452) %!s(int=3452) %!s(int=3452) %!s(int=3452)\
    \ %!s(int=3452) %!s(int=3452) %!s(int=3452) %!s(int=3452) %!s(int=3452) %!s(int=3452)\
    \ %!s(int=3452) %!s(int=3452) %!s(int=3452) %!s(int=3452) %!s(int=3452) %!s(int=3452)\
    \ %!s(int=3452) %!s(int=3452) %!s(int=3452) %!s(int=3452) %!s(int=3452) %!s(int=3452)\
    \ %!s(int=3452) %!s(int=3452) %!s(int=3452) %!s(int=3452) %!s(int=3452) %!s(int=3452)\
    \ %!s(int=3452) %!s(int=3452) %!s(int=3452) %!s(int=3452) %!s(int=3452) %!s(int=3452)\
    \ %!s(int=3452) %!s(int=3452) %!s(int=3452) %!s(int=3452) %!s(int=3452) %!s(int=3452)\
    \ %!s(int=3452) %!s(int=3452) %!s(int=3452) %!s(int=3452) %!s(int=3452) %!s(int=3452)\
    \ %!s(int=3452) %!s(int=3452) %!s(int=3452) %!s(int=3452) %!s(int=3452) %!s(int=3452)\
    \ %!s(int=3452) %!s(int=3452) %!s(int=3452) %!s(int=3452) %!s(int=3452) %!s(int=3452)\
    \ %!s(int=3452) %!s(int=3452) %!s(int=3452) %!s(int=3452) %!s(int=3452) %!s(int=3452)\
    \ %!s(int=3452) %!s(int=3452) %!s(int=3452) %!s(int=3452) %!s(int=3452) %!s(int=3452)\
    \ %!s(int=3452) %!s(int=3452) %!s("
  timestamp: 1660074589
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    evenCount := make([]interface{}, 0, 1)\n    oddCount\
    \ := make([]interface{}, 0, 1)\n    for i := 0; i < (num / 10); i++ {\n      \
    \  if num%10 == 0 {\n            evenCount = append(evenCount, num%10)\n     \
    \   } else {\n            oddCount = append(oddCount, num%10)\n        }\n   \
    \ }\n    return evenCount, oddCount\n}\n\nfunc TestEven_Odd_Count(t *testing.T)\
    \ {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbxsemfd5_test.go:24:23:\
    \ too many return values\n\thave ([]interface{}, []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074589
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    n := num%10\n    num /= 10\n    s := 0\n    i := 0\n\
    \n    for i < num {\n        if n%2 == 0 {\n            s += 2\n            n\
    \ /= 2\n        } else {\n            s += 1\n            n /= 2\n        }\n\n\
    \        i++\n    }\n\n    fmt.Printf(\"The even count is: %d.\\n\", s)\n    fmt.Printf(\"\
    The odd count is: %d.\\n\", n)\n\n    result := make([]interface{}, 2)\n    result[0]\
    \ = s\n    result[1] = n\n    return result\n}\n</code>\nYou can run this test\
    \ on Golang and it works.\n<|/ a tags=algorithm,go |>\n<| a dscore=0 |>\nThe solution\
    \ I figured out is this one using recursion.\nThe idea is to count the digits\
    \ of the number. If it's even, add the digit(count+1) to the result set. If it's\
    \ odd, add (count+1)/2 to the result set.\n<code>\npackage main\n\nimport (\n\
    \    \"fmt\"\n    \"log\"\n    \"math/big\"\n    \"math/big/num\"\n    \"strings\"\
    \n)\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpu39u3ovi_test.go:40:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    var result []interface{}\n\
    \    \n    for digit := 0; digit < 10; digit++ {\n        if num % 10 == 0 {\n\
    \            if num%2 == 0 {\n                even++\n            } else {\n \
    \               odd++\n            }\n        }\n        num = num / 10\n    }\n\
    \n    if even > 0 || odd > 0 {\n        result = append(result,even)\n       \
    \ result = append(result,odd)\n    }\n\n    return result\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmpitp0quol_test.go:57: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=9) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmpitp0quol_test.go:57: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=8) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmpitp0quol_test.go:57: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=6) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3\
    \ (0.00s)\n        tmpitp0quol_test.go:57: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=4) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmpitp0quol_test.go:57: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=4) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmpitp0quol_test.go:57: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=9) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmpitp0quol_test.go:57: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpitp0quol_test.go:57: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=10) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074589
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    var list []interface{}\n\n    list := make([]interface{},\
    \ 0)\n    odd_count = 0\n    even_count = 0\n    for num > 0 {\n        if num%2\
    \ == 0 {\n            even_count++\n        } else {\n            odd_count++\n\
    \        }\n        list = append(list, odd_count)\n        list = append(list,\
    \ even_count)\n        num = num / 2\n    }\n    return list\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwqdu61ob_test.go:17:10: no new variables on left side of :=

    /tmp/tmpwqdu61ob_test.go:18:5: undefined: odd_count

    /tmp/tmpwqdu61ob_test.go:19:5: undefined: even_count

    /tmp/tmpwqdu61ob_test.go:22:13: undefined: even_count

    /tmp/tmpwqdu61ob_test.go:24:13: undefined: odd_count

    /tmp/tmpwqdu61ob_test.go:26:29: undefined: odd_count

    /tmp/tmpwqdu61ob_test.go:27:29: undefined: even_count

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074589
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    list := make([]interface{}, 0, 2)\n\n    odd_count\
    \ := 0\n    even_count := 0\n\n    for i := int(0); i < 10; i++ {\n        if\
    \ num % 10 == 0 {\n            list.append(i)\n            even_count++\n    \
    \    } else {\n            odd_count++\n        }\n        num /= 10\n    }\n\n\
    \    list = append(list, odd_count)\n    list = append(list, even_count)\n\n \
    \   return list\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate :=\
    \ even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected:\
    \ []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp33p3xw77_test.go:22:18: list.append undefined (type []interface{} has
    no field or method append)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074589
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    var even = []interface{}{}\n    var odd = []interface{}{}\n\
    \    if num == 0 {\n        return even\n    }\n    for num % 2 == 0 {\n     \
    \   even = append(even, num)\n    }\n    for num % 2 != 0 {\n        odd = append(odd,\
    \ num)\n    }\n    return even, odd\n}\n\nfunc TestEven_Odd_Count(t *testing.T)\
    \ {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2qp3fv0j_test.go:26:18:\
    \ too many return values\n\thave ([]interface{}, []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074590
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    return []interface{}{\n        int(num / 2) % 2,\n\
    \        int(num / 2) % 2 + 1,\n    }\n}\n\nfunc TestEven_Odd_Count(t *testing.T)\
    \ {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmpuitn1400_test.go:41: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=1) %!s(int=2)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmpuitn1400_test.go:41: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=-1) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmpuitn1400_test.go:41: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=0) %!s(int=1)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3\
    \ (0.00s)\n        tmpuitn1400_test.go:41: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=1) %!s(int=2)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmpuitn1400_test.go:41: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=1)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmpuitn1400_test.go:41: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=-1) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmpuitn1400_test.go:41: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=-1) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpuitn1400_test.go:41: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074590
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    i := 1\n\
    \    for num > 0 {\n        if num % 10 == 0 {\n            even_count++\n   \
    \     } else {\n            odd_count++\n        }\n        num /= 10\n      \
    \  i++\n    }\n\n    even_list := make([]interface{}, even_count)\n    even_list\
    \ := append(even_list, fmt.Sprint(even_count))\n    odd_list := make([]interface{},\
    \ odd_count)\n    odd_list := append(odd_list, fmt.Sprint(odd_count))\n\n    return\
    \ []interface{}{even_list, odd_list}\n}\n\nfunc TestEven_Odd_Count(t *testing.T)\
    \ {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdwaek9mx_test.go:29:15: no new variables on left side of :=

    /tmp/tmpdwaek9mx_test.go:31:14: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074590
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    if num < 0 {\n        return []interface{}{1, 1}\n\
    \    }\n\n    result := []interface{}{}\n    even_count := 0\n    odd_count :=\
    \ 0\n    i := len(strconv.Itoa(num)) - 1\n\n    for ; i >= 0; i-- {\n        if\
    \ num%10%2 == 0 {\n            even_count++\n        } else {\n            odd_count++\n\
    \        }\n\n        num = num / 10\n    }\n\n    result = append(result, even_count)\n\
    \    result = append(result, odd_count)\n\n    return result\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjsjlmef0_test.go:22:14: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074590
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even_odd_count_result := make([]interface{}, 2)\n\
    \    even_count := 0\n    odd_count := 0\n    str_num := fmt.Sprintf(\"%d\", num)\n\
    \    for idx, digit := range str_num {\n        if digit == '0' {\n          \
    \  even_count++\n        } else {\n            odd_count++\n        }\n      \
    \  if idx == len(str_num)-1 {\n            even_odd_count_result[0] = even_count\n\
    \            even_odd_count_result[1] = odd_count\n        }\n    }\n    return\
    \ even_odd_count_result\n}\n</code>\n<|/ a |>\n<| c |>\nThis does not answer the\
    \ question.\n<|/ c |>\n<| c |>\nThis answer is more accurate than the other ones.\
    \ Thanks!\n<|/ c |>\n<| a dscore=1 |>\nThis is probably the simplest/cleanest\
    \ answer that came to my mind.\n<code>\nfunc TestEven_Odd_Count(t *testing.T)\
    \ {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp8pd9yoft_test.go:32:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074590
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    odd_count := 0\n    even_count := 0\n    even_cnts\
    \ := []interface{}{}\n    odd_cnts := []interface{}{}\n    \n    for i := 0; i\
    \ < 10; i++ {\n        if num % 10 == 0 {\n            even_count++\n        \
    \    if i%2 == 0 {\n                even_cnts = append(even_cnts, i)\n       \
    \     } else {\n                odd_cnts = append(odd_cnts, i)\n            }\n\
    \        }\n        num = num/10\n    }\n\n    even_cnts = append(even_cnts, even_count)\n\
    \    odd_cnts = append(odd_cnts, odd_count)\n\n    return even_cnts, odd_cnts\n\
    }\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmps0e2tikv_test.go:35:23:\
    \ too many return values\n\thave ([]interface{}, []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074591
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 1, 1\n    if num%2 == 0 {\n        even++\n\
    \    } else {\n        odd++\n    }\n    return []interface{}{even, odd}\n}\n\n\
    func TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n\
    \     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual:\
    \ candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected:\
    \ []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmpe3gmb80y_test.go:44: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=1) %!s(int=2)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmpe3gmb80y_test.go:44: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmpe3gmb80y_test.go:44: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3\
    \ (0.00s)\n        tmpe3gmb80y_test.go:44: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=1) %!s(int=2)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmpe3gmb80y_test.go:44: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=1) %!s(int=2)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmpe3gmb80y_test.go:44: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmpe3gmb80y_test.go:44: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=1) %!s(int=2)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpe3gmb80y_test.go:44: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074591
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    var result []interface{}\n    total := num\n    var\
    \ i int\n\n    for i := 1; i * i < num; i++ {\n        if num%(i*i) == 0 {\n \
    \           total = (num/(i*i)) + 1\n            break\n        }\n    }\n\n \
    \   if total % 2 == 0 {\n        result = append(result,1)\n    }\n    if total\
    \ % 2 != 0 {\n        result = append(result,0)\n    }\n\n    return result\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi02dxhsx_test.go:17:9: i declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074591
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    evens, odds := 0, 0\n    for num > 0 {\n        if\
    \ num%2 == 0 {\n            evens++\n        } else {\n            odds++\n  \
    \      }\n        num = num / 10\n    }\n    return []interface{}{evens, odds}\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmp93yd0h9i_test.go:47: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmp93yd0h9i_test.go:47: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmp93yd0h9i_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmp93yd0h9i_test.go:47: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp93yd0h9i_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074591
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    evens, odds := 0, 0\n    list := []interface{}{}\n\
    \    for _, num := range newIntSlice(num) {\n        switch num {\n        case\
    \ 0:\n            evens++\n        case 1:\n            odds++\n        default:\n\
    \            list = append(list, num)\n            if evens > 1 {\n          \
    \      list = append(list, evens)\n                evens--\n            } else\
    \ {\n                list = append(list, odds)\n                odds--\n     \
    \       }\n        }\n    }\n    return list\n}\n\nfunc TestEven_Odd_Count(t *testing.T)\
    \ {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpio4xd2o__test.go:17:25: undefined: newIntSlice

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074591
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    // 1. Initialize an empty array.\n    var even = []interface{}{}\n\
    \    var odd = []interface{}{}\n    \n    // 2. Initialize a counter for even\
    \ numbers.\n    var evenCounter = 0\n    \n    // 3. Initialize a counter for\
    \ odd numbers.\n    var oddCounter = 0\n    \n    // 4. Iterate through the number\
    \ and increment the counters.\n    for _, num := range []int{num} {\n        //\
    \ Check each digit\n        if num % 2 != 0 {\n            odd = append(odd, num)\n\
    \            oddCounter++\n        } else {\n            even = append(even, num)\n\
    \            evenCounter++\n        }\n    }\n    \n    // 5. Return the list\n\
    \    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Count(t *testing.T)\
    \ {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmp3_kxz75u_test.go:61: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[[] [%!s(int=7)]]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n\
    \        tmp3_kxz75u_test.go:61: expected '[%!s(int=1) %!s(int=1)]', got '[[%!s(int=-78)]\
    \ []]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmp3_kxz75u_test.go:61:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[[%!s(int=3452)] []]'\n    --- FAIL:\
    \ TestEven_Odd_Count/test_num__3 (0.00s)\n        tmp3_kxz75u_test.go:61: expected\
    \ '[%!s(int=3) %!s(int=3)]', got '[[] [%!s(int=346211)]]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmp3_kxz75u_test.go:61: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[[] [%!s(int=-345821)]]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmp3_kxz75u_test.go:61: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[[%!s(int=-2)] []]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n\
    \        tmp3_kxz75u_test.go:61: expected '[%!s(int=2) %!s(int=3)]', got '[[]\
    \ [%!s(int=-45347)]]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n\
    \        tmp3_kxz75u_test.go:61: expected '[%!s(int=1) %!s(int=0)]', got '[[%!s(int=0)]\
    \ []]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074592
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    list := make([]interface{}, 0, 2)\n    var index int\n\
    \n    // if num < 0 return an empty list\n    if num < 0 {\n        return list\n\
    \    }\n\n    // find the first even digit\n    for index = 0; index < 9; index++\
    \ {\n        if num%10 == 0 {\n            break\n        }\n        num = num\
    \ / 10\n    }\n\n    // find the first odd digit\n    for index = 1; index < 9;\
    \ index++ {\n        if num%10 != 0 {\n            break\n        }\n        num\
    \ = num / 10\n    }\n\n    // add the digits to the list\n    list = append(list,\
    \ index)\n    list = append(list, index)\n\n    return list\n}\n</code>\n<|/ a\
    \ tags=go |>\n<| a |>\nThis solution does not depend on modulus operation to find\
    \ odd and even digits.\n<code>\npackage main\n\nimport (\n    \"fmt\"\n)\n\nfunc\
    \ TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n\
    \     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual:\
    \ candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected:\
    \ []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpo12xr42c_test.go:45:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074590
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even := 0\n    odd := 0\n    for num > 0 {\n     \
    \   digit := num % 10\n        if digit % 2 == 0 {\n            even++\n     \
    \   } else {\n            odd++\n        }\n        num /= 10\n    }\n    return\
    \ []interface{}{even, odd}\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\n\
    Here is an easy solution using golang string\n<code>\npackage main\n\nimport \"\
    fmt\"\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpr2f1eqs8_test.go:28:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074590
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    list := make([]interface{}, 0)\n    \n    if num <\
    \ 0 {\n        fmt.Println(\"Negative number detected, terminating program.\"\
    )\n        return list\n    }\n    \n    list := append(list, evenDigitCount(num))\n\
    \    list = append(list, oddDigitCount(num))\n    return list\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp3mtm6hn_test.go:22:10: no new variables on left side of :=

    /tmp/tmpp3mtm6hn_test.go:22:26: undefined: evenDigitCount

    /tmp/tmpp3mtm6hn_test.go:23:25: undefined: oddDigitCount

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074591
- exit_code: null
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    digits, remainder := 0, num\n\
    \n    for remainder >= 0 {\n        remainder -= 10\n        digits++\n    }\n\
    \n    for digits >= 0 {\n        if remainder % 10 == 0 {\n            even++\n\
    \        }\n        remainder /= 10\n    }\n\n    for digits > 0 {\n        if\
    \ remainder % 2 == 0 {\n            odd++\n        }\n        remainder /= 2\n\
    \    }\n\n    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074604
- exit_code: null
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    total := 0\n    result := []interface{}{}\n\n    for\
    \ i := num; i >= 0; i/= 10 {\n        total++ // count number of even and odd\
    \ digits\n        if i % 2 == 0 {\n            result = append(result, 1)\n  \
    \      } else {\n            result = append(result, 2)\n        }\n    }\n\n\
    \    return append(result, total)\n}\n\nfunc TestEven_Odd_Count(t *testing.T)\
    \ {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074604
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    ans := []interface{}{}\n\n    if num == 0 {\n    \
    \    return ans\n    }\n\n    for i := 0; i < 10; i++ {\n        if num%10 ==\
    \ 0 {\n            ans = append(ans, i)\n        }\n    }\n    for i := 10; i\
    \ < num; i++ {\n        if num%2 == 0 {\n            ans = append(ans, i)\n  \
    \      }\n    }\n\n    return ans\n}\n\nfunc TestEven_Odd_Count(t *testing.T)\
    \ {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmp_9qh2vue_test.go:55: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmp_9qh2vue_test.go:55:\
    \ expected '[%!s(int=1) %!s(int=1)]', got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmp_9qh2vue_test.go:55: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=10) %!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15)\
    \ %!s(int=16) %!s(int=17) %!s(int=18) %!s(int=19) %!s(int=20) %!s(int=21) %!s(int=22)\
    \ %!s(int=23) %!s(int=24) %!s(int=25) %!s(int=26) %!s(int=27) %!s(int=28) %!s(int=29)\
    \ %!s(int=30) %!s(int=31) %!s(int=32) %!s(int=33) %!s(int=34) %!s(int=35) %!s(int=36)\
    \ %!s(int=37) %!s(int=38) %!s(int=39) %!s(int=40) %!s(int=41) %!s(int=42) %!s(int=43)\
    \ %!s(int=44) %!s(int=45) %!s(int=46) %!s(int=47) %!s(int=48) %!s(int=49) %!s(int=50)\
    \ %!s(int=51) %!s(int=52) %!s(int=53) %!s(int=54) %!s(int=55) %!s(int=56) %!s(int=57)\
    \ %!s(int=58) %!s(int=59) %!s(int=60) %!s(int=61) %!s(int=62) %!s(int=63) %!s(int=64)\
    \ %!s(int=65) %!s(int=66) %!s(int=67) %!s(int=68) %!s(int=69) %!s(int=70) %!s(int=71)\
    \ %!s(int=72) %!s(int=73) %!s(int=74) %!s(int=75) %!s(int=76) %!s(int=77) %!s(int=78)\
    \ %!s(int=79) %!s(int=80) %!s(int=81) %!s(int=82) %!s(int=83) %!s(int=84) %!s(int=85)\
    \ %!s(int=86) %!s(int=87) %!s(int=88) %!s(int=89) %!s(int=90) %!s(int=91) %!s(int=92)\
    \ %!s(int=93) %!s(int=94) %!s(int=95) %!s(int=96) %!s(int=97) %!s(int=98) %!s(int=99)\
    \ %!s(int=100) %!s(int=101) %!s(int=102) %!s(int=103) %!s(int=104) %!s(int=105)\
    \ %!s(int=106) %!s(int=107) %!s(int=108) %!s(int=109) %!s(int=110) %!s(int=111)\
    \ %!s(int=112) %!s(int=113) %!s(int=114) %!s(int=115) %!s(int=116) %!s(int=117)\
    \ %!s(int=118) %!s(int=119) %!s(int=120) %!s(int=121) %!s(int=122) %!s(int=123)\
    \ %!s(int=124) %!s(int=125) %!s(int=126) %!s(int=127) %!s(int=128) %!s(int=129)\
    \ %!s(int=130) %!s(int=131) %!s(int=132) %!s(int=133) %!s(int=134) %!s(int=135)\
    \ %!s(int=136) %!s(int=137) %!s(int=138) %!s(int=139) %!s(int=140) %!s(int=141"
  timestamp: 1660074592
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    list := make([]interface{}, 0, 8)\n    temp := num\n\
    \    evenDigitCount := 0\n    oddDigitCount := 0\n    for temp != 0 {\n      \
    \  if temp %2 == 0 {\n            evenDigitCount += 1\n            temp /= 2\n\
    \        } else {\n            oddDigitCount += 1\n            temp /= 2\n   \
    \     }\n    }\n    list = append(list, evenDigitCount)\n    list = append(list,\
    \ oddDigitCount)\n    return list\n}\n\nfunc TestEven_Odd_Count(t *testing.T)\
    \ {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmpaf6pcurq_test.go:53: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmpaf6pcurq_test.go:53: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=3) %!s(int=4)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmpaf6pcurq_test.go:53: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=4) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3\
    \ (0.00s)\n        tmpaf6pcurq_test.go:53: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=11) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmpaf6pcurq_test.go:53: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=8) %!s(int=11)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmpaf6pcurq_test.go:53: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmpaf6pcurq_test.go:53: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=9) %!s(int=7)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpaf6pcurq_test.go:53: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074592
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    result := []interface{}{}\n    for i := 0; i < num;\
    \ {\n        if i%2 == 0 {\n            result += []interface{}{1, i}\n      \
    \  } else {\n            result += []interface{}{2, i}\n        }\n        i +=\
    \ 2\n    }\n    return result\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n\
    \  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqthianbg_test.go:18:13: invalid operation: operator + not defined on result
    (variable of type []interface{})

    /tmp/tmpqthianbg_test.go:20:13: invalid operation: operator + not defined on result
    (variable of type []interface{})

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074592
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    result := make([]interface{}, 2)\n\n    odd_count\
    \ := 0\n    even_count := 0\n\n    // Divide num by 10 and check the remainder.\
    \ If remainder is even, then add 1 to the even count\n    // else add 2 to the\
    \ odd count\n    num /= 10\n\n    // While num is not 0\n    for num > 0 {\n \
    \       if num%2 != 0 {\n            result[0] = even_count\n            result[1]\
    \ = odd_count\n            even_count = 0\n            odd_count = 0\n       \
    \     break\n        } else {\n            result[0] = odd_count\n           \
    \ result[1] = even_count\n            even_count = 0\n            odd_count =\
    \ 0\n        }\n        num /= 10\n    }\n\n    return result\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmpf0p8b07n_test.go:64: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[<nil> <nil>]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n\
    \        tmpf0p8b07n_test.go:64: expected '[%!s(int=1) %!s(int=1)]', got '[<nil>\
    \ <nil>]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmpf0p8b07n_test.go:64:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestEven_Odd_Count/test_num__3 (0.00s)\n        tmpf0p8b07n_test.go:64: expected\
    \ '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmpf0p8b07n_test.go:64: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[<nil> <nil>]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n\
    \        tmpf0p8b07n_test.go:64: expected '[%!s(int=1) %!s(int=0)]', got '[<nil>\
    \ <nil>]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpf0p8b07n_test.go:64:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[<nil> <nil>]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpf0p8b07n_test.go:64: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[<nil> <nil>]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074593
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    // The length of the list will be 2^n (for n bit number).\n\
    \    // Since the list is created with 2 integers, the length of the list is 2^n.\n\
    \    // We know that if n bit number has only even number of digits, then even\
    \ index will be zero and odd will be two.\n    // If n bit number has only odd\
    \ number of digits, then even will be 1 and odd will be zero.\n    // Since we\
    \ know the length of the list to be 2^n so we can calculate by this equation:\
    \ \n    // 2 * 2^n = 2 * 2 * 2^(n-1) \n    length := uint64(pow(2, uint64(num)))\n\
    \    var even_odd_count_list []interface{}\n    even_odd_count_list = make([]interface{},\
    \ length)\n    for i := uint64(0); i < length; i++ {\n        even_odd_count_list[i]\
    \ = i % 2 == 0\n    }\n    return even_odd_count_list\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfpl_qe03_test.go:21:22: undefined: pow

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074592
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    // code here...\n    var count []interface{}\n   \
    \ even_num := 0\n    odd_num := 0\n\n    if num < 0 {\n        return count\n\
    \    }\n    \n    if num%2 == 0 {\n        even_num++\n    }\n    if num%2 !=\
    \ 0 {\n        odd_num++\n    }\n\n    count = append(count, even_num)\n    count\
    \ = append(count, odd_num)\n\n    return count\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmprgh54_e7_test.go:57: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmprgh54_e7_test.go:57:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=0)]'\n    --- FAIL:\
    \ TestEven_Odd_Count/test_num__3 (0.00s)\n        tmprgh54_e7_test.go:57: expected\
    \ '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=1)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmprgh54_e7_test.go:57: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmprgh54_e7_test.go:57:\
    \ expected '[%!s(int=1) %!s(int=0)]', got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmprgh54_e7_test.go:57: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074593
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    var even_count int = 0\n    var odd_count int = 0\n\
    \    result := []interface{}{}\n    for i := 0; i < num; i++ {\n        if num%2\
    \ == 0 {\n            even_count++\n        } else {\n            odd_count++\n\
    \        }\n        result = append(result, even_count, odd_count)\n    }\n  \
    \  return result\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate :=\
    \ even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected:\
    \ []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.34s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmphm4bjxdq_test.go:49: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=1) %!s(int=0) %!s(int=2) %!s(int=0) %!s(int=3) %!s(int=0)\
    \ %!s(int=4) %!s(int=0) %!s(int=5) %!s(int=0) %!s(int=6) %!s(int=0) %!s(int=7)]'\n\
    \    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmphm4bjxdq_test.go:49:\
    \ expected '[%!s(int=1) %!s(int=1)]', got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmphm4bjxdq_test.go:49: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=1) %!s(int=0) %!s(int=2) %!s(int=0) %!s(int=3) %!s(int=0) %!s(int=4)\
    \ %!s(int=0) %!s(int=5) %!s(int=0) %!s(int=6) %!s(int=0) %!s(int=7) %!s(int=0)\
    \ %!s(int=8) %!s(int=0) %!s(int=9) %!s(int=0) %!s(int=10) %!s(int=0) %!s(int=11)\
    \ %!s(int=0) %!s(int=12) %!s(int=0) %!s(int=13) %!s(int=0) %!s(int=14) %!s(int=0)\
    \ %!s(int=15) %!s(int=0) %!s(int=16) %!s(int=0) %!s(int=17) %!s(int=0) %!s(int=18)\
    \ %!s(int=0) %!s(int=19) %!s(int=0) %!s(int=20) %!s(int=0) %!s(int=21) %!s(int=0)\
    \ %!s(int=22) %!s(int=0) %!s(int=23) %!s(int=0) %!s(int=24) %!s(int=0) %!s(int=25)\
    \ %!s(int=0) %!s(int=26) %!s(int=0) %!s(int=27) %!s(int=0) %!s(int=28) %!s(int=0)\
    \ %!s(int=29) %!s(int=0) %!s(int=30) %!s(int=0) %!s(int=31) %!s(int=0) %!s(int=32)\
    \ %!s(int=0) %!s(int=33) %!s(int=0) %!s(int=34) %!s(int=0) %!s(int=35) %!s(int=0)\
    \ %!s(int=36) %!s(int=0) %!s(int=37) %!s(int=0) %!s(int=38) %!s(int=0) %!s(int=39)\
    \ %!s(int=0) %!s(int=40) %!s(int=0) %!s(int=41) %!s(int=0) %!s(int=42) %!s(int=0)\
    \ %!s(int=43) %!s(int=0) %!s(int=44) %!s(int=0) %!s(int=45) %!s(int=0) %!s(int=46)\
    \ %!s(int=0) %!s(int=47) %!s(int=0) %!s(int=48) %!s(int=0) %!s(int=49) %!s(int=0)\
    \ %!s(int=50) %!s(int=0) %!s(int=51) %!s(int=0) %!s(int=52) %!s(int=0) %!s(int=53)\
    \ %!s(int=0) %!s(int=54) %!s(int=0) %!s(int=55) %!s(int=0) %!s(int=56) %!s(int=0)\
    \ %!s(int=57) %!s(int=0) %!s(int=58) %!s(int=0) %!s(int=59) %!s(int=0) %!s(int=60)\
    \ %!s(int=0) %!s(int=61) %!s(int=0) %!s(int=62) %!s(int=0) %!s(int=63) %!s(int=0)\
    \ %!s(int=64) %!s(int=0) %!s(int="
  timestamp: 1660074594
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    var evenOddCount []interface{}\n\n    switch {\n \
    \   case num < 0:\n        evenOddCount = append(evenOddCount, 1)\n        evenOddCount\
    \ = append(evenOddCount, -1)\n        return evenOddCount\n\n    case num == 0:\n\
    \        evenOddCount = append(evenOddCount, 0)\n        return evenOddCount\n\
    \n    default:\n        var oddCount int\n        for i := 1; i <= num; i++ {\n\
    \            digit := (num % (i * 10)) / i\n            if digit % 2 != 0 {\n\
    \                oddCount++\n            }\n        }\n        evenOddCount =\
    \ append(evenOddCount, oddCount)\n        return evenOddCount\n    }\n}\n</code>\n\
    <|/ a tags=go,math,algorithm dscore=1 |>\n<| a |>\nA fast O(n) solution would\
    \ be to convert the number to a binary string and count the number of zeroes (a\
    \ digit) and the number of ones (an odd) in the string. Then you can go from there,\
    \ for example to find how many 1's are in the number:\n<code>\nconst digits =\
    \ \"0123456789\"\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpud1h8utp_test.go:39:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074592
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    var oddDigits int\n    var evenDigits int\n\n    for\
    \ num > 0 {\n        if num%2 == 0 {\n            evenDigits++\n        } else\
    \ {\n            oddDigits++\n        }\n\n        num = num / 10\n    }\n\n \
    \   var evenCounts []int\n    var oddCounts []int\n\n    for i := 0; i < evenDigits;\
    \ i++ {\n        evenCounts = append(evenCounts, i)\n    }\n    for i := 0; i\
    \ < oddDigits; i++ {\n        oddCounts = append(oddCounts, i)\n    }\n\n    return\
    \ evenCounts, oddCounts\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate\
    \ := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected:\
    \ []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpuw0kczsi_test.go:38:24:\
    \ too many return values\n\thave ([]int, []int)\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074593
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even_num := 0\n    odd_num := 0\n    num /= 10\n\n\
    \    // count number of digits\n    for num > 0 {\n        digit, num =  num %\
    \ 10, num / 10\n        switch digit {\n        case 0: even_num++\n        case\
    \ 1: odd_num++\n        }\n    }\n\n    result := []interface{}{odd_num, even_num}\n\
    \    return result\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate\
    \ := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected:\
    \ []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_wndxo2a_test.go:21:9: undefined: digit

    /tmp/tmp_wndxo2a_test.go:22:16: undefined: digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074593
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    if num < 0 {\n        return []interface{}{1, 1}\n\
    \    }\n    odd_count := 0\n    even_count := 0\n    odd_count := 0\n    even_count\
    \ := 0\n    if num % 2 == 0 {\n        even_count++\n    }\n    for i := 1; i\
    \ <= 9; i++ {\n        if num % i == 0 {\n            even_count++\n        }\n\
    \    }\n    if num % 10 == 0 {\n        odd_count++\n    }\n    return []interface{}{odd_count,\
    \ even_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoy4iwqzl_test.go:20:15: no new variables on left side of :=

    /tmp/tmpoy4iwqzl_test.go:21:16: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074593
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    var even, odd []interface{}\n    if num < 0 {\n  \
    \      even = append(even, -1)\n        odd = append(odd, -1)\n    }\n    else\
    \ if num == 0 {\n        even = append(even, 0)\n        odd = append(odd, 0)\n\
    \    }\n    else {\n        if num%2 == 0 {\n            even = append(even, num)\n\
    \            odd = append(odd, num)\n        }\n        else{\n            even\
    \ = append(even, num-1)\n            odd = append(odd, num-1)\n        }\n   \
    \ }\n    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Count(t *testing.T)\
    \ {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp9_psji2h_test.go:20:5: expected statement, found ''else''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074592
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    var odd_count int\n    var even_count int\n    if\
    \ num < 0 {\n        return []interface{}{1, 1}\n    }\n    if num == 0 {\n  \
    \      return []interface{}{0, 0}\n    }\n\n    total := 0\n    for i := 0; i\
    \ < 10; i++ {\n        digit := num / 10\n        total += digit\n        if digit\
    \ % 2 == 1 {\n            even_count++\n        } else {\n            odd_count++\n\
    \        }\n        num %= 10\n    }\n    if odd_count < even_count {\n      \
    \  return []interface{}{1, odd_count}\n    } else {\n        return []interface{}{even_count,\
    \ 1}\n    }\n}\n</code>\n<|/ a tags=go,algorithm,binary-search-tree,binary-tree\
    \ |>\n<| c |>\nThis isn't binary search tree - this is binary tree.\n<|/ c |>\n\
    <| a |>\n<code>\npackage main\n\nimport (\n  \"fmt\"\n  \"math/big\"\n)\n\nfunc\
    \ TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n\
    \     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual:\
    \ candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected:\
    \ []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpb6eaihnk_test.go:41:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074593
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    result := []interface{}{}\n    oddCount, evenCount\
    \ := 0, 0\n    for num > 0 {\n        digit, num := num%10, num/10\n        if\
    \ digit == 0 {\n            evenCount++\n        } else {\n            oddCount++\n\
    \        }\n        result = append(result, digit)\n    }\n\n    return append([]interface{}{oddCount,\
    \ evenCount}, result)\n}\n</code>\n<|/ a tags=go,algorithm dscore=3 |>\n<| a dscore=2\
    \ tags=go,algorithm |>\n<code>\npackage main\n\nimport (\n    \"fmt\"\n    \"\
    math\"\n)\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpxklmxjhm_test.go:29:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074593
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even_odd_count_list := make([]interface{}, 2)\n  \
    \  even_odd_count_list[1] = append(even_odd_count_list[1], num%10)\n    even_odd_count_list[0]\
    \ = append(even_odd_count_list[0], num/10)\n    return even_odd_count_list\n}\n\
    \nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n\
    \     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual:\
    \ candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected:\
    \ []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb6mxg4m4_test.go:16:37: first argument to append must be a slice; have
    even_odd_count_list[1] (variable of type interface{})

    /tmp/tmpb6mxg4m4_test.go:17:37: first argument to append must be a slice; have
    even_odd_count_list[0] (variable of type interface{})

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074593
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even_odd := []interface{}{}\n    for i := 0; i < 10;\
    \ i++ {\n        if num%2 == 0 {\n            even_odd = append(even_odd, i)\n\
    \        }\n        if num%2 != 0 {\n            even_odd = append(even_odd, i+10)\n\
    \        }\n        num = num / 10\n    }\n    return even_odd\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmpu4rz7j9d_test.go:48: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=10) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmpu4rz7j9d_test.go:48: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=11) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmpu4rz7j9d_test.go:48: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=0) %!s(int=11) %!s(int=2) %!s(int=13) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3\
    \ (0.00s)\n        tmpu4rz7j9d_test.go:48: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=10) %!s(int=11) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=15) %!s(int=6)\
    \ %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmpu4rz7j9d_test.go:48: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=10) %!s(int=1) %!s(int=2) %!s(int=13) %!s(int=4) %!s(int=15) %!s(int=6)\
    \ %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmpu4rz7j9d_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmpu4rz7j9d_test.go:48: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=10) %!s(int=1) %!s(int=12) %!s(int=13) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpu4rz7j9d_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074594
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    // base case\n    if num < 0 {\n        return nil\n\
    \    }\n    // init array for storing data\n    var ret = []interface{}{}\n  \
    \  for i := 0; i < 10; i++ {\n        if num%10 == 0 {\n            ret = append(ret,\
    \ i)\n        }\n        num = num / 10\n    }\n    // append the extra digit\n\
    \    ret = append(ret, num)\n    return ret\n}\n\nfunc TestEven_Odd_Count(t *testing.T)\
    \ {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmp8vt6rn3t_test.go:52: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)\
    \ %!s(int=8) %!s(int=9) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmp8vt6rn3t_test.go:52: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmp8vt6rn3t_test.go:52:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)\
    \ %!s(int=8) %!s(int=9) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3\
    \ (0.00s)\n        tmp8vt6rn3t_test.go:52: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=0)]'\n    --- FAIL:\
    \ TestEven_Odd_Count/test_num__4 (0.00s)\n        tmp8vt6rn3t_test.go:52: expected\
    \ '[%!s(int=3) %!s(int=3)]', got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmp8vt6rn3t_test.go:52: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmp8vt6rn3t_test.go:52:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp8vt6rn3t_test.go:52: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074594
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    list := []interface{}{}\n    if num < 0 {\n      \
    \  fmt.Printf(\"%d is negative\", num)\n        return list\n    }\n\n    num\
    \ %= 10\n    if num > 0 {\n        list = append(list, num)\n    }\n    \n   \
    \ for num > 0 {\n        num, rem = divmod((num / 10), 2)\n        if rem > 0\
    \ {\n            list = append(list, num)\n        } else {\n            list\
    \ = append(list, (num / 10))\n        }\n    }\n    return list\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpen2twcwm_test.go:27:14: undefined: rem

    /tmp/tmpen2twcwm_test.go:27:20: undefined: divmod

    /tmp/tmpen2twcwm_test.go:28:12: undefined: rem

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074594
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    var even_count int\n    var odd_count int\n\n    if\
    \ num < 0 {\n        return []interface{}{}\n    }\n\n    for num > 0 {\n    \
    \    if num%2 == 0 {\n            even_count++\n        } else {\n           \
    \ odd_count++\n        }\n        num /= 10\n    }\n\n    result := make([]interface{},\
    \ 0)\n    if even_count > 0 {\n        result = append(result, even_count)\n \
    \   }\n\n    if odd_count > 0 {\n        result = append(result, odd_count)\n\
    \    }\n    return result\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate\
    \ := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected:\
    \ []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmpy3m6f_wt_test.go:62: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n \
    \       tmpy3m6f_wt_test.go:62: expected '[%!s(int=1) %!s(int=1)]', got '[]'\n\
    \    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpy3m6f_wt_test.go:62:\
    \ expected '[%!s(int=3) %!s(int=3)]', got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmpy3m6f_wt_test.go:62: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpy3m6f_wt_test.go:62:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpy3m6f_wt_test.go:62: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074595
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for i :=\
    \ 0; i < num; i++ {\n        if i%2 == 0 {\n            even_count++\n       \
    \ } else {\n            odd_count++\n        }\n    }\n    return []interface{}{even_count,\
    \ odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmp_l10i6x2_test.go:47: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=4) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmp_l10i6x2_test.go:47: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmp_l10i6x2_test.go:47: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=1726) %!s(int=1726)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3\
    \ (0.00s)\n        tmp_l10i6x2_test.go:47: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=173106) %!s(int=173105)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmp_l10i6x2_test.go:47: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmp_l10i6x2_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmp_l10i6x2_test.go:47: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp_l10i6x2_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074595
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    odds := 0\n    evens := 0\n\n    for i := 0; i < num;\
    \ i++ {\n        if num % 2 == 0 {\n            evens = evens + 1\n        } else\
    \ {\n            odds = odds + 1\n        }\n    }\n\n    return []interface{}{evens,\
    \ odds}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmpaq45g__b_test.go:49: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=7)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmpaq45g__b_test.go:49: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmpaq45g__b_test.go:49: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=3452) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3\
    \ (0.00s)\n        tmpaq45g__b_test.go:49: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=346211)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmpaq45g__b_test.go:49: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmpaq45g__b_test.go:49: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmpaq45g__b_test.go:49: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpaq45g__b_test.go:49: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074595
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    var even, odd int\n    var digits = make([]int, 10)\n\
    \n    for i := 0; i < 10; i++ {\n        digits[i] = num / 10\n        num %=\
    \ 10\n    }\n\n    for _, d := range digits {\n        if d % 2 == 0 {\n     \
    \       even++\n        } else {\n            odd++\n        }\n    }\n    return\
    \ []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate\
    \ := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected:\
    \ []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmp2ux595gg_test.go:53: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=10) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmp2ux595gg_test.go:53: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=9) %!s(int=1)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmp2ux595gg_test.go:53: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=9) %!s(int=1)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3\
    \ (0.00s)\n        tmp2ux595gg_test.go:53: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=9) %!s(int=1)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmp2ux595gg_test.go:53: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=10) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmp2ux595gg_test.go:53: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=10) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmp2ux595gg_test.go:53: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=10) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp2ux595gg_test.go:53: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=10) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660074595
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even := 0\n    odd := 0\n    for num > 0 {\n     \
    \   num /= 10\n        if num % 2 == 0 {\n            even++\n        } else {\n\
    \            odd++\n        }\n    }\n    return []interface{}{even, odd}\n}\n\
    \nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n\
    \     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual:\
    \ candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected:\
    \ []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmp_kcayzle_test.go:48: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=1) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmp_kcayzle_test.go:48: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3\
    \ (0.00s)\n        tmp_kcayzle_test.go:48: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=4) %!s(int=2)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmp_kcayzle_test.go:48: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmp_kcayzle_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmp_kcayzle_test.go:48: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp_kcayzle_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074595
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    if num < 0 {\n        return []interface{}{}\n   \
    \ }\n    var even_count int\n    var odd_count int\n    for i := 0; i < 10; i++\
    \ {\n        digit, _ := num / 10\n        if digit % 2 != 0 {\n            odd_count++\n\
    \        } else {\n            even_count++\n        }\n        num = num / 10\n\
    \    }\n    return []interface{}{even_count, odd_count}\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl27kvwin_test.go:21:21: assignment mismatch: 2 variables but 1 value

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074595
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    evenCount := 0\n    oddCount := 0\n\n    for i :=\
    \ 0; i < num; i++ {\n        if num % 2 == 0 {\n            evenCount++\n    \
    \    } else {\n            oddCount++\n        }\n    }\n\n    return []interface{}{evenCount,\
    \ oddCount}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmpxzxad8lb_test.go:49: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=7)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmpxzxad8lb_test.go:49: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmpxzxad8lb_test.go:49: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=3452) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3\
    \ (0.00s)\n        tmpxzxad8lb_test.go:49: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=346211)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmpxzxad8lb_test.go:49: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmpxzxad8lb_test.go:49: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmpxzxad8lb_test.go:49: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpxzxad8lb_test.go:49: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074595
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    evenCount := 0\n    oddCount := 0\n    for i := 0;\
    \ i < num; i++ {\n        if num % 2 == 0 {\n            evenCount++\n       \
    \ } else {\n            oddCount++\n        }\n    }\n    return []interface{}{evenCount,\
    \ oddCount}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmpy31797q1_test.go:47: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=7)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmpy31797q1_test.go:47: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmpy31797q1_test.go:47: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=3452) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3\
    \ (0.00s)\n        tmpy31797q1_test.go:47: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=346211)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmpy31797q1_test.go:47: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmpy31797q1_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmpy31797q1_test.go:47: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpy31797q1_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074595
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    odd_count := 0\n    even_count := 0\n    if num <\
    \ 0 {\n        odd_count = 1\n    }\n\n    for i := 0; i < num; i++ {\n      \
    \  if num % 2 == 0 {\n            even_count++\n        } else {\n           \
    \ even_count += 2\n        }\n    }\n    return []interface{}{even_count, odd_count}\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmpxzmbkslf_test.go:51: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=14) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmpxzmbkslf_test.go:51: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=1)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmpxzmbkslf_test.go:51: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=3452) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3\
    \ (0.00s)\n        tmpxzmbkslf_test.go:51: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=692422) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmpxzmbkslf_test.go:51: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=1)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmpxzmbkslf_test.go:51: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=1)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmpxzmbkslf_test.go:51: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=1)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpxzmbkslf_test.go:51: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074595
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    odd_list := []interface{}{}\n    even_list := []interface{}{}\n\
    \    total := len(fmt.Sprint(num))\n    even_count = 0\n    odd_count = 0\n  \
    \  if num > 0 {\n        digit, err := strconv.Atoi(fmt.Sprint(num % 10))\n  \
    \      if err != nil {\n            panic(err)\n        }\n        even_count\
    \ = digit % 2\n        digit, err = strconv.Atoi(fmt.Sprint(num / 10))\n     \
    \   if err != nil {\n            panic(err)\n        }\n        odd_count = digit\
    \ % 2\n        if odd_count > 0 {\n            odd_list = append(odd_list, digit)\n\
    \        }\n        if even_count > 0 {\n            even_list = append(even_list,\
    \ digit)\n        }\n    }\n    if total % 2 > 0 {\n        even_list = append(even_list,\
    \ total%2)\n    }\n    return even_list\n}\n\nfunc TestEven_Odd_Count(t *testing.T)\
    \ {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl9tn55rv_test.go:18:5: undefined: even_count

    /tmp/tmpl9tn55rv_test.go:19:5: undefined: odd_count

    /tmp/tmpl9tn55rv_test.go:21:23: undefined: strconv

    /tmp/tmpl9tn55rv_test.go:25:9: undefined: even_count

    /tmp/tmpl9tn55rv_test.go:26:22: undefined: strconv

    /tmp/tmpl9tn55rv_test.go:30:9: undefined: odd_count

    /tmp/tmpl9tn55rv_test.go:31:12: undefined: odd_count

    /tmp/tmpl9tn55rv_test.go:34:12: undefined: even_count

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074595
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    if num < 0 {\n        return []interface{}{}\n   \
    \ }\n    var ret []interface{}\n    var oddCount int\n    var evenCount int\n\
    \    switch {\n    case num == 0:\n        return []interface{}{0, 0}\n    case\
    \ num >= 1:\n        if num % 2 == 0 {\n            evenCount = 1\n        } else\
    \ {\n            evenCount = 2\n        }\n    }\n    for i := 2; i <= num; i++\
    \ {\n        if num % i == 0 {\n            oddCount += 2\n        } else {\n\
    \            oddCount += 1\n        }\n        if oddCount == evenCount {\n  \
    \          ret = []interface{}{evenCount, oddCount}\n            break\n     \
    \   }\n    }\n    return ret\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n \
    \ candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmpe8c7m3h0_test.go:65: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=2) %!s(int=2)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmpe8c7m3h0_test.go:65: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmpe8c7m3h0_test.go:65:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__3\
    \ (0.00s)\n        tmpe8c7m3h0_test.go:65: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=2) %!s(int=2)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmpe8c7m3h0_test.go:65: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpe8c7m3h0_test.go:65:\
    \ expected '[%!s(int=1) %!s(int=0)]', got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmpe8c7m3h0_test.go:65: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpe8c7m3h0_test.go:65:\
    \ expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074595
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    num /= 10\n    var count []interface{} = []interface{}{1,\
    \ 1}\n\n    for i := 0; i < num; i += 2 {\n        count = append(count, i)\n\
    \    }\n\n    return count\n}\n</code>\n<|/ a |>\n<| c |>\nYes, I added it to\
    \ the answer.\n<|/ c |>\n<| a dscore=1 tags=go |>\nHere is a solution in JavaScript\
    \ (I assume it's valid JS since it runs in a browser):\n<code>\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmphc0adbwt_test.go:24:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074594
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    var evens []interface{}\n    var odds []interface{}\n\
    \    var digits = []int{0,1,2,3,4,5,6,7,8,9}\n\n    var evenDigits, oddDigits\
    \ int\n\n    for _, digit := range digits {\n        if num%digit == 0 {\n   \
    \         if evenDigits == 0 {\n                evenDigits = digit\n         \
    \   } else {\n                oddDigits = digit\n            }\n        }\n  \
    \  }\n\n    if evenDigits != 0 {\n        evens = append(evens, evenDigits)\n\
    \    }\n\n    if oddDigits != 0 {\n        odds = append(odds, oddDigits)\n  \
    \  }\n\n    return []interface{}{evens, odds}\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\npanic: runtime error: integer divide\
    \ by zero [recovered]\n\tpanic: runtime error: integer divide by zero\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x503920, 0x5f29a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x503920, 0x5f29a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.even_odd_count(0x0?)\n\t/tmp/tmpurjr26ln_test.go:22\
    \ +0x2dd\ncommand-line-arguments_test.TestEven_Odd_Count(0x0?)\n\t/tmp/tmpurjr26ln_test.go:49\
    \ +0x46\ntesting.tRunner(0xc0001924e0, 0x528fc8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074596
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    arr := make([]interface{}, 0, 2)\n    temp := 0\n\
    \    for num > 0 {\n        temp = num%10\n        num = num/10\n        if temp%2\
    \ == 0 {\n            arr = append(arr, temp)\n        }\n    }\n    return arr\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmp01vxx9kw_test.go:47: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmp01vxx9kw_test.go:47:\
    \ expected '[%!s(int=1) %!s(int=1)]', got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmp01vxx9kw_test.go:47: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=4)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3\
    \ (0.00s)\n        tmp01vxx9kw_test.go:47: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=2) %!s(int=6) %!s(int=4)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmp01vxx9kw_test.go:47: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmp01vxx9kw_test.go:47:\
    \ expected '[%!s(int=1) %!s(int=0)]', got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmp01vxx9kw_test.go:47: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmp01vxx9kw_test.go:47:\
    \ expected '[%!s(int=1) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074596
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    list := make([]interface{}, 0, 1)\n    if num < 0\
    \ {\n        return list\n    }\n    list := make([]interface{}, 0, 1)\n    var\
    \ remainder int\n    list[0] = num // start with a single digit\n    if num%2\
    \ == 0 {\n        remainder = num / 2\n    } else {\n        remainder = num /\
    \ 2 + 1\n    }\n    for number := int(remainder); number >= 0; number-- {\n  \
    \      list = append(list, int(number))\n    }\n    list[0] = remainder\n    return\
    \ list\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu1nov_ox_test.go:19:10: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074596
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    oddDigits := make([]interface{}, 0, 1)\n    for i\
    \ := 0; i < 10; i++ {\n        if num%2 == 0 {\n            oddDigits = append(oddDigits,\
    \ 2)\n        } else {\n            oddDigits = append(oddDigits, 1)\n       \
    \ }\n        num = num / 10\n    }\n\n    return oddDigits\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmpjug5osld_test.go:48: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmpjug5osld_test.go:48: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=2) %!s(int=1) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmpjug5osld_test.go:48: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=2) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3\
    \ (0.00s)\n        tmpjug5osld_test.go:48: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=1) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmpjug5osld_test.go:48: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmpjug5osld_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmpjug5osld_test.go:48: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=2) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpjug5osld_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074597
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    // write code here\n    odd := 0\n    even := 0\n\
    \    list := []interface{}{}\n    for i := 0; i < 10; i++ {\n        if num %\
    \ 10 == 0 {\n            even++\n        } else {\n            odd++\n       \
    \ }\n        list = append(list, fmt.Sprintf(\"%d\", i))\n    }\n    return []interface{}{even,\
    \ odd}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmpnypzm7ca_test.go:50: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=10)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmpnypzm7ca_test.go:50: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=10)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmpnypzm7ca_test.go:50: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=0) %!s(int=10)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3\
    \ (0.00s)\n        tmpnypzm7ca_test.go:50: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=10)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmpnypzm7ca_test.go:50: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=10)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmpnypzm7ca_test.go:50: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=10)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmpnypzm7ca_test.go:50: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=10)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpnypzm7ca_test.go:50: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=10) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074597
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    var evens, odds []int\n\n    for i := num; i >= 0;\
    \ i-- {\n        num := num % 10\n        if num%2 == 0 {\n            evens =\
    \ append(evens, i)\n        } else {\n            odds = append(odds, i)\n   \
    \     }\n    }\n\n    return evens, odds\n}\n\nfunc TestEven_Odd_Count(t *testing.T)\
    \ {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp31enjnma_test.go:26:19:\
    \ too many return values\n\thave ([]int, []int)\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074597
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    var even = []interface{}{}\n    var odd = []interface{}{}\n\
    \n    if num < 0 {\n        even = append(even, num%10)\n    } else {\n      \
    \  odd = append(odd, num%10)\n    }\n\n    if num%2 == 0 {\n        even = append(even,\
    \ num/10)\n    } else {\n        odd = append(odd, num/10)\n    }\n\n    return\
    \ []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate\
    \ := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected:\
    \ []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmphksxw1ke_test.go:53: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[[] [%!s(int=7) %!s(int=0)]]'\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmphksxw1ke_test.go:53: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[[%!s(int=-8) %!s(int=-7)] []]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmphksxw1ke_test.go:53: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[[%!s(int=345)] [%!s(int=2)]]'\n    --- FAIL: TestEven_Odd_Count/test_num__3\
    \ (0.00s)\n        tmphksxw1ke_test.go:53: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[[] [%!s(int=1) %!s(int=34621)]]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmphksxw1ke_test.go:53: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[[%!s(int=-1)] [%!s(int=-34582)]]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmphksxw1ke_test.go:53: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[[%!s(int=-2) %!s(int=0)] []]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmphksxw1ke_test.go:53: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[[%!s(int=-7)] [%!s(int=-4534)]]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmphksxw1ke_test.go:53: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[[%!s(int=0)] [%!s(int=0)]]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074597
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    if num < 0 {\n        return []interface{}{}\n   \
    \ }\n    if num == 0 {\n        return []interface{}{}\n    }\n    digits := getDigits(num)\n\
    \    counts := make([]interface{}, len(digits))\n    for i, d := range digits\
    \ {\n        counts[i] = (digits[i] & 1) == 0 // If i has even digit, we will\
    \ add one to the even count.\n    }\n    return counts\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu1i6__fl_test.go:21:15: undefined: getDigits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074597
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    evens := []interface{}{}\n    odds := []interface{}{}\n\
    \n    if num%2 == 0 {\n        evens = append(evens, 1)\n    } else {\n      \
    \  odds = append(odds, 1)\n    }\n\n    if num != 0 {\n        for num%10 == 0\
    \ {\n            num = num / 10\n            odds = append(odds, num)\n      \
    \  }\n\n        for num%10 != 0 {\n            num = num / 10\n            evens\
    \ = append(evens, num)\n        }\n    }\n\n    return evens\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmpv3e0ul_c_test.go:59: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n \
    \       tmpv3e0ul_c_test.go:59: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=1)\
    \ %!s(int=-7) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n\
    \        tmpv3e0ul_c_test.go:59: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=345) %!s(int=34) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3\
    \ (0.00s)\n        tmpv3e0ul_c_test.go:59: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=34621) %!s(int=3462) %!s(int=346) %!s(int=34) %!s(int=3) %!s(int=0)]'\n\
    \    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpv3e0ul_c_test.go:59:\
    \ expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=-34582) %!s(int=-3458) %!s(int=-345)\
    \ %!s(int=-34) %!s(int=-3) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmpv3e0ul_c_test.go:59: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=-4534) %!s(int=-453) %!s(int=-45) %!s(int=-4) %!s(int=0)]'\n \
    \   --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpv3e0ul_c_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074597
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    list := []interface{}{}\n    var numEven, numOdd int\n\
    \    for i := 0; i < num; {\n        if num%2 == 0 {\n            numEven++\n\
    \        } else {\n            numOdd++\n        }\n        list = append(list,\
    \ i)\n        i++\n    }\n    return append(list, numEven, numOdd)\n}\n\nfunc\
    \ TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n\
    \     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual:\
    \ candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected:\
    \ []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.17s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmpiu4lja7h_test.go:49: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=0) %!s(int=7)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n\
    \        tmpiu4lja7h_test.go:49: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n       \
    \ tmpiu4lja7h_test.go:49: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=0)\
    \ %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)\
    \ %!s(int=8) %!s(int=9) %!s(int=10) %!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14)\
    \ %!s(int=15) %!s(int=16) %!s(int=17) %!s(int=18) %!s(int=19) %!s(int=20) %!s(int=21)\
    \ %!s(int=22) %!s(int=23) %!s(int=24) %!s(int=25) %!s(int=26) %!s(int=27) %!s(int=28)\
    \ %!s(int=29) %!s(int=30) %!s(int=31) %!s(int=32) %!s(int=33) %!s(int=34) %!s(int=35)\
    \ %!s(int=36) %!s(int=37) %!s(int=38) %!s(int=39) %!s(int=40) %!s(int=41) %!s(int=42)\
    \ %!s(int=43) %!s(int=44) %!s(int=45) %!s(int=46) %!s(int=47) %!s(int=48) %!s(int=49)\
    \ %!s(int=50) %!s(int=51) %!s(int=52) %!s(int=53) %!s(int=54) %!s(int=55) %!s(int=56)\
    \ %!s(int=57) %!s(int=58) %!s(int=59) %!s(int=60) %!s(int=61) %!s(int=62) %!s(int=63)\
    \ %!s(int=64) %!s(int=65) %!s(int=66) %!s(int=67) %!s(int=68) %!s(int=69) %!s(int=70)\
    \ %!s(int=71) %!s(int=72) %!s(int=73) %!s(int=74) %!s(int=75) %!s(int=76) %!s(int=77)\
    \ %!s(int=78) %!s(int=79) %!s(int=80) %!s(int=81) %!s(int=82) %!s(int=83) %!s(int=84)\
    \ %!s(int=85) %!s(int=86) %!s(int=87) %!s(int=88) %!s(int=89) %!s(int=90) %!s(int=91)\
    \ %!s(int=92) %!s(int=93) %!s(int=94) %!s(int=95) %!s(int=96) %!s(int=97) %!s(int=98)\
    \ %!s(int=99) %!s(int=100) %!s(int=101) %!s(int=102) %!s(int=103) %!s(int=104)\
    \ %!s(int=105) %!s(int=106) %!s(int=107) %!s(int=108) %!s(int=109) %!s(int=110)\
    \ %!s(int=111) %!s(int=112) %!s(int=113) %!s(int=114) %!s(int=115) %!s(int=116)\
    \ %!s(int=117) %!s(int=118) %!s(int=119) %!s(int=120) %!s(int=121) %!s(int=122)\
    \ %!s(int=123) %!s"
  timestamp: 1660074598
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    var even = []interface{}{}\n    var odd = []interface{}{}\n\
    \    for i := 0; i < 10; i++ {\n        even += intToNumbers(num%10).Even()\n\
    \        odd += intToNumbers(num%10).Odd()\n        num /= 10\n    }\n\n    return\
    \ even, odd\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpr49hfykz_test.go:18:17:\
    \ undefined: intToNumbers\n/tmp/tmpr49hfykz_test.go:19:16: undefined: intToNumbers\n\
    /tmp/tmpr49hfykz_test.go:23:18: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074597
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    list := make([]interface{},\
    \ 1)\n    for n := num; n > 0; n-- {\n        if n%2 == 0 {\n            even++\n\
    \        } else {\n            odd++\n        }\n        list = append(list, even)\n\
    \    }\n    return list\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate\
    \ := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected:\
    \ []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.17s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmpjhbyy2c9_test.go:48: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[<nil> %!s(int=0) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=2) %!s(int=3)\
    \ %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n       \
    \ tmpjhbyy2c9_test.go:48: expected '[%!s(int=1) %!s(int=1)]', got '[<nil>]'\n\
    \    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmpjhbyy2c9_test.go:48:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[<nil> %!s(int=1) %!s(int=1) %!s(int=2)\
    \ %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=5)\
    \ %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=7) %!s(int=8) %!s(int=8) %!s(int=9)\
    \ %!s(int=9) %!s(int=10) %!s(int=10) %!s(int=11) %!s(int=11) %!s(int=12) %!s(int=12)\
    \ %!s(int=13) %!s(int=13) %!s(int=14) %!s(int=14) %!s(int=15) %!s(int=15) %!s(int=16)\
    \ %!s(int=16) %!s(int=17) %!s(int=17) %!s(int=18) %!s(int=18) %!s(int=19) %!s(int=19)\
    \ %!s(int=20) %!s(int=20) %!s(int=21) %!s(int=21) %!s(int=22) %!s(int=22) %!s(int=23)\
    \ %!s(int=23) %!s(int=24) %!s(int=24) %!s(int=25) %!s(int=25) %!s(int=26) %!s(int=26)\
    \ %!s(int=27) %!s(int=27) %!s(int=28) %!s(int=28) %!s(int=29) %!s(int=29) %!s(int=30)\
    \ %!s(int=30) %!s(int=31) %!s(int=31) %!s(int=32) %!s(int=32) %!s(int=33) %!s(int=33)\
    \ %!s(int=34) %!s(int=34) %!s(int=35) %!s(int=35) %!s(int=36) %!s(int=36) %!s(int=37)\
    \ %!s(int=37) %!s(int=38) %!s(int=38) %!s(int=39) %!s(int=39) %!s(int=40) %!s(int=40)\
    \ %!s(int=41) %!s(int=41) %!s(int=42) %!s(int=42) %!s(int=43) %!s(int=43) %!s(int=44)\
    \ %!s(int=44) %!s(int=45) %!s(int=45) %!s(int=46) %!s(int=46) %!s(int=47) %!s(int=47)\
    \ %!s(int=48) %!s(int=48) %!s(int=49) %!s(int=49) %!s(int=50) %!s(int=50) %!s(int=51)\
    \ %!s(int=51) %!s(int=52) %!s(int=52) %!s(int=53) %!s(int=53) %!s(int=54) %!s(int=54)\
    \ %!s(int=55) %!s(int=55) %!s(int=56) %!s(int=56) %!s(int=57) %!s(int=57) %!s(int=58)\
    \ %!s(int=58) %!s(int=59) %!s(int=59) %!s(int=60) %!s(int=60) %!s(int=61) %!s(int=61)\
    \ %!s(int=62) %!s(int=62) %!s(int=63) %!s(int=63) %!s(int=64) %!s(int=64) %!s(int=65)\
    \ %"
  timestamp: 1660074598
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    list := make([]interface{}, 0)\n    digits_count :=\
    \ 0\n\n    if num < 0 {\n        return list\n    }\n\n    for num > 0 {\n   \
    \     if num%2 == 0 {\n            digits_count++\n        }\n\n        num /=\
    \ 10\n    }\n\n    if digits_count % 2 == 0 {\n        list = append(list, 1)\n\
    \    }\n\n    return list\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate\
    \ := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected:\
    \ []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmpxg4fnghd_test.go:57: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n \
    \       tmpxg4fnghd_test.go:57: expected '[%!s(int=1) %!s(int=1)]', got '[]'\n\
    \    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmpxg4fnghd_test.go:57:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3\
    \ (0.00s)\n        tmpxg4fnghd_test.go:57: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpxg4fnghd_test.go:57:\
    \ expected '[%!s(int=3) %!s(int=3)]', got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmpxg4fnghd_test.go:57: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpxg4fnghd_test.go:57:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpxg4fnghd_test.go:57: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074598
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    var evenDigit, oddDigit int\n    var evenDigitList,\
    \ oddDigitList []interface{}\n    var temp int\n\n    evenDigit = 1\n    oddDigit\
    \ = 1\n\n    for num >= 10 {\n        temp = num / 10\n        if temp == 0 {\n\
    \            evenDigit = 1\n            oddDigit = 2\n            evenDigitList\
    \ = append(evenDigitList, evenDigit)\n            oddDigitList = append(oddDigitList,\
    \ oddDigit)\n            break\n        } else if temp%2 == 0 {\n            evenDigit\
    \ = evenDigit + 1\n        } else {\n            oddDigit = oddDigit + 1\n   \
    \     }\n        num = num % 10\n    }\n    if num != 0 {\n        evenDigit =\
    \ 1\n        oddDigit = 2\n        evenDigitList = append(evenDigitList, evenDigit)\n\
    \        oddDigitList = append(oddDigitList, oddDigit)\n    }\n    return evenDigitList\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmpnxhkefz7_test.go:66: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n \
    \       tmpnxhkefz7_test.go:66: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=1)]'\n\
    \    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmpnxhkefz7_test.go:66:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3\
    \ (0.00s)\n        tmpnxhkefz7_test.go:66: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n \
    \       tmpnxhkefz7_test.go:66: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=1)]'\n\
    \    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpnxhkefz7_test.go:66:\
    \ expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=1)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmpnxhkefz7_test.go:66: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n \
    \       tmpnxhkefz7_test.go:66: expected '[%!s(int=1) %!s(int=0)]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074598
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    list := make([]interface{}, 0, 2)\n    odd_count,\
    \ even_count := 1, 1\n    for num > 0 {\n        if num%2 == 0 {\n           \
    \ even_count++\n        } else {\n            odd_count++\n        }\n       \
    \ list = append(list, even_count, odd_count)\n        num /= 10\n    }\n    return\
    \ list\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmpil5i7n9p_test.go:49: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=1) %!s(int=2)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmpil5i7n9p_test.go:49: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmpil5i7n9p_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=1) %!s(int=2) %!s(int=2)\
    \ %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3\
    \ (0.00s)\n        tmpil5i7n9p_test.go:49: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3)\
    \ %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=4)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmpil5i7n9p_test.go:49: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpil5i7n9p_test.go:49:\
    \ expected '[%!s(int=1) %!s(int=0)]', got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmpil5i7n9p_test.go:49: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpil5i7n9p_test.go:49:\
    \ expected '[%!s(int=1) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074598
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    evenCount := 0\n    oddCount := 0\n    sum := num\n\
    \n    div2 := 1\n    mod := sum / div2\n    if mod > 0 {\n        evenCount +=\
    \ mod\n        sum = sum % div2\n    }\n\n    div4 := 1\n    mod = sum / div4\n\
    \    if mod > 0 {\n        oddCount += mod\n        sum = sum % div4\n    }\n\n\
    \    list := make([]interface{}, 2)\n    list[0] = evenCount\n    list[1] = oddCount\n\
    \    return list\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate :=\
    \ even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected:\
    \ []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmpaihxixmy_test.go:59: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=7) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmpaihxixmy_test.go:59: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmpaihxixmy_test.go:59: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=3452) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3\
    \ (0.00s)\n        tmpaihxixmy_test.go:59: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=346211) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmpaihxixmy_test.go:59: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmpaihxixmy_test.go:59: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmpaihxixmy_test.go:59: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpaihxixmy_test.go:59: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074598
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    list := make([]interface{}, 0, 2)\n    for num > 0\
    \ {\n        if num % 2 == 0 {\n            list = append(list, num)\n       \
    \ }\n        if num % 2 != 0 {\n            list = append(list, 1)\n        }\n\
    \        num /= 10\n    }\n    return list\n}\n\nfunc TestEven_Odd_Count(t *testing.T)\
    \ {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmp4s91hgi0_test.go:48: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n \
    \       tmp4s91hgi0_test.go:48: expected '[%!s(int=1) %!s(int=1)]', got '[]'\n\
    \    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmp4s91hgi0_test.go:48:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=3452) %!s(int=1) %!s(int=34)\
    \ %!s(int=1)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n       \
    \ tmp4s91hgi0_test.go:48: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=1) %!s(int=3462) %!s(int=346) %!s(int=34) %!s(int=1)]'\n    --- FAIL:\
    \ TestEven_Odd_Count/test_num__4 (0.00s)\n        tmp4s91hgi0_test.go:48: expected\
    \ '[%!s(int=3) %!s(int=3)]', got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmp4s91hgi0_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmp4s91hgi0_test.go:48:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp4s91hgi0_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074598
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    evenCount := 0\n    oddCount := 0\n    res := []interface{}{}\n\
    \n    divider := num / 2\n\n    for num >= divider {\n        if num % 2 == 0\
    \ {\n            res = append(res, divider)\n            evenCount++\n       \
    \ } else {\n            res = append(res, divider)\n            oddCount++\n \
    \       }\n        num = num / 2\n    }\n    if num != 0 {\n        res = append(res,\
    \ num)\n        evenCount++\n    }\n\n    return res, evenCount, oddCount\n}\n\
    \nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n\
    \     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual:\
    \ candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected:\
    \ []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpxj2fwf6v_test.go:36:17:\
    \ too many return values\n\thave ([]interface{}, int, int)\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074598
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    var ret []interface{}\n    for num > 0 {\n       \
    \ n, i := num%10, num/10 % 10\n        if i == 0 {\n            ret = append(ret,\
    \ n, n)\n        }\n        if i < 0 {\n            ret = append(ret, n, n+1)\n\
    \        }\n        if i > 0 {\n            ret = append(ret, n, n-1)\n      \
    \  }\n        num = i\n    }\n    return ret\n}\n\nfunc TestEven_Odd_Count(t *testing.T)\
    \ {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmpk509b_3t_test.go:52: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=7) %!s(int=7)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmpk509b_3t_test.go:52: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmpk509b_3t_test.go:52:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=1) %!s(int=5) %!s(int=5)]'\n\
    \    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmpk509b_3t_test.go:52:\
    \ expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=1) %!s(int=0) %!s(int=1) %!s(int=1)]'\n\
    \    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpk509b_3t_test.go:52:\
    \ expected '[%!s(int=3) %!s(int=3)]', got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmpk509b_3t_test.go:52: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpk509b_3t_test.go:52:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpk509b_3t_test.go:52: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074598
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    var result []interface{}\n    for i := 0; i < num;\
    \ i++ {\n        if ((num % 10) % 2 == 0) {\n            result = append(result,\
    \ 1)\n        } else {\n            result = append(result, 2)\n        }\n  \
    \      num /= 10\n    }\n    return result\n}\n\nfunc TestEven_Odd_Count(t *testing.T)\
    \ {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmpxa4w8jwd_test.go:47: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=2)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n \
    \       tmpxa4w8jwd_test.go:47: expected '[%!s(int=1) %!s(int=1)]', got '[]'\n\
    \    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmpxa4w8jwd_test.go:47:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=2) %!s(int=1)]'\n\
    \    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmpxa4w8jwd_test.go:47:\
    \ expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n       \
    \ tmpxa4w8jwd_test.go:47: expected '[%!s(int=3) %!s(int=3)]', got '[]'\n    ---\
    \ FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpxa4w8jwd_test.go:47:\
    \ expected '[%!s(int=1) %!s(int=0)]', got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmpxa4w8jwd_test.go:47: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpxa4w8jwd_test.go:47:\
    \ expected '[%!s(int=1) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074598
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    result := make([]interface{}, 0)\n    num := num\n\
    \    var even int\n    var odd int\n    \n    \n    // even - odd counter\n  \
    \  for num > 0 {\n        if num%2 == 0 {\n            even++\n        } else\
    \ {\n            odd++\n        }\n        num = num / 2\n    }\n\n    fmt.Printf(\"\
    %+v\", even)\n    fmt.Printf(\"%+v\", odd)\n    result = append(result, even,\
    \ odd)\n    return result\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate\
    \ := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected:\
    \ []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppt5qtxsc_test.go:16:9: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074598
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    if num < 0 {\n        return []interface{}{1, 1}\n\
    \    }\n    evenDigits := 0\n    oddDigits := 0\n    digit := num\n    for digit\
    \ > 0 {\n        if digit%2 == 0 {\n            evenDigits += 1\n        } else\
    \ {\n            oddDigits += 1\n        }\n        digit = digit/10\n    }\n\n\
    \    return []interface{}{evenDigits, oddDigits}\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmphdtil6xl_test.go:53: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmphdtil6xl_test.go:53: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmphdtil6xl_test.go:53: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmphdtil6xl_test.go:53: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074599
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    var list []interface{}\n    list[0] = num\n    list[1]\
    \ = num\n    odd, even := 0, 0\n    for i := 2; i < len(list); i++ {\n       \
    \ if list[i]%2 == 0 {\n            even++\n        } else {\n            odd++\n\
    \        }\n        list[i] = odd\n        list[i] = even\n    }\n    return list\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmdpny2_w_test.go:20:12: invalid operation: list[i] % 2 (mismatched types
    interface{} and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074598
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    var even = []int{num}\n    var odd = []int{}\n   \
    \ for i := 0; i < num; i++ {\n        if num % 2 == 0 {\n            even = append(even,\
    \ num)\n        } else {\n            odd = append(odd, num)\n        }\n    }\n\
    \    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Count(t *testing.T)\
    \ {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.13s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmpdrootyr1_test.go:47: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[[%!s(int=7)] [%!s(int=7) %!s(int=7) %!s(int=7) %!s(int=7) %!s(int=7) %!s(int=7)\
    \ %!s(int=7)]]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n      \
    \  tmpdrootyr1_test.go:47: expected '[%!s(int=1) %!s(int=1)]', got '[[%!s(int=-78)]\
    \ []]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmpdrootyr1_test.go:47:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[[%!s(int=3452) %!s(int=3452) %!s(int=3452)\
    \ %!s(int=3452) %!s(int=3452) %!s(int=3452) %!s(int=3452) %!s(int=3452) %!s(int=3452)\
    \ %!s(int=3452) %!s(int=3452) %!s(int=3452) %!s(int=3452) %!s(int=3452) %!s(int=3452)\
    \ %!s(int=3452) %!s(int=3452) %!s(int=3452) %!s(int=3452) %!s(int=3452) %!s(int=3452)\
    \ %!s(int=3452) %!s(int=3452) %!s(int=3452) %!s(int=3452) %!s(int=3452) %!s(int=3452)\
    \ %!s(int=3452) %!s(int=3452) %!s(int=3452) %!s(int=3452) %!s(int=3452) %!s(int=3452)\
    \ %!s(int=3452) %!s(int=3452) %!s(int=3452) %!s(int=3452) %!s(int=3452) %!s(int=3452)\
    \ %!s(int=3452) %!s(int=3452) %!s(int=3452) %!s(int=3452) %!s(int=3452) %!s(int=3452)\
    \ %!s(int=3452) %!s(int=3452) %!s(int=3452) %!s(int=3452) %!s(int=3452) %!s(int=3452)\
    \ %!s(int=3452) %!s(int=3452) %!s(int=3452) %!s(int=3452) %!s(int=3452) %!s(int=3452)\
    \ %!s(int=3452) %!s(int=3452) %!s(int=3452) %!s(int=3452) %!s(int=3452) %!s(int=3452)\
    \ %!s(int=3452) %!s(int=3452) %!s(int=3452) %!s(int=3452) %!s(int=3452) %!s(int=3452)\
    \ %!s(int=3452) %!s(int=3452) %!s(int=3452) %!s(int=3452) %!s(int=3452) %!s(int=3452)\
    \ %!s(int=3452) %!s(int=3452) %!s(int=3452) %!s(int=3452) %!s(int=3452) %!s(int=3452)\
    \ %!s(int=3452) %!s(int=3452) %!s(int=3452) %!s(int=3452) %!s(int=3452) %!s(int=3452)\
    \ %!s(int=3452) %!s(int=3452) %!s(int=3452) %!s(int=3452) %!s(int=3452) %!s(int=3452)\
    \ %!s(int=3452) %!s(int=3452) %!s(int=3452) %!s(int=3452) %!s(int=3452) %!s(int=3452)\
    \ %!s(int=3452) %!s(int=3452) %!s(int=3452) %!s(int=3452) %!s(int=3452) %!s(int=3452)\
    \ %!s(int=3452) %!s(int=3452) %!s(int=3452) %!s"
  timestamp: 1660074599
- exit_code: null
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    arr := []interface{}{}\n    digit := num / 10\n  \
    \  i := 0\n    for num != 0 {\n        if num%10 == digit {\n            arr =\
    \ append(arr, i)\n            num = 0\n        } else {\n            num -= num%10\n\
    \        }\n        i++\n    }\n    return arr\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074612
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    digits := make([]int, 10)\n    var even, odd int\n\
    \    result := []interface{}{}\n    for i := 0; i < 10; i++ {\n        digits[i]\
    \ = num % 10\n        if digits[i] != 0 {\n            even++\n        } else\
    \ {\n            odd++\n        }\n        num = num / 10\n    }\n    for i :=\
    \ 0; i < even; i++ {\n        result = append(result, even)\n    }\n    for i\
    \ := 0; i < odd; i++ {\n        result = append(result, odd)\n    }\n    return\
    \ result\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmpvr9ul70r_test.go:56: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=1) %!s(int=9) %!s(int=9) %!s(int=9) %!s(int=9) %!s(int=9) %!s(int=9)\
    \ %!s(int=9) %!s(int=9) %!s(int=9)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmpvr9ul70r_test.go:56: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=2) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=8) %!s(int=8) %!s(int=8)\
    \ %!s(int=8) %!s(int=8) %!s(int=8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmpvr9ul70r_test.go:56: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=6) %!s(int=6) %!s(int=6)\
    \ %!s(int=6) %!s(int=6) %!s(int=6)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3\
    \ (0.00s)\n        tmpvr9ul70r_test.go:56: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=6) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=4)\
    \ %!s(int=4) %!s(int=4) %!s(int=4)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmpvr9ul70r_test.go:56: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=6) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=4)\
    \ %!s(int=4) %!s(int=4) %!s(int=4)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmpvr9ul70r_test.go:56: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=1) %!s(int=9) %!s(int=9) %!s(int=9) %!s(int=9) %!s(int=9) %!s(int=9)\
    \ %!s(int=9) %!s(int=9) %!s(int=9)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmpvr9ul70r_test.go:56: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpvr9ul70r_test.go:56: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=10) %!s(int=10) %!s(int=10) %!s(int=10) %!s(int=10) %!s(int=10)\
    \ %!s(int=10) %!s(int=10) %!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074599
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    // Your code here\n    if num > 0 && num < 0 {\n \
    \       return nil\n    }\n    list := []interface{}{}\n    sum := int(0)\n  \
    \  for i := 0; i < num; i++ {\n        sum += int(num % 10)\n        if num%2\
    \ == 0 {\n            list = append(list, i+sum)\n        }\n    }\n    return\
    \ list\n}\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmpucyhz664_test.go:49: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpucyhz664_test.go:49:\
    \ expected '[%!s(int=1) %!s(int=1)]', got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmpucyhz664_test.go:49: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=5) %!s(int=8) %!s(int=11) %!s(int=14) %!s(int=17) %!s(int=20)\
    \ %!s(int=23) %!s(int=26) %!s(int=29) %!s(int=32) %!s(int=35) %!s(int=38) %!s(int=41)\
    \ %!s(int=44) %!s(int=47) %!s(int=50) %!s(int=53) %!s(int=56) %!s(int=59) %!s(int=62)\
    \ %!s(int=65) %!s(int=68) %!s(int=71) %!s(int=74) %!s(int=77) %!s(int=80) %!s(int=83)\
    \ %!s(int=86) %!s(int=89) %!s(int=92) %!s(int=95) %!s(int=98) %!s(int=101) %!s(int=104)\
    \ %!s(int=107) %!s(int=110) %!s(int=113) %!s(int=116) %!s(int=119) %!s(int=122)\
    \ %!s(int=125) %!s(int=128) %!s(int=131) %!s(int=134) %!s(int=137) %!s(int=140)\
    \ %!s(int=143) %!s(int=146) %!s(int=149) %!s(int=152) %!s(int=155) %!s(int=158)\
    \ %!s(int=161) %!s(int=164) %!s(int=167) %!s(int=170) %!s(int=173) %!s(int=176)\
    \ %!s(int=179) %!s(int=182) %!s(int=185) %!s(int=188) %!s(int=191) %!s(int=194)\
    \ %!s(int=197) %!s(int=200) %!s(int=203) %!s(int=206) %!s(int=209) %!s(int=212)\
    \ %!s(int=215) %!s(int=218) %!s(int=221) %!s(int=224) %!s(int=227) %!s(int=230)\
    \ %!s(int=233) %!s(int=236) %!s(int=239) %!s(int=242) %!s(int=245) %!s(int=248)\
    \ %!s(int=251) %!s(int=254) %!s(int=257) %!s(int=260) %!s(int=263) %!s(int=266)\
    \ %!s(int=269) %!s(int=272) %!s(int=275) %!s(int=278) %!s(int=281) %!s(int=284)\
    \ %!s(int=287) %!s(int=290) %!s(int=293) %!s(int=296) %!s(int=299) %!s(int=302)\
    \ %!s(int=305) %!s(int=308) %!s(int=311) %!s(int=314) %!s(int=317) %!s(int=320)\
    \ %!s(int=323) %!s(int=326) %!s(int=329) %!s(int=332) %!s(int=335) %!s(int=338)\
    \ %!s(int=341) %!s(int=344) %!s(int=347) %!s(int=350) %!s(int=353) %!s(int=356)\
    \ %!s(int=359) %!s(int=362) %!s(int=365) %!s(int=368) %!s(int=371) %!s(int=374)\
    \ %!s(int=377) %!s(int=380) %!s(int=3"
  timestamp: 1660074599
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    var result = make([]interface{}, 0, 2)\n    if num\
    \ < 0 {\n        return []interface{}{}\n    }\n    num %= 10\n    evenDigit :=\
    \ true\n    for num > 0 {\n        if num%2 == 0 && evenDigit {\n            evenDigit\
    \ = true\n            result = append(result, \"even\")\n        } else {\n  \
    \          evenDigit = false\n            result = append(result, \"odd\")\n \
    \       }\n        num /= 10\n    }\n    return result\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmp37bp75u1_test.go:54: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[odd]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmp37bp75u1_test.go:54:\
    \ expected '[%!s(int=1) %!s(int=1)]', got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmp37bp75u1_test.go:54: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[even]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n       \
    \ tmp37bp75u1_test.go:54: expected '[%!s(int=3) %!s(int=3)]', got '[odd]'\n  \
    \  --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmp37bp75u1_test.go:54:\
    \ expected '[%!s(int=3) %!s(int=3)]', got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmp37bp75u1_test.go:54: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmp37bp75u1_test.go:54:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp37bp75u1_test.go:54: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074599
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    // TODO: Write me\n    return []interface{}{}\n}\n\
    \nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n\
    \     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual:\
    \ candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected:\
    \ []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmp7s57zj_3_test.go:39: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmp7s57zj_3_test.go:39:\
    \ expected '[%!s(int=1) %!s(int=1)]', got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmp7s57zj_3_test.go:39: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmp7s57zj_3_test.go:39:\
    \ expected '[%!s(int=3) %!s(int=3)]', got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmp7s57zj_3_test.go:39: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmp7s57zj_3_test.go:39:\
    \ expected '[%!s(int=1) %!s(int=0)]', got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmp7s57zj_3_test.go:39: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmp7s57zj_3_test.go:39:\
    \ expected '[%!s(int=1) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074599
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    listOfNum := make([]interface{}, 0, 2)\n    for num\
    \ > 0 {\n        if num%2 == 0 {\n            listOfNum = append(listOfNum, 2)\n\
    \        } else {\n            listOfNum = append(listOfNum, 1)\n        }\n \
    \       num = num / 10\n    }\n    return listOfNum\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmp9tyvzji6_test.go:47: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n \
    \       tmp9tyvzji6_test.go:47: expected '[%!s(int=1) %!s(int=1)]', got '[]'\n\
    \    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmp9tyvzji6_test.go:47:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1)]'\n\
    \    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmp9tyvzji6_test.go:47:\
    \ expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=2)\
    \ %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n\
    \        tmp9tyvzji6_test.go:47: expected '[%!s(int=3) %!s(int=3)]', got '[]'\n\
    \    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmp9tyvzji6_test.go:47:\
    \ expected '[%!s(int=1) %!s(int=0)]', got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmp9tyvzji6_test.go:47: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmp9tyvzji6_test.go:47:\
    \ expected '[%!s(int=1) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074600
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even_odd_count_test := []interface{}{}\n    even_count\
    \ = 0\n    odd_count = 0\n    for i := 0; i < num; i++ {\n        if i%2 == 0\
    \ {\n            even_odd_count_test = append(even_odd_count_test, 1)\n      \
    \      even_count++\n        } else {\n            even_odd_count_test = append(even_odd_count_test,\
    \ 2)\n            odd_count++\n        }\n    }\n    return even_odd_count_test\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr8ne0m70_test.go:16:5: undefined: even_count

    /tmp/tmpr8ne0m70_test.go:17:5: undefined: odd_count

    /tmp/tmpr8ne0m70_test.go:21:13: undefined: even_count

    /tmp/tmpr8ne0m70_test.go:24:13: undefined: odd_count

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074599
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    evenCounter := 0\n    oddCounter := 0\n    ret :=\
    \ []interface{}{}\n    for i := 0; i < len(strconv.Itoa(num)); i++ {\n       \
    \ if (i%2 == 0) {\n            evenCounter = evenCounter + 1\n        }\n    \
    \    if (i%2 != 0) {\n            oddCounter = oddCounter + 1\n        }\n   \
    \ }\n    fmt.Printf(\"evenCounter: %d, oddCounter: %d\\n\", evenCounter, oddCounter)\n\
    \    return ret\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate :=\
    \ even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected:\
    \ []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7jith8y7_test.go:18:25: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074599
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    if num == 0 {\n        return nil\n    }\n\n    even_digits\
    \ := make([]interface{}, 0)\n    odd_digits := make([]interface{}, 0)\n\n    for\
    \ digit := num / 10; digit > 0; digit /= 10 {\n        if digit%2 == 0 {\n   \
    \         even_digits = append(even_digits, digit)\n        } else {\n       \
    \     odd_digits = append(odd_digits, digit)\n        }\n    }\n\n    return []interface{}{even_digits,\
    \ odd_digits}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmp0fje025s_test.go:53: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[[] []]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n      \
    \  tmp0fje025s_test.go:53: expected '[%!s(int=1) %!s(int=1)]', got '[[] []]'\n\
    \    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmp0fje025s_test.go:53:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[[%!s(int=34)] [%!s(int=345) %!s(int=3)]]'\n\
    \    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmp0fje025s_test.go:53:\
    \ expected '[%!s(int=3) %!s(int=3)]', got '[[%!s(int=3462) %!s(int=346) %!s(int=34)]\
    \ [%!s(int=34621) %!s(int=3)]]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmp0fje025s_test.go:53: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[[] []]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n      \
    \  tmp0fje025s_test.go:53: expected '[%!s(int=1) %!s(int=0)]', got '[[] []]'\n\
    \    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmp0fje025s_test.go:53:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[[] []]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp0fje025s_test.go:53: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074600
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    odd := []interface{}{}\n    even := []interface{}{}\n\
    \n    n := len(fmt.Sprintf(\"%v\", num))\n    if n < 3 {\n        return odd\n\
    \    }\n\n    i := 0\n    for ; i < n; i++ {\n        var numInt = num / 10\n\
    \        var digit = num%10\n\n        if digit % 2 == 0 {\n            even =\
    \ append(even, digit)\n        }\n\n        if digit % 2 != 0 {\n            odd\
    \ = append(odd, digit)\n        }\n    }\n\n    return even\n}\n</code>\nYou can\
    \ then use it like this in your test suite:\n<code>\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp74hacu4c_test.go:39:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074599
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    var counts []interface{}\n    switch {\n    case num\
    \ < 0:\n        counts = []interface{}{1, 1}\n    case num == 0:\n        counts\
    \ = []interface{}{1, 0}\n    case num < 10:\n        counts = []interface{}{1,\
    \ 1}\n    default:\n        var oddCount int\n        var evenCount int\n    \
    \    var remainder int\n        for remainder = num; remainder != 0; remainder\
    \ /= 10 {\n            if remainder % 2 == 1 {\n                evenCount++\n\
    \            } else {\n                oddCount++\n            }\n        }\n\
    \        counts = []interface{}{evenCount, oddCount}\n    }\n    return counts\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmpqduwymb1_test.go:59: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmpqduwymb1_test.go:59: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmpqduwymb1_test.go:59: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmpqduwymb1_test.go:59: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=1) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074600
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    var list []interface{}\n    for i := 0; i < 10; i++\
    \ {\n        if num % 2 == 0 {\n            list = append(list, i)\n        }\n\
    \        num /= 10\n    }\n    return list\n}\n\nfunc TestEven_Odd_Count(t *testing.T)\
    \ {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmpakyg559a_test.go:45: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)\
    \ %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n\
    \        tmpakyg559a_test.go:45: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n       \
    \ tmpakyg559a_test.go:45: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=0)\
    \ %!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\n\
    \    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmpakyg559a_test.go:45:\
    \ expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=2) %!s(int=3) %!s(int=4) %!s(int=6)\
    \ %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmpakyg559a_test.go:45: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=4) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\n\
    \    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpakyg559a_test.go:45:\
    \ expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\n    ---\
    \ FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpakyg559a_test.go:45:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=1) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpakyg559a_test.go:45: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074600
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    var result []interface{} = []interface{}{}\n    if\
    \ num < 0 {\n        return nil\n    }\n    if num == 0 {\n        return nil\n\
    \    }\n    num /= 10\n    even := true\n    for num != 0 {\n        even = !even\n\
    \        if even {\n            result = append(result, nil)\n        } else {\n\
    \            result = append(result, int(num%10))\n        }\n        num /= 10\n\
    \    }\n    return result\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate\
    \ := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected:\
    \ []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmpmitjahhw_test.go:56: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpmitjahhw_test.go:56:\
    \ expected '[%!s(int=1) %!s(int=1)]', got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmpmitjahhw_test.go:56: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=5) <nil> %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3\
    \ (0.00s)\n        tmpmitjahhw_test.go:56: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=1) <nil> %!s(int=6) <nil> %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmpmitjahhw_test.go:56: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpmitjahhw_test.go:56:\
    \ expected '[%!s(int=1) %!s(int=0)]', got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmpmitjahhw_test.go:56: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpmitjahhw_test.go:56:\
    \ expected '[%!s(int=1) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074600
- exit_code: null
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    result := []interface{}{}\n    for i := num; i > 0;\
    \ {\n        i := i % 10\n        if i%2 == 0 {\n            result = append(result,i)\n\
    \        } else {\n            result = append(result,i-10)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate\
    \ := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected:\
    \ []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074613
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    result := make([]interface{}, 0)\n    for num > 0\
    \ {\n        // Find the first digit that's even\n        i := num / 10\n    \
    \    // Find the first digit that's odd\n        j = num % 10\n        if i%2\
    \ == 0 && j%2 == 0 {\n            result = append(result, i)\n            result\
    \ = append(result, j)\n        }\n        num = num / 10\n    }\n    return result\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpitj8jqze_test.go:20:9: undefined: j

    /tmp/tmpitj8jqze_test.go:21:24: undefined: j

    /tmp/tmpitj8jqze_test.go:23:37: undefined: j

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074600
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    evenCountList := make([]interface{}, 0, 1)\n    oddCountList\
    \ := make([]interface{}, 0, 1)\n    var countList []interface{}\n\n    num /=\
    \ 10\n    if num == 0 {\n        evenCountList[0] = 1\n        oddCountList[0]\
    \ = 1\n        countList = evenCountList\n    }\n\n    for i := 9; i >= 1; i--\
    \ {\n        num /= 10\n        if num == 0 {\n            evenCountList[0] =\
    \ i\n            oddCountList[0] = (i * 2)\n            countList = append(countList,\
    \ evenCountList)\n            countList = append(countList, oddCountList)\n  \
    \      } else {\n            evenCountList[0] = (i * 2)\n            oddCountList[0]\
    \ = i\n            countList = append(countList, evenCountList)\n            countList\
    \ = append(countList, oddCountList)\n        }\n    }\n\n    return countList\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\npanic: runtime error: index out of\
    \ range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range\
    \ [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5136a0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5136a0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.even_odd_count(0x7)\n\t/tmp/tmpkucsashd_test.go:21\
    \ +0xc5\ncommand-line-arguments_test.TestEven_Odd_Count(0x0?)\n\t/tmp/tmpkucsashd_test.go:51\
    \ +0x46\ntesting.tRunner(0xc0001964e0, 0x528fc8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074600
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    evenCount := 0\n    oddCount := 0\n    if num < 0\
    \ {\n        return []interface{}{}\n    }\n    count := 0\n    var i int\n  \
    \  for i = len(strNum(num)); i > 0; i-- {\n        if num % 10 != 0 {\n      \
    \      count++\n        }\n        num /= 10\n    }\n    if num > 0 {\n      \
    \  count++\n    }\n    if count % 2 == 0 {\n        evenCount += count\n    }\n\
    \    if count % 2 == 1 {\n        oddCount += count\n    }\n    return []interface{}{evenCount,\
    \ oddCount}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcuj_3ovy_test.go:22:17: undefined: strNum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074600
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    var even = make([]interface{}, 0, num/10)\n    var\
    \ odd = make([]interface{}, 0, num%10)\n    for i := 1; i <= num; i++ {\n    \
    \    digit := num / 10 * 10\n        if digit % 2 == 0 {\n            even = append(even,\
    \ digit)\n        } else {\n            odd = append(odd, digit)\n        }\n\
    \    }\n    return even, odd\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n \
    \ candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_aj_o4po_test.go:25:18:\
    \ too many return values\n\thave ([]interface{}, []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074600
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    list := []interface{}{}\n    digits := numToStringList(num)\n\
    \    for _, digit := range digits {\n        if int(digit) % 2 == 0 {\n      \
    \      list = append(list, 1)\n        } else {\n            list = append(list,\
    \ 2)\n        }\n    }\n    return list\n}\n\nfunc TestEven_Odd_Count(t *testing.T)\
    \ {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_e5kkdhv_test.go:16:15: undefined: numToStringList

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074600
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    list := []interface{}{}\n    if num > 0 {\n      \
    \  evenDigit := num / 10\n        oddDigit := num % 10\n        if evenDigit ==\
    \ 1 {\n            list = append(list, evenDigit)\n        }\n        if oddDigit\
    \ == 0 {\n            list = append(list, oddDigit)\n        }\n        if oddDigit\
    \ == 1 {\n            list = append(list, oddDigit)\n        }\n        if evenDigit\
    \ == 0 {\n            list = append(list, evenDigit)\n        }\n    }\n    return\
    \ list\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmp666mb3if_test.go:55: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n \
    \       tmp666mb3if_test.go:55: expected '[%!s(int=1) %!s(int=1)]', got '[]'\n\
    \    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmp666mb3if_test.go:55:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__3\
    \ (0.00s)\n        tmp666mb3if_test.go:55: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n \
    \       tmp666mb3if_test.go:55: expected '[%!s(int=3) %!s(int=3)]', got '[]'\n\
    \    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmp666mb3if_test.go:55:\
    \ expected '[%!s(int=1) %!s(int=0)]', got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmp666mb3if_test.go:55: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmp666mb3if_test.go:55:\
    \ expected '[%!s(int=1) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074601
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    var evenNums []int\n    var oddNums []int\n    \n\
    \    for i := 0; i < num; i++ {\n        switch {\n        case num % 2 == 0 &&\
    \ evenNums == nil:\n            evenNums = append(evenNums, int(num))\n      \
    \  case num % 2 != 0 && oddNums == nil:\n            oddNums = append(oddNums,\
    \ int(num))\n        }\n    }\n    \n    return evenNums\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn7ypnf96_test.go:27:12: cannot use evenNums (variable of type []int) as
    type []interface{} in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074601
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    var evens, odds int\n    \n    for i := 0; i < 10;\
    \ i++ {\n        if num%10 == i {\n            evens++\n        } else {\n   \
    \         odds++\n        }\n        num /= 10\n    }\n    \n    result := []interface{}{}\n\
    \    \n    for i := 0; i < evens; i++ {\n        result = append(result, 1)\n\
    \    }\n    \n    for i := 0; i < odds; i++ {\n        result = append(result,\
    \ 2)\n    }\n    \n    return result\n}\n\nfunc TestEven_Odd_Count(t *testing.T)\
    \ {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmp5w5ma6vu_test.go:59: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmp5w5ma6vu_test.go:59: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmp5w5ma6vu_test.go:59: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3\
    \ (0.00s)\n        tmp5w5ma6vu_test.go:59: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmp5w5ma6vu_test.go:59: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmp5w5ma6vu_test.go:59: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmp5w5ma6vu_test.go:59: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp5w5ma6vu_test.go:59: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074601
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    var list_result []interface{}\n    var i int\n   \
    \ var is_odd bool\n    for i := 0; i < 10; i++ {\n        // even digit\n    \
    \    is_odd = (num%10%2 == 0)\n        list_result = append(list_result, is_odd)\n\
    \        num /= 10\n    }\n    if num > 0 {\n        // odd digit\n        is_odd\
    \ = (num%10%2 == 1)\n        list_result = append(list_result, is_odd)\n    }\n\
    \    return list_result\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate\
    \ := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected:\
    \ []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdnd5cmxz_test.go:16:9: i declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074601
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd, ok := [], [], []\n\n    for d := 0; num\
    \ > 0; d += 2 {\n        if num%10 == 0 {\n            ok = true\n           \
    \ even = append(even, num)\n        } else {\n            ok = false\n       \
    \     odd = append(odd, num)\n        }\n        num /= 10\n    }\n\n    if ok\
    \ {\n        return even\n    }\n    return odd\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpaag7q46r_test.go:15:24: expected type, found '',''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074600
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even := num / 10\n    odd := num % 10\n\n    return\
    \ []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate\
    \ := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected:\
    \ []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmpvamlz4h7_test.go:41: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=7)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmpvamlz4h7_test.go:41: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=-7) %!s(int=-8)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmpvamlz4h7_test.go:41: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=345) %!s(int=2)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3\
    \ (0.00s)\n        tmpvamlz4h7_test.go:41: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=34621) %!s(int=1)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmpvamlz4h7_test.go:41: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=-34582) %!s(int=-1)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmpvamlz4h7_test.go:41: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=-2)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmpvamlz4h7_test.go:41: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=-4534) %!s(int=-7)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpvamlz4h7_test.go:41: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074601
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    var result []interface{}\n    \n    // The algorithm\
    \ is O(n) where n is the length of the number.\n    // For an example of an n\
    \ of 10, the algorithm would be O(n^2).\n    for i := 0; i < 10; i++ {\n     \
    \   if num % 2 == 0 {\n            result = append(result, i)\n        }\n   \
    \     \n        // The num is divided by 2.\n        num = num / 2\n    }\n  \
    \  \n    return result\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate\
    \ := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected:\
    \ []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmpgchkalsu_test.go:51: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\n\
    \    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpgchkalsu_test.go:51:\
    \ expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=4) %!s(int=5) %!s(int=7)\
    \ %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n\
    \        tmpgchkalsu_test.go:51: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=0)\
    \ %!s(int=1) %!s(int=7) %!s(int=9)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3\
    \ (0.00s)\n        tmpgchkalsu_test.go:51: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=2) %!s(int=3) %!s(int=4) %!s(int=7) %!s(int=8) %!s(int=9)]'\n\
    \    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpgchkalsu_test.go:51:\
    \ expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=1) %!s(int=5) %!s(int=8)]'\n\
    \    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpgchkalsu_test.go:51:\
    \ expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)\
    \ %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmpgchkalsu_test.go:51: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=2) %!s(int=3) %!s(int=4) %!s(int=6) %!s(int=7) %!s(int=9)]'\n\
    \    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpgchkalsu_test.go:51:\
    \ expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074601
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    list := make([]interface{}, 2)\n    \n    // first\
    \ place the even numbers\n    if num < 0 {\n        list[0] = 1\n        list[1]\
    \ = -1\n    } else {\n        for i := 0; i < len(strconv.Itoa(num)); i++ {\n\
    \            if strconv.Itoa(num) % 2 == 0 {\n                list[0]++\n    \
    \        } else {\n                list[1]++\n            }\n        }\n    }\n\
    \    \n    // then place the odd numbers\n    if num < 0 {\n        list[0] +=\
    \ 2\n        list[1] += 2\n    } else {\n        for i := 0; i < len(strconv.Itoa(num));\
    \ i++ {\n            if strconv.Itoa(num) % 2 != 0 {\n                list[0]++\n\
    \            } else {\n                list[1]++\n            }\n        }\n \
    \   }\n    return list\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate\
    \ := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected:\
    \ []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpatxcjmf0_test.go:22:29: undefined: strconv

    /tmp/tmpatxcjmf0_test.go:23:16: undefined: strconv

    /tmp/tmpatxcjmf0_test.go:24:17: invalid operation: list[0]++ (non-numeric type
    interface{})

    /tmp/tmpatxcjmf0_test.go:26:17: invalid operation: list[1]++ (non-numeric type
    interface{})

    /tmp/tmpatxcjmf0_test.go:33:9: invalid operation: list[0] += 2 (mismatched types
    interface{} and int)

    /tmp/tmpatxcjmf0_test.go:34:9: invalid operation: list[1] += 2 (mismatched types
    interface{} and int)

    /tmp/tmpatxcjmf0_test.go:36:29: undefined: strconv

    /tmp/tmpatxcjmf0_test.go:37:16: undefined: strconv

    /tmp/tmpatxcjmf0_test.go:38:17: invalid operation: list[0]++ (non-numeric type
    interface{})

    /tmp/tmpatxcjmf0_test.go:40:17: invalid operation: list[1]++ (non-numeric type
    interface{})

    /tmp/tmpatxcjmf0_test.go:40:17: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074601
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    var result []interface{}\n    arr := make([]int, len(strconv.Itoa(num)))\n\
    \    for index := range arr {\n        arr[index] = int(strconv.Itoa(num))[index]\n\
    \    }\n    for index, num := range arr {\n        if num%2 == 0 {\n         \
    \   result = append(result, num)\n        } else {\n            result = append(result,\
    \ num+1)\n        }\n    }\n    return result\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd_o3_omy_test.go:16:28: undefined: strconv

    /tmp/tmpd_o3_omy_test.go:18:26: undefined: strconv

    /tmp/tmpd_o3_omy_test.go:20:9: index declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074601
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    if num == 0 {\n        return []interface{}{}\n  \
    \  }\n    var even, odd int\n    for i := 0; i < num; i++ {\n        if i%2 ==\
    \ 0 {\n            even++\n        } else {\n            odd++\n        }\n  \
    \  }\n    evenList := make([]interface{}, even)\n    for i := 0; i < even; i++\
    \ {\n        evenList = append(evenList, i)\n    }\n    oddList := make([]interface{},\
    \ odd)\n    for i := 0; i < odd; i++ {\n        oddList = append(oddList, i+even)\n\
    \    }\n    return evenList\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate\
    \ := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected:\
    \ []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.14s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmpur8bwhx9_test.go:57: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[<nil> <nil> <nil> <nil> %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n\
    \    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpur8bwhx9_test.go:57:\
    \ expected '[%!s(int=1) %!s(int=1)]', got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmpur8bwhx9_test.go:57: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[<nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil>\
    \ <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil>\
    \ <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil>\
    \ <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil>\
    \ <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil>\
    \ <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil>\
    \ <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil>\
    \ <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil>\
    \ <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil>\
    \ <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil>\
    \ <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil>\
    \ <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil>\
    \ <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil>\
    \ <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil>\
    \ <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil>\
    \ <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil>\
    \ <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil>\
    \ <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil>\
    \ <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil>\
    \ <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil>\
    \ <ni"
  timestamp: 1660074602
- exit_code: null
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    if num < 0 {\n        return []interface{}{}\n   \
    \ }\n\n    even_odd_num := []interface{}{}\n    for num != 0 {\n        switch\
    \ num % 2 {\n        case 0:\n            even_odd_num = append(even_odd_num,\
    \ num)\n            break\n        default:\n            even_odd_num = append(even_odd_num,\
    \ num/2)\n            num /= 2\n        }\n    }\n    return even_odd_num\n}\n\
    \nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n\
    \     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual:\
    \ candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected:\
    \ []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074615
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    result := make([]interface{}, 0)\n    evenCount :=\
    \ 0\n    oddCount := 0\n    digits := num\n    index := len(strconv.FormatInt(num,\
    \ 10))\n    for index > 0 {\n        digit, ok := digits[index-1] - '0'\n    \
    \    if !ok {\n            break\n        }\n        digitCount := int(digit)\n\
    \        if digitCount == 0 {\n            result, _ = even_odd_count_add(evenCount,\
    \ oddCount, result)\n            evenCount = 0\n            oddCount = 0\n   \
    \     } else {\n            if digitCount == 1 {\n                evenCount++\n\
    \            } else {\n                oddCount++\n            }\n        }\n\
    \        digits /= 10\n        index--\n    }\n    result, _ = even_odd_count_add(evenCount,\
    \ oddCount, result)\n    return result\n}\n\nfunc TestEven_Odd_Count(t *testing.T)\
    \ {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpinujtcy6_test.go:19:18: undefined: strconv

    /tmp/tmpinujtcy6_test.go:21:28: invalid operation: cannot index digits (variable
    of type int)

    /tmp/tmpinujtcy6_test.go:27:25: undefined: even_odd_count_add

    /tmp/tmpinujtcy6_test.go:40:17: undefined: even_odd_count_add

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074601
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 1\n    for n := 1; n < num; n += 2\
    \ {\n        if n%2 == 0 {\n            even++\n        } else {\n           \
    \ odd++\n        }\n    }\n\n    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmpag3puv3y_test.go:47: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=4)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmpag3puv3y_test.go:47: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=1)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmpag3puv3y_test.go:47: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=0) %!s(int=1727)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3\
    \ (0.00s)\n        tmpag3puv3y_test.go:47: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=173106)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmpag3puv3y_test.go:47: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=1)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmpag3puv3y_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=1)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmpag3puv3y_test.go:47: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=1)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpag3puv3y_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074602
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even := make([]interface{}, 0)\n    odd := make([]interface{},\
    \ 0)\n    for i := 0; i < num; i++ {\n        switch {\n        case i%2 != 0:\n\
    \            odd = append(odd, i)\n        case i%2 == 0 :\n            even =\
    \ append(even, i)\n        }\n    }\n    return even, odd\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpthkaufuc_test.go:25:18:\
    \ too many return values\n\thave ([]interface{}, []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074601
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    odd_num := 0\n    evenNum := 0\n    for num > 0 {\n\
    \        switch {\n        case num % 2 != 0:\n            evenNum = evenNum +\
    \ 1\n        case num % 2 == 0 && num != 0:\n            odd_num = odd_num + 1\n\
    \        }\n        num = num / 10\n    }\n    odd_numList = make([]interface{},\
    \ odd_num)\n    evenNumList = make([]interface{}, evenNum)\n\n    for i := 0;\
    \ i < len(odd_numList); i++ {\n        odd_numList[i] = odd_numList[i] + 1\n \
    \   }\n    for i := 0; i < len(evenNumList); i++ {\n        evenNumList[i] = evenNumList[i]\
    \ + 1\n    }\n\n    return odd_numList\n}\n\nfunc TestEven_Odd_Count(t *testing.T)\
    \ {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_b23r85k_test.go:26:5: undefined: odd_numList

    /tmp/tmp_b23r85k_test.go:27:5: undefined: evenNumList

    /tmp/tmp_b23r85k_test.go:29:25: undefined: odd_numList

    /tmp/tmp_b23r85k_test.go:30:26: undefined: odd_numList

    /tmp/tmp_b23r85k_test.go:32:25: undefined: evenNumList

    /tmp/tmp_b23r85k_test.go:33:26: undefined: evenNumList

    /tmp/tmp_b23r85k_test.go:36:12: undefined: odd_numList

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074601
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    var result []interface{} = []interface{}{}\n    var\
    \ countOdd int = 0\n    var countEven int = 0\n    for i := 0; i < 10; i++ {\n\
    \        if num / 10%2 == 0 {\n            result = append(result, i)\n      \
    \      countEven++\n        } else {\n            result = append(result, i+1)\n\
    \            countOdd++\n        }\n    }\n\n    return []interface{}{countEven,\
    \ countOdd}\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=go dscore=1 |>\nThe solution\
    \ is pretty straight forward to realize using the modulo in go:\n<code>\npackage\
    \ main\n\nimport (\n    \"fmt\"\n    \"time\"\n)\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp17ckyn3v_test.go:30:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074601
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    if num < 0 {\n        return nil\n    }\n\n    if\
    \ num % 2 == 0 {\n        return append([]interface{}{num}, even_odd_count(num\
    \ / 2)...)\n    }\n\n    if num % 2 == 1 {\n        return append([]interface{}{num},\
    \ even_odd_count(num / 2)...)\n    }\n    return nil\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0370\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x520428?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.even_odd_count(0x0)\n\
    \t/tmp/tmpf70tkv___test.go:14 +0x290 fp=0xc0201e0380 sp=0xc0201e0378 pc=0x4ef9b0\n\
    command-line-arguments_test.even_odd_count(0x0)\n\t/tmp/tmpf70tkv___test.go:20\
    \ +0x174 fp=0xc0201e03f8 sp=0xc0201e0380 pc=0x4ef894\ncommand-line-arguments_test.even_odd_count(0x0)\n\
    \t/tmp/tmpf70tkv___test.go:20 +0x174 fp=0xc0201e0470 sp=0xc0201e03f8 pc=0x4ef894\n\
    command-line-arguments_test.even_odd_count(0x0)\n\t/tmp/tmpf70tkv___test.go:20\
    \ +0x174 fp=0xc0201e04e8 sp=0xc0201e0470 pc=0x4ef894\ncommand-line-arguments_test.even_odd_count(0x0)\n\
    \t/tmp/tmpf70tkv___test.go:20 +0x174 fp=0xc0201e0560 sp=0xc0201e04e8 pc=0x4ef894\n\
    command-line-arguments_test.even_odd_count(0x0)\n\t/tmp/tmpf70tkv___test.go:20\
    \ +0x174 fp=0xc0201e05d8 sp=0xc0201e0560 pc=0x4ef894\ncommand-line-arguments_test.even_odd_count(0x0)\n\
    \t/tmp/tmpf70tkv___test.go:20 +0x174 fp=0xc0201e0650 sp=0xc0201e05d8 pc=0x4ef894\n\
    command-line-arguments_test.even_odd_count(0x0)\n\t/tmp/tmpf70tkv___test.go:20\
    \ +0x174 fp=0xc0201e06c8 sp=0xc0201e0650 pc=0x4ef894\ncommand-line-arguments_test.even_odd_count(0x0)\n\
    \t/tmp/tmpf70tkv___test.go:20 +0x174 fp=0xc0201e0740 sp=0xc0201e06c8 pc=0x4ef894\n\
    command-line-arguments_test.even_odd_count(0x0)\n\t/tmp/tmpf70tkv___test.go:20\
    \ +0x174 fp=0xc0201e07b8 sp=0xc0201e0740 pc=0x4ef894\ncommand-line-arguments_test.even_odd_count(0x0)\n\
    \t/tmp/tmpf70tkv___test.go:20 +0x174 fp=0xc0201e0830 sp=0xc0201e07b8 pc=0x4ef894\n\
    command-line-arguments_test.even_odd_count(0x0)\n\t/tmp/tmpf70tkv___test.go:20\
    \ +0x174 fp=0xc0201e08a8 sp=0xc0201e0830 pc=0x4ef894\ncommand-line-arguments_test.even_odd_cou"
  timestamp: 1660074602
- exit_code: null
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    result := []interface{}{}\n    i := 0\n    for num\
    \ >= 0 {\n        if num%2 == 0 {\n            result = append(result, num)\n\
    \        }\n        num -= (num/2)\n        i++\n    }\n    if i >= 2 {\n    \
    \    result = append(result, i)\n    }\n    return result\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074615
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    var evenList []interface{}\n    var oddList []interface{}\n\
    \    var temp int\n    for temp = num; temp > 0; temp-- {\n        if num % 2\
    \ == 0 {\n            evenList = append(evenList, temp)\n        } else {\n  \
    \          oddList = append(oddList, temp)\n        }\n    }\n    return evenList\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.04s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmpk2ljlkqc_test.go:48: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpk2ljlkqc_test.go:48:\
    \ expected '[%!s(int=1) %!s(int=1)]', got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmpk2ljlkqc_test.go:48: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=3452) %!s(int=3451) %!s(int=3450) %!s(int=3449) %!s(int=3448)\
    \ %!s(int=3447) %!s(int=3446) %!s(int=3445) %!s(int=3444) %!s(int=3443) %!s(int=3442)\
    \ %!s(int=3441) %!s(int=3440) %!s(int=3439) %!s(int=3438) %!s(int=3437) %!s(int=3436)\
    \ %!s(int=3435) %!s(int=3434) %!s(int=3433) %!s(int=3432) %!s(int=3431) %!s(int=3430)\
    \ %!s(int=3429) %!s(int=3428) %!s(int=3427) %!s(int=3426) %!s(int=3425) %!s(int=3424)\
    \ %!s(int=3423) %!s(int=3422) %!s(int=3421) %!s(int=3420) %!s(int=3419) %!s(int=3418)\
    \ %!s(int=3417) %!s(int=3416) %!s(int=3415) %!s(int=3414) %!s(int=3413) %!s(int=3412)\
    \ %!s(int=3411) %!s(int=3410) %!s(int=3409) %!s(int=3408) %!s(int=3407) %!s(int=3406)\
    \ %!s(int=3405) %!s(int=3404) %!s(int=3403) %!s(int=3402) %!s(int=3401) %!s(int=3400)\
    \ %!s(int=3399) %!s(int=3398) %!s(int=3397) %!s(int=3396) %!s(int=3395) %!s(int=3394)\
    \ %!s(int=3393) %!s(int=3392) %!s(int=3391) %!s(int=3390) %!s(int=3389) %!s(int=3388)\
    \ %!s(int=3387) %!s(int=3386) %!s(int=3385) %!s(int=3384) %!s(int=3383) %!s(int=3382)\
    \ %!s(int=3381) %!s(int=3380) %!s(int=3379) %!s(int=3378) %!s(int=3377) %!s(int=3376)\
    \ %!s(int=3375) %!s(int=3374) %!s(int=3373) %!s(int=3372) %!s(int=3371) %!s(int=3370)\
    \ %!s(int=3369) %!s(int=3368) %!s(int=3367) %!s(int=3366) %!s(int=3365) %!s(int=3364)\
    \ %!s(int=3363) %!s(int=3362) %!s(int=3361) %!s(int=3360) %!s(int=3359) %!s(int=3358)\
    \ %!s(int=3357) %!s(int=3356) %!s(int=3355) %!s(int=3354) %!s(int=3353) %!s(int=3352)\
    \ %!s(int=3351) %!s(int=3350) %!s(int=3349) %!s(int=3348) %!s(int=3347) %!s(int=3346)\
    \ %!s(int=3345) %!s(int=3344) %!s(int=3343) %!s(int=3342) %!s(int=3341) %!s(int=3340)\
    \ %!s(int=3339) %!s(int=3338) %!s(int=3337) "
  timestamp: 1660074602
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    if num < 0 {\n        return []interface{}{1, 1}\n\
    \    }\n    result := []interface{}{}\n    result := append(result, evenCount(num))\n\
    \    result := append(result, oddCount(num))\n    return result\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp32sje0u6_test.go:19:12: no new variables on left side of :=

    /tmp/tmp32sje0u6_test.go:19:30: undefined: evenCount

    /tmp/tmp32sje0u6_test.go:20:12: no new variables on left side of :=

    /tmp/tmp32sje0u6_test.go:20:30: undefined: oddCount

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074602
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    list1 := []interface{}{}\n    list2 := []interface{}{}\n\
    \    list3 := []interface{}{}\n    list4 := []interface{}{}\n    for i := num;\
    \ i > 0; i /= 10 {\n        if i%2 == 0 {\n            list1 = append(list1, i)\n\
    \        } else {\n            list2 = append(list2, i)\n        }\n    }\n  \
    \  for i := num; i > 0; i /= 10 {\n        if i%2 == 1 {\n            list3 =\
    \ append(list3, i)\n        } else {\n            list4 = append(list4, i)\n \
    \       }\n    }\n    return []interface{}{list1, list2, list3, list4}\n}\n\n\
    func TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n\
    \     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual:\
    \ candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected:\
    \ []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmpwrec5kul_test.go:56: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[[] [%!s(int=7)] [%!s(int=7)] []]'\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmpwrec5kul_test.go:56: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[[] [] [] []]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n\
    \        tmpwrec5kul_test.go:56: expected '[%!s(int=2) %!s(int=2)]', got '[[%!s(int=3452)\
    \ %!s(int=34)] [%!s(int=345) %!s(int=3)] [%!s(int=345) %!s(int=3)] [%!s(int=3452)\
    \ %!s(int=34)]]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n     \
    \   tmpwrec5kul_test.go:56: expected '[%!s(int=3) %!s(int=3)]', got '[[%!s(int=3462)\
    \ %!s(int=346) %!s(int=34)] [%!s(int=346211) %!s(int=34621) %!s(int=3)] [%!s(int=346211)\
    \ %!s(int=34621) %!s(int=3)] [%!s(int=3462) %!s(int=346) %!s(int=34)]]'\n    ---\
    \ FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpwrec5kul_test.go:56:\
    \ expected '[%!s(int=3) %!s(int=3)]', got '[[] [] [] []]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmpwrec5kul_test.go:56: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[[] [] [] []]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n\
    \        tmpwrec5kul_test.go:56: expected '[%!s(int=2) %!s(int=3)]', got '[[]\
    \ [] [] []]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpwrec5kul_test.go:56:\
    \ expected '[%!s(int=1) %!s(int=0)]', got '[[] [] [] []]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074602
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    evenCount := 0\n    oddCount := 0\n    for i := 0;\
    \ i < num; i++ {\n        if num%2 == 0 {\n            evenCount++\n        }\
    \ else {\n            oddCount++\n        }\n        num /= 10\n    }\n    return\
    \ []interface{}{evenCount, oddCount}\n}\n\nfunc TestEven_Odd_Count(t *testing.T)\
    \ {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmpbwjaf37k_test.go:48: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmpbwjaf37k_test.go:48: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3\
    \ (0.00s)\n        tmpbwjaf37k_test.go:48: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmpbwjaf37k_test.go:48: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmpbwjaf37k_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmpbwjaf37k_test.go:48: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpbwjaf37k_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074602
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    evenCountList := []interface{}{}\n    oddCountList\
    \ := []interface{}{}\n\n    for num > 0 {\n        var newNum int\n        if\
    \ num%2 == 0 {\n            newNum = num / 2\n            evenCountList = append(evenCountList,\
    \ newNum)\n        } else {\n            newNum = num - 1\n            oddCountList\
    \ = append(oddCountList, newNum)\n        }\n\n        num = newNum\n    }\n\n\
    \    return evenCountList, oddCountList\n}\n\nfunc TestEven_Odd_Count(t *testing.T)\
    \ {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpt2znjhr6_test.go:31:27:\
    \ too many return values\n\thave ([]interface{}, []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074602
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    list := make([]interface{}, 0, 10)\n    var count\
    \ int\n    for num > 0 {\n        digit, num = num/10, num%10\n        count =\
    \ count*10 + digit\n        if count % 2 == 0 {\n            list = append(list,\
    \ count)\n        }\n    }\n    return list\n}\n\nfunc TestEven_Odd_Count(t *testing.T)\
    \ {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7myvuz2s_test.go:18:9: undefined: digit

    /tmp/tmp7myvuz2s_test.go:19:28: undefined: digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074602
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    ans := []interface{}{}\n    for i := 0; i < 10; i++\
    \ {\n        if num/10%2 == 0 {\n            ans = append(ans, i)\n        }\n\
    \    }\n    for i := 0; i < 10; i++ {\n        if num/10%2 != 0 {\n          \
    \  ans = append(ans, i)\n        }\n    }\n    return ans\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmpble1z0k5_test.go:49: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmpble1z0k5_test.go:49: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmpble1z0k5_test.go:49: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3\
    \ (0.00s)\n        tmpble1z0k5_test.go:49: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmpble1z0k5_test.go:49: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmpble1z0k5_test.go:49: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmpble1z0k5_test.go:49: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpble1z0k5_test.go:49: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074603
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    digits := []int{}\n    even_oddCount := []interface{}{}\n\
    \    for i := 0; i < 10; i++ {\n        if num%10 == i {\n            digits =\
    \ append(digits, i)\n        }\n    }\n    for _, i := range digits {\n      \
    \  if i%2 == 0 {\n            even_oddCount = append(even_oddCount, 1)\n     \
    \   } else {\n            even_oddCount = append(even_oddCount, 0)\n        }\n\
    \    }\n    return even_oddCount\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n\
    \  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmptm2h0cdb_test.go:52: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n \
    \       tmptm2h0cdb_test.go:52: expected '[%!s(int=1) %!s(int=1)]', got '[]'\n\
    \    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmptm2h0cdb_test.go:52:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3\
    \ (0.00s)\n        tmptm2h0cdb_test.go:52: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n \
    \       tmptm2h0cdb_test.go:52: expected '[%!s(int=3) %!s(int=3)]', got '[]'\n\
    \    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmptm2h0cdb_test.go:52:\
    \ expected '[%!s(int=1) %!s(int=0)]', got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmptm2h0cdb_test.go:52: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmptm2h0cdb_test.go:52:\
    \ expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074603
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    var evenOddCounter int\n    var evenCount int\n  \
    \  var oddCount int\n\n    for i := 0; i < num; i++ {\n        if num % 2 == 0\
    \ {\n            evenCount++\n        } else {\n            oddCount++\n     \
    \   }\n        evenOddCounter = evenOddCounter * 10 + evenCount\n        evenCount\
    \ = oddCount\n        oddCount = 0\n    }\n\n    return []interface{}{evenOddCounter,\
    \ oddCount}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmpg9omung__test.go:53: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=111111) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmpg9omung__test.go:53: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmpg9omung__test.go:53: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=8198552921648689607) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3\
    \ (0.00s)\n        tmpg9omung__test.go:53: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=8198552921648689607) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmpg9omung__test.go:53: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmpg9omung__test.go:53: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmpg9omung__test.go:53: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpg9omung__test.go:53: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074603
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    \n    var evenList []interface{}\n    var oddList\
    \ []interface{}\n    \n    var counter int\n    var digit int\n    \n    for counter\
    \ = num; num >= 0; counter-- {\n        digit = int(num / 10)\n        if digit\
    \ % 2 == 0 {\n            evenList = append(evenList, digit)\n        } else {\n\
    \            oddList = append(oddList, digit)\n        }\n    }\n    \n    return\
    \ evenList, oddList\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate\
    \ := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected:\
    \ []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9st9_8yq_test.go:31:22:\
    \ too many return values\n\thave ([]interface{}, []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074602
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    sum := 0\n    result := make([]interface{}, 0)\n \
    \   for i := 0; i < 10; i++ {\n        if num == 0 {\n            break\n    \
    \    }\n        sum += num%10\n        num /= 10\n    }\n    if sum%2 == 1 {\n\
    \        result = append(result, 1)\n    } else {\n        result = append(result,\
    \ 2)\n    }\n    return result\n}\nfunc TestEven_Odd_Count(t *testing.T) {\n \
    \ candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmpq8mxkeo5_test.go:51: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n \
    \       tmpq8mxkeo5_test.go:51: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=2)]'\n\
    \    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmpq8mxkeo5_test.go:51:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=2)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3\
    \ (0.00s)\n        tmpq8mxkeo5_test.go:51: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n \
    \       tmpq8mxkeo5_test.go:51: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=2)]'\n\
    \    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpq8mxkeo5_test.go:51:\
    \ expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=2)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmpq8mxkeo5_test.go:51: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=2)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n \
    \       tmpq8mxkeo5_test.go:51: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=2)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074603
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    oddEvenList := make([]interface{}, 0)\n    for i :=\
    \ num; i > 0; i-- {\n        if num % 2 == 0 {\n            oddEvenList = append(oddEvenList,\
    \ 2)\n        } else {\n            oddEvenList = append(oddEvenList, 1)\n   \
    \     }\n        num = int(num / 2)\n    }\n    return oddEvenList\n}\n\nfunc\
    \ TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n\
    \     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual:\
    \ candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected:\
    \ []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.16s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmpz7dk7n5m_test.go:47: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]'\n\
    \    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpz7dk7n5m_test.go:47:\
    \ expected '[%!s(int=1) %!s(int=1)]', got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmpz7dk7n5m_test.go:47: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)\
    \ %!s(int="
  timestamp: 1660074603
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    list := make([]interface{}, 0)\n    if num == 0 {\n\
    \        return list\n    }\n\n    var even int\n    var odd int\n    if num >=\
    \ 0 {\n        even, odd = 0, 1\n        for i := 1; i < 10; i++ {\n         \
    \   if num%10 == 0 {\n                even++\n            }\n            if num%10\
    \ != 0 {\n                odd++\n            }\n            num /= 10\n      \
    \  }\n    } else {\n        even, odd = 1, 0\n        for i := 10; i; i-- {\n\
    \            if num%10 == 0 {\n                even++\n            }\n       \
    \     if num%10 != 0 {\n                odd++\n            }\n            num\
    \ /= 10\n        }\n    }\n\n    list := make([]interface{}, 2)\n    list[0] =\
    \ even\n    list[1] = odd\n    return list\n}\n\nfunc TestEven_Odd_Count(t *testing.T)\
    \ {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphdd4xjd0_test.go:35:22: non-boolean condition in for statement

    /tmp/tmphdd4xjd0_test.go:46:10: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074603
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    // TODO: add more tests\n    if num < 0 {\n      \
    \  return []interface{}{-1, -1}\n    }\n\n    even_count := 0\n    odd_count :=\
    \ 0\n    for i := 0; i < num; i++ {\n        digit, err := strconv.Atoi(strconv.Itoa(i))\n\
    \        if err != nil {\n            return []interface{}{-1, -1}\n        }\n\
    \        if i % 2 == 0 {\n            even_count++\n        } else {\n       \
    \     odd_count++\n        }\n    }\n\n    return []interface{}{even_count, odd_count}\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpm9v4fz6__test.go:23:23: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074603
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    var list []interface{}\n    var even, odd int\n  \
    \  \n    for i := 0; i < len(strconv.Itoa(num)); i++ {\n        if i % 2 == 0\
    \ {\n            even++\n        } else {\n            odd++\n        }\n    }\n\
    \    list = append(list, even)\n    list = append(list, odd)\n    return list\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplc54iexn_test.go:18:25: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074603
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even_count := 0\n    odd_count := 0\n\n    for num\
    \ > 0 {\n        num, mod = num/10, num%10\n        if mod % 2 == 0 {\n      \
    \      even_count += 1\n        } else {\n            odd_count += 1\n       \
    \ }\n    }\n\n    return []interface{}{even_count, odd_count}\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfb5ncr94_test.go:19:14: undefined: mod

    /tmp/tmpfb5ncr94_test.go:20:12: undefined: mod

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074603
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for ; num > 0; num /= 10 {\n\
    \        if num%2 == 0 {\n            even++\n        } else {\n            odd++\n\
    \        }\n    }\n    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmp18ie6qas_test.go:46: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmp18ie6qas_test.go:46: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmp18ie6qas_test.go:46: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmp18ie6qas_test.go:46: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp18ie6qas_test.go:46: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074604
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    evenCount := []int{}\n    oddCount := []int{}\n\n\
    \    if num < 0 {\n        return []interface{}{-1, -1}\n    }\n    evenDiv :=\
    \ num / 10\n    oddDiv := num / 10\n\n    for num != 0 {\n        if num%2 !=\
    \ 0 {\n            oddCount = append(oddCount, num%10)\n        } else {\n   \
    \         evenCount = append(evenCount, num%10)\n        }\n        num = num\
    \ / 10\n    }\n\n    return append(evenCount, oddCount)\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuz47vxmk_test.go:21:5: evenDiv declared but not used

    /tmp/tmpuz47vxmk_test.go:22:5: oddDiv declared but not used

    /tmp/tmpuz47vxmk_test.go:33:12: cannot use append(evenCount, oddCount) (value
    of type []int) as type []interface{} in return statement

    /tmp/tmpuz47vxmk_test.go:33:30: cannot use oddCount (variable of type []int) as
    type int in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074603
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    var even = []interface{}{}\n    var odd = []interface{}{}\n\
    \    \n    if num % 2 == 0 {\n        even = append(even, num)\n    } else {\n\
    \        odd = append(odd, num)\n    }\n    \n    return even, odd\n}\n\nfunc\
    \ TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n\
    \     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual:\
    \ candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected:\
    \ []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp7hsmkqdv_test.go:24:18:\
    \ too many return values\n\thave ([]interface{}, []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074604
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    result := make([]interface{}, 0)\n\n    num %= 1000\n\
    \n    // If num is less than 1000 then it is even\n    if num < 1000 {\n     \
    \   result = append(result, num)\n    }\n\n    // If num is greater than 1000\
    \ then num is divisible by 10 and the number of even digits is equal to the number\
    \ of digits\n    // - num / 10\n    // If the number of digits is not even then\
    \ num is divisible by 10 and the number of odd digits is equal to the number of\
    \ digits\n    // - num % 10\n    // Example:\n    // >>> even_odd_count(100)\n\
    \    // []interface{}{100}\n    // >>> even_odd_count(123)\n    // []interface{}{1,\
    \ 2}\n    if num%10 != 0 {\n        result = append(result, num%10)\n    }\n\n\
    \    return append(result, num/10)\n}\n\nfunc TestEven_Odd_Count(t *testing.T)\
    \ {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmpetv_3a9f_test.go:60: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=7) %!s(int=7) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmpetv_3a9f_test.go:60: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=-78) %!s(int=-8) %!s(int=-7)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmpetv_3a9f_test.go:60: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=452) %!s(int=2) %!s(int=45)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3\
    \ (0.00s)\n        tmpetv_3a9f_test.go:60: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=211) %!s(int=1) %!s(int=21)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmpetv_3a9f_test.go:60: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=-821) %!s(int=-1) %!s(int=-82)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmpetv_3a9f_test.go:60: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=-2) %!s(int=-2) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmpetv_3a9f_test.go:60: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=-347) %!s(int=-7) %!s(int=-34)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpetv_3a9f_test.go:60: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074604
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    var listEven = []interface{}{num}\n    var listOdd\
    \ = []interface{}{num}\n    var countEven = 0\n    var countOdd = 0\n    for num\
    \ < 0 {\n        listEven = append(listEven, num)\n        listOdd = append(listOdd,\
    \ num)\n        count = 0\n        for num > 0 {\n            count++\n      \
    \      num /= 10\n        }\n        if count % 2 == 0 {\n            countEven++\n\
    \        } else {\n            countOdd++\n        }\n    }\n\n    return []interface{}{\n\
    \        countEven,\n        countOdd,\n    }\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2ktrw8oe_test.go:22:9: undefined: count

    /tmp/tmp2ktrw8oe_test.go:24:13: undefined: count

    /tmp/tmp2ktrw8oe_test.go:27:12: undefined: count

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074604
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    var even int\n    var odd int\n    for num > 0 {\n\
    \        if num%2 == 0 {\n            even++\n        } else {\n            odd++\n\
    \        }\n        num = num / 10\n    }\n    return []interface{}{even, odd}\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmp5wwaz53b_test.go:48: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmp5wwaz53b_test.go:48: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmp5wwaz53b_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmp5wwaz53b_test.go:48: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp5wwaz53b_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074604
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 1\n    count := 0\n    for num > 0\
    \ {\n        num /= 10\n        count++\n    }\n    for i := count; i > 0; i--\
    \ {\n        if num % 2 == 0 {\n            even = even + 1\n        } else {\n\
    \            odd = odd + 0\n        }\n        num /= 10\n    }\n    return []interface{}{even,\
    \ odd}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmpoqjz896q_test.go:52: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmpoqjz896q_test.go:52: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=1)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmpoqjz896q_test.go:52: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=4) %!s(int=1)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3\
    \ (0.00s)\n        tmpoqjz896q_test.go:52: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=6) %!s(int=1)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmpoqjz896q_test.go:52: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=1)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmpoqjz896q_test.go:52: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=1)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmpoqjz896q_test.go:52: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=1)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpoqjz896q_test.go:52: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074604
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    counts := make([]interface{}, 2)\n    // Initialize\
    \ counts\n    counts[0] = 1\n    counts[1] = 1\n    // Iterate over num\n    for\
    \ num > 0 {\n        if num % 2 == 0 {\n            counts[0]++\n        } else\
    \ {\n            counts[1]++\n        }\n        num /= 10\n    }\n    // Return\
    \ result\n    return counts\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate\
    \ := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected:\
    \ []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphet98dy4_test.go:22:13: invalid operation: counts[0]++ (non-numeric type
    interface{})

    /tmp/tmphet98dy4_test.go:24:13: invalid operation: counts[1]++ (non-numeric type
    interface{})

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074604
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    if num == 0 {\n        return []interface{}{}\n  \
    \  }\n\n    result := make([]interface{}, 0)\n    var isEven bool\n    var oddCount\
    \ int\n\n    for i:=0; i<=num; i++ {\n        isEven = i % 2 == 0\n        if\
    \ isEven {\n            if oddCount > 0 {\n                result[oddCount-1]\
    \ = i\n            } else {\n                result[0] = 1\n                result[1]\
    \ = i\n            }\n            oddCount++\n        } else {\n            if\
    \ oddCount > 0 {\n                result[oddCount-1] = i\n            } else {\n\
    \                result[0] = 1\n                result[1] = i\n            }\n\
    \        }\n    }\n\n    return result\n}\n</code>\nOutput\n<code>\npackage even_odd_count_test\n\
    \nimport (\n    \"testing\"\n)\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate\
    \ := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected:\
    \ []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpdkysidtd_test.go:45:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074604
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    listOfNumbers\
    \ := []interface{}{}\n    for num > 0 {\n        digit, num := num%10, num/10\n\
    \        if digit % 2 == 0 {\n            even_count++\n        } else {\n   \
    \         odd_count++\n        }\n        listOfNumbers = append(listOfNumbers,\
    \ digit)\n    }\n    listOfNumbers = append(listOfNumbers, even_count)\n    listOfNumbers\
    \ = append(listOfNumbers, odd_count)\n\n    return listOfNumbers\n}\n</code>\n\
    And here is the testing file:\n<code>\npackage even_odd_count_test\n\nimport (\n\
    \    \"testing\"\n    \"github.com/sirupsen/logrus\"\n    \"github.com/sirupsen/logrus/hooks/stacktrace\"\
    \n    \"github.com/sirupsen/logrus/logger\"\n)\n\nfunc TestEven_Odd_Count(t *testing.T)\
    \ {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpoowvwq18_test.go:32:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074604
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    var even []interface{}\n    var odd []interface{}\n\
    \    var result []interface{}\n    var last_even int\n    var last_odd int\n \
    \   for num > 0 {\n        if num%2 == 0 {\n            even = append(even, num)\n\
    \            last_even = num\n        } else {\n            odd = append(odd,\
    \ num)\n            last_odd = num\n        }\n        num /= 10\n    }\n    for\
    \ _, num := range even {\n        result = append(result, num)\n    }\n    for\
    \ _, num := range odd {\n        result = append(result, num)\n    }\n    return\
    \ append(result, last_even, last_odd)\n}\n\nfunc TestEven_Odd_Count(t *testing.T)\
    \ {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmp422fmukm_test.go:59: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=7) %!s(int=0) %!s(int=7)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmp422fmukm_test.go:59: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmp422fmukm_test.go:59: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=3452) %!s(int=34) %!s(int=345) %!s(int=3) %!s(int=34) %!s(int=3)]'\n\
    \    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmp422fmukm_test.go:59:\
    \ expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=3462) %!s(int=346) %!s(int=34)\
    \ %!s(int=346211) %!s(int=34621) %!s(int=3) %!s(int=34) %!s(int=3)]'\n    ---\
    \ FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmp422fmukm_test.go:59:\
    \ expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestEven_Odd_Count/test_num__5 (0.00s)\n        tmp422fmukm_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmp422fmukm_test.go:59: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp422fmukm_test.go:59: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074605
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    evenOdd := make([]interface{}, 0, 1)\n    digitCount\
    \ := 0\n    // Iterate through digits of the number\n    for digitVal := uint64(0);\
    \ digitVal <= uint64(num); digitVal++ {\n        // Check if the current digit\
    \ is even or odd\n        if num%10%10 == 0 {\n            evenOdd = append(evenOdd,\
    \ digitVal)\n        } else {\n            evenOdd = append(evenOdd, digitCount+digitVal)\n\
    \        }\n        digitCount++\n    }\n    return evenOdd\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpaashcgsb_test.go:23:39: invalid operation: digitCount + digitVal (mismatched
    types int and uint64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074604
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    evenList := []int{}\n    oddList := []int{}\n    for\
    \ i := 0; i < 10; i++ {\n        if num%i == 0 {\n            evenList = append(evenList,\
    \ i)\n        } else {\n            oddList = append(oddList, i)\n        }\n\
    \    }\n    return evenList, oddList\n}\n\nfunc TestEven_Odd_Count(t *testing.T)\
    \ {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp8u3eaxjw_test.go:24:22:\
    \ too many return values\n\thave ([]int, []int)\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074604
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    return []interface{}{num, num / 2}\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmpq1fhdgbu_test.go:38: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=7) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmpq1fhdgbu_test.go:38: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=-78) %!s(int=-39)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmpq1fhdgbu_test.go:38: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=3452) %!s(int=1726)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3\
    \ (0.00s)\n        tmpq1fhdgbu_test.go:38: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=346211) %!s(int=173105)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmpq1fhdgbu_test.go:38: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=-345821) %!s(int=-172910)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmpq1fhdgbu_test.go:38: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=-2) %!s(int=-1)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmpq1fhdgbu_test.go:38: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=-45347) %!s(int=-22673)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpq1fhdgbu_test.go:38: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074605
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even_digits := []int{}\n    odd_digits := []int{}\n\
    \    \n    if num < 0 {\n        return nil\n    }\n    \n    for i := 0; i <\
    \ num; i++ {\n        if num % 2 == 0 {\n            even_digits = append(even_digits,\
    \ i)\n        } else {\n            odd_digits = append(odd_digits, i)\n     \
    \   }\n    }\n    return []interface{}{even_digits, odd_digits}\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.14s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmpnyg3oi0n_test.go:52: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[[] [%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)\
    \ %!s(int=6)]]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n      \
    \  tmpnyg3oi0n_test.go:52: expected '[%!s(int=1) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmpnyg3oi0n_test.go:52:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)\
    \ %!s(int=10) %!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16)\
    \ %!s(int=17) %!s(int=18) %!s(int=19) %!s(int=20) %!s(int=21) %!s(int=22) %!s(int=23)\
    \ %!s(int=24) %!s(int=25) %!s(int=26) %!s(int=27) %!s(int=28) %!s(int=29) %!s(int=30)\
    \ %!s(int=31) %!s(int=32) %!s(int=33) %!s(int=34) %!s(int=35) %!s(int=36) %!s(int=37)\
    \ %!s(int=38) %!s(int=39) %!s(int=40) %!s(int=41) %!s(int=42) %!s(int=43) %!s(int=44)\
    \ %!s(int=45) %!s(int=46) %!s(int=47) %!s(int=48) %!s(int=49) %!s(int=50) %!s(int=51)\
    \ %!s(int=52) %!s(int=53) %!s(int=54) %!s(int=55) %!s(int=56) %!s(int=57) %!s(int=58)\
    \ %!s(int=59) %!s(int=60) %!s(int=61) %!s(int=62) %!s(int=63) %!s(int=64) %!s(int=65)\
    \ %!s(int=66) %!s(int=67) %!s(int=68) %!s(int=69) %!s(int=70) %!s(int=71) %!s(int=72)\
    \ %!s(int=73) %!s(int=74) %!s(int=75) %!s(int=76) %!s(int=77) %!s(int=78) %!s(int=79)\
    \ %!s(int=80) %!s(int=81) %!s(int=82) %!s(int=83) %!s(int=84) %!s(int=85) %!s(int=86)\
    \ %!s(int=87) %!s(int=88) %!s(int=89) %!s(int=90) %!s(int=91) %!s(int=92) %!s(int=93)\
    \ %!s(int=94) %!s(int=95) %!s(int=96) %!s(int=97) %!s(int=98) %!s(int=99) %!s(int=100)\
    \ %!s(int=101) %!s(int=102) %!s(int=103) %!s(int=104) %!s(int=105) %!s(int=106)\
    \ %!s(int=107) %!s(int=108) %!s(int=109) %!s(int=110) %!s(int=111) %!s(int=112)\
    \ %!s(int=113) %!s(int=114) %!s(int=115) %!s(int=116) %!s(int=117) %!s(int=118)\
    \ %!s(int=119) %!s(int=120) %!s(int=121) %!s(int=122) %!s(int=123) %!s(int=124)\
    \ %!s(int=125) %!s(int=126) %"
  timestamp: 1660074605
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    var counts []interface{}\n    var even_num = 0\n \
    \   var odd_num = 0\n    for i := 0; i < num; i++ {\n        if i%2 == 0 {\n \
    \           even_num += 1\n        } else {\n            odd_num += 1\n      \
    \  }\n    }\n    if odd_num > 0 {\n        counts = append(counts, odd_num)\n\
    \    }\n    if even_num > 0 {\n        counts = append(counts, even_num)\n   \
    \ }\n    return counts\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate\
    \ := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected:\
    \ []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmp9p9p6dzo_test.go:54: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=3) %!s(int=4)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmp9p9p6dzo_test.go:54: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmp9p9p6dzo_test.go:54:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1726) %!s(int=1726)]'\n  \
    \  --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmp9p9p6dzo_test.go:54:\
    \ expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=173105) %!s(int=173106)]'\n\
    \    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmp9p9p6dzo_test.go:54:\
    \ expected '[%!s(int=3) %!s(int=3)]', got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmp9p9p6dzo_test.go:54: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmp9p9p6dzo_test.go:54:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp9p9p6dzo_test.go:54: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074605
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    var result []interface{}\n    for i := 0; i < num;\
    \ i++ {\n        if num % 2 == 0 {\n            result = append(result, 1)\n \
    \       } else {\n            result = append(result, 2)\n        }\n        num\
    \ /= 10\n    }\n    return result\n}\n\nfunc TestEven_Odd_Count(t *testing.T)\
    \ {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmpfgskd91d_test.go:47: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=2)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n \
    \       tmpfgskd91d_test.go:47: expected '[%!s(int=1) %!s(int=1)]', got '[]'\n\
    \    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmpfgskd91d_test.go:47:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=2) %!s(int=1)]'\n\
    \    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmpfgskd91d_test.go:47:\
    \ expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n       \
    \ tmpfgskd91d_test.go:47: expected '[%!s(int=3) %!s(int=3)]', got '[]'\n    ---\
    \ FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpfgskd91d_test.go:47:\
    \ expected '[%!s(int=1) %!s(int=0)]', got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmpfgskd91d_test.go:47: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpfgskd91d_test.go:47:\
    \ expected '[%!s(int=1) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074605
- exit_code: null
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    result := make([]interface{}, 0)\n    for num >= 0\
    \ {\n        if num%2 == 0 {\n            result = append(result, 2)\n       \
    \     num = num/2\n        } else {\n            result = append(result, 1)\n\
    \            num = num - 1\n        }\n    }\n    return result\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074618
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even_odd_list := []interface{}{}\n\n    if num < 0\
    \ {\n        even_odd_list = append(even_odd_list, -1)\n        return even_odd_list\n\
    \    }\n\n    even_odd_list = append(even_odd_list, int((num % 10 / 2)), int((num\
    \ % 10) / 2))\n    return even_odd_list\n}\n\nfunc TestEven_Odd_Count(t *testing.T)\
    \ {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmp8w1_hubw_test.go:46: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=3) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmp8w1_hubw_test.go:46: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=-1)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n\
    \        tmp8w1_hubw_test.go:46: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n       \
    \ tmp8w1_hubw_test.go:46: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n       \
    \ tmp8w1_hubw_test.go:46: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=-1)]'\n\
    \    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmp8w1_hubw_test.go:46:\
    \ expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=-1)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmp8w1_hubw_test.go:46: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=-1)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n\
    \        tmp8w1_hubw_test.go:46: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074605
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    list := make([]interface{}, 0, 2)\n    odd, even :=\
    \ 0, 0\n    for n := 0; n < num; n++ {\n        if num%10%2 == 1 {\n         \
    \   even++\n        }\n        if num%10%2 == 0 {\n            odd++\n       \
    \ }\n        list = append(list, []interface{}{odd, even}...)\n    }\n    return\
    \ list\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.35s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmp3sj3npe8_test.go:49: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=1) %!s(int=0) %!s(int=2) %!s(int=0) %!s(int=3) %!s(int=0)\
    \ %!s(int=4) %!s(int=0) %!s(int=5) %!s(int=0) %!s(int=6) %!s(int=0) %!s(int=7)]'\n\
    \    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmp3sj3npe8_test.go:49:\
    \ expected '[%!s(int=1) %!s(int=1)]', got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmp3sj3npe8_test.go:49: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=1) %!s(int=0) %!s(int=2) %!s(int=0) %!s(int=3) %!s(int=0) %!s(int=4)\
    \ %!s(int=0) %!s(int=5) %!s(int=0) %!s(int=6) %!s(int=0) %!s(int=7) %!s(int=0)\
    \ %!s(int=8) %!s(int=0) %!s(int=9) %!s(int=0) %!s(int=10) %!s(int=0) %!s(int=11)\
    \ %!s(int=0) %!s(int=12) %!s(int=0) %!s(int=13) %!s(int=0) %!s(int=14) %!s(int=0)\
    \ %!s(int=15) %!s(int=0) %!s(int=16) %!s(int=0) %!s(int=17) %!s(int=0) %!s(int=18)\
    \ %!s(int=0) %!s(int=19) %!s(int=0) %!s(int=20) %!s(int=0) %!s(int=21) %!s(int=0)\
    \ %!s(int=22) %!s(int=0) %!s(int=23) %!s(int=0) %!s(int=24) %!s(int=0) %!s(int=25)\
    \ %!s(int=0) %!s(int=26) %!s(int=0) %!s(int=27) %!s(int=0) %!s(int=28) %!s(int=0)\
    \ %!s(int=29) %!s(int=0) %!s(int=30) %!s(int=0) %!s(int=31) %!s(int=0) %!s(int=32)\
    \ %!s(int=0) %!s(int=33) %!s(int=0) %!s(int=34) %!s(int=0) %!s(int=35) %!s(int=0)\
    \ %!s(int=36) %!s(int=0) %!s(int=37) %!s(int=0) %!s(int=38) %!s(int=0) %!s(int=39)\
    \ %!s(int=0) %!s(int=40) %!s(int=0) %!s(int=41) %!s(int=0) %!s(int=42) %!s(int=0)\
    \ %!s(int=43) %!s(int=0) %!s(int=44) %!s(int=0) %!s(int=45) %!s(int=0) %!s(int=46)\
    \ %!s(int=0) %!s(int=47) %!s(int=0) %!s(int=48) %!s(int=0) %!s(int=49) %!s(int=0)\
    \ %!s(int=50) %!s(int=0) %!s(int=51) %!s(int=0) %!s(int=52) %!s(int=0) %!s(int=53)\
    \ %!s(int=0) %!s(int=54) %!s(int=0) %!s(int=55) %!s(int=0) %!s(int=56) %!s(int=0)\
    \ %!s(int=57) %!s(int=0) %!s(int=58) %!s(int=0) %!s(int=59) %!s(int=0) %!s(int=60)\
    \ %!s(int=0) %!s(int=61) %!s(int=0) %!s(int=62) %!s(int=0) %!s(int=63) %!s(int=0)\
    \ %!s(int=64) %!s(int=0) %!s(int="
  timestamp: 1660074606
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    var evens, odds []interface{}\n\n    num /= 10\n \
    \   for ; num > 0; num-- {\n        switch {\n        case num%2 == 1:\n     \
    \       odds = append(odds, num)\n        case num%2 != 0:\n            evens\
    \ = append(evens, num)\n        }\n    }\n    return evens, odds\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpe1ru64cx_test.go:26:19:\
    \ too many return values\n\thave ([]interface{}, []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074605
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    var output []interface{}\n    var numDigits int\n\
    \    if num < 0 {\n        num = 0\n    }\n    if num == 0 {\n        numDigits\
    \ = 1\n    } else {\n        numDigits = digits(num)\n    }\n    for i := 0; i\
    \ < numDigits; i++ {\n        if num%2 == 0 {\n            output = append(output,\
    \ 2)\n        }\n        if num%2 != 0 {\n            output = append(output,\
    \ 1)\n        }\n        num /= 10\n    }\n    return output\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuy9jmpoc_test.go:23:21: undefined: digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074605
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    evens := make([]int, 0)\n    odds := make([]int, 0)\n\
    \    var total int\n    for i := 0; i < 10; i++ {\n        total += num / 10\n\
    \        if num%10 == 0 {\n            evens = append(evens, total)\n        \
    \    total = 0\n        } else {\n            odds = append(odds, total)\n   \
    \         total = 0\n        }\n    }\n    evens = append(evens, total)\n    return\
    \ evens\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3dxnv41f_test.go:29:12: cannot use evens (variable of type []int) as type
    []interface{} in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074605
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    var oddCount []interface{}\n    var evenCount []interface{}\n\
    \    for i := 0; i < num; i++ {\n        if (i % 2 == 0) {\n            evenCount\
    \ = append(evenCount, i)\n        } else {\n            oddCount = append(oddCount,\
    \ i)\n        }\n    }\n    return oddCount\n}\n\nfunc TestEven_Odd_Count(t *testing.T)\
    \ {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.11s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmpensmudhx_test.go:47: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=1) %!s(int=3) %!s(int=5)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmpensmudhx_test.go:47: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmpensmudhx_test.go:47:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=3) %!s(int=5) %!s(int=7)\
    \ %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15) %!s(int=17) %!s(int=19) %!s(int=21)\
    \ %!s(int=23) %!s(int=25) %!s(int=27) %!s(int=29) %!s(int=31) %!s(int=33) %!s(int=35)\
    \ %!s(int=37) %!s(int=39) %!s(int=41) %!s(int=43) %!s(int=45) %!s(int=47) %!s(int=49)\
    \ %!s(int=51) %!s(int=53) %!s(int=55) %!s(int=57) %!s(int=59) %!s(int=61) %!s(int=63)\
    \ %!s(int=65) %!s(int=67) %!s(int=69) %!s(int=71) %!s(int=73) %!s(int=75) %!s(int=77)\
    \ %!s(int=79) %!s(int=81) %!s(int=83) %!s(int=85) %!s(int=87) %!s(int=89) %!s(int=91)\
    \ %!s(int=93) %!s(int=95) %!s(int=97) %!s(int=99) %!s(int=101) %!s(int=103) %!s(int=105)\
    \ %!s(int=107) %!s(int=109) %!s(int=111) %!s(int=113) %!s(int=115) %!s(int=117)\
    \ %!s(int=119) %!s(int=121) %!s(int=123) %!s(int=125) %!s(int=127) %!s(int=129)\
    \ %!s(int=131) %!s(int=133) %!s(int=135) %!s(int=137) %!s(int=139) %!s(int=141)\
    \ %!s(int=143) %!s(int=145) %!s(int=147) %!s(int=149) %!s(int=151) %!s(int=153)\
    \ %!s(int=155) %!s(int=157) %!s(int=159) %!s(int=161) %!s(int=163) %!s(int=165)\
    \ %!s(int=167) %!s(int=169) %!s(int=171) %!s(int=173) %!s(int=175) %!s(int=177)\
    \ %!s(int=179) %!s(int=181) %!s(int=183) %!s(int=185) %!s(int=187) %!s(int=189)\
    \ %!s(int=191) %!s(int=193) %!s(int=195) %!s(int=197) %!s(int=199) %!s(int=201)\
    \ %!s(int=203) %!s(int=205) %!s(int=207) %!s(int=209) %!s(int=211) %!s(int=213)\
    \ %!s(int=215) %!s(int=217) %!s(int=219) %!s(int=221) %!s(int=223) %!s(int=225)\
    \ %!s(int=227) %!s(int=229) %!s(int=231) %!s(int=233) %!s(int=235) %!s(int=237)\
    \ %!s(int=239) %!s(int=241) %!s(int=243) %!s(int=245) %!s(int=247) %!s(int=249)\
    \ %!s(int=251) %!s(int=2"
  timestamp: 1660074606
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    odd := num % 2\n    even := (num / 2) * 2\n    result\
    \ := []interface{}{even, odd}\n    return result\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmpjq89qhdw_test.go:41: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=6) %!s(int=1)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmpjq89qhdw_test.go:41: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=-78) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmpjq89qhdw_test.go:41: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=3452) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3\
    \ (0.00s)\n        tmpjq89qhdw_test.go:41: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=346210) %!s(int=1)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmpjq89qhdw_test.go:41: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=-345820) %!s(int=-1)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmpjq89qhdw_test.go:41: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=-2) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmpjq89qhdw_test.go:41: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=-45346) %!s(int=-1)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpjq89qhdw_test.go:41: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074606
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    if num < 0 {\n        return []interface{}{-1, -1}\n\
    \    }\n    even_count := 0\n    odd_count := 0\n    for i := num; i > 0; {\n\
    \        if i%2 == 0 {\n            even_count++\n        }\n        if i%2 !=\
    \ 0 {\n            odd_count++\n        }\n        i /= 10\n    }\n    return\
    \ [even_count, odd_count]\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate\
    \ := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected:\
    \ []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp7kb4jgpu_test.go:29:23: unexpected comma; expecting ]

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074605
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    var even_count []interface{}\n    var odd_count []interface{}\n\
    \    // initialize two slice to store even and odd count\n    even_count = make([]interface{},\
    \ 0)\n    odd_count = make([]interface{}, 0)\n\n    // if number < 0 then return\
    \ empty list\n    if num < 0 {\n        return []interface{}{}\n    }\n\n    num\
    \ %= 10\n    // if number is 0 then return empty list\n    if num == 0 {\n   \
    \     return []interface{}{}\n    }\n\n    // if number is odd then increment\
    \ odd count\n    if num%2 == 1 {\n        odd_count = append(odd_count, num)\n\
    \    }\n\n    // if number is even then increment even count\n    if num%2 ==\
    \ 0 {\n        even_count = append(even_count, num)\n    }\n\n    return []interface{}{even_count,\
    \ odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmp0bfd7bxy_test.go:65: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[[] [%!s(int=7)]]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n\
    \        tmp0bfd7bxy_test.go:65: expected '[%!s(int=1) %!s(int=1)]', got '[]'\n\
    \    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmp0bfd7bxy_test.go:65:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[[%!s(int=2)] []]'\n    --- FAIL: TestEven_Odd_Count/test_num__3\
    \ (0.00s)\n        tmp0bfd7bxy_test.go:65: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[[] [%!s(int=1)]]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n\
    \        tmp0bfd7bxy_test.go:65: expected '[%!s(int=3) %!s(int=3)]', got '[]'\n\
    \    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmp0bfd7bxy_test.go:65:\
    \ expected '[%!s(int=1) %!s(int=0)]', got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmp0bfd7bxy_test.go:65: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmp0bfd7bxy_test.go:65:\
    \ expected '[%!s(int=1) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074606
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    var odd_count int = 0\n    var even_count int = 0\n\
    \n    num /= 10\n    if num > 0 {\n        num /= 10\n        even_count++\n \
    \   }\n\n    num *= 10\n    if num > 0 {\n        num /= 10\n        odd_count++\n\
    \    }\n\n    return []interface{}{odd_count, even_count}\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmpm2q4kqc2_test.go:53: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmpm2q4kqc2_test.go:53: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmpm2q4kqc2_test.go:53: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3\
    \ (0.00s)\n        tmpm2q4kqc2_test.go:53: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmpm2q4kqc2_test.go:53: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmpm2q4kqc2_test.go:53: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmpm2q4kqc2_test.go:53: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpm2q4kqc2_test.go:53: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074606
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    var even = []int{}\n    var odd = []int{}\n\n    for\
    \ i := 0; i < num; i++ {\n        if i % 2 == 0 {\n            even = append(even,\
    \ i)\n        } else {\n            odd = append(odd, i)\n        }\n    }\n\n\
    \    return even, odd\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate\
    \ := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected:\
    \ []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpz_nohtlb_test.go:26:18:\
    \ too many return values\n\thave ([]int, []int)\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074605
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    // To find even digits from 1 to n\n    // The first\
    \ even digit number is (2^0)/2 = 1, (2^1)/2 = 2, ...\n    // If the number is\
    \ odd, then it will have (2^(n-1))/2 = (2^n)-1/2 = 3, \n    // and hence we will\
    \ find numbers up to 3/2 from 1 to n\n    // (since 3 is even, our first even\
    \ digit is 1, hence we will find numbers up to 1/2 from 1 to n)\n    var evens\
    \ []interface{}\n    \n    // To find odd digits from 1 to n\n    // The first\
    \ odd digit number is (2^0)/2 = (2^1)/2 = 1, \n    // If the number is even, then\
    \ it will have (2^(n-1))/2 = (2^n)-1/2 = 2, \n    // and hence we will find numbers\
    \ up to 1/2 from 1 to n\n    var odds []interface{}\n\n    // If num is even then\
    \ we will add its value to the evens array\n    // If num is odd, then we will\
    \ add its value to the odds array\n    // The array will be empty if num is negative\
    \ or equal to 0\n    if num == 0 {\n        return []interface{}{}\n    }\n\n\
    \    if num > 0 {\n        // To find the first odd number from 1 to n\n     \
    \   // The first odd digit is (2^(n-1))/2 = (2^n)-1/2 = 3\n        // Since the\
    \ number is odd, it will have (2^(n-1))/2 = (2^n)-1/2 = 2, \n        // and hence\
    \ we will find numbers up to 1/2 from 1 to n\n        for n := 0; n < num; n++\
    \ {\n            odds = append(odds, n)\n        }\n    }\n\n    if num < 0 {\n\
    \        // To find the first even number from 1 to n\n        // The first even\
    \ digit is (2^0)/2 = 1, \n        // If the number is even, then it will have\
    \ (2^(n-1))/2 = (2^n)-1/2 = 2, \n        // and hence we will find numbers up\
    \ to 1/2 from 1 to n\n        for n := 0; n < num; n++ {\n            evens =\
    \ append(evens, n)\n        }\n    }\n\n    // We will add both even and odd numbers\
    \ into the list, which will\n    // have evens and odds in the form of [even,\
    \ odd]\n    return evens\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate\
    \ := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected:\
    \ []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.04s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmpikvvvxg8_test.go:80: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpikvvvxg8_test.go:80:\
    \ expected '[%!s(int=1) %!s(int=1)]', got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmpikvvvxg8_test.go:80: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmpikvvvxg8_test.go:80:\
    \ expected '[%!s(int=3) %!s(int=3)]', got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmpikvvvxg8_test.go:80: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpikvvvxg8_test.go:80:\
    \ expected '[%!s(int=1) %!s(int=0)]', got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmpikvvvxg8_test.go:80: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpikvvvxg8_test.go:80:\
    \ expected '[%!s(int=1) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.046s\nFAIL\n"
  timestamp: 1660074606
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    list := make([]interface{}, 0)\n    base := 10\n \
    \   for i := 0; i < num; i++ {\n        if num%base == 0 {\n            list =\
    \ append(list, int(num/base))\n            base = base/2\n        }\n    }\n \
    \   return list\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate :=\
    \ even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected:\
    \ []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmp1oyoq872_test.go:46: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmp1oyoq872_test.go:46:\
    \ expected '[%!s(int=1) %!s(int=1)]', got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmp1oyoq872_test.go:46: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmp1oyoq872_test.go:46:\
    \ expected '[%!s(int=3) %!s(int=3)]', got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmp1oyoq872_test.go:46: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmp1oyoq872_test.go:46:\
    \ expected '[%!s(int=1) %!s(int=0)]', got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmp1oyoq872_test.go:46: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmp1oyoq872_test.go:46:\
    \ expected '[%!s(int=1) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.007s\nFAIL\n"
  timestamp: 1660074606
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even := make([]int, 0, 2)\n    odd := make([]int,\
    \ 0, 2)\n\n    // count the number of even and odd digits.\n    for i := 0; i\
    \ < num; i++ {\n        if i % 2 == 0 {\n            even = append(even, i)\n\
    \        } else {\n            odd = append(odd, i)\n        }\n    }\n\n    return\
    \ even, odd\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpzthcd_ln_test.go:27:18:\
    \ too many return values\n\thave ([]int, []int)\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074606
- exit_code: null
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    list := make([]interface{}, 0)\n    if num < 0 {\n\
    \        return []interface{}{1, 1}\n    }\n\n    digit, i := num, 0\n\n    for\
    \ {\n        if digit % 2 == 0 {\n            list = append(list, int(digit))\n\
    \        }\n        digit, i = digit/2, i+1\n        if num == 0 {\n         \
    \   break\n        }\n    }\n    return list\n}\n\nfunc TestEven_Odd_Count(t *testing.T)\
    \ {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074620
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    str := fmt.Sprintf(\"\
    %v\", num)\n    for _, c := range str {\n        if c == '6' || c == '7' {\n \
    \           even_count++\n        } else if c == '5' || c == '9' {\n         \
    \   odd_count++\n        }\n    }\n\n    even_odd_count := []interface{}{even_count,\
    \ odd_count}\n    return even_odd_count\n}\n\nfunc TestEven_Odd_Count(t *testing.T)\
    \ {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmp4jnbo2nz_test.go:50: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=1) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmp4jnbo2nz_test.go:50: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=1) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmp4jnbo2nz_test.go:50: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=0) %!s(int=1)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3\
    \ (0.00s)\n        tmp4jnbo2nz_test.go:50: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=1) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmp4jnbo2nz_test.go:50: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=1)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmp4jnbo2nz_test.go:50: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmp4jnbo2nz_test.go:50: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp4jnbo2nz_test.go:50: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074606
