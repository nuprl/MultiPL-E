language: go_test.go
name: HumanEval_130_tri
results:
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 1 {\n        return []int{3}\n\
    \    }\n    result := tri(n - 1) + tri(n - 2) + tri(n + 1)\n    if len(result)\
    \ > n {\n        result = append(result, result[n])\n    }\n    return result\n\
    }\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpofphxz8s_test.go:28:15: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074093
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 2 {\n        return []int{1, n}\n\
    \    }\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n}\n\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyoh9utwb_test.go:28:12: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074093
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    var l []int\n    if n == 1 {\n      \
    \  return []int{3}\n    }\n    if n % 2 == 1 {\n        l = []int{1, n/2+1, n}\n\
    \    } else {\n        l = []int{1, n-1, n+1}\n    }\n    return append(l, tri(tri(n-1))...)\n\
    }\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpiobvmf85_test.go:34:26: cannot use tri(n - 1) (value of type []int) as
    type int in argument to tri

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074093
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    switch {\n    case n <= 0:\n        return\
    \ []int{}\n    case n <= 1:\n        return []int{1}\n    case n % 2 == 0:\n \
    \       return []int{tri(n / 2) + tri(n / 2) + tri(n / 2)}\n    case n % 2 ==\
    \ 1:\n        return []int{tri(n / 2) + tri(n / 1) + tri(n / 2)}\n    }\n}\n\n\
    func TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6davgav6_test.go:31:22: invalid operation: operator + not defined on tri(n
    / 2) (value of type []int)

    /tmp/tmp6davgav6_test.go:33:22: invalid operation: operator + not defined on tri(n
    / 2) (value of type []int)

    /tmp/tmp6davgav6_test.go:35:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074093
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    tris := []int{1, 1, 3, 1}\n    for i\
    \ := 2; i <= n; i++ {\n        if i%2 == 0 {\n            tris = append(tris,\
    \ tris[len(tris)-1]+tris[len(tris)-2]+tris[len(tris)+1])\n        } else {\n \
    \           tris = append(tris, tris[len(tris)-1]+tris[len(tris)-2])\n       \
    \ }\n    }\n    return tris\n}\n\nfunc TestTri(t *testing.T) {\n  candidate :=\
    \ tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2,\
    \ 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n    \
    \ { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual:\
    \ candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [5]\
    \ with length 4 [recovered]\n\tpanic: runtime error: index out of range [5] with\
    \ length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5139e0, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x5139e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(...)\n\t/tmp/tmp5odte2e7_test.go:28\n\
    command-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp5odte2e7_test.go:43 +0x12fb\n\
    testing.tRunner(0xc0001a0340, 0x5292f8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074093
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 || n == 1 {\n        return\
    \ []int{}\n    }\n    var a int\n    var b int\n    var result []int\n    var\
    \ count int\n    a = b = n\n    for count = 1; count <= n; count++ {\n       \
    \ if count%2 == 0 {\n            result = append(result, a)\n            a +=\
    \ b\n        }else{\n            result = append(result, a+b)\n            b +=\
    \ a\n        }\n    }\n    return result\n}\n\nfunc TestTri(t *testing.T) {\n\
    \  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvp20axo5_test.go:32:11: expected ''=='', found ''=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074092
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    return getTri(n, n)\n}\n\nfunc TestTri(t\
    \ *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1,\
    \ 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3,\
    \ 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n\
    \     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n \
    \    { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n\
    \     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35}\
    \ },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwwr2h_jp_test.go:25:12: undefined: getTri

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074093
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 3 {\n        return nil\n    }\n\
    \n    result := make([]int, n+1)\n    result := append(result, n)\n    result[0]\
    \ = result[0] + result[1] + result[2]\n    result[1] = result[1] - result[2] +\
    \ result[1]\n    result[2] = result[2] - result[1] - result[0]\n    return result\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a tags=go |>\nUsing golang standard package,\
    \ I solved it like this:\n<code>\npackage main\n\nimport (\n    \"fmt\"\n    \"\
    math/big\"\n)\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n  \
    \   { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpilqxc6e1_test.go:36:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074092
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 1 {\n        return []int{3}\n\
    \    }\n    if n%2 == 0 {\n        return append(tri(n - 1), tri(n - 2)...)\n\
    \    } else {\n        return append(tri(n - 1), tri(n - 2) + tri(n + 1), n)\n\
    \    }\n}\n</code>\n<|/ a |>\n<| c |>\nThis won't compile, you're trying to append\
    \ to a slice which doesn't support appending elements. Also, you haven't shown\
    \ the code to demonstrate your answer. Also, you haven't explained how you come\
    \ up with this solution.\n<|/ c |>\n<| c |>\nthanks , I have edited my answer\
    \ , could you give a little help ?\n<|/ c |>\n<| c |>\nI think it is important\
    \ to explain how you came up with this solution. Especially with recursive functions\
    \ like this one, it can be hard to figure out how to get to the solution. How\
    \ did you come up with the solution?\n<|/ c |>\n<| c |>\nI didn't know that there\
    \ is a \"tri\" function that can solve this. Thank you very much.\n<|/ c |>\n\
    <| c |>\n, I have edited the code , could you give a little help ?\n<|/ c |>\n\
    <| a tags=go,algorithm dscore=1 |>\nThis solution is also recursive, using an\
    \ auxiliary slice and passing it to itself when recursing. \n<code>\npackage main\n\
    \nimport \"fmt\"\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n  \
    \   { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmporlauzp1_test.go:34:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074092
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    a, b := 1, 1\n    c := 1\n    a := append(a,\
    \ b)\n    b := append(b, c)\n    a := append(a, c)\n    return a\n}\n\nfunc TestTri(t\
    \ *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1,\
    \ 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3,\
    \ 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n\
    \     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n \
    \    { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n\
    \     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35}\
    \ },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpamaojif4_test.go:27:7: no new variables on left side of :=

    /tmp/tmpamaojif4_test.go:27:17: first argument to append must be a slice; have
    a (variable of type int)

    /tmp/tmpamaojif4_test.go:28:7: no new variables on left side of :=

    /tmp/tmpamaojif4_test.go:28:17: first argument to append must be a slice; have
    b (variable of type int)

    /tmp/tmpamaojif4_test.go:29:7: no new variables on left side of :=

    /tmp/tmpamaojif4_test.go:29:17: first argument to append must be a slice; have
    a (variable of type int)

    /tmp/tmpamaojif4_test.go:30:12: cannot use a (variable of type int) as type []int
    in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074093
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    arr := []int{}\n    if n<0 {\n      \
    \  return arr\n    }\n    arr = []int{n}\n    arr.append(arr[n-1])\n    if n%2==0\
    \ {\n        arr.append(arr[n-1])\n    }\n    for i := 1; i <= n; i++ {\n    \
    \    arr.append(arr[n-i-1] + arr[n-i-2])\n    }\n    return arr\n}\n\nfunc TestTri(t\
    \ *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1,\
    \ 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3,\
    \ 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n\
    \     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n \
    \    { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n\
    \     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35}\
    \ },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7itfel2j_test.go:30:9: arr.append undefined (type []int has no field or
    method append)

    /tmp/tmp7itfel2j_test.go:32:13: arr.append undefined (type []int has no field
    or method append)

    /tmp/tmp7itfel2j_test.go:35:13: arr.append undefined (type []int has no field
    or method append)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074093
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 0 {\n        return []int{}\n\
    \    }\n    if n == 0 {\n        return []int{3}\n    }\n\n    result := []int{}\n\
    \    // Handle odd case\n    a, b := tri(n-1) + tri(n-2)\n    if n % 2 == 0 {\n\
    \        result = append(result, a)\n        result = append(result, b)\n    }\
    \ else {\n        result = append(result, a, b)\n    }\n    return result\n}\n\
    \nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwdkpi3g3_test.go:34:13: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074093
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 || n == 1 {\n        return\
    \ []int{n}\n    }\n\n    var res []int\n    switch {\n    case n % 2 == 0:\n \
    \       res = append(res, tri(n-1))\n        res = append(res, tri(n-2))\n   \
    \     res = append(res, tri(n+1))\n    default:\n        res = append(res, tri(n-1))\n\
    \        res = append(res, tri(n-2))\n        res = append(res, tri(n+2))\n  \
    \      res = append(res, tri(n+3))\n    }\n    return res\n}\n\nfunc TestTri(t\
    \ *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1,\
    \ 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3,\
    \ 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n\
    \     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n \
    \    { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n\
    \     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35}\
    \ },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjqkkkr8g_test.go:32:27: cannot use tri(n - 1) (value of type []int) as
    type int in argument to append

    /tmp/tmpjqkkkr8g_test.go:33:27: cannot use tri(n - 2) (value of type []int) as
    type int in argument to append

    /tmp/tmpjqkkkr8g_test.go:34:27: cannot use tri(n + 1) (value of type []int) as
    type int in argument to append

    /tmp/tmpjqkkkr8g_test.go:36:27: cannot use tri(n - 1) (value of type []int) as
    type int in argument to append

    /tmp/tmpjqkkkr8g_test.go:37:27: cannot use tri(n - 2) (value of type []int) as
    type int in argument to append

    /tmp/tmpjqkkkr8g_test.go:38:27: cannot use tri(n + 2) (value of type []int) as
    type int in argument to append

    /tmp/tmpjqkkkr8g_test.go:39:27: cannot use tri(n + 3) (value of type []int) as
    type int in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074093
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    result := make([]int, n+1)\n    result[0],\
    \ result[1] = 3, 1\n    for i := 2; i < n; i++ {\n        result[i] = result[i\
    \ - 1] + result[i - 2] + result[i-2]\n    }\n    return result[n]\n}\n\nfunc TestTri(t\
    \ *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1,\
    \ 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3,\
    \ 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n\
    \     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n \
    \    { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n\
    \     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35}\
    \ },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpecp6u4_7_test.go:30:12: cannot use result[n] (variable of type int) as
    type []int in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074093
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    var result []int\n    if n == 0 || n\
    \ == 1 {\n        return nil\n    }\n    if n%2 == 0 {\n        result = append(result,\
    \ 1)\n    }\n    result = append(result, tri(n-1))\n    result = append(result,\
    \ tri(n-2))\n    result = append(result, tri(n+1))\n    return result\n}\n</code>\n\
    <|/ a |>\n<| c |>\nJust an idea of what to expect from this question, since this\
    \ was accepted and upvoted over 2 years ago.\n<|/ c |>\n<| c |>\nThe explanation\
    \ on how this works is quite helpful to understand recursion.\n<|/ c |>\n<| a\
    \ tags=go dscore=5 |>\n<code>\npackage main\n\nimport (\n    \"fmt\"\n)\n\nfunc\
    \ TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmphpwk2c81_test.go:37:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074092
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 1 {\n        return []int{1}\n\
    \    }\n    if n == 2 {\n        return []int{1, 2, 3, 4}\n    }\n    if n ==\
    \ 3 {\n        return []int{1, 3, 5, 7}\n    }\n    result := []int{}\n    tri_n_1\
    \ := tri(n - 1)\n    tri_n_2 := tri(n - 2)\n    tri_n_3 := tri(n - 3)\n    for\
    \ i := 1; i < n; i++ {\n        result = append(result, tri_n_1[i-1] + tri_n_2[i-1]\
    \ + tri_n_3[i-1])\n    }\n    return result\n}\n\nfunc TestTri(t *testing.T) {\n\
    \  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [1]\
    \ with length 1 [recovered]\n\tpanic: runtime error: index out of range [1] with\
    \ length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5139e0, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x5139e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmpkpz5dy5x_test.go:39\
    \ +0x277\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpkpz5dy5x_test.go:52\
    \ +0x73\ntesting.tRunner(0xc0001a0340, 0x5292f8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074093
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    var res []int\n\n    switch {\n    case\
    \ n <= 2:\n        res = make([]int, 0, n+1)\n        res = append(res, 2)\n \
    \   case n%2 == 0: //even \n        res = append(res, tri(n - 1)...)\n       \
    \ res[len(res)-1] = tri(n - 2) + tri(n + 1)\n    default: //odd \n        res\
    \ = append(res, tri(n - 1)...)\n        res[len(res)-1] = tri(n - 1) + tri(n +\
    \ 1)\n    }\n\n    return res\n}\n\nfunc TestTri(t *testing.T) {\n  candidate\
    \ := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2,\
    \ 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n    \
    \ { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual:\
    \ candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyjucut3h_test.go:33:27: invalid operation: operator + not defined on tri(n
    - 2) (value of type []int)

    /tmp/tmpyjucut3h_test.go:36:27: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074093
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    return triTri(n, n)\n}\n\nfunc TestTri(t\
    \ *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1,\
    \ 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3,\
    \ 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n\
    \     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n \
    \    { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n\
    \     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35}\
    \ },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3z6pho7e_test.go:25:12: undefined: triTri

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074093
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 0 {\n        return []int{}\n\
    \    }\n    if n == 1 {\n        return []int{3}\n    }\n    if n == 2 {\n   \
    \     return []int{1, 3}\n    }\n\n    arr := []int{}\n\n    tri_helper := func(x\
    \ int) {\n        if x == 1 {\n            arr = append(arr, 3)\n            return\n\
    \        }\n        if x == 2 {\n            arr = append(arr, 3)\n          \
    \  arr = append(arr, 3)\n            return\n        }\n        arr = append(arr,\
    \ tri_helper(x-1) + tri_helper(x-2) + tri_helper(x+1))\n    }\n    tri_helper(n)\n\
    \n    return arr\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n  \
    \   { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnjh9vbhc_test.go:47:27: undefined: tri_helper

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074093
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    tris := []int{}\n    tris = append(tris,\
    \ 3)\n    tris = append(tris, 1+n+1)\n    tris = append(tris, tri(tris[1]-1)+tri(tris[2]-2)+tri(tris[3]+1))\n\
    \    return tris[:n+1]\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8}\
    \ },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzarhoslr_test.go:28:25: invalid operation: operator + not defined on tri(tris[1]
    - 1) (value of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074093
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    switch {\n    case n < 3:\n        return\
    \ []int{}\n    case n % 2 == 1:\n        return []int{tri(n - 1) + tri(n - 2)}\n\
    \    case n % 2 == 0:\n        return []int{tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1)}\n    default:\n        return []int{}\n    }\n}\n\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp80hj6i32_test.go:29:22: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    /tmp/tmp80hj6i32_test.go:31:22: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074093
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 2 {\n        return nil\n    }\n\
    \    b := make([]int, n+1)\n    b[0] = 3\n    b[1] = 1 + n/2\n    if n & 1 ==\
    \ 0 {\n        b[2] = b[1]\n        b[2] = b[1] + b[2]\n        b[2] = b[1] +\
    \ b[2]\n    } else {\n        b[2] = b[1]\n        b[2] = b[1] + b[2]\n    }\n\
    \    for i := 3; i <= n; i++ {\n        b[i] = b[i - 1] + b[i - 2] + b[i - 3]\n\
    \    }\n    return b[:n+1]\n}\n\nfunc TestTri(t *testing.T) {\n  candidate :=\
    \ tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2,\
    \ 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n    \
    \ { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual:\
    \ candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__0 (0.00s)\n\
    \        tmp_jbvgydo_test.go:67: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=4) %!s(int=9)]'\n    --- FAIL: TestTri/test_num__1\
    \ (0.00s)\n        tmp_jbvgydo_test.go:67: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3)]', got '[%!s(int=3) %!s(int=3) %!s(int=9) %!s(int=15)\
    \ %!s(int=27)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmp_jbvgydo_test.go:67:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]',\
    \ got '[%!s(int=3) %!s(int=3) %!s(int=6) %!s(int=12) %!s(int=21) %!s(int=39)]'\n\
    \    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmp_jbvgydo_test.go:67: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]',\
    \ got '[%!s(int=3) %!s(int=4) %!s(int=12) %!s(int=19) %!s(int=35) %!s(int=66)\
    \ %!s(int=120)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmp_jbvgydo_test.go:67:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4) %!s(int=24)]', got '[%!s(int=3) %!s(int=4) %!s(int=8) %!s(int=15)\
    \ %!s(int=27) %!s(int=50) %!s(int=92) %!s(int=169)]'\n    --- FAIL: TestTri/test_num__5\
    \ (0.00s)\n        tmp_jbvgydo_test.go:67: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=3)\
    \ %!s(int=5) %!s(int=15) %!s(int=23) %!s(int=43) %!s(int=81) %!s(int=147) %!s(int=271)\
    \ %!s(int=499)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmp_jbvgydo_test.go:67:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=3) %!s(int=5)\
    \ %!s(int=10) %!s(int=18) %!s(int=33) %!s(int=61) %!s(int=112) %!s(int=206) %!s(int=379)\
    \ %!s(int=697)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmp_jbvgydo_test.go:67:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s"
  timestamp: 1660074093
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 0 {\n        return []int{}\n\
    \    }\n    if n == 0 {\n        return []int{0}\n    }\n    switch n {\n    case\
    \ 1: \n        return []int{1}\n    case 2: \n        return []int{1, 2}\n   \
    \ case 3: \n        return []int{1, 2, 3}\n    case 4: \n        return []int{1,\
    \ 2, 3, 4}\n    default:\n        t := tri(n - 1)\n        x := t[0]\n       \
    \ y := t[1]\n        z = t[n-2]\n        return append(t, x, y)\n    }\n}\n\n\
    func TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpihu4ufcg_test.go:44:9: undefined: z

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074093
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    var result []int\n    if n <= 1 {\n \
    \       result = [1]int{n}\n    } else {\n        if n == 2 {\n            result\
    \ = [1]int{n}\n        } else {\n            result = [1]int{n, 1 + n/2}\n   \
    \     }\n    }\n    return result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate\
    \ := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2,\
    \ 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n    \
    \ { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual:\
    \ candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3wibjlp9_test.go:27:18:\
    \ cannot use [1]int{\u2026} (value of type [1]int) as type []int in assignment\n\
    /tmp/tmp3wibjlp9_test.go:30:22: cannot use [1]int{\u2026} (value of type [1]int)\
    \ as type []int in assignment\n/tmp/tmp3wibjlp9_test.go:32:22: cannot use [1]int{\u2026\
    } (value of type [1]int) as type []int in assignment\n/tmp/tmp3wibjlp9_test.go:32:32:\
    \ index 1 is out of bounds (>= 1)\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074094
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    a, b := 1, 3\n    result := make([]int,\
    \ n+1)\n    for i := 0; i < n; i++ {\n        result[i] = a\n        a = b\n \
    \       b += (b - a) / 2\n    }\n    return result\n}\n</code>\n<|/ a dscore=3\
    \ tags=recursion,go |>\n<| a tags=recursion,go |>\nI believe there is a more elegant\
    \ way to do this. But here is my implementation:\n<code>\npackage main\n\nimport\
    \ (\n    \"fmt\"\n)\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n  \
    \   { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpld3ajwij_test.go:34:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074093
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    result := make([]int, n+1)\n    result[0]\
    \ = 3\n    \n    if n%2 == 0 {\n        for i := 1; i < n; i++ {\n           \
    \ result[i+1] = result[i] + result[i-1]\n        }\n    } else {\n        for\
    \ i := 1; i < n; i++ {\n            result[i+1] = result[i] + result[i-1] + result[i-2]\n\
    \        }\n    }\n    return result[n:]\n}\n\nfunc TestTri(t *testing.T) {\n\
    \  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [-1]\
    \ [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine 6\
    \ [running]:\ntesting.tRunner.func1.2({0x5139e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5139e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x3)\n\t/tmp/tmps48ddoz5_test.go:34\
    \ +0xd5\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmps48ddoz5_test.go:47\
    \ +0x46\ntesting.tRunner(0xc0001924e0, 0x5292f8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074095
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n\
    \    }\n    if n%2 == 0 {\n        return append(tri(n/2), tri(n/2+1), tri(n+1)...)\n\
    \    }\n    return append(tri(n-1), tri(n-2), tri(n-3)...)\n}\n\nfunc TestTri(t\
    \ *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1,\
    \ 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3,\
    \ 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n\
    \     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n \
    \    { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n\
    \     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35}\
    \ },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpvqu8o4oi_test.go:29:45:\
    \ too many arguments in call to append\n\thave ([]int, []int, []int)\n\twant ([]int,\
    \ ...int)\n/tmp/tmpvqu8o4oi_test.go:31:39: too many arguments in call to append\n\
    \thave ([]int, []int, []int)\n\twant ([]int, ...int)\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074094
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    tri_n := []int{}\n    tri_n2 := []int{}\n\
    \n    if n <= 0 {\n        return tri_n\n    }\n\n    tri_1 = tri_3 = []int{n}\n\
    \    tri_2 = tri_3 = []int{n + 1}\n\n    for i := 2; i <= n; i++ {\n        tri_n2\
    \ = append(tri_n2, tri_1[len(tri_n1)-1])\n        tri_n = append(tri_n, tri_2[len(tri_n2)-1])\n\
    \        tri_2 = append(tri_2, tri_3[len(tri_n2)-1])\n        tri_1 = append(tri_1,\
    \ tri_3[len(tri_n2)-1])\n    }\n    return tri_n\n}\n\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp733rptwa_test.go:32:19: expected ''=='', found ''=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074094
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    tri_arr := make([]int, n)\n    tri_arr[0]\
    \ = tri_arr[1] = 1\n    tri_arr[2] = 1 + tri_arr[1]/2\n    for i := 3; i < n;\
    \ i++ {\n        if i%2 == 0 {\n            tri_arr[i] = 1 + tri_arr[i - 1] +\
    \ tri_arr[i + 2]\n        } else {\n            tri_arr[i] = tri_arr[i - 1] +\
    \ tri_arr[i + 2]\n        }\n    }\n    return tri_arr\n}\n\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpv6t1k1sp_test.go:26:29: expected ''=='', found ''=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074094
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    s := make([]int, n+1)\n    s[0], s[1]\
    \ = 3, 2\n    for i := 2; i <= n; i++ {\n        if i%2 == 0 {\n            s[i]\
    \ = s[i-1] + s[i-2]\n        } else {\n            s[i] = s[i-1] + s[i-2] + s[i+1]\n\
    \        }\n    }\n    return s[:n]\n}\n\nfunc TestTri(t *testing.T) {\n  candidate\
    \ := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2,\
    \ 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n    \
    \ { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual:\
    \ candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(...)\n\t/tmp/tmpx4zy2yxp_test.go:31\n\
    command-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpx4zy2yxp_test.go:44 +0x426\n\
    testing.tRunner(0xc0001a0340, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074096
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    result := make([]int, n+1)\n    if n%2\
    \ == 0 {\n        result[0] = result[1] = 3\n    }\n    for i := 2; i < n; i++\
    \ {\n        result[i] = result[i-2] + result[i-1]\n    }\n    return result[:n+1]\n\
    }\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpzamlfs2b_test.go:27:31: expected ''=='', found ''=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074094
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    base := 3\n    tris := []int{1, base}\n\
    \    for i := 2; i <= n; i++ {\n        tris = append(tris, tris[i-1] + tris[i-2]\
    \ + tris[i+1])\n    }\n    return tris[0 : n+1]\n}\n\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [3]\
    \ with length 2 [recovered]\n\tpanic: runtime error: index out of range [3] with\
    \ length 2\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x5139e0, 0xc00014e000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x5139e0,\
    \ 0xc00014e000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(...)\n\t/tmp/tmplo70txez_test.go:28\n\
    command-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmplo70txez_test.go:40 +0x10d3\n\
    testing.tRunner(0xc00011aea0, 0x5292f8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074096
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    result := make([]int, n+1)\n    result[0]\
    \ = 3\n    if n%2 == 0 {\n        result[1] = 1\n    } else {\n        result[1]\
    \ = 1 + n/2\n    }\n    for i := 2; i < n; i++ {\n        result[i] = result[i-1]\
    \ + result[i-2] + result[i+1]\n    }\n    return result\n}\n\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [1]\
    \ with length 1 [recovered]\n\tpanic: runtime error: index out of range [1] with\
    \ length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(...)\n\t/tmp/tmpv8z0g3yl_test.go:28\n\
    command-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpv8z0g3yl_test.go:53 +0x285\n\
    testing.tRunner(0xc0001a0340, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074096
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    list := make([]int, n+1)\n    list[0]\
    \ = list[1] = list[2] = 1\n    for i := 3; i <= n; i++ {\n        list[i] = list[i-2]\
    \ + list[i-3] + list[i+2]\n    }\n    return list\n}\n\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1cm3crzy_test.go:26:23: expected ''=='', found ''=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074094
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n%2 == 0 {\n        return []int{1,\
    \ n + n/2, n}\n    }\n    return tri(n-1) + tri(n-2) + []int{n}\n}\n\nfunc TestTri(t\
    \ *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1,\
    \ 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3,\
    \ 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n\
    \     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n \
    \    { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n\
    \     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35}\
    \ },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkrz9bxk__test.go:28:12: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074095
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    result := []int{}\n    for i := 1; i\
    \ <= n; i++ {\n        if i == 1 || i == 2 {\n            result = append(result,\
    \ i)\n        } else {\n            result = append(result, tri(i - 1) + tri(i\
    \ - 2) + tri(i + 1))\n        }\n    }\n    return result\n}\n\nfunc TestTri(t\
    \ *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1,\
    \ 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3,\
    \ 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n\
    \     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n \
    \    { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n\
    \     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35}\
    \ },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphmyts2pe_test.go:30:37: invalid operation: operator + not defined on tri(i
    - 1) (value of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074095
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    var result []int\n    if n == 1 {\n \
    \       return append(result, 1)\n    }\n    if n == 2 {\n        return append(result,\
    \ 1, 1)\n    }\n    \n    result := append(result, tri(n - 1) + tri(n - 2), tri(n\
    \ + 1))\n    return result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate :=\
    \ tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2,\
    \ 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n    \
    \ { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual:\
    \ candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnogacpps_test.go:33:12: no new variables on left side of :=

    /tmp/tmpnogacpps_test.go:33:30: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074095
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    sum := 0\n    if n%2 == 0 {\n       \
    \ sum = 3\n    }\n    else {\n        sum = 3 + n + 1\n    }\n    sum /= 2\n \
    \   tri := []int{}\n    for i := 1; i <= n; i++ {\n        tri = append(tri, sum)\n\
    \        sum += i/2\n    }\n    return tri\n}\n\nfunc TestTri(t *testing.T) {\n\
    \  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_r6or0v6_test.go:29:5: expected statement, found ''else''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074094
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    // Base case\n    if n == 0 {\n     \
    \   return nil\n    }\n    // Recursion \n    return append(tri(n - 1), tri(n\
    \ - 2) + tri(n - 1)...)\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8}\
    \ },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp71ige55w_test.go:30:31: invalid operation: operator + not defined on tri(n
    - 2) (value of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074095
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    tri := make([]int, n+1)\n    tri[0] =\
    \ tri[1] = 3\n    tri[n] = 1 + tri[n-1] + tri[n-2]\n    switch {\n    case n %\
    \ 2 == 0: \n        tri[n] = tri[n-1] + tri[n-2]\n    default:\n        tri[n]\
    \ = tri[n-1] + tri[n-2] + tri[n-3]\n    }\n    return tri[n:]\n}\nfunc TestTri(t\
    \ *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1,\
    \ 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3,\
    \ 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n\
    \     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n \
    \    { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n\
    \     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35}\
    \ },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp58wrspad_test.go:26:21: expected ''=='', found ''=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074094
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    s := make([]int, n+1)\n    for i := range\
    \ s {\n        s[i] = i\n    }\n    s[len(s)-1] = s[len(s)-2] + s[len(s)-1]\n\
    \    return s[:n]\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n  \
    \   { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [-1]\
    \ [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine 18\
    \ [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000166000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000166000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(...)\n\t/tmp/tmp6884ia_n_test.go:29\n\
    command-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp6884ia_n_test.go:48 +0x1f7\n\
    testing.tRunner(0xc000103380, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074096
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    tri := make([]int, n+1)\n    tri[0],\
    \ tri[1], tri[2] = 1,3,2\n    for i := 3; i < n; i++ {\n        tri[i] = tri[i-1]+tri[i-2]+tri[i-3]\n\
    \    }\n    return tri\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8}\
    \ },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [1]\
    \ with length 1 [recovered]\n\tpanic: runtime error: index out of range [1] with\
    \ length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(...)\n\t/tmp/tmp8zq5fk8x_test.go:26\n\
    command-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp8zq5fk8x_test.go:48 +0x29e\n\
    testing.tRunner(0xc0001924e0, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074096
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 1 {\n        return []int{1}\n\
    \    }\n\n    res := make([]int, n+1)\n    res[0] = 1 + n / 2\n    for i := 1;\
    \ i <= n; i++ {\n        res[i+1] = res[i] - res[i-1] + res[i-2]\n    }\n\n  \
    \  return res\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n  \
    \   { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [-1]\
    \ [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine 18\
    \ [running]:\ntesting.tRunner.func1.2({0x5139e0, 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5139e0, 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(...)\n\t/tmp/tmp6oi1ggoh_test.go:32\n\
    command-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp6oi1ggoh_test.go:45 +0xbb9\n\
    testing.tRunner(0xc000103520, 0x5292f8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074096
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    i := 0\n    result := make([]int, n+1)\n\
    \    for i := 0; i < n; i++ {\n        result[i] = i\n    }\n    result[i] = 1\n\
    \    for i := 1; i < n; i++ {\n        if n%2 == 0 {\n            result[i] +=\
    \ result[i-1]\n        } else {\n            result[i] += result[i-2]\n      \
    \  }\n    }\n    return result[:n+1]\n}\n\nfunc TestTri(t *testing.T) {\n  candidate\
    \ := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2,\
    \ 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n    \
    \ { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual:\
    \ candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [-1]\
    \ [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine 6\
    \ [running]:\ntesting.tRunner.func1.2({0x5139e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5139e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(...)\n\t/tmp/tmpre5grj1z_test.go:35\n\
    command-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpre5grj1z_test.go:48 +0xab5\n\
    testing.tRunner(0xc0001a01a0, 0x5292f8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074096
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    result := []int{}\n    if n<0 {\n   \
    \     return []int{}\n    }\n    if n%2 == 0 {\n        for i := 0; i < n; i++\
    \ {\n            result = append(result, 3)\n        }\n        return result\n\
    \    }\n    tri(n - 1)\n    for i := 0; i < n; i++ {\n        result = append(result,\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n    return result\n}\n</code>\n\
    <|/ a dscore=5 |>\n<| c |>\nCan you clarify how you arrive at the `result` value?\
    \  Are you iterating from 0 to n-1?  And how does this avoid duplicating the 3\
    \ at the beginning?  Thanks\n<|/ c |>\n<| c |>\n: It's not iterating from 0 to\
    \ n-1, it's iterating from 0 to n. And yes, it is duplicating it at the beginning.\
    \ But I guess it might be the more efficient way.\n<|/ c |>\n<| c |>\nIt doesn't\
    \ avoid duplicating 3, but it's a good example of why it's important to avoid\
    \ duplicating data - it's easier to reason about and to modify, and it also avoids\
    \ recomputing values you don't need to.\n<|/ c |>\n<| c |>\nFor anyone else that\
    \ has this question I wrote a [simple Go program](https://gist.github.com/jmra/5770671)\
    \ to test the speed. The first solution I posted took `2.72 seconds`, this took\
    \ `0.41 seconds`. To be honest, I wasn't expecting it to take that long.\n<|/\
    \ c |>\n<| a tags=algorithm,big-o,asymptotic-complexity |>\nA simple recursive\
    \ solution could be:\n<code>\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8}\
    \ },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpk3acrbqe_test.go:41:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074095
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    switch n {\n    case 0:\n        return\
    \ []int{}\n    case 1:\n        return [3]int{1}\n    case 2:\n        return\
    \ []int{1, 3}\n    default:\n        if n%2 == 0 {\n            return []int{tri(n-1)\
    \ + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1) + 1}\n     \
    \   } else {\n            return []int{tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + 1, tri(n - 1) + tri(n - 2)}\n        }\n  \
    \  }\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpw0zguabw_test.go:29:16:\
    \ cannot use [3]int{\u2026} (value of type [3]int) as type []int in return statement\n\
    /tmp/tmpw0zguabw_test.go:34:26: invalid operation: operator + not defined on tri(n\
    \ - 1) (value of type []int)\n/tmp/tmpw0zguabw_test.go:36:26: invalid operation:\
    \ operator + not defined on tri(n - 1) (value of type []int)\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074096
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    // Write your code here.\n    return\
    \ fibTri(n)\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n  \
    \   { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb2v6j6h4_test.go:26:12: undefined: fibTri

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074096
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    list := make([]int, n+1)\n    list[0],\
    \ list[1] = 3, 1\n    n := 2\n    for n > 0 {\n        list[n] = list[n-1] + list[n-2]\
    \ + list[n+1]\n        n = n+2\n    }\n    return list\n}\n\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_66kca7d_test.go:27:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074096
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 2 {\n        return []int{n}\n\
    \    }\n    list := make([]int, n+1)\n    for i := range list {\n        list[i]\
    \ = n + 1\n    }\n    list[0] = n + 1\n    list[1] = 3\n    switch {\n    case\
    \ n % 2 == 0: \n        for i := 1; i < len(list)-1; i++ {\n            list[i]\
    \ = list[i+1] + list[i-1]\n        }\n    default:\n        for i := 1; i < len(list)-1;\
    \ i++ {\n            list[i] = list[i+1] + list[i]\n        }\n    }\n    return\
    \ list\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__0 (0.00s)\n\
    \        tmphealz8eb_test.go:69: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]',\
    \ got '[%!s(int=4) %!s(int=7) %!s(int=8) %!s(int=4)]'\n    --- FAIL: TestTri/test_num__1\
    \ (0.00s)\n        tmphealz8eb_test.go:69: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3)]', got '[%!s(int=5) %!s(int=10) %!s(int=15) %!s(int=20)\
    \ %!s(int=5)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmphealz8eb_test.go:69:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]',\
    \ got '[%!s(int=6) %!s(int=9) %!s(int=12) %!s(int=12) %!s(int=12) %!s(int=6)]'\n\
    \    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmphealz8eb_test.go:69: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]',\
    \ got '[%!s(int=7) %!s(int=14) %!s(int=21) %!s(int=28) %!s(int=35) %!s(int=42)\
    \ %!s(int=7)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmphealz8eb_test.go:69:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4) %!s(int=24)]', got '[%!s(int=8) %!s(int=11) %!s(int=16) %!s(int=16)\
    \ %!s(int=16) %!s(int=16) %!s(int=16) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__5\
    \ (0.00s)\n        tmphealz8eb_test.go:69: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=9)\
    \ %!s(int=18) %!s(int=27) %!s(int=36) %!s(int=45) %!s(int=54) %!s(int=63) %!s(int=72)\
    \ %!s(int=9)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmphealz8eb_test.go:69:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=10) %!s(int=13)\
    \ %!s(int=20) %!s(int=20) %!s(int=20) %!s(int=20) %!s(int=20) %!s(int=20) %!s(int=20)\
    \ %!s(int=10)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmphealz8eb_test.go:69:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int="
  timestamp: 1660074097
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    return []int{1, 1, 3, 8, 5, 16, 9, 24,\
    \ 27, 32, 6}[n:]\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n  \
    \   { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: slice bounds out of range\
    \ [20:11] [recovered]\n\tpanic: runtime error: slice bounds out of range [20:11]\n\
    \ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5124c0, 0xc000014360})\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x5124c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(...)\n\t/tmp/tmp07tn7i8r_test.go:25\n\
    command-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp07tn7i8r_test.go:42 +0x34b\n\
    testing.tRunner(0xc0001a0340, 0x527db8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074097
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n\
    \    }\n    if n%2 == 0 {\n        return []int{1, tri(n - 1) + tri(n - 2)}\n\
    \    }\n    left := tri(n - 3)\n    right := tri(n - 2) + tri(n - 1)\n    return\
    \ append(left, right...)\n}\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8}\
    \ },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppf771ilf_test.go:29:25: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    /tmp/tmppf771ilf_test.go:32:14: invalid operation: operator + not defined on tri(n
    - 2) (value of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074097
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    result := make([]int, n+1)\n    \n  \
    \  func helper(a, b int, index int, accum []int) {\n        if index < len(result)\
    \ {\n            result[index] = accum \n            return\n        }\n     \
    \   \n        if b != 0 {\n            helper(a + 1, b-1, index+1, accum)\n  \
    \      }\n        if a < n {\n            helper(a+1, 0, index+1, accum)\n   \
    \     }\n    }\n    \n    helper(0, 1, 0, result)\n    return result\n}\n\nfunc\
    \ TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp4xx5zz60_test.go:27:10: expected ''('', found helper

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074096
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 1 {\n        return []int{}\n\
    \    }\n    \n    result := []int{1, n}\n    if n%2 == 0 {\n        result[len(result)-1]\
    \ = result[len(result)-2] + result[len(result)-1]\n    } else {\n        result[len(result)-1]\
    \ = result[len(result)-2] + result[len(result)-1]\n    }\n    \n    return result\n\
    }\n</cell>\n<cell>\ndef tri(n: int) -> list:\n    \"\"\"\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n    = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    []int{1, 3,\
    \ 2, 8}\n    \"\"\"\n    if n < 1:\n        return []\n    \n    result = [1,\
    \ n]\n    if n%2 == 0:\n        result[len(result)-1] = result[len(result)-2]\
    \ + result[len(result)-1]\n    else:\n        result[len(result)-1] = result[len(result)-2]\
    \ + result[len(result)-1]\n    \n    return result\n</cell>\n<cell>\ntri(2)\n\
    </cell>\n<cell>\ntri(4)\n</cell>\n<cell>\ntri(6)\n</cell>\n<cell>\ntri(10)\n</cell>\n\
    <cell>\ntri(30)\n</cell>\n<text>\nThe Fibonacci Sequence\nA recurrence relation\
    \ in mathematics defines a function that is given an initial value $x_0$, \nand\
    \ an indefinite number of values $x_1, x_2, \\ldots, x_n$. The recurrence then\
    \ defines a series that starts at $x_0$ and ends at $x_n$.\n\n\n</text>\n<cell>\n\
    def fib(n):\n    \"\"\"\n    Return the Fibonacci sequence up to n\n    \"\"\"\
    \n    a, b = 0, 1\n    while a < n:\n        print(a)\n        a, b = b, a+b\n\
    </cell>\n<cell>\nfib(5)\n</cell>\n<cell>\nfib(30)\n</cell>\n<text>\nThe Fibonacci\
    \ Sequence\nA recurrence relation in mathematics defines a function that is given\
    \ \nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpdhv5117t_test.go:38:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074096
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    result := make([]int, n)\n    t := 0\n\
    \    if n == 1 {\n        result[0] = 3\n        return result;\n    }\n\n   \
    \ for i := 1; i <= n; i++ {\n        if i%2 == 0 {\n            result[t] = i\n\
    \            t += 1\n        }\n\n        if i%2 == 1 {\n            result[t]\
    \ = i+i+i\n            t += 1\n        }\n    }\n\n    return result\n}\n</code>\n\
    <|/ a dscore=3 |>\n<| a tags=algorithm,java,c# |>\nHere's one in JavaScript using\
    \ an auxiliary array and recursion.\n<code>\nfunc TestTri(t *testing.T) {\n  candidate\
    \ := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2,\
    \ 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n    \
    \ { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual:\
    \ candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpeasrrisk_test.go:46:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074096
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 0 {\n        return []int{}\n\
    \    }\n    if n == 0 {\n        return []int{1}\n    }\n    if n == 1 {\n   \
    \     return []int{3}\n    }\n    if n == 2 {\n        return []int{1, 2, 3}\n\
    \    }\n    f := tri(n - 1) + tri(n - 2) + tri(n + 1)\n    return append(f, tri(n\
    \ - 3), tri(n - 2))\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8}\
    \ },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp115szcrq_test.go:37:10: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074097
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n <= 0 {\n        return []int{1,\
    \ n, n, n}\n    }\n\n    result := make([]int, n+1)\n    result[0] = 3\n    for\
    \ i := 1; i < n; i++ {\n        result[i] = result[i-1] + result[i-2] + result[i+2]\n\
    \    }\n    return result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8}\
    \ },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [-1]\
    \ [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine 20\
    \ [running]:\ntesting.tRunner.func1.2({0x5139e0, 0xc000164000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5139e0, 0xc000164000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(...)\n\t/tmp/tmpgq_t24zn_test.go:32\n\
    command-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpgq_t24zn_test.go:44 +0xbb9\n\
    testing.tRunner(0xc000103860, 0x5292f8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074097
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 || n == 1 {\n        return\
    \ []int{}\n    }\n    result := tri(n - 1) + tri(n - 2) + tri(n + 1)\n    if n\
    \ & 1 {\n        result = append(result, tri(n))\n    }\n    return result\n}\n\
    \nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc6qmu82k_test.go:28:15: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    /tmp/tmpc6qmu82k_test.go:29:8: non-boolean condition in if statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074097
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 0 {\n        return []int{}\n\
    \    }\n    base := 1 + n / 2\n    if n & 1 == 1 {\n        return []int{base}\n\
    \    }\n    return []int{base, tri(n - 1), tri(n - 2)}\n}\n\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr91ptkob_test.go:32:24: cannot use tri(n - 1) (value of type []int) as
    type int in array or slice literal

    /tmp/tmpr91ptkob_test.go:32:36: cannot use tri(n - 2) (value of type []int) as
    type int in array or slice literal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074097
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    // Write code here\n    result := make([]int,\
    \ n+1)\n    result := append(result[1:], result[:1]...)\n    n := 0\n    if n\
    \ <= 1 {\n        return result\n    }\n    result := append(result, tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n    if n % 2 == 0 {\n        result = append(result,\
    \ result[n])\n    }\n    return result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate\
    \ := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2,\
    \ 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n    \
    \ { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual:\
    \ candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdf25bsuw_test.go:27:12: no new variables on left side of :=

    /tmp/tmpdf25bsuw_test.go:28:7: no new variables on left side of :=

    /tmp/tmpdf25bsuw_test.go:32:12: no new variables on left side of :=

    /tmp/tmpdf25bsuw_test.go:32:30: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074097
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{3}\n\
    \    } else if n == 1 {\n        return []int{1, 3}\n    }\n\n    list := []int{}\n\
    \    list[0] = 3\n\n    if n % 2 == 0 {\n        for i := 1; i <= n; i++ {\n \
    \           list[i+1] = list[i] + list[i-1]\n        }\n    } else {\n       \
    \ for i := 1; i <= n/2; i++ {\n            list[i+1] = list[i] + list[i-1] + list[i-2]\n\
    \        }\n    }\n\n    return list\n}\n\nfunc TestTri(t *testing.T) {\n  candidate\
    \ := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2,\
    \ 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n    \
    \ { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual:\
    \ candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [0]\
    \ with length 0 [recovered]\n\tpanic: runtime error: index out of range [0] with\
    \ length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5139e0, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x5139e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x450700?)\n\t/tmp/tmpvi_dfh3b_test.go:32\
    \ +0x7b\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpvi_dfh3b_test.go:54\
    \ +0x46\ntesting.tRunner(0xc0001a01a0, 0x5292f8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074097
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    // write your code here\n    if n < 2\
    \ {\n        return []int{}\n    }\n    result := make([]int, n+1)\n    temp1\
    \ := 1\n    temp2 := 3\n    for i := 0; i < n; i++ {\n        result[i] = temp1\n\
    \        temp1, temp2 = temp2, temp1 + temp2\n    }\n    return result\n}\n\n\
    func TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__0 (0.00s)\n\
    \        tmpfff3k26v_test.go:61: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]',\
    \ got '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=0)]'\n    --- FAIL: TestTri/test_num__1\
    \ (0.00s)\n        tmpfff3k26v_test.go:61: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=7) %!s(int=0)]'\n\
    \    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmpfff3k26v_test.go:61: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got\
    \ '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=7) %!s(int=11) %!s(int=0)]'\n   \
    \ --- FAIL: TestTri/test_num__3 (0.00s)\n        tmpfff3k26v_test.go:61: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]',\
    \ got '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=7) %!s(int=11) %!s(int=18) %!s(int=0)]'\n\
    \    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmpfff3k26v_test.go:61: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)\
    \ %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=7) %!s(int=11)\
    \ %!s(int=18) %!s(int=29) %!s(int=0)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n\
    \        tmpfff3k26v_test.go:61: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)\
    \ %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1)\
    \ %!s(int=3) %!s(int=4) %!s(int=7) %!s(int=11) %!s(int=18) %!s(int=29) %!s(int=47)\
    \ %!s(int=0)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmpfff3k26v_test.go:61:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3)\
    \ %!s(int=4) %!s(int=7) %!s(int=11) %!s(int=18) %!s(int=29) %!s(int=47) %!s(int=76)\
    \ %!s(int=0)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmpfff3k26v_test.go:61:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7)\
    \ %!s(int=63) %!s("
  timestamp: 1660074097
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    tri := []int{0}\n    tri2 := []int{0}\n\
    \    if n == 1 {\n        tri = append(tri, 3)\n        return tri\n    }\n  \
    \  tri[0] = 3\n    if n % 2 == 0 {\n        tri2 = append(tri2, tri[n - 1])\n\
    \        tri2 = append(tri2, tri[n - 2])\n        return tri2\n    } else {\n\
    \        tri2 = append(tri2, tri[n - 1])\n        tri2 = append(tri2, tri[n -\
    \ 2])\n        tri2 = append(tri2, tri[n + 1])\n        return tri2\n    }\n}\n\
    func TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [2]\
    \ with length 1 [recovered]\n\tpanic: runtime error: index out of range [2] with\
    \ length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5139e0, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x5139e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x3)\n\t/tmp/tmpg7s7d675_test.go:37\
    \ +0x21f\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpg7s7d675_test.go:50\
    \ +0x46\ntesting.tRunner(0xc0001a0340, 0x5292f8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074098
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 1 {\n        return []int{}\n\
    \    }\n    t := []int{n}\n    if n &^ 1 == 0 {\n        t = append(t, tri(n-1)...)\n\
    \    }\n    if n &^ 1 == 1 {\n        t = append(t, tri(n-2)...)\n        t =\
    \ append(t, tri(n+1)...)\n    }\n    return t\n}\n</code>\n<|/ a |>\n<| c |>\n\
    This code works, but is slow. It does not use memoization\n<|/ c |>\n<| c |>\n\
    This code does not work! You forgot `n = 2` and all numbers greater than `2` should\
    \ be `[]int{1, 3, 9, ...}`! Also, `tri(2)` should return `[]int{1, 3}`.\n<|/ c\
    \ |>\n<| a tags=fibonacci,math,recursion,algorithm dscore=5 |>\nThe nth fibonacci\
    \ number can be computed in O(log n) time.\n<code>\nint fibonacci(int n) {\n \
    \   int a = 0;\n    int b = 1;\n    int fibArray[n+1];\n    fibArray[0] = 0;\n\
    \    fibArray[1] = 1;\n    for(int i=2; i<=n; i++) {\n        fibArray[i] = fibArray[i-1]\
    \ + fibArray[i-2];\n    }\n    return fibArray[n];\n}\n</code>\n<|/ a |>\n<| a\
    \ |>\nA recursive solution can be easily implemented.\n<code>\ndef fibo(n)\n \
    \ if n < 0\n    return []\n  else\n    return [ fibo(n-2) + fibo(n-1) ]\nend\n\
    </code>\n<|/ a dscore=4 tags=fibonacci,math,recursion,algorithm |>\n<| c |>\n\
    This doesn't take into account the special case where n=2\n<|/ c |>\n<| a dscore=4\
    \ tags=fibonacci,math,recursion,algorithm |>\nThe fibonacci series is defined\
    \ as follows:\n\n0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610,\
    \ 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418,\
    \ 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887, 9227465\n\nThis\
    \ can be seen as a sum of two fibonacci numbers, which is equal to the sum of\
    \ the first two natural numbers up to the n-th fibonacci number, which is simply\
    \ defined as a(n) + b(n) - a(n-1) - b(n-1) for a positive \nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpafwzta2b_test.go:38:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074097
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return nil\n   \
    \ }\n    tri_a := []int{3}\n    if n%2 == 0 {\n        tri_b := []int{0, 3, 2}\n\
    \        tri_a := append(tri_a, tri_b...)\n    } else {\n        tri_b := []int{1,\
    \ 4, 5}\n        tri_a := append(tri_a, tri_b...)\n    }\n    return tri_a\n}\n\
    \nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7b0hr1lv_test.go:31:9: tri_a declared but not used

    /tmp/tmp7b0hr1lv_test.go:34:9: tri_a declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074097
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    var result []int\n    if n <= 0 {\n \
    \       return result\n    }\n    if n%2 == 0 {\n        result = append(result,\
    \ tri(n-1)...)\n        result = append(result, tri(n-2)...)\n    } else {\n \
    \       result = append(result, tri(n-1)...)\n        result = append(result,\
    \ tri(n-2)...)\n        result = append(result, tri(n+1)...)\n    }\n    return\
    \ result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0368\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x52070f?, 0x5e4ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 34 [running]:\ncommand-line-arguments_test.tri(0x1?)\n\t\
    /tmp/tmprj4xkwgj_test.go:24 +0x2d1 fp=0xc0201e0378 sp=0xc0201e0370 pc=0x4ef931\n\
    command-line-arguments_test.tri(0x2)\n\t/tmp/tmprj4xkwgj_test.go:30 +0x45 fp=0xc0201e03e0\
    \ sp=0xc0201e0378 pc=0x4ef6a5\ncommand-line-arguments_test.tri(0x1)\n\t/tmp/tmprj4xkwgj_test.go:35\
    \ +0x225 fp=0xc0201e0448 sp=0xc0201e03e0 pc=0x4ef885\ncommand-line-arguments_test.tri(0x2)\n\
    \t/tmp/tmprj4xkwgj_test.go:30 +0x45 fp=0xc0201e04b0 sp=0xc0201e0448 pc=0x4ef6a5\n\
    command-line-arguments_test.tri(0x1)\n\t/tmp/tmprj4xkwgj_test.go:35 +0x225 fp=0xc0201e0518\
    \ sp=0xc0201e04b0 pc=0x4ef885\ncommand-line-arguments_test.tri(0x2)\n\t/tmp/tmprj4xkwgj_test.go:30\
    \ +0x45 fp=0xc0201e0580 sp=0xc0201e0518 pc=0x4ef6a5\ncommand-line-arguments_test.tri(0x1)\n\
    \t/tmp/tmprj4xkwgj_test.go:35 +0x225 fp=0xc0201e05e8 sp=0xc0201e0580 pc=0x4ef885\n\
    command-line-arguments_test.tri(0x2)\n\t/tmp/tmprj4xkwgj_test.go:30 +0x45 fp=0xc0201e0650\
    \ sp=0xc0201e05e8 pc=0x4ef6a5\ncommand-line-arguments_test.tri(0x1)\n\t/tmp/tmprj4xkwgj_test.go:35\
    \ +0x225 fp=0xc0201e06b8 sp=0xc0201e0650 pc=0x4ef885\ncommand-line-arguments_test.tri(0x2)\n\
    \t/tmp/tmprj4xkwgj_test.go:30 +0x45 fp=0xc0201e0720 sp=0xc0201e06b8 pc=0x4ef6a5\n\
    command-line-arguments_test.tri(0x1)\n\t/tmp/tmprj4xkwgj_test.go:35 +0x225 fp=0xc0201e0788\
    \ sp=0xc0201e0720 pc=0x4ef885\ncommand-line-arguments_test.tri(0x2)\n\t/tmp/tmprj4xkwgj_test.go:30\
    \ +0x45 fp=0xc0201e07f0 sp=0xc0201e0788 pc=0x4ef6a5\ncommand-line-arguments_test.tri(0x1)\n\
    \t/tmp/tmprj4xkwgj_test.go:35 +0x225 fp=0xc0201e0858 sp=0xc0201e07f0 pc=0x4ef885\n\
    command-line-arguments_test.tri(0x2)\n\t/tmp/tmprj4xkwgj_test"
  timestamp: 1660074099
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return nil\n   \
    \ }\n    if n == 1 {\n        return [3]int{3}\n    }\n    if n == 2 {\n     \
    \   return [3]int{1, 3}\n    }\n    tris := [3]int{}\n    tris[1] = 3\n    tris[2]\
    \ = 1 + n / 2\n    if n % 2 == 0 {\n        tris[3] = tris[2] + tris[1]\n    }\
    \ else {\n        tris[3] = tris[2] + tris[1] + tris[1 + n / 2]\n    }\n    return\
    \ tris\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpp0zp9lhr_test.go:29:16:\
    \ cannot use [3]int{\u2026} (value of type [3]int) as type []int in return statement\n\
    /tmp/tmpp0zp9lhr_test.go:32:16: cannot use [3]int{\u2026} (value of type [3]int)\
    \ as type []int in return statement\n/tmp/tmpp0zp9lhr_test.go:38:14: invalid argument:\
    \ array index 3 out of bounds [0:3]\n/tmp/tmpp0zp9lhr_test.go:40:14: invalid argument:\
    \ array index 3 out of bounds [0:3]\n/tmp/tmpp0zp9lhr_test.go:42:12: cannot use\
    \ tris (variable of type [3]int) as type []int in return statement\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074097
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    var tris []int\n    tris = append(tris,\
    \ 3)\n    if n%2 == 0 {\n        for i := 0; i < int(n); i++ {\n            tris\
    \ = append(tris, tris[i] + tris[i+1])\n        }\n    } else {\n        for i\
    \ := 0; i < int(n); i++ {\n            tris = append(tris, tris[i] - tris[i-1]\
    \ + tris[i+1])\n        }\n    }\n    return tris[:n+1]\n}\n</code>\n<|/ a |>\n\
    <| a tags=go |>\n<code>\npackage main\n\nimport (\n    \"fmt\"\n    \"math\"\n\
    \    \"time\"\n)\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n  \
    \   { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbshfc622_test.go:38:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074097
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    // base cases\n    if n < 2 {\n     \
    \   return []int{n}\n    }\n    if n%2 == 0 {\n        return []int{1, n+1}\n\
    \    }\n    t := tri(n - 1) + tri(n - 2)\n    return append(t, n+1)\n}\n\nfunc\
    \ TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp63z3ca3c_test.go:32:10: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074098
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    trilist := make([]int, 0, n+1)\n    trilist\
    \ = append(trilist, 3) // tri(1) = 3\n\n    if n%2 == 0 {\n        trilist = append(trilist,\
    \ 1)\n        trilist = append(trilist, 2)\n        trilist = append(trilist,\
    \ 3)\n    } else {\n        trilist = append(trilist, 1)\n        trilist = append(trilist,\
    \ 2)\n        trilist = append(trilist, 3)\n        trilist = append(trilist,\
    \ tri(2-1))\n    }\n    return trilist\n}\n\nfunc TestTri(t *testing.T) {\n  candidate\
    \ := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2,\
    \ 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n    \
    \ { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual:\
    \ candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwbijq9lo_test.go:36:35: cannot use tri(2 - 1) (value of type []int) as
    type int in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074097
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    t := make([]int, n+1)\n    t[0], t[1]\
    \ = 1, 3\n    if n%2 == 0 {\n        t[1], t[2] = t[2], t[1] + 1\n    }\n    for\
    \ i := 2; i < n+1; i++ {\n        t[i] = t[i-1] + t[i-2] + t[i+1]\n    }\n   \
    \ return t\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n  \
    \   { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(...)\n\t/tmp/tmpop38bd7e_test.go:31\n\
    command-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpop38bd7e_test.go:43 +0x3a6\n\
    testing.tRunner(0xc0001a0340, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074098
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 || n == 1 {\n        return\
    \ []int{1, n}\n    }\n    t := []int{}\n    if n%2 == 0 {\n        t = append(t,\
    \ tri(n-2)...)\n        t = append(t, tri(n-1)...)\n    } else {\n        t =\
    \ append(t, tri(n-3)...)\n        t = append(t, tri(n-2)...)\n        t = append(t,\
    \ tri(n-1)...)\n    }\n    t = append(t, n)\n    return t\n}\n\nfunc TestTri(t\
    \ *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1,\
    \ 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3,\
    \ 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n\
    \     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n \
    \    { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n\
    \     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35}\
    \ },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.05s)\n    --- FAIL: TestTri/test_num__0 (0.00s)\n\
    \        tmp6_yyqd56_test.go:63: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]',\
    \ got '[%!s(int=1) %!s(int=0) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=0) %!s(int=1)\
    \ %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestTri/test_num__1 (0.00s)\n\
    \        tmp6_yyqd56_test.go:63: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=0) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=0) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=0) %!s(int=1) %!s(int=1)\
    \ %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n\
    \        tmp6_yyqd56_test.go:63: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)\
    \ %!s(int=3) %!s(int=15)]', got '[%!s(int=1) %!s(int=0) %!s(int=1) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=0) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=0)\
    \ %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=1) %!s(int=0) %!s(int=1)\
    \ %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=0) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=0) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n\
    \    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmp6_yyqd56_test.go:63: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]',\
    \ got '[%!s(int=1) %!s(int=0) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=0)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=0) %!s(int=1) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=1) %!s(int=0) %!s(int=1) %!s(int=1) %!s(int=2)\
    \ %!s(int=1) %!s(int=0) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=0) %!s(int=1)\
    \ %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=1) %!s(int=0) %!s(int=1) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=0) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=0)\
    \ %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n\
    \    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmp6_yyqd56_test.go:63: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)\
    \ %!s(int=24)]', got '[%!s(int=1) %!s(int=0) %!s(int=1) "
  timestamp: 1660074098
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    switch {\n    case n < 3:\n        return\
    \ []int{1, n}\n    case n % 2 == 0:\n        return tri(n - 1) + tri(n - 2) +\
    \ tri(n - 1)\n    case n % 2 == 1:\n        return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2) + tri(n + 1)\n    }\n}\n\nfunc TestTri(t *testing.T) {\n \
    \ candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzpppnx26_test.go:29:16: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    /tmp/tmpzpppnx26_test.go:31:16: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    /tmp/tmpzpppnx26_test.go:33:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074098
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    result := make([]int, n+1)\n    result\
    \ := append(result,3)\n    if n%2 == 1 {\n        for i:=4; i<=n; i+=2 {\n   \
    \         result[i] = result[i+1]\n        }\n    }\n    return result\n}\n\n\
    func TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6kbw_rhx_test.go:26:12: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074098
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    switch {\n    case n == 1: return []int{1}\n\
    \    case n == 0: return nil\n    default: \n        tri := func(n int) []int\
    \ {\n            if n == 1 {\n                return []int{1}\n            }\n\
    \            if n%2 == 0 {\n                return []int{n, tri(n-1) + tri(n-2)}\n\
    \            }\n            return []int{n, tri(n-1) + tri(n-2)}\n        }\n\
    \        return tri(n)\n    }\n}\n\nfunc TestTri(t *testing.T) {\n  candidate\
    \ := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2,\
    \ 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n    \
    \ { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual:\
    \ candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxe_ke_7x_test.go:34:33: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    /tmp/tmpxe_ke_7x_test.go:36:29: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074098
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 1 {\n        return []int{}\n\
    \    }\n    if n <= 1 {\n        return [3]int{n}\n    }\n    return append(append(tri(n-1),\
    \ tri(n-2)), tri(n+1)...)\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8}\
    \ },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpvr5un4px_test.go:29:16:\
    \ cannot use [3]int{\u2026} (value of type [3]int) as type []int in return statement\n\
    /tmp/tmpvr5un4px_test.go:31:36: cannot use tri(n - 2) (value of type []int) as\
    \ type int in argument to append\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074099
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    // Fill this in.\n    if n%2 == 0 {\n\
    \        return [3]int{tri(n-1)[0], tri(n-1)[1], tri(n-1)[2]}\n    } else {\n\
    \        return [31]int{tri(n-1)[0], tri(n-1)[1], tri(n-1)[2], tri(n-1)[1+(n%2)]}\n\
    \    }\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpcy5i9_4a_test.go:27:16:\
    \ cannot use [3]int{\u2026} (value of type [3]int) as type []int in return statement\n\
    /tmp/tmpcy5i9_4a_test.go:29:16: cannot use [31]int{\u2026} (value of type [31]int)\
    \ as type []int in return statement\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074099
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    return []int{\n        3,\n        1+(n/2),\n\
    \        tri(n - 1) + tri(n - 2) + tri(n + 1),\n    }\n}\n\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxcn9kc2a_test.go:28:9: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074099
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    list := make([]int, n+1)\n    list[0]\
    \ = 3\n    list[1] = 1 + n/2\n    for i := 2; i < n; i++ {\n        list[i] =\
    \ list[i-1] + list[i-2] + list[i+1]\n    }\n    return list[n]\n}\n\nfunc TestTri(t\
    \ *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1,\
    \ 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3,\
    \ 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n\
    \     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n \
    \    { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n\
    \     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35}\
    \ },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp94fiicbt_test.go:31:12: cannot use list[n] (variable of type int) as type
    []int in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074099
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n\
    \    }\n    return []int{n + 1, 1, tri(n - 2) + tri(n - 1)}\n}\n\nfunc TestTri(t\
    \ *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1,\
    \ 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3,\
    \ 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n\
    \     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n \
    \    { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n\
    \     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35}\
    \ },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptdoggdhf_test.go:28:28: invalid operation: operator + not defined on tri(n
    - 2) (value of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074099
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    switch {\n    case n == 0:\n        return\
    \ []int{0, 1}\n    case n == 1:\n        return []int{0, 1}\n    case n == 2:\n\
    \        return []int{0, 2}\n    default:\n        result := []int{}\n       \
    \ x := tri(n - 1) + tri(n - 2) + tri(n + 1)\n        for _, i := range x {\n \
    \           result = append(result, i)\n        }\n        return result\n   \
    \ }\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl44fajyi_test.go:34:14: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074099
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    var result []int\n    switch {\n    case\
    \ n == 0:\n        result = []int{0, 1}\n    case n == 1:\n        result = []int{3}\n\
    \    case n%2 != 0:\n        result = append(result, tri(n - 1) + tri(n - 2))\n\
    \    default:\n        result = append(result, tri(n - 1) + tri(n - 2))\n    \
    \    result = append(result, tri(n + 1))\n    }\n    return result\n}\n\nfunc\
    \ TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpagsw5aiz_test.go:32:33: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    /tmp/tmpagsw5aiz_test.go:34:33: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    /tmp/tmpagsw5aiz_test.go:35:33: cannot use tri(n + 1) (value of type []int) as
    type int in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074099
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n\
    \    }\n    if n == 1 {\n        return []int{1, 3}\n    }\n    t := []int{}\n\
    \    if n % 2 == 1 {\n        t = append(t, tri(n - 2) + tri(n - 1) + tri(n +\
    \ 1))\n    } else {\n        t = append(t, tri(n - 2) + tri(n - 1))\n    }\n \
    \   return t\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n  \
    \   { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp52g8quoy_test.go:33:23: invalid operation: operator + not defined on tri(n
    - 2) (value of type []int)

    /tmp/tmp52g8quoy_test.go:35:23: invalid operation: operator + not defined on tri(n
    - 2) (value of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074099
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 1 {\n        return nil\n    }\n\
    \n    s := make([]int, n+1)\n    s[0] = 1\n    s[1] = 1\n    s[2] = 2\n    for\
    \ i := 3; i < len(s); i++ {\n        s[i+3] = s[i]+s[i+1]+s[i+2]\n    }\n\n  \
    \  return s[:n]\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n  \
    \   { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 4\n\ngoroutine 34 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc0001d8000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc0001d8000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(...)\n\t/tmp/tmpgvbadqt5_test.go:34\n\
    command-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpgvbadqt5_test.go:47 +0x585\n\
    testing.tRunner(0xc000199040, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074100
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 2 {\n        return nil\n    }\n\
    \n    tris := make([]int, n+2)\n    tris[0] = 3\n    tris[1] = 1\n    tris[2]\
    \ = 1 + n/2\n\n    if n%2 != 0 {\n        tris[3] = tris[2] + tris[1]\n    } else\
    \ {\n        tris[3] = tris[2] - tris[1]\n    }\n\n    return tris[:n+1]\n}\n\n\
    func TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__0 (0.00s)\n\
    \        tmp4fi6ks6h_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]',\
    \ got '[%!s(int=3) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestTri/test_num__1\
    \ (0.00s)\n        tmp4fi6ks6h_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3)]', got '[%!s(int=3) %!s(int=1) %!s(int=3) %!s(int=2) %!s(int=0)]'\n\
    \    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmp4fi6ks6h_test.go:65: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got\
    \ '[%!s(int=3) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=0) %!s(int=0)]'\n    ---\
    \ FAIL: TestTri/test_num__3 (0.00s)\n        tmp4fi6ks6h_test.go:65: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]',\
    \ got '[%!s(int=3) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmp4fi6ks6h_test.go:65: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)\
    \ %!s(int=24)]', got '[%!s(int=3) %!s(int=1) %!s(int=4) %!s(int=5) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n\
    \        tmp4fi6ks6h_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)\
    \ %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=3)\
    \ %!s(int=1) %!s(int=5) %!s(int=4) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmp4fi6ks6h_test.go:65:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=3) %!s(int=1)\
    \ %!s(int=5) %!s(int=6) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmp4fi6ks6h_test.go:65:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7)\
    \ %!s(int=63) %!s(int=8) %!s(int="
  timestamp: 1660074100
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 2 {\n        return []int{n}\n\
    \    }\n    first := tri(n - 1)\n    second := tri(n - 2)\n    thirds := tri(n\
    \ + 1)\n    last := append(first, second...)\n    last += append(thirds, last...)\n\
    \    return last\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n  \
    \   { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2od9u28q_test.go:32:5: invalid operation: operator + not defined on last
    (variable of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074099
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n\
    \    }\n    tri := []int{1, n}\n    tri = append(tri, tri[1]+tri[2]+tri[3])\n\
    \    if n%2 == 0 {\n        tri = append(tri, tri[1]+tri[2])\n    }\n    return\
    \ tri\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [2]\
    \ with length 2 [recovered]\n\tpanic: runtime error: index out of range [2] with\
    \ length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5124a0, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x5124a0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(...)\n\t/tmp/tmply9_r9x3_test.go:29\n\
    command-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmply9_r9x3_test.go:43 +0x45\n\
    testing.tRunner(0xc0001a0340, 0x527d98)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074100
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 1 {\n        return [3]int{}\n\
    \    }\n    result := make([]int, n+1)\n    if n%2 == 0 {\n        result[n] =\
    \ 1 + n/2\n    } else {\n        result[n] = tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1)\n    }\n    return result[:n+1]\n}\n\nfunc TestTri(t *testing.T) {\n  candidate\
    \ := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2,\
    \ 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n    \
    \ { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual:\
    \ candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpllcmy94z_test.go:26:16: cannot use [3]int{} (value of type [3]int) as
    type []int in return statement

    /tmp/tmpllcmy94z_test.go:32:21: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074099
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n\
    \    }\n    if n == 1 {\n        return [3]int{n}\n    }\n    first := tri(n -\
    \ 1)\n    second := tri(n - 2)\n    third := tri(n + 1)\n    return append(first,\
    \ second...)\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n  \
    \   { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpr4zsz09n_test.go:29:16:\
    \ cannot use [3]int{\u2026} (value of type [3]int) as type []int in return statement\n\
    /tmp/tmpr4zsz09n_test.go:33:5: third declared but not used\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074099
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    result := make([]int, 0, n+1)\n    if\
    \ n == 0 {\n        return result\n    }\n    last := 1\n    last += last / 2\n\
    \    for n > 1 {\n        last += last\n        n /= 2\n    }\n    result = append(result,\
    \ last)\n    for n > 1 {\n        last += last\n        n /= 2\n        result\
    \ = append(result, last)\n    }\n    return result\n}\n\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__0 (0.00s)\n\
    \        tmpdcjnh2_r_test.go:66: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]',\
    \ got '[%!s(int=2)]'\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmpdcjnh2_r_test.go:66:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=4)]'\n\
    \    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmpdcjnh2_r_test.go:66: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got\
    \ '[%!s(int=4)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmpdcjnh2_r_test.go:66:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4)]', got '[%!s(int=4)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n\
    \        tmpdcjnh2_r_test.go:66: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)\
    \ %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=4)]'\n    ---\
    \ FAIL: TestTri/test_num__5 (0.00s)\n        tmpdcjnh2_r_test.go:66: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)\
    \ %!s(int=24) %!s(int=5)]', got '[%!s(int=8)]'\n    --- FAIL: TestTri/test_num__6\
    \ (0.00s)\n        tmpdcjnh2_r_test.go:66: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]',\
    \ got '[%!s(int=8)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmpdcjnh2_r_test.go:66:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7)\
    \ %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99) %!s(int=10) %!s(int=120)\
    \ %!s(int=11)]', got '[%!s(int=16)]'\n    --- FAIL: TestTri/test_num__8 (0.00s)\n\
    \        tmpdcjnh2_r_test.go:66: expected '[%!s(int=1)]', got '[]'\n    --- FAIL:\
    \ TestTri/test_num__9 (0.00s)\n        tmpdcjnh2_r_test.go:66: expected '[%!s(int=1)\
    \ %!s(int=3)]', got '[%!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074100
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 2 {\n        return []int{}\n\
    \    }\n    return append([]int{1, 1, 3}, tri(n-1)...)\n}\n\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__0 (0.00s)\n\
    \        tmp4cgi16xb_test.go:53: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=3)]'\n\
    \    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmp4cgi16xb_test.go:53: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1)\
    \ %!s(int=3)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmp4cgi16xb_test.go:53:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=3)]'\n    --- FAIL: TestTri/test_num__3\
    \ (0.00s)\n        tmp4cgi16xb_test.go:53: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=1)\
    \ %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=3)]'\n    ---\
    \ FAIL: TestTri/test_num__4 (0.00s)\n        tmp4cgi16xb_test.go:53: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)\
    \ %!s(int=24)]', got '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1)\
    \ %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=3)]'\n    ---\
    \ FAIL: TestTri/test_num__5 (0.00s)\n        tmp4cgi16xb_test.go:53: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)\
    \ %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1)\
    \ %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=1) %!s(int=3)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n\
    \        tmp4cgi16xb_test.go:53: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!"
  timestamp: 1660074100
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 0 {\n        return []int{0, 0}\n\
    \    }\n    result := make([]int, n+1)\n    result[0] = 3\n    if n == 0 || n\
    \ == 1 {\n        return result\n    }\n    result[1] = 1 + n / 2\n    if n %\
    \ 2 == 0 {\n        result[2] = tri(n - 1) + tri(n - 2) + tri(n + 1)\n    }\n\
    \    return result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8}\
    \ },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpusos187x_test.go:35:21: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074100
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    var result []int\n    if n == 1 {\n \
    \       result = [3]int{3}\n    } else if n == 2 {\n        result = [3]int{1,\
    \ 2}\n    } else {\n        tri1 := tri(n - 1)\n        tri2 := tri(n - 2)\n \
    \       result = [3]int{tri1[0] + tri2[0], tri1[1] + tri2[1], tri1[2] + tri2[2]}\n\
    \    }\n    return result\n}\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8}\
    \ },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp8s3q0bsl_test.go:27:18:\
    \ cannot use [3]int{\u2026} (value of type [3]int) as type []int in assignment\n\
    /tmp/tmp8s3q0bsl_test.go:29:18: cannot use [3]int{\u2026} (value of type [3]int)\
    \ as type []int in assignment\n/tmp/tmp8s3q0bsl_test.go:33:18: cannot use [3]int{\u2026\
    } (value of type [3]int) as type []int in assignment\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074100
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 0 {\n        return []int{0, 0}\n\
    \    }\n\n    if n&1 == 0 {\n        return []int{1, n}\n    }\n\n    var result\
    \ []int\n    result := append(result, tri(n - 1) + tri(n - 2) + tri(n + 1))\n\n\
    \    return result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8}\
    \ },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv66r84x8_test.go:34:12: no new variables on left side of :=

    /tmp/tmpv66r84x8_test.go:34:30: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074100
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n <= 1 {\n        return nil\n   \
    \ }\n    left := tri(n - 1)\n    right := tri(n - 2)\n    left := append(left,\
    \ tri(n + 1))\n    right := append(right, right...)\n    return append(left, right...)\n\
    }\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnnwwfwbu_test.go:30:10: no new variables on left side of :=

    /tmp/tmpnnwwfwbu_test.go:30:26: cannot use tri(n + 1) (value of type []int) as
    type int in argument to append

    /tmp/tmpnnwwfwbu_test.go:31:11: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074100
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    tris := []int{0, 3, 6, 8, 10, 12, 15,\
    \ 17}\n    if n%2 == 0 {\n        return tris[n:n]\n    }\n    return tris[n:n+1]\n\
    }\n</code>\n<|/ a tags=python,fibonacci,javascript,algorithm |>\n<| c |>\nI really\
    \ like this one because it is clean. Just a heads up though that since python\
    \ is a dynamically typed language it doesn't like the way you used `n%2` on `n`.\
    \ You will need to do `n & 1` instead to make it work properly with python.\n\
    <|/ c |>\n<| c |>\n`if n%2 == 0:` is more idiomatic than `if (n&1) == 0:`.\n<|/\
    \ c |>\n<| c |>\n`if n%2 == 0:` will also work (though `n % 2 == 0` is more Pythonic)\n\
    <|/ c |>\n<| a tags=python,fibonacci,javascript,algorithm |>\n<code>\ndef fibonacci(n):\n\
    \  if n<2:\n    return n\n  a,b = 0,1\n  while a<n:\n      print(a,b)\n      a,b=b,a+b\n\
    \  print(n)\n  return n\n</code>\n<|/ a dscore=4 |>\n<| c |>\nPlease add some\
    \ explanation to your answer such that others can learn from it\n<|/ c |>\n<|\
    \ a dscore=4 |>\n<code>\nvar fib = function(n) {\n    var fib = [0, 1, 1];\n \
    \   while (n>0) {\n        fib.unshift(fib[fib.length-1]+fib[fib.length-2]);\n\
    \        n--;\n    }\n    return fib;\n}\n\nconsole.log(fib(10));\n</code>\n<|/\
    \ a tags=python,fibonacci,javascript,algorithm |>\n<| c |>\nThis is a little bit\
    \ confusing to read, but it works, and it's easy to understand. Thanks\n<|/ c\
    \ |>\n<| c |>\nThe first array element is not used, so instead of `fib[0]` it's\
    \ better to use `fib[fib.length-1]`\n<|/ c |>\n<| c |>\n`var fib = [0, 1];` should\
    \ be `var fib = [0, 1];` otherwise you will get an infinite loop.\n<|/ c |>\n\
    <| a |>\n<code>\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n  \
    \   { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpy3008wrj_test.go:31:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074099
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    x := []int{1, 3}\n    y := []int{2, 1}\n\
    \    z := []int{1, 3}\n\n    for i := 1; i <= n; i++ {\n        x = append(x,\
    \ y...)\n        if i%2 != 0 {\n            y = append(y, z...)\n            z\
    \ = append(z, z...)\n        }\n    }\n    return x\n}\n</code>\nTests:\n<code>\n\
    func TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvyr8xr6v_test.go:38:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074100
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    switch n {\n    case 0:\n        return\
    \ []int{0}\n    case 1:\n        return []int{3}\n    case 2:\n        return\
    \ []int{1, 3}\n    }\n    result := []int{}\n    for i := 0; i < n; i++ {\n  \
    \      result = append(result, i+1)\n    }\n    i := 0\n    for i < n {\n    \
    \    result = append(result, i+1)\n        i += 2\n    }\n    return result\n\
    }\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__0 (0.00s)\n\
    \        tmpi9erzk6__test.go:67: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=1) %!s(int=3)]'\n    --- FAIL:\
    \ TestTri/test_num__1 (0.00s)\n        tmpi9erzk6__test.go:67: expected '[%!s(int=1)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4) %!s(int=1) %!s(int=3)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n\
    \        tmpi9erzk6__test.go:67: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)\
    \ %!s(int=3) %!s(int=15)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)\
    \ %!s(int=5) %!s(int=1) %!s(int=3) %!s(int=5)]'\n    --- FAIL: TestTri/test_num__3\
    \ (0.00s)\n        tmpi9erzk6__test.go:67: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=1) %!s(int=3) %!s(int=5)]'\n\
    \    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmpi9erzk6__test.go:67: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)\
    \ %!s(int=24)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)\
    \ %!s(int=6) %!s(int=7) %!s(int=1) %!s(int=3) %!s(int=5) %!s(int=7)]'\n    ---\
    \ FAIL: TestTri/test_num__5 (0.00s)\n        tmpi9erzk6__test.go:67: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)\
    \ %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)\
    \ %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=1) %!s(int=3) %!s(int=5)\
    \ %!s(int=7)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmpi9erzk6__test.go:67:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)\
    \ %!s(int=1) %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=9)]'\n    --- FAIL: TestTri/test_num__7\
    \ (0.00s)\n        tmpi9erzk6__test.go:67: expected '[%!"
  timestamp: 1660074101
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    s := make([]int, n+1)\n    s[0] = 3\n\
    \    for i := 1; i < n; i++ {\n        if i%2 == 0 {\n            s[i] = s[i-1]\
    \ + s[i-2]\n        } else {\n            s[i] = s[i-1] + s[i-2] + s[i+1]\n  \
    \      }\n    }\n    return s\n}\n\nfunc TestTri(t *testing.T) {\n  candidate\
    \ := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2,\
    \ 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n    \
    \ { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual:\
    \ candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [-1]\
    \ [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine 6\
    \ [running]:\ntesting.tRunner.func1.2({0x5139e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5139e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(...)\n\t/tmp/tmphcyz0506_test.go:31\n\
    command-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmphcyz0506_test.go:44 +0xc6c\n\
    testing.tRunner(0xc0001a0340, 0x5292f8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074101
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n <= 0 {\n        return nil\n   \
    \ }\n    // Tribonacci sequence\n    if n%2 == 0 {\n        // Even numbers\n\
    \        if n == 1 {\n            return []int{3, 2}\n        } else {\n     \
    \       return append(append([]int{1, 3}, append(tri(n - 1), tri(n - 2), tri(n\
    \ + 1))...), 8)\n        }\n    } else {\n        // Odd numbers\n        if n\
    \ == 1 {\n            return []int{1, 3, 6}\n        } else {\n            return\
    \ append(append([]int{1, 3, 6}, append(tri(n - 1), tri(n - 2), tri(n + 1))...),\
    \ 8)\n        }\n    }\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8}\
    \ },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp082f4jj_test.go:34:66: cannot use tri(n - 2) (value of type []int) as
    type int in argument to append

    /tmp/tmpp082f4jj_test.go:34:78: cannot use tri(n + 1) (value of type []int) as
    type int in argument to append

    /tmp/tmpp082f4jj_test.go:41:69: cannot use tri(n - 2) (value of type []int) as
    type int in argument to append

    /tmp/tmpp082f4jj_test.go:41:81: cannot use tri(n + 1) (value of type []int) as
    type int in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074101
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    var result []int\n    if n%2 == 0 {\n\
    \        result = append(result, tri(n-1))\n        result = append(result, tri(n-2))\n\
    \        result = append(result, tri(n+1))\n    } else {\n        result = append(result,\
    \ tri(n-1))\n        result = append(result, tri(n-2))\n        result = append(result,\
    \ tri(n-1))\n    }\n    return result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate\
    \ := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2,\
    \ 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n    \
    \ { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual:\
    \ candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuszdd8bw_test.go:27:33: cannot use tri(n - 1) (value of type []int) as
    type int in argument to append

    /tmp/tmpuszdd8bw_test.go:28:33: cannot use tri(n - 2) (value of type []int) as
    type int in argument to append

    /tmp/tmpuszdd8bw_test.go:29:33: cannot use tri(n + 1) (value of type []int) as
    type int in argument to append

    /tmp/tmpuszdd8bw_test.go:31:33: cannot use tri(n - 1) (value of type []int) as
    type int in argument to append

    /tmp/tmpuszdd8bw_test.go:32:33: cannot use tri(n - 2) (value of type []int) as
    type int in argument to append

    /tmp/tmpuszdd8bw_test.go:33:33: cannot use tri(n - 1) (value of type []int) as
    type int in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074101
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    // Your code here\n    return []int{1,\
    \ 2, 3}\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__0 (0.00s)\n\
    \        tmpr0lryweq_test.go:51: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestTri/test_num__1\
    \ (0.00s)\n        tmpr0lryweq_test.go:51: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL:\
    \ TestTri/test_num__2 (0.00s)\n        tmpr0lryweq_test.go:51: expected '[%!s(int=1)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=1)\
    \ %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n       \
    \ tmpr0lryweq_test.go:51: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)\
    \ %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)]'\n\
    \    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmpr0lryweq_test.go:51: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)\
    \ %!s(int=24)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestTri/test_num__5\
    \ (0.00s)\n        tmpr0lryweq_test.go:51: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1)\
    \ %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n       \
    \ tmpr0lryweq_test.go:51: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)\
    \ %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got\
    \ '[%!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n\
    \        tmpr0lryweq_test.go:51: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)\
    \ %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6)\
    \ %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99)\
    \ %!s(int=10) %!s(int=120) %!s(int=11)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)]'\n\
    \    --- FAIL: TestTri/test_num__8 (0.00s)\n        tmpr0lryweq_test.go:51: expected\
    \ '[%!s(int=1)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestTri/test_num__9\
    \ (0.00s)\n        tmpr0lrywe"
  timestamp: 1660074101
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 0 {\n        return []int{}\n\
    \    }\n    result := []int{}\n    tri := func(i int) {\n        if i == 0 ||\
    \ i == 1 {\n            result := append(result, i)\n        } else {\n      \
    \      tri(i)\n            tri(i+1)\n            result := append(result, i+2)\n\
    \        }\n    }\n    tri(0)\n    return result\n}\n\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoudqfnit_test.go:31:13: result declared but not used

    /tmp/tmpoudqfnit_test.go:35:13: result declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074101
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    return make([]int, n + 1) // return an\
    \ slice with n item\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8}\
    \ },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__0 (0.00s)\n\
    \        tmpz6g_hwis_test.go:50: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestTri/test_num__1\
    \ (0.00s)\n        tmpz6g_hwis_test.go:50: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmpz6g_hwis_test.go:50: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got\
    \ '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    ---\
    \ FAIL: TestTri/test_num__3 (0.00s)\n        tmpz6g_hwis_test.go:50: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmpz6g_hwis_test.go:50: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)\
    \ %!s(int=24)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n\
    \        tmpz6g_hwis_test.go:50: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)\
    \ %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmpz6g_hwis_test.go:50:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmpz6g_hwis_test.go:50:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7)\
    \ %!s(int=63) %!s(int=8) %!s(int="
  timestamp: 1660074101
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    ans := make([]int, n+1)\n    ans[0] =\
    \ 3\n    for i := 1; i <= n; i++ {\n        ans[i] = ans[i-1] + ans[i-2] + ans[i+2]\n\
    \    }\n    return ans\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8}\
    \ },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [-1]\
    \ [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine 6\
    \ [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(...)\n\t/tmp/tmpq97exwfc_test.go:28\n\
    command-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpq97exwfc_test.go:40 +0x42c\n\
    testing.tRunner(0xc0001a01a0, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074101
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 2 {\n        return []int{}\n\
    \    }\n    return []int{\n        1,\n        tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1),\n    }\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n  \
    \   { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjjtsof65_test.go:30:9: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074101
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n%2 == 0 {\n        return []int{1,\
    \ n, n+1}\n    }\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n}\n\nfunc TestTri(t\
    \ *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1,\
    \ 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3,\
    \ 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n\
    \     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n \
    \    { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n\
    \     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35}\
    \ },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpitwlxn9o_test.go:28:12: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074101
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 1 {\n        return []int{3}\n\
    \    } else if n == 2 {\n        return []int{1, 3}\n    } else {\n        result\
    \ := []int{0, 1, 1}\n        for i := 2; i < n; i++ {\n            result = append(result,\
    \ result[i-2] + result[i-1])\n        }\n        return result\n    }\n}\n\nfunc\
    \ TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__0 (0.00s)\n\
    \        tmpmjonxohw_test.go:60: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]',\
    \ got '[%!s(int=0) %!s(int=1) %!s(int=1) %!s(int=1)]'\n    --- FAIL: TestTri/test_num__1\
    \ (0.00s)\n        tmpmjonxohw_test.go:60: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3)]', got '[%!s(int=0) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=2)]'\n\
    \    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmpmjonxohw_test.go:60: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got\
    \ '[%!s(int=0) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=2)]'\n    ---\
    \ FAIL: TestTri/test_num__3 (0.00s)\n        tmpmjonxohw_test.go:60: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]',\
    \ got '[%!s(int=0) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=2) %!s(int=3)]'\n\
    \    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmpmjonxohw_test.go:60: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)\
    \ %!s(int=24)]', got '[%!s(int=0) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=2)\
    \ %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n\
    \        tmpmjonxohw_test.go:60: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)\
    \ %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=0)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=2) %!s(int=3) %!s(int=4)\
    \ %!s(int=5)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmpmjonxohw_test.go:60:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=0) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)\
    \ %!s(int=7)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmpmjonxohw_test.go:60:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7)\
    \ %!s(int=63) %!s(int=8) %!s(int="
  timestamp: 1660074102
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n<2 {\n        return nil\n    }\n\
    \    if n%2==0{\n        return append([]int{1}, tri(n-2)...)\n    }\n    return\
    \ append(tri(n-2), tri(n-1)...)\n}\n\nfunc TestTri(t *testing.T) {\n  candidate\
    \ := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2,\
    \ 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n    \
    \ { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual:\
    \ candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__0 (0.00s)\n\
    \        tmpr7mf6z66_test.go:56: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmpr7mf6z66_test.go:56:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmpr7mf6z66_test.go:56:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=1)]'\n    --- FAIL: TestTri/test_num__3\
    \ (0.00s)\n        tmpr7mf6z66_test.go:56: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmpr7mf6z66_test.go:56:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4) %!s(int=24)]', got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n       \
    \ tmpr7mf6z66_test.go:56: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)\
    \ %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n\
    \        tmpr7mf6z66_test.go:56: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)\
    \ %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got\
    \ '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n\
    \        tmpr7mf6z66_test.go:56: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)\
    \ %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6)\
    \ %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99)\
    \ %!s(int=10) %!s(int=120) %!s(int=11)]', got '[%!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]'\n\
    \    --- FAIL: TestTri/test_num__8 ("
  timestamp: 1660074102
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 1 {\n        return []int{3}\n\
    \    }\n    r := make([]int, n+1)\n    r[0] = 1 + n / 2\n    switch n % 2 {\n\
    \    case 0:\n        r[1] = r[1] + r[1] + r[2]\n    case 1:\n        r[1] = r[1]\
    \ + r[2]\n    case 2:\n        r[0] = r[1] + r[1]\n    }\n    return r\n}\n\n\
    func TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [1]\
    \ with length 1 [recovered]\n\tpanic: runtime error: index out of range [1] with\
    \ length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(...)\n\t/tmp/tmpnlztsxff_test.go:32\n\
    command-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpnlztsxff_test.go:56 +0x189\n\
    testing.tRunner(0xc0001924e0, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074102
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    // Write code here\n    if n < 1 {\n\
    \        return []int{0, 0, 0}\n    }\n    tri := []int{}\n    tri = append(tri,\
    \ 3)\n    tri = append(tri, tri[n-1])\n    tri = append(tri, tri[n-2]+tri[n-1])\n\
    \    return tri\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n  \
    \   { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [2]\
    \ with length 1 [recovered]\n\tpanic: runtime error: index out of range [2] with\
    \ length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5134a0, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x5134a0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(...)\n\t/tmp/tmpofslt4sf_test.go:31\n\
    command-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpofslt4sf_test.go:43 +0x9b2\n\
    testing.tRunner(0xc0001a0340, 0x528d98)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074102
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 2 {\n        return []int{1}\n\
    \    }\n    return tri2(int(n-2))\n}\n\nfunc TestTri(t *testing.T) {\n  candidate\
    \ := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2,\
    \ 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n    \
    \ { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual:\
    \ candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxjnsj59s_test.go:28:12: undefined: tri2

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074102
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 || n == 1 {\n        return\
    \ []int{n}\n    }\n    return append(tri(n-1), tri(n-2), tri(n+1))\n}\n\nfunc\
    \ TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuo6is7qg_test.go:28:29: cannot use tri(n - 2) (value of type []int) as
    type int in argument to append

    /tmp/tmpuo6is7qg_test.go:28:39: cannot use tri(n + 1) (value of type []int) as
    type int in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074101
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    // Write your code here.\n    return\
    \ []int{1, n - 1 + n/2, n/2 + n + 1, n}\n}\n</code>\n<|/ a tags=go,recursion |>\n\
    <| a dscore=1 |>\n<code>\npackage main\n\nimport (\n    \"fmt\"\n)\n\nfunc TestTri(t\
    \ *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1,\
    \ 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3,\
    \ 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n\
    \     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n \
    \    { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n\
    \     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35}\
    \ },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3xhe77yq_test.go:28:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074101
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 3 {\n        return nil\n    }\n\
    \    if n == 0 {\n        return []int{0}\n    }\n    if n == 1 {\n        return\
    \ []int{1}\n    }\n    i := 1\n    first := []int{0, 1}\n    second := []int{2,\
    \ 1}\n    third := []int{3, 2}\n    fourth := []int{8, 1}\n    last := []int{0,\
    \ 1}\n    for j := 0; j < n; j++ {\n        first = append(first, second[j])\n\
    \        second = append(second, third[j])\n        third = append(third, fourth[j])\n\
    \        fourth = append(fourth, last[j])\n        last = append(last, first[j])\n\
    \    }\n    return first\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8}\
    \ },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7t9msg61_test.go:34:5: i declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074102
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 { return nil }\n    if n ==\
    \ 1 { return [3]int{n} }\n    l := tri(n - 1) + tri(n - 2) + tri(n + 1)\n    l\
    \ := append(l, 3)\n    return l\n}\n\nfunc TestTri(t *testing.T) {\n  candidate\
    \ := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2,\
    \ 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n    \
    \ { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual:\
    \ candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpceuditua_test.go:26:24:\
    \ cannot use [3]int{\u2026} (value of type [3]int) as type []int in return statement\n\
    /tmp/tmpceuditua_test.go:27:10: invalid operation: operator + not defined on tri(n\
    \ - 1) (value of type []int)\n/tmp/tmpceuditua_test.go:28:7: no new variables\
    \ on left side of :=\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074102
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    list := make([]int, n+1)\n    list[0],\
    \ list[1] = list[1], list[0]\n    for i := 2; i < n+1; i++ {\n        list[i]\
    \ = list[i-2] + list[i-1]\n    }\n    return list\n}\n\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [1]\
    \ with length 1 [recovered]\n\tpanic: runtime error: index out of range [1] with\
    \ length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(...)\n\t/tmp/tmp5qb9f5oc_test.go:26\n\
    command-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp5qb9f5oc_test.go:48 +0x248\n\
    testing.tRunner(0xc0001a0340, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074102
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    triList := make([]int, n+1)\n    triList[0]\
    \ = 3\n    triList[1] = 1\n    if n%2 != 0 {\n        for i := 2; i <= n; i =\
    \ i + 2 {\n            triList[i] = triList[i-1] + triList[i-2] + triList[i+1]\n\
    \        }\n    } else {\n        for i := 3; i <= n; i = i + 2 {\n          \
    \  triList[i] = triList[i-1] + triList[i-2] + triList[i+1]\n        }\n    }\n\
    \    return triList[n:]\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8}\
    \ },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [1]\
    \ with length 1 [recovered]\n\tpanic: runtime error: index out of range [1] with\
    \ length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5139e0, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x5139e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x0)\n\t/tmp/tmphiqvabyz_test.go:27\
    \ +0x16f\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmphiqvabyz_test.go:55\
    \ +0x195\ntesting.tRunner(0xc0001a01a0, 0x5292f8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074102
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    // write your code here\n    if n ==\
    \ 0 { return []int{0} }\n    if n == 1 { return []int{3} }\n\n    l := []int{n}\n\
    \    x := tri(n-1)\n    y = tri(n-2)\n    for _, v := range x {\n        l = append(l,\
    \ v)\n    }\n    for _, v := range y {\n        l = append(l, v)\n    }\n    return\
    \ l\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp01tkx1q4_test.go:31:5: undefined: y

    /tmp/tmp01tkx1q4_test.go:35:23: undefined: y

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074102
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    var list []int\n    switch n%2 {\n  \
    \  case 0: list = append(list, 3) // 3 is even, skip it\n    case 1: list = append(list,\
    \ 1) // 1 is odd, add it\n    default: // n is odd, we need to add 2 numbers to\
    \ get 3\n        var t1, t2 int\n        if n >= 3 {\n            t1 = tri(n -\
    \ 1)\n            t2 = tri(n - 2)\n        } else {\n            t1 = 1\n    \
    \        t2 = 2\n        }\n        t3 = t1 + t2\n        list = append(list,\
    \ t3) // append it to list\n    }\n    return list\n}\n\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpybrsw18b_test.go:32:18: cannot use tri(n - 1) (value of type []int) as
    type int in assignment

    /tmp/tmpybrsw18b_test.go:33:18: cannot use tri(n - 2) (value of type []int) as
    type int in assignment

    /tmp/tmpybrsw18b_test.go:38:9: undefined: t3

    /tmp/tmpybrsw18b_test.go:39:29: undefined: t3

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074102
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    tri := []int{}\n    if n == 1 {\n   \
    \     return tri\n    }\n    for i := 0; i < n; i++ {\n        tri = append(tri,\
    \ 3)\n        tri = append(tri, 1+(n/2)*2)\n    }\n    for i := 1; i < n; i++\
    \ {\n        tri = append(tri, tri[len-1]+tri[len-2])\n    }\n    return tri\n\
    }\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyopgdx3y_test.go:34:31: len (built-in) must be called

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074103
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    var numbers []int\n    numbers = append(numbers,\
    \ 3)\n    if n >= 2 {\n        numbers = append(numbers, 1)\n        if n%2 ==\
    \ 0 {\n            numbers = append(numbers, 3)\n        } else {\n          \
    \  numbers = append(numbers, 1+(n+1)/2)\n        }\n    }\n    return numbers\n\
    }\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__0 (0.00s)\n\
    \        tmpk64n75mu_test.go:60: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]',\
    \ got '[%!s(int=3) %!s(int=1) %!s(int=3)]'\n    --- FAIL: TestTri/test_num__1\
    \ (0.00s)\n        tmpk64n75mu_test.go:60: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3)]', got '[%!s(int=3) %!s(int=1) %!s(int=3)]'\n    --- FAIL:\
    \ TestTri/test_num__2 (0.00s)\n        tmpk64n75mu_test.go:60: expected '[%!s(int=1)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=3)\
    \ %!s(int=1) %!s(int=4)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n       \
    \ tmpk64n75mu_test.go:60: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)\
    \ %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=3) %!s(int=1) %!s(int=3)]'\n\
    \    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmpk64n75mu_test.go:60: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)\
    \ %!s(int=24)]', got '[%!s(int=3) %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestTri/test_num__5\
    \ (0.00s)\n        tmpk64n75mu_test.go:60: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=3)\
    \ %!s(int=1) %!s(int=3)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n       \
    \ tmpk64n75mu_test.go:60: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)\
    \ %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got\
    \ '[%!s(int=3) %!s(int=1) %!s(int=6)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n\
    \        tmpk64n75mu_test.go:60: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)\
    \ %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6)\
    \ %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99)\
    \ %!s(int=10) %!s(int=120) %!s(int=11)]', got '[%!s(int=3) %!s(int=1) %!s(int=3)]'\n\
    \    --- FAIL: TestTri/test_num__8 (0.00s)\n        tmpk64n75mu_test.go:60: expected\
    \ '[%!s(int=1)]', got '[%!s(int=3)]'\n    --- FAIL: TestTri/test_num__9 (0.00s)\n\
    \        tmpk64n75mu_test.go:60: expected"
  timestamp: 1660074103
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    seq := []int{}\n    if n == 1 {\n   \
    \     seq = append(seq, 3)\n    } else {\n        seq := append(seq, tri(n - 1)\
    \ + tri(n - 2))\n        seq = append(seq, tri(n + 1))\n    }\n    return seq\n\
    }\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpun4_pjg4_test.go:29:28: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    /tmp/tmpun4_pjg4_test.go:30:27: cannot use tri(n + 1) (value of type []int) as
    type int in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074103
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 3 {\n        return []int{1, n}\n\
    \    }\n    s := [3]int{}\n    s[0] = n\n    for i := 0; i < len(s)-1; i++ {\n\
    \        s[i+1] = s[i] + s[i+1] + s[i]\n    }\n    return s[1:]\n}\n\nfunc TestTri(t\
    \ *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1,\
    \ 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3,\
    \ 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n\
    \     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n \
    \    { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n\
    \     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35}\
    \ },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__0 (0.00s)\n\
    \        tmp4vn2tpgk_test.go:58: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]',\
    \ got '[%!s(int=6) %!s(int=12)]'\n    --- FAIL: TestTri/test_num__1 (0.00s)\n\
    \        tmp4vn2tpgk_test.go:58: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)\
    \ %!s(int=3)]', got '[%!s(int=8) %!s(int=16)]'\n    --- FAIL: TestTri/test_num__2\
    \ (0.00s)\n        tmp4vn2tpgk_test.go:58: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=10) %!s(int=20)]'\n    ---\
    \ FAIL: TestTri/test_num__3 (0.00s)\n        tmp4vn2tpgk_test.go:58: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]',\
    \ got '[%!s(int=12) %!s(int=24)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n\
    \        tmp4vn2tpgk_test.go:58: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)\
    \ %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=14) %!s(int=28)]'\n\
    \    --- FAIL: TestTri/test_num__5 (0.00s)\n        tmp4vn2tpgk_test.go:58: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)\
    \ %!s(int=24) %!s(int=5)]', got '[%!s(int=16) %!s(int=32)]'\n    --- FAIL: TestTri/test_num__6\
    \ (0.00s)\n        tmp4vn2tpgk_test.go:58: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]',\
    \ got '[%!s(int=18) %!s(int=36)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n\
    \        tmp4vn2tpgk_test.go:58: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)\
    \ %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6)\
    \ %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99)\
    \ %!s(int=10) %!s(int=120) %!s(int=11)]', got '[%!s(int=40) %!s(int=80)]'\n  \
    \  --- FAIL: TestTri/test_num__8 (0.00s)\n        tmp4vn2tpgk_test.go:58: expected\
    \ '[%!s(int=1)]', got '[%!s(int=1) %!s(int=0)]'\n    --- FAIL: TestTri/test_num__9\
    \ (0.00s)\n        tmp4vn2tpgk_test.go:58: expected '[%!s(int=1) %!s(int=3)]',\
    \ got '[%!s(int=1) %!s(int=1)]'\nFAIL\n"
  timestamp: 1660074103
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    return tri_tribonacci_array[n]\n}\n\n\
    func TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4jbvl4c8_test.go:25:12: undefined: tri_tribonacci_array

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074103
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n\
    \    }\n    list := make([]int, n+1)\n    if n == 1 || n == 2 {\n        list[0]\
    \ = 1 \n    } else if n == 3 {\n        list[1] = 3 \n    } else if n == 4 {\n\
    \        list[2] = 5 \n    } else {\n        list[3] = 1 + n/2 + n%2 \n    }\n\
    \    return list\n}\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n  \
    \   { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__0 (0.00s)\n\
    \        tmpvlkgkzeh_test.go:62: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]',\
    \ got '[%!s(int=0) %!s(int=3) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestTri/test_num__1\
    \ (0.00s)\n        tmpvlkgkzeh_test.go:62: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3)]', got '[%!s(int=0) %!s(int=0) %!s(int=5) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmpvlkgkzeh_test.go:62: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got\
    \ '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=4) %!s(int=0) %!s(int=0)]'\n    ---\
    \ FAIL: TestTri/test_num__3 (0.00s)\n        tmpvlkgkzeh_test.go:62: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=4) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmpvlkgkzeh_test.go:62: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)\
    \ %!s(int=24)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=5) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n\
    \        tmpvlkgkzeh_test.go:62: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)\
    \ %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=5) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmpvlkgkzeh_test.go:62:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=6) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmpvlkgkzeh_test.go:62:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7)\
    \ %!s(int=63) %!s(int=8) %!s(int="
  timestamp: 1660074104
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    result := make([]int, n+1)\n    if n\
    \ < 2 {\n        return nil\n    }\n    base := 1\n    n -= 2\n    for i := 0;\
    \ i < n; i++ {\n        base += 2\n        result[i+1] = base\n    }\n    return\
    \ result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__0 (0.00s)\n\
    \        tmp9vryiy63_test.go:60: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]',\
    \ got '[%!s(int=0) %!s(int=3) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestTri/test_num__1\
    \ (0.00s)\n        tmp9vryiy63_test.go:60: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3)]', got '[%!s(int=0) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmp9vryiy63_test.go:60: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got\
    \ '[%!s(int=0) %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=0) %!s(int=0)]'\n    ---\
    \ FAIL: TestTri/test_num__3 (0.00s)\n        tmp9vryiy63_test.go:60: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]',\
    \ got '[%!s(int=0) %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=9) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmp9vryiy63_test.go:60: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)\
    \ %!s(int=24)]', got '[%!s(int=0) %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=9)\
    \ %!s(int=11) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n\
    \        tmp9vryiy63_test.go:60: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)\
    \ %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=0)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmp9vryiy63_test.go:60:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=0) %!s(int=3)\
    \ %!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmp9vryiy63_test.go:60:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7)\
    \ %!s(int=63) %!s(int=8) %!"
  timestamp: 1660074104
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    switch {\n    case n == 0: return nil\n\
    \    case n == 1: return []int{0}\n    case n == 2: return []int{0, 1}\n    default:\
    \ \n        t := tri(n - 1) + tri(n - 2) + tri(n + 1)\n        return append(t,\
    \ n)\n    }\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n  \
    \   { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdn4z3vp2_test.go:30:14: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074103
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    // base case\n    if n < 2 {\n      \
    \  return []int{1, n}\n    }\n    // recursive case\n    firstN1Nums := tri(n\
    \ - 1)\n    secondN1Nums := tri(n - 2)\n    thirdN1Nums := append([]int{firstN1Nums[len(firstN1Nums)-1]\
    \ + secondN1Nums[len(secondN1Nums)-1]}, firstN1Nums...)\n    return thirdN1Nums\n\
    }\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__0 (0.00s)\n\
    \        tmpmlkvgl07_test.go:58: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]',\
    \ got '[%!s(int=2) %!s(int=1) %!s(int=1) %!s(int=1)]'\n    --- FAIL: TestTri/test_num__1\
    \ (0.00s)\n        tmpmlkvgl07_test.go:58: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3)]', got '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1) %!s(int=1)]'\n\
    \    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmpmlkvgl07_test.go:58: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got\
    \ '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1) %!s(int=1)]'\n    ---\
    \ FAIL: TestTri/test_num__3 (0.00s)\n        tmpmlkvgl07_test.go:58: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]',\
    \ got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1) %!s(int=1)]'\n\
    \    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmpmlkvgl07_test.go:58: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)\
    \ %!s(int=24)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)\
    \ %!s(int=1) %!s(int=1) %!s(int=1)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n\
    \        tmpmlkvgl07_test.go:58: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)\
    \ %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmpmlkvgl07_test.go:58:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=2) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmpmlkvgl07_test.go:58:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7)\
    \ %!s(int=63) %!s(int=8) %!s(int="
  timestamp: 1660074104
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    list := make([]int, n+1)\n    if n <=\
    \ 1 {\n        return list\n    }\n    list[0] = list[1] = 3\n    if n&1 != 0\
    \ {\n        list[n/2] = list[n/2] + 1\n        list[n] = list[n/2] + list[n/2]\
    \ + list[n/2]\n    } else {\n        list[n] = 1 + list[n/2]\n    }\n    return\
    \ list\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp4n0k2xbs_test.go:29:23: expected ''=='', found ''=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074103
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 0 {\n        return []int{}\n\
    \    }\n    switch {\n    case n == 1: return []int{1}\n    case n == 2: return\
    \ []int{1, 2}\n    case n % 2 == 0: return tri(n - 1) + tri(n - 2) + tri(n + 1)\n\
    \    default: return tri(n - 1) + tri(n + 1) + tri(n + 2)\n    }\n}\n\nfunc TestTri(t\
    \ *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1,\
    \ 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3,\
    \ 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n\
    \     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n \
    \    { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n\
    \     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35}\
    \ },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpit4v8g6h_test.go:31:29: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    /tmp/tmpit4v8g6h_test.go:32:21: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074104
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    var ans []int\n    ans = append(ans,\
    \ 3)\n    if n%2 == 0 {\n        for i:=0; i<len(ans)-1; i++ {\n            ans\
    \ = append(ans, i+1)\n            ans = append(ans, i+2+len(ans))\n        }\n\
    \    } else {\n        for i:=0; i<len(ans)-1; i++ {\n            ans = append(ans,\
    \ i+1)\n            ans = append(ans, i+2+len(ans))\n        }\n    }\n    return\
    \ ans\n}\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__0 (0.00s)\n\
    \        tmp8rrzb3qx_test.go:62: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]',\
    \ got '[%!s(int=3)]'\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmp8rrzb3qx_test.go:62:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=3)]'\n\
    \    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmp8rrzb3qx_test.go:62: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got\
    \ '[%!s(int=3)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmp8rrzb3qx_test.go:62:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4)]', got '[%!s(int=3)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n\
    \        tmp8rrzb3qx_test.go:62: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)\
    \ %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=3)]'\n    ---\
    \ FAIL: TestTri/test_num__5 (0.00s)\n        tmp8rrzb3qx_test.go:62: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)\
    \ %!s(int=24) %!s(int=5)]', got '[%!s(int=3)]'\n    --- FAIL: TestTri/test_num__6\
    \ (0.00s)\n        tmp8rrzb3qx_test.go:62: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]',\
    \ got '[%!s(int=3)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmp8rrzb3qx_test.go:62:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7)\
    \ %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99) %!s(int=10) %!s(int=120)\
    \ %!s(int=11)]', got '[%!s(int=3)]'\n    --- FAIL: TestTri/test_num__8 (0.00s)\n\
    \        tmp8rrzb3qx_test.go:62: expected '[%!s(int=1)]', got '[%!s(int=3)]'\n\
    \    --- FAIL: TestTri/test_num__9 (0.00s)\n        tmp8rrzb3qx_test.go:62: expected\
    \ '[%!s(int=1) %!s(int=3)]', got '[%!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074104
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    return triHelper([]int{}, 0, n)\n}\n\n\
    func TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_mt1_31c_test.go:25:12: undefined: triHelper

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074104
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 3 {\n        return []int{n}\n\
    \    }\n    first := tri(n - 1)\n    second := tri(n - 2)\n    last := tri(n -\
    \ 1) + tri(n - 2) + tri(n - 3)\n    return append(first, second, last)\n}\n\n\
    func TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzrjjhpqi_test.go:30:13: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074104
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 3 {\n        return []int{1, n}\n\
    \    }\n    result := make([]int, n+2)\n    n -= 2\n    result[0] = n\n    result[1]\
    \ = 1\n    for i := 2; i < n+1; i++ {\n        result[i] = result[i-2] + result[i-1]\n\
    \    }\n    return result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8}\
    \ },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__0 (0.00s)\n\
    \        tmpz_gorc_n_test.go:60: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestTri/test_num__1 (0.00s)\n        tmpz_gorc_n_test.go:60: expected '[%!s(int=1)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=2) %!s(int=1) %!s(int=3)\
    \ %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n\
    \        tmpz_gorc_n_test.go:60: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)\
    \ %!s(int=3) %!s(int=15)]', got '[%!s(int=3) %!s(int=1) %!s(int=4) %!s(int=5)\
    \ %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n\
    \        tmpz_gorc_n_test.go:60: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)\
    \ %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=4) %!s(int=1) %!s(int=5)\
    \ %!s(int=6) %!s(int=11) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestTri/test_num__4\
    \ (0.00s)\n        tmpz_gorc_n_test.go:60: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=5)\
    \ %!s(int=1) %!s(int=6) %!s(int=7) %!s(int=13) %!s(int=20) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n        tmpz_gorc_n_test.go:60:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=6) %!s(int=1) %!s(int=7)\
    \ %!s(int=8) %!s(int=15) %!s(int=23) %!s(int=38) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmpz_gorc_n_test.go:60: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)\
    \ %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=7) %!s(int=1) %!s(int=8)\
    \ %!s(int=9) %!s(int=17) %!s(int=26) %!s(int=43) %!s(int=69) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmpz_gorc_n_test.go:60:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4) %!s(int=24) %"
  timestamp: 1660074104
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n <= 1 {\n        return []int{1,\
    \ n}\n    }\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n}\n\nfunc TestTri(t\
    \ *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1,\
    \ 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3,\
    \ 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n\
    \     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n \
    \    { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n\
    \     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35}\
    \ },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5__pndk6_test.go:28:12: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074104
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 0 {\n        return []int{-1,\
    \ 0, 1, 0}\n    }\n    if n == 0 {\n        return []int{1}\n    }\n    return\
    \ fibonacci(n) + fibonacci(n-1) + fibonacci(n-2)\n}\n\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvkq7cclu_test.go:31:12: undefined: fibonacci

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074104
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n <= 1 {\n        return nil\n   \
    \ }\n    result := []int{3}\n    for n > 3 {\n        result = append(result,\
    \ result[0]+result[1]+result[2])\n        n -= 4\n    }\n    return result\n}\n\
    \nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [1]\
    \ with length 1 [recovered]\n\tpanic: runtime error: index out of range [1] with\
    \ length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5139e0, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x5139e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(...)\n\t/tmp/tmpsrhpzwwl_test.go:30\n\
    command-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpsrhpzwwl_test.go:44 +0xe8f\n\
    testing.tRunner(0xc0001a01a0, 0x5292f8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074104
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    x := []int{}\n    if n == 0 {\n     \
    \   return x\n    }\n    x.Push(1)\n    x.Push(n/2+1)\n    if n%2 == 0 {\n   \
    \     x.Push(tri(n-1)+tri(n-2))\n    } else {\n        x.Push(tri(n-1)+tri(n-2)+tri(n+1))\n\
    \    }\n    return x\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8}\
    \ },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn89375rw_test.go:29:7: x.Push undefined (type []int has no field or method
    Push)

    /tmp/tmpn89375rw_test.go:30:7: x.Push undefined (type []int has no field or method
    Push)

    /tmp/tmpn89375rw_test.go:32:11: x.Push undefined (type []int has no field or method
    Push)

    /tmp/tmpn89375rw_test.go:32:16: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    /tmp/tmpn89375rw_test.go:34:11: x.Push undefined (type []int has no field or method
    Push)

    /tmp/tmpn89375rw_test.go:34:16: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074104
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    result := make([]int, n+1)\n    result[0]\
    \ = 3\n    for i := 1; i <= n; i++ {\n        result[i+1] = result[i-2] + result[i-1]\n\
    \    }\n    return result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8}\
    \ },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [-1]\
    \ [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine 6\
    \ [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(...)\n\t/tmp/tmpg3d8rhlh_test.go:28\n\
    command-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpg3d8rhlh_test.go:40 +0x42c\n\
    testing.tRunner(0xc0001924e0, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074105
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    result := make([]int, n + 1) // 1 ~ n\n\
    \    result[0], result[1] = 2, 3\n    for i := 2; i <= n; i++ {\n        if i\
    \ %2 == 0 {\n            result[i] = result[i-2] + result[i-1]\n        } else\
    \ {\n            result[i] = result[i-2] + result[i-1] + result[i]\n        }\n\
    \    }\n    return result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8}\
    \ },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [1]\
    \ with length 1 [recovered]\n\tpanic: runtime error: index out of range [1] with\
    \ length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(...)\n\t/tmp/tmp3udfzbzo_test.go:26\n\
    command-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp3udfzbzo_test.go:52 +0x339\n\
    testing.tRunner(0xc0001964e0, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074105
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 1 {\n        return []int{0, 0}\n\
    \    }\n    s := make([]int, n+1)\n    s[0] = 3\n    for i := 2; i <= n; i++ {\n\
    \        s[i] = s[i-1] + s[i-2] + s[i+2]\n    }\n    return s\n}\n\nfunc TestTri(t\
    \ *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1,\
    \ 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3,\
    \ 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n\
    \     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n \
    \    { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n\
    \     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35}\
    \ },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 4\n\ngoroutine 34 [running]:\ntesting.tRunner.func1.2({0x5139e0, 0xc0001d8000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x5139e0,\
    \ 0xc0001d8000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(...)\n\t/tmp/tmp44_6zum7_test.go:31\n\
    command-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp44_6zum7_test.go:43 +0xacc\n\
    testing.tRunner(0xc0001991e0, 0x5292f8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074105
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    tri_list := []int{}\n    if n == 0 {\n\
    \        tri_list = append(tri_list, 3)\n    } else if n%2 == 0 {\n        tri_list\
    \ = append(tri_list, tri(n-1))\n        tri_list = append(tri_list, tri(n-2))\n\
    \        tri_list = append(tri_list, tri(n+1))\n    } else {\n        tri_list\
    \ = append(tri_list, tri(n - 1))\n        tri_list = append(tri_list, tri(n -\
    \ 2))\n        tri_list = append(tri_list, tri(n + 1))\n        tri_list = append(tri_list,\
    \ tri(n + 2))\n    }\n    return tri_list\n}\nfunc TestTri(t *testing.T) {\n \
    \ candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpknvtzc0o_test.go:29:37: cannot use tri(n - 1) (value of type []int) as
    type int in argument to append

    /tmp/tmpknvtzc0o_test.go:30:37: cannot use tri(n - 2) (value of type []int) as
    type int in argument to append

    /tmp/tmpknvtzc0o_test.go:31:37: cannot use tri(n + 1) (value of type []int) as
    type int in argument to append

    /tmp/tmpknvtzc0o_test.go:33:37: cannot use tri(n - 1) (value of type []int) as
    type int in argument to append

    /tmp/tmpknvtzc0o_test.go:34:37: cannot use tri(n - 2) (value of type []int) as
    type int in argument to append

    /tmp/tmpknvtzc0o_test.go:35:37: cannot use tri(n + 1) (value of type []int) as
    type int in argument to append

    /tmp/tmpknvtzc0o_test.go:36:37: cannot use tri(n + 2) (value of type []int) as
    type int in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074104
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 2 {\n        return []int{1, n}\n\
    \    }\n    result := []int{1, n}\n    for i := 2; i <= n; i++ {\n        if i%2\
    \ == 0 {\n            result = append(result, result[len(result)-1] + result[len(result)-2])\n\
    \        } else {\n            result = append(result, result[len(result)-1] +\
    \ result[len(result)-2] + 1)\n        }\n    }\n    return result\n}\n\nfunc TestTri(t\
    \ *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1,\
    \ 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3,\
    \ 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n\
    \     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n \
    \    { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n\
    \     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35}\
    \ },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__0 (0.00s)\n\
    \        tmpqhp2q9o5_test.go:61: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]',\
    \ got '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__1\
    \ (0.00s)\n        tmpqhp2q9o5_test.go:61: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=4) %!s(int=5) %!s(int=10)\
    \ %!s(int=15)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmpqhp2q9o5_test.go:61:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]',\
    \ got '[%!s(int=1) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=18) %!s(int=31)]'\n\
    \    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmpqhp2q9o5_test.go:61: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]',\
    \ got '[%!s(int=1) %!s(int=6) %!s(int=7) %!s(int=14) %!s(int=21) %!s(int=36) %!s(int=57)]'\n\
    \    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmpqhp2q9o5_test.go:61: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)\
    \ %!s(int=24)]', got '[%!s(int=1) %!s(int=7) %!s(int=8) %!s(int=16) %!s(int=24)\
    \ %!s(int=41) %!s(int=65) %!s(int=107)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n\
    \        tmpqhp2q9o5_test.go:61: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)\
    \ %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1)\
    \ %!s(int=8) %!s(int=9) %!s(int=18) %!s(int=27) %!s(int=46) %!s(int=73) %!s(int=120)\
    \ %!s(int=193)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmpqhp2q9o5_test.go:61:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=9)\
    \ %!s(int=10) %!s(int=20) %!s(int=30) %!s(int=51) %!s(int=81) %!s(int=133) %!s(int=214)\
    \ %!s(int=348)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmpqhp2q9o5_test.go:61:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int="
  timestamp: 1660074105
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    var result []int\n    if n <= 1 {\n \
    \       return nil\n    }\n    if n == 2 {\n        result = append(result,3)\n\
    \    } else {\n        var result int\n        result = 3 + int(n / 2)\n     \
    \   if n%2 == 0 {\n            result = result + tri(n - 1) + tri(n - 2)\n   \
    \     }\n        result = result + tri(n + 1)\n        result = append(result,\
    \ result)\n    }\n    return result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate\
    \ := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2,\
    \ 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n    \
    \ { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual:\
    \ candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3qpjafqw_test.go:35:22: invalid operation: result + tri(n - 1) (mismatched
    types int and []int)

    /tmp/tmp3qpjafqw_test.go:37:18: invalid operation: result + tri(n + 1) (mismatched
    types int and []int)

    /tmp/tmp3qpjafqw_test.go:38:25: first argument to append must be a slice; have
    result (variable of type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074105
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 1 {\n        return []int{1,\
    \ 1}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n    var a, b\
    \ int\n    var res []int\n    if n % 2 == 0 {\n        a = 2\n        b = n\n\
    \    } else {\n        a = n - 1\n        b = n - 2\n    }\n    for i := 3; i\
    \ <= n; i++ {\n        res = append(res, a+b)\n        a = b\n        b = a +\
    \ b\n    }\n    return res\n}\n\nfunc TestTri(t *testing.T) {\n  candidate :=\
    \ tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2,\
    \ 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n    \
    \ { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual:\
    \ candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__0 (0.00s)\n\
    \        tmp_e4tzyhg_test.go:70: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]',\
    \ got '[%!s(int=3)]'\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmp_e4tzyhg_test.go:70:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=6)\
    \ %!s(int=12)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmp_e4tzyhg_test.go:70:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]',\
    \ got '[%!s(int=7) %!s(int=9) %!s(int=18)]'\n    --- FAIL: TestTri/test_num__3\
    \ (0.00s)\n        tmp_e4tzyhg_test.go:70: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=8) %!s(int=18)\
    \ %!s(int=36) %!s(int=72)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n     \
    \   tmp_e4tzyhg_test.go:70: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)\
    \ %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=11) %!s(int=15)\
    \ %!s(int=30) %!s(int=60) %!s(int=120)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n\
    \        tmp_e4tzyhg_test.go:70: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)\
    \ %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=10)\
    \ %!s(int=24) %!s(int=48) %!s(int=96) %!s(int=192) %!s(int=384)]'\n    --- FAIL:\
    \ TestTri/test_num__6 (0.00s)\n        tmp_e4tzyhg_test.go:70: expected '[%!s(int=1)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)\
    \ %!s(int=5) %!s(int=35)]', got '[%!s(int=15) %!s(int=21) %!s(int=42) %!s(int=84)\
    \ %!s(int=168) %!s(int=336) %!s(int=672)]'\n    --- FAIL: TestTri/test_num__7\
    \ (0.00s)\n        tmp_e4tzyhg_test.go:70: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)\
    \ %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9)\
    \ %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[%!s(int=22) %!s(int=60)\
    \ %!s(int=120) %!s(int=240) %!s(int=480) %!s(int=960) %!s(int=1920) %!s(int=3840)\
    \ %!s(int=7680) %!s(int=153"
  timestamp: 1660074105
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 1 {\n        return nil\n    }\n\
    \    return append(append(append([]int{1, 3, 2, 8}, tri(n-2)[:len(tri(n-2)):len(tri(n-2))+1]),\
    \ tri(n-1)[:len(tri(n-1)):len(tri(n-1))+1]), n)\n}\n\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppzh0tuvl_test.go:28:60: cannot use tri(n - 2)[:len(tri(n - 2)):len(tri(n
    - 2)) + 1] (value of type []int) as type int in argument to append

    /tmp/tmppzh0tuvl_test.go:28:103: cannot use tri(n - 1)[:len(tri(n - 1)):len(tri(n
    - 1)) + 1] (value of type []int) as type int in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074105
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    result := []int{}\n    for i := 0; i\
    \ < n; i++ {\n        result := append(result, i)\n    }\n    result := append(result,\
    \ tri(n-1)...)\n    return append(result, n+1)\n}\n\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8ld1bbn4_test.go:27:9: result declared but not used

    /tmp/tmp8ld1bbn4_test.go:29:12: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074105
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    list := make([]int, n+1)\n    list[0]\
    \ = 3\n    list[1] = 1 + n / 2\n    list[2] = list[1]\n\n    if n % 2 == 0 {\n\
    \        list[2] = list[1] + list[2]\n    }\n\n    return list[n:]\n}\n\nfunc\
    \ TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [1]\
    \ with length 1 [recovered]\n\tpanic: runtime error: index out of range [1] with\
    \ length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(...)\n\t/tmp/tmpewxkreos_test.go:27\n\
    command-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpewxkreos_test.go:52 +0x1a5\n\
    testing.tRunner(0xc0001924e0, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074106
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n%2 == 1 {\n        return []int{tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)}\n    }\n    return []int{tri(n - 1), tri(n -\
    \ 2), tri(n + 1)}\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n  \
    \   { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjjfy4sfj_test.go:26:22: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    /tmp/tmpjjfy4sfj_test.go:28:18: cannot use tri(n - 1) (value of type []int) as
    type int in array or slice literal

    /tmp/tmpjjfy4sfj_test.go:28:30: cannot use tri(n - 2) (value of type []int) as
    type int in array or slice literal

    /tmp/tmpjjfy4sfj_test.go:28:42: cannot use tri(n + 1) (value of type []int) as
    type int in array or slice literal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074106
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    var result = []int{}\n    if n < 1 {\n\
    \        return result\n    }\n    result[0] = 3\n    for i := 1; i < n; i++ {\n\
    \        j := i + 2\n        if n%2 == 0 {\n            result[j] = result[j-1]\
    \ + result[j-2]\n        } else {\n            result[j] = tri(j-1)[tri(j-2) +\
    \ 1]\n        }\n    }\n    return result\n}\n\nfunc TestTri(t *testing.T) {\n\
    \  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppyl5m0ov_test.go:35:45: cannot convert 1 (untyped int constant) to []int

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074106
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    tri_fibonacci := []int{}\n    if n <=\
    \ 0 {\n        return tri_fibonacci\n    }\n    tri_fibonacci = append(tri_fibonacci,\
    \ 3)\n    if n % 2 == 0 {\n        tri_fibonacci = append(tri_fibonacci, tri_fibonacci[n-1])\n\
    \        tri_fibonacci = append(tri_fibonacci, tri_fibonacci[n-2])\n        tri_fibonacci\
    \ = append(tri_fibonacci, tri_fibonacci[n+1])\n    }\n    return tri_fibonacci\n\
    }\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [3]\
    \ with length 1 [recovered]\n\tpanic: runtime error: index out of range [3] with\
    \ length 1\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x5139e0, 0xc000160000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x5139e0,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(...)\n\t/tmp/tmpdf3fu60g_test.go:31\n\
    command-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpdf3fu60g_test.go:46 +0xec5\n\
    testing.tRunner(0xc000103380, 0x5292f8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074106
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 0 {\n        return []int{}\n\
    \    }\n    if n == 0 {\n        return [3]int{3}\n    }\n    if n == 1 {\n  \
    \      return [3]int{1}\n    }\n    return [3] + tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1)\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpdj1rw4mx_test.go:34:16: expected type, found ''+''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074105
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    t := [3]int{1, 1, 1}\n    for i := 2;\
    \ i <= n; i++ {\n        t[i] = t[i-1] + t[i-2] + t[i+2]\n    }\n    return t[:n+1]\n\
    }\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x5124a0, 0xc000160018})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x5124a0,\
    \ 0xc000160018})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(...)\n\t/tmp/tmpl7xr0fpi_test.go:27\n\
    command-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpl7xr0fpi_test.go:39 +0x8b\n\
    testing.tRunner(0xc000103380, 0x527d98)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074106
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    var nums []int\n    if n <= 1 {\n   \
    \     return nums\n    }\n    nums = append(nums, tri(n - 1) + tri(n - 2))\n \
    \   if n & 1 == 1 {\n        nums = append(nums, tri(n + 1))\n    }\n    return\
    \ nums\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpucte9ux9_test.go:29:25: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    /tmp/tmpucte9ux9_test.go:31:29: cannot use tri(n + 1) (value of type []int) as
    type int in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074106
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n <= 2 {\n        return []int{1,\
    \ n}\n    }\n    if n%2 == 0 {\n        return []int{1, tri(n-1), tri(n-2)}\n\
    \    }\n    return []int{tri(n-1), tri(n-2)}\n}\n\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkzdvb60w_test.go:29:25: cannot use tri(n - 1) (value of type []int) as
    type int in array or slice literal

    /tmp/tmpkzdvb60w_test.go:29:35: cannot use tri(n - 2) (value of type []int) as
    type int in array or slice literal

    /tmp/tmpkzdvb60w_test.go:31:18: cannot use tri(n - 1) (value of type []int) as
    type int in array or slice literal

    /tmp/tmpkzdvb60w_test.go:31:28: cannot use tri(n - 2) (value of type []int) as
    type int in array or slice literal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074106
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    // Write your code here\n    if n ==\
    \ 1 {\n        return []int{1, 3}\n    }\n    if n == 2 {\n        return []int{1,\
    \ 3, 2}\n    }\n\n    if n % 2 == 0 {\n        x := tri(n - 1) + tri(n - 2)\n\
    \        for _, i := range x {\n            x[len(x)-1]++\n        }\n       \
    \ return x\n    }\n    x := tri(n - 1) + tri(n - 2) + tri(n + 1)\n    for _, i\
    \ := range x {\n        x[len(x)-1]++\n    }\n    return x\n}\n\nfunc TestTri(t\
    \ *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1,\
    \ 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3,\
    \ 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n\
    \     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n \
    \    { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n\
    \     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35}\
    \ },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2v3dub1w_test.go:34:14: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    /tmp/tmp2v3dub1w_test.go:40:10: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074106
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 0 {\n        return nil\n    }\n\
    \    result := make([]int, n+1)\n    m := make([]int, 3)\n    m[0] = m[1] = m[2]\
    \ = 1\n    for i := 1; i <= n; i++ {\n        l := len(m)\n        m[l - 2] =\
    \ m[l - 1] + m[l - 2]\n        result[i] = m[l - 2]\n    }\n    return result\n\
    }\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpmjri5nm3_test.go:30:17: expected ''=='', found ''=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074105
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 0 {\n        return nil\n    }\n\
    \    numbers := make([]int, n+1)\n    numbers[0] = 3\n    numbers[1] = 1\n   \
    \ numbers[2] = 2\n    numbers[3] = 1\n    numbers[4] = 1\n    numbers[5] = 2\n\
    \    numbers[6] = 3\n    numbers[7] = 8\n    return numbers[:len(numbers)]\n}\n\
    \nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000162000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(...)\n\t/tmp/tmpk5vja56y_test.go:33\n\
    command-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpk5vja56y_test.go:47 +0x54\n\
    testing.tRunner(0xc000103380, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074107
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 || n == 1 {\n        return\
    \ []int{n}\n    }\n    tri_test := tri(n - 1) + tri(n - 2) + tri(n + 1)\n    return\
    \ append([]int{n}, tri_test...)\n}\n\nfunc TestTri(t *testing.T) {\n  candidate\
    \ := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2,\
    \ 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n    \
    \ { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual:\
    \ candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp52g53los_test.go:28:17: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074106
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 || n == 1 {\n        return\
    \ make([]int, 0)\n    }\n    result := tri(n-1)\n    result.Push(tri(n-2))\n \
    \   result.Push(tri(n+1))\n    return result\n}\n\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuxojceog_test.go:29:12: result.Push undefined (type []int has no field
    or method Push)

    /tmp/tmpuxojceog_test.go:30:12: result.Push undefined (type []int has no field
    or method Push)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074106
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    var t []int\n    t := make([]int, 0,\
    \ n+1)\n    t := append(t, 1)\n    t := append(t, n+2)\n    if n%2 == 1 {\n  \
    \      t := append(t, 1+n+n+1)\n    }\n    return t\n}\n\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpe1q4_tyr_test.go:26:7: no new variables on left side of :=

    /tmp/tmpe1q4_tyr_test.go:27:7: no new variables on left side of :=

    /tmp/tmpe1q4_tyr_test.go:28:7: no new variables on left side of :=

    /tmp/tmpe1q4_tyr_test.go:30:9: t declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074107
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    ans := []int{}\n    if n == 1 {\n   \
    \     ans = []int{n}\n    } else {\n        if n%2 == 0 {\n            ans = append(ans,\
    \ tri(n-1)...)\n        } else {\n            ans = append(ans, tri(n-1)...) +\
    \ append(tri(n-2), tri(n+1)...)\n        }\n    }\n    return ans\n}\n\nfunc TestTri(t\
    \ *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1,\
    \ 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3,\
    \ 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n\
    \     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n \
    \    { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n\
    \     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35}\
    \ },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5o9t564h_test.go:32:19: invalid operation: operator + not defined on append(ans,
    tri(n - 1)...) (value of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074107
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 1 {\n        return nil\n    }\n\
    \    if n == 1 {\n        return [3]int{}\n    }\n    return append(tri(n - 1)\
    \ + tri(n - 2), tri(n - 1) + tri(n + 1))\n}\n\nfunc TestTri(t *testing.T) {\n\
    \  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz4vf9892_test.go:29:16: cannot use [3]int{} (value of type [3]int) as
    type []int in return statement

    /tmp/tmpz4vf9892_test.go:31:19: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074107
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    // O(2^n)\n    // Sieve of Eratosthenes,\
    \ https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes\n    sieve.Erosthenes(&sieve,\
    \ n)\n    var result []int\n    tri(n, &result)\n    return result\n}\n\nfunc\
    \ TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp1phzgdrp_test.go:27:5:\
    \ undefined: sieve\n/tmp/tmp1phzgdrp_test.go:29:12: too many arguments in call\
    \ to tri\n\thave (int, *[]int)\n\twant (int)\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074107
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    var result []int\n    result := append(result,1)\n\
    \    if n%2 == 0 {\n        result = append(result,n+1)\n    } else {\n      \
    \  result = append(result, tri(n-1)+tri(-1+n))\n    }\n    return result\n}\n\n\
    func TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvveorbwr_test.go:26:12: no new variables on left side of :=

    /tmp/tmpvveorbwr_test.go:30:33: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074107
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    var result []int\n    for i := 0; i <\
    \ n; i++ {\n        if i%2 == 0 {\n            result = append(result, i+1)\n\
    \        } else {\n            result = append(result, i+1, result[i-1]+result[i-2])\n\
    \        }\n    }\n    return result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate\
    \ := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2,\
    \ 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n    \
    \ { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual:\
    \ candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [-1]\
    \ [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine 6\
    \ [running]:\ntesting.tRunner.func1.2({0x5149e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5149e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(...)\n\t/tmp/tmp1kxv84dc_test.go:30\n\
    command-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp1kxv84dc_test.go:43 +0x1754\n\
    testing.tRunner(0xc0001964e0, 0x52a2f8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074108
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    var list []int\n    if n == 0 {\n   \
    \     return list\n    }\n    list = append(list, 3)\n    if n%2 == 0 {\n    \
    \    list = append(list, 1 + n/2)\n    } else {\n        list = append(list, tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    }\n    return list\n}\n\nfunc TestTri(t\
    \ *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1,\
    \ 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3,\
    \ 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n\
    \     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n \
    \    { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n\
    \     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35}\
    \ },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpikj6jnrq_test.go:33:29: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074107
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n <= 1 {\n        return []int{1}\n\
    \    }\n    if n <= 2 {\n        return [2]int{n}\n    }\n    x := [3]int{1}\n\
    \    x := append(x, x[:0]int{n})\n    return append(tri(n-2), x...)\n}\n\nfunc\
    \ TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp94t21rds_test.go:32:25: missing '','' in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074107
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    a, b := 1, 3\n    result := make([]int,\
    \ n+1)\n    for i := 0; i < n; i++ {\n        result[i] = a\n        if n%2 !=\
    \ 0 {\n            a = a + b\n            a %= 10\n        } else {\n        \
    \    b = b + 2\n            b %= 10\n        }\n    }\n    return result\n}\n\n\
    func TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__0 (0.00s)\n\
    \        tmp416kj6ry_test.go:62: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=7) %!s(int=0)]'\n    --- FAIL: TestTri/test_num__1\
    \ (0.00s)\n        tmp416kj6ry_test.go:62: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=0)]'\n\
    \    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmp416kj6ry_test.go:62: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got\
    \ '[%!s(int=1) %!s(int=4) %!s(int=7) %!s(int=0) %!s(int=3) %!s(int=0)]'\n    ---\
    \ FAIL: TestTri/test_num__3 (0.00s)\n        tmp416kj6ry_test.go:62: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=0)]'\n\
    \    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmp416kj6ry_test.go:62: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)\
    \ %!s(int=24)]', got '[%!s(int=1) %!s(int=4) %!s(int=7) %!s(int=0) %!s(int=3)\
    \ %!s(int=6) %!s(int=9) %!s(int=0)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n\
    \        tmp416kj6ry_test.go:62: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)\
    \ %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=0)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmp416kj6ry_test.go:62:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=4)\
    \ %!s(int=7) %!s(int=0) %!s(int=3) %!s(int=6) %!s(int=9) %!s(int=2) %!s(int=5)\
    \ %!s(int=0)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmp416kj6ry_test.go:62:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7)\
    \ %!s(int=63) %!s(int=8) %!s(int="
  timestamp: 1660074108
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    // Base case when n is 1.\n    if n ==\
    \ 1 {\n        return []int{3}\n    }\n    // Base case when n is 2.\n    if n\
    \ == 2 {\n        return []int{1, 2}\n    }\n    // Recurrence.\n    x := tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)\n    if n % 2 == 0 {\n        x = append(x, x)\n\
    \    }\n    return x\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8}\
    \ },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmph88jbb20_test.go:34:10: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074107
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    result := make([]int, n+1)\n    result\
    \ := append(result, 3)\n    last := result[n]\n    if n%2 == 0 {\n        last\
    \ = 1\n    }\n    current := 1\n    for i := 1; i <= n; i++ {\n        last +=\
    \ current\n        result[n] = last\n        current = last + last\n    }\n  \
    \  return result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n  \
    \   { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc7tlhoty_test.go:26:12: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074108
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    var result = make([]int, 0, n+1)\n  \
    \  \n    for i := 0; i < n; i++ {\n        if i%2 == 0 {\n            result =\
    \ append(result, 1)\n        } else {\n            result = append(result, 1 +\
    \ int(rand.Intn(3)))\n        }\n    }\n    return result\n}\n\nfunc TestTri(t\
    \ *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1,\
    \ 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3,\
    \ 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n\
    \     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n \
    \    { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n\
    \     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35}\
    \ },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpet1zqp9c_test.go:31:45: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074108
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n\
    \    }\n    arr := make([]int, n+1)\n    arr[n] = 3\n    arr[n+1] = 1\n    arr[n+2]\
    \ = 2\n    for i := 3; i < n+3; i++ {\n        arr[n+3] = arr[n+2] + arr[n+1]\
    \ + arr[n]\n    }\n    return arr[:n+3]\n}\n\nfunc TestTri(t *testing.T) {\n \
    \ candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(...)\n\t/tmp/tmplsuq2hzu_test.go:30\n\
    command-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmplsuq2hzu_test.go:45 +0x3d\n\
    testing.tRunner(0xc0001a0340, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074108
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 2 {\n        return []int{n}\n\
    \    }\n    result := []int{n}\n    if n%2 == 0 {\n        a, b := tri(n-1), tri(n-2)\n\
    \        a = append(a, tri(n-2))\n        b = append(b, tri(n-1))\n        result\
    \ = append(result, a...)\n        result = append(result, b...)\n    } else {\n\
    \        a, b := tri(n-1), tri(n-2)\n        a = append(a, tri(n-1))\n       \
    \ b = append(b, tri(n-2))\n        result = append(result, a...)\n        result\
    \ = append(result, b...)\n    }\n    return result\n}\n</code>\n<|/ a dscore=5\
    \ tags=list,go |>\n<| c |>\nVery clever. Just two things: 1) The `[]int{n}` can\
    \ be simplified to just `n`. 2) The `tri(n-1)` can be simplified to just `n-1`.\n\
    <|/ c |>\n<| a tags=list,go |>\nYou could use recursion:\n<code>\npackage main\n\
    \nimport \"fmt\"\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n  \
    \   { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps2gdw_j6_test.go:44:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074107
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n <= 0 {\n        return nil\n   \
    \ }\n    if n%2 == 0 {\n        x := []int{1, n}\n        y := []int{1, n}\n \
    \       i := 2\n        for {\n            y[i] = x[i] + y[i-1]\n            if\
    \ y[i]%2 == 0 {\n                break\n            }\n            i++\n     \
    \   }\n        return y[:i+1]\n    }\n    x := []int{1, n}\n    y := []int{1,\
    \ n}\n    i := 1\n    for {\n        y[i] = x[i] + y[i-1]\n        if y[i]%2 ==\
    \ 0 {\n            break\n        }\n        i++\n    }\n    return y[:i+1]\n\
    }\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [2]\
    \ with length 2 [recovered]\n\tpanic: runtime error: index out of range [2] with\
    \ length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5139e0, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x5139e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmpymh4m60p_test.go:33\
    \ +0x159\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpymh4m60p_test.go:62\
    \ +0x73\ntesting.tRunner(0xc0001924e0, 0x5292f8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074108
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    result := []int{}\n    \n    if n ==\
    \ 0 {\n        return append(result, 0)\n    }\n\n    first := 3\n    last :=\
    \ 1 + n/2\n    if n%2 == 0 {\n        first = 2\n        last = 3 + n + 1\n  \
    \  }\n\n    for i := 1; i <= last; i++ {\n        result = append(result, first+i)\n\
    \    }\n\n    return result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate :=\
    \ tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2,\
    \ 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n    \
    \ { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual:\
    \ candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__0 (0.00s)\n\
    \        tmpdl1rm08x_test.go:67: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]',\
    \ got '[%!s(int=4) %!s(int=5)]'\n    --- FAIL: TestTri/test_num__1 (0.00s)\n \
    \       tmpdl1rm08x_test.go:67: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)\
    \ %!s(int=3)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9) %!s(int=10)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n      \
    \  tmpdl1rm08x_test.go:67: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)\
    \ %!s(int=3) %!s(int=15)]', got '[%!s(int=4) %!s(int=5) %!s(int=6)]'\n    ---\
    \ FAIL: TestTri/test_num__3 (0.00s)\n        tmpdl1rm08x_test.go:67: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]',\
    \ got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)\
    \ %!s(int=10) %!s(int=11) %!s(int=12)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n\
    \        tmpdl1rm08x_test.go:67: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)\
    \ %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=4) %!s(int=5)\
    \ %!s(int=6) %!s(int=7)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n       \
    \ tmpdl1rm08x_test.go:67: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)\
    \ %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=3)\
    \ %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=10)\
    \ %!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14)]'\n    --- FAIL: TestTri/test_num__6\
    \ (0.00s)\n        tmpdl1rm08x_test.go:67: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]',\
    \ got '[%!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)]'\n    --- FAIL:\
    \ TestTri/test_num__7 (0.00s)\n        tmpdl1rm08x_test.go:67: expected '[%!s(int=1)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)\
    \ %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8)\
    \ %!s(int=80) %!s(int=9) %!s(int=99) %!s(int=10) %!s(int"
  timestamp: 1660074108
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    // base case: n is even.\n    if n %2\
    \ == 0 {\n        return append([]int{1}, tri(n / 2)...)\n    }\n\n    // base\
    \ case: n is odd.\n    return append([]int{1, n}, tri(n-1) + tri(n-2)...)\n}\n\
    \nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmps718b539_test.go:31:32: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074108
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    switch {\n    case n < 1:\n        return\
    \ nil\n    case n % 2 == 1:\n        return append([]int{1, n/2}, tri(n - 1) +\
    \ tri(n - 2)...)\n    case n % 2 == 0:\n        return append([]int{1, tri(n -\
    \ 1)}, tri(n - 2) + tri(n - 1)...)\n    }\n}\n\nfunc TestTri(t *testing.T) {\n\
    \  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2jgaem7n_test.go:29:38: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    /tmp/tmp2jgaem7n_test.go:31:32: cannot use tri(n - 1) (value of type []int) as
    type int in array or slice literal

    /tmp/tmp2jgaem7n_test.go:31:45: invalid operation: operator + not defined on tri(n
    - 2) (value of type []int)

    /tmp/tmp2jgaem7n_test.go:33:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074108
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    stack := make([]int, 0)\n    stack =\
    \ append(stack, 3)\n    stack = append(stack, 2)\n\n    for i := 3; i <= n; i++\
    \ {\n        if i%2 == 0 {\n            stack = append(stack, i+1)\n        }\
    \ else {\n            stack = append(stack,\n                tri(tri(tri(i-1)\
    \ + tri(i-2)) + tri(i+1)), \n            )\n        }\n    }\n\n    return stack\n\
    }\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpccbtxwer_test.go:34:17: cannot use tri(tri(tri(i - 1) + tri(i - 2)) +
    tri(i + 1)) (value of type []int) as type int in argument to append

    /tmp/tmpccbtxwer_test.go:34:21: invalid operation: operator + not defined on tri(tri(i
    - 1) + tri(i - 2)) (value of type []int)

    /tmp/tmpccbtxwer_test.go:34:25: invalid operation: operator + not defined on tri(i
    - 1) (value of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074108
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 3 {\n        return []int{n}\n\
    \    }\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n}\n\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp69xkgusy_test.go:28:12: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074108
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 0 {\n        return []int{}\n\
    \    }\n\n    return []int{\n        3,\n        (1 + n) / 2,\n        tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1),\n    }[:n+1]\n}\n\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpt6u8jkrg_test.go:32:9: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074108
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    list := make([]int, n+1)\n    list[0],\
    \ list[1] = list[1], list[0]\n    list[2], list[len(list)-1] = list[len(list)-1],\
    \ list[2]\n\n    for i := 3; i <= n; i++ {\n        list[i+1] = list[i] + list[i-2]\n\
    \    }\n\n    return list[:n+1]\n}\n\nfunc TestTri(t *testing.T) {\n  candidate\
    \ := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2,\
    \ 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n    \
    \ { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual:\
    \ candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(...)\n\t/tmp/tmppfmsq_l8_test.go:30\n\
    command-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmppfmsq_l8_test.go:43 +0x3a6\n\
    testing.tRunner(0xc0001924e0, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074109
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n <= 1 {\n        return nil\n   \
    \ }\n\n    var t []int\n    t[1] = 3\n    for i := 2; i < n; i++ {\n        t[i]\
    \ = t[i-1] + t[i-2] + t[i+1]\n    }\n    return t\n}\n\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [1]\
    \ with length 0 [recovered]\n\tpanic: runtime error: index out of range [1] with\
    \ length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(...)\n\t/tmp/tmp2tvnx241_test.go:30\n\
    command-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp2tvnx241_test.go:44 +0x1a\n\
    testing.tRunner(0xc0001a0340, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074109
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    result := make([]int, n+1)\n    result[0],\
    \ result[1], result[2] = 0, 0, 1\n    for i := 3; i <= n; i++ {\n        result[i+3]\
    \ = result[i+2] + result[i]\n    }\n    return result\n}\n\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [5]\
    \ with length 4 [recovered]\n\tpanic: runtime error: index out of range [5] with\
    \ length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(...)\n\t/tmp/tmpurp3o4un_test.go:28\n\
    command-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpurp3o4un_test.go:40 +0x40c\n\
    testing.tRunner(0xc0001201a0, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074109
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    result := make([]int, n+1)\n    \n  \
    \  switch n {\n    case 0:\n        result[0] = result[1] = 1\n        return\
    \ result\n    case 1:\n        result[0] = 3\n        return result\n    }\n \
    \   \n    switch {\n    case n % 2 == 0: \n        result[0] = tri(n-1) + tri(n-2)\n\
    \        result[1] = tri(n+1)\n        return result\n    case n % 2 == 1: \n\
    \        result[0] = tri(n-2) + tri(n-1)\n        result[1] = tri(n-1)\n     \
    \   return result\n    }\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8}\
    \ },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmplcg_0oeb_test.go:29:31: expected ''=='', found ''=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074108
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 2 {\n        return []int{n}\n\
    \    }\n    return append(tri(n-1) + tri(n - 2), tri(n + 1))\n}\n\nfunc TestTri(t\
    \ *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1,\
    \ 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3,\
    \ 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n\
    \     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n \
    \    { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n\
    \     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35}\
    \ },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb5av_bi8_test.go:28:19: invalid operation: operator + not defined on tri(n
    - 1) (value of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074109
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 1 {\n        return []int{1}\n\
    \    }\n    if n == 2 {\n        return []int{1, 2}\n    }\n    if n <= 1 {\n\
    \        return []int{1}\n    }\n    result := []int{1, n-1, n-2, n+1}\n    for\
    \ idx := len(result) - 2; idx >= 0; idx-- {\n        result[idx] = result[idx+1]\
    \ + result[idx+2]\n    }\n    return result\n}\nfunc TestTri(t *testing.T) {\n\
    \  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5139e0, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x5139e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(...)\n\t/tmp/tmpqomt9als_test.go:36\n\
    command-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpqomt9als_test.go:47 +0xb0c\n\
    testing.tRunner(0xc0001201a0, 0x5292f8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074109
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    result := make([]int, n+1)\n    \n  \
    \  // 1. first + last element\n    result[0] = 1 + result[n-1]\n    \n    // 2.\
    \ for odd n\n    if n%2 == 1 {\n        result[1] = 1 + result[n-1]\n    }\n \
    \   // 3. for even n\n    else {\n        result[1] = 1 + result[n-1] + result[n-2]\n\
    \    }\n    // 4. append the rest\n    for i := 2; i <= n; i++ {\n        result[i+1]\
    \ = result[i] + result[i-1]\n    }\n    return result\n}\n\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmphujg280z_test.go:35:5: expected statement, found ''else''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074108
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    arr := make([]int, n+1)\n    arr[0] =\
    \ arr[1] = 3\n    arr[2] = 1 + n / 2\n    if n%2 == 0 {\n        arr[3] = arr[2]\
    \ + arr[1]\n    } else {\n        arr[3] = arr[3] + arr[2]\n    }\n    return\
    \ arr[:n]\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n  \
    \   { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp17v529kx_test.go:26:21: expected ''=='', found ''=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074108
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    r := []int{}\n    i := 0\n    for ; i\
    \ < n; i++ {\n        if i%2 == 0 {\n            r = append(r, i+3)\n        }\
    \ else {\n            r = append(r, i+1+(float64(i)/2))\n        }\n    }\n  \
    \  return r\n}\n</code>\n<|/ a dscore=1 tags=algorithm,go,triangular |>\n<| a\
    \ dscore=1 |>\nGo Solution :\n<code>\npackage main\n\nimport \"fmt\"\n\nfunc TestTri(t\
    \ *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1,\
    \ 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3,\
    \ 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n\
    \     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n \
    \    { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n\
    \     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35}\
    \ },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmppzebcos3_test.go:36:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074109
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    result := []int{}\n    if n < 2 {\n \
    \       return result\n    }\n    tri(n - 1)\n    tri(n - 2)\n    tri(n + 2)\n\
    \    tri(n + 1)\n    result = append(result, tri(n))\n    return result\n}\n\n\
    func TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbtnegyeo_test.go:33:29: cannot use tri(n) (value of type []int) as type
    int in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074109
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 1 {\n        return []int{}\n\
    \    }\n    list := make([]int, n+1)\n    list[0], list[1], list[2] = 1\n    for\
    \ i := 2; i <= n; i++ {\n        list[i] = list[i-1] + list[i-2] + list[i+1]\n\
    \    }\n    return list\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8}\
    \ },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkhqu02rv_test.go:29:33: assignment mismatch: 3 variables but 1 value

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074109
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n <= 1 {\n        return []int{n}\n\
    \    }\n\n    var result []int\n    for i := 1; i <= n; i++ {\n        result\
    \ = append(result, i+n)\n    }\n\n    return result\n}\n\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__0 (0.00s)\n\
    \        tmp6ttexqnn_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]',\
    \ got '[%!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestTri/test_num__1\
    \ (0.00s)\n        tmp6ttexqnn_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)]'\n\
    \    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmp6ttexqnn_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got\
    \ '[%!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=10)]'\n    --- FAIL: TestTri/test_num__3\
    \ (0.00s)\n        tmp6ttexqnn_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=7) %!s(int=8)\
    \ %!s(int=9) %!s(int=10) %!s(int=11) %!s(int=12)]'\n    --- FAIL: TestTri/test_num__4\
    \ (0.00s)\n        tmp6ttexqnn_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=8)\
    \ %!s(int=9) %!s(int=10) %!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14)]'\n \
    \   --- FAIL: TestTri/test_num__5 (0.00s)\n        tmp6ttexqnn_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)\
    \ %!s(int=24) %!s(int=5)]', got '[%!s(int=9) %!s(int=10) %!s(int=11) %!s(int=12)\
    \ %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16)]'\n    --- FAIL: TestTri/test_num__6\
    \ (0.00s)\n        tmp6ttexqnn_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]',\
    \ got '[%!s(int=10) %!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15)\
    \ %!s(int=16) %!s(int=17) %!s(int=18)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n\
    \        tmp6ttexqnn_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)\
    \ %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6)\
    \ %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99)\
    \ %!s(int=10) %!s(int=120) "
  timestamp: 1660074109
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    // Write your code here\n    tri_seq\
    \ := []int{}\n    if n%2 == 0 {\n        tri_seq = append(tri_seq, tri(n-1))\n\
    \        tri_seq = append(tri_seq, tri(n - 2))\n        tri_seq = append(tri_seq,\
    \ tri(n + 1))\n    } else {\n        tri_seq = append(tri_seq, tri(n-1))\n   \
    \     tri_seq = append(tri_seq, tri(n - 2))\n        tri_seq = append(tri_seq,\
    \ tri(n))\n    }\n    return tri_seq\n}\n\nfunc TestTri(t *testing.T) {\n  candidate\
    \ := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2,\
    \ 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n    \
    \ { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual:\
    \ candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdhju0ye5_test.go:28:35: cannot use tri(n - 1) (value of type []int) as
    type int in argument to append

    /tmp/tmpdhju0ye5_test.go:29:35: cannot use tri(n - 2) (value of type []int) as
    type int in argument to append

    /tmp/tmpdhju0ye5_test.go:30:35: cannot use tri(n + 1) (value of type []int) as
    type int in argument to append

    /tmp/tmpdhju0ye5_test.go:32:35: cannot use tri(n - 1) (value of type []int) as
    type int in argument to append

    /tmp/tmpdhju0ye5_test.go:33:35: cannot use tri(n - 2) (value of type []int) as
    type int in argument to append

    /tmp/tmpdhju0ye5_test.go:34:35: cannot use tri(n) (value of type []int) as type
    int in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074109
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 3 {\n        return []int{}\n\
    \    }\n    if n%2 == 0 {\n        return append(tri(n - 3), tri(n - 1)...)\n\
    \    }\n    return append(tri(n - 3), tri(n - 2) + tri(n - 1)...)\n}\n\nfunc TestTri(t\
    \ *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1,\
    \ 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3,\
    \ 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n\
    \     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n \
    \    { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n\
    \     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35}\
    \ },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpm9c2sx1w_test.go:31:31: invalid operation: operator + not defined on tri(n
    - 2) (value of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074109
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return nil\n   \
    \ }\n    result := make([]int, n+1)\n    result[0] = result[1] = 3\n    i := 2\n\
    \    for i <= n {\n        result[i] = result[i-2] + result[i-1]\n        i =\
    \ i + 1\n    }\n    return result[:n]\n}\n\nfunc TestTri(t *testing.T) {\n  candidate\
    \ := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2,\
    \ 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n    \
    \ { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual:\
    \ candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpokdrq0db_test.go:29:27: expected ''=='', found ''=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074109
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    var tri []int\n    switch {\n    case\
    \ n < 2:\n        return []int{1}\n    case n%2 != 0:\n        tri = append(tri,\
    \ 1)\n        return tri\n    default:\n        tri = append(tri, tri(n-1))\n\
    \        tri = append(tri, tri(n - 2) + tri(n + 1))\n    }\n    return tri\n}\n\
    </code>\n<|/ a tags=algorithm,big-o,time-complexity,recursion |>\n<| c |>\nYour\
    \ explanation is not quite clear to me, can you please review it ?\n<|/ c |>\n\
    <| a dscore=0 |>\n<code>\ndef tri(n):\n    if n<=1:\n       return [1 for i in\
    \ range(n+1)]\n    elif n%2==0:\n       tri = tri(n-1)+tri(n-2)\n       return\
    \ [tri[i] for i in range(n+1)]\n    else:\n       tri = tri(n-1)+tri(n-2)+tri(n-3)\n\
    \       return tri\n</code>\n<|/ a tags=algorithm,big-o,time-complexity,recursion\
    \ |>\n<| a dscore=0 |>\n<code>\ndef tri(n):\n    s = []\n    if n==1: # Base Case\n\
    \        for i in range(n+1):\n            s.append(i) #O(1), n+1 steps\n    \
    \    return s # O(1)\n    elif n%2==0: # Even Case\n        for i in range(n+1):\n\
    \            s.append(i+n-1)\n            s.append(n-i+n+1)\n        return s\n\
    \    else: # O(n) Time complexity - O(1) Space\n        for i in range(n+1):\n\
    \            s.append(i+n-1)\n            s.append(n-i+n+1)\n            s.append(i+n+1-n+2)\n\
    \        return s\n</code>\n<|/ a tags=algorithm,big-o,time-complexity,recursion\
    \ |>\n<| a dscore=0 |>\nI find this answer easier to understand than the others:\n\
    <code>\ndef tri(n):\n    if n<=1:\n       return [1 for i in range(n+1)]\n   \
    \ elif n%2==0:\n       return [tri(n-1)+tri(n-2) for i in range(n+1)]\n    else:\n\
    \       return [tri(n-1)+tri(n-2)+tri(n-3) for i in range(n+1)]\n</code>\n<|/\
    \ a tags=algorithm,big-o,time-complexity,recursion |>\n<| a tags=algorithm,big-o,time-complexity,recursion\
    \ dscore=0 |>\nThis is what it took me to understand this answer, which was from\
    \ Wikipedia:\n<code>\ndef tri(n):\n    if n<=1:\n       return [1 for i in range(n+1)]\n\
    \    elif n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpze1s84a6_test.go:38:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074109
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n <= 0 {\n        return nil\n   \
    \ }\n    return append(tri(n-2), tri(n-1), tri(n+1))\n}\n\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppw8avzcx_test.go:28:29: cannot use tri(n - 1) (value of type []int) as
    type int in argument to append

    /tmp/tmppw8avzcx_test.go:28:39: cannot use tri(n + 1) (value of type []int) as
    type int in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074109
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    tri_result := make([]int, n+1)\n    tri_result[0]\
    \ = 3\n    if n%2 == 1 {\n        tri_result[1] = 1 + n / 2\n    } else {\n  \
    \      tri_result[1] = tri_result[0] + tri_result[1]\n    }\n    if n%3 == 1 {\n\
    \        tri_result[2] = tri_result[1] + tri_result[2]\n    } else {\n       \
    \ tri_result[2] = tri_result[1] + tri_result[2] + tri_result[1]\n    }\n    tri_result[n]\
    \ = tri_result[n-1] + tri_result[n-2] + tri_result[n+1]\n    return tri_result\n\
    }\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 4\n\ngoroutine 34 [running]:\ntesting.tRunner.func1.2({0x5139e0, 0xc0001d8000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x5139e0,\
    \ 0xc0001d8000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x3)\n\t/tmp/tmpc2mtirqm_test.go:37\
    \ +0xf6\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpc2mtirqm_test.go:48\
    \ +0x46\ntesting.tRunner(0xc000198ea0, 0x5292f8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n"
  timestamp: 1660074109
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    result := []int{}\n    if n < 3 {\n \
    \       return result\n    }\n    for i := 1; i < n; i++ {\n        result = append(result,\
    \ i)\n    }\n    for i := n - 2; i > 1; i-- {\n        result = append(result,\
    \ i+i+i+1)\n    }\n    return result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate\
    \ := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2,\
    \ 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n    \
    \ { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual:\
    \ candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__0 (0.00s)\n\
    \        tmplfsl8xk2_test.go:60: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]',\
    \ got '[%!s(int=1) %!s(int=2)]'\n    --- FAIL: TestTri/test_num__1 (0.00s)\n \
    \       tmplfsl8xk2_test.go:60: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=7)]'\n    --- FAIL:\
    \ TestTri/test_num__2 (0.00s)\n        tmplfsl8xk2_test.go:60: expected '[%!s(int=1)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=1)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=10) %!s(int=7)]'\n    --- FAIL: TestTri/test_num__3\
    \ (0.00s)\n        tmplfsl8xk2_test.go:60: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=13) %!s(int=10) %!s(int=7)]'\n    ---\
    \ FAIL: TestTri/test_num__4 (0.00s)\n        tmplfsl8xk2_test.go:60: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)\
    \ %!s(int=24)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)\
    \ %!s(int=6) %!s(int=16) %!s(int=13) %!s(int=10) %!s(int=7)]'\n    --- FAIL: TestTri/test_num__5\
    \ (0.00s)\n        tmplfsl8xk2_test.go:60: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=19)\
    \ %!s(int=16) %!s(int=13) %!s(int=10) %!s(int=7)]'\n    --- FAIL: TestTri/test_num__6\
    \ (0.00s)\n        tmplfsl8xk2_test.go:60: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)\
    \ %!s(int=8) %!s(int=22) %!s(int=19) %!s(int=16) %!s(int=13) %!s(int=10) %!s(int=7)]'\n\
    \    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmplfsl8xk2_test.go:60: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)\
    \ %!s(int="
  timestamp: 1660074109
