language: go_test.go
name: HumanEval_45_triangle_area
results:
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    s := a*a + (h-1)*h/2\n\
    \    s /= 2\n    return s\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate\
    \ := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5, 3), expected:\
    \ 7.5 },\n     { actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10,\
    \ 8), expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5j44mvtz_test.go:14:12: cannot use s (variable of type int) as type float64
    in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073823
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    return (a + b +\
    \ c)/2 * h / 2\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5, 3), expected: 7.5 },\n     {\
    \ actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10, 8),\
    \ expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdi6r6ntl_test.go:12:17: undefined: b

    /tmp/tmpdi6r6ntl_test.go:12:21: undefined: c

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073823
- exit_code: 0
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    area_tri := float64(h\
    \ * a) / 2\n    return area_tri\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n\
    \  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5,\
    \ 3), expected: 7.5 },\n     { actual: candidate(2, 2), expected: 2.0 },\n   \
    \  { actual: candidate(10, 8), expected: 40.0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073824
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    if a == 0 && h ==\
    \ 0 { // No sides are given.\n        return 1.0\n    }\n    if h == 0 {\n   \
    \     return a\n    }\n    return a * triangle_area(a / 2, h-1) * triangle_area(a\
    \ - a / 2, h - h / 2)\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate\
    \ := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5, 3), expected:\
    \ 7.5 },\n     { actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10,\
    \ 8), expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqc_owlpw_test.go:16:16: cannot use a (variable of type int) as type float64
    in return statement

    /tmp/tmpqc_owlpw_test.go:18:12: invalid operation: a * triangle_area(a / 2, h
    - 1) (mismatched types int and float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073823
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    return float64(a\
    \ * a * h / 6)\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5, 3), expected: 7.5 },\n     {\
    \ actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10, 8),\
    \ expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp1vwq0dk4_test.go:30: expected '%!s(float64=7.5)', got '%!s(float64=12)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__1 (0.00s)\n        tmp1vwq0dk4_test.go:30:\
    \ expected '%!s(float64=2)', got '%!s(float64=1)'\n    --- FAIL: TestTriangle_Area/test_num__2\
    \ (0.00s)\n        tmp1vwq0dk4_test.go:30: expected '%!s(float64=40)', got '%!s(float64=133)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073824
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    return float64((a\
    \ + b + c)/2) * float64(math.Pow(h, 3))\n}\n\nfunc TestTriangle_Area(t *testing.T)\
    \ {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5,\
    \ 3), expected: 7.5 },\n     { actual: candidate(2, 2), expected: 2.0 },\n   \
    \  { actual: candidate(10, 8), expected: 40.0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb4lj5j7x_test.go:12:25: undefined: b

    /tmp/tmpb4lj5j7x_test.go:12:29: undefined: c

    /tmp/tmpb4lj5j7x_test.go:12:45: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073823
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    s := a + h\n   \
    \ return float64(s * (s - a) * (s - h)) / 4.0\n}\n\nfunc TestTriangle_Area(t *testing.T)\
    \ {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5,\
    \ 3), expected: 7.5 },\n     { actual: candidate(2, 2), expected: 2.0 },\n   \
    \  { actual: candidate(10, 8), expected: 40.0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp3ghbv2qj_test.go:31: expected '%!s(float64=7.5)', got '%!s(float64=30)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__1 (0.00s)\n        tmp3ghbv2qj_test.go:31:\
    \ expected '%!s(float64=2)', got '%!s(float64=4)'\n    --- FAIL: TestTriangle_Area/test_num__2\
    \ (0.00s)\n        tmp3ghbv2qj_test.go:31: expected '%!s(float64=40)', got '%!s(float64=360)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073824
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    switch h {\n   \
    \ case 1:\n        return a\n    case 2:\n        return a*a\n    default:\n \
    \       return a*a*a/2\n    }\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n \
    \ candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5,\
    \ 3), expected: 7.5 },\n     { actual: candidate(2, 2), expected: 2.0 },\n   \
    \  { actual: candidate(10, 8), expected: 40.0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl2ryes88_test.go:14:16: cannot use a (variable of type int) as type float64
    in return statement

    /tmp/tmpl2ryes88_test.go:16:16: cannot use a * a (value of type int) as type float64
    in return statement

    /tmp/tmpl2ryes88_test.go:18:16: cannot use a * a * a / 2 (value of type int) as
    type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073823
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    return float64(a\
    \ / 2) * float64(h / 2)\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate\
    \ := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5, 3), expected:\
    \ 7.5 },\n     { actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10,\
    \ 8), expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp_pt1xktw_test.go:30: expected '%!s(float64=7.5)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__1 (0.00s)\n        tmp_pt1xktw_test.go:30:\
    \ expected '%!s(float64=2)', got '%!s(float64=1)'\n    --- FAIL: TestTriangle_Area/test_num__2\
    \ (0.00s)\n        tmp_pt1xktw_test.go:30: expected '%!s(float64=40)', got '%!s(float64=20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073824
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    return a * (h /\
    \ 2) * tan(float64(3.141592653589793) * (float64(a) / float64(h))/2.0) \n}\n\n\
    func TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5, 3), expected: 7.5 },\n     { actual:\
    \ candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10, 8), expected:\
    \ 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpik5c4wit_test.go:12:26: undefined: tan

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073823
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    if a == 0 {\n  \
    \      return 0\n    }\n    if h == 0 {\n        return 0\n    }\n    return float64(a)\
    \ / float64(h)\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5, 3), expected: 7.5 },\n     {\
    \ actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10, 8),\
    \ expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp2x9hy44h_test.go:36: expected '%!s(float64=7.5)', got '%!s(float64=1.6666666666666667)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__1 (0.00s)\n        tmp2x9hy44h_test.go:36:\
    \ expected '%!s(float64=2)', got '%!s(float64=1)'\n    --- FAIL: TestTriangle_Area/test_num__2\
    \ (0.00s)\n        tmp2x9hy44h_test.go:36: expected '%!s(float64=40)', got '%!s(float64=1.25)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073824
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    if a < h {\n   \
    \     return 0.0\n    }\n    return a*(a+h)/2\n}\n\nfunc TestTriangle_Area(t *testing.T)\
    \ {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5,\
    \ 3), expected: 7.5 },\n     { actual: candidate(2, 2), expected: 2.0 },\n   \
    \  { actual: candidate(10, 8), expected: 40.0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpghni78lx_test.go:15:12: cannot use a * (a + h) / 2 (value of type int)
    as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073823
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    switch {\n    case\
    \ a >= h:\n        return 0.0\n    case a < 4:\n        return ((h*h)/2)\n   \
    \ case h == 4:\n        return ((4*(a + a))/2)\n    default:\n        return ((h*h)/(4*a))\n\
    \    }\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5, 3), expected: 7.5 },\n     {\
    \ actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10, 8),\
    \ expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmps5mk_vub_test.go:16:16: cannot use ((h * h) / 2) (value of type int) as
    type float64 in return statement

    /tmp/tmps5mk_vub_test.go:18:16: cannot use ((4 * (a + a)) / 2) (value of type
    int) as type float64 in return statement

    /tmp/tmps5mk_vub_test.go:20:16: cannot use ((h * h) / (4 * a)) (value of type
    int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073823
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    return float64(a\
    \ * h) / 4.0\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5, 3), expected: 7.5 },\n     {\
    \ actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10, 8),\
    \ expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpme86zgk__test.go:30: expected '%!s(float64=7.5)', got '%!s(float64=3.75)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__1 (0.00s)\n        tmpme86zgk__test.go:30:\
    \ expected '%!s(float64=2)', got '%!s(float64=1)'\n    --- FAIL: TestTriangle_Area/test_num__2\
    \ (0.00s)\n        tmpme86zgk__test.go:30: expected '%!s(float64=40)', got '%!s(float64=20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073824
- exit_code: 0
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    return float64(a*h)/2\n\
    }\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5, 3), expected: 7.5 },\n     {\
    \ actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10, 8),\
    \ expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073601
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    return (a / 2) *\
    \ float64(h) / 2\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate :=\
    \ triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5, 3), expected:\
    \ 7.5 },\n     { actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10,\
    \ 8), expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnwkvi0y8_test.go:12:12: invalid operation: (a / 2) * float64(h) (mismatched
    types int and float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073823
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    switch {\n     \
    \   case h == 0:\n            return -1\n        case a == 0 || h == 1:\n    \
    \        return 1\n        case a == 1 || h == 2:\n            return a * a +\
    \ a\n        default:\n            return (a * a) * (h / 2)\n    }\n}\n\nfunc\
    \ TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5, 3), expected: 7.5 },\n     { actual:\
    \ candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10, 8), expected:\
    \ 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp66k_pes6_test.go:18:20: cannot use a * a + a (value of type int) as type
    float64 in return statement

    /tmp/tmp66k_pes6_test.go:20:20: cannot use (a * a) * (h / 2) (value of type int)
    as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073823
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    switch {\n    case\
    \ a <= 0 || h <= 0:\n        return 0.0\n    case h == 0:\n        return a*a\n\
    \    default:\n        return a*a / math.Pow((h), 2)\n    }\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5, 3), expected: 7.5 },\n     { actual: candidate(2, 2), expected:\
    \ 2.0 },\n     { actual: candidate(10, 8), expected: 40.0 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8cfu9uew_test.go:16:16: cannot use a * a (value of type int) as type float64
    in return statement

    /tmp/tmp8cfu9uew_test.go:18:22: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073823
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    ans := a / 2 * h\n\
    \    return ans\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5, 3), expected: 7.5 },\n     {\
    \ actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10, 8),\
    \ expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzargvmes_test.go:13:12: cannot use ans (variable of type int) as type
    float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073823
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    return (a + h)*(b\
    \ + h)*(c+h)/2\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5, 3), expected: 7.5 },\n     {\
    \ actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10, 8),\
    \ expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5bbp0kh6_test.go:12:21: undefined: b

    /tmp/tmp5bbp0kh6_test.go:12:29: undefined: c

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073823
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    return float64((a\
    \ + h) * (a + h + 1) * (a - h + 1))\n}\n\nfunc TestTriangle_Area(t *testing.T)\
    \ {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5,\
    \ 3), expected: 7.5 },\n     { actual: candidate(2, 2), expected: 2.0 },\n   \
    \  { actual: candidate(10, 8), expected: 40.0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpwy6hhr2q_test.go:30: expected '%!s(float64=7.5)', got '%!s(float64=216)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__1 (0.00s)\n        tmpwy6hhr2q_test.go:30:\
    \ expected '%!s(float64=2)', got '%!s(float64=20)'\n    --- FAIL: TestTriangle_Area/test_num__2\
    \ (0.00s)\n        tmpwy6hhr2q_test.go:30: expected '%!s(float64=40)', got '%!s(float64=1026)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073824
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    var s float64 =\
    \ 0\n    for i := 0; i < a; i++ {\n        s += 0.5 * a * float64(i - h) / float64(a+h-1)\n\
    \    }\n    return s\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate\
    \ := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5, 3), expected:\
    \ 7.5 },\n     { actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10,\
    \ 8), expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu7m5uowj_test.go:14:14: 0.5 (untyped float constant) truncated to int

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073823
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    return float64(a*h*h)\
    \ / 9\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5, 3), expected: 7.5 },\n     {\
    \ actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10, 8),\
    \ expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpvvw0g6rv_test.go:30: expected '%!s(float64=7.5)', got '%!s(float64=5)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__1 (0.00s)\n        tmpvvw0g6rv_test.go:30:\
    \ expected '%!s(float64=2)', got '%!s(float64=0.8888888888888888)'\n    --- FAIL:\
    \ TestTriangle_Area/test_num__2 (0.00s)\n        tmpvvw0g6rv_test.go:30: expected\
    \ '%!s(float64=40)', got '%!s(float64=71.11111111111111)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073824
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    return (a + b +\
    \ c)/2\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5, 3), expected: 7.5 },\n     {\
    \ actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10, 8),\
    \ expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkoe0m24v_test.go:12:17: undefined: b

    /tmp/tmpkoe0m24v_test.go:12:21: undefined: c

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073823
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    b := a * (h/2 *\
    \ a)\n    c := b * h\n    return a * a + b * b + c * c - c\n}\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5, 3), expected: 7.5 },\n     { actual: candidate(2, 2), expected:\
    \ 2.0 },\n     { actual: candidate(10, 8), expected: 40.0 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdky3x1jh_test.go:14:12: cannot use a * a + b * b + c * c - c (value of
    type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073825
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    return a * float64(h)\
    \ / float64(2) * float64(math.sqrt(float64(h)))\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5, 3), expected: 7.5 },\n     { actual: candidate(2, 2), expected:\
    \ 2.0 },\n     { actual: candidate(10, 8), expected: 40.0 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpamjctytg_test.go:12:12: invalid operation: a * float64(h) (mismatched
    types int and float64)

    /tmp/tmpamjctytg_test.go:12:50: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073826
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    length := a + h\n\
    \    return float64(length) * (length*length - a*a) / (4.0 * a)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5, 3), expected: 7.5 },\n     { actual: candidate(2, 2), expected:\
    \ 2.0 },\n     { actual: candidate(10, 8), expected: 40.0 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpt07a1g1v_test.go:13:12: invalid operation: float64(length) * (length *
    length - a * a) (mismatched types float64 and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073826
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    tri := float64(a\
    \ + b + c) / 2\n    return tri * (tri - h) / 2\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5, 3), expected: 7.5 },\n     { actual: candidate(2, 2), expected:\
    \ 2.0 },\n     { actual: candidate(10, 8), expected: 40.0 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp11q46evr_test.go:12:24: undefined: b

    /tmp/tmp11q46evr_test.go:12:28: undefined: c

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073825
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    c := float64((a\
    \ + b) * 0.5)\n    d := float64(math.Pow((c+b) * 0.5, 2))\n    e := float64(math.Pow((c+d)\
    \ * 0.5, 2))\n    area := float64(a + b - c + d - e)\n    area = area / (h * h\
    \ + f * f + d * d + c * c)\n    return area\n}\n\nfunc TestTriangle_Area(t *testing.T)\
    \ {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5,\
    \ 3), expected: 7.5 },\n     { actual: candidate(2, 2), expected: 2.0 },\n   \
    \  { actual: candidate(10, 8), expected: 40.0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpf5qneyg0_test.go:12:23: undefined: b

    /tmp/tmpf5qneyg0_test.go:13:18: undefined: math

    /tmp/tmpf5qneyg0_test.go:13:30: undefined: b

    /tmp/tmpf5qneyg0_test.go:14:18: undefined: math

    /tmp/tmpf5qneyg0_test.go:15:25: undefined: b

    /tmp/tmpf5qneyg0_test.go:16:28: undefined: f

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073826
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    var area float64\n\
    \    if a == 0 || h == 0 {\n        return area\n    }\n\n    if a < h {\n   \
    \     a = h\n        h = a % 2\n    }\n\n    area = a*h*(a + h)/2\n    return\
    \ area\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5, 3), expected: 7.5 },\n     {\
    \ actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10, 8),\
    \ expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpiae72rou_test.go:22:12: cannot use a * h * (a + h) / 2 (value of type
    int) as type float64 in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073825
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    total := 0\n   \
    \ for i := 0; i < a; i++ {\n        for j := 0; j < h; j++ {\n            total\
    \ += i*j\n        }\n    }\n    return total / a\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5, 3), expected: 7.5 },\n     { actual: candidate(2, 2), expected:\
    \ 2.0 },\n     { actual: candidate(10, 8), expected: 40.0 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprwlk8ee1_test.go:18:12: cannot use total / a (value of type int) as type
    float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073826
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    return a * h / 2\n\
    }\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5, 3), expected: 7.5 },\n     {\
    \ actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10, 8),\
    \ expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6kloz02f_test.go:12:12: cannot use a * h / 2 (value of type int) as type
    float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073826
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    return float64(a*h*h)/4\n\
    }\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5, 3), expected: 7.5 },\n     {\
    \ actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10, 8),\
    \ expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpynwmpznp_test.go:30: expected '%!s(float64=7.5)', got '%!s(float64=11.25)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpynwmpznp_test.go:30:\
    \ expected '%!s(float64=40)', got '%!s(float64=160)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073826
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    return float64(a)\
    \ * ((float64(h)-a)/2)\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate\
    \ := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5, 3), expected:\
    \ 7.5 },\n     { actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10,\
    \ 8), expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi5m_56ej_test.go:12:27: invalid operation: float64(h) - a (mismatched
    types float64 and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073826
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    return (a*a + h*h)\
    \ / 2\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5, 3), expected: 7.5 },\n     {\
    \ actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10, 8),\
    \ expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk1v92fog_test.go:12:12: cannot use (a * a + h * h) / 2 (value of type
    int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073825
- exit_code: 0
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    return float64(a)\
    \ * (float64(h) / 2.0)\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate\
    \ := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5, 3), expected:\
    \ 7.5 },\n     { actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10,\
    \ 8), expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073826
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    triangle := (a +\
    \ h) / 2 * math.Pow((a + h) / 2, 2)\n    return math.Cbrt(triangle)\n}\n\nfunc\
    \ TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5, 3), expected: 7.5 },\n     { actual:\
    \ candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10, 8), expected:\
    \ 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpael8w9r1_test.go:12:31: undefined: math

    /tmp/tmpael8w9r1_test.go:13:12: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073826
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    return float64(sqrt(a)\
    \ * tan(M_PI/h))\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate :=\
    \ triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5, 3), expected:\
    \ 7.5 },\n     { actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10,\
    \ 8), expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7oebklwm_test.go:12:20: undefined: sqrt

    /tmp/tmp7oebklwm_test.go:12:30: undefined: tan

    /tmp/tmp7oebklwm_test.go:12:34: undefined: M_PI

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073826
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    return float64(a*(h-a+1))/2.0\n\
    }\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5, 3), expected: 7.5 },\n     {\
    \ actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10, 8),\
    \ expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp2o5nzy1x_test.go:30: expected '%!s(float64=7.5)', got '%!s(float64=-2.5)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__1 (0.00s)\n        tmp2o5nzy1x_test.go:30:\
    \ expected '%!s(float64=2)', got '%!s(float64=1)'\n    --- FAIL: TestTriangle_Area/test_num__2\
    \ (0.00s)\n        tmp2o5nzy1x_test.go:30: expected '%!s(float64=40)', got '%!s(float64=-5)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073826
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    return a * ( 1.0\
    \ / 2 ) * ( 1.0 / 2 ) * h\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate\
    \ := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5, 3), expected:\
    \ 7.5 },\n     { actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10,\
    \ 8), expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_eonhpgj_test.go:12:16: (1.0 / 2) (untyped float constant 0.5) truncated
    to int

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073826
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    if a < 0 || h <\
    \ 0 {\n        return 0.0\n    }\n    return a*h / 2\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5, 3), expected: 7.5 },\n     { actual: candidate(2, 2), expected:\
    \ 2.0 },\n     { actual: candidate(10, 8), expected: 40.0 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphydeg4wg_test.go:15:12: cannot use a * h / 2 (value of type int) as type
    float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073826
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    return float64(a\
    \ + h)*0.5\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5, 3), expected: 7.5 },\n     {\
    \ actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10, 8),\
    \ expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpeqlbe338_test.go:30: expected '%!s(float64=7.5)', got '%!s(float64=4)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpeqlbe338_test.go:30:\
    \ expected '%!s(float64=40)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073827
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    side := float64(a)\
    \ * float64(h)\n    return side * (side*side)/2\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5, 3), expected: 7.5 },\n     { actual: candidate(2, 2), expected:\
    \ 2.0 },\n     { actual: candidate(10, 8), expected: 40.0 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmptu6tp3tg_test.go:31: expected '%!s(float64=7.5)', got '%!s(float64=1687.5)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__1 (0.00s)\n        tmptu6tp3tg_test.go:31:\
    \ expected '%!s(float64=2)', got '%!s(float64=32)'\n    --- FAIL: TestTriangle_Area/test_num__2\
    \ (0.00s)\n        tmptu6tp3tg_test.go:31: expected '%!s(float64=40)', got '%!s(float64=256000)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073827
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    return a * h / 2\n\
    }\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5, 3), expected: 7.5 },\n     {\
    \ actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10, 8),\
    \ expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6kloz02f_test.go:12:12: cannot use a * h / 2 (value of type int) as type
    float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073826
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    if (a==0 && h==0)\
    \ || (a==h){\n        return 1.0\n    }\n    switch {\n    case a>h:\n       \
    \ return 0.0;\n    case a==h:\n        return 2.0;\n    case a<h:\n        return\
    \ triangle_area(h, a) * triangle_area(h, a-1) * triangle_area(h, a-2)\n    }\n\
    }\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5, 3), expected: 7.5 },\n     {\
    \ actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10, 8),\
    \ expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdzv39757_test.go:23:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073826
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    w := float64(2 *\
    \ a) * math.Pi * math.Pow(a, 2)\n    return math.Pi * w*h / 6\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5, 3), expected: 7.5 },\n     { actual: candidate(2, 2), expected:\
    \ 2.0 },\n     { actual: candidate(10, 8), expected: 40.0 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxmi9y0dn_test.go:12:27: undefined: math

    /tmp/tmpxmi9y0dn_test.go:13:12: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073826
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    return (a*a) + (a*h)\
    \ + (a*h)\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5, 3), expected: 7.5 },\n     {\
    \ actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10, 8),\
    \ expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9wl2cln6_test.go:12:12: cannot use (a * a) + (a * h) + (a * h) (value
    of type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073826
- exit_code: 0
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    return float64(a*h)/2\n\
    }\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5, 3), expected: 7.5 },\n     {\
    \ actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10, 8),\
    \ expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073601
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    if h == 0 {\n  \
    \      return a\n    }\n    return a + triangle_area(a+1, h-1)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5, 3), expected: 7.5 },\n     { actual: candidate(2, 2), expected:\
    \ 2.0 },\n     { actual: candidate(10, 8), expected: 40.0 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw2l3x9nx_test.go:13:16: cannot use a (variable of type int) as type float64
    in return statement

    /tmp/tmpw2l3x9nx_test.go:15:12: invalid operation: a + triangle_area(a + 1, h
    - 1) (mismatched types int and float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073826
- exit_code: 0
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    return float64(a*h)\
    \ / 2\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5, 3), expected: 7.5 },\n     {\
    \ actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10, 8),\
    \ expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073694
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    if h == 0 {\n  \
    \      return 0\n    }\n    h /= 2\n    if h == 1 {\n        return 1\n    }\n\
    \    return triangle_area(a, h) * (a + h) * 0.5\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5, 3), expected: 7.5 },\n     { actual: candidate(2, 2), expected:\
    \ 2.0 },\n     { actual: candidate(10, 8), expected: 40.0 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp96_9azb1_test.go:19:12: invalid operation: triangle_area(a, h) * (a +
    h) (mismatched types float64 and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073828
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    if a < 0 || a >\
    \ h {\n        fmt.Printf(\"Invalid triangle area input (%v, %v).\\n\", a, h)\n\
    \        return 0.0\n    }\n    return (a*(h*h))/2.0\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5, 3), expected: 7.5 },\n     { actual: candidate(2, 2), expected:\
    \ 2.0 },\n     { actual: candidate(10, 8), expected: 40.0 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx0jdbs9z_test.go:16:12: cannot use (a * (h * h)) / 2.0 (value of type
    int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073828
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    if a < 0 || h <\
    \ 0 {\n        return math.NaN()\n    }\n\n    return float64(a*h) / 2\n}\n\n\
    func TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5, 3), expected: 7.5 },\n     { actual:\
    \ candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10, 8), expected:\
    \ 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdpkb0vd4_test.go:13:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073828
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    c := float64(a +\
    \ h) / 2\n    d := float64(a + b) / 2\n    if d == 0 {\n        fmt.Println(\"\
    error\")\n        return 0\n    }\n    return c * d - float64(c) * float64(d)\
    \ / 2\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5, 3), expected: 7.5 },\n     {\
    \ actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10, 8),\
    \ expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmph8u551md_test.go:13:22: undefined: b

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073828
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    return (2 * h) +\
    \ a * a\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5, 3), expected: 7.5 },\n     {\
    \ actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10, 8),\
    \ expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyg2y8lkd_test.go:12:12: cannot use (2 * h) + a * a (value of type int)
    as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073828
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    return a * h / 2\n\
    }\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5, 3), expected: 7.5 },\n     {\
    \ actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10, 8),\
    \ expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6kloz02f_test.go:12:12: cannot use a * h / 2 (value of type int) as type
    float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073826
- exit_code: 0
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    ac := float64(a)\
    \ * float64(h)\n    area := ac / 2\n    return area\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5, 3), expected: 7.5 },\n     { actual: candidate(2, 2), expected:\
    \ 2.0 },\n     { actual: candidate(10, 8), expected: 40.0 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073828
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    switch {\n     \
    \   case h == 0:\n            return float64(9) // base case\n        case a <\
    \ h:\n            return float64(a) * float64(triangle_area(a+1, h-1))\n     \
    \   case a > h:\n            return float64(a) * float64(triangle_area(a, h-1))\n\
    \        default:\n            return float64(a) * float64(triangle_area(a, h-1))\
    \ * float64(triangle_area(a+1, h))\n    }\n}\n\nfunc TestTriangle_Area(t *testing.T)\
    \ {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5,\
    \ 3), expected: 7.5 },\n     { actual: candidate(2, 2), expected: 2.0 },\n   \
    \  { actual: candidate(10, 8), expected: 40.0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmps9quxiz4_test.go:39: expected '%!s(float64=7.5)', got '%!s(float64=1125)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__1 (0.00s)\n        tmps9quxiz4_test.go:39:\
    \ expected '%!s(float64=2)', got '%!s(float64=2916)'\n    --- FAIL: TestTriangle_Area/test_num__2\
    \ (0.00s)\n        tmps9quxiz4_test.go:39: expected '%!s(float64=40)', got '%!s(float64=9e+08)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073828
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    if a == 0 {\n  \
    \      return 0.0\n    }\n\n    if h == 0 {\n        return a + triangle_area(a-1,\
    \ 1)\n    }\n\n    if a > h {\n        return triangle_area(a, h) * triangle_area(a\
    \ - h, 1)\n    }\n\n    return triangle_area(a - h, 1) * triangle_area(a-1, 1)\n\
    }\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5, 3), expected: 7.5 },\n     {\
    \ actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10, 8),\
    \ expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr3z93bs1_test.go:17:16: invalid operation: a + triangle_area(a - 1, 1)
    (mismatched types int and float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073828
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    return float64(4*a**2\
    \ - 2*a*h + h*a) * 0.5\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate\
    \ := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5, 3), expected:\
    \ 7.5 },\n     { actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10,\
    \ 8), expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8j4gtnjr_test.go:12:25: invalid operation: cannot indirect 2 (untyped
    int constant)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073828
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    return a*(h-a)/2\n\
    }\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5, 3), expected: 7.5 },\n     {\
    \ actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10, 8),\
    \ expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphr1vl4oi_test.go:12:12: cannot use a * (h - a) / 2 (value of type int)
    as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073828
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    return float64(a\
    \ * h) / float64((a+b)*(a+b+c))\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n\
    \  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5,\
    \ 3), expected: 7.5 },\n     { actual: candidate(2, 2), expected: 2.0 },\n   \
    \  { actual: candidate(10, 8), expected: 40.0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9fhndno1_test.go:12:40: undefined: b

    /tmp/tmp9fhndno1_test.go:12:48: undefined: c

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    return float64(a*h)/2.0\n\
    }\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5, 3), expected: 7.5 },\n     {\
    \ actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10, 8),\
    \ expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073828
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    \n    perimeter\
    \ = a * h\n    \n    area_tri = perimeter * h\n    \n    area_tri = area_tri /\
    \ 2\n    \n    return area_tri\n\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n\
    \  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5,\
    \ 3), expected: 7.5 },\n     { actual: candidate(2, 2), expected: 2.0 },\n   \
    \  { actual: candidate(10, 8), expected: 40.0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp17a_0o3__test.go:13:5: undefined: perimeter

    /tmp/tmp17a_0o3__test.go:15:5: undefined: area_tri

    /tmp/tmp17a_0o3__test.go:15:16: undefined: perimeter

    /tmp/tmp17a_0o3__test.go:17:16: undefined: area_tri

    /tmp/tmp17a_0o3__test.go:19:12: undefined: area_tri

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073828
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    return (float64(a*a)*float64(h*h))/(float64(h*a)+float64(a*a))\n\
    }\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5, 3), expected: 7.5 },\n     {\
    \ actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10, 8),\
    \ expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp6a4_o4tf_test.go:30: expected '%!s(float64=7.5)', got '%!s(float64=5.625)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp6a4_o4tf_test.go:30:\
    \ expected '%!s(float64=40)', got '%!s(float64=35.55555555555556)'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073829
- exit_code: 0
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    result := float64(a\
    \ * h) / 2\n    return result\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n \
    \ candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5,\
    \ 3), expected: 7.5 },\n     { actual: candidate(2, 2), expected: 2.0 },\n   \
    \  { actual: candidate(10, 8), expected: 40.0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073829
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    return float64(a*h*h)/2\n\
    }\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5, 3), expected: 7.5 },\n     {\
    \ actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10, 8),\
    \ expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpf49y9k_f_test.go:30: expected '%!s(float64=7.5)', got '%!s(float64=22.5)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__1 (0.00s)\n        tmpf49y9k_f_test.go:30:\
    \ expected '%!s(float64=2)', got '%!s(float64=4)'\n    --- FAIL: TestTriangle_Area/test_num__2\
    \ (0.00s)\n        tmpf49y9k_f_test.go:30: expected '%!s(float64=40)', got '%!s(float64=320)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073829
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    return float64((a\
    \ + b + c) / 2.0) * (h / 2.0)\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n \
    \ candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5,\
    \ 3), expected: 7.5 },\n     { actual: candidate(2, 2), expected: 2.0 },\n   \
    \  { actual: candidate(10, 8), expected: 40.0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy3kmkklw_test.go:12:25: undefined: b

    /tmp/tmpy3kmkklw_test.go:12:29: undefined: c

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073828
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    if h < a / 2 {\n\
    \        return 0.0 // a or h must be equal\n    }\n\n    area_tri := math.Sqrt(math.Pow(float64(h-a),\
    \ 2.0) + math.Pow(float64(a), 2.0))\n    return area_tri\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5, 3), expected: 7.5 },\n     { actual: candidate(2, 2), expected:\
    \ 2.0 },\n     { actual: candidate(10, 8), expected: 40.0 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6abt6sku_test.go:16:17: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073828
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    return (a + h) *\
    \ (h - a + 1) / (2.0 * h)\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate\
    \ := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5, 3), expected:\
    \ 7.5 },\n     { actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10,\
    \ 8), expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvvrk4uay_test.go:12:12: cannot use (a + h) * (h - a + 1) / (2.0 * h) (value
    of type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073828
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    return float64(a*(h-a+1))/2\n\
    }\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5, 3), expected: 7.5 },\n     {\
    \ actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10, 8),\
    \ expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpfcc64kri_test.go:30: expected '%!s(float64=7.5)', got '%!s(float64=-2.5)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__1 (0.00s)\n        tmpfcc64kri_test.go:30:\
    \ expected '%!s(float64=2)', got '%!s(float64=1)'\n    --- FAIL: TestTriangle_Area/test_num__2\
    \ (0.00s)\n        tmpfcc64kri_test.go:30: expected '%!s(float64=40)', got '%!s(float64=-5)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073829
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    return h*(h*a +\
    \ a*a*a - 3*a*h)/6.0\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate\
    \ := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5, 3), expected:\
    \ 7.5 },\n     { actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10,\
    \ 8), expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprfp5psdb_test.go:12:12: cannot use h * (h * a + a * a * a - 3 * a * h)
    / 6.0 (value of type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073828
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    return float64(a\
    \ + h) * (a + h + 1) * (a + h + 2)\n}\n\nfunc TestTriangle_Area(t *testing.T)\
    \ {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5,\
    \ 3), expected: 7.5 },\n     { actual: candidate(2, 2), expected: 2.0 },\n   \
    \  { actual: candidate(10, 8), expected: 40.0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg7wo35h7_test.go:12:12: invalid operation: float64(a + h) * (a + h + 1)
    (mismatched types float64 and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073829
- exit_code: 0
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    return float64(a*h)/2\n\
    }\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5, 3), expected: 7.5 },\n     {\
    \ actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10, 8),\
    \ expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073601
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    if a < 1 || h <\
    \ 1 {\n        return 0.0\n    }\n    c := a * ((2 * h) - a)\n    return float64(c)\
    \ / float64((2 * h * a))\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate\
    \ := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5, 3), expected:\
    \ 7.5 },\n     { actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10,\
    \ 8), expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp86phgjbk_test.go:34: expected '%!s(float64=7.5)', got '%!s(float64=0.16666666666666666)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__1 (0.00s)\n        tmp86phgjbk_test.go:34:\
    \ expected '%!s(float64=2)', got '%!s(float64=0.5)'\n    --- FAIL: TestTriangle_Area/test_num__2\
    \ (0.00s)\n        tmp86phgjbk_test.go:34: expected '%!s(float64=40)', got '%!s(float64=0.375)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073829
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    b := 2 * h - a\n\
    \    c := b * b - a\n    if c < 0 {\n        c = 0\n    }\n    return float64(c)\n\
    }\n</code>\n<|/ a tags=go |>\n<| a |>\nI did some testing and I think I've arrived\
    \ at the best answer.\nThe function which does this is called Heron's formula.\n\
    I did some benchmarking and found out that my solution does indeed run faster.\n\
    It does take about 3 nanoseconds to calculate a 3000 x 3000 array of random numbers.\
    \ That's quite a lot.\nHere's the code for the benchmark:\n<code>\npackage main\n\
    \nimport (\n    \"bufio\"\n    \"math/rand\"\n    \"testing\"\n    \"time\"\n\
    )\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5, 3), expected: 7.5 },\n     {\
    \ actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10, 8),\
    \ expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp7a0x1lz9_test.go:19:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073829
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    if a < 0 || h <\
    \ 0 {\n        return 0\n    }\n    if a == 0 || h == 0 {\n        return 1\n\
    \    }\n    \n    c := 0\n    for i := 0; i < a; i++ {\n        for j := 0; j\
    \ < h; j++ {\n            c += i*j\n        }\n    }\n    return 1/(2*a) * c\n\
    }\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5, 3), expected: 7.5 },\n     {\
    \ actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10, 8),\
    \ expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcg6y444s_test.go:25:12: cannot use 1 / (2 * a) * c (value of type int)
    as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    l := float64(a)\
    \ * float64(h) / 2\n    area := float64(l) * float64(math.Sqrt(float64(4 * l)))\n\
    \    return area\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate :=\
    \ triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5, 3), expected:\
    \ 7.5 },\n     { actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10,\
    \ 8), expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_1_yhw4x_test.go:13:34: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    return float64(4*a)/float64(h*h)\n\
    }\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5, 3), expected: 7.5 },\n     {\
    \ actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10, 8),\
    \ expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpicygu07l_test.go:30: expected '%!s(float64=7.5)', got '%!s(float64=2.2222222222222223)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpicygu07l_test.go:30:\
    \ expected '%!s(float64=40)', got '%!s(float64=0.625)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073830
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    // Triangle is area\
    \ of 1/3\n    area := float64(h) / (a * a)\n    return area\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5, 3), expected: 7.5 },\n     { actual: candidate(2, 2), expected:\
    \ 2.0 },\n     { actual: candidate(10, 8), expected: 40.0 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpaowoesgd_test.go:13:13: invalid operation: float64(h) / (a * a) (mismatched
    types float64 and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    return a*(a*a +\
    \ h*h)\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5, 3), expected: 7.5 },\n     {\
    \ actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10, 8),\
    \ expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcme53lfy_test.go:12:12: cannot use a * (a * a + h * h) (value of type
    int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    return a*(h*h)\n\
    }\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5, 3), expected: 7.5 },\n     {\
    \ actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10, 8),\
    \ expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2klf2mm3_test.go:12:12: cannot use a * (h * h) (value of type int) as
    type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    areaSquare := a\
    \ * a\n    areaCube := a * a * a\n    areaQuad := a * a * a * a\n    areaTetrahedron\
    \ := a * a * a * a * a\n    \n    if h == 1 {\n        return areaSquare\n   \
    \ }\n    if h == 2 {\n        return (areaQuad + areaTetrahedron) / 2\n    }\n\
    \    if h == 3 {\n        return (areaCube + (a * a) * h) / 2\n    }\n    if h\
    \ == 4 {\n        return (areaQuad + areaTetrahedron + areaCube + (a * a) * h\
    \ * h) / 2\n    }\n    fmt.Println(\"Unexpected value:\", h)\n    return 0\n}\n\
    \nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5, 3), expected: 7.5 },\n     { actual:\
    \ candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10, 8), expected:\
    \ 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0nx7x5eb_test.go:18:16: cannot use areaSquare (variable of type int) as
    type float64 in return statement

    /tmp/tmp0nx7x5eb_test.go:21:16: cannot use (areaQuad + areaTetrahedron) / 2 (value
    of type int) as type float64 in return statement

    /tmp/tmp0nx7x5eb_test.go:24:16: cannot use (areaCube + (a * a) * h) / 2 (value
    of type int) as type float64 in return statement

    /tmp/tmp0nx7x5eb_test.go:27:16: cannot use (areaQuad + areaTetrahedron + areaCube
    + (a * a) * h * h) / 2 (value of type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    area := 0\n    \n\
    \    switch a && h {\n        case a > h:\n            area = a + h\n        default:\n\
    \            area = h\n    }\n    \n    return float64(area) / 8\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5, 3), expected: 7.5 },\n     { actual: candidate(2, 2), expected:\
    \ 2.0 },\n     { actual: candidate(10, 8), expected: 40.0 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6yi00sxt_test.go:14:12: invalid operation: operator && not defined on
    a (variable of type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    return a * (a +\
    \ 1) * ((2 * h) - a)\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate\
    \ := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5, 3), expected:\
    \ 7.5 },\n     { actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10,\
    \ 8), expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpag_8dtyh_test.go:12:12: cannot use a * (a + 1) * ((2 * h) - a) (value
    of type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    return (1 / 2) *\
    \ float64(a + a + h) * float64(a + h + h)\n}\n\nfunc TestTriangle_Area(t *testing.T)\
    \ {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5,\
    \ 3), expected: 7.5 },\n     { actual: candidate(2, 2), expected: 2.0 },\n   \
    \  { actual: candidate(10, 8), expected: 40.0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpekjyb39r_test.go:30: expected '%!s(float64=7.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__1 (0.00s)\n        tmpekjyb39r_test.go:30:\
    \ expected '%!s(float64=2)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__2\
    \ (0.00s)\n        tmpekjyb39r_test.go:30: expected '%!s(float64=40)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073831
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    return a * ((a *\
    \ (a - h) * (a + h) + h * h) / 2)\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n\
    \  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5,\
    \ 3), expected: 7.5 },\n     { actual: candidate(2, 2), expected: 2.0 },\n   \
    \  { actual: candidate(10, 8), expected: 40.0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkm65heuj_test.go:12:12: cannot use a * ((a * (a - h) * (a + h) + h * h)
    / 2) (value of type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    return float64((2\
    \ * a * h) / 2)\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5, 3), expected: 7.5 },\n     {\
    \ actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10, 8),\
    \ expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpciwv3lzr_test.go:30: expected '%!s(float64=7.5)', got '%!s(float64=15)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__1 (0.00s)\n        tmpciwv3lzr_test.go:30:\
    \ expected '%!s(float64=2)', got '%!s(float64=4)'\n    --- FAIL: TestTriangle_Area/test_num__2\
    \ (0.00s)\n        tmpciwv3lzr_test.go:30: expected '%!s(float64=40)', got '%!s(float64=80)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073831
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    s := a + h\n   \
    \ area := 0.5 * s * (s - a) * (s - h)\n    return area\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5, 3), expected: 7.5 },\n     { actual: candidate(2, 2), expected:\
    \ 2.0 },\n     { actual: candidate(10, 8), expected: 40.0 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpon7y4esq_test.go:13:13: 0.5 (untyped float constant) truncated to int

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073831
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    return a * h / 2\n\
    }\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5, 3), expected: 7.5 },\n     {\
    \ actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10, 8),\
    \ expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6kloz02f_test.go:12:12: cannot use a * h / 2 (value of type int) as type
    float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073826
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    area := 0\n    if\
    \ a >= h {\n        fmt.Println(\"You are not able to calculate a triangle with\
    \ length greater than the height of the triangle!\")\n        area = -1\n    }\n\
    \    if a == 0 {\n        fmt.Println(\"You cannot calculate a triangle with a\
    \ length equal to zero!\")\n        area = -1\n    }\n    if a < 0 {\n       \
    \ fmt.Println(\"You cannot calculate a triangle with a length less than zero!\"\
    )\n        area = -1\n    }\n    if a > h {\n        fmt.Println(\"You cannot\
    \ calculate a triangle with a length greater than the height of the triangle!\"\
    )\n        area = -1\n    }\n    if a == h {\n        fmt.Println(\"You cannot\
    \ calculate a triangle with a length equal to the height of the triangle!\")\n\
    \        area = -1\n    }\n\n    return area\n}\n\nfunc TestTriangle_Area(t *testing.T)\
    \ {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5,\
    \ 3), expected: 7.5 },\n     { actual: candidate(2, 2), expected: 2.0 },\n   \
    \  { actual: candidate(10, 8), expected: 40.0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv_4a_41o_test.go:34:12: cannot use area (variable of type int) as type
    float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073831
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    return (a*a*h)/3\n\
    }\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5, 3), expected: 7.5 },\n     {\
    \ actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10, 8),\
    \ expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppyafjmqy_test.go:12:12: cannot use (a * a * h) / 3 (value of type int)
    as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073831
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    s := 0\n    for\
    \ i := 0; i < a; i++ {\n        s += (i / a) * (h / 2)\n    }\n    return s\n\
    }\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5, 3), expected: 7.5 },\n     {\
    \ actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10, 8),\
    \ expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw2vej9gk_test.go:16:12: cannot use s (variable of type int) as type float64
    in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073831
- exit_code: 0
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    return float64(a\
    \ * h) / 2\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5, 3), expected: 7.5 },\n     {\
    \ actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10, 8),\
    \ expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073601
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    area := 0.0\n  \
    \  switch {\n    case a + h < 4:\n        return 1.0\n    case a < 4 && h < 4:\n\
    \        return 0.0\n    default:\n        return (area_triangle(a + h) / area_triangle(a))\
    \ * area_triangle(h)\n    }\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate\
    \ := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5, 3), expected:\
    \ 7.5 },\n     { actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10,\
    \ 8), expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgsoh_wve_test.go:12:5: area declared but not used

    /tmp/tmpgsoh_wve_test.go:19:17: undefined: area_triangle

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073831
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    // Assume all sides\
    \ have equal lengths.\n    side := h\n\n    area := float64(side) * side / 2\n\
    \n    return area\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate :=\
    \ triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5, 3), expected:\
    \ 7.5 },\n     { actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10,\
    \ 8), expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc69rismk_test.go:15:13: invalid operation: float64(side) * side (mismatched
    types float64 and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073831
- exit_code: 0
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    return float64(a*h)/2\n\
    }\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5, 3), expected: 7.5 },\n     {\
    \ actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10, 8),\
    \ expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073601
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    return float64(a*(h*h\
    \ + a*h)/2.0)\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5, 3), expected: 7.5 },\n     {\
    \ actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10, 8),\
    \ expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpme1djvz__test.go:30: expected '%!s(float64=7.5)', got '%!s(float64=60)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__1 (0.00s)\n        tmpme1djvz__test.go:30:\
    \ expected '%!s(float64=2)', got '%!s(float64=8)'\n    --- FAIL: TestTriangle_Area/test_num__2\
    \ (0.00s)\n        tmpme1djvz__test.go:30: expected '%!s(float64=40)', got '%!s(float64=720)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073832
- exit_code: 0
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    return float64(a*h)\
    \ / 2\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5, 3), expected: 7.5 },\n     {\
    \ actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10, 8),\
    \ expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073694
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    return float64(triangle_triangle(a,\
    \ h)) / float64(h)\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate :=\
    \ triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5, 3), expected:\
    \ 7.5 },\n     { actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10,\
    \ 8), expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz6kg9y1z_test.go:12:20: undefined: triangle_triangle

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073831
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    return float64(a\
    \ * a * h) / 2\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5, 3), expected: 7.5 },\n     {\
    \ actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10, 8),\
    \ expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpx2545f_u_test.go:30: expected '%!s(float64=7.5)', got '%!s(float64=37.5)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__1 (0.00s)\n        tmpx2545f_u_test.go:30:\
    \ expected '%!s(float64=2)', got '%!s(float64=4)'\n    --- FAIL: TestTriangle_Area/test_num__2\
    \ (0.00s)\n        tmpx2545f_u_test.go:30: expected '%!s(float64=40)', got '%!s(float64=400)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073832
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    return float64((2.0\
    \ * a + h) / 2.0)\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate :=\
    \ triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5, 3), expected:\
    \ 7.5 },\n     { actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10,\
    \ 8), expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmps7mejzru_test.go:30: expected '%!s(float64=7.5)', got '%!s(float64=6)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__1 (0.00s)\n        tmps7mejzru_test.go:30:\
    \ expected '%!s(float64=2)', got '%!s(float64=3)'\n    --- FAIL: TestTriangle_Area/test_num__2\
    \ (0.00s)\n        tmps7mejzru_test.go:30: expected '%!s(float64=40)', got '%!s(float64=14)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073832
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    return a * float64(h)\
    \ / 2\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5, 3), expected: 7.5 },\n     {\
    \ actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10, 8),\
    \ expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr8lc8v7y_test.go:12:12: invalid operation: a * float64(h) (mismatched
    types int and float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073832
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    s := a / h\n   \
    \ return s * s\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5, 3), expected: 7.5 },\n     {\
    \ actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10, 8),\
    \ expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8dhlim54_test.go:13:12: cannot use s * s (value of type int) as type float64
    in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073832
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    return float64(a\
    \ * h) / float64(2 * (a + h))\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n \
    \ candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5,\
    \ 3), expected: 7.5 },\n     { actual: candidate(2, 2), expected: 2.0 },\n   \
    \  { actual: candidate(10, 8), expected: 40.0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpb1rwa7y5_test.go:30: expected '%!s(float64=7.5)', got '%!s(float64=0.9375)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__1 (0.00s)\n        tmpb1rwa7y5_test.go:30:\
    \ expected '%!s(float64=2)', got '%!s(float64=0.5)'\n    --- FAIL: TestTriangle_Area/test_num__2\
    \ (0.00s)\n        tmpb1rwa7y5_test.go:30: expected '%!s(float64=40)', got '%!s(float64=2.2222222222222223)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073833
- exit_code: 0
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    return float64(a*h)/2\n\
    }\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5, 3), expected: 7.5 },\n     {\
    \ actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10, 8),\
    \ expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073601
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    return ((a + h)\
    \ / 2) * h\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5, 3), expected: 7.5 },\n     {\
    \ actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10, 8),\
    \ expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7tu341kz_test.go:12:12: cannot use ((a + h) / 2) * h (value of type int)
    as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073833
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    if a >= h {\n  \
    \      return 0.0\n    }\n    if a == 0 || h == 0 {\n        return 0.0\n    }\n\
    \    return float64(a) / float64(4 * h * a)\n}\n\nfunc TestTriangle_Area(t *testing.T)\
    \ {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5,\
    \ 3), expected: 7.5 },\n     { actual: candidate(2, 2), expected: 2.0 },\n   \
    \  { actual: candidate(10, 8), expected: 40.0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpxj_a26pq_test.go:36: expected '%!s(float64=7.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__1 (0.00s)\n        tmpxj_a26pq_test.go:36:\
    \ expected '%!s(float64=2)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__2\
    \ (0.00s)\n        tmpxj_a26pq_test.go:36: expected '%!s(float64=40)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073833
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    x := h/2\n    y\
    \ := a * (x / a)\n    z := y * (x / a)\n    return z\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5, 3), expected: 7.5 },\n     { actual: candidate(2, 2), expected:\
    \ 2.0 },\n     { actual: candidate(10, 8), expected: 40.0 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpooy24o6r_test.go:15:12: cannot use z (variable of type int) as type float64
    in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073833
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    triangle_area :=\
    \ 0\n\n    for i := 1; i <= a; i++ {\n        triangle_area += ((i * a) - i) *\
    \ (i * (i + 1) * (h + 1))\n    }\n\n    return triangle_area / 6\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5, 3), expected: 7.5 },\n     { actual: candidate(2, 2), expected:\
    \ 2.0 },\n     { actual: candidate(10, 8), expected: 40.0 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpix340hm__test.go:18:12: cannot use triangle_area / 6 (value of type int)
    as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073833
- exit_code: 0
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    return float64(a*h)/2\n\
    }\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5, 3), expected: 7.5 },\n     { actual:\
    \ candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10, 8), expected:\
    \ 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073833
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    return float64(a)\
    \ * (float64(a*h)/(2*a + h))\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate\
    \ := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5, 3), expected:\
    \ 7.5 },\n     { actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10,\
    \ 8), expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuwisc_9f_test.go:12:26: invalid operation: float64(a * h) / (2 * a + h)
    (mismatched types float64 and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073833
- exit_code: 0
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    if a < 0 || h <\
    \ 0 {\n        return -1\n    }\n    return float64(a * h) / 2\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5, 3), expected: 7.5 },\n     { actual: candidate(2, 2), expected:\
    \ 2.0 },\n     { actual: candidate(10, 8), expected: 40.0 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073833
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    // triangle area\
    \ is calculated using Heron's formula.\n    // https://en.wikipedia.org/wiki/Heron%27s_formula\n\
    \    sqrt_area := float64(a*a+h*h*0.5) // area of a triangle with side of a &\
    \ h\n    // Heron's formula is known to have problem for negative sides.\n   \
    \ // http://mathworld.wolfram.com/HeronsFormula.html\n    // Use sqrt instead\
    \ if needed.\n    if sqrt_area < 0 {\n        sqrt_area = sqrt_area * -1.0\n \
    \   }\n    return sqrt_area\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate\
    \ := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5, 3), expected:\
    \ 7.5 },\n     { actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10,\
    \ 8), expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr24m26yr_test.go:14:34: 0.5 (untyped float constant) truncated to int

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073833
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    side1 := a / 2\n\
    \    side2 := (h - a) / 2\n    return float64(side1 * side2)\n}\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5, 3), expected: 7.5 },\n     { actual: candidate(2, 2), expected:\
    \ 2.0 },\n     { actual: candidate(10, 8), expected: 40.0 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpdbb69799_test.go:31: expected '%!s(float64=7.5)', got '%!s(float64=-2)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__1 (0.00s)\n        tmpdbb69799_test.go:31:\
    \ expected '%!s(float64=2)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__2\
    \ (0.00s)\n        tmpdbb69799_test.go:31: expected '%!s(float64=40)', got '%!s(float64=-5)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073833
- exit_code: 0
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    return float64(a*h)/2\n\
    }\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5, 3), expected: 7.5 },\n     {\
    \ actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10, 8),\
    \ expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073601
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    return float64(6*a*(h-a+2))/9\n\
    }\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5, 3), expected: 7.5 },\n     {\
    \ actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10, 8),\
    \ expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpjo6yqv0l_test.go:30: expected '%!s(float64=7.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__1 (0.00s)\n        tmpjo6yqv0l_test.go:30:\
    \ expected '%!s(float64=2)', got '%!s(float64=2.6666666666666665)'\n    --- FAIL:\
    \ TestTriangle_Area/test_num__2 (0.00s)\n        tmpjo6yqv0l_test.go:30: expected\
    \ '%!s(float64=40)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073833
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    if a == 0 || h ==\
    \ 0 {\n        return 1.0\n    }\n\n    h /= 2\n\n    return (a * a + h * h) /\
    \ 2\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5, 3), expected: 7.5 },\n     {\
    \ actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10, 8),\
    \ expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjf8595xz_test.go:18:12: cannot use (a * a + h * h) / 2 (value of type
    int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073833
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    return (a+b+c)/2\
    \ * (h - b - a)\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5, 3), expected: 7.5 },\n     {\
    \ actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10, 8),\
    \ expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4b_ak33b_test.go:12:15: undefined: b

    /tmp/tmp4b_ak33b_test.go:12:17: undefined: c

    /tmp/tmp4b_ak33b_test.go:12:29: undefined: b

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073833
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    if h < a {\n   \
    \     return 0\n    } else {\n        return (2 * ((2 * a + b) * h)) / ((2 * a)\
    \ + (2 * b))\n    }\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate\
    \ := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5, 3), expected:\
    \ 7.5 },\n     { actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10,\
    \ 8), expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc9u8f3c7_test.go:15:31: undefined: b

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073833
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    if a < 0 || h <\
    \ 0 {\n        fmt.Println(\"wrong sides length\")\n        return 0.0\n    }\n\
    \    var a float64 = (a + h) / 2\n    var h float64 = h\n    var b float64 = (a\
    \ + h) / 2\n    var c float64 = (a * h) / 2\n\n    if a > 0 && b > 0 && c > 0\
    \ {\n        return a * b * c\n    }\n    if a == 0 || h == 0 {\n        return\
    \ 0.0\n    }\n    if a > 0 {\n        a = a - h\n        b = b - h\n        c\
    \ = c - h\n        return a + b + c\n    }\n    if b > 0 {\n        b = b - h\n\
    \        c = c - h\n        return b + c\n    }\n    if c > 0 {\n        c = c\
    \ - h\n        return c\n    }\n}\n</code>\n<|/ a tags=go dscore=0 |>\n<| c |>\n\
    It would be nice if you could edit your answer with some explanation of your code.\n\
    <|/ c |>\n<| a tags=go |>\nThis is my implementation:\n<code>\npackage main\n\n\
    import (\n    \"fmt\"\n    \"math\"\n)\n\nfunc TestTriangle_Area(t *testing.T)\
    \ {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5,\
    \ 3), expected: 7.5 },\n     { actual: candidate(2, 2), expected: 2.0 },\n   \
    \  { actual: candidate(10, 8), expected: 40.0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmprj6pvsem_test.go:43:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073832
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    if a > h {\n   \
    \     fmt.Println(\"a: \", a, \"high: \", h)\n    }\n    double := float64(a)\
    \ * ((float64(h) - float64(a)) / 2)\n    return double\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5, 3), expected: 7.5 },\n     { actual: candidate(2, 2), expected:\
    \ 2.0 },\n     { actual: candidate(10, 8), expected: 40.0 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "a:  5 high:  3\na:  10 high:  8\n--- FAIL: TestTriangle_Area (0.00s)\n\
    \    --- FAIL: TestTriangle_Area/test_num__0 (0.00s)\n        tmpozz0_i4v_test.go:34:\
    \ expected '%!s(float64=7.5)', got '%!s(float64=-5)'\n    --- FAIL: TestTriangle_Area/test_num__1\
    \ (0.00s)\n        tmpozz0_i4v_test.go:34: expected '%!s(float64=2)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpozz0_i4v_test.go:34:\
    \ expected '%!s(float64=40)', got '%!s(float64=-10)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073834
- exit_code: 0
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    return float64(a)\
    \ * float64(h) / 2\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate :=\
    \ triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5, 3), expected:\
    \ 7.5 },\n     { actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10,\
    \ 8), expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073601
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    switch {\n    case\
    \ a > h:\n        return DoubleNaN\n    case a == h:\n        return Double1\n\
    \    case a < h:\n        return Double0\n    }\n    c := a - h\n    c /= 2\n\
    \    b := Double0\n    d := Double1\n    if c > 0 {\n        d *= (1 - math.Pow(float64(1\
    \ - c), 2))\n        b = Double1\n    } else {\n        d *= (c + math.Pow(float64(1\
    \ - c), 2))\n        b = Double0\n    }\n    return a / math.Sqrt(b * d * d)\n\
    }\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5, 3), expected: 7.5 },\n     {\
    \ actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10, 8),\
    \ expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1r26n9rb_test.go:14:16: undefined: DoubleNaN

    /tmp/tmp1r26n9rb_test.go:16:16: undefined: Double1

    /tmp/tmp1r26n9rb_test.go:18:16: undefined: Double0

    /tmp/tmp1r26n9rb_test.go:22:10: undefined: Double0

    /tmp/tmp1r26n9rb_test.go:23:10: undefined: Double1

    /tmp/tmp1r26n9rb_test.go:25:19: undefined: math

    /tmp/tmp1r26n9rb_test.go:26:13: undefined: Double1

    /tmp/tmp1r26n9rb_test.go:28:19: undefined: math

    /tmp/tmp1r26n9rb_test.go:29:13: undefined: Double0

    /tmp/tmp1r26n9rb_test.go:31:16: undefined: math

    /tmp/tmp1r26n9rb_test.go:31:16: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073833
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    return a * (h /\
    \ 2)\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5, 3), expected: 7.5 },\n     {\
    \ actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10, 8),\
    \ expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcj2cm86a_test.go:12:12: cannot use a * (h / 2) (value of type int) as
    type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073833
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    if a <= 0 || h <=\
    \ 0 {\n        return 0.0\n    }\n    return (a + h)*(a+h)*(3.0-2.0*a)/4.0\n}\n\
    \nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5, 3), expected: 7.5 },\n     { actual:\
    \ candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10, 8), expected:\
    \ 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjw35pq7x_test.go:15:12: cannot use (a + h) * (a + h) * (3.0 - 2.0 * a)
    / 4.0 (value of type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073834
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    return ((float64(a\
    \ * a)) / 2) * (h / 2)\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate\
    \ := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5, 3), expected:\
    \ 7.5 },\n     { actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10,\
    \ 8), expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2avaat9w_test.go:12:12: invalid operation: ((float64(a * a)) / 2) * (h
    / 2) (mismatched types float64 and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073834
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    var a float64\n\
    \    var h float64\n    if h > a && h > 0 {\n        a = h\n        h = 0\n  \
    \  }\n    return a * (2 * h / 3 * (a - h) + 1)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5, 3), expected: 7.5 },\n     { actual: candidate(2, 2), expected:\
    \ 2.0 },\n     { actual: candidate(10, 8), expected: 40.0 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpym63u7b0_test.go:12:9:\
    \ a redeclared in this block\n\t/tmp/tmpym63u7b0_test.go:11:20: other declaration\
    \ of a\n/tmp/tmpym63u7b0_test.go:13:9: h redeclared in this block\n\t/tmp/tmpym63u7b0_test.go:11:27:\
    \ other declaration of h\n/tmp/tmpym63u7b0_test.go:18:12: cannot use a * (2 *\
    \ h / 3 * (a - h) + 1) (value of type int) as type float64 in return statement\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073834
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    return (a*a) * (h*h)\n\
    }\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5, 3), expected: 7.5 },\n     {\
    \ actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10, 8),\
    \ expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd993obdt_test.go:12:12: cannot use (a * a) * (h * h) (value of type int)
    as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073834
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    var area float64\n\
    \n    if h == 0 {\n        area = 1.0\n    } else {\n        area = float64(h)\
    \ * float64(sqrt(3.0) * pow((a + h), 3.0)) / (3 * a)\n    }\n\n    return area\n\
    }\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5, 3), expected: 7.5 },\n     {\
    \ actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10, 8),\
    \ expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc4jf9nk4_test.go:17:37: undefined: sqrt

    /tmp/tmpc4jf9nk4_test.go:17:49: undefined: pow

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073834
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    h /= 2\n    return\
    \ a*a*h*h\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5, 3), expected: 7.5 },\n     {\
    \ actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10, 8),\
    \ expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjwm754t3_test.go:13:12: cannot use a * a * h * h (value of type int) as
    type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073835
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    if a > h {\n   \
    \     return 0\n    }\n    if a < 0 {\n        return 0\n    }\n    if h < 0 {\n\
    \        return 0\n    }\n    if h == 0 {\n        return 0.5 * float64(a + b)\n\
    \    }\n    return float64((a + b + h) / 2)\n}\n\nfunc TestTriangle_Area(t *testing.T)\
    \ {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5,\
    \ 3), expected: 7.5 },\n     { actual: candidate(2, 2), expected: 2.0 },\n   \
    \  { actual: candidate(10, 8), expected: 40.0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpllh_ihrl_test.go:22:34: undefined: b

    /tmp/tmpllh_ihrl_test.go:24:25: undefined: b

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073835
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    var a, b, c int\n\
    \    if a > h {\n        a = h\n    }\n    if b > h {\n        b = h\n    }\n\
    \    if c > h {\n        c = h\n    }\n    total := ((a + b + c) / 2) * math.Sqrt(math.Pow(float64(b\
    \ - a), 2.0) + math.Pow(float64(c - b), 2.0))\n    return total\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5, 3), expected: 7.5 },\n     { actual: candidate(2, 2), expected:\
    \ 2.0 },\n     { actual: candidate(10, 8), expected: 40.0 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpr0z1tkoj_test.go:12:9:\
    \ a redeclared in this block\n\t/tmp/tmpr0z1tkoj_test.go:11:20: other declaration\
    \ of a\n/tmp/tmpr0z1tkoj_test.go:22:34: undefined: math\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073835
- exit_code: 0
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    return float64(a*h)/2\n\
    }\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5, 3), expected: 7.5 },\n     {\
    \ actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10, 8),\
    \ expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073601
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    c := a*(h + h*h)/2\n\
    \    return c\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5, 3), expected: 7.5 },\n     {\
    \ actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10, 8),\
    \ expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpet49g701_test.go:13:12: cannot use c (variable of type int) as type float64
    in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073835
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    return ((a + b +\
    \ c) / 2) * (h / 2)\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate\
    \ := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5, 3), expected:\
    \ 7.5 },\n     { actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10,\
    \ 8), expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjuwuiph6_test.go:12:18: undefined: b

    /tmp/tmpjuwuiph6_test.go:12:22: undefined: c

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073835
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    return float64(a\
    \ + b + c) / float64(h)\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate\
    \ := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5, 3), expected:\
    \ 7.5 },\n     { actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10,\
    \ 8), expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp574mf7dv_test.go:12:24: undefined: b

    /tmp/tmp574mf7dv_test.go:12:28: undefined: c

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073835
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    if a == 0 && h ==\
    \ 0 {\n        return 0\n    }\n\n    switch {\n    case a < 2:\n        return\
    \ float64(a * h / 2)\n    case a < h:\n        return float64(a * triangle_area(a-1,\
    \ h))\n    default:\n        return float64(triangle_area(a-1, h) * triangle_area(a-2,\
    \ h))\n    }\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5, 3), expected: 7.5 },\n     {\
    \ actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10, 8),\
    \ expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb8z7_du__test.go:20:24: invalid operation: a * triangle_area(a - 1, h)
    (mismatched types int and float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073835
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    return float64(a+h)\
    \ * float64(a+h+a) / float64(a+h+a+h)\n}\n\nfunc TestTriangle_Area(t *testing.T)\
    \ {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5,\
    \ 3), expected: 7.5 },\n     { actual: candidate(2, 2), expected: 2.0 },\n   \
    \  { actual: candidate(10, 8), expected: 40.0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp3xkiicx__test.go:30: expected '%!s(float64=7.5)', got '%!s(float64=6.5)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__1 (0.00s)\n        tmp3xkiicx__test.go:30:\
    \ expected '%!s(float64=2)', got '%!s(float64=3)'\n    --- FAIL: TestTriangle_Area/test_num__2\
    \ (0.00s)\n        tmp3xkiicx__test.go:30: expected '%!s(float64=40)', got '%!s(float64=14)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073835
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    return float64(a\
    \ * h * h) / (4 * h * a)\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate\
    \ := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5, 3), expected:\
    \ 7.5 },\n     { actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10,\
    \ 8), expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw_7hql62_test.go:12:12: invalid operation: float64(a * h * h) / (4 * h
    * a) (mismatched types float64 and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073835
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    return a / (2 *\
    \ h) * float64(h)\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate :=\
    \ triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5, 3), expected:\
    \ 7.5 },\n     { actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10,\
    \ 8), expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo_mshvy1_test.go:12:12: invalid operation: a / (2 * h) * float64(h) (mismatched
    types int and float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073835
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    var area float64\
    \ = 0\n\n    for i := 1; i <= h; i++ {\n        area += a*(math.Pow(float64(i)/a,\
    \ float64(h-i)))\n    }\n\n    return area\n}\n\nfunc TestTriangle_Area(t *testing.T)\
    \ {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5,\
    \ 3), expected: 7.5 },\n     { actual: candidate(2, 2), expected: 2.0 },\n   \
    \  { actual: candidate(10, 8), expected: 40.0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp3ibq1xr_test.go:15:20: undefined: math

    /tmp/tmpp3ibq1xr_test.go:15:29: invalid operation: float64(i) / a (mismatched
    types float64 and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073835
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    area := float64(a)\
    \ * (float64(h) * float64(h))\n    return area\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5, 3), expected: 7.5 },\n     { actual: candidate(2, 2), expected:\
    \ 2.0 },\n     { actual: candidate(10, 8), expected: 40.0 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmppf6gxehf_test.go:31: expected '%!s(float64=7.5)', got '%!s(float64=45)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__1 (0.00s)\n        tmppf6gxehf_test.go:31:\
    \ expected '%!s(float64=2)', got '%!s(float64=8)'\n    --- FAIL: TestTriangle_Area/test_num__2\
    \ (0.00s)\n        tmppf6gxehf_test.go:31: expected '%!s(float64=40)', got '%!s(float64=640)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073836
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    return (a + b +\
    \ c) / 3\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5, 3), expected: 7.5 },\n     {\
    \ actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10, 8),\
    \ expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd9spk0p__test.go:12:17: undefined: b

    /tmp/tmpd9spk0p__test.go:12:21: undefined: c

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073835
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    t := a * (a-1) *\
    \ h / 2\n    return t\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate\
    \ := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5, 3), expected:\
    \ 7.5 },\n     { actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10,\
    \ 8), expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyuobaryi_test.go:13:12: cannot use t (variable of type int) as type float64
    in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073835
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    return a*a*h/8\n\
    }\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5, 3), expected: 7.5 },\n     {\
    \ actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10, 8),\
    \ expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkka5ju44_test.go:12:12: cannot use a * a * h / 8 (value of type int) as
    type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073835
- exit_code: 0
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    return float64(a*h)/2.0\n\
    }\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5, 3), expected: 7.5 },\n     {\
    \ actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10, 8),\
    \ expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073828
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    sqrt_area_side :=\
    \ float64(sqrt(float64(h*h + a*a)))\n    triangle_side_area := float64(triangle_side_length(h,\
    \ a, sqrt_area_side))\n    return triangle_side_area / sqrt_area_side\n}\n\nfunc\
    \ TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5, 3), expected: 7.5 },\n     { actual:\
    \ candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10, 8), expected:\
    \ 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_uij29tr_test.go:12:31: undefined: sqrt

    /tmp/tmp_uij29tr_test.go:13:35: undefined: triangle_side_length

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073835
- exit_code: 0
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    return float64(a*h)/2\n\
    }\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5, 3), expected: 7.5 },\n     {\
    \ actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10, 8),\
    \ expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073601
- exit_code: 0
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    return float64(a)\
    \ * float64(h) / 2\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate :=\
    \ triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5, 3), expected:\
    \ 7.5 },\n     { actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10,\
    \ 8), expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073601
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    return ((a + h)\
    \ * 0.5) * float64(h)\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate\
    \ := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5, 3), expected:\
    \ 7.5 },\n     { actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10,\
    \ 8), expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprzoc00gz_test.go:12:23: 0.5 (untyped float constant) truncated to int

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073835
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    return (float64(h)*(float64(h)/a))\n\
    }\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5, 3), expected: 7.5 },\n     {\
    \ actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10, 8),\
    \ expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn_50eoi7_test.go:12:25: invalid operation: float64(h) / a (mismatched
    types float64 and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073836
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    return float64((a\
    \ + h) * (h - a)) / 2\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate\
    \ := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5, 3), expected:\
    \ 7.5 },\n     { actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10,\
    \ 8), expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp0986e_e6_test.go:30: expected '%!s(float64=7.5)', got '%!s(float64=-8)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__1 (0.00s)\n        tmp0986e_e6_test.go:30:\
    \ expected '%!s(float64=2)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__2\
    \ (0.00s)\n        tmp0986e_e6_test.go:30: expected '%!s(float64=40)', got '%!s(float64=-18)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073836
- exit_code: 0
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    return (float64(a)\
    \ * float64(h)) / 2\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate\
    \ := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5, 3), expected:\
    \ 7.5 },\n     { actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10,\
    \ 8), expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073837
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    return float64(4*(a*h)/(a+h))\n\
    }\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5, 3), expected: 7.5 },\n     {\
    \ actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10, 8),\
    \ expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp1shwo5tl_test.go:30: expected '%!s(float64=7.5)', got '%!s(float64=7)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__1 (0.00s)\n        tmp1shwo5tl_test.go:30:\
    \ expected '%!s(float64=2)', got '%!s(float64=4)'\n    --- FAIL: TestTriangle_Area/test_num__2\
    \ (0.00s)\n        tmp1shwo5tl_test.go:30: expected '%!s(float64=40)', got '%!s(float64=17)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073837
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    s := float64((2*a)/(h-1))\n\
    \    return s * s\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate :=\
    \ triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5, 3), expected:\
    \ 7.5 },\n     { actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10,\
    \ 8), expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmptt26k1w2_test.go:31: expected '%!s(float64=7.5)', got '%!s(float64=25)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__1 (0.00s)\n        tmptt26k1w2_test.go:31:\
    \ expected '%!s(float64=2)', got '%!s(float64=16)'\n    --- FAIL: TestTriangle_Area/test_num__2\
    \ (0.00s)\n        tmptt26k1w2_test.go:31: expected '%!s(float64=40)', got '%!s(float64=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073837
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    return float64(0.5)\
    \ * float64(float64(float64(a)/6)*float64(h))\n}\n\nfunc TestTriangle_Area(t *testing.T)\
    \ {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5,\
    \ 3), expected: 7.5 },\n     { actual: candidate(2, 2), expected: 2.0 },\n   \
    \  { actual: candidate(10, 8), expected: 40.0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpc9l4dyi4_test.go:30: expected '%!s(float64=7.5)', got '%!s(float64=1.25)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__1 (0.00s)\n        tmpc9l4dyi4_test.go:30:\
    \ expected '%!s(float64=2)', got '%!s(float64=0.3333333333333333)'\n    --- FAIL:\
    \ TestTriangle_Area/test_num__2 (0.00s)\n        tmpc9l4dyi4_test.go:30: expected\
    \ '%!s(float64=40)', got '%!s(float64=6.666666666666667)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073837
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    // Define Area as\
    \ Hypotenuse * Radius / 2\n    c := a * h / 2\n\n    // Return area of triangle\
    \ using formula c\n    return c\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n\
    \  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5,\
    \ 3), expected: 7.5 },\n     { actual: candidate(2, 2), expected: 2.0 },\n   \
    \  { actual: candidate(10, 8), expected: 40.0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpga7ez0qm_test.go:16:12: cannot use c (variable of type int) as type float64
    in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073837
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    return float64(a\
    \ + 2*h) / 8\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5, 3), expected: 7.5 },\n     {\
    \ actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10, 8),\
    \ expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpqq8ne62w_test.go:30: expected '%!s(float64=7.5)', got '%!s(float64=1.375)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__1 (0.00s)\n        tmpqq8ne62w_test.go:30:\
    \ expected '%!s(float64=2)', got '%!s(float64=0.75)'\n    --- FAIL: TestTriangle_Area/test_num__2\
    \ (0.00s)\n        tmpqq8ne62w_test.go:30: expected '%!s(float64=40)', got '%!s(float64=3.25)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073837
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    f := float64(a +\
    \ h) * (a + h + 1) * (a + h + 2)\n    return f\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5, 3), expected: 7.5 },\n     { actual: candidate(2, 2), expected:\
    \ 2.0 },\n     { actual: candidate(10, 8), expected: 40.0 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppz4zsxgj_test.go:12:10: invalid operation: float64(a + h) * (a + h + 1)
    (mismatched types float64 and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073837
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    return float64(a*(h\
    \ - a) * (h - a + 1) / 2)\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate\
    \ := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5, 3), expected:\
    \ 7.5 },\n     { actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10,\
    \ 8), expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpjohgpq7n_test.go:30: expected '%!s(float64=7.5)', got '%!s(float64=5)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__1 (0.00s)\n        tmpjohgpq7n_test.go:30:\
    \ expected '%!s(float64=2)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__2\
    \ (0.00s)\n        tmpjohgpq7n_test.go:30: expected '%!s(float64=40)', got '%!s(float64=10)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073837
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    s := float64(math.Pow(float64(a),\
    \ 2.0)) / float64(math.Pow(float64(h), 2.0))\n    return s * s\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5, 3), expected: 7.5 },\n     { actual: candidate(2, 2), expected:\
    \ 2.0 },\n     { actual: candidate(10, 8), expected: 40.0 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprnkt7wes_test.go:12:18: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073837
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    return float64(a\
    \ + h) * 0.5\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5, 3), expected: 7.5 },\n     {\
    \ actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10, 8),\
    \ expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmplr7gh2xd_test.go:30: expected '%!s(float64=7.5)', got '%!s(float64=4)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmplr7gh2xd_test.go:30:\
    \ expected '%!s(float64=40)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073837
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    s := a * (a + h)\
    \ / 2\n    return s * (s - h) / 2\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n\
    \  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5,\
    \ 3), expected: 7.5 },\n     { actual: candidate(2, 2), expected: 2.0 },\n   \
    \  { actual: candidate(10, 8), expected: 40.0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk4vv6_kg_test.go:13:12: cannot use s * (s - h) / 2 (value of type int)
    as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073837
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    return float64(4*(a*h)/((h*h+a*a)))\n\
    }\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5, 3), expected: 7.5 },\n     {\
    \ actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10, 8),\
    \ expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpzn5n8q5p_test.go:30: expected '%!s(float64=7.5)', got '%!s(float64=1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpzn5n8q5p_test.go:30:\
    \ expected '%!s(float64=40)', got '%!s(float64=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073838
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    return float64(sqrt(pow(a,\
    \ 2)+pow((h-a), 2)))\n}\nfunc TestTriangle_Area(t *testing.T) {\n  candidate :=\
    \ triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5, 3), expected:\
    \ 7.5 },\n     { actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10,\
    \ 8), expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0ihnuff8_test.go:12:20: undefined: sqrt

    /tmp/tmp0ihnuff8_test.go:12:25: undefined: pow

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073837
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    area := float64(a\
    \ + h) / 2\n    if area > 1 {\n        area = 1\n    }\n    return area\n}\n\n\
    func TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5, 3), expected: 7.5 },\n     { actual:\
    \ candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10, 8), expected:\
    \ 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpakrayb22_test.go:34: expected '%!s(float64=7.5)', got '%!s(float64=1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__1 (0.00s)\n        tmpakrayb22_test.go:34:\
    \ expected '%!s(float64=2)', got '%!s(float64=1)'\n    --- FAIL: TestTriangle_Area/test_num__2\
    \ (0.00s)\n        tmpakrayb22_test.go:34: expected '%!s(float64=40)', got '%!s(float64=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073838
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    if a > h {\n   \
    \     return float64(0)\n    }\n\n    x := a / h\n    y := 1 - x\n    z := x *\
    \ y\n    area := float64(a * h * h / 2)\n    area += x * float64(3 * h * z / 2)\n\
    \    area += y * float64(2 * h * z / 2)\n    area += z * float64(2 * h / 2)\n\
    \    return area / 4\n}\n</code>\n<|/ a tags=math,geometry |>\n<| c |>\nI think\
    \ this is a great answer, but I'm afraid I don't understand it. I just don't see\
    \ the part where you do the \"math\" involved here. For example, how does it know\
    \ to put the sides of the triangle in the right order, etc.? It seems too involved\
    \ just to say \"this is correct\". I guess I'm just not understanding how math\
    \ is actually being done here. I appreciate you taking the time to help me understand\
    \ what I'm doing here.\n<|/ c |>\n<| c |>\nJust to clarify, I believe your answer\
    \ is correct, but I don't quite understand how it is doing things.\n<|/ c |>\n\
    <| c |>\nThe question states \"Given a side length and high return a side area\"\
    \ which is exactly what this function does and it is also the correct answer.\n\
    <|/ c |>\n<| c |>\nAh right. I understand now. I think I get it now. Thank you\
    \ very much!\n<|/ c |>\n<| c |>\nI love the math. Thanks for sharing it.\n<|/\
    \ c |>\n<| a tags=math,geometry dscore=5 |>\nThis question has already been answered,\
    \ but I think it is worth pointing out that there are actually simpler ways to\
    \ calculate the area of a triangle. The area of a triangle is defined as the hypotenuse\
    \ times its base, which is equal to the triangle area if you subtract the area\
    \ of the two opposite triangles. If you use Pythagoras's theory, the area of a\
    \ triangle is simply the side times 1/2, which can be expressed in code like this:\n\
    <code>\nimport math\n\ndef triangle_area(a, b, c):\n    return math.sqrt((b*b)\
    \ - (a*a) - (c*c))/2\n</code>\nIn some cases, you can calculate the area of the\
    \ triangle more quickly by using the Pythagorean theorem, where you just add up\
    \ all the side lengths of the three sides of the triangle and divide by three.\
    \ This doesn't give the same answer, but it doesn't take much longer to implement:\n\
    <code>\nimport math\n\ndef triangle_area(a, b, c):\n    return math.sqrt(b**2\
    \ + a**2 + c**2)\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5, 3), expected: 7.5 },\n     {\
    \ actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10, 8),\
    \ expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmplani8oqw_test.go:25:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073837
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    return float64(a\
    \ * (h*h + a*a))\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate :=\
    \ triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5, 3), expected:\
    \ 7.5 },\n     { actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10,\
    \ 8), expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmph5if3vdp_test.go:30: expected '%!s(float64=7.5)', got '%!s(float64=170)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__1 (0.00s)\n        tmph5if3vdp_test.go:30:\
    \ expected '%!s(float64=2)', got '%!s(float64=16)'\n    --- FAIL: TestTriangle_Area/test_num__2\
    \ (0.00s)\n        tmph5if3vdp_test.go:30: expected '%!s(float64=40)', got '%!s(float64=1640)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073838
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    var side float64\
    \ = float64(a*a)\n    var triangle float64 = side * float64(h) / 2\n    return\
    \ triangle / 2\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5, 3), expected: 7.5 },\n     {\
    \ actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10, 8),\
    \ expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpr_u60mce_test.go:32: expected '%!s(float64=7.5)', got '%!s(float64=18.75)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpr_u60mce_test.go:32:\
    \ expected '%!s(float64=40)', got '%!s(float64=200)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073838
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    area := float64(h*h)/2\n\
    \    if a == h {\n        return area\n    }\n    area += float64(triangle_area(a\
    \ / 2, h) - triangle_area(a / 2 + 1, h)) / 2\n    return area\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5, 3), expected: 7.5 },\n     { actual: candidate(2, 2), expected:\
    \ 2.0 },\n     { actual: candidate(10, 8), expected: 40.0 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160370\
    \ stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f348?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.triangle_area(0x0?,\
    \ 0x3?)\n\t/tmp/tmppo_hpsnw_test.go:11 +0xbe fp=0xc020160380 sp=0xc020160378 pc=0x4ef71e\n\
    command-line-arguments_test.triangle_area(0x0?, 0x0?)\n\t/tmp/tmppo_hpsnw_test.go:16\
    \ +0x67 fp=0xc0201603c0 sp=0xc020160380 pc=0x4ef6c7\ncommand-line-arguments_test.triangle_area(0x0?,\
    \ 0x0?)\n\t/tmp/tmppo_hpsnw_test.go:16 +0x67 fp=0xc020160400 sp=0xc0201603c0 pc=0x4ef6c7\n\
    command-line-arguments_test.triangle_area(0x0?, 0x0?)\n\t/tmp/tmppo_hpsnw_test.go:16\
    \ +0x67 fp=0xc020160440 sp=0xc020160400 pc=0x4ef6c7\ncommand-line-arguments_test.triangle_area(0x0?,\
    \ 0x0?)\n\t/tmp/tmppo_hpsnw_test.go:16 +0x67 fp=0xc020160480 sp=0xc020160440 pc=0x4ef6c7\n\
    command-line-arguments_test.triangle_area(0x0?, 0x0?)\n\t/tmp/tmppo_hpsnw_test.go:16\
    \ +0x67 fp=0xc0201604c0 sp=0xc020160480 pc=0x4ef6c7\ncommand-line-arguments_test.triangle_area(0x0?,\
    \ 0x0?)\n\t/tmp/tmppo_hpsnw_test.go:16 +0x67 fp=0xc020160500 sp=0xc0201604c0 pc=0x4ef6c7\n\
    command-line-arguments_test.triangle_area(0x0?, 0x0?)\n\t/tmp/tmppo_hpsnw_test.go:16\
    \ +0x67 fp=0xc020160540 sp=0xc020160500 pc=0x4ef6c7\ncommand-line-arguments_test.triangle_area(0x0?,\
    \ 0x0?)\n\t/tmp/tmppo_hpsnw_test.go:16 +0x67 fp=0xc020160580 sp=0xc020160540 pc=0x4ef6c7\n\
    command-line-arguments_test.triangle_area(0x0?, 0x0?)\n\t/tmp/tmppo_hpsnw_test.go:16\
    \ +0x67 fp=0xc0201605c0 sp=0xc020160580 pc=0x4ef6c7\ncommand-line-arguments_test.triangle_area(0x0?,\
    \ 0x0?)\n\t/tmp/tmppo_hpsnw_test.go:16 +0x67 fp=0xc020160600 sp=0xc0201605c0 pc=0x4ef6c7\n\
    command-line-arguments_test.triangle_area(0x0?, 0x0?)\n\t/tmp/tmppo_hpsnw_test.go:16\
    \ +0x67 fp=0xc020160640 sp=0xc02"
  timestamp: 1660073839
- exit_code: 0
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    return float64(a*h)/2\n\
    }\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5, 3), expected: 7.5 },\n     {\
    \ actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10, 8),\
    \ expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073601
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    l := a * h\n   \
    \ m := l / 2\n    s := (l + h) * 0.5\n    return s / m\n}\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5, 3), expected: 7.5 },\n     { actual: candidate(2, 2), expected:\
    \ 2.0 },\n     { actual: candidate(10, 8), expected: 40.0 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppp4zn7oe_test.go:14:20: 0.5 (untyped float constant) truncated to int

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073838
- exit_code: 0
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    return float64(a\
    \ * h) / 2\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5, 3), expected: 7.5 },\n     {\
    \ actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10, 8),\
    \ expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073601
- exit_code: 0
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    return float64(a\
    \ * h) / 2\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5, 3), expected: 7.5 },\n     {\
    \ actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10, 8),\
    \ expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073601
- exit_code: 0
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    return float64(a*h)\
    \ / 2\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5, 3), expected: 7.5 },\n     {\
    \ actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10, 8),\
    \ expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073694
- exit_code: 0
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    return float64(a*h)/2\n\
    }\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5, 3), expected: 7.5 },\n     {\
    \ actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10, 8),\
    \ expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073601
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    return h * (h*a)\
    \ / 4.0\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5, 3), expected: 7.5 },\n     {\
    \ actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10, 8),\
    \ expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppqz12fpn_test.go:12:12: cannot use h * (h * a) / 4.0 (value of type int)
    as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073838
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    area := float64(0.5)\
    \ * float64(h) * float64(a) * float64(3.0)\n    if a == h {\n        fmt.Println(a)\n\
    \    }\n    return area\n}\n</code>\n<|/ a |>\n<| a dscore=0 tags=go,floating-point,algorithm\
    \ |>\nThis may be an option for you. It returns area for triangle and it's perimeter\n\
    <code>\npackage main\n\nimport (\n    \"fmt\"\n    \"math\"\n)\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5, 3), expected: 7.5 },\n     { actual: candidate(2, 2), expected:\
    \ 2.0 },\n     { actual: candidate(10, 8), expected: 40.0 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpeoqcpcc8_test.go:18:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073837
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    d := float64(h)\n\
    \    return (d*d*d)/(a*(a+d))\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n \
    \ candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5,\
    \ 3), expected: 7.5 },\n     { actual: candidate(2, 2), expected: 2.0 },\n   \
    \  { actual: candidate(10, 8), expected: 40.0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4ddjlgu0_test.go:13:24: invalid operation: a + d (mismatched types int
    and float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073838
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    return float64((a\
    \ + b + c) * (h - a) * (h - b) * (h - c))\n}\n\nfunc TestTriangle_Area(t *testing.T)\
    \ {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5,\
    \ 3), expected: 7.5 },\n     { actual: candidate(2, 2), expected: 2.0 },\n   \
    \  { actual: candidate(10, 8), expected: 40.0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppajxckxd_test.go:12:25: undefined: b

    /tmp/tmppajxckxd_test.go:12:29: undefined: c

    /tmp/tmppajxckxd_test.go:12:49: undefined: b

    /tmp/tmppajxckxd_test.go:12:59: undefined: c

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073839
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    return float64(h)*(float64(a)+float64(a+a));\n\
    }\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5, 3), expected: 7.5 },\n     {\
    \ actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10, 8),\
    \ expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp3ycs9tcg_test.go:30: expected '%!s(float64=7.5)', got '%!s(float64=45)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__1 (0.00s)\n        tmp3ycs9tcg_test.go:30:\
    \ expected '%!s(float64=2)', got '%!s(float64=12)'\n    --- FAIL: TestTriangle_Area/test_num__2\
    \ (0.00s)\n        tmp3ycs9tcg_test.go:30: expected '%!s(float64=40)', got '%!s(float64=240)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073839
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    return a*h/2\n}\n\
    \nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5, 3), expected: 7.5 },\n     { actual:\
    \ candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10, 8), expected:\
    \ 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8m74wmgq_test.go:12:12: cannot use a * h / 2 (value of type int) as type
    float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073839
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    side := float64(a)*float64(h)/2\n\
    \    return side * side\n}\nfunc TestTriangle_Area(t *testing.T) {\n  candidate\
    \ := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5, 3), expected:\
    \ 7.5 },\n     { actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10,\
    \ 8), expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpkvwfrwba_test.go:30: expected '%!s(float64=7.5)', got '%!s(float64=56.25)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__1 (0.00s)\n        tmpkvwfrwba_test.go:30:\
    \ expected '%!s(float64=2)', got '%!s(float64=4)'\n    --- FAIL: TestTriangle_Area/test_num__2\
    \ (0.00s)\n        tmpkvwfrwba_test.go:30: expected '%!s(float64=40)', got '%!s(float64=1600)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073839
- exit_code: 0
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    return float64(a*h)\
    \ / 2\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5, 3), expected: 7.5 },\n     {\
    \ actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10, 8),\
    \ expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073694
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    return (a * (h +\
    \ h)) / (4 * ((a - a + h) * (a + a + h)))\n}\n\nfunc TestTriangle_Area(t *testing.T)\
    \ {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5,\
    \ 3), expected: 7.5 },\n     { actual: candidate(2, 2), expected: 2.0 },\n   \
    \  { actual: candidate(10, 8), expected: 40.0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprvpsfv0z_test.go:12:12: cannot use (a * (h + h)) / (4 * ((a - a + h) *
    (a + a + h))) (value of type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073839
- exit_code: 0
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    return (float64(a\
    \ * h)) / 2\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5, 3), expected: 7.5 },\n     {\
    \ actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10, 8),\
    \ expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073839
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    if (a < 0 || a >\
    \ h) {\n        return 0\n    }\n    return a * (h / 2)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5, 3), expected: 7.5 },\n     { actual: candidate(2, 2), expected:\
    \ 2.0 },\n     { actual: candidate(10, 8), expected: 40.0 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv8l39ij0_test.go:15:12: cannot use a * (h / 2) (value of type int) as
    type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073839
- exit_code: 0
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    return float64(a*h)/2\n\
    }\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5, 3), expected: 7.5 },\n     {\
    \ actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10, 8),\
    \ expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073601
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    mul := float64(a*h)/3\n\
    \    return mul*mul + mul*mul/3\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n\
    \  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5,\
    \ 3), expected: 7.5 },\n     { actual: candidate(2, 2), expected: 2.0 },\n   \
    \  { actual: candidate(10, 8), expected: 40.0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmps2sr5sy__test.go:31: expected '%!s(float64=7.5)', got '%!s(float64=33.333333333333336)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__1 (0.00s)\n        tmps2sr5sy__test.go:31:\
    \ expected '%!s(float64=2)', got '%!s(float64=2.3703703703703702)'\n    --- FAIL:\
    \ TestTriangle_Area/test_num__2 (0.00s)\n        tmps2sr5sy__test.go:31: expected\
    \ '%!s(float64=40)', got '%!s(float64=948.1481481481483)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073839
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    return float64(a)\
    \ * (float64(h) * (float64(h) - 1) / (float64(a) + float64(h) - 2))\n}\n\nfunc\
    \ TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5, 3), expected: 7.5 },\n     { actual:\
    \ candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10, 8), expected:\
    \ 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp3t8m8mji_test.go:30: expected '%!s(float64=7.5)', got '%!s(float64=5)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp3t8m8mji_test.go:30:\
    \ expected '%!s(float64=40)', got '%!s(float64=35)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073839
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    x := float64(a *\
    \ h) / 2\n    return x * x\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate\
    \ := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5, 3), expected:\
    \ 7.5 },\n     { actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10,\
    \ 8), expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpy8b47ybm_test.go:31: expected '%!s(float64=7.5)', got '%!s(float64=56.25)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__1 (0.00s)\n        tmpy8b47ybm_test.go:31:\
    \ expected '%!s(float64=2)', got '%!s(float64=4)'\n    --- FAIL: TestTriangle_Area/test_num__2\
    \ (0.00s)\n        tmpy8b47ybm_test.go:31: expected '%!s(float64=40)', got '%!s(float64=1600)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073839
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    return float64(a\
    \ + b + c) / float64(2.0 * float64(h))\n}\n\nfunc TestTriangle_Area(t *testing.T)\
    \ {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5,\
    \ 3), expected: 7.5 },\n     { actual: candidate(2, 2), expected: 2.0 },\n   \
    \  { actual: candidate(10, 8), expected: 40.0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxp49buto_test.go:12:24: undefined: b

    /tmp/tmpxp49buto_test.go:12:28: undefined: c

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073839
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    return float64(a+h)*0.5\n\
    }\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5, 3), expected: 7.5 },\n     {\
    \ actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10, 8),\
    \ expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpon4y7v2e_test.go:30: expected '%!s(float64=7.5)', got '%!s(float64=4)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpon4y7v2e_test.go:30:\
    \ expected '%!s(float64=40)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073839
- exit_code: 0
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    return float64(a*h)/2\n\
    }\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5, 3), expected: 7.5 },\n     {\
    \ actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10, 8),\
    \ expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073601
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    area := float64(a\
    \ * h * h) / float64(9 * 9)\n    return area\n}\n\nfunc TestTriangle_Area(t *testing.T)\
    \ {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5,\
    \ 3), expected: 7.5 },\n     { actual: candidate(2, 2), expected: 2.0 },\n   \
    \  { actual: candidate(10, 8), expected: 40.0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpr_nocsdo_test.go:31: expected '%!s(float64=7.5)', got '%!s(float64=0.5555555555555556)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__1 (0.00s)\n        tmpr_nocsdo_test.go:31:\
    \ expected '%!s(float64=2)', got '%!s(float64=0.09876543209876543)'\n    --- FAIL:\
    \ TestTriangle_Area/test_num__2 (0.00s)\n        tmpr_nocsdo_test.go:31: expected\
    \ '%!s(float64=40)', got '%!s(float64=7.901234567901234)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073839
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    switch {\n    case\
    \ a == 0 || h == 0:\n        return 0\n    case a < h:\n        return a + triangle_area(a\
    \ - 1, h) * 0.5\n    case a > h:\n        return triangle_area(a - h, h) * 0.5\n\
    \    }\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5, 3), expected: 7.5 },\n     {\
    \ actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10, 8),\
    \ expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3i06qiuh_test.go:16:16: invalid operation: a + triangle_area(a - 1, h)
    * 0.5 (mismatched types int and float64)

    /tmp/tmp3i06qiuh_test.go:20:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073839
- exit_code: 0
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    return float64(a*h)/2\n\
    }\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5, 3), expected: 7.5 },\n     {\
    \ actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10, 8),\
    \ expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073601
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    return float64(h\
    \ * a) / float64(a * a)\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate\
    \ := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5, 3), expected:\
    \ 7.5 },\n     { actual: candidate(2, 2), expected: 2.0 },\n     { actual: candidate(10,\
    \ 8), expected: 40.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpsfkf62kw_test.go:30: expected '%!s(float64=7.5)', got '%!s(float64=0.6)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__1 (0.00s)\n        tmpsfkf62kw_test.go:30:\
    \ expected '%!s(float64=2)', got '%!s(float64=1)'\n    --- FAIL: TestTriangle_Area/test_num__2\
    \ (0.00s)\n        tmpsfkf62kw_test.go:30: expected '%!s(float64=40)', got '%!s(float64=0.8)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073839
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
    \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    x := float64(9*h)/12\n\
    \    y := float64(h)/3\n    return float64(a*x*y)/16\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5, 3), expected: 7.5 },\n     { actual: candidate(2, 2), expected:\
    \ 2.0 },\n     { actual: candidate(10, 8), expected: 40.0 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk0igsoew_test.go:14:20: invalid operation: a * x (mismatched types int
    and float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073839
