name: HumanEval_131_digits
language: go_test.go
prompt: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
  \ a positive integer n, return the product of the odd digits.\n// Return 0 if all\
  \ digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
  // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n"
tests: "func TestDigits(t *testing.T) {\n  candidate := digits\n\ttype test struct\
  \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
  \     { actual: candidate(5), expected: 5 },\n     { actual: candidate(54), expected:\
  \ 5 },\n     { actual: candidate(120), expected: 1 },\n     { actual: candidate(5014),\
  \ expected: 5 },\n     { actual: candidate(98765), expected: 315 },\n     { actual:\
  \ candidate(5576543), expected: 2625 },\n     { actual: candidate(2468), expected:\
  \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
  \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
  %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
  \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    d := 0\n    for i := n; i >= 0; i /= 10 {\n        d++\n    }\n\
    \    if d%2 != 0 {\n        return 0\n    }\n    for i := d; i >= 0; i /= 10 {\n\
    \        d++\n    }\n    return d\n}\n", "    s := \"\"\n    for i := 0; i < n;\
    \ i++ {\n        s += fmt.Sprintf(\"%d\", n % 10)\n        n /= 10\n    }\n  \
    \  if n % 2 == 0 {\n        return 0\n    }\n    return int(s)\n}\n</code>\n<|/\
    \ a |>\n<| c |>\nThis doesn't work. For example, this returns `digits(0)`.\n<|/\
    \ c |>\n<| c |>\nYes, of course. I overlooked that. Thank you for pointing that\
    \ out.\n<|/ c |>\n<| a |>\n<code>\nimport \"math\"\n", "    var product int\n\
    \    for i := 0; i < n; i++ {\n        if i%2 == 0 {\n            product *= i/2\n\
    \        } else {\n            product *= i/2\n        }\n    }\n    return product\n\
    }\n", "    if n < 10 {\n        return n\n    }\n    for i := 0; i < n; i = i\
    \ + 2 {\n        n /= 10\n    }\n    return n\n}\n", "    // Initialize product\
    \ to 1 (since we do not need to divide by zero)\n    var product int = 1\n\n \
    \   // Iterate through the digits\n    for i := n; i > 0; i /= 10 {\n        //\
    \ Check if a digit in the number is odd\n        if i%2 != 0 {\n            product\
    \ *= 10\n        }\n    }\n\n    // Return product if the number is even\n   \
    \ if n%2 == 0 {\n        return product\n    }\n\n    // Return 0 otherwise\n\
    \    return 0\n}\n", "    if n%2 == 0 {\n        return n%10\n    }\n    digit\
    \ := 0\n    for i := 3; i <= n; i+=2 {\n        digit *= 2\n        digit += n%10\n\
    \        n = i/10\n    }\n    if digit > 0 {\n        return digit\n    }\n  \
    \  return 0\n}\n", "    digit := 0\n    for i := 0; i < n; i++ {\n        digit\
    \ = digit*10 + n%10\n        n = n/10\n    }\n    return digit\n}\n", "    p :=\
    \ 1\n    for n > 0 {\n        p, n = p*(n%10) + int(n/10), n%10\n    }\n    return\
    \ p\n}\n", "    if n < 10 {\n        return n\n    }\n    k := 0\n    for ; n\
    \ > 0; n-- {\n        k += n & 1\n    }\n    return k\n}\n", "    return n % 10\
    \ * digits(n//10)\n}\n", "    return n % 2 * digits(n / 2)\n}\n", "    // If n\
    \ is even, just return n\n    if n%2 == 0 {\n        return n\n    }\n    // Else,\
    \ multiply the first digit by two, add third, add fourth, etc.\n    // For odd\
    \ n, n%10 == 0, so this works.\n    // For even n, n%10 != 0, so this works.\n\
    \    // If n%10 == 0, then it's odd, so this works.\n    // Otherwise, if n%10\
    \ != 0, then it's even, so this works.\n    m := n * 2\n    for i := 0; i < n;\
    \ i++ {\n        m += (n%10) * i\n        n /= 10\n    }\n    return m\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n#include <stdio.h>\n\nint main()\
    \ {\n    printf(\"%d\\n\", (2 * 2 * 2 * 2 * 2 * 2 + 2 * 2 * 2 * 2 + 2 * 2 * 2\
    \ + 2 * 2 + 2 + 2) /\n        (2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 + 2 * 2 * 2 * 2 *\
    \ 2 + 2 * 2 * 2 + 2 * 2 + 2 + 2));\n    return 0;\n}\n</code>\n<|/ a tags=algorithm,c,math\
    \ |>\n<| c |>\nA code dump does not help much in the long run. If you had explained\
    \ what this code does, it would be much more helpful. For example, what does this\
    \ mean?\n<|/ c |>\n<| c |>\nIt basically returns the product of all odd digits\
    \ in a number. The number must be greater than or equal to 1.\n<|/ c |>\n<| a\
    \ |>\nI wrote a program that does exactly this. Check it out:\n<code>\n#include\
    \ <iostream>\n\nusing namespace std;\n\nint main()\n{\n    int n;\n    cout <<\
    \ \"Enter a number: \";\n    cin >> n;\n    cout << \"The product of odd digits\
    \ in \" << n << \" is \"\n            << n / 10 % (2 * 2 * 2 * 2 * 2 * 2 * 2 *\
    \ 2 * 2 + 2 * 2 * 2 * 2 * 2 * 2 + 2 * 2 * 2 + 2 * 2 + 2 + 2) << endl;\n    return\
    \ 0;\n}\n</code>\n<|/ a tags=algorithm,c,math dscore=0 |>\n<| a |>\nMy answer\
    \ is quite similar to other answers but I thought this was a good way to explain\
    \ it for people who don't know what a power function is. The reason I chose power\
    \ function is because a power function will multiply a number x to the power n.\
    \ Thus a power function can be thought of as a function that does this.\n<code>\n\
    pow(x, y) = x*pow(x, y)\n</code>\nThe way I approached this was to divide the\
    \ number by each power and then take the modulo 2 of the result. Modulo 2 mean",
  "    // Odd digits are multiplied by 2. Odd digits will be divided by 2 later\n\
    \    // when multiplying with powers of 2.\n    product := 0\n    for _, digit\
    \ := range strconv.Itoa(int(n)) {\n        if digit != '0' {\n            product\
    \ += int(digit)\n        }\n    }\n\n    // Find the powers of 2 that can be used\
    \ to divide the number.\n    // In a power of 2, all even digits are multiplied\
    \ by 2, and all odd digits\n    // are multiplied by 1. We first find the power\
    \ of 2 in the denominator.\n    // The first such power of 2 less than the number\
    \ n is n / 2^n.\n    n := n\n    n -= 1 << product\n    for {\n        n >>= 1\n\
    \        n /= 2\n        product++\n        if n == 0 {\n            break\n \
    \       }\n    }\n\n    return product\n}\n", "    if n < 0 {\n        fmt.Println(\"\
    n has to be a positive integer\")\n        return -1\n    }\n\n    var sum int\
    \ = 0\n    for i := 0; i < n; i++ {\n        if n%2 == 0 {\n            sum +=\
    \ i\n        }\n    }\n\n    return sum\n}\n", "    return n * digits_odd_sum(n)\n\
    }\n", "    return digits_fn(n)\n}\n", "    sum, _ := oddDigits(n)\n    return\
    \ sum\n}\n", "    // Your code here\n    var num int = 1\n    for i := 0; i <\
    \ n; i++ {\n        if num%2 == 1 {\n            num = num * 10 + n%10\n     \
    \   }\n        n = n/10\n    }\n    if num%2 == 1 {\n        return 0\n    }\n\
    \    return num\n}\n</code>\nHope this helps.\n<|/ a tags=go |>\n<| a dscore=0\
    \ |>\nGo has builtin functions to get this done. Here is how I solved it.\n<code>\n\
    package main\n\nimport (\n    \"fmt\"\n)\n", "    // Your code here\n    \n  \
    \  \n    return 0\n}\n", "    var result int\n    if n%10 == 0 {\n        result\
    \ = result * 10\n    }\n    if n%10%10 == 0 {\n        result = result * 10 +\
    \ n%10%10\n    }\n    if n%10%10%10 == 0 {\n        result = result * 10 + n%10%10%10\n\
    \    }\n    if n%10%10%10%10 == 0 {\n        result = result * 10 + n%10%10%10%10\n\
    \    }\n    return result\n}\n", "    product := 1\n    for i := 0; i < n; i++\
    \ {\n        product *= (n / 10)%10\n        n /= 10\n    }\n    if n == 0 {\n\
    \        return 0\n    }\n    return product\n}\n", "    digit := 0\n    for {\n\
    \        d := n % 10\n        digit = digit * 10 + d\n        n = n / 10\n   \
    \     if n == 0 {\n            break\n        }\n    }\n    if digit != 0 {\n\
    \        return digit\n    }\n    return 0\n}\n", "    if n == 0 {\n        return\
    \ 0\n    }\n\n    m := n\n    p := 1\n    for i := 9; i >= 0; i-- {\n        m\
    \ /= 10\n        if m > 0 {\n            p *= i\n        } else {\n          \
    \  return 0\n        }\n    }\n    return p\n}\n", "    if n%2 != 0 {\n      \
    \  return 0\n    }\n    s := \"\"\n    for i := 0; i < n; i++ {\n        s +=\
    \ fmt.Sprintf(\"%d\", n%10)\n        n = n%10\n    }\n    return int(s)\n}\n",
  "    p := 1\n    if n > 0 {\n        for d := 0; d < 10; d++ {\n            p +=\
    \ int(n%10)/int(d)\n            n = int(n/10)\n        }\n    }\n    if n%2 ==\
    \ 1 {\n        p *= 2\n    }\n    return p\n}\n</code>\n<|/ a |>\n<| c |>\nIt\
    \ works, but if you have `digits(10)` it will print `10` instead of `10`, even\
    \ though it is a valid solution. Just fix the `%` to `%d` like I did.\n<|/ c |>\n\
    <| a dscore=0 |>\nThis is an improved solution, that handles both positive and\
    \ negative numbers.\n<code>\npackage main\n\nimport (\n    \"fmt\"\n    \"strconv\"\
    \n    \"strings\"\n    \"math/rand\"\n    \"time\"\n)\n", "    // Convert n to\
    \ a string\n    s := string(n)\n    // Split s into a slice of digits\n    digitSlice\
    \ := strings.Split(s, \"0\")\n\n    // If all digits are even, return 0\n    if\
    \ strings.Count(digitSlice, \"0\") == len(digitSlice) {\n        return 0\n  \
    \  }\n\n    // Create a slice that starts with the first digit, removes the digit,\
    \ and continues\n    // until the end of the slice is reached.\n    digitSlice1\
    \ := []string{}\n    digitSlice2 = []string{}\n    for _, d := range digitSlice\
    \ {\n        if d != \"\" {\n            digitSlice1 = append(digitSlice1, d)\n\
    \        } else {\n            digitSlice2 = append(digitSlice2, \"\")\n     \
    \   }\n    }\n\n    // For each digit, add its multiplicative value to the running\
    \ product and remove it\n    // from the slice\n    running := 1\n    for _, d\
    \ := range digitSlice2 {\n        running *= int(d)\n        digitSlice2 = append(digitSlice2[:len(digitSlice2)-1],\
    \ digitSlice2[len(digitSlice2)-1]+d)\n    }\n\n    // Return the running product\n\
    \    return running\n}\n", "    // Initialize product to 1, since n is even\n\
    \    product := 1\n    for n > 0 {\n        if n%10 == 0 {\n            product++\n\
    \        }\n        n = n / 10\n    }\n    return product\n}\n</code>\nRunning\
    \ unit tests:\n<code>\npackage digits_test\n\nimport (\n    \"testing\"\n)\n",
  "    n /= 10\n    result := 1\n    for {\n        if n % 2 == 1 {\n            result\
    \ *= 3\n            n /= 2\n        } else {\n            result *= 5\n      \
    \      n /= 2\n        }\n        if n == 0 {\n            break\n        }\n\
    \    }\n    return result\n}\n", "    var sum int = 1\n    for i := 0; i < n;\
    \ i++ {\n        sum += (i%2 == 0)\n        i /= 2\n    }\n    return sum\n}\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=algorithm,go |>\n<code>\npackage main\n\n\
    import (\n    \"fmt\"\n    \"math/big\"\n    \"math/rand\"\n)\n", "    if n ==\
    \ 0 {\n        return 0\n    }\n\n    k := len(str(n))\n    product := 1\n   \
    \ for i := k; i > 0; i-- {\n        product *= n % 10\n        n = int(n / 10)\n\
    \    }\n\n    return product\n}\n", "    // Return 0 when n is even.\n    if n%2\
    \ == 0 {\n        return 0\n    }\n\n    // Return n when n is odd.\n    return\
    \ n\n}\n", "    if n <= 0 {\n        return 0\n    }\n    x := n\n    if x ==\
    \ 0 {\n        return 0\n    }\n    x /= 10\n    for x != 0 {\n        if x%2\
    \ == 1 {\n            x *= 10\n        } else {\n            return 0\n      \
    \  }\n    }\n    return n\n}\n", "    var prod int\n    prod = 1\n    for i :=\
    \ 0; i < n; i++ {\n        prod = prod * int(n%10)\n        n = n / 10\n    }\n\
    \    return prod\n}\n", "    prod := 0\n    if n >= 10 && n <= 99 {\n        prod\
    \ = n % 10\n    }\n    if prod >= 2 || n != 0 {\n        for i := 3; i < 10; i++\
    \ {\n            prod *= (n+i) % 10\n        }\n    }\n    if prod > 0 {\n   \
    \     prod = (10*prod) % 100\n    }\n    if prod < 0 {\n        prod = (10*prod-100)\
    \ % 100\n    }\n    return prod\n}\n", "    if n == 0 {\n        return 0\n  \
    \  }\n    r := n % 10\n    n /= 10\n    if n == 0 {\n        return 0\n    }\n\
    \    r /= 10\n    if n == 0 {\n        return r\n    }\n    return r * digits(n)\n\
    }\n", "    if n < 0 {\n        return 0\n    }\n    p := n % 10\n    if p > 0\
    \ {\n        p *= digits(n/10)\n    }\n    return p\n}\n", "    if n < 0 {\n \
    \       return 0\n    }\n\n    products := n\n    if n < 10 && len(strconv.FormatInt(n,\
    \ 10)) % 2 != 0 {\n        return 0\n    }\n\n    for i := len(strconv.FormatInt(n,\
    \ 10)) - 1; i >= 0; i-- {\n        product := products * 10 + int(strconv.Itoa(n%10))\n\
    \        n = int(n / 10)\n        products = product*10 + int(strconv.Itoa(product%10))\n\
    \    }\n\n    return products\n}\n</code>\n<|/ a tags=go |>\n<| a tags=go |>\n\
    <code>\npackage main\n\nimport (\n    \"fmt\"\n    \"strconv\"\n)\n", "    var\
    \ product int = 1\n    for d := 0; n != 0; n /= 10 {\n        if n%2 == 1 {\n\
    \            product *= d\n        }\n        d *= 10\n    }\n    return product\n\
    }\n", "    product := 0\n    for i := 0; i < n; i++ {\n        digit, _ := strconv.Atoi(fmt.Sprintf(\"\
    %d\", n))\n        product = product * digit\n        n = n / 10\n    }\n    return\
    \ product\n}\n", "    for n > 0 {\n        if n%2 == 1 {\n            return n\n\
    \        }\n        n/=2;\n    }\n    return 0\n}\n", "    product = 0\n    evenDigit\
    \ := true\n    for i := 0; i < n; i++ {\n        digit, err := digit(i)\n    \
    \    if err != nil {\n            panic(err)\n        }\n        if digit == 0\
    \ {\n            // zero digit indicates an even number of digits.\n         \
    \   if evenDigit {\n                // multiply by zero to move on to the next\
    \ digit.\n                product *= 0\n                evenDigit = false\n  \
    \          } else {\n                // don't multiply by zero: all odd digits\
    \ are zero digits.\n                product *= 0\n                evenDigit =\
    \ true\n            }\n        } else {\n            // multiply by digit to get\
    \ the product.\n            product *= digit\n            evenDigit = true\n \
    \       }\n    }\n    return product\n}\n", "    var result int = 1\n    for i\
    \ := n; i > 0; i /= 10 {\n        if i%2 == 1 {\n            result *= i\n   \
    \     }\n    }\n    return result\n}\n", "    // Initialization by zero\n    sumDigits\
    \ := 0\n    // If all digits are even, return 0.\n    if n%10 == 0 {\n       \
    \ return 0\n    }\n    // Loop through each digit from right to left.\n    for\
    \ i := len(str(n)) - 1; i >= 0; i-- {\n        // Extract the digit\n        digit\
    \ := n % 10\n        // Move the number left by one, add the digit.\n        n\
    \ = (n - digit) / 10\n        sumDigits += digit\n    }\n    return sumDigits\n\
    }\n", "    if n < 0 {\n        return n\n    }\n\n    products := []int{0}\n \
    \   currentDigit := 0\n\n    for digit := n; digit > 0; digit /= 2 {\n       \
    \ products = append(products, digit)\n        currentDigit += digit\n\n      \
    \  // If we've gone through the entire list of digits without finding a\n    \
    \    // factor of 2, the remainder of the number is even.\n        if currentDigit\
    \ == 1 {\n            break\n        }\n    }\n\n    if len(products) == 0 {\n\
    \        return 0\n    }\n\n    return products[0]\n}\n", "    s := 0\n    for\
    \ i := n; i > 0; i /= 10 {\n        s++\n    }\n    if s == 0 && n > 0 {\n   \
    \     return 0\n    }\n    return n%10 * digits(s/2)\n}\n", "    if n == 0 {\n\
    \        return 0\n    }\n    if n%2 == 0 {\n        return 1\n    }\n\n    n\
    \ /= 2\n    for {\n        if n%2 == 0 {\n            return n * 10 + n % 10\n\
    \        }\n\n        n /= 2\n    }\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\n\
    This solution is O(n^2) though, which is pretty undesirable.\n<|/ c |>\n<| c |>\n\
    I agree, it was more meant as a fun way to practice recursion. The solutions above\
    \ are more efficient. Also it is the simplest solution to understand. I would\
    \ prefer a more descriptive solution though.\n<|/ c |>\n<| a dscore=2 |>\nIf you're\
    \ interested in a programming language agnostic solution you can use the following\
    \ code \n<code>\npublic int getOddDigits(int num) {\n    int result = 1;\n   \
    \ for (int i = Integer.MIN_VALUE; i <= Integer.MAX_VALUE; i++) {\n        result\
    \ *= i % num;\n    }\n    return result;\n}\n</code>\nThis works because the integer\
    \ is guaranteed to contain all its digits in sorted order (you can see this by\
    \ printing Integer.MIN_VALUE and Integer.MAX_VALUE)\n<|/ a tags=algorithm,math\
    \ |>\n<| c |>\n`Integer.MIN_VALUE` is `-0x80000001` (and `Integer.MAX_VALUE` is\
    \ `0x7fffffff`) which is not what the OP asked for.\n<|/ c |>\n<| a |>\nThis can\
    \ be done by using the fact that any base b number can be expressed as an integer\
    \ multiple of 2^b. Since you want to get the product of the odd digits in base\
    \ 10, that means you need to get the product of the digits in base 10, which can\
    \ only happen if each of the digits in base 10 is multiplied by a number that\
    \ is a power of two. That is:\n<code>\nint getOddDigits(int n) {\n    return n*(n%2);\n\
    }\n</code>\n<|/ a dscore=1 tags=algorithm,math |>\n<| c |>\nThis has O(n^2) time\
    \ complexity, which is not desirable.\n<|/ c |>\n<| a dscore=0 |>\nHere is a recursive\
    \ solution:\n<code>\nint getOddDigits(int n) {\n    if (n == 0) {\n        return\
    \ 0;\n    } else if (n == 1) {\n        return 1;\n    } else {\n        int oddDigits\
    \ = getOddDigits(n / 10);\n        return (n*oddDigits) % 10;\n    }\n}\n</code>\n\
    <|/ a tags=algorithm,math |>\n<| c |>\nThis has O(n^2) time complexity, which\
    \ is not desirable", "    var ret int\n    for d := 0; n > 0; d += 2 {\n     \
    \   n = (n - 1) % 10\n        ret *= 10\n        ret += n\n    }\n    if n > 0\
    \ {\n        ret = -1\n    }\n    return ret\n}\n", "    s := 0\n    for d :=\
    \ n / 10; d > 0; d /= 10 {\n        s *= d\n    }\n    if n == 0 {\n        return\
    \ s // if n == 0 we return 0\n    }\n    d := n % 10\n    for ; d > 0; d /= 10\
    \ {\n        s *= d\n    }\n    return s\n}\n</code>\nIt will output a test of\
    \ correct output for the above code:\n<code>\npackage digits_test\n\nimport (\n\
    \    \"testing\"\n    \"fmt\"\n)\n", "    // TODO: Implement me!\n    return 0\n\
    }\n</code>\n<|/ a tags=algorithm,go |>\n<| c |>\nThis is a good solution, but\
    \ does not answer the question.\n<|/ c |>\n<| c |>\nit does answer the question.\
    \ OP wants an algorithm to get product of odd-numbered digits of a number from\
    \ 1 to a given number. Using your `digits` function he can do that. If it's not\
    \ clear, it's because the title of the question says **algorithm**, while in the\
    \ text he says **code golf**. OP can easily choose which one he's looking for.\n\
    <|/ c |>\n<| c |>\nI guess you're right. However, I still think that this answer\
    \ is misleading. It's not the solution to the OP's problem, it's just an example\
    \ of how to do the problem. Since you haven't actually answered the question,\
    \ it's hard to know whether your answer is really an answer. Your answer doesn't\
    \ show how the algorithm can be applied, it only shows the solution. Also, please\
    \ don't use irrelevant tags like `algorithm` and `code golf`. They don't apply\
    \ to the question.\n<|/ c |>\n<| c |>\nThanks for the suggestion about `golf`.\
    \ I updated the answer. Also, I guess you might agree with my initial comment,\
    \ that my solution is not the solution to the OP's problem, just an example how\
    \ it can be done.\n<|/ c |>\n<| c |>\nI agree that my solution is not the solution\
    \ to the OP's problem, but I think that the answers are both valid because they\
    \ show how the algorithm can be applied, and also in what direction should the\
    \ OP think about implementing it. The important part is that the OP can choose\
    \ which he wants to learn, since he can then focus on one algorithm and not learn\
    \ the other. No matter if it's code golf or not, the point is to get him started\
    \ on his own algorithm, so he can learn it, then apply it to his problem and hopefully\
    \ end up with his answer.\n<|/ c |>\n<| a tags=algorithm,go |>\nI hope this will\
    \ be helpful:\n<code>", "    n /= 10\n    for i := 0; i < n; i++ {\n        if\
    \ n % 2 == 0 {\n            n = n / 10\n        }\n        else {\n          \
    \  return 0\n        }\n    }\n    return n * 10\n}\n", "    num := 0\n    for\
    \ i := 0; i < n; i++ {\n        if n%2 != 0 {\n            num *= 10\n       \
    \     num += n%10\n            n /= 10\n        }\n    }\n    return num\n}\n\
    </code>\nNow you can test the results. I've added a test to the above function\
    \ to confirm that digits(1) and digits(4) both return 0, which means there is\
    \ no product of odd digits in 1.\n<code>", "    if n < 10 {\n        return n\n\
    \    }\n\n    var res int = 1\n\n    if n % 10 == 0 {\n        res = res * 10\n\
    \        n /= 10\n    }\n\n    if n % 10 == 0 {\n        res = res * 10\n    \
    \    n /= 10\n    }\n\n    if n % 10 == 0 {\n        res = res * 10\n        n\
    \ /= 10\n    }\n\n    return res\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=algorithm,python\
    \ |>\nA simple solution in Python.\n<code>\ndef digits(n):\n    return int(n)\
    \ if int(n) <= 10**9 else 0\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis assumes\
    \ that the input is positive. For negative numbers it will output `0`.\n<|/ c\
    \ |>\n<| a |>\nA simple solution in python\n<code>\ndef digits(n):\nreturn int(n)%10\
    \ if int(n) else 0\n</code>\n<|/ a tags=algorithm,python dscore=0 |>\n<| a |>\n\
    A simple solution in Ruby:\n<code>\ndef digits(n)\n  return n % 10 if n.to_i /\
    \ 10 <= 9 else 0\nend\n</code>\n<|/ a dscore=0 tags=algorithm,python |>\n<| a\
    \ |>\nIn JavaScript:\n<code>", "    var products int\n    for i := 0; i < n; i++\
    \ {\n        product := n%10\n        product *= product%2\n        products +=\
    \ product\n        n = n/10\n    }\n    if n > 0 {\n        products = products*n/10\n\
    \    }\n    return products\n}\n", "    digits := 1\n    multiplier := 1\n   \
    \ for i := 0; i < n; i++ {\n        if n%2 == 0 {\n            digits *= 2\n \
    \       }\n        n /= 10\n    }\n    if n > 0 {\n        multiplier *= 10\n\
    \    }\n    return multiplier*digits\n}\n", "    result := 1\n    for ; n > 0;\
    \ n /= 10 {\n        if n % 2 == 1 {\n            result *= n\n        }\n   \
    \ }\n    return result\n}\n", "    var product int = 1\n    for i := 0; i < n;\
    \ i++ {\n        product *= (int(n) % 10)\n        n /= 10\n    }\n    if n ==\
    \ 0 {\n        return product\n    }\n    return 0\n}\n", "    n |= n >> 1\n \
    \   n |= n >> 2\n    n |= n >> 4\n    n |= n >> 8\n    n |= n >> 16\n    return\
    \ n\n}\n", "    // return 0 if all digits are even\n    if n%2 == 0 {\n      \
    \  return 0\n    }\n    product := 1\n    n /= 2\n    switch {\n    case n ==\
    \ 0:\n        return 0\n    case n % 10 == 0:\n        product++\n    case n %\
    \ 10 == 1:\n        product++\n    default:\n        product *= n - 2\n    }\n\
    \    return product\n}\n", "    mult := 1\n    for i := 0; i < 10; i++ {\n   \
    \     if n%10 == i {\n            mult *= i\n        }\n    }\n    if mult ==\
    \ 0 {\n        return 0\n    }\n    return mult * n % 10\n}\n", "    if n >= 10\
    \ {\n        return 0\n    }\n    var sum = 1\n    for i := 2; i <= n; i++ {\n\
    \        if n%i == 0 {\n            sum *= i\n        }\n    }\n    return sum\n\
    }\n", "    if n%2 == 1 {\n        return 0\n    }\n    y := n\n    z := 0\n  \
    \  i := 0\n    for i < len(strconv.Itoa(n)) {\n        y += int(strconv.Itoa(y))\n\
    \        if y%2 == 1 {\n            z += 1\n        }\n        y /= 10\n     \
    \   i++\n    }\n    return z*10 + y\n}\n", "    // Return 0 for all even numbers\n\
    \    if n%2 != 0 {\n        return 0\n    }\n\n    // Initialize product to 1\n\
    \    var product int = 1\n\n    // Loop through the digits\n    for i := 0; i\
    \ < n; i++ {\n        // For every odd digit, multiply the product by 2\n    \
    \    if i%2 != 0 {\n            product *= 2\n        }\n\n        // Multiply\
    \ the product by the current digit\n        product *= int(n/10)\n    }\n\n  \
    \  return product\n}\n", "    if n == 1 {\n        return 1\n    }\n    x := n\
    \ / 10\n    x -= n % 10\n    y := x / 10\n    y -= y % 10\n    return x*y\n}\n",
  "    if n%2 == 0 {\n        return 0\n    }\n    var product int\n    for i := 0;\
    \ i < n; i++ {\n        product *= int(n/2)\n        n/=2\n    }\n    return product\n\
    }\n", "    product = 1\n    if n > 0 {\n        product *= n%10\n        n /=\
    \ 10\n    }\n    if n > 0 {\n        product *= n%10\n        n /= 10\n    }\n\
    \    if n > 0 {\n        product *= n%10\n        n /= 10\n    }\n    return product\n\
    }\n", "    if n < 10 {\n        return n\n    }\n    b := make([]byte, len(strconv.Itoa(n)))\n\
    \    for i, b := range strconv.Itoa(n) {\n        if b%2 == 0 {\n            continue\n\
    \        }\n        if i == 0 {\n            return 0\n        }\n        if b\
    \ == 0 {\n            return 1\n        }\n        for i := 0; i < len(b)-1; i++\
    \ {\n            b[i] -= 1\n        }\n        for i := len(b)-1; i > 0; i-- {\n\
    \            b[i] += 1\n        }\n    }\n    return 0\n}\n", "    if n < 10 {\n\
    \        return n\n    }\n    t := n%10\n    n /= 10\n    t *= n%10\n    n /=\
    \ 10\n    t *= n%10\n    n /= 10\n    t *= n%10\n    n /= 10\n    t *= n%10\n\
    \    n /= 10\n    t *= n%10\n    n /= 10\n    t *= n%10\n    n /= 10\n    t *=\
    \ n%10\n    n /= 10\n    t *= n%10\n    n /= 10\n    t *= n%10\n    n /= 10\n\
    \    t *= n%10\n    n /= 10\n    t *= n%10\n    n /= 10\n    t *= n%10\n    n\
    \ /= 10\n    t *= n%10\n    n /= 10\n    t *= n%10\n    n /= 10\n    t *= n%10\n\
    \    n /= 10\n    t *= n%10\n    n /= 10\n    t *= n%10\n    n /= 10\n    t *=\
    \ n%10\n    n /= 10\n    t *= n%10\n    n /= 10\n    t *= n%10\n    n /= 10\n\
    \    t *= n%10\n    n /= 10\n    t *= n%10\n    n /= 10\n    t *= n%10\n    n\
    \ /= 10\n    t *= n%10\n    n /= 10\n    t *= n%10\n    n /= 10\n    t *= n%10\n\
    \    n /= 10\n    t *= n%10\n    n /= 10\n    t *= n%10\n    n /= 10\n    t *=\
    \ n%10\n    n /= 10\n    t *= n%10\n    n /= 10\n    t *= n%10\n    n /= 10\n\
    \    t *= n%10\n    n /= 10\n    t *= n%10\n    n /= 10\n    t *= n%10\n    n\
    \ /= 10\n    t *= n%10\n    n /= 10\n    t *= n%10\n    n /= 10\n    t *= n%10\n\
    \    n /= 10\n    t *= n%10\n    n /= 10\n    t *= n%10\n    n /= 10\n    t *=\
    \ n%10\n    n /= 10\n    t *= n%10\n    n /= ", "    if n <= 0 {\n        return\
    \ 0\n    }\n    if n % 2 == 0 {\n        return n * digits(n / 2)\n    }\n   \
    \ return digits(n / 2) * n\n}\n", "    result := 1\n    i := 0\n    for n > 0\
    \ {\n        if n%2 == 0 {\n            result *= i\n        }\n        i += 2\n\
    \        n /= 10\n    }\n    return result\n}\n", "    if n <= 0 {\n        return\
    \ 0\n    }\n    return n % 2 * digits(int(n/2))\n}\n", "    return n*(n+1)/2\n\
    }\n", "    product, i := 0, n\n    for ; n > 0; i = i * 10 + n % 10 {\n      \
    \  n /= 10\n        product = product * i\n    }\n    return product\n}\n", " \
    \   d := make([]int, len(strconv.Itoa(n)))\n    for i, c := range strconv.Itoa(n)\
    \ {\n        if int(c) % 2 != 0 {\n            d[i] = int(c)\n        }\n    }\n\
    \    return prod(d)\n}\n", "    if n > 0 {\n        for i := 0; i < n; i++ {\n\
    \            if n%2 == 0 {\n                n /= 2\n            } else {\n   \
    \             n *= 3\n            }\n        }\n    }\n\n    if n > 0 {\n    \
    \    return n\n    }\n\n    return 0\n}\n", "    product, i := 1, 0\n    for ;\
    \ n > 0; n-- {\n        if n % 2 == 0 {\n            product *= 10\n        }\n\
    \        product += n%10\n        i++\n    }\n    return product\n}\n", "    n\
    \ -= n%10\n    if n == 0 {\n        return 0\n    }\n    digitArray := make([]int,\
    \ 10)\n    for i := 0; i < len(digitArray); i++ {\n        digitArray[i] = n /\
    \ 10\n        n = n % 10\n    }\n    for i := len(digitArray)-1; i >= 0; i-- {\n\
    \        if digitArray[i] % 2 == 0 {\n            digitArray[i] = 0\n        }\
    \ else {\n            digitArray[i] = digitArray[i] * 10\n        }\n    }\n \
    \   return digitArray[0]\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=math,python,algorithm\
    \ |>\nThe code below will do the trick:\n<code>\ndef digits(n):\n    return sum(int(c)\
    \ for c in str(n))\n</code>\n<|/ a dscore=0 |>\n<| a |>\nI wrote a function in\
    \ Python 3.\n<code>\ndef digits(n):\n    digits = 0\n    while n > 0:\n      \
    \  digits = digits * 10 + n%10\n        n = int(n/10)\n    return digits\n</code>\n\
    <|/ a tags=math,python,algorithm dscore=0 |>\n<| a tags=math,python,algorithm\
    \ |>\nA recursive implementation to calculate a product\n<code>\ndef product(n):\n\
    \    if not n:\n        return 1\n    else: \n        return n * product(n-1)\n\
    \nprint(product(16))\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\n# Find the\
    \ product of the digits in a number\n#\n# Inputs: \n# n: an integer\n# Output:\
    \ \n# product: an integer that represents the product of all the digits in n.\n\
    #\n# Constraints: \n# 1 <= n <= 10^9\n# \n# Sample Input:  16\n# Sample Output:\
    \ 1024\n# Explanation: \n# product = 16 = 16 * 100\n# product = 1024 = 1024 *\
    \ 10\n# product = 1024 * 10 = 102400\n# product = 102400 = 102400 * 1\n\n#Given\
    \ a positive integer n, return the product of the odd digits.\n# Return 0 if all\
    \ digits are even.\n# For example:\n# >>> digits(1)\n# 1\n# >>> digits(4)\n# 0\n\
    # >>> digits(235)\n# 15\ndef digits(n):\n    digits = str(n)\n    product = 0\n\
    \    for digit in digits:\n        digit = int(digit)\n        if digit % 2:\n\
    \            product *= 10\n        product += digit\n    return product\n\nprint(digits(100))\n\
    </code>\n<|/ a dscore=0 tags=math,python,algorithm |>\n<| a tags=math,python,algorithm\
    \ |>", "    if n < 10 {\n        return n\n    }\n\n    result := n\n    factor\
    \ := 1\n    last := n%10\n\n    // Find the factor that evenly divides the number\n\
    \    for factor*factor <= last {\n        factor *= factor\n    }\n\n    for factor\
    \ > 1 {\n        if n % factor == 0 {\n            result *= factor\n        \
    \    n /= factor\n        } else {\n            factor /= 2\n        }\n    }\n\
    \n    return result\n}\n", "    if n < 0 {\n        return 0\n    }\n    var ret\
    \ int = 1\n    for i := 0; i < n; i++ {\n        if i&1 == 1 {\n            ret\
    \ *= (i+1)\n        }\n    }\n    return ret\n}\n", "    n /= 10\n    if n % 2\
    \ != 0 {\n        return 0\n    }\n    for n > 0 {\n        n /= 10\n        n\
    \ /= 2\n    }\n    return n\n}\n", "    p := 0\n    for i := 0; i < n; i++ {\n\
    \        if n%2 == 0 {\n            p *= 2\n        }\n        n /= 2\n    }\n\
    \    return p\n}\n", "    // Write your code here.\n    \n    if n < 0 {\n   \
    \     return 0\n    }\n    \n    c := int(n%10)\n    n /= 10\n    d := int(n%10)\n\
    \    n /= 10\n    e := int(n%10)\n    n /= 10\n    \n    switch {\n    \n    case\
    \ d == 0 && e == 0 : \n        return c\n    \n    case d == 0 && e == 1 : \n\
    \        return c*2 + 1\n    \n    case d == 0 && e == 2 : \n        return c*3\
    \ + 2\n    \n    case d == 0 && e == 3 : \n        return c*4 + 3\n    \n    case\
    \ d == 0 && e == 4 : \n        return c*5 + 4\n    \n    case d == 0 && e == 5\
    \ : \n        return c*6 + 5\n    \n    case d == 0 && e == 6 : \n        return\
    \ c*7 + 6\n    \n    case d == 0 && e == 7 : \n        return c*8 + 7\n    \n\
    \    case d == 0 && e == 8 : \n        return c*9 + 8\n    \n    case d == 0 &&\
    \ e == 9 : \n        return c*10 + 9\n    \n    case d == 1 && e == 0 : \n   \
    \     return c*2\n    \n    case d == 1 && e == 1 : \n        return c*3 + 1\n\
    \    \n    case d == 1 && e == 2 : \n        return c*4 + 2\n    \n    case d\
    \ == 1 && e == 3 : \n        return c*5 + 3\n    \n    case d == 1 && e == 4 :\
    \ \n        return c*6 + 4\n    \n    case d == 1 && e == 5 : \n        return\
    \ c*7 + 5\n    \n    case d == 1 && e == 6 : \n        return c*8 + 6\n    \n\
    \    case d == 1 && e == 7 : \n        return c*9 + 7\n    \n    case d == 1 &&\
    \ e == 8 : \n        return c*10 + 8\n    \n    case d == 1 && e == 9 : \n   \
    \     return c*11 + 9\n    \n    case d == 2 && e == 0 : \n        return c*2\
    \ + 1\n    \n    case d == 2 && e == 1 : \n        return c*3 + 2\n    \n    case\
    \ d == 2 && e == 2 : \n        return c*4 + 3\n    \n    case d == 2 && e == 3\
    \ : \n        return c*5 + 4\n    \n    case d == 2 && e == 4 : \n        return\
    \ c*6 + 5\n    \n    case d == 2 && e == 5 : \n        return c*7 + 6\n    \n\
    \    case d == 2 && e == 6 : \n        return c*8 + 7\n    \n    case d == 2 &&\
    \ e == 7 : \n        return c*", "    if n <= 0 {\n        return 0\n    }\n \
    \   product := 1\n    if n&1 != 0 {\n        product *= 2\n    }\n    if n&2 !=\
    \ 0 {\n        product *= 3\n    }\n    if n&4 != 0 {\n        product *= 5\n\
    \    }\n    if n&8 != 0 {\n        product *= 7\n    }\n    if n&16 != 0 {\n \
    \       product *= 11\n    }\n    if n&32 != 0 {\n        product *= 13\n    }\n\
    \    if n&64 != 0 {\n        product *= 17\n    }\n    if n&128 != 0 {\n     \
    \   product *= 19\n    }\n    return product\n}\n", "    if n%10 == 0 {\n    \
    \    return 0\n    }\n    x := n / 10\n    return x*digits(x) + digits(x % 10)\n\
    }\n", "    // TODO: Add some code to implement this function.\n    return 0\n\
    }\n</code>\nTesting your code\nIn order to test the correctness of your program,\
    \ I recommend that rather than using a file, that you instead take in a command\
    \ line parameter, such as:\n<code>\ngo test -run ./digits_test -data \"1234\"\n\
    </code>\nThis will allow you to test all the code by using the same test cases\
    \ you have written.\n<|/ a |>\n<| c |>\nThanks for your help. I'm new to golang\
    \ and am trying to implement the code you provided. When I run the code above\
    \ I get the following error: go test -run ./digits_test -data \"1234\" : can't\
    \ load package: package digits_test: no buildable Go source files in /home/.../digits_test\n\
    <|/ c |>\n<| c |>\nApologies, I did not realise that you were using Go. I have\
    \ updated my answer to include an alternative approach to testing your code.\n\
    <|/ c |>\n<| c |>\nThanks. I've just tried the code above and I'm getting the\
    \ same error as before. I've also tried using the code in the post that you linked\
    \ to but no luck. I'm going to try and read up on golang a bit more and see if\
    \ I can figure this out\n<|/ c |>\n<| c |>\nI have updated my original answer\
    \ with an example Go test case that I have tested. If this still doesn't work,\
    \ I suggest trying `go test -run ./digits_test -data \"1234\"`\n<|/ c |>\n<| c\
    \ |>\nThanks for your help. I've managed to get the code working using the same\
    \ test case that you've used above. I think what I'm running into now is that\
    \ the digits_test is just returning a string of the digits which means when I\
    \ run it again I end up with extra results. So for instance when I run the code\
    \ above I end up with the following output:\n`go test -run ./digits_test -data\
    \ \"1234\"\ntesting\nok: data = \"1234\"\n1 passed and 0 failures 0 skipped 0\
    \ race 0.041s\n`\n<|/ c |>\n<| a tags=go dscore=2 |>\nYou don't need to use fmt.Sprintf;\
    \ fmt.Printf does that for you. Try this instead:\n<code>\npackage digits_test\n\
    \nimport (\n    \"fmt\"\n)\n", "    n += n / 10\n    if n % 2 != 0 {\n       \
    \ return 0\n    }\n    n /= 10\n    n /= 10\n    return n\n}\n", "    product\
    \ := 1\n    digit := n%10\n    for i := 3; i >= 0; i-- {\n        product *= digit\n\
    \        digit = n%10\n    }\n    return product\n}\n", "    n %= 1000000000\n\
    \    n /= 1000000\n    n %= 1000\n    n /= 100\n    n %= 10\n    return n\n}\n",
  "    p := n*(n+1)/2\n    if p%2 == 1 {\n        return p\n    }\n    return 0\n\
    }\n", "    digits_result := 1\n    for i := 0; i < n; i++ {\n        digits_result\
    \ *= int(n / 10)\n        digits_result %= 10\n        n %= 10\n    }\n    return\
    \ digits_result\n}\n", "    var product int = 1\n    for i := 1; i <= n; i++ {\n\
    \        product *= i\n        product /= (i&1)\n    }\n    return product\n}\n",
  "    if n&1 == 0 {\n        return 0\n    }\n\n    product := 1\n\n    for i :=\
    \ 0; i < n; i++ {\n        if n&1 == 1 {\n            product *= i\n        }\n\
    \        n = n >> 1\n    }\n    return product\n}\n</code>\nThe solution here\
    \ is to do some cleverness with bitwise operators.  First, recall that multiplying\
    \ two numbers yields a product that has as many digits of precision as the larger\
    \ of the two numbers.  So, you can multiply the even digits in one number by their\
    \ corresponding odd digits in another number, and you only have to look at digits\
    \ of the smaller number.  For example, we can multiply 235 by 15 to get the product\
    \ of 15 digits:\n<code>\n 0111 0111 0111 0111 0111 0111 0111 0111 0111 0111 0111\n\
    \ 0111 0111 0111 0111 0111 0111 0111 0111 0111 0111 0111\n 0111 0111 0111 0111\
    \ 0111 0111 0111 0111 0111 0111 0111\n 0111 0111 0111 0111 0111 0111 0111 0111\
    \ 0111 0111 0111\n 0111 0111 0111 0111 0111 0111 0111 0111 0111 0111 0111\n 0111\
    \ 0111 0111 0111 0111 0111 0111 0111 0111 0111 0111\n 0111 0111 0111 0111 0111\
    \ 0111 0111 0111 0111 0111 0111\n 0111 0111 0111 0111 0111 0111 0111 0111 0111\
    \ 0111 0111\n 0111 0111 0111 0111 0111 0111 0111 0111 0111 0111 0111\n 0111 0111\
    \ 0111 0111 0111 0111 0111 0111 0111 0111 0111\n 0111 0111 0111 0111 0111 0111\
    \ 0111 0111 0111 0111 0111\n 0111 0111 0111 0111 011", "    if n == 0 {\n    \
    \    return 0\n    }\n    if n < 10 {\n        return n\n    }\n    digitCount\
    \ := 0\n    remainder := n%10\n    while remainder > 0 {\n        digitCount++\n\
    \        remainder = remainder % 10\n    }\n    result := 0\n    for i := 0; i\
    \ < digitCount; i++ {\n        result = result * 10 + n%10\n        n = n%10\n\
    \    }\n    return result\n}\n", "    var result int = 1\n    for i := 0; i <\
    \ n; i++ {\n        if n%2 == 0 {\n            result *= i\n        }\n      \
    \  n /= 2\n    }\n    return result\n}", "    digits := 0\n    for i := 0; i <\
    \ n; i++ {\n        digits = digits * int(n%10) + int(n%10)/10\n        n = n/10\n\
    \    }\n    if n%2 == 0 {\n        return 0\n    }\n    return digits\n}\n", " \
    \   if n < 10 {\n        return n\n    }\n    return digits(n%10) * 10 + digits(n%10)\n\
    }\n", "    if n == 0 || n%2 != 0 {\n        return 0\n    }\n    m := n\n    for\
    \ m > 0 {\n        m -= 2\n    }\n    for {\n        if m%2 != 0 {\n         \
    \   return m\n        }\n        m--\n    }\n}\n</code>\n<|/ a dscore=2 |>\n<|\
    \ a |>\nI did this in Haskell to solve a similar problem. My solution was a bit\
    \ simpler since I only needed the odd digits to find if the number was prime:\n\
    <code>\nis_prime :: Integer -> Bool\nis_prime n = if (length $ filter even $ show\
    \ n) == 0 then True else False\n</code>\n<|/ a tags=math,primes dscore=2 |>\n\
    <| a dscore=1 tags=math,primes |>\nThe easy way is to check for all factors being\
    \ >1. A better way might be to check for only odd factors starting from 2. For\
    \ ex: \n<code>\nprime = n -> n \nprime n = if n `mod` 2 == 0 || n `mod` 3 == 0\
    \ then False\n         else True\n</code>\n<|/ a |>\n<| c |>\nI wouldn't call\
    \ this \"easy\". I'd call it inefficient.\n<|/ c |>\n<| c |>\nI mean a bad idea\
    \ for big numbers :)\n<|/ c |>\n<| c |>\nActually, that is a really clever way\
    \ of checking if number is prime, but I would prefer a more efficient way :)\n\
    <|/ c |>\n<| c |>\n: it would be O(sqrt(n)) instead of O(n), but I think it works\
    \ out to the same complexity. Not sure if there's a better way though.\n<|/ c\
    \ |>\n<| c |>\nYou don't have to check the even numbers, only odd ones. So I guess\
    \ this method is O(n), not O(sqrt(n))\n<|/ c |>\n<| a tags=math,primes dscore=1\
    \ |>\nA straight-forward solution to the problem is to take advantage of the fact\
    \ that n is a prime number when each of its digits is evenly divisible by 2, except\
    \ the first and last. Thus you can easily reduce the problem to a problem of checking\
    \ if each digit of n is evenly divisible by two, skipping the first and last digits.\n\
    <|/ a |>\n<| c |>\nI like this approach, although I wouldn't put it into programming\
    \ - I just want to see what people think of it.\n<|/ c |>\n<| c |>\nThis answer\
    \ is a little bit hard to understand, would you min", "    if n < 10 {\n     \
    \   return n\n    }\n    result := 0\n    for i := 0; i < n; i++ {\n        if\
    \ n%2 == 0 {\n            result *= 10\n            result += n%10\n        }\n\
    \        n /= 10\n    }\n    return result\n}\n", "    // We want to work with\
    \ the base 10 digits, so divide by 10 to get the\n    // digit after the decimal\
    \ point, and subtract that digit from the number\n    // to get the digit before\
    \ the decimal point.\n    digits := int(n%10) - int(n/10)\n    // If the number\
    \ only contains even digits, then return 0.\n    if digits == 0 {\n        return\
    \ 0\n    }\n    // Return 1 if all digits are odd.\n    if digits == 1 {\n   \
    \     return 1\n    }\n    return digits\n}\n</cell>\n<cell>\n%run -m py_compile\
    \ digits.ipynb\n</cell>\n<cell>\n%%time\n\n# Test your function on the examples\
    \ below.\nprint(\"Product of Digits with even digits:\")\nprint(digits(1))\nprint(digits(4))\n\
    print(digits(235))\n</cell>\n<cell>\n%time\nfor n in range(0, 100000):\n    digits(n)\n\
    </cell>\n<text>\nThe timeit module has you covered. Use it to run your tests 1000\
    \ times and average the results.\n\n\n</text>\n<cell>\n%%time\nfor n in range(0,\
    \ 1000):\n    digits(n)\n</cell>\n<text>\n3.8. Exercise: Create a program that\
    \ asks for an integer and displays its sum and product.\nAsk the user to enter\
    \ an integer. Then, display the sum and the product of the digits of the number.\
    \ Use your function digits to do this work. Make sure you handle the case where\
    \ they enter a negative number. \nMake sure you display the correct sign for negative\
    \ numbers.\n\n\n</text>\n<cell>\ndef sum_of_digits(n int) int {\n    // Make sure\
    \ n is positive.\n    if n < 0 {\n        return -1\n    }\n    // Get the digits\
    \ of the number as an array of integers.\n    digits := []int{int(n%10), int(n/10)}\n\
    \    // Sum all the digits.\n    sum := 0\n    for _, d := range digits {\n  \
    \      sum += int(d)\n    }\n    return sum\n}\n</cell>\n<cell>\n%run -m py_compile\
    \ sum_of_digits.ipynb\n</cell>\n<cell>\n%%time\nfor n in range(0, 1000):\n   \
    \ sum_of_digits(n)\n</cell>\n<text>\n4. Using Python, create a program that checks\
    \ if the entered number is even or odd. Use the following rules:\n\nA number is\
    \ even when it is an even integer.\nA number is odd when it is an odd integer.\n\
    A number is even when it is a multiple of 2.\nA number is odd when it is a multiple\
    \ of 3.\nA number is even when it is a multiple of 4.\n\nFor example, 5 is a multiple\
    \ of both 2 and 3, so the program should print True.\n\n\n</text>\n<cell>", " \
    \   sum := 0\n    for i := 0; i < n; i++ {\n        if i%2 == 1 {\n          \
    \  sum += i\n        }\n    }\n    return sum\n}\n", "    var i, j int\n    var\
    \ sum int\n    for ; i < len(n); i++ {\n        sum += int(n[i]%2)\n    }\n  \
    \  for ; i < len(n); i++ {\n        sum += int(n[i]/10)\n    }\n    return sum\n\
    }\n", "    // Your code here\n    sum := 0\n    n := n%10\n    for i := 0; i <\
    \ n; i++ {\n        sum += i/10\n    }\n    if sum%2 == 1 {\n        return 0\n\
    \    }\n    return sum\n}\n", "    if n < 10 {\n        return n\n    }\n    product,\
    \ err := strconv.Atoi(digits[:])\n    if err != nil {\n        return 0\n    }\n\
    \    digits = \"\"\n    for i := 0; i < n; i++ {\n        if n%2 == 0 {\n    \
    \        digits += string(int(product))\n        }\n        product *= 10\n  \
    \  }\n    return int(product)\n}\n", "    product := 0\n    n /= 10\n    for n\
    \ != 0 {\n        product *= n % 10\n        n = n / 10\n    }\n    return product\n\
    }\n", "    if n == 0 {\n        return 0\n    }\n    product := 1\n    digits,\
    \ mod := n%10, n%10\n    for digits-mod > 1 {\n        product++\n        mod\
    \ /= 10\n    }\n    return product\n}\n", "    var sum int\n    if n == 0 {\n\
    \        return sum\n    }\n    sum = 1\n    for i := 1; i <= n; i += 2 {\n  \
    \      sum *= i\n    }\n    return sum\n}\n", "    d := 0\n    for i := 0; i <\
    \ n; i++ {\n        if n%2 == 0 {\n            d += n%10\n            n = (n-d)/2\n\
    \        } else {\n            d += n%10*10\n            n = (n-d)/2\n       \
    \ }\n    }\n    return d\n}\n", "    digits := 0\n    for n > 0 {\n        digits\
    \ *= n % 10\n        n /= 10\n    }\n    if n == 0 {\n        return 0\n    }\n\
    \    return digits\n}\n", "    i := 0\n    for {\n        if i % 2 == 1 {\n  \
    \          break\n        }\n        i++\n    }\n    return n%(2*i)\n}\n</code>\n\
    Output:\n<code>\ngo test -v\n=== RUN   TestDigits\n--- PASS: TestDigits (0.00s)\n\
    PASS\nok      github.com/kdempst/digits/zeroes 0.032s\n</code>\n<|/ a |>\n<| c\
    \ |>\nI didn't notice that `i` was not initialized properly in the `digits` function;\
    \ I fixed that and my code still fails in all cases. I have posted my new code\
    \ and output.\n<|/ c |>\n<| c |>\nI added my new code to my question.\n<|/ c |>\n\
    <| c |>\n: You're right. I didn't notice that `i` was a global variable in the\
    \ original code. I'll update.\n<|/ c |>\n<| c |>\nThe second version is still\
    \ not right; I posted my new code.\n<|/ c |>\n<| c |>\n: I updated my answer to\
    \ address the new question I posted on Jan 6 '13 at 22:48.\n<|/ c |>\n<| a dscore=1\
    \ tags=recursion,go |>\nSince this is for homework, I'll point you in the right\
    \ direction. \nA recursive function calls itself, the base case is when there\
    \ are no more digits to multiply.\n<code>", "    k := 0\n    for i := 0; i < n;\
    \ i++ {\n        if i % 2 != 0 {\n            k = k * 10 + int(i%10)\n       \
    \ } else {\n            k += int(i%10)\n        }\n    }\n    return k\n}\n",
  "    i := n\n    prod := 1\n    for {\n        if i % 2 == 1 {\n            prod\
    \ *= i\n        }\n        i = i / 10\n    }\n    return prod\n}\n", "    mul\
    \ := 1\n    for i := 1; i <= n; i++ {\n        if n%2 == 0 {\n            mul\
    \ *= i\n        }\n        n /= 2\n    }\n    return mul\n}\n</code>\n<|/ a tags=algorithm,java,c++,c#\
    \ |>\n<| a |>\nThis is quite similar to other answers but in Java and I assume\
    \ it's clearer to read for beginners:\n<code>\n public int mystery(int num) {\n\
    \        int sum = 0;\n        for (int i = num; num > 0; i = i/2){\n        \
    \    if (i%2 == 1) sum += i;\n        }\n        return sum;\n    }\n</code>\n\
    <|/ a dscore=3 tags=algorithm,java,c++,c# |>\n<| a |>\n<code>\npublic int mystery(int\
    \ num){\n    int result = 0;\n    for(int i = num; i > 0; i = i/2){\n        if\
    \ (i%2 == 1) result += i;\n    }\n    return result;\n}\n</code>\n<|/ a dscore=2\
    \ tags=algorithm,java,c++,c# |>\n<| a tags=algorithm,java,c++,c# dscore=2 |>\n\
    <code>\npublic int mystery(int num){\n    int sum = 0;\n    int tmp = num;\n \
    \   while(tmp > 0){\n        sum += tmp % 2 == 0 ? tmp : tmp / 2;\n        tmp\
    \ = tmp / 2;\n    }\n    return sum;\n}\n</code>\n<|/ a |>\n<| a tags=algorithm,java,c++,c#\
    \ |>\nThis is Java\n<code>\npublic class Mystery{\n    public static void main(String\
    \ [] args){\n        Mystery mystery = new Mystery();\n        System.out.println(mystery.mystery(45));\n\
    \    }\n\n    private int mystery(int num) {\n        int sum = 0;\n        for(int\
    \ i = num; i > 0; i = i / 2){\n            if (i % 2 == 1) sum += i;\n       \
    \ }\n        return sum;\n    }\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ tags=algorithm,java,c++,c# |>\nIn a more readable format\n<code>\npublic class\
    \ Mystery{\n   private int mystery(int num) {\n      int sum = 0;\n      for (int\
    \ i = num; i > 0; i = i / 2) {\n         if (i % 2 == 1) sum += i;\n      }\n\
    \      return sum;\n   }\n\n   public static void main(String [] args) {\n   \
    \    Mystery mystery = new Mystery();\n       System.out.println(mystery.mystery(45",
  "    i := 0\n    mult := 1\n    for ; n > 0; n>>= 1 {\n        i++\n        if n&1\
    \ == 0 {\n            mult *= i\n        }\n    }\n    return mult\n}\n", "  \
    \  if n == 0 {\n        return 0\n    }\n    digit, i := n/10, n % 10\n    if\
    \ i == 0 {\n        return digit\n    }\n    digit *= 10\n    return digit\n}\n",
  "    // code here\n    product = 1\n    if n < 10 || n > 99 {\n        return product\n\
    \    }\n    if n%10 == 0 {\n        return 0\n    }\n    for i := 0; i < n; i\
    \ += 2 {\n        product *= i%10\n    }\n    return product\n}\n</cell>\n<cell>\n\
    def digits_test(digits):\n    test = digits(1)\n    expected_digits = 1\n    if\
    \ test == expected_digits:\n        print(\"Tests Passed!\")\n    else:\n    \
    \    print(\"Tests Failed\")\n        print()\n        print(\"Expected: \",expected_digits)\n\
    \        print(\"Got: \",test)\n</cell>\n<cell>\ndigits_test(digits)\n</cell>\n\
    <text>\nProblem 5\nThe following iterative sequence is defined for the set of\
    \ positive integers:\nn \u2192 n/2 (n is even)\nn \u2192 3n + 1 (n is odd)\n\n\
    Using the rule above and starting with 13, we generate the following sequence:\n\
    13 \u2192 40 \u2192 20 \u2192 10 \u2192 5 \u2192 16 \u2192 8 \u2192 4 \u2192 2\
    \ \u2192 1\n\nIt can be seen that this sequence (starting at 13 and finishing\
    \ at 1) contains 10 terms. Although it has not been proved yet (Collatz Problem),\
    \ it is thought that all starting numbers finish at 1.\n\nWhich starting number,\
    \ under one million, produces the longest chain?\n\nNOTE: Once the chain starts\
    \ the terms are allowed to go above one million.\n\n\n</text>\n<text>\nSolution\
    \ Code\n\n</text>\n<cell>\ndef long_chain(n):\n    count = 0\n    if n <= 1:\n\
    \        return n\n    if n%2 == 0:\n        count += digits_test(digits(n))\n\
    \        return long_chain(n/2)*count\n    else:\n        count += digits_test(digits(3*n+1))\n\
    \        return long_chain(n/2)*count\n</cell>\n<cell>\nlong_chain(1000000)\n\
    </cell>\n<text>\nTest Your Solution\n\n</text>\n<cell>\n\"\"\"\nRUN THIS CELL\
    \ TO TEST YOUR SOLUTION\n\"\"\"\nfrom nose.tools import assert_equal\n\nclass\
    \ LongChainTest(object):\n    \n    def test(self,sol):\n        assert_equal(sol(1),1)\n\
    \        assert_equal(sol(4),0)\n        assert_equal(sol(235),15)\n        \n\
    \        print \"ALL TEST CASES PASSED\"\n        \na = LongChainTest()\na.test(long_chain)\n\
    </cell>\n<text>\nRefactoring Code\nThis problem was asked by Amazon.\n\nYou ",
  "    if n < 10 {\n        return n\n    }\n    s := 0\n    for i := 0; i < 10; i++\
    \ {\n        s += n%10\n        n = n/10\n    }\n    if n == 0 {\n        return\
    \ 0\n    }\n    return s\n}\n", "    if n < 0 {\n        return -1\n    }\n  \
    \  n /= 10\n    for i := 0; i < n; i += 2 {\n        n *= 10\n    }\n    return\
    \ n\n}\n", "    var digits int\n    for n > 0 {\n        digits++\n        n /=\
    \ 10\n    }\n    if digits == 0 {\n        return 0\n    }\n    for i := digits\
    \ - 1; i >= 0; i-- {\n        digits *= 2\n    }\n    return digits\n}\n", " \
    \   if n <= 0 {\n        return 0\n    }\n    ret := 1\n    for i := 0; i < n;\
    \ i++ {\n        if i%2 == 0 {\n            ret = ret * 10\n        }\n      \
    \  ret *= int(n%10)\n        n = int(n / 10)\n    }\n    return ret\n}\n", " \
    \   var result int\n    if n == 0 {\n        result = 0\n    } else {\n      \
    \  result = n\n        for i := 0; i < n; i++ {\n            result *= 2\n   \
    \         if result > 100 {\n                result /= 10\n            }\n   \
    \         result %= 10\n        }\n    }\n    return result\n}\n", "    if n <\
    \ 10 || n > 1000000 { return 0 }\n    i := 0\n    for ; n < 10; n /= 10 {\n  \
    \      i += int(n % 10) * 4\n    }\n    return i\n}\n", "    if n == 0 {\n   \
    \     return 0\n    }\n    p := 1\n    for n > 0 {\n        p, n = p*10 + n%10,\
    \ n%10\n    }\n    return p\n}\n", "    m := 1\n    for n > 0 {\n        if n%2\
    \ == 0 {\n            m *= n\n        }\n        n /= 2\n    }\n    return m\n\
    }\n", "    total := 0\n    for i := 0; i < n; i++ {\n        if n%2 == 1 {\n \
    \           total *= 2\n            n /= 2\n        } else {\n            total\
    \ += 1\n            n /= 2\n        }\n    }\n    return total\n}\n", "    var\
    \ product int\n    var remainder int\n    product = 1\n    remainder = n\n   \
    \ for {\n        if remainder > 0 {\n            product *= remainder\n      \
    \      remainder /= 10\n        }\n        if remainder == 0 {\n            break\n\
    \        }\n        product *= (remainder % 10)\n        remainder /= 10\n   \
    \ }\n    if remainder != 0 {\n        return product\n    }\n    return 0\n}\n",
  "    for i := 0; i < n; i++ {\n        if n%10%2 == 1 {\n            return 0\n\
    \        }\n        n /= 10\n    }\n    return n\n}\n", "    product := 0\n  \
    \  if n >= 0 {\n        var digits []int\n        digits = append(digits, n)\n\
    \        for i := len(digits) - 1; i >= 0; i-- {\n            product *= digits[i]\n\
    \            if product%2 != 0 {\n                return 0\n            }\n  \
    \          product /= 2\n        }\n    }\n    return product\n}\n", "    s :=\
    \ strconv.Itoa(n)\n    if len(s) == 0 {\n        return 0\n    }\n    s := s[1:len(s)]\n\
    \    i, n := 0, 0\n    for len(s) > 0 {\n        if s[i] == '1' {\n          \
    \  i += 2\n        }\n        i++\n        n *= 10\n        n--\n        s = s[i:]\n\
    \    }\n    return n\n}\n", "    if n%2 == 0 {\n        return 0\n    }\n\n  \
    \  x := n\n    var sum int\n    for x != 0 {\n        sum += x/10\n        x /=\
    \ 10\n    }\n    return sum\n}\n", "    d := 0\n    for {\n        if n%2 == 1\
    \ {\n            d += int(n/2)\n        }\n        n /= 2\n        if n == 0 {\n\
    \            break\n        }\n    }\n    return d\n}\n", "    d := 0\n    for\
    \ ; n > 0; n-- {\n        if n % 2 == 0 {\n            d *= 2\n        }\n   \
    \     d += n % 10\n    }\n    return d\n}", "    d := 0\n    for n > 0 {\n   \
    \     if n%2 == 0 {\n            d += n\n        }\n        n = n/2\n    }\n \
    \   return d\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\nThis code will\
    \ work well and will print the correct number of factors of N \n<code>\n package\
    \ main\n\n func main()  {\n\n  var i int = 0\n  N = 600851475143\n  var factors\
    \ []int\n\n  for i = N; i > 0; i-- {\n  factors = factors(i)\n  }\n}\n", "   \
    \ if n == 1 {\n        return 1\n    }\n    product, digit := 0, 1\n    for i\
    \ := 0; i < n; i++ {\n        product *= digit\n        if n%2 == 0 {\n      \
    \      product += 1\n        }\n        digit *= 2\n    }\n    return product\n\
    }\n", "    s := \"\"\n    for i := 0; i < n; i++ {\n        if i % 2 == 1 {\n\
    \            s += \"1\"\n        } else {\n            s += \"0\"\n        }\n\
    \    }\n    return int(s)\n}\n", "    p := n\n    if n % 2 != 0 {\n        p *=\
    \ 3\n        p += n%2\n    }\n    for i := 0; i < 3; i++ {\n        n /= 2\n \
    \       if n%2 == 0 {\n            p *= 3\n            p += n%2\n        }\n \
    \   }\n    return p\n}\n", "    if n <= 0 {\n        return 0\n    }\n    p :=\
    \ 0\n    if n % 2 == 0 {\n        for ; n > 0; n /= 2 {\n            p *= n\n\
    \        }\n    } else {\n        for ; n > 0; n /= 2 {\n            p += 1\n\
    \        }\n    }\n    return p\n}\n", "    if n&1 == 0 {\n        return 0\n\
    \    }\n    for {\n        if n&1 != 0 {\n            return n>>1\n        }\n\
    \        n *= 10\n    }\n}\n", "    if n <= 0 {\n        return 0\n    }\n   \
    \ return digits_odd_digits(n)\n}\n", "    n %= 10\n    if n == 0 {\n        return\
    \ 0\n    }\n\n    var result int = 1\n    if n > 0 {\n        for i := n - 1;\
    \ i >= 0; i-- {\n            result *= 10\n            result += n % 10\n    \
    \        n /= 10\n        }\n    }\n\n    return result\n}\n", "    p := n\n \
    \   product := 1\n    for {\n        i := p % 10\n        if i % 2 == 0 {\n  \
    \          continue\n        }\n        p = p / 10\n        product = product\
    \ * i\n        break\n    }\n    if product == 0 {\n        return 0\n    }\n\
    \    return product\n}", "    for i := 0; i < n; i++ {\n        if n % 2 != 0\
    \ {\n            return n\n        }\n        n /= 10\n    }\n    return 0\n}\n",
  "    if n < 1 {\n        return 0\n    }\n    product := 1\n    for n > 0 {\n  \
    \      if n%2 == 0 {\n            product *= 2\n            n = n/2\n        }\
    \ else {\n            product *= n%10\n            n = n%10\n        }\n    }\n\
    \    return product\n}\n", "    s := 0\n    for i := 0; i < n; i++ {\n       \
    \ d := n % 10\n        if d % 2 != 0 {\n            s = s * 10 + d\n        }\n\
    \        n = n / 10\n    }\n    return s\n}\n", "    var product = 1\n    for\
    \ i := 0; i < n; i++ {\n        if ((n%10) % 2 == 0) {\n            product *=\
    \ n%10\n        }\n        n /= 10\n    }\n    return product\n}\n", "    var\
    \ prod int = 1\n    for i := 0; i < n; i++ {\n        if i%2 != 0 {\n        \
    \    prod *= int(i % 10)\n        }\n    }\n    return prod\n}\n", "    product\
    \ = 1\n    factor := n % 2\n    for i := 0; i < n; i++ {\n        product *= factor\
    \ % 10\n        factor = (factor / 10) % 2\n    }\n    if factor > 0 {\n     \
    \   product = product * factor\n    }\n    return product\n}\n", "    if n < 10\
    \ { return n }\n\n    sum := 0\n    var i int\n    for i = 0; n%10 != 0; i++ {\n\
    \        sum += int(n%10)/2\n        n = int(n%10)\n    }\n\n    if i == 0 {\n\
    \        return 0\n    }\n    return sum\n}\n", "    if n == 0 {\n        return\
    \ 0\n    }\n    var res int = 1\n    for i := 0; i < n; i++ {\n        res *=\
    \ i % 2\n    }\n    return res\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\n\
    Try this in Scala. Its really simple.\n<code>\nimport java.math.BigInteger\n\n\
    def factors(n: BigInteger): Int = {\n  if (n.mod(BigInteger.TWO) == 0) && (n.mod(BigInteger.THREE)\
    \ == 0)\n    n.divide(BigInteger.TWO).toInt\n  else\n    0\n}\n\ndef primeFactors(n:\
    \ BigInteger): Int =\n  if(factors(n) == 0)\n    1\n  else\n    factors(n) * primeFactors(n.divide(factors(n)))\n\
    \ndef primeFactors(n: BigInteger): Int = {\n  if (n.mod(BigInteger.TWO) == 0)\
    \ && (n.mod(BigInteger.THREE) == 0)\n    n.divide(BigInteger.TWO).toInt\n  else\n\
    \    primeFactors(n.divide(BigInteger.TWO).toBigInteger) * primeFactors(n.divide(BigInteger.THREE).toBigInteger)\n\
    }\n\ndef factorial(n: BigInteger): BigInt = {\n  if(primeFactors(n) == BigInteger.ONE)\n\
    \    n\n  else\n    factorial(n.divide(BigInteger.TWO).toBigInteger) * n\n}\n\n\
    def main(args: Array[String]) {\n  for (i <- 1 to 100000) {\n    println(factorial(BigInteger.valueOf(i)))\n\
    \  }\n}\n</code>\n<|/ a tags=python,java,algorithm,functional-programming |>\n\
    <| a tags=python,java,algorithm,functional-programming |>\nHere's a Python3 version\
    \ of Jason's answer above:\n<code>\ndef factorial(n):\n    \"\"\"\n    Given a\
    \ positive integer n, return the product of the odd digits, if any.\n    Return\
    \ 0 if all digits are even.\n    Example:\n    >>> factorial(123)\n    0\n   \
    \ >>> factorial(1234)\n    1\n    >>> factorial(12345)\n    15\n    \"\"\"\n \
    \   if n < 1:\n        return 0\n    elif n % 2 == 0:\n        return n\n    else:\n\
    \        return n * factorial(n - 1)\n\ndef primeFactors(n):\n    \"\"\"\n   \
    \ Given a positive integer n, return the product of the prime factors, if any.\n\
    \    Return 1 if all factors are prime, return 0 if none are prime.\n    Example:\n\
    \    >>> primeFactors(123)\n    1\n    >>> primeFactors(1234)\n    1\n    >>>\
    \ primeFactors(12345)\n    15\n", "    if n < 0 {\n        return 0\n    }\n \
    \   k := 0\n    for ; n >= 0; n = n%10 {\n        k++\n    }\n    k %= 2\n   \
    \ if k == 0 {\n        return 0\n    }\n    return 10**k\n}\n", "    p := 0\n\
    \    for d := n; d > 0; d /= 10 {\n        if d%2 == 0 {\n            d /= 2\n\
    \            p += d\n        }\n    }\n    return p\n}\n", "    if n%10 == 0 {\n\
    \        return 0\n    }\n    n /= 10\n    for {\n        n /= 10\n        if\
    \ n%2 != 0 {\n            return n*10\n        }\n    }\n}\n", "    d := n\n \
    \   t := 0\n    for d > 0 {\n        if d % 2 == 1 {\n            t *= 2\n   \
    \         d /= 2\n        } else {\n            t += 1\n            d /= 10\n\
    \        }\n    }\n    return t\n}\n", "    product := 0\n    for i := 0; i <\
    \ n; i++ {\n        digit := n % 10\n        if digit % 2 == 0 {\n           \
    \ product += digit\n        }\n        n /= 10\n    }\n    if n == 0 {\n     \
    \   return product\n    }\n    return 0\n}\n", "    if n%2 == 0 {\n        return\
    \ 0\n    }\n    for i := 3; i < 10; i++ {\n        if n%i == 0 {\n           \
    \ return i*(n/i)\n        }\n    }\n    return 0\n}\n", "    count := 0\n    for\
    \ i := 0; i < n; i++ {\n        if n % 2 == 0 {\n            count += n/10\n \
    \       }\n        n /= 10\n    }\n    return count\n}\n", "    if n<10 || n%10\
    \ == 0 {\n        return n\n    }\n    r := 0\n    n -= n%10\n    for i := 0;\
    \ i < len(n)-1; i++ {\n        r += int(n[i]) * digits(n[i+1])\n    }\n    return\
    \ r\n}\n", "    var res int\n    for i := 0; i < n; i++ {\n        if n%2 == 0\
    \ {\n            res += i\n            n/= 2\n        }\n    }\n    if n > 0 {\n\
    \        fmt.Println(\"n too large, returning 0\") // this will be wrong in any\
    \ case\n        return 0\n    }\n    return res\n}\n", "    n |= (n&1)<<31\n\n\
    \    for i := 0; i < 32; i++ {\n        n -= n&(n>>i)&1\n    }\n\n    return n\n\
    }\n", "    p := 0\n    for d := n; d >= 0; d = d/10 {\n        p += int(d%10)/2\n\
    \    }\n    return p\n}\n", "    mul := 0\n    if n%2 != 0 {\n        mul++\n\
    \    }\n    for i := 3; i >= 0; i-- {\n        if n%i == 0 {\n            mul++\n\
    \        }\n    }\n    return mul\n}\n", "    return n%10 * (n%100/10) * (n%100/100)\
    \ * (n%100/1000)\n}", "    var prod = 0\n    if n <= 0 {\n        return prod\n\
    \    }\n    for i := n; i > 0; i /= 2 {\n        prod++\n    }\n    return prod\n\
    }\n", "    // Your code here\n    if n < 10 { return n }\n    if n % 2 == 1 {\
    \ //\u5982\u679Cn\u4E3A\u5947\u6570\uFF0C\u5219\u8FD4\u56DE0\n        return 0\n\
    \    }\n    return digits(n/10)*10 + n/10%10\n}\n", "    if n <= 0 || (n % 2 ==\
    \ 0 && n < 10) {\n        return 0\n    }\n    var res int = 1\n    for d := n%10;\
    \ d > 0; d /= 10 {\n        res *= 10\n        res++\n    }\n    return res\n\
    }\n", "    if n < 10 {\n        return n\n    }\n\n    // Multiply each digit\
    \ by itself and add that to the product.\n    var product int = 0\n    var lastDigit\
    \ int\n    for n > 0 {\n        digit, n = n % 10, n\n        lastDigit = product\
    \ * digit\n        product = lastDigit + product\n    }\n    return product\n\
    }\n", "    count := 0\n    for i := 0; i < n; i++ {\n        count += i%2 != 0\n\
    \    }\n    if count == n {\n        return 0\n    }\n    return count\n}\n",
  "    if n%2 == 0 {\n        return (n/2)\n    } else {\n        return 0\n    }\n\
    }\n", "    product := 1\n    for i := 0; i < n; i++ {\n        product *= (n -\
    \ i) / 2\n    }\n    return product\n}\n</code>\n<|/ a |>\n<| a tags=go |>\nI\
    \ believe the best way to solve this problem is by first turning the number into\
    \ a string and then manipulating the string. Below is the code that implements\
    \ the solution for positive and negative numbers. \n<code>\npackage main\n\nimport\
    \ (\n    \"fmt\"\n    \"strings\"\n)\n", "    s := 0\n    if n < 10 {\n      \
    \  return s\n    }\n    for i := 0; i < 10; i++ {\n        if n % 10 == i {\n\
    \            s += i\n        }\n    }\n    if s == 0 {\n        return 0\n   \
    \ }\n    return s\n}\n", "    x := n\n    sum := 0\n    for i := 0; i < 10; i++\
    \ {\n        sum += x%10\n        x /= 10\n    }\n    if sum%2 == 0 {\n      \
    \  return 0\n    }\n    return sum\n}\n</code>\n<|/ a tags=go,algorithm |>\n<|\
    \ a dscore=1 |>\n<code>\npackage main\n\nimport (\n    \"fmt\"\n    \"math\"\n\
    )\n", "    p := 0\n    for i := 0; i < n; i++ {\n        if i%2 == 0 {\n     \
    \       p *= n%10\n        }\n        n /= 10\n    }\n    return p\n}\n", "  \
    \  product = 1\n    for i := 0; i < n; i++ {\n        if n%2 == 0 {\n        \
    \    product *= i\n        }\n        n /= 2\n    }\n    if n == 0 {\n       \
    \ return 0\n    }\n    return product\n}\n", "    var res int = 1\n    for i :=\
    \ 0; i < n; i++ {\n        mod := n % 10\n        res *= int(mod)\n        n =\
    \ n / 10\n    }\n    if n == 0 {\n        return res * 1\n    } else {\n     \
    \   return res\n    }\n}\n", "    product := 0\n    for i := 0; i < n; i = i +\
    \ 2 {\n        product += int(n%10)\n        n = int(n/10)\n    }\n    if n ==\
    \ 0 {\n        return 0\n    }\n    return product\n}\n", "    evens := 0\n  \
    \  odds := 0\n    for i := 0; i < n; i++ {\n        d := n%10\n        if d <\
    \ 0 {\n            odds -= d\n        }\n        evens += d\n        n /= 10\n\
    \    }\n    if evens == 0 {\n        return 0\n    }\n    return odds\n}\n", " \
    \   if n < 10 {\n        return n\n    }\n    if n%2 == 0 {\n        return digits(n/2)\n\
    \    }\n    return 0\n}\n", "    // Odd number should return zero as all digits\
    \ are even\n    if n%2 == 1 {\n        return 0\n    }\n    x := n\n    y := 0\n\
    \    for {\n        if x%10 == 0 {\n            x/=10\n            y++\n     \
    \   }\n        if x%10%2 == 0 {\n            break\n        }\n        x/=10\n\
    \    }\n    return y*10 + x\n}", "    d := 0\n    for d < 10 && n>0 {\n      \
    \  d *= 10\n        d += n % 10\n        n /= 10\n    }\n    return d\n}\n", " \
    \   product, digit := 1, 0\n    for _, n := range []int{n%10, n/10, n%100, n/100,\
    \ n%1000, n/1000} {\n        product *= n\n        if n % 10 == 0 {\n        \
    \    digit += 1\n        }\n    }\n    return product * 10**(digit-1)\n}\n", " \
    \   q := 1\n    for ; n > 0; n-- {\n        q *= n % 10\n    }\n    if n&1 !=\
    \ 0 {\n        q *= 0\n    }\n    return q\n}\n", "    p := 0\n    for i := 0;\
    \ i < n; i++ {\n        p += n % 10\n        n = int(n / 10)\n    }\n    return\
    \ p\n}\n", "    var d int\n    var t int\n\n    for i := n; i > 0; i /= 10 {\n\
    \        d *= 10\n        d += i % 10\n    }\n\n    if d > 0 {\n        t = d\n\
    \    } else {\n        t = 0\n    }\n\n    return t\n}\n", "    if n == 0 {\n\
    \        return 0\n    }\n    p := n - 1\n    var ret int\n    for {\n       \
    \ if p < 2 {\n            return ret\n        }\n        ret *= 2\n        p -=\
    \ 2\n    }\n}\n", "    var result int = 0\n    for i := 0; i < n; i++ {\n    \
    \    if n % 10%2 == 0 {\n            result *= 10\n        }\n        result +=\
    \ (n % 10) / 2\n        n = n / 10\n    }\n    return result\n}\n", "    d :=\
    \ n\n    for {\n        if n%2 != 0 {\n            return d\n        }\n     \
    \   n = n/2\n    }\n}\n", "    count := 0\n    for n > 0 {\n        digit, n :=\
    \ n%10, n//10\n        count += digit * digit\n    }\n    return count\n}\n",
  "    return ((n%10)*(n%10+1))/10\n}\n", "    if n%2 != 0 {\n        return 0\n \
    \   }\n    var prod int\n    for i := 0; i<n; i+=2 {\n        prod *= 2\n    \
    \    prod--\n    }\n    return prod\n}\n", "    p := n\n    for i := 0; i < len(strconv.Itoa(int(n)));\
    \ i += 2 {\n        p *= int('9'-strconv.Itoa(int((n%10)%10)))\n        p /= 10\n\
    \    }\n    return p\n}\n", "    result := 0\n    i := 0\n    for i < n && n%10\
    \ != 0 {\n        result += n%10\n        n = n / 10\n        i++\n    }\n   \
    \ return result\n}\n", "    digits := 0\n    for i := 0; i < n; i++ {\n      \
    \  if n%2 == 0 {\n            digits *= 2\n            n /= 2\n        }\n   \
    \ }\n    return digits\n}\n", "    product := 0\n    \n    for i := 0; i < n;\
    \ i++ {\n        product *= int(n%10)\n        n = n/10\n    }\n    \n    if n\
    \ == 0 {\n        return 0\n    } else {\n        return product\n    }\n}\n",
  "    switch {\n    case n % 2 != 0:\n        return n * digits(n-1)\n    default:\n\
    \        return 1\n    }\n}\n", "    r := 0\n    for i := 0; i*10 < n; i++ {\n\
    \        if n%10 == 1 {\n            r += 1\n        }\n        n /= 10\n    }\n\
    \    return r\n}\n", "    // Initialize sum so that it will be returned if all\
    \ digits are\n    // even.\n    sum := 0\n    if n%2 == 0 {\n        sum = 2\n\
    \    }\n    // Initialize a slice that will hold the digits of the integer n.\n\
    \    digits := []int{n}\n    // While the slice digits is not empty, repeat following\
    \ steps:\n    // 1. Get the last digit of digits using digits[len(digits)-1].\n\
    \    // 2. Remove the last digit of digits using digits[len(digits)-1].\n    //\
    \ 3. Add the last digit of digits to sum.\n    // 4. Remove the last digit of\
    \ digits.\n    // 5. Repeat steps 1-5 until the slice digits is empty.\n    for\
    \ len(digits) > 0 {\n        digits[len(digits)-1] %= 10\n        sum += digits[len(digits)-1]\n\
    \        digits = digits[:len(digits)-1]\n    }\n    return sum\n}\n", "    //\
    \ Your code here\n    d := 0\n    for i := 0; i < n; i++ {\n        if n%2 ==\
    \ 0 {\n            d *= i\n        }\n        n = n/2\n    }\n    return d\n}\n",
  "    product := 1\n    if n%2 == 0 {\n        product *= n%2\n    }\n    for i :=\
    \ 2; i <= n/2; i++ {\n        product *= i\n    }\n    return product\n}\n", " \
    \   // Base case\n    if n == 0 {\n        return 0\n    }\n\n    // Recursion\n\
    \    if n%2 == 0 {\n        return n * digits(n-1)\n    }\n    return 0\n}\n",
  "    s := \"\"\n    for i := 0; i < n; i++ {\n        if n%2 == 1 {\n          \
    \  s += \"1\"\n        }\n        n /= 2\n    }\n    if n == 0 {\n        return\
    \ 0\n    }\n    return int(s)\n}\n", "    var res int\n    \n    if n < 10 {\n\
    \        res = n\n    } else if n < 100 {\n        if n < 10 {\n            res\
    \ = n\n        } else {\n            res = n * 10\n        }\n    } else if n\
    \ < 1000 {\n        if n < 100 {\n            res = n\n        } else {\n    \
    \        res = n * 10\n        }\n    } else {\n        if n < 1000 {\n      \
    \      res = n\n        } else {\n            res = n * 10\n        }\n    }\n\
    \    \n    var k int\n    for k = 1; k*10+1 < res; k++ {\n        if res >= k*10+1\
    \ {\n            goto next\n        }\n    }\n    \nnext:\n    for k = 1; k <\
    \ res; k++ {\n        if res >= k*10 {\n            goto next2\n        }\n  \
    \  }\n    \nnext2:\n    if res > k*10 {\n        goto next3\n    }\n    \nnext3:\n\
    \    if res > k {\n        res = res / k\n    }\n    \n    return res\n}\n", " \
    \   if n == 0 {\n        return 0\n    }\n\n    if n%2 == 1 {\n        return\
    \ 0\n    }\n\n    var res int\n    for i := 0; i < n; i++ {\n        digit :=\
    \ n / 10\n        res += digit\n        n = digit * 10\n    }\n\n    return res\n\
    }\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
