language: go_test.go
name: HumanEval_107_even_odd_palindrome
results:
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    palindromes := make([]interface{}, 0, 2)\n    if n\
    \ < 1 {\n        return palindromes\n    }\n    for i := 0; i < n; i++ {\n   \
    \     odd := true\n        palindromes = append(palindromes, i)\n        for j\
    \ := i; j < n; j++ {\n            if odd*((j-1)/j) != j {\n                odd\
    \ = false\n                palindromes = append(palindromes, j)\n            }\n\
    \        }\n        if odd*((n-1)/(n-1)) != n {\n            odd = false\n   \
    \         palindromes = append(palindromes, n)\n        }\n    }\n    return palindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8tfpxq1k_test.go:32:16: invalid operation: odd * ((j - 1) / j) (mismatched
    types bool and int)

    /tmp/tmp8tfpxq1k_test.go:37:12: invalid operation: odd * ((n - 1) / (n - 1)) (mismatched
    types bool and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074239
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    // write your code here\n    result := make([]interface{},\
    \ 2*(n+1))\n    for i := 0; i < 2*(n+1); i++ {\n        if i%2 == 0 {\n      \
    \      result[i] = fmt.Sprintf(\"%d\", i)\n        } else {\n            result[i]\
    \ = fmt.Sprintf(\"%d\", i+n)\n        }\n    }\n    return result\n}\n</code>\n\
    <|/ a |>\n<| c |>\nThis is a very clever solution. I was just thinking about how\
    \ to generate this kind of list. Very clever indeed!\n<|/ c |>\n<| c |>\nI like\
    \ it as well, thank you for your answer!\n<|/ c |>\n<| c |>\n: Could you please\
    \ explain the algorithm, it would be great to understand it even when it's not\
    \ efficient.\n<|/ c |>\n<| c |>\nThis is very nice. My first thought was to just\
    \ do a palindrome test in the range and increment a counter in each iteration.\
    \ However, this does not generate the same output. Think about the case of 10^10\
    \ palindromes. In each step, the first palindrome that comes out is incremented\
    \ +1 and then test again for the next palindrome. Thus, each step has O(n) complexity\
    \ with O(n) memory requirement. I think it's better to do it in one pass like\
    \ this, but I wanted to see what it looked like.\n<|/ c |>\n<| a dscore=4 tags=algorithm,go\
    \ |>\nHere is an alternative which uses the same trick as that of Szymon but uses\
    \ O(n) instead of O(n^2) memory requirement:\n<code>\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp8ew2c_5q_test.go:35:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074238
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    // write your code here\n    p := make([]interface{},\
    \ 0, 2*n)\n    for i := 1; i < n; i++ {\n        for j := i - 1; j >= 0; j-- {\n\
    \            p := append(p, i)\n            if j <= 0 || j > i {\n           \
    \     break\n            }\n        }\n    }\n    p := append(p, i+1)\n    return\
    \ p\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg9l77tln_test.go:28:13: p declared but not used

    /tmp/tmpg9l77tln_test.go:34:7: no new variables on left side of :=

    /tmp/tmpg9l77tln_test.go:34:20: undefined: i

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074239
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    var evenPalindromes []int\n    var oddPalindromes\
    \ []int\n    n := n + 1 // handle edge cases\n    for i := 0; i < n; i++ {\n \
    \       num := i + 1 // num is odd, i is even\n        isEven, isOdd := isPalindrome(num)\n\
    \        if isEven {\n            evenPalindromes = append(evenPalindromes, num)\n\
    \        } else {\n            oddPalindromes = append(oddPalindromes, num)\n\
    \        }\n    }\n    return evenPalindromes, oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpdbec0i83_test.go:26:7:\
    \ no new variables on left side of :=\n/tmp/tmpdbec0i83_test.go:29:26: undefined:\
    \ isPalindrome\n/tmp/tmpdbec0i83_test.go:36:29: too many return values\n\thave\
    \ ([]int, []int)\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074239
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    var evens []interface{}\n    var odds []interface{}\n\
    \    for i := 1; i <= n; i++ {\n        evens = append(evens, i)\n        odds\
    \ = append(odds, i*2)\n    }\n    evens = append(evens, 0)\n    odds = append(odds,\
    \ 0)\n    evens = append(evens, 0)\n    odds = append(odds, 0)\n    return evens\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Palindrome (0.00s)\n    --- FAIL: TestEven_Odd_Palindrome/test_num__0\
    \ (0.00s)\n        tmpubnr654d_test.go:57: expected '[%!s(int=8) %!s(int=13)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)\
    \ %!s(int=8) %!s(int=9) %!s(int=10) %!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14)\
    \ %!s(int=15) %!s(int=16) %!s(int=17) %!s(int=18) %!s(int=19) %!s(int=20) %!s(int=21)\
    \ %!s(int=22) %!s(int=23) %!s(int=24) %!s(int=25) %!s(int=26) %!s(int=27) %!s(int=28)\
    \ %!s(int=29) %!s(int=30) %!s(int=31) %!s(int=32) %!s(int=33) %!s(int=34) %!s(int=35)\
    \ %!s(int=36) %!s(int=37) %!s(int=38) %!s(int=39) %!s(int=40) %!s(int=41) %!s(int=42)\
    \ %!s(int=43) %!s(int=44) %!s(int=45) %!s(int=46) %!s(int=47) %!s(int=48) %!s(int=49)\
    \ %!s(int=50) %!s(int=51) %!s(int=52) %!s(int=53) %!s(int=54) %!s(int=55) %!s(int=56)\
    \ %!s(int=57) %!s(int=58) %!s(int=59) %!s(int=60) %!s(int=61) %!s(int=62) %!s(int=63)\
    \ %!s(int=64) %!s(int=65) %!s(int=66) %!s(int=67) %!s(int=68) %!s(int=69) %!s(int=70)\
    \ %!s(int=71) %!s(int=72) %!s(int=73) %!s(int=74) %!s(int=75) %!s(int=76) %!s(int=77)\
    \ %!s(int=78) %!s(int=79) %!s(int=80) %!s(int=81) %!s(int=82) %!s(int=83) %!s(int=84)\
    \ %!s(int=85) %!s(int=86) %!s(int=87) %!s(int=88) %!s(int=89) %!s(int=90) %!s(int=91)\
    \ %!s(int=92) %!s(int=93) %!s(int=94) %!s(int=95) %!s(int=96) %!s(int=97) %!s(int=98)\
    \ %!s(int=99) %!s(int=100) %!s(int=101) %!s(int=102) %!s(int=103) %!s(int=104)\
    \ %!s(int=105) %!s(int=106) %!s(int=107) %!s(int=108) %!s(int=109) %!s(int=110)\
    \ %!s(int=111) %!s(int=112) %!s(int=113) %!s(int=114) %!s(int=115) %!s(int=116)\
    \ %!s(int=117) %!s(int=118) %!s(int=119) %!s(int=120) %!s(int=121) %!s(int=122)\
    \ %!s(int=123) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__1\
    \ (0.00s)\n        tmpubnr654d_test.go:57: expected '[%!s(int=4) %!s(int=6)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)\
    \ %!s(int=8) %!s(int=9) %!s(int=10) %!s(int=11) %!s(int=12) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestEven_Odd_Palindrome/test_num__2 (0.00s)\n        t"
  timestamp: 1660074240
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    l := make([]interface{}, n+1)\n    \n    \n    l [1]\
    \ = 2\n    l [2] = 1\n    \n    for i := 3; i <= n; i++ {\n        j := i - 1\n\
    \        \n        while(j > -1) {\n            if strconv.Itoa(i) == strconv.Itoa(j)\
    \ && i != j {\n                l [i] = 1\n                l [j]  = 1\n       \
    \         break\n            } else {\n                j--\n            }\n  \
    \      }\n    }\n    \n    return l\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpn5_lpkop_test.go:33:23: expected '';'', found ''{''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074238
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    s := make([]interface{}, 0, n)\n    odd_nums := make([]int,\
    \ n)\n    even_nums := make([]int, n)\n    odd_count := 0\n    even_count := 0\n\
    \    for i := 1; i <= n; i++ {\n        for j := i; j < n; j++ {\n           \
    \ if i != j {\n                s = append(s, j)\n                even_nums[even_count]\
    \ = j\n                even_count++\n            }\n        }\n    }\n    for\
    \ i := len(s)-1; i >= 0; i-- {\n        if even_nums[even_count] == s[i] {\n \
    \           even_nums[even_count] = i\n            even_count++\n        }\n \
    \   }\n    for j := len(even_nums)-1; j >= 0; j-- {\n        if odd_nums[odd_count]\
    \ == even_nums[j] {\n            odd_nums[odd_count] = even_nums[j]\n        \
    \    odd_count++\n        }\n    }\n    for i := 0; i < n; i++ {\n        if odd_nums[odd_count]\
    \ == i && even_nums[even_count] == i {\n            s = append(s, i)\n       \
    \ }\n    }\n    return s\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n\
    \  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Palindrome (0.00s)\npanic: runtime error: index\
    \ out of range [123] with length 123 [recovered]\n\tpanic: runtime error: index\
    \ out of range [123] with length 123\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5136a0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5136a0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.even_odd_palindrome(0x7b)\n\t/tmp/tmpe038k69q_test.go:33\
    \ +0x3b3\ncommand-line-arguments_test.TestEven_Odd_Palindrome(0x0?)\n\t/tmp/tmpe038k69q_test.go:65\
    \ +0x46\ntesting.tRunner(0xc0001a0340, 0x528fc8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074240
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    ans := make([]interface{}, 0, n+1)\n    for i := 1;\
    \ i <= n; i++ {\n        if i%2 == 0 {\n            ans = append(ans, i)\n   \
    \     }\n        if i%2 != 0 {\n            for j := i/2; j <= n; j += 2 {\n \
    \               ans = append(ans, j)\n            }\n        }\n    }\n    return\
    \ ans\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Palindrome (0.00s)\n    --- FAIL: TestEven_Odd_Palindrome/test_num__0\
    \ (0.00s)\n        tmptl230j74_test.go:58: expected '[%!s(int=8) %!s(int=13)]',\
    \ got '[%!s(int=0) %!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94) %!s(int=96)\
    \ %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106) %!s(int=108)\
    \ %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118) %!s(int=120)\
    \ %!s(int=122) %!s(int=2) %!s(int=1) %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=9)\
    \ %!s(int=11) %!s(int=13) %!s(int=15) %!s(int=17) %!s(int=19) %!s(int=21) %!s(int=23)\
    \ %!s(int=25) %!s(int=27) %!s(int=29) %!s(int=31) %!s(int=33) %!s(int=35) %!s(int=37)\
    \ %!s(int=39) %!s(int=41) %!s(int=43) %!s(int=45) %!s(int=47) %!s(int=49) %!s(int=51)\
    \ %!s(int=53) %!s(int=55) %!s(int=57) %!s(int=59) %!s(int=61) %!s(int=63) %!s(int=65)\
    \ %!s(int=67) %!s(int=69) %!s(int=71) %!s(int=73) %!s(int=75) %!s(int=77) %!s(int=79)\
    \ %!s(int=81) %!s(int=83) %!s(int=85) %!s(int=87) %!s(int=89) %!s(int=91) %!s(int=93)\
    \ %!s(int=95) %!s(int=97) %!s(int=99) %!s(int=101) %!s(int=103) %!s(int=105) %!s(int=107)\
    \ %!s(int=109) %!s(int=111) %!s(int=113) %!s(int=115) %!s(int=117) %!s(int=119)\
    \ %!s(int=121) %!s(int=123) %!s(int=4) %!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(i"
  timestamp: 1660074240
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenList := make([]int, 0)\n    oddList := make([]int,\
    \ 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i) {\n          \
    \  if isEven(i) {\n                evenList = append(evenList, i)\n          \
    \  } else {\n                oddList = append(oddList, i)\n            }\n   \
    \     }\n    }\n    return evenList + oddList\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqz34itrw_test.go:27:12: undefined: isPalindrome

    /tmp/tmpqz34itrw_test.go:28:16: undefined: isEven

    /tmp/tmpqz34itrw_test.go:35:12: invalid operation: operator + not defined on evenList
    (variable of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074239
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    if n < 1 {\n        return []interface{}{}\n    }\n\
    \    if n%2 == 0 {\n        return []interface{}{n}\n    }\n\n    evenPals, oddPals\
    \ := evenOddPalindromes(n)\n\n    return evenPals + oddPals\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdtzcmzsw_test.go:31:26: undefined: evenOddPalindromes

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074239
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    if n < 1 || n > 10^3 {\n        return []interface{}{nil}\n\
    \    }\n    odd, even := n, 0\n    p := make([]interface{}, 0, 2)\n    for i :=\
    \ 1; i <= n; i++ {\n        if even == 0 {\n            p := append(p, i)\n  \
    \          even = 1\n            continue\n        }\n        if odd % 2 == 0\
    \ {\n            p := append(p, i)\n            odd = odd / 2\n        } else\
    \ {\n            p := append(p, i)\n            odd = odd * 3 + 1\n        }\n\
    \        even = 0\n    }\n    return p\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4jxb7q1d_test.go:31:13: p declared but not used

    /tmp/tmp4jxb7q1d_test.go:36:13: p declared but not used

    /tmp/tmp4jxb7q1d_test.go:39:13: p declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074239
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    return even_odd_palindrome_helper(n, map[int]bool)\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1tw9m6e2_test.go:24:12: undefined: even_odd_palindrome_helper

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074239
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    // Your code here\n    listOfIntegers := []interface{}{}\n\
    \n    for i := 1; i <= n; i++ {\n        var evenLists []int\n        var oddLists\
    \ []int\n\n        if i%2 == 0 {\n            oddLists = append(oddLists, i)\n\
    \        } else {\n            evenLists = append(evenLists, i)\n        }\n\n\
    \        if i%2 == 0 {\n            listOfIntegers = append(listOfIntegers, oddLists...)\n\
    \        } else {\n            listOfIntegers = append(listOfIntegers, evenLists...)\n\
    \        }\n    }\n\n    return listOfIntegers\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| a |>\nTry this solution\n<code>\nvar res = []int{}\nfor i := 0; i < 10000000;\
    \ i++ {\n    if i % 2 == 0 {\n        if isPalindrome(i) {\n            res =\
    \ append(res, i)\n        }\n    } else {\n        if isPalindrome(i) {\n    \
    \        res = append(res, i)\n        }\n    }\n}\nfmt.Println(len(res), res)\n\
    </code>\n<|/ a dscore=0 tags=go,performance |>\n<| c |>\nWhile this code snippet\
    \ may solve the question, [including an explanation](http://meta.stackexchange.com/questions/114762/explaining-entirely-code-based-answers)\
    \ really helps to improve the quality of your post. Remember that you are answering\
    \ the question for readers in the future, and those people might not know the\
    \ reasons for your code suggestion.\n<|/ c |>\n<| c |>\nthe only difference with\
    \ this solution is that this one is written in golang. this approach is more flexible\
    \ and easy to understand\n<|/ c |>\n<| a tags=go,performance |>\nHere is an approach\
    \ that uses a map of evens to odd numbers and one to even numbers.  It will run\
    \ much faster on bigger numbers but it will run slower than the other solutions\
    \ on smaller numbers.  It will still run slower than the other solutions on small\
    \ numbers.\n<code>\npackage main\n\nimport (\n    \"fmt\"\n)\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp094fzu7s_test.go:46:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074238
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenList := make([]interface{}, 0)\n    oddList :=\
    \ make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i)\
    \ {\n            if isEven(i) {\n                evenList = append(evenList, i)\n\
    \            } else {\n                oddList = append(oddList, i)\n        \
    \    }\n        }\n    }\n    fmt.Println(evenList)\n    fmt.Println(oddList)\n\
    \    return []interface{}{evenList, oddList}\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpe2_jntlm_test.go:27:12: undefined: isPalindrome

    /tmp/tmpe2_jntlm_test.go:28:16: undefined: isEven

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074239
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    list := make([]interface{}, 0, 2)\n    for i := 1;\
    \ i <= n; i++ {\n        for j := 1; j <= n/2; j++ {\n            if n == j*j\
    \ || n == j*n+j {\n                list = append(list, i)\n            }\n   \
    \     }\n    }\n    return list\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Palindrome (0.00s)\n    --- FAIL: TestEven_Odd_Palindrome/test_num__0\
    \ (0.00s)\n        tmp3xw8rnn3_test.go:55: expected '[%!s(int=8) %!s(int=13)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__1 (0.00s)\n      \
    \  tmp3xw8rnn3_test.go:55: expected '[%!s(int=4) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestEven_Odd_Palindrome/test_num__2 (0.00s)\n        tmp3xw8rnn3_test.go:55:\
    \ expected '[%!s(int=1) %!s(int=2)]', got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__3\
    \ (0.00s)\n        tmp3xw8rnn3_test.go:55: expected '[%!s(int=6) %!s(int=8)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__4 (0.00s)\n      \
    \  tmp3xw8rnn3_test.go:55: expected '[%!s(int=5) %!s(int=6)]', got '[%!s(int=1)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9) %!s(int=10) %!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15)\
    \ %!s(int=16) %!s(int=17) %!s(int=18) %!s(int=19) %!s(int=20) %!s(int=21) %!s(int=22)\
    \ %!s(int=23) %!s(int=24) %!s(int=25)]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__5\
    \ (0.00s)\n        tmp3xw8rnn3_test.go:55: expected '[%!s(int=4) %!s(int=6)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__6 (0.00s)\n      \
    \  tmp3xw8rnn3_test.go:55: expected '[%!s(int=4) %!s(int=5)]', got '[%!s(int=1)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__7 (0.00s)\n  \
    \      tmp3xw8rnn3_test.go:55: expected '[%!s(int=0) %!s(int=1)]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074240
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0, n)\n   \
    \ oddPalindromes := make([]interface{}, 0, n)\n    for i := 1; i <= n; i++ {\n\
    \        // find all the even palindromes\n        palindromes := findEvenPalindromes(i)\n\
    \        if len(palindromes) == 0 {\n            // no even palindromes, break\n\
    \            break\n        }\n        evenPalindromes = append(evenPalindromes,\
    \ palindromes)\n        // find all the odd palindromes\n        palindromes =\
    \ findOddPalindromes(i)\n        if len(palindromes) == 0 {\n            // no\
    \ odd palindromes, break\n            break\n        }\n        oddPalindromes\
    \ = append(oddPalindromes, palindromes)\n    }\n    return append(evenPalindromes,\
    \ oddPalindromes...)\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl5hhq2ry_test.go:28:24: undefined: findEvenPalindromes

    /tmp/tmpl5hhq2ry_test.go:35:23: undefined: findOddPalindromes

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074239
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    // initialize result list\n    res := make([]interface{},\
    \ 0, 2)\n    \n    // initialize palindromes list\n    palindromes := make([]int,\
    \ n)\n    \n    // initialize palindromes length\n    palindromeLen := 0\n   \
    \ \n    // initialize palindrome counter\n    counter := 0\n    \n    for i :=\
    \ 0; i < n; i++ {\n        if palindromes[i] == i {\n            palindromeLen++\n\
    \        } else {\n            // palindrome\n            palindromes[counter]\
    \ = i\n            counter++\n        }\n    }\n\n    // initialize even\n   \
    \ even := 0\n    \n    // initialize odd\n    odd := 0\n    \n    // initialize\
    \ even counter\n    evenCounter := 0\n    \n    // initialize odd counter\n  \
    \  oddCounter := 0\n    \n    // initialize even palindrome counter\n    evenPalindromeCounter\
    \ := 0\n    \n    // initialize odd palindrome counter\n    oddPalindromeCounter\
    \ := 0\n    \n    // loop through palindromes\n    for i := 0; i < len(palindromes);\
    \ i++ {\n        // palindrome is odd\n        if palindromes[i]%2 == 1 {\n  \
    \          odd++\n            oddPalindromeCounter++\n        }\n        \n  \
    \      // palindrome is even\n        if palindromes[i]%2 == 0 {\n           \
    \ even++\n            evenPalindromeCounter++\n        }\n    }\n    \n    //\
    \ add even palindromes to result list\n    if len(res) > 0 {\n        // add even\
    \ palindromes to result list\n        evenPalindromes := make([]int, evenPalindromeCounter)\n\
    \        evenPalindromes = append(evenPalindromes, evenPalindromes...)\n     \
    \   res = append(res, evenPalindromes...)\n    } else {\n        // add odd palindromes\
    \ to result list\n        oddPalindromes := make([]int, oddPalindromeCounter)\n\
    \        oddPalindromes = append(oddPalindromes, oddPalindromes...)\n        res\
    \ = append(res, oddPalindromes...)\n    }\n    \n    // add even and odd counters\
    \ to result list\n    if len(res) > 0 {\n        res = append(res, even, odd)\n\
    \    } else {\n        res = append(res, even, odd)\n    }\n\n    return res\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmper92l6dw_test.go:53:5: evenCounter declared but not used

    /tmp/tmper92l6dw_test.go:56:5: oddCounter declared but not used

    /tmp/tmper92l6dw_test.go:84:27: cannot use evenPalindromes (variable of type []int)
    as type []interface{} in argument to append

    /tmp/tmper92l6dw_test.go:89:27: cannot use oddPalindromes (variable of type []int)
    as type []interface{} in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074239
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    if n < 1 || n > 10^3 {\n        return []interface{}{1,\
    \ 2}\n    }\n    palindromes := []interface{}{}\n    for i := 2; i <= n; i++ {\n\
    \        fmt.Println(i)\n        if i%2 == 0 {\n            palindromes = append(palindromes,\
    \ i)\n        } else {\n            if i%4 == 0 {\n                palindromes\
    \ = append(palindromes, i)\n            } else {\n                if i%6 == 0\
    \ {\n                    palindromes = append(palindromes, i)\n              \
    \  } else {\n                    fmt.Println(\"i is odd.\")\n                }\n\
    \            }\n        }\n    }\n    return palindromes\n}\n</code>\n<|/ a |>\n\
    <| a |>\n<code>\npackage main\n\nimport (\n    \"fmt\"\n)\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1orc2yux_test.go:46:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074238
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    if n == 1 {\n        return nil\n    }\n    evens,\
    \ odds := 0, 1\n    var numEvens, numOdds int\n    var evenPalindromes, oddPalindromes\
    \ []interface{}\n    for i := 2; i <= n; i++ {\n        var isEven bool\n    \
    \    for j := 1; j < i/2; j++ {\n            if j%2 == 0 {\n                isEven\
    \ = true\n            } else {\n                isEven = false\n             \
    \   break\n            }\n        }\n        if isEven {\n            evenPalindromes\
    \ = append(evenPalindromes, i)\n            evens++\n            numEvens++\n\
    \        } else {\n            oddPalindromes = append(oddPalindromes, i)\n  \
    \          odds++\n            numOdds++\n        }\n    }\n    evenPalindromes\
    \ = append(evenPalindromes, n-evenPalindromes)\n    evenPalindromes = append(evenPalindromes,\
    \ oddPalindromes...)\n    oddPalindromes = append(oddPalindromes, n-oddPalindromes)\n\
    \    oddPalindromes = append(oddPalindromes, evenPalindromes...)\n    fmt.Println(\"\
    Even numbers:\", evens)\n    fmt.Println(\"Odd numbers:\", odds)\n    fmt.Println(\"\
    Num even numbers:\", numEvens)\n    fmt.Println(\"Num odd numbers:\", numOdds)\n\
    \    fmt.Println(\"Even and odd palindromes:\", evenPalindromes)\n    fmt.Println(\"\
    Odd palindromes:\", oddPalindromes)\n    return evenPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsr0x4fvl_test.go:50:47: invalid operation: n - evenPalindromes (mismatched
    types int and []interface{})

    /tmp/tmpsr0x4fvl_test.go:52:45: invalid operation: n - oddPalindromes (mismatched
    types int and []interface{})

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074239
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    odd := make([]int, n-1)\n    for i := 0; i < n-1;\
    \ i++ {\n        odd[i : i+1] = []int{0, 1}\n    }\n    even := make([]int, n-1)\n\
    \    for i := n-2; i >= 0; i-- {\n        even[i : i+1] = []int{0, 1}\n    }\n\
    \    odd := odd[:n-1]\n    even := even[:n-1]\n    for i := 0; i < n-1; i++ {\n\
    \        for _, j := range odd {\n            if odd[i] == j && even[j] == 0 {\n\
    \                even[i] = 0\n                break\n            }\n        }\n\
    \    }\n    return even\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n \
    \ candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprogqx2y2_test.go:26:12: cannot assign to odd[i:i + 1] (value of type []int)

    /tmp/tmprogqx2y2_test.go:30:13: cannot assign to even[i:i + 1] (value of type
    []int)

    /tmp/tmprogqx2y2_test.go:32:9: no new variables on left side of :=

    /tmp/tmprogqx2y2_test.go:33:10: no new variables on left side of :=

    /tmp/tmprogqx2y2_test.go:42:12: cannot use even (variable of type []int) as type
    []interface{} in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074239
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    even := []interface{}{}\n    odd := []interface{}{}\n\
    \    for number := 1; number <= n; number++ {\n        reverseString := string(numberReversed(number))\n\
    \        if number % 2 == 0 {\n            even = append(even, reverseString)\n\
    \        } else {\n            odd = append(odd, reverseString)\n        }\n \
    \   }\n    return even\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpumgoesg2_test.go:27:33: undefined: numberReversed

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074239
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    if n < 1 || n > 1000000000 {\n        return nil\n\
    \    }\n    evenPal = []int{}\n    oddPal = []int{}\n\n    for i := 1; i <= n;\
    \ i++ {\n        if isPalindrome(i) {\n            if isEven(i) {\n          \
    \      evenPal = append(evenPal, i)\n            } else {\n                oddPal\
    \ = append(oddPal, i)\n            }\n        } else {\n            return nil\n\
    \        }\n    }\n\n    return evenPal\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp81z5glon_test.go:27:5: undefined: evenPal

    /tmp/tmp81z5glon_test.go:28:5: undefined: oddPal

    /tmp/tmp81z5glon_test.go:31:12: undefined: isPalindrome

    /tmp/tmp81z5glon_test.go:32:16: undefined: isEven

    /tmp/tmp81z5glon_test.go:33:34: undefined: evenPal

    /tmp/tmp81z5glon_test.go:35:33: undefined: oddPal

    /tmp/tmp81z5glon_test.go:42:12: undefined: evenPal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074239
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    result := make([]interface{}, 0)\n    // evenPalindromes\
    \ stores the even palindromes such that no integer palindrome of length i can\
    \ be formed with them\n    evenPalindromes := make(map[int]bool)\n    for i :=\
    \ 1; i <= n; i++ {\n        odd_palindromes := make(map[int]bool)\n        //\
    \ odd_palindromes[oddNumber] stores the odd palindromes such that no integer palindrome\
    \ of length i can be formed with them\n        odd_palindromes[evenPalindromes[i-1]]\
    \ = true\n        for oddNumber := (i+1) / 2; oddNumber <= n; oddNumber++ {\n\
    \            // If evenPalindromes[oddNumber] is true, the odd palindrome can't\
    \ be formed with the even-palindrome of length i\n            if evenPalindromes[oddNumber]\
    \ {\n                continue\n            }\n            // odd_palindromes[oddNumber]\
    \ stores the odd palindromes such that no integer palindrome of length i can be\
    \ formed with them\n            odd_palindromes[oddNumber] = true\n          \
    \  evenPalindromes[oddNumber] = true\n            if isPalindrome(oddNumber, i)\
    \ {\n                result = append(result, oddNumber)\n            }\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_77f60yo_test.go:30:25: cannot use evenPalindromes[i - 1] (map index expression
    of type bool) as type int in map index

    /tmp/tmp_77f60yo_test.go:39:16: undefined: isPalindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074239
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    s := make([]interface{}, 0)\n    base := make([]int,\
    \ n)\n    for i := 1; i < n; i++ {\n        base[i] = i\n    }\n\n    for i :=\
    \ 2; i < n; i++ {\n        base := append(base, i)\n    }\n\n    for _, v := range\
    \ base {\n        for _, v1 := range base {\n            if v != v1 {\n      \
    \          continue\n            }\n            s := append(s, v)\n          \
    \  break\n        }\n    }\n    return s\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmos6k17s_test.go:31:9: base declared but not used

    /tmp/tmpmos6k17s_test.go:39:13: s declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074241
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    var result []interface{}\n    var even, odd int\n\n\
    \    // initialize to 0 to reduce iteration cost\n    even = 0\n    odd = 0\n\n\
    \    // base case: palindrome should be odd or even\n    if n%2 == 0 {\n     \
    \   for i := 1; i <= n/2; i++ {\n            odd = 0\n            // i is an odd\
    \ integer so n%2 == 0\n            if n%2 == 0 {\n                // iterate from\
    \ n/2 to n-1 and check whether n is palindrome\n                for j := 0; j\
    \ < n-1; j++ {\n                    if n%2 == 0 {\n                        even\
    \ = even + 1\n                    }\n                    n = n/2\n           \
    \     }\n                // n is even, j exceeds range because i is odd integer\n\
    \                if j > n-1 {\n                    even = even + 1\n         \
    \       }\n                n = n%2 // n is even, n decrease to odd integer\n \
    \           }\n            // n is even, i is even integer\n            else {\n\
    \                for j := 0; j < n/2; j++ {\n                    even = even +\
    \ 1\n                    n = n%2 // n is odd, n decrease to even integer\n   \
    \             }\n            }\n            // if odd is even, append it to result\n\
    \            if odd > even {\n                result = append(result, even)\n\
    \            }\n        }\n    } else {\n        for i := 1; i <= n; i++ {\n \
    \           even = 0\n            // i is even integer so n%2 == 1\n         \
    \   if n%2 == 1 {\n                // iterate from n to 1 and check whether n\
    \ is palindrome\n                for j := 0; j < n; j++ {\n                  \
    \  if n%2 == 1 {\n                        odd = odd + 1\n                    }\n\
    \                    n = n%2\n                }\n                // n is odd,\
    \ j is out of range because i is even integer\n                if j > n-1 {\n\
    \                    odd = odd + 1\n                }\n                n = n%2\
    \ // n is odd, n decrease to odd integer\n            }\n            // n is odd,\
    \ i is odd integer\n            else {\n                for j := 0; j < n/2; j++\
    \ {\n                    odd = odd + 1\n                    n = n%2 // n is even,\
    \ n decrease to even integer\n                }\n            }\n            //\
    \ if even is odd, append it to result\n            if even > odd {\n         \
    \       result = append(result, odd)\n            }\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvomcc0wo_test.go:51:13: expected statement, found ''else''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074240
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    even_palindromes := make([]interface{}, n)\n    odd_palindromes\
    \ := make([]interface{}, n)\n    var next_odd_palindrome int = 1\n    var next_even_palindrome\
    \ int = 1\n    var index1 int = -1\n    var index2 int = -1\n    var index3 int\
    \ = -1\n\n    for index := 0; index < n; index++ {\n        if next_odd_palindrome\
    \ == n-1 {\n            odd_palindromes[index] = index\n        }\n        if\
    \ next_even_palindrome == n-1 {\n            even_palindromes[index] = index\n\
    \        }\n        index1 = -1\n        index2 = -1\n        index3 = -1\n  \
    \      while index1 < next_odd_palindrome {\n            index2 = next_odd_palindrome\
    \ - 1\n            index3 = index2 + 1\n            if index2 == index3 {\n  \
    \              break\n            }\n            if int(index) == int(odd_palindromes[index2])\
    \ {\n                next_odd_palindrome = index3\n            }\n           \
    \ index1 = index2\n        }\n        while index1 < next_even_palindrome {\n\
    \            index2 = next_even_palindrome - 1\n            index3 = index2 +\
    \ 1\n            if index2 == index3 {\n                break\n            }\n\
    \            if int(index) == int(even_palindromes[index2]) {\n              \
    \  next_even_palindrome = index3\n            }\n            index1 = index2\n\
    \        }\n    }\n    return even_palindromes + odd_palindromes\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbu0v8s6a_test.go:42:15: expected '';'', found index1

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074240
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0, n*2)\n \
    \   oddPalindromes := make([]interface{}, 0, n*2)\n    palindromes := make([]int,\
    \ 0, n*2)\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= i; j++ {\n\
    \            even := j % 2 == 0\n            odd := (j-1) % 2 == 0\n         \
    \   palindrome := i*j\n            palindromes = append(palindromes, palindrome)\n\
    \            if even == even && odd == odd {\n                evenPalindromes\
    \ = append(evenPalindromes, palindrome)\n            }\n            if even ==\
    \ odd && odd == even {\n                oddPalindromes = append(oddPalindromes,\
    \ palindrome)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5_zkdc26_test.go:41:29:\
    \ too many return values\n\thave ([]interface{}, []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074241
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    start := 1\n    end := n\n    even_num := 0\n    odd_num\
    \ := 0\n    result := make([]interface{}, 0, 2)\n\n    // if n is odd, we only\
    \ need to consider odd palindromes.\n    if n % 2 != 0 {\n        for ; start\
    \ <= end && start <= n; start++ {\n            even_palindrome := make([]int,\
    \ 0, 2)\n            oddPalindrome := make([]int, 0, 2)\n            reversedNum\
    \ := make([]int, 0, 2)\n            evenPalindrome = append(even_palindrome, reverse(start))\n\
    \            oddPalindrome = append(oddPalindrome, start%2)\n            reversedNum\
    \ = append(reversedNum, reverse(start))\n            evenPalindrome = append(even_palindrome,\
    \ reverse(end))\n            oddPalindrome = append(oddPalindrome, start%2)\n\
    \            reversedNum = append(reversedNum, reverse(end))\n            if !is_palindrome(evenPalindrome)\
    \ &&\n                !is_palindrome(oddPalindrome) &&\n                evenPalindrome\
    \ == reversedNum {\n                even_num++\n                even_odd_palindrome\
    \ = append(even_odd_palindrome, start)\n            }\n            if !is_palindrome(evenPalindrome)\
    \ &&\n                !is_palindrome(oddPalindrome) &&\n                oddPalindrome\
    \ == reversedNum {\n                odd_num++\n                even_odd_palindrome\
    \ = append(even_odd_palindrome, end)\n            }\n        }\n    }\n\n    //\
    \ if n is even, we can consider the even palindromes.\n    if n == 1 {\n     \
    \   even_odd_palindrome = append(even_odd_palindrome, 1)\n    }\n\n    for ; i\
    \ < n; i++ {\n        // if the current integer is odd, we can only consider odd\
    \ palindromes.\n        if i % 2 != 0 {\n            even_palindrome := make([]int,\
    \ 0, 2)\n            oddPalindrome := make([]int, 0, 2)\n            reversedNum\
    \ := make([]int, 0, 2)\n            evenPalindrome = append(even_palindrome, reverse(i))\n\
    \            oddPalindrome = append(oddPalindrome, i % 2)\n            reversedNum\
    \ = append(reverse\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpfdy5kezi_test.go:70:41: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074241
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    // write your code here\n    evens := make([]interface{},\
    \ 0)\n    odds := make([]interface{}, 0)\n    for i := 1; i < n; i++ {\n     \
    \   fmt.Printf(\"i is %v\\n\", i)\n        odd := i / 2\n        fmt.Printf(\"\
    odd is %v\\n\", odd)\n        if isPalindrome(i) {\n            if i%2 == 0 {\n\
    \                evens = append(evens, odd)\n            } else {\n          \
    \      odds = append(odds, odd)\n            }\n        }\n    }\n    return evens\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpe8xwvr4l_test.go:31:12: undefined: isPalindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074242
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    // Write code here\n    return nil\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Palindrome (0.00s)\n    --- FAIL: TestEven_Odd_Palindrome/test_num__0\
    \ (0.00s)\n        tmp0p3iv217_test.go:48: expected '[%!s(int=8) %!s(int=13)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__1 (0.00s)\n      \
    \  tmp0p3iv217_test.go:48: expected '[%!s(int=4) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestEven_Odd_Palindrome/test_num__2 (0.00s)\n        tmp0p3iv217_test.go:48:\
    \ expected '[%!s(int=1) %!s(int=2)]', got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__3\
    \ (0.00s)\n        tmp0p3iv217_test.go:48: expected '[%!s(int=6) %!s(int=8)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__4 (0.00s)\n      \
    \  tmp0p3iv217_test.go:48: expected '[%!s(int=5) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestEven_Odd_Palindrome/test_num__5 (0.00s)\n        tmp0p3iv217_test.go:48:\
    \ expected '[%!s(int=4) %!s(int=6)]', got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__6\
    \ (0.00s)\n        tmp0p3iv217_test.go:48: expected '[%!s(int=4) %!s(int=5)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__7 (0.00s)\n      \
    \  tmp0p3iv217_test.go:48: expected '[%!s(int=0) %!s(int=1)]', got '[]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074242
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    ans := make([]interface{}, 0, n)\n    var lastPalIdx1,\
    \ lastPalIdx2 int\n    for i := 0; i < n; i++ {\n        palindromes := 0\n  \
    \      for j := 0; j <= i; j++ {\n            palindromes += (j == lastPalIdx1\
    \ || j == lastPalIdx2)\n        }\n        if palindromes == 2 {\n           \
    \ ans = append(ans, i)\n            lastPalIdx1 = i\n        }\n        if palindromes\
    \ == 1 {\n            ans = append(ans, i)\n            lastPalIdx2 = i\n    \
    \    }\n    }\n    return ans\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplz9viex5_test.go:29:13: invalid operation: palindromes += (j == lastPalIdx1
    || j == lastPalIdx2) (mismatched types int and untyped bool)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074242
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    result := []interface{}{}\n    even_count = 0\n  \
    \  odd_count = 0\n\n    for number := 1; number <= n; number++ {\n        is_even,\
    \ is_odd, is_palindrome := isPalindrome(number)\n        if is_even {\n      \
    \      if even_count == 0 {\n                even_count++\n            } else\
    \ {\n                result[len(result)-1] = number\n                even_count++\n\
    \            }\n        } else if is_odd {\n            if odd_count == 0 {\n\
    \                odd_count++\n            } else {\n                result[len(result)-1]\
    \ = number\n                odd_count++\n            }\n        } else {\n   \
    \         result[len(result)-1] = number\n        }\n    }\n\n    result[0] =\
    \ fmt.Sprintf(\"%d palindromes\", even_count)\n    result[1] = fmt.Sprintf(\"\
    %d palindromes\", odd_count)\n    return result\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphtzdlm19_test.go:25:5: undefined: even_count

    /tmp/tmphtzdlm19_test.go:26:5: undefined: odd_count

    /tmp/tmphtzdlm19_test.go:29:43: undefined: isPalindrome

    /tmp/tmphtzdlm19_test.go:31:16: undefined: even_count

    /tmp/tmphtzdlm19_test.go:32:17: undefined: even_count

    /tmp/tmphtzdlm19_test.go:35:17: undefined: even_count

    /tmp/tmphtzdlm19_test.go:38:16: undefined: odd_count

    /tmp/tmphtzdlm19_test.go:39:17: undefined: odd_count

    /tmp/tmphtzdlm19_test.go:42:17: undefined: odd_count

    /tmp/tmphtzdlm19_test.go:49:47: undefined: even_count

    /tmp/tmphtzdlm19_test.go:49:47: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074242
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    res := make([]interface{}, n+1)\n    res[0] = 1\n\
    \    for i := 1; i < n; i++ {\n        if i%2 == 0 {\n            res[i] = 2\n\
    \        } else {\n            res[i] = 1\n        }\n        if isPalindrome(res[i-1])\
    \  {\n            if i%2 != 0 {\n                res[i] = 1\n            } else\
    \ {\n                res[i] = 2\n            }\n        } else {\n           \
    \ if i%2 != 0 {\n                res[i] = 2\n            } else {\n          \
    \      res[i] = 1\n            }\n        }\n    }\n    return res\n}\n\nfunc\
    \ TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwprw4mb7_test.go:32:12: undefined: isPalindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074242
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    result := make([]interface{}, 0, 2)\n    for i :=\
    \ 1; i <= n; i++ {\n        oddPalindromes := make([]int, 0, 2)\n        evenPalindromes\
    \ := make([]int, 0, 2)\n        isEven, isOdd := false, false\n        for j :=\
    \ i; j < n; j++ {\n            if j%2 == 0 {\n                evenPalindromes\
    \ = append(evenPalindromes, j)\n            } else {\n                oddPalindromes\
    \ = append(oddPalindromes, j)\n            }\n        }\n\n        if len(evenPalindromes)\
    \ == 0 {\n            evenPalindromes = append(evenPalindromes, 0)\n        }\n\
    \n        if len(oddPalindromes) == 0 {\n            oddPalindromes = append(oddPalindromes,\
    \ 0)\n        }\n\n        if len(evenPalindromes) == 1 && len(oddPalindromes)\
    \ == 1 {\n            evenPalindromes = append(evenPalindromes, 0)\n         \
    \   oddPalindromes = append(oddPalindromes, 0)\n        }\n\n        for _, palindrome\
    \ := range oddPalindromes {\n            if palindrome != i {\n              \
    \  isOdd = true\n                break\n            }\n        }\n\n        for\
    \ _, palindrome := range evenPalindromes {\n            if palindrome != i {\n\
    \                isEven = true\n                break\n            }\n       \
    \ }\n\n        if isEven {\n            result = append(result, i)\n        }\n\
    \n        if isOdd {\n            result = append(result, i)\n        }\n\n  \
    \  }\n    return result\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n \
    \ candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Palindrome (0.00s)\n    --- FAIL: TestEven_Odd_Palindrome/test_num__0\
    \ (0.00s)\n        tmp4ijbeu6o_test.go:96: expected '[%!s(int=8) %!s(int=13)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=4)\
    \ %!s(int=4) %!s(int=5) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=7)\
    \ %!s(int=8) %!s(int=8) %!s(int=9) %!s(int=9) %!s(int=10) %!s(int=10) %!s(int=11)\
    \ %!s(int=11) %!s(int=12) %!s(int=12) %!s(int=13) %!s(int=13) %!s(int=14) %!s(int=14)\
    \ %!s(int=15) %!s(int=15) %!s(int=16) %!s(int=16) %!s(int=17) %!s(int=17) %!s(int=18)\
    \ %!s(int=18) %!s(int=19) %!s(int=19) %!s(int=20) %!s(int=20) %!s(int=21) %!s(int=21)\
    \ %!s(int=22) %!s(int=22) %!s(int=23) %!s(int=23) %!s(int=24) %!s(int=24) %!s(int=25)\
    \ %!s(int=25) %!s(int=26) %!s(int=26) %!s(int=27) %!s(int=27) %!s(int=28) %!s(int=28)\
    \ %!s(int=29) %!s(int=29) %!s(int=30) %!s(int=30) %!s(int=31) %!s(int=31) %!s(int=32)\
    \ %!s(int=32) %!s(int=33) %!s(int=33) %!s(int=34) %!s(int=34) %!s(int=35) %!s(int=35)\
    \ %!s(int=36) %!s(int=36) %!s(int=37) %!s(int=37) %!s(int=38) %!s(int=38) %!s(int=39)\
    \ %!s(int=39) %!s(int=40) %!s(int=40) %!s(int=41) %!s(int=41) %!s(int=42) %!s(int=42)\
    \ %!s(int=43) %!s(int=43) %!s(int=44) %!s(int=44) %!s(int=45) %!s(int=45) %!s(int=46)\
    \ %!s(int=46) %!s(int=47) %!s(int=47) %!s(int=48) %!s(int=48) %!s(int=49) %!s(int=49)\
    \ %!s(int=50) %!s(int=50) %!s(int=51) %!s(int=51) %!s(int=52) %!s(int=52) %!s(int=53)\
    \ %!s(int=53) %!s(int=54) %!s(int=54) %!s(int=55) %!s(int=55) %!s(int=56) %!s(int=56)\
    \ %!s(int=57) %!s(int=57) %!s(int=58) %!s(int=58) %!s(int=59) %!s(int=59) %!s(int=60)\
    \ %!s(int=60) %!s(int=61) %!s(int=61) %!s(int=62) %!s(int=62) %!s(int=63) %!s(int=63)\
    \ %!s(int=64) %!s(int=64) %!s(int=65) %!s(int=65) %!s(int=66) %!s(int=66) %!s(int=67)\
    \ %!s(int=67) %!s(int=68) %!s(int=68) %!s(int=69) %!s(int=69) %!s(int=70) %!s(int=70)\
    \ %!s(int=71) %!s(int=71) %!s(int=72) %!s(int=72) %!s(int=73) %!s(int=73) %!s(int=74)\
    \ %!s(int=74) %!s(int=75) %!s(int=75) %!s(int=76) %!s(int=76) %!s(int=77) %!s(int=77)\
    \ %!s(int=78) %!s(int=78) %!s(int=79) %!s(int"
  timestamp: 1660074242
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    m := make([]interface{}, 2)\n    s := make([]int,\
    \ n)\n    var i int\n    // If n is odd, return empty list\n    if n % 2 == 1\
    \ {\n        return m\n    }\n    for i = 1; i <= n {\n        // If n is odd,\
    \ return empty list\n        if n % i == 0 {\n            m[i] = i\n         \
    \   s[i/2] = i\n        } else {\n            if s[i/2] > i {\n              \
    \  s[i/2] = i\n            } else {\n                // s[2] > i, so remove s[i]\
    \ from s[2] and add s[i] to s[1]\n                s[0] = s[1]\n              \
    \  m[i] = s[i]\n                s[i/2] = i\n            }\n        }\n    }\n\
    \    return m\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpskuw368u_test.go:31:23: expected '';'', found ''{''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074241
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    palindromes := make([]interface{}, 2)\n    for i :=\
    \ 0; i < n; i++ {\n        if isPalindrome(i) {\n            evenPalindromes :=\
    \ getEvenPalindromes(i)\n            for _, evenPalindrome := range evenPalindromes\
    \ {\n                palindromes[0] = evenPalindrome\n                palindromes[1]\
    \ = 1\n            }\n        } else {\n            oddPalindromes := getOddPalindromes(i)\n\
    \            for _, oddPalindrome := range oddPalindromes {\n                palindromes[0]\
    \ = 1\n                palindromes[1] = oddPalindrome\n            }\n       \
    \ }\n    }\n    return palindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd3x8xcop_test.go:26:12: undefined: isPalindrome

    /tmp/tmpd3x8xcop_test.go:27:32: undefined: getEvenPalindromes

    /tmp/tmpd3x8xcop_test.go:33:31: undefined: getOddPalindromes

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074242
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    // base case\n    if n < 1 || n > 10^3 {\n       \
    \ return []interface{}{}\n    }\n\n    // even palindrome\n    even := evenPalindrome(n)\n\
    \n    // odd palindrome\n    odd := oddPalindrome(n)\n\n    // return a list that\
    \ contains even and odd palindromes.\n    // the number of even and odd palindromes\
    \ is the length of the two list above.\n    return append(even, odd)\n}\n\nfunc\
    \ TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk2kxpx_a_test.go:30:13: undefined: evenPalindrome

    /tmp/tmpk2kxpx_a_test.go:33:12: undefined: oddPalindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074242
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    result := make([]interface{}, 0)\n    var even int\
    \ = n - 1\n    var odd int = 1\n    for i := 1; i <= n; i++ {\n        odd *=\
    \ 2\n        if i%2 != 0 {\n            even *= 2\n        }\n        if even\
    \ == odd {\n            even = even + 1\n            odd = 1\n        }\n    \
    \    if even > n {\n            break\n        }\n        result = append(result,\
    \ even)\n    }\n    return append(result, odd)\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Palindrome (0.00s)\n    --- FAIL: TestEven_Odd_Palindrome/test_num__0\
    \ (0.00s)\n        tmp0gp8cmdc_test.go:64: expected '[%!s(int=8) %!s(int=13)]',\
    \ got '[%!s(int=2)]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__1 (0.00s)\n\
    \        tmp0gp8cmdc_test.go:64: expected '[%!s(int=4) %!s(int=6)]', got '[%!s(int=2)]'\n\
    \    --- FAIL: TestEven_Odd_Palindrome/test_num__2 (0.00s)\n        tmp0gp8cmdc_test.go:64:\
    \ expected '[%!s(int=1) %!s(int=2)]', got '[%!s(int=2)]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__3\
    \ (0.00s)\n        tmp0gp8cmdc_test.go:64: expected '[%!s(int=6) %!s(int=8)]',\
    \ got '[%!s(int=2)]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__4 (0.00s)\n\
    \        tmp0gp8cmdc_test.go:64: expected '[%!s(int=5) %!s(int=6)]', got '[%!s(int=2)]'\n\
    \    --- FAIL: TestEven_Odd_Palindrome/test_num__5 (0.00s)\n        tmp0gp8cmdc_test.go:64:\
    \ expected '[%!s(int=4) %!s(int=6)]', got '[%!s(int=2)]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__6\
    \ (0.00s)\n        tmp0gp8cmdc_test.go:64: expected '[%!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=2)]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__7 (0.00s)\n\
    \        tmp0gp8cmdc_test.go:64: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=0)\
    \ %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074242
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    odd := []int{}\n    even := []int{}\n\n    for p :=\
    \ 1; p*p <= n; p++ {\n        if p == int(n/p) {\n            even = append(even,\
    \ p)\n            continue\n        }\n        odd = append(odd, p)\n    }\n\n\
    \    return even\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 tags=go,algorithm\
    \ |>\nAnother answer on how to solve the problem without using map which reduces\
    \ the complexity of checking whether palindrome is odd or even in O(n) time complexity\
    \ is as follows:\n<code>\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp0m1iafq7_test.go:37:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074241
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    // write your code here\n    list := make([]interface{},\
    \ n+1)\n    list[1] = n\n    for i := 2; i <= n; i++ {\n        list[i] = 0\n\
    \        r := i\n        for j := 1; j <= i/2; j++ {\n            if r == j {\n\
    \                list[j] = 1\n            }\n            r *= 2\n        }\n \
    \   }\n    return list\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Palindrome (0.00s)\n    --- FAIL: TestEven_Odd_Palindrome/test_num__0\
    \ (0.00s)\n        tmpmvdz21gl_test.go:60: expected '[%!s(int=8) %!s(int=13)]',\
    \ got '[<nil> %!s(int=123) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__1\
    \ (0.00s)\n        tmpmvdz21gl_test.go:60: expected '[%!s(int=4) %!s(int=6)]',\
    \ got '[<nil> %!s(int=12) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    ---\
    \ FAIL: TestEven_Odd_Palindrome/test_num__2 (0.00s)\n        tmpmvdz21gl_test.go:60:\
    \ expected '[%!s(int=1) %!s(int=2)]', got '[<nil> %!s(int=3) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestEven_Odd_Palindrome/test_num__3 (0.00s)\n      "
  timestamp: 1660074242
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    var evenPalindromes []interface{}\n    var oddPalindromes\
    \ []interface{}\n\n    for i := 1; i <= n; i++ {\n        for j := i + 1; j <=\
    \ n; j++ {\n            if i == j*j {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n                oddPalindromes = append(oddPalindromes, j)\n           \
    \ }\n        }\n    }\n    evenPalindromes = append(evenPalindromes, 0)\n    oddPalindromes\
    \ = append(oddPalindromes, 0)\n\n    return evenPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Palindrome (0.00s)\n    --- FAIL: TestEven_Odd_Palindrome/test_num__0\
    \ (0.00s)\n        tmpgl4x6ck6_test.go:61: expected '[%!s(int=8) %!s(int=13)]',\
    \ got '[%!s(int=0)]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__1 (0.00s)\n\
    \        tmpgl4x6ck6_test.go:61: expected '[%!s(int=4) %!s(int=6)]', got '[%!s(int=0)]'\n\
    \    --- FAIL: TestEven_Odd_Palindrome/test_num__2 (0.00s)\n        tmpgl4x6ck6_test.go:61:\
    \ expected '[%!s(int=1) %!s(int=2)]', got '[%!s(int=0)]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__3\
    \ (0.00s)\n        tmpgl4x6ck6_test.go:61: expected '[%!s(int=6) %!s(int=8)]',\
    \ got '[%!s(int=0)]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__4 (0.00s)\n\
    \        tmpgl4x6ck6_test.go:61: expected '[%!s(int=5) %!s(int=6)]', got '[%!s(int=0)]'\n\
    \    --- FAIL: TestEven_Odd_Palindrome/test_num__5 (0.00s)\n        tmpgl4x6ck6_test.go:61:\
    \ expected '[%!s(int=4) %!s(int=6)]', got '[%!s(int=0)]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__6\
    \ (0.00s)\n        tmpgl4x6ck6_test.go:61: expected '[%!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=0)]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__7 (0.00s)\n\
    \        tmpgl4x6ck6_test.go:61: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074242
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    // write your code here\n    p := make([]interface{},\
    \ 0, n+1)\n    for x := 1; x <=n; x++ {\n        if x == n+1 {\n            return\
    \ p\n        }\n        for y := 1; y <= n; y++ {\n            if x == y {\n \
    \               continue\n            }\n            if x != y {\n           \
    \     if x == n+1 {\n                    p = append(p, x)\n                  \
    \  x = 1\n                } else {\n                    p = append(p, x)\n   \
    \                 x = x + 1\n                }\n                p = append(p,\
    \ y)\n            }\n        }\n    }\n    return p\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Palindrome (0.00s)\n    --- FAIL: TestEven_Odd_Palindrome/test_num__0\
    \ (0.00s)\n        tmp4n1vdgrb_test.go:69: expected '[%!s(int=8) %!s(int=13)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=4) %!s(int=4)\
    \ %!s(int=5) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=7) %!s(int=8)\
    \ %!s(int=8) %!s(int=9) %!s(int=9) %!s(int=10) %!s(int=10) %!s(int=11) %!s(int=11)\
    \ %!s(int=12) %!s(int=12) %!s(int=13) %!s(int=13) %!s(int=14) %!s(int=14) %!s(int=15)\
    \ %!s(int=15) %!s(int=16) %!s(int=16) %!s(int=17) %!s(int=17) %!s(int=18) %!s(int=18)\
    \ %!s(int=19) %!s(int=19) %!s(int=20) %!s(int=20) %!s(int=21) %!s(int=21) %!s(int=22)\
    \ %!s(int=22) %!s(int=23) %!s(int=23) %!s(int=24) %!s(int=24) %!s(int=25) %!s(int=25)\
    \ %!s(int=26) %!s(int=26) %!s(int=27) %!s(int=27) %!s(int=28) %!s(int=28) %!s(int=29)\
    \ %!s(int=29) %!s(int=30) %!s(int=30) %!s(int=31) %!s(int=31) %!s(int=32) %!s(int=32)\
    \ %!s(int=33) %!s(int=33) %!s(int=34) %!s(int=34) %!s(int=35) %!s(int=35) %!s(int=36)\
    \ %!s(int=36) %!s(int=37) %!s(int=37) %!s(int=38) %!s(int=38) %!s(int=39) %!s(int=39)\
    \ %!s(int=40) %!s(int=40) %!s(int=41) %!s(int=41) %!s(int=42) %!s(int=42) %!s(int=43)\
    \ %!s(int=43) %!s(int=44) %!s(int=44) %!s(int=45) %!s(int=45) %!s(int=46) %!s(int=46)\
    \ %!s(int=47) %!s(int=47) %!s(int=48) %!s(int=48) %!s(int=49) %!s(int=49) %!s(int=50)\
    \ %!s(int=50) %!s(int=51) %!s(int=51) %!s(int=52) %!s(int=52) %!s(int=53) %!s(int=53)\
    \ %!s(int=54) %!s(int=54) %!s(int=55) %!s(int=55) %!s(int=56) %!s(int=56) %!s(int=57)\
    \ %!s(int=57) %!s(int=58) %!s(int=58) %!s(int=59) %!s(int=59) %!s(int=60) %!s(int=60)\
    \ %!s(int=61) %!s(int=61) %!s(int=62) %!s(int=62) %!s(int=63) %!s(int=63) %!s(int=64)\
    \ %!s(int=64) %!s(int=65) %!s(int=65) %!s(int=66) %!s(int=66) %!s(int=67) %!s(int=67)\
    \ %!s(int=68) %!s(int=68) %!s(int=69) %!s(int=69) %!s(int=70) %!s(int=70) %!s(int=71)\
    \ %!s(int=71) %!s(int=72) %!s(int=72) %!s(int=73) %!s(int=73) %!s(int=74) %!s(int=74)\
    \ %!s(int=75) %!s(int=75) %!s(int=76) %!s(int=76) %!s(int=77) %!s(int=77) %!s(int=78)\
    \ %!s(int=78) %!s(int=79) %!s(int=79) %!s(in"
  timestamp: 1660074242
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    var evenPal = []interface{}{}\n    var oddPal = []interface{}{}\n\
    \    var res = []interface{}{}\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i)\
    \ {\n            if isEven(i) {\n                evenPal = append(evenPal, i)\n\
    \            } else {\n                oddPal = append(oddPal, i)\n          \
    \  }\n        } else {\n            if isEven(i) {\n                evenPal =\
    \ append(evenPal, i)\n            }\n            if isOdd(i) {\n             \
    \   oddPal = append(oddPal, i)\n            }\n        }\n    }\n    res = append(res,\
    \ evenPal...)\n    res = append(res, oddPal...)\n    return res\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu24y35hr_test.go:28:12: undefined: isPalindrome

    /tmp/tmpu24y35hr_test.go:29:16: undefined: isEven

    /tmp/tmpu24y35hr_test.go:35:16: undefined: isEven

    /tmp/tmpu24y35hr_test.go:38:16: undefined: isOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074242
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    even, odd, palindromes := 0, 0, []interface{}{}\n\
    \    for number := range append(palindromes, 1); number < n; number++ {\n    \
    \    if number % 2 == 0 {\n            palindromes = append(palindromes, number)\n\
    \        } else {\n            palindromes = append(palindromes, number+1)\n \
    \       }\n        if isPalindrome(number) {\n            even++\n        } else\
    \ {\n            odd++\n        }\n    }\n    if even > odd {\n        return\
    \ palindromes\n    } else {\n        return []interface{}{even, odd}\n    }\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpinuchmyl_test.go:25:47: expected ''{'', found '';''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074241
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    var result []interface{}\n    var evenPalindromes,\
    \ oddPalindromes int\n\n    for number := 1; number <= n; number++ {\n       \
    \ // Even palindrome number\n        if number%2 == 0 {\n            if isPalindrome(number)\
    \ {\n                evenPalindromes++\n            }\n        }\n\n        //\
    \ Odd palindrome number\n        if number%2 == 1 {\n            if !isPalindrome(number)\
    \ {\n                oddPalindromes++\n            }\n        }\n    }\n\n   \
    \ // Return odd even palindromes list\n    if oddPalindromes > evenPalindromes\
    \ {\n        result = append(result, oddPalindromes)\n    } else {\n        result\
    \ = append(result, evenPalindromes)\n    }\n    return result\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpssyzb133_test.go:30:16: undefined: isPalindrome

    /tmp/tmpssyzb133_test.go:37:17: undefined: isPalindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074242
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    var list []interface{}\n\n    odd_even := make([]int,\
    \ 0, n)\n\n    for i := 0; i < n; i++ {\n        // odd number palindrome check\n\
    \        j := n - 1\n        for ; j >=0; j-- {\n            if j == i {\n   \
    \             continue\n            }\n            if j%2 == 0 && i%2 == 0 {\n\
    \                odd_even = append(odd_even, j)\n                continue\n  \
    \          }\n            if j%2 == 0 && i%2 == 1 {\n                odd_even\
    \ = append(odd_even, j)\n                continue\n            }\n           \
    \ if j%2 != 0 && i%2 == 0 {\n                odd_even = append(odd_even, j)\n\
    \                continue\n            }\n            if j%2 != 0 && i%2 == 1\
    \ {\n                odd_even = append(odd_even, j)\n                continue\n\
    \            }\n            if j%2 == 1 && i%2 != 0 {\n                odd_even\
    \ = append(odd_even, j)\n                continue\n            }\n           \
    \ if j%2 == 1 && i%2 != 1 {\n                odd_even = append(odd_even, j)\n\
    \                continue\n            }\n        }\n        // even number palindrome\
    \ check\n        j := 0\n        for ; j <= n; j++ {\n            if j == i {\n\
    \                continue\n            }\n            if j%2 == 0 && i%2 == 0\
    \ {\n                odd_even = append(odd_even, j)\n                continue\n\
    \            }\n            if j%2 == 0 && i%2 == 1 {\n                odd_even\
    \ = append(odd_even, j)\n                continue\n            }\n           \
    \ if j%2 != 0 && i%2 == 0 {\n                odd_even = append(odd_even, j)\n\
    \                continue\n            }\n            if j%2 != 0 && i%2 == 1\
    \ {\n                odd_even = append(odd_even, j)\n                continue\n\
    \            }\n            if j%2 == 1 && i%2 != 0 {\n                odd_even\
    \ = append(odd_even, j)\n                continue\n            }\n           \
    \ if j%2 == 1 && i%2 != 1 {\n                odd_even = append(odd_even, j)\n\
    \                continue\n            }\n        }\n    }\n\n    // append even\
    \ and odd palindrome to the list\n    list = append(list, odd_even...)\n    list\
    \ = append(list, odd_even...)\n\n    return list\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpamlhl6pm_test.go:61:11: no new variables on left side of :=

    /tmp/tmpamlhl6pm_test.go:94:25: cannot use odd_even (variable of type []int) as
    type []interface{} in argument to append

    /tmp/tmpamlhl6pm_test.go:95:25: cannot use odd_even (variable of type []int) as
    type []interface{} in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074242
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    result := []interface{}{}\n    for i := 1; i <= n;\
    \ i++ {\n        for j := 1; j <= i/2; j++ {\n            isPalindrome := IsPalindrome(i*j)\n\
    \            if isPalindrome {\n                result = append(result, i*j)\n\
    \            }\n        }\n    }\n    return result\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1fo3obm0_test.go:27:29: undefined: IsPalindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074242
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    // write your code here\n    return nil\n}\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Palindrome (0.00s)\n    --- FAIL: TestEven_Odd_Palindrome/test_num__0\
    \ (0.00s)\n        tmpl93p9n1u_test.go:47: expected '[%!s(int=8) %!s(int=13)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__1 (0.00s)\n      \
    \  tmpl93p9n1u_test.go:47: expected '[%!s(int=4) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestEven_Odd_Palindrome/test_num__2 (0.00s)\n        tmpl93p9n1u_test.go:47:\
    \ expected '[%!s(int=1) %!s(int=2)]', got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__3\
    \ (0.00s)\n        tmpl93p9n1u_test.go:47: expected '[%!s(int=6) %!s(int=8)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__4 (0.00s)\n      \
    \  tmpl93p9n1u_test.go:47: expected '[%!s(int=5) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestEven_Odd_Palindrome/test_num__5 (0.00s)\n        tmpl93p9n1u_test.go:47:\
    \ expected '[%!s(int=4) %!s(int=6)]', got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__6\
    \ (0.00s)\n        tmpl93p9n1u_test.go:47: expected '[%!s(int=4) %!s(int=5)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__7 (0.00s)\n      \
    \  tmpl93p9n1u_test.go:47: expected '[%!s(int=0) %!s(int=1)]', got '[]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074243
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenList := make([]interface{}, 0, n)\n    oddList\
    \ := make([]interface{}, 0, n)\n    for number := 1; number <= n; number++ {\n\
    \        odd, even := isPalindrome(number)\n        if even {\n            evenList\
    \ = append(evenList, number)\n        } else {\n            oddList = append(oddList,\
    \ number)\n        }\n    }\n    return evenList, oddList\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpvdelipc5_test.go:27:22:\
    \ undefined: isPalindrome\n/tmp/tmpvdelipc5_test.go:34:22: too many return values\n\
    \thave ([]interface{}, []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074243
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    var evenPalindrome []interface{}\n    var oddPalindrome\
    \ []interface{}\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= i; j++\
    \ {\n            if j == i {\n                evenPalindrome = append(evenPalindrome,\
    \ i)\n            }\n            oddPalindrome = append(oddPalindrome, j)\n  \
    \      }\n    }\n    return evenPalindrome\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Palindrome (0.00s)\n    --- FAIL: TestEven_Odd_Palindrome/test_num__0\
    \ (0.00s)\n        tmp4v8kmj9q_test.go:57: expected '[%!s(int=8) %!s(int=13)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)\
    \ %!s(int=8) %!s(int=9) %!s(int=10) %!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14)\
    \ %!s(int=15) %!s(int=16) %!s(int=17) %!s(int=18) %!s(int=19) %!s(int=20) %!s(int=21)\
    \ %!s(int=22) %!s(int=23) %!s(int=24) %!s(int=25) %!s(int=26) %!s(int=27) %!s(int=28)\
    \ %!s(int=29) %!s(int=30) %!s(int=31) %!s(int=32) %!s(int=33) %!s(int=34) %!s(int=35)\
    \ %!s(int=36) %!s(int=37) %!s(int=38) %!s(int=39) %!s(int=40) %!s(int=41) %!s(int=42)\
    \ %!s(int=43) %!s(int=44) %!s(int=45) %!s(int=46) %!s(int=47) %!s(int=48) %!s(int=49)\
    \ %!s(int=50) %!s(int=51) %!s(int=52) %!s(int=53) %!s(int=54) %!s(int=55) %!s(int=56)\
    \ %!s(int=57) %!s(int=58) %!s(int=59) %!s(int=60) %!s(int=61) %!s(int=62) %!s(int=63)\
    \ %!s(int=64) %!s(int=65) %!s(int=66) %!s(int=67) %!s(int=68) %!s(int=69) %!s(int=70)\
    \ %!s(int=71) %!s(int=72) %!s(int=73) %!s(int=74) %!s(int=75) %!s(int=76) %!s(int=77)\
    \ %!s(int=78) %!s(int=79) %!s(int=80) %!s(int=81) %!s(int=82) %!s(int=83) %!s(int=84)\
    \ %!s(int=85) %!s(int=86) %!s(int=87) %!s(int=88) %!s(int=89) %!s(int=90) %!s(int=91)\
    \ %!s(int=92) %!s(int=93) %!s(int=94) %!s(int=95) %!s(int=96) %!s(int=97) %!s(int=98)\
    \ %!s(int=99) %!s(int=100) %!s(int=101) %!s(int=102) %!s(int=103) %!s(int=104)\
    \ %!s(int=105) %!s(int=106) %!s(int=107) %!s(int=108) %!s(int=109) %!s(int=110)\
    \ %!s(int=111) %!s(int=112) %!s(int=113) %!s(int=114) %!s(int=115) %!s(int=116)\
    \ %!s(int=117) %!s(int=118) %!s(int=119) %!s(int=120) %!s(int=121) %!s(int=122)\
    \ %!s(int=123)]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__1 (0.00s)\n\
    \        tmp4v8kmj9q_test.go:57: expected '[%!s(int=4) %!s(int=6)]', got '[%!s(int=1)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9) %!s(int=10) %!s(int=11) %!s(int=12)]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__2\
    \ (0.00s)\n        tmp4v8kmj9q_test.go:57: expected '[%!s(int=1)"
  timestamp: 1660074243
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    list := make([]interface{}, 0, 2)\n    \n    for i\
    \ := 0; i < n; i++ {\n        for j := 0; j <= i/2; j++ {\n            if isPalindrome(i*10+j)\
    \ {\n                list = append(list, i*10+j)\n            }\n        }\n \
    \   }\n    return list\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvdx2fl48_test.go:28:16: undefined: isPalindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074243
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    even, odd := 0, 0\n    result := make([]interface{},\
    \ 0)\n\n    for i := 1; i <= n; i++ {\n        if isPalindrome([]byte(strconv.Itoa(i)))\
    \ || isPalindrome([]byte(strconv.Itoa(int(i)))){\n            even += 2\n    \
    \    } else {\n            odd += 2\n        }\n\n    }\n    if even > 0 && odd\
    \ > 0 {\n        result = append(result, nil)\n    }\n    if even > 0 {\n    \
    \    result = append(result, even)\n    }\n    if odd > 0 {\n        result =\
    \ append(result, odd)\n    }\n\n    return result\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk9toxj9m_test.go:28:12: undefined: isPalindrome

    /tmp/tmpk9toxj9m_test.go:28:32: undefined: strconv

    /tmp/tmpk9toxj9m_test.go:28:53: undefined: isPalindrome

    /tmp/tmpk9toxj9m_test.go:28:73: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074243
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    var result []interface{}\n    var odd, even int\n\n\
    \    for i := 1; i <= n; i++ {\n        if i == 1 {\n            result = append(result,\
    \ i)\n        }\n        for j := 0; j <= i/2; j++ {\n            if i == j*j\
    \ {\n                result = append(result, j)\n            }\n        }\n  \
    \  }\n    return result\n}\n</code>\n<|/ a dscore=0 tags=go |>\n<| a dscore=0\
    \ |>\nI tried to solve this problem using Go Lang and Python\n<code>\nfrom typing\
    \ import List\nclass Solution:\n    def solve(self, nums: List[int]) -> List[int]:\n\
    \        odd = []\n        even = []\n        even_count = 0\n        odd_count\
    \ = 0\n        for i in range(len(nums)):\n            if i % 2 == 0:\n      \
    \          even.append(nums[i])\n                even_count += 1\n           \
    \ else:\n                odd.append(nums[i])\n                odd_count += 1\n\
    \        \n        \n        while odd_count < even_count and even:\n        \
    \    odd.pop()\n            odd_count += 1\n        while odd_count < even_count\
    \ and not even:\n            even.pop()\n            even_count += 1\n       \
    \ \n        if even_count > odd_count:\n            odd.append(0)\n        elif\
    \ odd_count > even_count:\n            even.append(0)\n        \n        even_odd\
    \ = []\n        for i in range(even_count):\n            even_odd.append(even.pop())\n\
    \        for i in range(odd_count):\n            even_odd.append(odd.pop())\n\
    \        \n        return even_odd\n        \nsol = Solution()\nprint(sol.solve([1,2,3,4,5,6,7,8,9,10]))\n\
    </code>\n<|/ a tags=go |>\n<| a dscore=0 |>\nHere's the answer that I came up\
    \ with. The time complexity is O(N)\n<code>\npackage main\n\nimport \"fmt\"\n\n\
    func TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpm3x1a3e7_test.go:39:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074243
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    result := []interface{}{}\n    odd_palindrome(result,\
    \ n, true)\n    even_palindrome(result, n, false)\n    return result\n}\n\nfunc\
    \ TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpiimgza_o_test.go:25:5: undefined: odd_palindrome

    /tmp/tmpiimgza_o_test.go:26:5: undefined: even_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074244
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    oddList := make([]interface{}, 0, n)\n    evenList\
    \ := make([]interface{}, 0, n)\n    for i := 1; i < n; i++ {\n        // check\
    \ even palindrome\n        res := reversePalindrome(i)\n        if res == i {\n\
    \            evenList = append(evenList, i)\n        } else {\n            oddList\
    \ = append(oddList, i)\n        }\n    }\n    return oddList\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpusvlhkcq_test.go:28:16: undefined: reversePalindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074244
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    even_odd_palindrome := make([]interface{}, 0)\n  \
    \  if n%2 == 0 {\n        even_odd_palindrome = append(even_odd_palindrome, n/2)\n\
    \    } else {\n        even_odd_palindrome = append(even_odd_palindrome, (n-1)/2+1)\n\
    \    }\n    return even_odd_palindrome\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Palindrome (0.00s)\n    --- FAIL: TestEven_Odd_Palindrome/test_num__0\
    \ (0.00s)\n        tmp12d1p9fh_test.go:53: expected '[%!s(int=8) %!s(int=13)]',\
    \ got '[%!s(int=62)]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__1 (0.00s)\n\
    \        tmp12d1p9fh_test.go:53: expected '[%!s(int=4) %!s(int=6)]', got '[%!s(int=6)]'\n\
    \    --- FAIL: TestEven_Odd_Palindrome/test_num__2 (0.00s)\n        tmp12d1p9fh_test.go:53:\
    \ expected '[%!s(int=1) %!s(int=2)]', got '[%!s(int=2)]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__3\
    \ (0.00s)\n        tmp12d1p9fh_test.go:53: expected '[%!s(int=6) %!s(int=8)]',\
    \ got '[%!s(int=32)]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__4 (0.00s)\n\
    \        tmp12d1p9fh_test.go:53: expected '[%!s(int=5) %!s(int=6)]', got '[%!s(int=13)]'\n\
    \    --- FAIL: TestEven_Odd_Palindrome/test_num__5 (0.00s)\n        tmp12d1p9fh_test.go:53:\
    \ expected '[%!s(int=4) %!s(int=6)]', got '[%!s(int=10)]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__6\
    \ (0.00s)\n        tmp12d1p9fh_test.go:53: expected '[%!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=5)]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__7 (0.00s)\n\
    \        tmp12d1p9fh_test.go:53: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074244
- exit_code: null
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    if n < 1 {\n        return []interface{}{}\n    }\n\
    \    odd := 1\n    even := 1\n    result := make([]interface{}, 0)\n    for even\
    \ <= n && odd <= n {\n        for i := 0; i < n; i++ {\n            if i%2 ==\
    \ 0 {\n                if n%2 == 0 {\n                    even++\n           \
    \     } else {\n                    odd++\n                }\n            } else\
    \ if n%2 == 0 {\n                even++\n            } else {\n              \
    \  odd++\n            }\n        }\n        result = append(result, even)\n  \
    \      result = append(result, odd)\n        even = 1\n        odd = 1\n    }\n\
    \    return result\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074257
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    var evenPalindromes []interface{}\n    var oddPalindromes\
    \ []interface{}\n\n    var i int\n    var j int\n\n    for i = 1; i <= n; i++\
    \ {\n        for j = i - 1; j >= 1; j-- {\n            if i == j {\n         \
    \       continue\n            }\n            if i != j && int(i) == int(j) {\n\
    \                if i != 0 {\n                    oddPalindromes = append(oddPalindromes,\
    \ i)\n                }\n                if j != 0 {\n                    evenPalindromes\
    \ = append(evenPalindromes, j)\n                }\n            }\n        }\n\
    \    }\n    return evenPalindromes, oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmph0bwtz4w_test.go:45:29:\
    \ too many return values\n\thave ([]interface{}, []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074244
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    // Your code here\n    oddPalindrome := make([]interface{},\
    \ 0)\n    evenPalindrome := make([]interface{}, 0)\n    for i := 1; i <= n; i++\
    \ {\n        if isPalindrome(i) {\n            if isOdd(i) {\n               \
    \ oddPalindrome = append(oddPalindrome, i)\n            } else {\n           \
    \     evenPalindrome = append(evenPalindrome, i)\n            }\n        }\n \
    \   }\n    return oddPalindrome\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr4x91a3r_test.go:28:12: undefined: isPalindrome

    /tmp/tmpr4x91a3r_test.go:29:16: undefined: isOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074244
- exit_code: null
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    result := []interface{}{}\n    if n < 1 {\n      \
    \  return nil\n    }\n    if n < 2 {\n        result = []interface{}{1}\n    \
    \    return result\n    }\n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            even := true\n            odd := true\n       \
    \     for k := 0; k < i && k < j; k++ {\n                if even_odd_palindrome(k)\
    \ == nil {\n                    even = false\n                }\n            }\n\
    \            for k := 0; k < i && k < j; k++ {\n                if even_odd_palindrome(k)\
    \ == nil {\n                    odd = false\n                }\n            }\n\
    \            if even && odd && i > j {\n                result = append(result,\
    \ i)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074257
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    if n<2 {\n        return nil\n    }\n    ans := make([]interface{},\
    \ 0, 2)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i) && isEven(i)\
    \ {\n            ans = append(ans, i)\n        }\n        if isPalindrome(i) &&\
    \ isOdd(i) {\n            ans = append(ans, i)\n        }\n    }\n    return ans\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx_5ovxsj_test.go:29:12: undefined: isPalindrome

    /tmp/tmpx_5ovxsj_test.go:29:31: undefined: isEven

    /tmp/tmpx_5ovxsj_test.go:32:12: undefined: isPalindrome

    /tmp/tmpx_5ovxsj_test.go:32:31: undefined: isOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074244
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    var result = make([]interface{}, 0)\n    for i :=\
    \ 1; i <= n; i++ {\n        if isPalindrome(i) {\n            evenOddPalindrome(i,\
    \ result)\n        }\n    }\n    return result\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpebgfg_ym_test.go:26:12: undefined: isPalindrome

    /tmp/tmpebgfg_ym_test.go:27:13: undefined: evenOddPalindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074244
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    var res = []interface{}{}\n    for i := 1; i <= n;\
    \ i++ {\n        // Reverse and add i to res.\n        rev := revString(i)\n \
    \       if rev == i {\n            res = append(res, i)\n        } else {\n  \
    \          res = append(res, int(rev)+int(i))\n        }\n    }\n    return res\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjdny0czu_test.go:27:16: undefined: revString

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074244
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    result := make([]interface{}, n+1)\n    even := make([]int,\
    \ n+1)\n    odd := make([]int, n+1)\n    \n    for i := 0; i < n; i++ {\n    \
    \    even[i] = 1\n        odd[i] = 1\n        for j := i + 1; j < n; j++ {\n \
    \           if even_odd_palindrome(j) == even_odd_palindrome(i+j-2) {\n      \
    \          even[i]++\n                odd[i]--\n            }\n        }\n   \
    \     result[i] = even[i] && odd[i]\n    }\n    return result[n]\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpa1_v8hvw_test.go:32:16:\
    \ invalid operation: even_odd_palindrome(j) == even_odd_palindrome(i + j - 2)\
    \ (slice can only be compared to nil)\n/tmp/tmpa1_v8hvw_test.go:37:21: invalid\
    \ operation: operator && not defined on even[i] (variable of type int)\n/tmp/tmpa1_v8hvw_test.go:39:12:\
    \ cannot use result[n] (variable of type interface{}) as type []interface{} in\
    \ return statement:\n\tneed type assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074244
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    if n < 1 || n > 10^3 {\n        fmt.Printf(\"The given\
    \ number %d is outside the given range. \\n\", n)\n        return nil\n    }\n\
    \n    result := make([]interface{}, 0, 2)\n    i := 1\n    for ; i <= n; i++ {\n\
    \        result := append(result, i)\n        j = i\n        for ; j <= n; j++\
    \ {\n            if i%2 != j%2 {\n                break\n            }\n     \
    \   }\n\n        if j == i {\n            result := append(result, j)\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplqjr3eaj_test.go:33:9: undefined: j

    /tmp/tmplqjr3eaj_test.go:34:15: undefined: j

    /tmp/tmplqjr3eaj_test.go:35:23: undefined: j

    /tmp/tmplqjr3eaj_test.go:40:12: undefined: j

    /tmp/tmplqjr3eaj_test.go:41:13: result declared but not used

    /tmp/tmplqjr3eaj_test.go:41:38: undefined: j

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074244
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    // Your code here\n    evenPalindromes := make([]interface{},\
    \ 0)\n    oddPalindromes := make([]interface{}, 0)\n    if n<=0 {\n        return\
    \ []interface{}{}\n    }\n    evenPalindromes = append(evenPalindromes, 1, n)\n\
    \    oddPalindromes = append(oddPalindromes, 0, n-1)\n    evenPalindromes = append(evenPalindromes,\
    \ 0, n)\n    oddPalindromes = append(oddPalindromes, 1, n-1)\n    evenPalindromes\
    \ = append(evenPalindromes, 0, n-1)\n    oddPalindromes = append(oddPalindromes,\
    \ 0, n)\n    return evenPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Palindrome (0.00s)\n    --- FAIL: TestEven_Odd_Palindrome/test_num__0\
    \ (0.00s)\n        tmpkz0v4dqn_test.go:59: expected '[%!s(int=8) %!s(int=13)]',\
    \ got '[%!s(int=1) %!s(int=123) %!s(int=0) %!s(int=123) %!s(int=0) %!s(int=122)]'\n\
    \    --- FAIL: TestEven_Odd_Palindrome/test_num__1 (0.00s)\n        tmpkz0v4dqn_test.go:59:\
    \ expected '[%!s(int=4) %!s(int=6)]', got '[%!s(int=1) %!s(int=12) %!s(int=0)\
    \ %!s(int=12) %!s(int=0) %!s(int=11)]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__2\
    \ (0.00s)\n        tmpkz0v4dqn_test.go:59: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=1) %!s(int=3) %!s(int=0) %!s(int=3) %!s(int=0) %!s(int=2)]'\n\
    \    --- FAIL: TestEven_Odd_Palindrome/test_num__3 (0.00s)\n        tmpkz0v4dqn_test.go:59:\
    \ expected '[%!s(int=6) %!s(int=8)]', got '[%!s(int=1) %!s(int=63) %!s(int=0)\
    \ %!s(int=63) %!s(int=0) %!s(int=62)]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__4\
    \ (0.00s)\n        tmpkz0v4dqn_test.go:59: expected '[%!s(int=5) %!s(int=6)]',\
    \ got '[%!s(int=1) %!s(int=25) %!s(int=0) %!s(int=25) %!s(int=0) %!s(int=24)]'\n\
    \    --- FAIL: TestEven_Odd_Palindrome/test_num__5 (0.00s)\n        tmpkz0v4dqn_test.go:59:\
    \ expected '[%!s(int=4) %!s(int=6)]', got '[%!s(int=1) %!s(int=19) %!s(int=0)\
    \ %!s(int=19) %!s(int=0) %!s(int=18)]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__6\
    \ (0.00s)\n        tmpkz0v4dqn_test.go:59: expected '[%!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=9) %!s(int=0) %!s(int=9) %!s(int=0) %!s(int=8)]'\n\
    \    --- FAIL: TestEven_Odd_Palindrome/test_num__7 (0.00s)\n        tmpkz0v4dqn_test.go:59:\
    \ expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=1) %!s(int=1) %!s(int=0) %!s(int=1)\
    \ %!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074245
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    x := make([]int, n+1)\n    x [0] = 1\n    for i :=\
    \ 1; i <= n; i++ {\n        x[i] = x[i - 1] * 10 + i\n    }\n    return even_odd_palindromeHelper(x,\
    \ 0, n-1)\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp2w_v5ll_test.go:29:12: undefined: even_odd_palindromeHelper

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074244
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    // Your code here\n    evenPalidromes := make([]interface{},\
    \ 0)\n    oddPalidromes := make([]interface{}, 0)\n\n    for i:=0;i<=n;i++ {\n\
    \        if i%2 == 0 {\n            evenPalidromes = append(evenPalidromes, i)\n\
    \        } else {\n            oddPalidromes = append(oddPalidromes, i)\n    \
    \    }\n    }\n\n    evenPalidromes = append(evenPalidromes, oddPalidromes)\n\
    \    return evenPalidromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n\
    \  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Palindrome (0.00s)\n    --- FAIL: TestEven_Odd_Palindrome/test_num__0\
    \ (0.00s)\n        tmpwbfn973__test.go:60: expected '[%!s(int=8) %!s(int=13)]',\
    \ got '[%!s(int=0) %!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94) %!s(int=96)\
    \ %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106) %!s(int=108)\
    \ %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118) %!s(int=120)\
    \ %!s(int=122) [%!s(int=1) %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11)\
    \ %!s(int=13) %!s(int=15) %!s(int=17) %!s(int=19) %!s(int=21) %!s(int=23) %!s(int=25)\
    \ %!s(int=27) %!s(int=29) %!s(int=31) %!s(int=33) %!s(int=35) %!s(int=37) %!s(int=39)\
    \ %!s(int=41) %!s(int=43) %!s(int=45) %!s(int=47) %!s(int=49) %!s(int=51) %!s(int=53)\
    \ %!s(int=55) %!s(int=57) %!s(int=59) %!s(int=61) %!s(int=63) %!s(int=65) %!s(int=67)\
    \ %!s(int=69) %!s(int=71) %!s(int=73) %!s(int=75) %!s(int=77) %!s(int=79) %!s(int=81)\
    \ %!s(int=83) %!s(int=85) %!s(int=87) %!s(int=89) %!s(int=91) %!s(int=93) %!s(int=95)\
    \ %!s(int=97) %!s(int=99) %!s(int=101) %!s(int=103) %!s(int=105) %!s(int=107)\
    \ %!s(int=109) %!s(int=111) %!s(int=113) %!s(int=115) %!s(int=117) %!s(int=119)\
    \ %!s(int=121) %!s(int=123)]]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__1\
    \ (0.00s)\n        tmpwbfn973__test.go:60: expected '[%!s(int=4) %!s(int=6)]',\
    \ got '[%!s(int=0) %!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12)\
    \ [%!s(int=1) %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11)]]'\n   \
    \ --- FAIL: TestEven_Odd_Palindrome/test_num__2 (0.00s)\n        tmpwbfn973__test.go"
  timestamp: 1660074245
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    if n < 1 {\n        return []interface{}{}\n    }\n\
    \    evenPalindromes := []interface{}{}\n    oddPalindromes := []interface{}{}\n\
    \    for i := 1; i <= n; i++ {\n        for j := 1; j <= n-i; j++ {\n        \
    \    evenPalindromes = append(evenPalindromes, i)\n            oddPalindromes\
    \ = append(oddPalindromes, j)\n        }\n    }\n    return append(evenPalindromes,\
    \ oddPalindromes...)\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Palindrome (0.01s)\n    --- FAIL: TestEven_Odd_Palindrome/test_num__0\
    \ (0.01s)\n        tmp_et1pxr2_test.go:58: expected '[%!s(int=8) %!s(int=13)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s"
  timestamp: 1660074245
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    var evenPalindromes []interface{}\n    var oddPalindromes\
    \ []interface{}\n\n    evenPalindromes = append(evenPalindromes, evenPalindrome(n%2))\n\
    \    evenPalindromes = append(evenPalindromes, oddPalindrome(n/2))\n\n    return\
    \ evenPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7wg52g7z_test.go:25:9: oddPalindromes declared but not used

    /tmp/tmp7wg52g7z_test.go:27:47: undefined: evenPalindrome

    /tmp/tmp7wg52g7z_test.go:28:47: undefined: oddPalindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074244
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    if n < 1 {\n        return []interface{}{}\n    }\n\
    \    if n == 1 {\n        return []interface{}{n}\n    }\n    var odd []interface{}\n\
    \    var even []interface{}\n    for x := 1; x < n; x++ {\n        odd = append(odd,\
    \ x)\n        even = append(even, x)\n        if x%2 == 0 {\n            even\
    \ = append(even, x)\n        }\n    }\n    return even\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Palindrome (0.00s)\n    --- FAIL: TestEven_Odd_Palindrome/test_num__0\
    \ (0.00s)\n        tmpkkofvzif_test.go:62: expected '[%!s(int=8) %!s(int=13)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5)\
    \ %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=8) %!s(int=9) %!s(int=10)\
    \ %!s(int=10) %!s(int=11) %!s(int=12) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=14)\
    \ %!s(int=15) %!s(int=16) %!s(int=16) %!s(int=17) %!s(int=18) %!s(int=18) %!s(int=19)\
    \ %!s(int=20) %!s(int=20) %!s(int=21) %!s(int=22) %!s(int=22) %!s(int=23) %!s(int=24)\
    \ %!s(int=24) %!s(int=25) %!s(int=26) %!s(int=26) %!s(int=27) %!s(int=28) %!s(int=28)\
    \ %!s(int=29) %!s(int=30) %!s(int=30) %!s(int=31) %!s(int=32) %!s(int=32) %!s(int=33)\
    \ %!s(int=34) %!s(int=34) %!s(int=35) %!s(int=36) %!s(int=36) %!s(int=37) %!s(int=38)\
    \ %!s(int=38) %!s(int=39) %!s(int=40) %!s(int=40) %!s(int=41) %!s(int=42) %!s(int=42)\
    \ %!s(int=43) %!s(int=44) %!s(int=44) %!s(int=45) %!s(int=46) %!s(int=46) %!s(int=47)\
    \ %!s(int=48) %!s(int=48) %!s(int=49) %!s(int=50) %!s(int=50) %!s(int=51) %!s(int=52)\
    \ %!s(int=52) %!s(int=53) %!s(int=54) %!s(int=54) %!s(int=55) %!s(int=56) %!s(int=56)\
    \ %!s(int=57) %!s(int=58) %!s(int=58) %!s(int=59) %!s(int=60) %!s(int=60) %!s(int=61)\
    \ %!s(int=62) %!s(int=62) %!s(int=63) %!s(int=64) %!s(int=64) %!s(int=65) %!s(int=66)\
    \ %!s(int=66) %!s(int=67) %!s(int=68) %!s(int=68) %!s(int=69) %!s(int=70) %!s(int=70)\
    \ %!s(int=71) %!s(int=72) %!s(int=72) %!s(int=73) %!s(int=74) %!s(int=74) %!s(int=75)\
    \ %!s(int=76) %!s(int=76) %!s(int=77) %!s(int=78) %!s(int=78) %!s(int=79) %!s(int=80)\
    \ %!s(int=80) %!s(int=81) %!s(int=82) %!s(int=82) %!s(int=83) %!s(int=84) %!s(int=84)\
    \ %!s(int=85) %!s(int=86) %!s(int=86) %!s(int=87) %!s(int=88) %!s(int=88) %!s(int=89)\
    \ %!s(int=90) %!s(int=90) %!s(int=91) %!s(int=92) %!s(int=92) %!s(int=93) %!s(int=94)\
    \ %!s(int=94) %!s(int=95) %!s(int=96) %!s(int=96) %!s(int=97) %!s(int=98) %!s(int=98)\
    \ %!s(int=99) %!s(int=100) %!s(int=100) %!s(int=101) %!s(int=102) %!s(int=102)\
    \ %!s(int=103) %!s(int=104) %!s(int=104) %!s(in"
  timestamp: 1660074245
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    result := []interface{}{}\n\n    for i := 1; i <=\
    \ n; i++ {\n        p := palindrome(i)\n\n        if p == nil || palindrome(p)\
    \ == nil {\n            continue\n        }\n\n        if isEven(p) {\n      \
    \      result = append(result, p)\n        } else {\n            result = append(result,\
    \ palindrome(p))\n        }\n    }\n\n    return result\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr8ljuczz_test.go:27:14: undefined: palindrome

    /tmp/tmpr8ljuczz_test.go:29:24: undefined: palindrome

    /tmp/tmpr8ljuczz_test.go:33:12: undefined: isEven

    /tmp/tmpr8ljuczz_test.go:36:37: undefined: palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074245
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    var even_palindromes []interface{}\n    var odd_palindromes\
    \ []interface{}\n    // Only odd palindromes are added to the oddPalindromes list\n\
    \    for odd := 1; odd <= n/2; odd++ {\n        if n%odd != 0 {\n            odd_palindromes\
    \ = append(odd_palindromes, odd)\n        } else {\n            even_palindromes\
    \ = append(even_palindromes, odd)\n        }\n    }\n    return even_palindromes\
    \ + odd_palindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprw4wm3rq_test.go:34:12: invalid operation: operator + not defined on even_palindromes
    (variable of type []interface{})

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074245
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        isEven :=\
    \ false\n        isOdd := false\n        number := i\n        // Find the even\
    \ palindromes.\n        for i := 1; i * i <= number; i++ {\n            if number\
    \ % i == 0 {\n                number /= i\n                isEven = true\n   \
    \             break\n            }\n        }\n        // Find the odd palindromes.\n\
    \        for i := 1; i * i <= number; i++ {\n            if number % i != 0 {\n\
    \                number /= i\n                isOdd = true\n                break\n\
    \            }\n        }\n        if isEven && isOdd {\n            evenPalindromes\
    \ = append(evenPalindromes, i)\n        } else {\n            oddPalindromes =\
    \ append(oddPalindromes, i)\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5px_eue3_test.go:52:29:\
    \ too many return values\n\thave ([]interface{}, []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074245
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    if n < 1 {\n        return []interface{}{}\n    }\n\
    \    if n < 2 {\n        return [2]interface{}{1, n}\n    }\n    m := int(n%2)\n\
    \    if m == 0 {\n        return []interface{}{n}\n    }\n    l := [2]interface{}{n,\
    \ n}\n    i := 0\n    for {\n        if l[0] != l[1] {\n            l[0] = i\n\
    \            l[1] = n\n            return []interface{}{l[0], l[1]}\n        }\n\
    \        i++\n        if i >= n {\n            break\n        }\n        l[1]\
    \ = 2*(i+1)\n    }\n    return [2]interface{}{l[0], l[1]}\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpd_q7y1wi_test.go:28:16:\
    \ cannot use [2]interface{}{\u2026} (value of type [2]interface{}) as type []interface{}\
    \ in return statement\n/tmp/tmpd_q7y1wi_test.go:48:12: cannot use [2]interface{}{\u2026\
    } (value of type [2]interface{}) as type []interface{} in return statement\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074245
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    result := make([]interface{}, 0)\n    i := 1\n   \
    \ p := 1\n    for i <= n {\n        if isPalindrome(i) {\n            results\
    \ = append(results, i)\n        }\n        i += 2\n    }\n    return result\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpm4gp8vnd_test.go:26:5: p declared but not used

    /tmp/tmpm4gp8vnd_test.go:28:12: undefined: isPalindrome

    /tmp/tmpm4gp8vnd_test.go:29:30: undefined: results

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074245
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    var even = []interface{}{}\n    var odd = []interface{}{}\n\
    \    for i := 1; i <= n; i++ {\n        odd = append(odd, i)\n        odd = odd[len(odd)/2:]\n\
    \        even = append(even, i)\n        even = even[len(even)/2:]\n    }\n  \
    \  return even\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Palindrome (0.00s)\n    --- FAIL: TestEven_Odd_Palindrome/test_num__0\
    \ (0.00s)\n        tmpxke02tfh_test.go:55: expected '[%!s(int=8) %!s(int=13)]',\
    \ got '[%!s(int=123)]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__1 (0.00s)\n\
    \        tmpxke02tfh_test.go:55: expected '[%!s(int=4) %!s(int=6)]', got '[%!s(int=12)]'\n\
    \    --- FAIL: TestEven_Odd_Palindrome/test_num__2 (0.00s)\n        tmpxke02tfh_test.go:55:\
    \ expected '[%!s(int=1) %!s(int=2)]', got '[%!s(int=3)]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__3\
    \ (0.00s)\n        tmpxke02tfh_test.go:55: expected '[%!s(int=6) %!s(int=8)]',\
    \ got '[%!s(int=63)]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__4 (0.00s)\n\
    \        tmpxke02tfh_test.go:55: expected '[%!s(int=5) %!s(int=6)]', got '[%!s(int=25)]'\n\
    \    --- FAIL: TestEven_Odd_Palindrome/test_num__5 (0.00s)\n        tmpxke02tfh_test.go:55:\
    \ expected '[%!s(int=4) %!s(int=6)]', got '[%!s(int=19)]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__6\
    \ (0.00s)\n        tmpxke02tfh_test.go:55: expected '[%!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=9)]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__7 (0.00s)\n\
    \        tmpxke02tfh_test.go:55: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074246
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    palindromes := make([]interface{}, 0, 2)\n    for\
    \ i := 1; i <= n; i++ {\n        for j := n - i; j >= 0; j-- {\n            v\
    \ := j + 1\n            if v == i {\n                if v == n-i {\n         \
    \           palindromes = append(palindromes, j)\n                }\n        \
    \    }\n            if v != i {\n                if v != n-i {\n             \
    \       palindromes = append(palindromes, v)\n                }\n            }\n\
    \        }\n    }\n    return palindromes\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Palindrome (0.00s)\n    --- FAIL: TestEven_Odd_Palindrome/test_num__0\
    \ (0.00s)\n        tmpew6bu081_test.go:63: expected '[%!s(int=8) %!s(int=13)]',\
    \ got '[%!s(int=123) %!s(int=121) %!s(int=120) %!s(int=119) %!s(int=118) %!s(int=117)\
    \ %!s(int=116) %!s(int=115) %!s(int=114) %!s(int=113) %!s(int=112) %!s(int=111)\
    \ %!s(int=110) %!s(int=109) %!s(int=108) %!s(int=107) %!s(int=106) %!s(int=105)\
    \ %!s(int=104) %!s(int=103) %!s(int=102) %!s(int=101) %!s(int=100) %!s(int=99)\
    \ %!s(int=98) %!s(int=97) %!s(int=96) %!s(int=95) %!s(int=94) %!s(int=93) %!s(int=92)\
    \ %!s(int=91) %!s(int=90) %!s(int=89) %!s(int=88) %!s(int=87) %!s(int=86) %!s(int=85)\
    \ %!s(int=84) %!s(int=83) %!s(int=82) %!s(int=81) %!s(int=80) %!s(int=79) %!s(int=78)\
    \ %!s(int=77) %!s(int=76) %!s(int=75) %!s(int=74) %!s(int=73) %!s(int=72) %!s(int=71)\
    \ %!s(int=70) %!s(int=69) %!s(int=68) %!s(int=67) %!s(int=66) %!s(int=65) %!s(int=64)\
    \ %!s(int=63) %!s(int=62) %!s(int=61) %!s(int=60) %!s(int=59) %!s(int=58) %!s(int=57)\
    \ %!s(int=56) %!s(int=55) %!s(int=54) %!s(int=53) %!s(int=52) %!s(int=51) %!s(int=50)\
    \ %!s(int=49) %!s(int=48) %!s(int=47) %!s(int=46) %!s(int=45) %!s(int=44) %!s(int=43)\
    \ %!s(int=42) %!s(int=41) %!s(int=40) %!s(int=39) %!s(int=38) %!s(int=37) %!s(int=36)\
    \ %!s(int=35) %!s(int=34) %!s(int=33) %!s(int=32) %!s(int=31) %!s(int=30) %!s(int=29)\
    \ %!s(int=28) %!s(int=27) %!s(int=26) %!s(int=25) %!s(int=24) %!s(int=23) %!s(int=22)\
    \ %!s(int=21) %!s(int=20) %!s(int=19) %!s(int=18) %!s(int=17) %!s(int=16) %!s(int=15)\
    \ %!s(int=14) %!s(int=13) %!s(int=12) %!s(int=11) %!s(int=10) %!s(int=9) %!s(int=8)\
    \ %!s(int=7) %!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=122)\
    \ %!s(int=120) %!s(int=119) %!s(int=118) %!s(int=117) %!s(int=116) %!s(int=115)\
    \ %!s(int=114) %!s(int=113) %!s(int=112) %!s(int=111) %!s(int=110) %!s(int=109)\
    \ %!s(int=108) %!s(int=107) %!s(int=106) %!s(int=105) %!s(int=104) %!s(int=103)\
    \ %!s(int=102) %!s(int=101) %!s(int=100) %!s(int=99) %!s(int=98) %!s(int=97) %!s(int=96)\
    \ %!s(int=95) %!s(int=94) %!s(int=93) %!s(int=92) %!s(int=91) %!s(int=90) "
  timestamp: 1660074246
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    list := make([]interface{}, 0, 4)\n    palindromes\
    \ := make(map[int]int)\n    for i := 1; i <= n; i++ {\n        str = fmt.Sprintf(\"\
    %d\", i)\n        if str, ok := stringToInt(str); ok {\n            odd, even\
    \ := countPalindromes(str, i, palindromes)\n            list = append(list, odd,\
    \ even)\n        }\n    }\n    return list\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmploe82ha9_test.go:27:9: undefined: str

    /tmp/tmploe82ha9_test.go:28:23: undefined: stringToInt

    /tmp/tmploe82ha9_test.go:28:35: undefined: str

    /tmp/tmploe82ha9_test.go:29:26: undefined: countPalindromes

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074246
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    if n == 1 || n == 2 {\n        return []interface{}{1,\
    \ 2}\n    }\n\n    list := make([]interface{}, 0, 2)\n\n    for i := 1; i <= n;\
    \ i++ {\n        even, odd, ok := isPalindrome(i)\n        if !ok {\n        \
    \    continue\n        }\n        list = append(list, even, odd)\n    }\n\n  \
    \  return list\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp88qdwold_test.go:31:26: undefined: isPalindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074246
- exit_code: null
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    // Your code here\n    even, odd := 0, n\n    list\
    \ := []interface{}{}\n    for n > 0 {\n        even = even * 10 + n%10\n     \
    \   odd += n%10\n        n = n%10\n        list = append(list, even)\n       \
    \ if even > odd && even != 0 {\n            list = append(list, odd)\n       \
    \ }\n    }\n    return list\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n\
    \  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074259
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    // write your code here\n    result := make([]interface{},\
    \ 0, 2)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i) {\n       \
    \     result = append(result, i)\n        }\n    }\n    for i := 0; i < len(result);\
    \ i++ {\n        if result[i].(int) %2 == 0 {\n            result = append(result,\
    \ result[i+1])\n        }\n    }\n    return result\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjud5u5_1_test.go:27:12: undefined: isPalindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074246
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    ret := make([]interface{}, 0)\n    for i := 1; i <=\
    \ n; i++ {\n        if i%2 == 0 {\n            if isPalindrome(i) {\n        \
    \        ret = append(ret, i)\n            }\n        } else {\n            if\
    \ !isPalindrome(i) {\n                ret = append(ret, i)\n            }\n  \
    \      }\n    }\n    return ret\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpznkt3036_test.go:27:16: undefined: isPalindrome

    /tmp/tmpznkt3036_test.go:31:17: undefined: isPalindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074246
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    result := make([]interface{}, 0, 2)\n    for i :=\
    \ 1; i <= n; i++ {\n        if isPalindrome(i) {\n            result = append(result,\
    \ i)\n        }\n    }\n    return result\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0kxcepb5_test.go:26:12: undefined: isPalindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074060
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0, n+1)\n \
    \   for i := 1; i <= n; i++ {\n        for j := i; j < n; j++ {\n            oddPalindrome\
    \ := fmt.Sprintf(\"%d\", j)\n            evenPalindromes = append(evenPalindromes,\
    \ oddPalindrome)\n        }\n    }\n    return evenPalindromes\n}\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Palindrome (0.00s)\n    --- FAIL: TestEven_Odd_Palindrome/test_num__0\
    \ (0.00s)\n        tmpzt_2se8l_test.go:53: expected '[%!s(int=8) %!s(int=13)]',\
    \ got '[1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27\
    \ 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53\
    \ 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79\
    \ 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103\
    \ 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122\
    \ 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29\
    \ 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55\
    \ 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81\
    \ 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105\
    \ 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 3 4 5 6\
    \ 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33\
    \ 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59\
    \ 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85\
    \ 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108\
    \ 109 110 111 112 113 114 115 116 117 118 119 120 121 122 4 5 6 7 8 9 10 11 12\
    \ 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38\
    \ 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64\
    \ 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90\
    \ 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112\
    \ 113 114 115 116 117 118 119 120 121 122 5 6 7 8 9 10 11 12 13 14 15 16 17 18\
    \ 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44\
    \ 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70\
    \ 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96\
    \ 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116\
    \ 117 118 119 120 1"
  timestamp: 1660074246
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    // initialize result\n    result := []interface{}{}\n\
    \    \n    // loop from 1 to n\n    for i := 1; i <= n; i++ {\n        // initialize\
    \ a slice to hold odd odd number\n        odd := make([]int, 0, n)\n        \n\
    \        // loop from 0 to i \n        for j := 0; j < i; j++ {\n            //\
    \ if j % 2 == 0, push the odd number into odd\n            if j%2 == 0 {\n   \
    \             odd = append(odd, j)\n            }\n        }\n        \n     \
    \   // initialize a slice to hold even even number\n        even := make([]int,\
    \ 0, n)\n        \n        // loop from 0 to i \n        for j := 0; j < i; j++\
    \ {\n            // if j % 2 == 1, push the even number into even\n          \
    \  if j%2 == 1 {\n                even = append(even, j)\n            }\n    \
    \    }\n        \n        // if even != {}, push even into result\n        if\
    \ len(even) > 0 {\n            result = append(result, even)\n        }\n    \
    \    \n        // if odd != {}, push odd into result\n        if len(odd) > 0\
    \ {\n            result = append(result, odd)\n        }\n    }\n    \n    return\
    \ result\n}\n</code>\nOutput:\n<code>\n$ go run main.go\n$ ./main.out\n[ []interface\
    \ {}\n  []interface {}\n  []interface {}\n  []interface {}\n  []interface {}\n\
    \  []interface {}\n  []interface {}\n  []interface {}\n  []interface {}\n  []interface\
    \ {}\n  []interface {}\n  []interface {}\n  []interface {}\n  []interface {}\n\
    \  []interface {}\n  []interface {}\n  []interface {}\n  []interface {}\n  []interface\
    \ {}\n  []interface {}\n  []interface {}\n  []interface {}\n  []interface {}\n\
    \  []interface {}\n  []interface {}\n  []interface {}\n  []interface {}\n  []interface\
    \ {}\n  []interface {}\n  []interface {}\n  []interface {}\n  []interface {}\n\
    \  []interface {}\n  []interface {}\n  []interface {}\n  []interface {}\n  []interface\
    \ {}\n  []interface {}\n  []interface {}\n  []interface {}\n  []interface {}\n\
    \  []interface {}\n  []interface {}\n  []interface {}\n  []interface {}\n  []interface\
    \ {}\n  []interface {}\n  []interface {}\n  []interface {}\n  []interface {}\n\
    \  []interface {}\n  []interface {}\n  []interface {}\n  []\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvig2onle_test.go:64:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074245
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    result := make([]interface{}, 0, 2)\n    palindromes\
    \ := make(map[string]int)\n    min := n\n    max := 0\n    for min < 1000000000\
    \ && max < 1000000000 {\n        mid := min + max/2 // guarantee even\n      \
    \  if isPalindrome(mid) {\n            result += mid\n            palindromes[fmt.Sprintf(\"\
    %+v\", mid)] = 1\n        }\n        if min < mid {\n            min = mid\n \
    \       }\n        if max > mid {\n            max = mid\n        }\n    }\n \
    \   return result\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0aobyjvh_test.go:30:12: undefined: isPalindrome

    /tmp/tmp0aobyjvh_test.go:31:13: invalid operation: result += mid (mismatched types
    []interface{} and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074246
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    // write your code here\n    evenPalindromes := make([]interface{},\
    \ n)\n    oddPalindromes := make([]interface{}, n)\n    // Initialize first even\
    \ palindromes list with 1 to n\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i)\
    \ {\n            evenPalindromes = append(evenPalindromes, i)\n        }\n   \
    \ }\n    // Initialize first odd palindromes list with 2 to n\n    for i := 2;\
    \ i <= n; i++ {\n        if isPalindrome(i) {\n            oddPalindromes = append(oddPalindromes,\
    \ i)\n        }\n    }\n    // Merge first even palindromes and first odd palindromes\
    \ to get the final palindrome list\n    palindromes := mergePalindromes(evenPalindromes,\
    \ oddPalindromes)\n    // Filter the palindrome list to retain only palindromes\
    \ that are integers\n    palindromes = filterPalindromes(palindromes)\n    return\
    \ palindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzpd7fk93_test.go:29:12: undefined: isPalindrome

    /tmp/tmpzpd7fk93_test.go:35:12: undefined: isPalindrome

    /tmp/tmpzpd7fk93_test.go:40:20: undefined: mergePalindromes

    /tmp/tmpzpd7fk93_test.go:42:19: undefined: filterPalindromes

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074246
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    var result []interface{}\n    if n < 1 {\n       \
    \ return []interface{}{}\n    }\n    for i := 1; i <= n; i++ {\n        odd, even\
    \ := is_odd_even(i)\n        if even {\n            result = append(result, i)\n\
    \        }\n        if !odd {\n            result = append(result, i)\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr3b57a8p_test.go:29:22: undefined: is_odd_even

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074246
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    result := []interface{}{}\n    for i := 0; i < n;\
    \ i++ {\n        n := i\n        k := n / 2\n        even := true\n        while\
    \ (n%2 == 0 && k%2 == 0) {\n            n /= 2\n            k /= 2\n         \
    \   even = false\n        }\n        if n%2 != 0 {\n            if even == false\
    \ {\n                even = true\n            } else {\n                even =\
    \ false\n            }\n        }\n        odd := true\n        while (n%2 !=\
    \ 0 && k%2 == 0) {\n            n /= 2\n            k /= 2\n            odd =\
    \ false\n        }\n        if n%2 != 0 {\n            if odd == false {\n   \
    \             odd = true\n            } else {\n                odd = false\n\
    \            }\n        }\n        if even && odd && n%2 == 0 {\n            result\
    \ = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpimpk8zvm_test.go:29:38: expected '';'', found ''{''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074246
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    palindromes := make([]interface{}, 0)\n\n    for i\
    \ := 1; i <= n; i++ {\n        if isPalindrome(i) {\n            palindromes =\
    \ append(palindromes, i)\n        }\n    }\n\n    return palindromes\n}\n\nfunc\
    \ TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpe31a46b7_test.go:27:12: undefined: isPalindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074247
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    var even, odd []interface{}\n    for i := 1; i <=\
    \ n; i++ {\n        if isEvenPalindrome(i) {\n            even = append(even,\
    \ i)\n        } else {\n            odd = append(odd, i)\n        }\n    }\n \
    \   return even\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzh9ib8kq_test.go:26:12: undefined: isEvenPalindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074247
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    result := make([]interface{}, n)\n    even_palindromes\
    \ := make([]int, n)\n    odd_palindromes := make([]int, n)\n    for i := 0; i\
    \ < n; i++ {\n        if i % 2 == 0 {\n            even_palindromes = append(even_palindromes,\
    \ i)\n        } else {\n            odd_palindromes = append(odd_palindromes,\
    \ i)\n        }\n    }\n    odd_palindromes = append(odd_palindromes, 0)\n\n \
    \   for _, odd_palindrome := range odd_palindromes {\n        for _, even_palindrome\
    \ := range even_palindromes {\n            temp_odd := odd_palindrome\n      \
    \      temp_even := even_palindrome\n            result_index := 0\n         \
    \   result_odd := []int{}\n            result_even := []int{}\n\n            for\
    \ temp_odd > 0 {\n                temp_odd /= 2\n                temp_even *=\
    \ 2\n                result_odd = append(result_odd, temp_odd)\n            }\n\
    \            for temp_even > 0 {\n                temp_even /= 2\n           \
    \     temp_odd *= 2\n                result_even = append(result_even, temp_even)\n\
    \            }\n            if odd_palindrome == temp_odd {\n                result[result_index]\
    \ = result_even\n                result_index++\n            }\n            if\
    \ even_palindrome == temp_even {\n                result[result_index] = result_odd\n\
    \                result_index++\n            }\n        }\n    }\n    return result\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Palindrome (0.01s)\npanic: runtime error: index\
    \ out of range [1] with length 1 [recovered]\n\tpanic: runtime error: index out\
    \ of range [1] with length 1\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x5136a0,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5136a0, 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.even_odd_palindrome(0x1)\n\t/tmp/tmpy4_e71yn_test.go:59\
    \ +0x605\ncommand-line-arguments_test.TestEven_Odd_Palindrome(0x0?)\n\t/tmp/tmpy4_e71yn_test.go:81\
    \ +0x16b\ntesting.tRunner(0xc000103860, 0x528fc8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.016s\nFAIL\n"
  timestamp: 1660074247
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    even := []interface{}{}\n    odd := []interface{}{}\n\
    \    for i := 1; i <= n; i++ {\n        even := append(even, i)\n        for j\
    \ := i; j > 0; j-- {\n            if j%2 == 0 {\n                odd := append(odd,\
    \ j)\n            }\n            if j%2 != 0 {\n                even := append(even,\
    \ j)\n            }\n        }\n    }\n    return even\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8g6fx1wm_test.go:30:17: odd declared but not used

    /tmp/tmp8g6fx1wm_test.go:33:17: even declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074247
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    ret := make([]interface{}, 0, 2)\n    for i := 1;\
    \ i <= n; i++ {\n        if isPalindrome(i) {\n            ret = append(ret, i)\n\
    \        }\n    }\n    return ret\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpucv5gys5_test.go:26:12: undefined: isPalindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074247
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    even_odd_palindromes := make([]interface{}, (n+1)/2)\n\
    \    index := 0\n    for i := 1; i <= n; i += 2 {\n        odd_even_is_palindrome\
    \ := func(p int) bool {\n            return p == fmt.Sprintf(\"%d\", i)\n    \
    \    }\n        even_is_palindrome := func(p int) bool {\n            return p\
    \ == fmt.Sprintf(\"%d\", i)\n        }\n        for j := 0; j < i/2; j++ {\n \
    \           if odd_even_is_palindrome(i-j) && even_is_palindrome(i+j) {\n    \
    \            even_odd_palindromes[index] = i\n                index++\n      \
    \          break\n            }\n        }\n    }\n    return even_odd_palindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdhw4c2lf_test.go:28:25: invalid operation: p == fmt.Sprintf("%d", i) (mismatched
    types int and string)

    /tmp/tmpdhw4c2lf_test.go:31:25: invalid operation: p == fmt.Sprintf("%d", i) (mismatched
    types int and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074247
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    palindromes := make([]interface{}, 0, n)\n    for\
    \ p := 1; p < n; p++ {\n        for i := p; i <= n; i++ {\n            if n%i\
    \ == 0 {\n                if palindromes[len(palindromes)-1] == nil {\n      \
    \              palindromes = append(palindromes, i)\n                } else if\
    \ palindromes[len(palindromes)-1].(float64) == i {\n                    palindromes\
    \ = append(palindromes, nil)\n                } else {\n                    n1\
    \ := palindromes[len(palindromes)-1].(int)\n                    n2 := i.(int)\n\
    \                    palindromes = append(palindromes, interface{}(n1, n2))\n\
    \                }\n                break\n            }\n        }\n    }\n \
    \   return palindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnk22wjpl_test.go:30:72: invalid operation: palindromes[len(palindromes)
    - 1].(float64) == i (mismatched types float64 and int)

    /tmp/tmpnk22wjpl_test.go:34:27: invalid operation: i (variable of type int) is
    not an interface

    /tmp/tmpnk22wjpl_test.go:35:71: too many arguments in conversion to interface{}

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074247
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    arr := []interface{}{}\n    // Write your code here\n\
    \    var even_palindromes []int\n    var odd_palindromes []int\n    for i := 0;\
    \ i < n; i++ {\n        if isPalindrome(strconv.Itoa(i)) {\n            if isEvenPalindrome(strconv.Itoa(i))\
    \ {\n                even_palindromes = append(even_palindromes, i)\n        \
    \    } else {\n                odd_palindromes = append(odd_palindromes, i)\n\
    \            }\n        }\n    }\n\n    even_palindromes.sort()\n    odd_palindromes.sort()\n\
    \n    if len(even_palindromes) > 0 {\n        arr = append(arr, even_palindromes)\n\
    \    }\n    if len(odd_palindromes) > 0 {\n        arr = append(arr, odd_palindromes)\n\
    \    }\n\n    return arr\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n\
    \  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpemrdmpjh_test.go:29:12: undefined: isPalindrome

    /tmp/tmpemrdmpjh_test.go:29:25: undefined: strconv

    /tmp/tmpemrdmpjh_test.go:30:16: undefined: isEvenPalindrome

    /tmp/tmpemrdmpjh_test.go:30:33: undefined: strconv

    /tmp/tmpemrdmpjh_test.go:38:22: even_palindromes.sort undefined (type []int has
    no field or method sort)

    /tmp/tmpemrdmpjh_test.go:39:21: odd_palindromes.sort undefined (type []int has
    no field or method sort)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074247
- exit_code: null
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    even_odd_palindromes := make([]interface{}, 0)\n\n\
    \    if n <= 0 {\n        return even_odd_palindromes\n    }\n    \n    count\
    \ := 0\n    \n    i := 0\n    j := n - 1\n    \n    for i <= j {\n        if i+1\
    \ == j {\n            continue\n        }\n        \n        if n%2 == 0 {\n \
    \           if i < j {\n                even_odd_palindromes = append(even_odd_palindromes,\
    \ i)\n            }\n            \n            even_odd_palindromes = append(even_odd_palindromes,\
    \ j)\n            \n            count++\n        }\n        \n        even_odd_palindromes\
    \ = append(even_odd_palindromes, j)\n        \n        count++\n        \n   \
    \     i = i + 1\n        j = j - 1\n    }\n    \n    if n%2 == 0 {\n        even_odd_palindromes\
    \ = append(even_odd_palindromes, count)\n    }\n    \n    return even_odd_palindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074261
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    if n < 1 {\n        return nil\n    }\n    if n ==\
    \ 1 {\n        return []int{1}\n    }\n    var even = []int{}\n    var odd = []int{}\n\
    \    for i := 0; i < n; i++ {\n        if isPalindrome(i) {\n            even\
    \ = append(even, i)\n        } else {\n            odd = append(odd, i)\n    \
    \    }\n    }\n    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpw71a294h_test.go:28:16:\
    \ cannot use []int{\u2026} (value of type []int) as type []interface{} in return\
    \ statement\n/tmp/tmpw71a294h_test.go:33:12: undefined: isPalindrome\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074247
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    if n < 1 || n > 10^3 {\n        return []interface{}{}\n\
    \    }\n\n    list := make([]interface{}, 0, n*2)\n    for i := 1; i <= n; i++\
    \ {\n        list += isPalindrome(i)\n    }\n    return list\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnqrvzjd6_test.go:30:17: undefined: isPalindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074247
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    result := make([]interface{}, 0, 2)\n    even_palindromes\
    \ := make(map[int]bool)\n    odd_palindromes := make(map[int]bool)\n\n    // count\
    \ number of even palindromes and odd palindromes\n    i := 1\n    for i <= n {\n\
    \        even_palindromes[i] = true\n        odd_palindromes[i] = true\n     \
    \   if n == i {\n            return result\n        }\n        // remove odd palindromes\
    \ from odd palindromes map\n        for j := i; j > 0; j-- {\n            odd_palindromes[j]\
    \ = false\n        }\n        // add even palindromes to even palindromes map\n\
    \        for j := i; j < n; j++ {\n            even_palindromes[j] = false\n \
    \       }\n        i++\n    }\n\n    // add even palindromes to result\n    for\
    \ i := 1; i <= n; i++ {\n        if even_palindromes[i] {\n            result\
    \ = append(result, i)\n        }\n    }\n\n    // add odd palindromes to result\n\
    \    for i := 1; i <= n; i++ {\n        if odd_palindromes[i] {\n            result\
    \ = append(result, i)\n        }\n    }\n\n    return result\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Palindrome (0.00s)\n    --- FAIL: TestEven_Odd_Palindrome/test_num__0\
    \ (0.00s)\n        tmpgofwpg55_test.go:84: expected '[%!s(int=8) %!s(int=13)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__1 (0.00s)\n      \
    \  tmpgofwpg55_test.go:84: expected '[%!s(int=4) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestEven_Odd_Palindrome/test_num__2 (0.00s)\n        tmpgofwpg55_test.go:84:\
    \ expected '[%!s(int=1) %!s(int=2)]', got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__3\
    \ (0.00s)\n        tmpgofwpg55_test.go:84: expected '[%!s(int=6) %!s(int=8)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__4 (0.00s)\n      \
    \  tmpgofwpg55_test.go:84: expected '[%!s(int=5) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestEven_Odd_Palindrome/test_num__5 (0.00s)\n        tmpgofwpg55_test.go:84:\
    \ expected '[%!s(int=4) %!s(int=6)]', got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__6\
    \ (0.00s)\n        tmpgofwpg55_test.go:84: expected '[%!s(int=4) %!s(int=5)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__7 (0.00s)\n      \
    \  tmpgofwpg55_test.go:84: expected '[%!s(int=0) %!s(int=1)]', got '[]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074248
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    // Your code here\n    ret := make([]interface{},\
    \ 0)\n    for i := 0; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n   \
    \         if strings.Compare(strings.ToLower(fmt.Sprintf(\"%v\", i)), strings.ToLower(fmt.Sprintf(\"\
    %v\", j))) == 1 {\n                ret = append(ret, i)\n                ret =\
    \ append(ret, j)\n            }\n        }\n    }\n    return ret\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy8z9ecbs_test.go:28:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074248
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    var evenPalindromes []int\n    var oddPalindromes\
    \ []int\n    for i := 1; i <= n; i++ {\n        // Even number palindrome\n  \
    \      s := make([]int, i)\n        for i := 0; i < i/2; i++ {\n            s[i]\
    \ = s[i] - 1\n        }\n        if s == s[len(s)-1] {\n            evenPalindromes\
    \ = append(evenPalindromes, i)\n        }\n        // Odd number palindrome\n\
    \        s := make([]int, i)\n        for i := len(s) - 1; i >= 0; i-- {\n   \
    \         s[i] = s[i+1] + 1\n        }\n        if s == s[len(s)-1] {\n      \
    \      oddPalindromes = append(oddPalindromes, i)\n        }\n    }\n    evenPalindromes\
    \ = append(evenPalindromes, evenPalindromes...)\n    oddPalindromes = append(oddPalindromes,\
    \ oddPalindromes...)\n    return evenPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp557rf4i2_test.go:32:17: invalid operation: s == s[len(s) - 1] (mismatched
    types []int and int)

    /tmp/tmp557rf4i2_test.go:36:11: no new variables on left side of :=

    /tmp/tmp557rf4i2_test.go:40:17: invalid operation: s == s[len(s) - 1] (mismatched
    types []int and int)

    /tmp/tmp557rf4i2_test.go:46:12: cannot use evenPalindromes (variable of type []int)
    as type []interface{} in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074248
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    ans := make([]interface{}, 2)\n    even := 0\n   \
    \ odd := 0\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i) {\n    \
    \        even++\n        } else {\n            odd++\n        }\n        if even\
    \ < odd {\n            ans[0] = i\n            even++\n        } else {\n    \
    \        ans[1] = i\n            odd++\n        }\n    }\n    return ans\n}\n\n\
    func TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplwtify1r_test.go:28:12: undefined: isPalindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074248
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    if n < 1 || n > 10^3 {\n        panic(\"The parameter\
    \ n should be in the range\")\n    }\n\n    evenPalindrome := make([]interface{},\
    \ 0)\n    oddPalindrome := make([]interface{}, 0)\n\n    // First, find out whether\
    \ n equals 1 or not. If n equals 1, then there is no\n    // need to find the\
    \ palindromes.\n    if n == 1 {\n        return evenPalindrome\n    }\n\n    //\
    \ Next, find out the even integer palindromes.\n    for i := 1; i <= n; i++ {\n\
    \        if isPalindrome(i) {\n            evenPalindrome = append(evenPalindrome,\
    \ i)\n        }\n    }\n\n    // Next, find out the odd integer palindromes.\n\
    \    for i := 1; i <= n; i++ {\n        if isPalindrome(i) {\n            oddPalindrome\
    \ = append(oddPalindrome, i)\n        }\n    }\n\n    return evenPalindrome\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpudn0qr_l_test.go:39:12: undefined: isPalindrome

    /tmp/tmpudn0qr_l_test.go:46:12: undefined: isPalindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074248
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    // TODO: Write your code here\n    return nil\n}\n\
    \nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Palindrome (0.00s)\n    --- FAIL: TestEven_Odd_Palindrome/test_num__0\
    \ (0.00s)\n        tmplmt1jk3t_test.go:48: expected '[%!s(int=8) %!s(int=13)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__1 (0.00s)\n      \
    \  tmplmt1jk3t_test.go:48: expected '[%!s(int=4) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestEven_Odd_Palindrome/test_num__2 (0.00s)\n        tmplmt1jk3t_test.go:48:\
    \ expected '[%!s(int=1) %!s(int=2)]', got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__3\
    \ (0.00s)\n        tmplmt1jk3t_test.go:48: expected '[%!s(int=6) %!s(int=8)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__4 (0.00s)\n      \
    \  tmplmt1jk3t_test.go:48: expected '[%!s(int=5) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestEven_Odd_Palindrome/test_num__5 (0.00s)\n        tmplmt1jk3t_test.go:48:\
    \ expected '[%!s(int=4) %!s(int=6)]', got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__6\
    \ (0.00s)\n        tmplmt1jk3t_test.go:48: expected '[%!s(int=4) %!s(int=5)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__7 (0.00s)\n      \
    \  tmplmt1jk3t_test.go:48: expected '[%!s(int=0) %!s(int=1)]', got '[]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074017
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    ret := make([]interface{}, n+1)\n    for i := 0; i\
    \ < n; i++ {\n        var oddNum int\n        for j := 0; j < i; j++ {\n     \
    \       oddNum *= 10\n            oddNum += int(i%10) + int(j%10)\n          \
    \  oddNum %= 100\n        }\n        if oddNum%2 == 0 {\n            ret[i] =\
    \ evenPalindromes(oddNum)\n        } else {\n            ret[i] = oddPalindromes(oddNum)\n\
    \        }\n    }\n    return ret\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplcoc2hya_test.go:33:22: undefined: evenPalindromes

    /tmp/tmplcoc2hya_test.go:35:22: undefined: oddPalindromes

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074248
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    even := make([]int, 0)\n    odd := make([]int, 0)\n\
    \    s := make([]int, 0)\n    for i := 0; i < n; i++ {\n        if i%2 == 0 {\n\
    \            even = append(even, i)\n        } else {\n            odd = append(odd,\
    \ i)\n        }\n    }\n    for i, j := range even {\n        for _, k := range\
    \ odd {\n            if j%2 == 0 {\n                if k%2 == 0 {\n          \
    \          s = append(s, j)\n                }\n            } else {\n       \
    \         if k%2 != 0 {\n                    s = append(s, j)\n              \
    \  }\n            }\n        }\n    }\n    return s\n}\n</code>\n<code>\npackage\
    \ even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc\
    \ TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp7t3c3wl3_test.go:49:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074247
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalList, _ := reversePalindromes(evenPalindromes(n))\n\
    \    oddPalList, _ := reversePalindromes(oddPalindromes(n))\n\n    return append(evenPalList,\
    \ oddPalList...)\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyt3x832v_test.go:24:23: undefined: reversePalindromes

    /tmp/tmpyt3x832v_test.go:24:42: undefined: evenPalindromes

    /tmp/tmpyt3x832v_test.go:25:22: undefined: reversePalindromes

    /tmp/tmpyt3x832v_test.go:25:41: undefined: oddPalindromes

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074248
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    if n < 1 {\n        return nil\n    }\n\n    odds\
    \ := make([]interface{}, 0, n)\n    even := make([]interface{}, 0, n)\n\n    for\
    \ i := 0; i < n; i++ {\n        j := len(odd)\n        while j > 0 {\n       \
    \     odd.Pop()\n            even.Push(odd.Pop())\n            j--\n        }\n\
    \n        even.Insert(i)\n        odd.Insert(i)\n    }\n\n    return even\n}\n\
    \nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpn50kxox2_test.go:33:15: expected '';'', found j

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074247
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    palindromes := make([]interface{}, (n+2)/3)\n    palindromes[0]\
    \ = 1\n    palindromes[1] = 2\n    odd, even, k := 0, 0, 0\n    for k := 0; k\
    \ < len(palindromes); k++ {\n        for i := 0; i < len(palindromes[k]); i++\
    \ {\n            p := palindromes[k][i]\n            if p%2 == 0 {\n         \
    \       even++\n            } else {\n                odd++\n            }\n \
    \           if even > n {\n                break\n            }\n        }\n \
    \       if even > n {\n            break\n        }\n        for i := 0; i < len(palindromes[k]);\
    \ i++ {\n            p := palindromes[k][i]\n            if p%2 == 0 {\n     \
    \           palindromes[k][i] = palindromes[k][i]/2\n            } else {\n  \
    \              palindromes[k][i] = 3*palindromes[k][i]\n            }\n      \
    \  }\n    }\n    for i := 0; i < len(palindromes)-1; i++ {\n        if palindromes[i]%2\
    \ == 0 {\n            palindromes = append(palindromes[:i], palindromes[i+1:]...)\n\
    \            break\n        }\n    }\n    return palindromes\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxnhuci4a_test.go:27:16: k declared but not used

    /tmp/tmpxnhuci4a_test.go:29:29: invalid argument: palindromes[k] (variable of
    type interface{}) for len

    /tmp/tmpxnhuci4a_test.go:30:32: invalid operation: cannot index palindromes[k]
    (variable of type interface{})

    /tmp/tmpxnhuci4a_test.go:43:29: invalid argument: palindromes[k] (variable of
    type interface{}) for len

    /tmp/tmpxnhuci4a_test.go:44:32: invalid operation: cannot index palindromes[k]
    (variable of type interface{})

    /tmp/tmpxnhuci4a_test.go:46:51: invalid operation: cannot index palindromes[k]
    (variable of type interface{})

    /tmp/tmpxnhuci4a_test.go:48:53: invalid operation: cannot index palindromes[k]
    (variable of type interface{})

    /tmp/tmpxnhuci4a_test.go:53:12: invalid operation: palindromes[i] % 2 (mismatched
    types interface{} and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074248
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]int, 0)\n    oddPalindromes\
    \ := make([]int, 0)\n    for i := 1; i <= n; i++ {\n        if i%2 == 0 {\n  \
    \          evenPalindromes = append(evenPalindromes, i)\n        } else {\n  \
    \          oddPalindromes = append(oddPalindromes, i)\n        }\n    }\n    return\
    \ evenPalindromes + oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpafs4fo84_test.go:33:12: invalid operation: operator + not defined on evenPalindromes
    (variable of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074248
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    result := []interface{}{}\n    odd_count := 0\n  \
    \  even_count := 0\n    for i := 1; i <= n; i++ {\n        oddPalindrome := []int{}\n\
    \        evenPalindrome := []int{}\n        for j := i; j >= 1; j-- {\n      \
    \      oddPalindrome = append(oddPalindrome, j)\n            if i == reverse(j).(uint64)\
    \ {\n                even_count++\n                evenPalindrome = append(evenPalindrome,\
    \ j)\n            }\n        }\n        if even_count == 0 && evenPalindrome[0]\
    \ != i {\n            even_count = 1\n            evenPalindrome = append(evenPalindrome,\
    \ i)\n        }\n        if evenPalindrome[0] == i {\n            even_count++\n\
    \        }\n        if evenPalindrome[0] != i {\n            evenPalindrome =\
    \ append(evenPalindrome, i)\n        }\n        result = append(result, oddPalindrome)\n\
    \        result = append(result, evenPalindrome)\n    }\n    return result\n}\n\
    \nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbrliunap_test.go:25:5: odd_count declared but not used

    /tmp/tmpbrliunap_test.go:32:21: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074248
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    odd_palindrome := make([]int, 0, n)\n    for i :=\
    \ 0; i < n; i++ {\n        if n%2 == 0 {\n            if n == i {\n          \
    \      odd_palindrome = append(odd_palindrome, i)\n            } else {\n    \
    \            odd_palindrome = append(odd_palindrome, i)\n                odd_palindrome\
    \ = append(odd_palindrome, i+1)\n            }\n        }\n    }\n    return odd_palindrome\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo9fnl9a7_test.go:35:12: cannot use odd_palindrome (variable of type []int)
    as type []interface{} in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074248
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    var res []interface{}\n    res = []interface{}{n,\
    \ n}\n    return res\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Palindrome (0.00s)\n    --- FAIL: TestEven_Odd_Palindrome/test_num__0\
    \ (0.00s)\n        tmprc0qqb_1_test.go:49: expected '[%!s(int=8) %!s(int=13)]',\
    \ got '[%!s(int=123) %!s(int=123)]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__1\
    \ (0.00s)\n        tmprc0qqb_1_test.go:49: expected '[%!s(int=4) %!s(int=6)]',\
    \ got '[%!s(int=12) %!s(int=12)]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__2\
    \ (0.00s)\n        tmprc0qqb_1_test.go:49: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=3) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__3\
    \ (0.00s)\n        tmprc0qqb_1_test.go:49: expected '[%!s(int=6) %!s(int=8)]',\
    \ got '[%!s(int=63) %!s(int=63)]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__4\
    \ (0.00s)\n        tmprc0qqb_1_test.go:49: expected '[%!s(int=5) %!s(int=6)]',\
    \ got '[%!s(int=25) %!s(int=25)]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__5\
    \ (0.00s)\n        tmprc0qqb_1_test.go:49: expected '[%!s(int=4) %!s(int=6)]',\
    \ got '[%!s(int=19) %!s(int=19)]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__6\
    \ (0.00s)\n        tmprc0qqb_1_test.go:49: expected '[%!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=9) %!s(int=9)]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__7\
    \ (0.00s)\n        tmprc0qqb_1_test.go:49: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=1) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074249
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    // Your code here\n    evenPalindromes := []interface{}{}\n\
    \    oddPalindromes := []interface{}{}\n    for i := 1; i <= n; i++ {\n      \
    \  isPalindrome := isPalindrome(i)\n        if isPalindrome {\n            evenPalindromes\
    \ = append(evenPalindromes, i)\n        } else {\n            oddPalindromes =\
    \ append(oddPalindromes, i)\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp8g1jw1xt_test.go:28:25:\
    \ undefined: isPalindrome\n/tmp/tmp8g1jw1xt_test.go:35:29: too many return values\n\
    \thave ([]interface{}, []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074248
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    var evenPalindromes []interface{}\n    var oddPalindromes\
    \ []interface{}\n    if n <= 1 {\n        return []\n    }\n    for i := range\
    \ range(1, n) {\n        if isPalindrome(i) {\n            if i % 2 == 0 {\n \
    \               evenPalindromes = append(evenPalindromes, i)\n            } else\
    \ {\n                oddPalindromes = append(oddPalindromes, i)\n            }\n\
    \        }\n    }\n    return evenPalindromes + oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp68uobvcn_test.go:27:18: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074248
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    var list1 = make([]interface{}, 0, n)\n    for i:=0;\
    \ i<n; i++ {\n        for j:=0; j<n; j++ {\n            var list []interface{}\n\
    \            if j-i+1 < 0 {\n                continue\n            }\n       \
    \     if j-i+1 == 0 {\n                list = append(list, i)\n            } else\
    \ if j-i+1 == 1 {\n                list = append(list, i+1)\n            } else\
    \ if j-i+1 == 2 {\n                list = append(list, i-1, i+1)\n           \
    \ }\n            if j < n-j {\n                list = append(list, j)\n      \
    \      }\n            list1 = append(list1, list)\n        }\n    }\n    return\
    \ list1\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Palindrome (0.01s)\n    --- FAIL: TestEven_Odd_Palindrome/test_num__0\
    \ (0.00s)\n        tmpaek7lpyx_test.go:67: expected '[%!s(int=8) %!s(int=13)]',\
    \ got '[[%!s(int=1) %!s(int=0)] [%!s(int=-1) %!s(int=1) %!s(int=1)] [%!s(int=2)]\
    \ [%!s(int=3)] [%!s(int=4)] [%!s(int=5)] [%!s(int=6)] [%!s(int=7)] [%!s(int=8)]\
    \ [%!s(int=9)] [%!s(int=10)] [%!s(int=11)] [%!s(int=12)] [%!s(int=13)] [%!s(int=14)]\
    \ [%!s(int=15)] [%!s(int=16)] [%!s(int=17)] [%!s(int=18)] [%!s(int=19)] [%!s(int=20)]\
    \ [%!s(int=21)] [%!s(int=22)] [%!s(int=23)] [%!s(int=24)] [%!s(int=25)] [%!s(int=26)]\
    \ [%!s(int=27)] [%!s(int=28)] [%!s(int=29)] [%!s(int=30)] [%!s(int=31)] [%!s(int=32)]\
    \ [%!s(int=33)] [%!s(int=34)] [%!s(int=35)] [%!s(int=36)] [%!s(int=37)] [%!s(int=38)]\
    \ [%!s(int=39)] [%!s(int=40)] [%!s(int=41)] [%!s(int=42)] [%!s(int=43)] [%!s(int=44)]\
    \ [%!s(int=45)] [%!s(int=46)] [%!s(int=47)] [%!s(int=48)] [%!s(int=49)] [%!s(int=50)]\
    \ [%!s(int=51)] [%!s(int=52)] [%!s(int=53)] [%!s(int=54)] [%!s(int=55)] [%!s(int=56)]\
    \ [%!s(int=57)] [%!s(int=58)] [%!s(int=59)] [%!s(int=60)] [%!s(int=61)] [] []\
    \ [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] []\
    \ [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] []\
    \ [] [] [] [] [] [] [] [%!s(int=1) %!s(int=0)] [%!s(int=2) %!s(int=1)] [%!s(int=0)\
    \ %!s(int=2) %!s(int=2)] [%!s(int=3)] [%!s(int=4)] [%!s(int=5)] [%!s(int=6)] [%!s(int=7)]\
    \ [%!s(int=8)] [%!s(int=9)] [%!s(int=10)] [%!s(int=11)] [%!s(int=12)] [%!s(int=13)]\
    \ [%!s(int=14)] [%!s(int=15)] [%!s(int=16)] [%!s(int=17)] [%!s(int=18)] [%!s(int=19)]\
    \ [%!s(int=20)] [%!s(int=21)] [%!s(int=22)] [%!s(int=23)] [%!s(int=24)] [%!s(int=25)]\
    \ [%!s(int=26)] [%!s(int=27)] [%!s(int=28)] [%!s(int=29)] [%!s(int=30)] [%!s(int=31)]\
    \ [%!s(int=32)] [%!s(int=33)] [%!s(int=34)] [%!s(int=35)] [%!s(int=36)] [%!s(int=37)]\
    \ [%!s(int=38)] [%!s(int=39)] [%!s(int=40)] [%!s(int=41)] [%!s(int=42)] [%!s(int=43)]\
    \ [%!s(int=44)] [%!s(int=45)] [%!s(int=46)] [%!s(int=47)] [%!s(int=48)] [%!s(int=49)]\
    \ [%!s(int=50)] [%!s(int=51)] [%!s(int=52)] [%!s(int=53)] [%!s(int"
  timestamp: 1660074249
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    result := make([]interface{}, 0, n)\n    if n < 1\
    \ || n > 10^3 {\n        return nil\n    }\n    digitList := []int{0, 1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 10}\n    oddNum := digitList[1 : n]\n    evenNum := digitList[n:]\n\
    \    for _, n := range oddNum {\n        result := append(result, n)\n    }\n\
    \    for _, n := range evenNum {\n        result := append(result, n)\n    }\n\
    \    return result\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2papq6z5_test.go:32:9: result declared but not used

    /tmp/tmp2papq6z5_test.go:35:9: result declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074249
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPals := make([]interface{}, 0, n+1)\n    for i\
    \ := 0; i < n; i++ {\n        if isPalindrome(even_odd_palindrome_test.IntegerPalindromes(i)[0])\
    \ {\n            evenPals = append(evenPals, even_odd_palindrome_test.IntegerPalindromes(i)[0])\n\
    \        }\n    }\n    for i := n - 1; i >= 0; i-- {\n        if isPalindrome(even_odd_palindrome_test.IntegerPalindromes(i)[0])\
    \ {\n            evenPals = append(evenPals, even_odd_palindrome_test.IntegerPalindromes(i)[0])\n\
    \        }\n    }\n    return evenPals\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp07kkzhss_test.go:26:12: undefined: isPalindrome

    /tmp/tmp07kkzhss_test.go:26:25: undefined: even_odd_palindrome_test

    /tmp/tmp07kkzhss_test.go:27:41: undefined: even_odd_palindrome_test

    /tmp/tmp07kkzhss_test.go:31:12: undefined: isPalindrome

    /tmp/tmp07kkzhss_test.go:31:25: undefined: even_odd_palindrome_test

    /tmp/tmp07kkzhss_test.go:32:41: undefined: even_odd_palindrome_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074249
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    if n < 1 || n > 10^3 {\n        panic(\"n must be\
    \ in range [1, 10^3]\")\n    }\n\n    var palindromes []interface{}\n    var even,\
    \ odd int\n    var lastEven, lastOdd int\n\n    for i := 1; i <= n; i++ {\n  \
    \      if i%2 == 0 {\n            lastEven = even\n            lastOdd = odd\n\
    \            even = 0\n            odd = 0\n        } else {\n            lastEven\
    \ = odd\n            lastOdd = even\n            even = 0\n            odd = 0\n\
    \        }\n\n        if lastEven != 0 {\n            palindromes = append(palindromes,\
    \ lastEven)\n        }\n\n        if lastOdd != 0 {\n            palindromes =\
    \ append(palindromes, lastOdd)\n        }\n\n        if palindromes[len(palindromes)-1]\
    \ != i {\n            palindromes = append(palindromes, i)\n        }\n    }\n\
    \n    return palindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n\
    \  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Palindrome (0.00s)\npanic: n must be in range [1,\
    \ 10^3] [recovered]\n\tpanic: n must be in range [1, 10^3]\n\ngoroutine 18 [running]:\n\
    testing.tRunner.func1.2({0x4fde40, 0x549d00})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x4fde40, 0x549d00})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.even_odd_palindrome(0x0?)\n\t/tmp/tmpxsjy8m98_test.go:25\
    \ +0x165\ncommand-line-arguments_test.TestEven_Odd_Palindrome(0x0?)\n\t/tmp/tmpxsjy8m98_test.go:68\
    \ +0x46\ntesting.tRunner(0xc000103380, 0x528fe8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074249
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    // Your code here\n    var evenPalindromes, oddPalindromes\
    \ []interface{}\n    start := 1\n    end := n\n    for start <= end {\n      \
    \  odd_index := start - 1\n        even_index := end\n        var even bool\n\
    \        var odd bool\n        even = odd := false\n        for odd_index < len(oddPalindromes)\
    \ {\n            if odd_index == len(evenPalindromes) || oddPalindromes[odd_index]\
    \ != evenPalindromes[even_index] {\n                break\n            }\n   \
    \         odd = true\n            even = even\n            oddIndex++\n      \
    \      evenIndex--\n        }\n        if even && odd {\n            evenPalindromes\
    \ = append(evenPalindromes, start)\n        } else if !even && !odd {\n      \
    \      oddPalindromes = append(oddPalindromes, start)\n        }\n        start++\n\
    \        end--\n    }\n    return evenPalindromes + oddPalindromes\n}\n\nfunc\
    \ TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmptgrrutju_test.go:33:20: expected '';'', found '':=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074249
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evens := make([]int, 0)\n    odds := make([]int, 0)\n\
    \n    for p := n; p >= 1; p /= 2 {\n        if n%2 == 0 {\n            evens =\
    \ append(evens, p)\n        } else {\n            odds = append(odds, p)\n   \
    \     }\n    }\n    return append(evens, odds...)\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfn6f1czp_test.go:34:12: cannot use append(evens, odds...) (value of type
    []int) as type []interface{} in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074249
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    var result []interface{}\n\n    for i := 1; i <= n;\
    \ i++ {\n        fmt.Println(i)\n        fmt.Println(even_odd_palindrome(n-i).Len())\n\
    \        fmt.Println(even_odd_palindrome(n-i).Pop())\n        fmt.Println(even_odd_palindrome(n-i).Pop())\n\
    \n        evenPalindromes := even_odd_palindrome(n-i)\n        for _, p := range\
    \ evenPalindromes {\n            result = append(result, p)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0e67agv2_test.go:28:46: even_odd_palindrome(n - i).Len undefined (type
    []interface{} has no field or method Len)

    /tmp/tmp0e67agv2_test.go:29:46: even_odd_palindrome(n - i).Pop undefined (type
    []interface{} has no field or method Pop)

    /tmp/tmp0e67agv2_test.go:30:46: even_odd_palindrome(n - i).Pop undefined (type
    []interface{} has no field or method Pop)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074249
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    s := make([]interface{}, n)\n    odd := 1\n    even\
    \ := 0\n    for i := 0; i < n; i++ {\n        s[i] = even\n        even = even\
    \ * 10 + i%10\n        if even < n {\n            even = even * 10 + n%10\n  \
    \      }\n        if even > n {\n            even = even * 10 + n%10\n       \
    \ }\n        odd = odd * 10 + i%10\n        if odd > n {\n            odd = odd\
    \ * 10 + n%10\n        }\n        if odd == n {\n            break\n        }\n\
    \    }\n    return s\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Palindrome (0.00s)\n    --- FAIL: TestEven_Odd_Palindrome/test_num__0\
    \ (0.00s)\n        tmp9po8os1p_test.go:67: expected '[%!s(int=8) %!s(int=13)]',\
    \ got '[%!s(int=0) %!s(int=3) %!s(int=3133) %!s(int=313323) %!s(int=31332333)\
    \ %!s(int=3133233343) %!s(int=313323334353) %!s(int=31332333435363) %!s(int=3133233343536373)\
    \ %!s(int=313323334353637383) %!s(int=-5561154712055364839) %!s(int=-2713148994249935417)\
    \ %!s(int=-1477615414631329315) %!s(int=-187588873456518549) %!s(int=-312143271942303251)\
    \ %!s(int=1451377310759126905) %!s(int=-2436221513763722375) %!s(int=-3814478418148066429)\
    \ %!s(int=3997605109810756245) %!s(int=-6067858640534510969) %!s(int=1120159715931513597)\
    \ %!s(int=-5091672564769051543) %!s(int=7341577586962290961) %!s(int=-3712004252152968517)\
    \ %!s(int=-2265543741105819347) %!s(int=-5193445226067315265) %!s(int=-2835688542864081199)\
    \ %!s(int=-6867693180764845597) %!s(int=-4239787349231149835) %!s(int=2963787722047037513)\
    \ %!s(int=-6138073820200296243) %!s(int=-5064827587614420969) %!s(int=-8420668771284203255)\
    \ %!s(int=6483350262219048859) %!s(int=8543092346996242117) %!s(int=2249840868719719225)\
    \ %!s(int=3623157987457303161) %!s(int=-6619082728460716157) %!s(int=2174513807472242549)\
    \ %!s(int=-3909548137290364409) %!s(int=-3573188181135856871) %!s(int=-6830680713104206393)\
    \ %!s(int=-538540583167229495) %!s(int=-3585005029652497903) %!s(int=-8012365564768309563)\
    \ %!s(int=-8026561307320236769) %!s(int=-2227635256581815507) %!s(int=-1402596773666931245)\
    \ %!s(int=7314275222983288501) %!s(int=-6442240650053214457) %!s(int=-4326968328580942083)\
    \ %!s(int=-8421719162774521129) %!s(int=6378311113187261449) %!s(int=-7804931261108161637)\
    \ %!s(int=-5729875015014995795) %!s(int=-1138435216503479361) %!s(int=-3163057208090626351)\
    \ %!s(int=-2711071556000257565) %!s(int=599822835046523285) %!s(int=4642051283523673735)\
    \ %!s(int=-6528223051133271299) %!s(int=-7186262533492823337) %!s(int=796765525390179337)\
    \ %!s(int=5889576244179727259) %!s(int=-1338185940732925779) %!s(int=-4691385557325716545)\
    \ %!s(int=-796995388983286"
  timestamp: 1660074250
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    s := make([]interface{}, 0)\n    for i := 1; i <=\
    \ n; i++ {\n        fmt.Println(\"i: \", i)\n        fmt.Println(\"n: \", n)\n\
    \        if isPalindrome(even_odd_palindrome_test.odd_palindrome(i)) {\n     \
    \       s = append(s, i)\n        }\n        if isPalindrome(even_odd_palindrome_test.even_odd_palindrome(i))\
    \ {\n            s = append(s, i)\n        }\n    }\n    return s\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpck32xn6b_test.go:28:12: undefined: isPalindrome

    /tmp/tmpck32xn6b_test.go:28:25: undefined: even_odd_palindrome_test

    /tmp/tmpck32xn6b_test.go:31:12: undefined: isPalindrome

    /tmp/tmpck32xn6b_test.go:31:25: undefined: even_odd_palindrome_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074249
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    p := make([]interface{}, 0, n)\n    for i := 0; i\
    \ < n; i++ {\n        if isEvenPalindrome(i) {\n            p := append(p, i)\n\
    \        } else {\n            p := append(p, i+2)\n        }\n    }\n    return\
    \ p\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc8ctzypb_test.go:26:12: undefined: isEvenPalindrome

    /tmp/tmpc8ctzypb_test.go:27:13: p declared but not used

    /tmp/tmpc8ctzypb_test.go:29:13: p declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074249
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    rangeCount := n\n\n    for rangeCount > 0 {\n\
    \        // add even\n        if rangeCount % 2 == 0 {\n            evenPalindromes\
    \ = append(evenPalindromes, rangeCount/2)\n        }\n        // add odd\n   \
    \     if rangeCount % 2 == 1 {\n            oddPalindromes = append(oddPalindromes,\
    \ rangeCount/2)\n        }\n        rangeCount = rangeCount / 2\n    }\n\n   \
    \ return evenPalindromes + oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpikbpwbzq_test.go:40:12: invalid operation: operator + not defined on evenPalindromes
    (variable of type []interface{})

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074249
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0, 2*n)\n \
    \   oddPalindromes := make([]interface{}, 0, 2*n)\n    for i := 0; i < n; i++\
    \ {\n        oddPalindromes = append(oddPalindromes, i)\n    }\n    for i := 0;\
    \ i < n; i++ {\n        evenPalindromes = append(evenPalindromes, i)\n    }\n\
    \    for i := 1; i < n; i++ {\n        oddPalindromes = append(oddPalindromes,\
    \ i)\n    }\n    for i := 0; i < n; i++ {\n        evenPalindromes = append(evenPalindromes,\
    \ i)\n    }\n    for i := 0; i < n; i++ {\n        evenPalindromes = append(evenPalindromes,\
    \ i+n-1)\n    }\n    for i := 0; i < n; i++ {\n        evenPalindromes = append(evenPalindromes,\
    \ n-i)\n    }\n    for i := 0; i < n; i++ {\n        oddPalindromes = append(oddPalindromes,\
    \ i)\n    }\n    for i := 0; i < n; i++ {\n        evenPalindromes = append(evenPalindromes,\
    \ i)\n    }\n    return evenPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Palindrome (0.00s)\n    --- FAIL: TestEven_Odd_Palindrome/test_num__0\
    \ (0.00s)\n        tmpoe8up3if_test.go:73: expected '[%!s(int=8) %!s(int=13)]',\
    \ got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=10) %!s(int=11) %!s(int=12) %!s(int=13)\
    \ %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17) %!s(int=18) %!s(int=19) %!s(int=20)\
    \ %!s(int=21) %!s(int=22) %!s(int=23) %!s(int=24) %!s(int=25) %!s(int=26) %!s(int=27)\
    \ %!s(int=28) %!s(int=29) %!s(int=30) %!s(int=31) %!s(int=32) %!s(int=33) %!s(int=34)\
    \ %!s(int=35) %!s(int=36) %!s(int=37) %!s(int=38) %!s(int=39) %!s(int=40) %!s(int=41)\
    \ %!s(int=42) %!s(int=43) %!s(int=44) %!s(int=45) %!s(int=46) %!s(int=47) %!s(int=48)\
    \ %!s(int=49) %!s(int=50) %!s(int=51) %!s(int=52) %!s(int=53) %!s(int=54) %!s(int=55)\
    \ %!s(int=56) %!s(int=57) %!s(int=58) %!s(int=59) %!s(int=60) %!s(int=61) %!s(int=62)\
    \ %!s(int=63) %!s(int=64) %!s(int=65) %!s(int=66) %!s(int=67) %!s(int=68) %!s(int=69)\
    \ %!s(int=70) %!s(int=71) %!s(int=72) %!s(int=73) %!s(int=74) %!s(int=75) %!s(int=76)\
    \ %!s(int=77) %!s(int=78) %!s(int=79) %!s(int=80) %!s(int=81) %!s(int=82) %!s(int=83)\
    \ %!s(int=84) %!s(int=85) %!s(int=86) %!s(int=87) %!s(int=88) %!s(int=89) %!s(int=90)\
    \ %!s(int=91) %!s(int=92) %!s(int=93) %!s(int=94) %!s(int=95) %!s(int=96) %!s(int=97)\
    \ %!s(int=98) %!s(int=99) %!s(int=100) %!s(int=101) %!s(int=102) %!s(int=103)\
    \ %!s(int=104) %!s(int=105) %!s(int=106) %!s(int=107) %!s(int=108) %!s(int=109)\
    \ %!s(int=110) %!s(int=111) %!s(int=112) %!s(int=113) %!s(int=114) %!s(int=115)\
    \ %!s(int=116) %!s(int=117) %!s(int=118) %!s(int=119) %!s(int=120) %!s(int=121)\
    \ %!s(int=122) %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)\
    \ %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=10) %!s(int=11) %!s(int=12)\
    \ %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17) %!s(int=18) %!s(int=19)\
    \ %!s(int=20) %!s(int=21) %!s(int=22) %!s(int=23) %!s(int=24) %!s(int=25) %!s(int=26)\
    \ %!s(int=27) %!s(int=28) %!s(int=29) %!s(int=30) %!s(int=31) %!s(int=32"
  timestamp: 1660074250
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    even, odd, result := 0, 0, []interface{}{}\n    max\
    \ := 10*n\n    for i := 1; i <= max; i += 2 {\n        odd += (i&1)\n        even\
    \ += (i&2)\n    }\n    if even < n {\n        result = append(result, even)\n\
    \    }\n    if odd < n {\n        result = append(result, odd)\n    }\n    return\
    \ result\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Palindrome (0.00s)\n    --- FAIL: TestEven_Odd_Palindrome/test_num__0\
    \ (0.00s)\n        tmpbyfv2r1a_test.go:59: expected '[%!s(int=8) %!s(int=13)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__1 (0.00s)\n      \
    \  tmpbyfv2r1a_test.go:59: expected '[%!s(int=4) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestEven_Odd_Palindrome/test_num__2 (0.00s)\n        tmpbyfv2r1a_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=2)]', got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__3\
    \ (0.00s)\n        tmpbyfv2r1a_test.go:59: expected '[%!s(int=6) %!s(int=8)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__4 (0.00s)\n      \
    \  tmpbyfv2r1a_test.go:59: expected '[%!s(int=5) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestEven_Odd_Palindrome/test_num__5 (0.00s)\n        tmpbyfv2r1a_test.go:59:\
    \ expected '[%!s(int=4) %!s(int=6)]', got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__6\
    \ (0.00s)\n        tmpbyfv2r1a_test.go:59: expected '[%!s(int=4) %!s(int=5)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__7 (0.00s)\n      \
    \  tmpbyfv2r1a_test.go:59: expected '[%!s(int=0) %!s(int=1)]', got '[]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074250
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    // write your code here\n    evens := []interface{}{}\n\
    \    odds := []interface{}{}\n    for i := 1; i <= n; i++ {\n        fmt.Printf(\"\
    i=%v\\n\", i)\n        if i%2 == 0 && len(odds)%2 == 0 {\n            odds = append(odds,\
    \ i)\n        }\n        if i%2 == 1 && len(evens)%2 == 0 {\n            evens\
    \ = append(evens, i)\n        }\n    }\n    return evens + odds\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw6y4j7zm_test.go:36:12: invalid operation: operator + not defined on evens
    (variable of type []interface{})

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074250
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    if n <= 0 {\n        return nil\n    }\n    even :=\
    \ make([]interface{}, 0, n)\n    odd := make([]interface{}, 0, n)\n    for i :=\
    \ 0; i < n; i++ {\n        for j := i; j < n; j++ {\n            if ispalindrome(itostr(i+j))\
    \ == true {\n                even = append(even, itostr(i+j))\n            }\n\
    \        }\n        for j := n-1; j > i; j-- {\n            if ispalindrome(itostr(i+j))\
    \ == true {\n                odd = append(odd, itostr(i+j))\n            }\n \
    \       }\n    }\n    return even\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyuim7_jj_test.go:31:16: undefined: ispalindrome

    /tmp/tmpyuim7_jj_test.go:31:29: undefined: itostr

    /tmp/tmpyuim7_jj_test.go:32:37: undefined: itostr

    /tmp/tmpyuim7_jj_test.go:36:16: undefined: ispalindrome

    /tmp/tmpyuim7_jj_test.go:36:29: undefined: itostr

    /tmp/tmpyuim7_jj_test.go:37:35: undefined: itostr

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074250
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    palindrome := []interface{}{}\n    for i := 1; i <=\
    \ n; i++ {\n        even_palindrome := isPalindrome(i)\n        odd_palindrome\
    \ := !isPalindrome(i)\n        palindrome = append(palindrome, even_palindrome,\
    \ odd_palindrome)\n    }\n    return palindrome\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphxu48yg1_test.go:26:28: undefined: isPalindrome

    /tmp/tmphxu48yg1_test.go:27:28: undefined: isPalindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074250
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    // code here\n    result := make([]interface{}, 2*n)\n\
    \    for i := 0; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n        \
    \    even := (i + 1) % 2 == 0\n            odd := (j + 1) % 2 == 0\n         \
    \   if even && odd {\n                result[i*2 + j] = j\n            }\n   \
    \     }\n    }\n    return result\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Palindrome (0.00s)\npanic: runtime error: index\
    \ out of range [247] with length 246 [recovered]\n\tpanic: runtime error: index\
    \ out of range [247] with length 246\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5136a0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5136a0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.even_odd_palindrome(...)\n\t/tmp/tmpfzipqqfy_test.go:31\n\
    command-line-arguments_test.TestEven_Odd_Palindrome(0x0?)\n\t/tmp/tmpfzipqqfy_test.go:45\
    \ +0xd27\ntesting.tRunner(0xc0001a01a0, 0x528fc8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074250
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    var results = []interface{}{}\n    var even = n *\
    \ 2\n    for i := 3; i <= n; i++ {\n        if i == n {\n            results =\
    \ append(results, i)\n            continue\n        }\n\n        if i != (n *\
    \ 2) && i%2 != 0 {\n            continue\n        }\n\n        if i%2 == 0 {\n\
    \            even++\n        } else {\n            even--\n        }\n       \
    \ results = append(results, i)\n    }\n    return results\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Palindrome (0.00s)\n    --- FAIL: TestEven_Odd_Palindrome/test_num__0\
    \ (0.00s)\n        tmpl_x0wrj1_test.go:66: expected '[%!s(int=8) %!s(int=13)]',\
    \ got '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)\
    \ %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30)\
    \ %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44)\
    \ %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58)\
    \ %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72)\
    \ %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86)\
    \ %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94) %!s(int=96) %!s(int=98) %!s(int=100)\
    \ %!s(int=102) %!s(int=104) %!s(int=106) %!s(int=108) %!s(int=110) %!s(int=112)\
    \ %!s(int=114) %!s(int=116) %!s(int=118) %!s(int=120) %!s(int=122) %!s(int=123)]'\n\
    \    --- FAIL: TestEven_Odd_Palindrome/test_num__1 (0.00s)\n        tmpl_x0wrj1_test.go:66:\
    \ expected '[%!s(int=4) %!s(int=6)]', got '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12)]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__2 (0.00s)\n \
    \       tmpl_x0wrj1_test.go:66: expected '[%!s(int=1) %!s(int=2)]', got '[%!s(int=3)]'\n\
    \    --- FAIL: TestEven_Odd_Palindrome/test_num__3 (0.00s)\n        tmpl_x0wrj1_test.go:66:\
    \ expected '[%!s(int=6) %!s(int=8)]', got '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=63)]'\n\
    \    --- FAIL: TestEven_Odd_Palindrome/test_num__4 (0.00s)\n        tmpl_x0wrj1_test.go:66:\
    \ expected '[%!s(int=5) %!s(int=6)]', got '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=25)]'\n    --- FAIL: T"
  timestamp: 1660074250
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    result := make([]interface{}, 0, 2)\n    evenPalindromeNumber\
    \ := 0\n    oddPalindromeNumber := 0\n    for i := 1; i <= n; i++ {\n        isEven\
    \ := false\n        isOdd := false\n        for j := 0; j < i/2; j++ {\n     \
    \       if i%2 != 0 {\n                isOdd = true\n                break\n \
    \           }\n        }\n        for j := 0; j < i/2+1; j++ {\n            if\
    \ i%2 == 0 {\n                isEven = true\n                break\n         \
    \   }\n        }\n        if isEven {\n            evenPalindromeNumber++\n  \
    \      }\n        if isOdd {\n            oddPalindromeNumber++\n        }\n \
    \       result = append(result, i)\n    }\n    return append(result, evenPalindromeNumber,\
    \ oddPalindromeNumber)\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Palindrome (0.00s)\n    --- FAIL: TestEven_Odd_Palindrome/test_num__0\
    \ (0.00s)\n        tmp5kne9j7b_test.go:73: expected '[%!s(int=8) %!s(int=13)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)\
    \ %!s(int=8) %!s(int=9) %!s(int=10) %!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14)\
    \ %!s(int=15) %!s(int=16) %!s(int=17) %!s(int=18) %!s(int=19) %!s(int=20) %!s(int=21)\
    \ %!s(int=22) %!s(int=23) %!s(int=24) %!s(int=25) %!s(int=26) %!s(int=27) %!s(int=28)\
    \ %!s(int=29) %!s(int=30) %!s(int=31) %!s(int=32) %!s(int=33) %!s(int=34) %!s(int=35)\
    \ %!s(int=36) %!s(int=37) %!s(int=38) %!s(int=39) %!s(int=40) %!s(int=41) %!s(int=42)\
    \ %!s(int=43) %!s(int=44) %!s(int=45) %!s(int=46) %!s(int=47) %!s(int=48) %!s(int=49)\
    \ %!s(int=50) %!s(int=51) %!s(int=52) %!s(int=53) %!s(int=54) %!s(int=55) %!s(int=56)\
    \ %!s(int=57) %!s(int=58) %!s(int=59) %!s(int=60) %!s(int=61) %!s(int=62) %!s(int=63)\
    \ %!s(int=64) %!s(int=65) %!s(int=66) %!s(int=67) %!s(int=68) %!s(int=69) %!s(int=70)\
    \ %!s(int=71) %!s(int=72) %!s(int=73) %!s(int=74) %!s(int=75) %!s(int=76) %!s(int=77)\
    \ %!s(int=78) %!s(int=79) %!s(int=80) %!s(int=81) %!s(int=82) %!s(int=83) %!s(int=84)\
    \ %!s(int=85) %!s(int=86) %!s(int=87) %!s(int=88) %!s(int=89) %!s(int=90) %!s(int=91)\
    \ %!s(int=92) %!s(int=93) %!s(int=94) %!s(int=95) %!s(int=96) %!s(int=97) %!s(int=98)\
    \ %!s(int=99) %!s(int=100) %!s(int=101) %!s(int=102) %!s(int=103) %!s(int=104)\
    \ %!s(int=105) %!s(int=106) %!s(int=107) %!s(int=108) %!s(int=109) %!s(int=110)\
    \ %!s(int=111) %!s(int=112) %!s(int=113) %!s(int=114) %!s(int=115) %!s(int=116)\
    \ %!s(int=117) %!s(int=118) %!s(int=119) %!s(int=120) %!s(int=121) %!s(int=122)\
    \ %!s(int=123) %!s(int=61) %!s(int=61)]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__1\
    \ (0.00s)\n        tmp5kne9j7b_test.go:73: expected '[%!s(int=4) %!s(int=6)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)\
    \ %!s(int=8) %!s(int=9) %!s(int=10) %!s(int=11) %!s(int=12) %!s(int=6) %!s(int=5)]'\n\
    \    --- FAIL: TestEven_Odd_Palindrome/test_num__2 (0.00s)\n       "
  timestamp: 1660074251
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalIdx := 0\n    oddPalIdx := 1\n    evenPal :=\
    \ []interface{}{}\n    oddPal := []interface{}{}\n\n    for i := 1; i <= n; i++\
    \ {\n        if isPalindrome(i) {\n            evenPalIdx += 1\n            evenPal\
    \ = append(evenPal, i)\n        } else {\n            oddPalIdx += 1\n       \
    \     oddPal = append(oddPal, i)\n        }\n    }\n    return append(evenPal,\
    \ oddPal)\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz39o_x_m_test.go:30:12: undefined: isPalindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074250
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    l := []interface{}{}\n    if n < 1 || n > 10^3 {\n\
    \        return l\n    }\n\n    var even, odd int\n    for i := 1; i <= n; i++\
    \ {\n        even = 1\n        for j := 1; j < i; j++ {\n            if i%j ==\
    \ 0 {\n                even++\n            }\n        }\n        for k := 1; k\
    \ <= i; k++ {\n            if i%k == 0 {\n                odd++\n            }\n\
    \        }\n        if even == odd {\n            l = append(l, i)\n        }\n\
    \    }\n    return l\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Palindrome (0.00s)\n    --- FAIL: TestEven_Odd_Palindrome/test_num__0\
    \ (0.00s)\n        tmpyrhz9dj0_test.go:69: expected '[%!s(int=8) %!s(int=13)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__1 (0.00s)\n      \
    \  tmpyrhz9dj0_test.go:69: expected '[%!s(int=4) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestEven_Odd_Palindrome/test_num__2 (0.00s)\n        tmpyrhz9dj0_test.go:69:\
    \ expected '[%!s(int=1) %!s(int=2)]', got '[%!s(int=1)]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__3\
    \ (0.00s)\n        tmpyrhz9dj0_test.go:69: expected '[%!s(int=6) %!s(int=8)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__4 (0.00s)\n      \
    \  tmpyrhz9dj0_test.go:69: expected '[%!s(int=5) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestEven_Odd_Palindrome/test_num__5 (0.00s)\n        tmpyrhz9dj0_test.go:69:\
    \ expected '[%!s(int=4) %!s(int=6)]', got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__6\
    \ (0.00s)\n        tmpyrhz9dj0_test.go:69: expected '[%!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__7 (0.00s)\n\
    \        tmpyrhz9dj0_test.go:69: expected '[%!s(int=0) %!s(int=1)]', got '[%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074251
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    var result []interface{}\n    if n%2 == 0 {\n    \
    \    result = append(result, even_palindrome_test(n))\n    }\n    if n%2 != 0\
    \ {\n        result = append(result, odd_palindrome_test(n))\n    }\n    return\
    \ result\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmposbok6di_test.go:26:33: undefined: even_palindrome_test

    /tmp/tmposbok6di_test.go:29:33: undefined: odd_palindrome_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074251
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindList, _ := even_palindrome(n) // call function\n\
    \    oddPalindList, _ := odd_palindrome(n) // call function\n\n    even_odd_palindromeList\
    \ := make([]interface{}, 0)\n    for _, s := range evenPalindList {\n        even_odd_palindromeList\
    \ = append(even_odd_palindromeList, s.(int))\n    }\n    for _, s := range oddPalindList\
    \ {\n        even_odd_palindromeList = append(even_odd_palindromeList, s.(int))\n\
    \    }\n    return even_odd_palindromeList\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr868yw0y_test.go:24:26: undefined: even_palindrome

    /tmp/tmpr868yw0y_test.go:25:25: undefined: odd_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074251
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    if n <= 1 {\n        return nil\n    }\n    evenPalindromes\
    \ := make([]interface{}, 0, n*(n+1)/2 + 1)\n    oddPalindromes := make([]interface{},\
    \ 0, n*(n+1)/2 + 1)\n    i := 2\n    for i <= n {\n        if isPalindrome([]int{i})\
    \ {\n            if i > 1 && isPalindrome([]int{i-1}) {\n                evenPalindromes\
    \ = append(evenPalindromes, i)\n            } else {\n                oddPalindromes\
    \ = append(oddPalindromes, i)\n            }\n        }\n        i = 2*i + 1\n\
    \    }\n    return evenPalindromes + oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp91u_sng9_test.go:31:12: undefined: isPalindrome

    /tmp/tmp91u_sng9_test.go:32:25: undefined: isPalindrome

    /tmp/tmp91u_sng9_test.go:40:12: invalid operation: operator + not defined on evenPalindromes
    (variable of type []interface{})

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074251
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    s := make([]interface{}, 0, n)\n    for i := 0; i\
    \ < n; i++ {\n        if n % 2 == 0 {\n            even_palindrome_test.EvenPalindromeTest(&s,\
    \ i)\n        } else {\n            odd_palindrome_test.OddPalindromeTest(&s,\
    \ i)\n        }\n    }\n    return s\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn8hgd60l_test.go:27:13: undefined: even_palindrome_test

    /tmp/tmpn8hgd60l_test.go:29:13: undefined: odd_palindrome_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074251
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    var even_palindromes []interface{}\n    var odd_palindromes\
    \ []interface{}\n\n    // To store even palindromes\n    for i := 2; i <= n; i++\
    \ {\n        if isPalindrome([]int{i}) {\n            even_palindromes = append(even_palindromes,\
    \ i)\n        }\n    }\n\n    // To store odd palindromes\n    for i := n; i >=\
    \ 2; i-- {\n        if isPalindrome([]int{i}) {\n            odd_palindromes =\
    \ append(odd_palindromes, i)\n        }\n    }\n\n    return even_palindromes\
    \ + odd_palindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpti52im5k_test.go:29:12: undefined: isPalindrome

    /tmp/tmpti52im5k_test.go:36:12: undefined: isPalindrome

    /tmp/tmpti52im5k_test.go:41:12: invalid operation: operator + not defined on even_palindromes
    (variable of type []interface{})

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074251
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    result := make([]interface{}, 0)\n    for number :=\
    \ 1; number <= n; number++ {\n        evenPalindromes := palindromes(number, \"\
    even\")\n        oddPalindromes := palindromes(number, \"odd\")\n        fmt.Printf(\"\
    evenPalindromes: %v\\n\", evenPalindromes)\n        fmt.Printf(\"oddPalindromes:\
    \ %v\\n\", oddPalindromes)\n        result = append(result, evenPalindromes...)\n\
    \        result = append(result, oddPalindromes...)\n    }\n    return result\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi8cuvmf8_test.go:26:28: undefined: palindromes

    /tmp/tmpi8cuvmf8_test.go:27:27: undefined: palindromes

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074251
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    result := make([]interface{}, 0)\n\n    // base case\n\
    \    if n%2 == 0 {\n        for i := 1; i <= n/2; i++ {\n            if n%2 ==\
    \ 0 {\n                evenPalindromes := even_odd_palindrome(i) // recur down\n\
    \                for _, item := range evenPalindromes {\n                    result\
    \ = append(result, item)\n                }\n            }\n            if n%2\
    \ != 0 {\n                oddPalindromes := even_odd_palindrome(i) // recur down\n\
    \                for _, item := range oddPalindromes {\n                    result\
    \ = append(result, item)\n                }\n            }\n        }\n      \
    \  return result\n    } else {\n        for i := 1; i <= n/2; i++ {\n        \
    \    if n%2 != 0 {\n                evenPalindromes := even_odd_palindrome(i)\
    \ // recur down\n                for _, item := range evenPalindromes {\n    \
    \                result = append(result, item)\n                }\n          \
    \  }\n            if n%2 == 0 {\n                oddPalindromes := even_odd_palindrome(i)\
    \ // recur down\n                for _, item := range oddPalindromes {\n     \
    \               result = append(result, item)\n                }\n           \
    \ }\n        }\n        return result\n    }\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Palindrome (0.00s)\n    --- FAIL: TestEven_Odd_Palindrome/test_num__0\
    \ (0.00s)\n        tmp_is4cvr5_test.go:82: expected '[%!s(int=8) %!s(int=13)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__1 (0.00s)\n      \
    \  tmp_is4cvr5_test.go:82: expected '[%!s(int=4) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestEven_Odd_Palindrome/test_num__2 (0.00s)\n        tmp_is4cvr5_test.go:82:\
    \ expected '[%!s(int=1) %!s(int=2)]', got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__3\
    \ (0.00s)\n        tmp_is4cvr5_test.go:82: expected '[%!s(int=6) %!s(int=8)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__4 (0.00s)\n      \
    \  tmp_is4cvr5_test.go:82: expected '[%!s(int=5) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestEven_Odd_Palindrome/test_num__5 (0.00s)\n        tmp_is4cvr5_test.go:82:\
    \ expected '[%!s(int=4) %!s(int=6)]', got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__6\
    \ (0.00s)\n        tmp_is4cvr5_test.go:82: expected '[%!s(int=4) %!s(int=5)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__7 (0.00s)\n      \
    \  tmp_is4cvr5_test.go:82: expected '[%!s(int=0) %!s(int=1)]', got '[]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074251
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    oddPalindromes := make([]interface{}, 0, n-1)\n  \
    \  evenPalindromes := make([]interface{}, 0, n-1)\n    for i := 1; i <= n; i++\
    \ {\n        if i % 2 == 0 {\n            evenPalindromes = append(evenPalindromes,\
    \ i)\n        } else {\n            oddPalindromes = append(oddPalindromes, i)\n\
    \        }\n    }\n\n    evenPalindromes, oddPalindromes := isPalindromePair(evenPalindromes,\
    \ oddPalindromes)\n\n    // Return evenPalindromes + oddPalindromes.\n    return\
    \ evenPalindromes + oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvowhlli9_test.go:34:37: no new variables on left side of :=

    /tmp/tmpvowhlli9_test.go:34:40: undefined: isPalindromePair

    /tmp/tmpvowhlli9_test.go:37:12: invalid operation: operator + not defined on evenPalindromes
    (variable of type []interface{})

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074251
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    even_palindromes := make([]interface{}, 0, n)\n  \
    \  odd_palindromes := make([]interface{}, 0, n)\n    number := 1\n    odd := false\n\
    \    for number < n {\n        palindromes := isPalindrome(number)\n        if\
    \ len(palindromes) == 0 {\n            if odd {\n                odd_palindromes\
    \ = append(odd_palindromes, number)\n            } else {\n                even_palindromes\
    \ = append(even_palindromes, number)\n            }\n        } else {\n      \
    \      even_palindromes = append(even_palindromes, palindromes[0])\n         \
    \   odd_palindromes = append(odd_palindromes, palindromes[1])\n        }\n   \
    \     number++\n        odd = !odd\n    }\n    return even_palindromes + odd_palindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_79__bwt_test.go:29:24: undefined: isPalindrome

    /tmp/tmp_79__bwt_test.go:43:12: invalid operation: operator + not defined on even_palindromes
    (variable of type []interface{})

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074251
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    result := make([]interface{}, 0, n)\n    palindromes\
    \ := make(map[int]int)\n    for i := 0; i < n; i++ {\n        if palindromes[i]%2\
    \ == 0 {\n            palindromes[i]++\n            continue\n        }\n    \
    \    if palindromes[i]%2 != 0 {\n            palindromes[i]--\n        }\n   \
    \     if palindromes[i] == 1 {\n            result = append(result, i)\n     \
    \   }\n        palindromes[i]++\n    }\n    return result\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Palindrome (0.00s)\n    --- FAIL: TestEven_Odd_Palindrome/test_num__0\
    \ (0.00s)\n        tmp6hrsdh78_test.go:62: expected '[%!s(int=8) %!s(int=13)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__1 (0.00s)\n      \
    \  tmp6hrsdh78_test.go:62: expected '[%!s(int=4) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestEven_Odd_Palindrome/test_num__2 (0.00s)\n        tmp6hrsdh78_test.go:62:\
    \ expected '[%!s(int=1) %!s(int=2)]', got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__3\
    \ (0.00s)\n        tmp6hrsdh78_test.go:62: expected '[%!s(int=6) %!s(int=8)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__4 (0.00s)\n      \
    \  tmp6hrsdh78_test.go:62: expected '[%!s(int=5) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestEven_Odd_Palindrome/test_num__5 (0.00s)\n        tmp6hrsdh78_test.go:62:\
    \ expected '[%!s(int=4) %!s(int=6)]', got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__6\
    \ (0.00s)\n        tmp6hrsdh78_test.go:62: expected '[%!s(int=4) %!s(int=5)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__7 (0.00s)\n      \
    \  tmp6hrsdh78_test.go:62: expected '[%!s(int=0) %!s(int=1)]', got '[]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074252
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    return even_odd_palindrome_impl(n)\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo59ubpo0_test.go:24:12: undefined: even_odd_palindrome_impl

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074252
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    if n <= 0 {\n        return nil\n    }\n\n    // initialize\
    \ the result list\n    var res []interface{}\n\n    for i := 1; i <= n; i++ {\n\
    \        // count the number of palindromes with even length\n        evenCount\
    \ := 0\n        // count the number of palindromes with odd length\n        oddCount\
    \ := 0\n        for j := i; j < n; j++ {\n            if str1 := fmt.Sprintf(\"\
    %d\", j); str1 == str1[len(str1)/2:len(str1)] {\n                evenCount++\n\
    \            } else {\n                oddCount++\n            }\n        }\n\n\
    \        // add these to the result list\n        res = append(res, evenCount)\n\
    \        res = append(res, oddCount)\n    }\n\n    return res\n}\n</code>\n<|/\
    \ a tags=arrays,string,go |>\n<| a dscore=0 |>\n<code>\npackage main\n\nimport\
    \ (\n    \"bufio\"\n    \"fmt\"\n    \"os\"\n    \"strings\"\n)\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpaipsyskl_test.go:51:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074251
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    // Your code here\n    even_palindromes := make([]interface{},\
    \ 0, n)\n    odd_palindromes := make([]interface{}, 0, n)\n    for i := 1; i <=\
    \ n; i++ {\n        if isPalindrome(i) {\n            if isEven(i) {\n       \
    \         even_palindromes = append(even_palindromes, i)\n            } else {\n\
    \                odd_palindromes = append(odd_palindromes, i)\n            }\n\
    \        }\n    }\n    return even_palindromes + odd_palindromes\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6wf2mn3t_test.go:28:12: undefined: isPalindrome

    /tmp/tmp6wf2mn3t_test.go:29:16: undefined: isEven

    /tmp/tmp6wf2mn3t_test.go:36:12: invalid operation: operator + not defined on even_palindromes
    (variable of type []interface{})

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074252
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    // write your code here\n    s := make([]interface{},\
    \ 0)\n    i := 1\n    for i := 1; i <= n && i <= n*n; i++ {\n        if i%2 ==\
    \ 0 {\n            fmt.Println(i)\n            s = append(s, i)\n            fmt.Println(s)\n\
    \        } else {\n            fmt.Println(i)\n            s = append(s, i*i)\n\
    \            fmt.Println(s)\n        }\n    }\n    return s\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5hhh_isn_test.go:26:5: i declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074252
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    even_odd_palindrome := make([]interface{}, 0, 2)\n\
    \    even_palindrome := make([]int, 0, 2)\n    odd_palindrome := make([]int, 0,\
    \ 2)\n    even_palindrome = append(even_palindrome, 2)\n    odd_palindrome = append(odd_palindrome,\
    \ 1)\n\n    for x := 0; x <= n; x++ {\n        even_palindrome = append(even_palindrome,\
    \ x)\n        odd_palindrome = append(odd_palindrome, x - 1)\n\n        for _,\
    \ x := range even_palindrome {\n            if x == 0 {\n                continue\n\
    \            }\n            if x == n-1 {\n                continue\n        \
    \    }\n            if x == odd_palindrome[len(odd_palindrome)-1] {\n        \
    \        continue\n            }\n\n            even_palindrome = append(even_palindrome,\
    \ x-1)\n        }\n\n        for _, x := range odd_palindrome {\n            if\
    \ x == 0 {\n                continue\n            }\n            if x == n-1 {\n\
    \                continue\n            }\n            if x == even_palindrome[len(even_palindrome)-1]\
    \ {\n                continue\n            }\n\n            odd_palindrome = append(odd_palindrome,\
    \ x-1)\n        }\n\n        even_odd_palindrome = append(even_odd_palindrome,\
    \ even_palindrome...)\n        even_odd_palindrome = append(even_odd_palindrome,\
    \ odd_palindrome...)\n    }\n\n    return even_odd_palindrome\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbaf95qpj_test.go:62:59: cannot use even_palindrome (variable of type []int)
    as type []interface{} in argument to append

    /tmp/tmpbaf95qpj_test.go:63:59: cannot use odd_palindrome (variable of type []int)
    as type []interface{} in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074252
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    return even_odd_palindrome_test(n)\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2l_aqbnj_test.go:24:12: undefined: even_odd_palindrome_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074252
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    if n < 1 || n > 1000000000000000 {\n        return\
    \ []interface{}{}\n    }\n    // Use this trick to make the range in the loop\
    \ inclusive\n    even, odd := 0, 1\n    evenOdd := make([]interface{}, 0, 2)\n\
    \    for i := 0; i < n; i++ {\n        oddEvenIndex, _ := strconv.Atoi(string(isPalindrome(append(getPalindromes(i),\
    \ getPalindromes(n)[i])))) // index for odd & even\n        if oddEvenIndex %\
    \ 2 == 0 {\n            even++\n        } else {\n            odd++\n        }\n\
    \        evenOdd = append(evenOdd, i)\n    }\n    return evenOdd\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzno_04dh_test.go:31:28: undefined: strconv

    /tmp/tmpzno_04dh_test.go:31:48: undefined: isPalindrome

    /tmp/tmpzno_04dh_test.go:31:68: undefined: getPalindromes

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074252
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenList := make([]interface{}, 0, n+1)\n    oddList\
    \ := make([]interface{}, 0, n+1)\n    for i := 1; i <= n; i++ {\n        oddLists\
    \ = append(oddList, i*2)\n    }\n    if n <= 1 {\n        return evenList\n  \
    \  }\n    for i := 1; i <= n; i++ {\n        if palindrome(oddList) {\n      \
    \      oddList = append(oddList, i*2)\n        }\n        if palindrome(evenList)\
    \ {\n            evenList = append(evenList, i*2)\n        }\n    }\n    return\
    \ evenList\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate :=\
    \ even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected:\
    \ []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq5jil1pk_test.go:27:9: undefined: oddLists

    /tmp/tmpq5jil1pk_test.go:33:12: undefined: palindrome

    /tmp/tmpq5jil1pk_test.go:36:12: undefined: palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074252
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    even := make([]interface{}, 0)\n    odd := make([]interface{},\
    \ 0)\n    lastPalindromeOdd := make([]int, 0)\n    lastPalindromeEven := make([]int,\
    \ 0)\n    currentPalindrome := make([]int, 0)\n    evenPalindromes := make([]int,\
    \ 0)\n    oddPalindromes := make([]int, 0)\n    for i := 0; i < n; i++ {\n   \
    \     currentPalindrome = append(currentPalindrome, i)\n        if i%2 == 0 {\n\
    \            lastPalindromeEven = append(lastPalindromeEven, i)\n        } else\
    \ {\n            lastPalindromeOdd = append(lastPalindromeOdd, i)\n        }\n\
    \        oddPalindromes = append(oddPalindromes, currentPalindrome)\n    }\n \
    \   for _, odd in lastPalindromeOdd {\n        for _, even in lastPalindromeEven\
    \ {\n            if odd == even {\n                evenPalindromes = append(evenPalindromes,\
    \ odd)\n                break\n            }\n        }\n    }\n    for _, even\
    \ := range lastPalindromeEven {\n        for _, odd := range lastPalindromeOdd\
    \ {\n            if even == odd {\n                oddPalindromes = append(oddPalindromes,\
    \ even)\n                break\n            }\n        }\n    }\n    return evenPalindromes\
    \ + oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpyz_k_p9k_test.go:40:9: expected 1 expression

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074252
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    var even_odd_palindromes []interface{}\n\n    for\
    \ i := 0; i < n; i++ {\n        value := i\n        if value == 0 {\n        \
    \    continue // skip 0 value\n        }\n        for jValue := 1; j < value;\
    \ jValue++ {\n            if i%jValue == 0 {\n                continue // skip\
    \ even value\n            }\n        }\n        if n%value != 0 {\n          \
    \  continue // skip odd value\n        }\n        even_odd_palindromes = append(even_odd_palindromes,\
    \ value)\n    }\n\n    return even_odd_palindromes\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwb9qcdx0_test.go:31:26: undefined: j

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074252
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    odd_numbers := make([]int, 0, n)\n    even_numbers\
    \ := make([]int, 0, n)\n\n    for i := 1; i <= n; i++ {\n        odd_numbers =\
    \ append(odd_numbers, i)\n        if i%2 == 0 {\n            even_numbers = append(even_numbers,\
    \ i)\n        }\n    }\n\n    return append(even_numbers, odd_numbers...)\n}\n\
    \nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfnxqsjk4_test.go:34:12: cannot use append(even_numbers, odd_numbers...)
    (value of type []int) as type []interface{} in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074253
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    // Your code here\n    result := make([]interface{},\
    \ n)\n    for i := 0; i < n; i++ {\n        even, odd := isPalindrome(i), isPalindrome(i+n)\n\
    \        if even || odd {\n            result = append(result, i)\n        }\n\
    \    }\n    return result\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n\
    \  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpky3ieb1t_test.go:27:22: undefined: isPalindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074253
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    p := make([]interface{}, 0, 2)\n    for i := 1; i\
    \ <= n; i++ {\n        s := make([]int, i)\n        for j := len(s) - 1; j >=\
    \ 0; j-- {\n            s[j] = s[i]\n        }\n        p2 := reverse(s)\n   \
    \     if len(p) == 2 {\n            if p[0] == p2 {\n                p = append(p,\
    \ p[0])\n                p = append(p, p[1])\n            }\n        } else if\
    \ len(p) == 1 {\n            if p[0] == p2 {\n                p = append(p, p[0])\n\
    \            }\n        } else {\n            if p[0] == p2 {\n              \
    \  p = append(p, p[0])\n                p = append(p, p[1])\n            }\n \
    \       }\n    }\n    return p\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpipes2420_test.go:30:15: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074253
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0, n*2-1)\n\
    \    oddPalindromes := make([]interface{}, 0, (n*2-1))\n    i := 0\n    for j\
    \ := n; j < n*2; j++ {\n        p := j\n        if p%2 == 0 {\n            p *=\
    \ -1\n        }\n        oddPalindromes = append(oddPalindromes, p)\n        evenPalindromes\
    \ = append(evenPalindromes, p)\n    }\n    if n < 2 {\n        return evenPalindromes\n\
    \    }\n    if n == 2 {\n        return evenPalindromes\n    }\n    for {\n  \
    \      k := evenPalindromes[len(evenPalindromes)-1]\n        evenPalindromes =\
    \ append(evenPalindromes, oddPalindromes[len(oddPalindromes)-1])\n        oddPalindromes\
    \ = append(oddPalindromes, k)\n        if k == 1 {\n            break\n      \
    \  }\n    }\n    return evenPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl5c5qw8m_test.go:26:5: i declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074253
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    result := []interface{}{}\n    if n < 1 {\n      \
    \  return nil\n    }\n    for i := 2; i <= n; i++ {\n        if isPalindrome(i)\
    \ {\n            if isEven(i) {\n                result = append(result, i)\n\
    \            } else {\n                result = append(result, n-i)\n        \
    \    }\n        }\n    }\n    return result\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmps3v7kfsh_test.go:29:12: undefined: isPalindrome

    /tmp/tmps3v7kfsh_test.go:30:16: undefined: isEven

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074253
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    var even = []interface{}{}\n    var odd = []interface{}{}\n\
    \    \n    for i := 0; i < n; i++ {\n        fmt.Printf(\"i = %d\\n\", i)\n  \
    \      \n        // Check if number is even\n        if n % 2 == 0 {\n       \
    \     even = append(even, i)\n        } else {\n            odd = append(odd,\
    \ i)\n        }\n        \n        // Check if number is odd\n        if n % 2\
    \ != 0 {\n            even = append(even, i)\n        } else {\n            odd\
    \ = append(odd, i)\n        }\n    }\n    \n    fmt.Println(\"even = \", even,\
    \ \"odd = \", odd)\n    \n    return even\n}\n```\n# Definition\nDefinition\n\
    A palindromic number reads the same both ways. The largest palindrome made from\
    \ the product of two 2-digit numbers is\n9876.\n\nThere are at least ten palindromes\
    \ less than one million: 9468, 9969, 6457, 9913, 8089, 9941, 9916, 9950, and 9918.\n\
    The first ten palindromes made from the product of two 3-digit numbers are 9969,\
    \ 9968, 9970, 9972, 9974, 9968, 9972, 9970, 9974, and 9976.\nThe next ten palindromes\
    \ made from the product of two 4-digit numbers are 9972, 9976, 9966, 9968, 9972,\
    \ 9976, 9966, 9968, 9972. etc.\n\nA palindrome is a number that reads the same\
    \ backward as forward.\n\nExample:\nGiven n = 37, the largest palindrome made\
    \ from the product of two 3-digit numbers is 9969.\nGiven n = 6, the smallest\
    \ palindrome made from the product of two 2-digit numbers is 9.\nWrite a function:\n\
    ```\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1e00i4p2_test.go:49:1: expected declaration, found ``

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074252
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for i :=\
    \ 1; i <= n; i++ {\n        if isPalindrome(i) {\n            even_count++\n \
    \       } else {\n            odd_count++\n        }\n    }\n    result := []interface{}{}\n\
    \    if even_count > odd_count {\n        result = append(result, even_count)\n\
    \        result = append(result, odd_count)\n    } else {\n        result = append(result,\
    \ odd_count)\n        result = append(result, even_count)\n    }\n    return result\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpni_ewnbo_test.go:27:12: undefined: isPalindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074253
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    var even_palindromes []interface{}\n    var odd_palindromes\
    \ []interface{}\n    \n    // Find all even palindromes from 1 to n.\n    for\
    \ i := 0; i < n; i++ {\n        s := fmt.Sprintf(\"%d\", i)\n        isPalindrome\
    \ := isPalindrome(s)\n        if isPalindrome {\n            even_palindromes\
    \ = append(even_palindromes, i)\n        } else {\n            odd_palindromes\
    \ = append(odd_palindromes, i)\n        }\n    }\n    \n    // Find all odd palindromes\
    \ from 1 to n.\n    for i := 0; i < n; i++ {\n        s := fmt.Sprintf(\"%d\"\
    , i)\n        isPalindrome := isPalindrome(s)\n        if !isPalindrome {\n  \
    \          even_palindromes = append(even_palindromes, i)\n        } else {\n\
    \            odd_palindromes = append(odd_palindromes, i)\n        }\n    }\n\
    \    \n    // Merge two lists even_palindromes and odd_palindromes into a new\
    \ one.\n    result := even_palindromes\n    result = append(result, odd_palindromes...)\n\
    \    \n    return result\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n\
    \  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp758l8a1z_test.go:30:25: undefined: isPalindrome

    /tmp/tmp758l8a1z_test.go:41:25: undefined: isPalindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074253
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    ret := make([]interface{}, 0, 2)\n    for i := range\
    \ palindromes {\n        if palindromes[i] <= n && palindromes[i] > 0 {\n    \
    \        ret = append(ret, n)\n            break\n        }\n    }\n    return\
    \ ret\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6rravc3f_test.go:25:20: undefined: palindromes

    /tmp/tmp6rravc3f_test.go:26:12: undefined: palindromes

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074253
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    result := make([]interface{}, 0, 2)\n    odd := 0\n\
    \    even := 0\n    for i := 0; i < n; i++ {\n        if isPalindrome(i) {\n \
    \           if isEven(i) {\n                even++\n            } else {\n   \
    \             odd++\n            }\n        } else {\n            if isEven(i)\
    \ {\n                even--\n            } else {\n                odd--\n   \
    \         }\n        }\n        result = append(result, i)\n    }\n    evens =\
    \ even\n    odds = odd\n    return append(result, even, odd)\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjs82_zee_test.go:28:12: undefined: isPalindrome

    /tmp/tmpjs82_zee_test.go:29:16: undefined: isEven

    /tmp/tmpjs82_zee_test.go:35:16: undefined: isEven

    /tmp/tmpjs82_zee_test.go:43:5: undefined: evens

    /tmp/tmpjs82_zee_test.go:44:5: undefined: odds

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074253
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    result := make([]interface{}, 0, 2)\n    for i :=\
    \ 1; i <= n; i++ {\n        fmt.Printf(\"i = %d, \", i)\n        if isEven(i)\
    \ == isOdd(i) {\n            result = append(result, i)\n        }\n    }\n  \
    \  return result\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfvgm29e__test.go:27:12: undefined: isEven

    /tmp/tmpfvgm29e__test.go:27:25: undefined: isOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074253
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    s := make([]interface{}, 0)\n    if n<1 {\n      \
    \  return []interface{}{nil}\n    }\n\n    if n%2 == 0 {\n        even_palindrome\
    \ := even_odd_palindrome(n / 2)\n        for _, v := range even_palindrome {\n\
    \            if n%2 == 0 {\n                s = append(s, v)\n            }\n\
    \            n /= 2\n        }\n        return append(s, even_palindrome...)\n\
    \    }\n\n    odd_palindrome := even_odd_palindrome(n / 2)\n    for _, v := range\
    \ odd_palindrome {\n        if n%2 == 0 {\n            s = append(s, v)\n    \
    \    }\n        n /= 2\n    }\n\n    return append(s, odd_palindrome...)\n}\n\n\
    func TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Palindrome (0.00s)\n    --- FAIL: TestEven_Odd_Palindrome/test_num__0\
    \ (0.00s)\n        tmpmtm8ger5_test.go:71: expected '[%!s(int=8) %!s(int=13)]',\
    \ got '[<nil> <nil> <nil> <nil>]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__1\
    \ (0.00s)\n        tmpmtm8ger5_test.go:71: expected '[%!s(int=4) %!s(int=6)]',\
    \ got '[<nil> <nil> <nil> <nil>]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__2\
    \ (0.00s)\n        tmpmtm8ger5_test.go:71: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[<nil>]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__3 (0.00s)\n \
    \       tmpmtm8ger5_test.go:71: expected '[%!s(int=6) %!s(int=8)]', got '[<nil>]'\n\
    \    --- FAIL: TestEven_Odd_Palindrome/test_num__4 (0.00s)\n        tmpmtm8ger5_test.go:71:\
    \ expected '[%!s(int=5) %!s(int=6)]', got '[<nil> <nil> <nil> <nil> <nil> <nil>]'\n\
    \    --- FAIL: TestEven_Odd_Palindrome/test_num__5 (0.00s)\n        tmpmtm8ger5_test.go:71:\
    \ expected '[%!s(int=4) %!s(int=6)]', got '[<nil> <nil> <nil> <nil> <nil> <nil>\
    \ <nil> <nil> <nil>]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__6 (0.00s)\n\
    \        tmpmtm8ger5_test.go:71: expected '[%!s(int=4) %!s(int=5)]', got '[<nil>\
    \ <nil> <nil> <nil> <nil> <nil>]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__7\
    \ (0.00s)\n        tmpmtm8ger5_test.go:71: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[<nil>]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074254
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    fmt.Println(\"The even_odd_palindrome method has been\
    \ called!\")\n    even, odd := []int{}, []int{}\n    var i, j, k int\n    for\
    \ i = 1; i < n; i++ {\n        if i % 2 == 0 {\n            even = append(even,\
    \ i)\n        } else {\n            odd = append(odd, i)\n        }\n    }\n \
    \   // To avoid multiple run of palindrome number checks\n    var a int\n    //\
    \ To store the palindrome number\n    var palindrome []int\n    for i = 1; i <\
    \ n; i++ {\n        // To check for palindrome number for each number from even\n\
    \        // to odd, one by one\n        for j = 0 ; j < len(even) ; j++ {\n  \
    \          // To check for palindrome number for each number from odd\n      \
    \      // to even, one by one\n            for k = 0 ; k < len(odd) ; k++ {\n\
    \                // To compare each number from odd to\n                // even\
    \ to each number from even to\n                // odd using string methods\n \
    \               if even[j] == odd[k] {\n                    a = a+1\n        \
    \        } else {\n                    a = a\n                }\n            }\n\
    \        }\n        // To store the palindrome number\n        palindrome = append(palindrome,\
    \ a)\n        a = 0\n    }\n    // To check if the number palindrome is even\n\
    \    if palindrome[0] == palindrome[len(palindrome)-1] {\n        return even\n\
    \    } else {\n        return odd\n    }\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmph79iud9s_test.go:61:16: cannot use even (variable of type []int) as type
    []interface{} in return statement

    /tmp/tmph79iud9s_test.go:63:16: cannot use odd (variable of type []int) as type
    []interface{} in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074254
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    if n < 2 {\n        return nil\n    }\n\n    if n\
    \ == 2 {\n        return []interface{}{n}\n    }\n\n    result := make([]interface{},\
    \ n+1)\n    result[0] = 1\n    result[1] = n\n    for i := 2; i <= n; i++ {\n\
    \        var even, odd int\n        for j := 1; j <= i/2; j++ {\n            if\
    \ result[j] != result[i-j] {\n                even = j\n                break\n\
    \            }\n        }\n        for k := i + 1; k <= n; k++ {\n           \
    \ if result[k] != result[i-k] {\n                odd = k\n                break\n\
    \            }\n        }\n        if even == 0 || odd > i {\n            continue\n\
    \        }\n        result[even] = result[even] + result[odd-i]\n    }\n    return\
    \ result\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpld01nb7f_test.go:52:24: invalid operation: operator + not defined on result[even]
    (variable of type interface{})

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074254
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    // write your code here\n    list := make([]interface{},\
    \ 0, n)\n    // loop from 0 to n-1\n    for i := 0; i < n; i++ {\n        // loop\
    \ to n-1\n        for j := 0; j < n-1; j++ {\n            // if the integer i\
    \ has a palindrome\n            if isPalindrome(i) {\n                // append\
    \ the even palindrome to the list\n                list = append(list, i)\n  \
    \              // append the odd palindrome to the list\n                list\
    \ = append(list, j+1)\n            }\n        }\n    }\n    // return the list\n\
    \    return list\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq9s8lw6s_test.go:31:16: undefined: isPalindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074254
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    if n < 1 {\n        return []\n    }\n    oddPals\
    \ := make([]int, n)\n    evenPals := make([]int, n)\n    for x := 0; x < n; x++\
    \ {\n        if isPalindrome(x) {\n            oddPals[x] = x\n        } else\
    \ {\n            evenPals[x] = x\n        }\n    }\n    evenPalsSorted := []int{}\n\
    \    for _, v := range evenPals {\n        evenPalsSorted = append(evenPalsSorted,\
    \ v)\n    }\n    oddPalsSorted := []int{}\n    for _, v := range oddPals {\n \
    \       oddPalsSorted = append(oddPalsSorted, v)\n    }\n    // fmt.Println(evenPals,\
    \ evenPalsSorted)\n    // fmt.Println(oddPals, oddPalsSorted)\n    evenPalsSorted\
    \ = append(evenPalsSorted,\n        evenPalsSorted[len(evenPalsSorted)-1]) //\
    \ insert middle element of evenPalsSorted list into oddPalsSorted list.\n    oddPalsSorted\
    \ = append(oddPalsSorted,\n        oddPalsSorted[len(oddPalsSorted)-1]) // insert\
    \ middle element of oddPalsSorted list into evenPalsSorted list.\n    evenPalsSorted\
    \ = append(evenPalsSorted, evenPalsSorted[0]) // append the first element of evenPalsSorted\
    \ list into oddPalsSorted list.\n    oddPalsSorted = append(oddPalsSorted, oddPalsSorted[0])\
    \ // append the first element of oddPalsSorted list into evenPalsSorted list.\n\
    \    // fmt.Println(evenPals, evenPalsSorted)\n    // fmt.Println(oddPals, oddPalsSorted)\n\
    \    for _, v := range oddPalsSorted {\n        if v%2 != 0 {\n            return\
    \ evenPalsSorted\n        }\n    }\n    return evenPalsSorted\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpyxmy395c_test.go:25:18: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074253
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    // init result\n    var result []interface{}\n\n \
    \   // 1. init odds\n    var odds []int\n    for i := 0; i < n; i++ {\n      \
    \  odds = append(odds, i)\n    }\n\n    // 2. init evens\n    var evens []int\n\
    \    for _, v := range odds {\n        if v%2 != 0 {\n            evens = append(evens,\
    \ v)\n        }\n    }\n\n    // 3. sort odds and evens\n    odds, evens = sort.IntSlices(odds,\
    \ evens)\n\n    // 4. merge odds and evens\n    if len(odds) > 0 && len(evens)\
    \ > 0 {\n        // odds is smaller than evens\n        if len(odds) < len(evens)\
    \ {\n            result := append(result, odds...)\n        } else {\n       \
    \     result := append(result, evens...)\n        }\n    }\n\n    return result\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgvxph7mg_test.go:42:19: undefined: sort

    /tmp/tmpgvxph7mg_test.go:48:13: result declared but not used

    /tmp/tmpgvxph7mg_test.go:48:38: cannot use odds (variable of type []int) as type
    []interface{} in argument to append

    /tmp/tmpgvxph7mg_test.go:50:13: result declared but not used

    /tmp/tmpgvxph7mg_test.go:50:38: cannot use evens (variable of type []int) as type
    []interface{} in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074254
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    var even_odd_palindromes []interface{}\n    var count\
    \ int\n    for count := 1; count <= n; count++ {\n        var even_palindrome\
    \ []interface{}\n        var odd_palindrome []interface{}\n        if isEvenPalindrome(count)\
    \ {\n            even_palindrome = append(even_palindrome, count)\n          \
    \  count--\n        } else {\n            odd_palindrome = append(odd_palindrome,\
    \ count)\n            count--\n        }\n        even_odd_palindromes = append(even_odd_palindromes,\
    \ even_palindrome)\n        even_odd_palindromes = append(even_odd_palindromes,\
    \ odd_palindrome)\n    }\n    return even_odd_palindromes\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi7ptnuu9_test.go:25:9: count declared but not used

    /tmp/tmpi7ptnuu9_test.go:29:12: undefined: isEvenPalindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074254
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    // Your code goes here\n    evenPalindromes := []interface{}{}\n\
    \    oddPalindromes := []interface{}{}\n\n    oddPalindromesNum := (n - 1) / ((n\
    \ - 1) % 2 + 1)\n    for i := 0; i < oddPalindromesNum; i++ {\n        oddPalindromes\
    \ = append(oddPalindromes, i + 1)\n    }\n\n    evenPalindromesNum = (n - 1) /\
    \ (n % 2 + 1)\n    for i := 0; i < evenPalindromesNum; i++ {\n        evenPalindromes\
    \ = append(evenPalindromes, n - 1 - i)\n    }\n\n    return evenPalindromes +\
    \ oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphxcwl4py_test.go:33:5: undefined: evenPalindromesNum

    /tmp/tmphxcwl4py_test.go:34:21: undefined: evenPalindromesNum

    /tmp/tmphxcwl4py_test.go:38:12: invalid operation: operator + not defined on evenPalindromes
    (variable of type []interface{})

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074254
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    // Write your code here\n    oddList := make([]interface{},\
    \ 0)\n    evenList := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n\
    \        if i % 2 == 0 {\n            evenList = append(evenList, i)\n       \
    \ } else {\n            oddList = append(oddList, i)\n        }\n    }\n    evenList\
    \ = append(evenList, evenList...)\n    return evenList\n}\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Palindrome (0.00s)\n    --- FAIL: TestEven_Odd_Palindrome/test_num__0\
    \ (0.00s)\n        tmphi7_84pc_test.go:57: expected '[%!s(int=8) %!s(int=13)]',\
    \ got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14)\
    \ %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28)\
    \ %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42)\
    \ %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56)\
    \ %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70)\
    \ %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84)\
    \ %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94) %!s(int=96) %!s(int=98)\
    \ %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106) %!s(int=108) %!s(int=110)\
    \ %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118) %!s(int=120) %!s(int=122)\
    \ %!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14)\
    \ %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28)\
    \ %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42)\
    \ %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56)\
    \ %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70)\
    \ %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84)\
    \ %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94) %!s(int=96) %!s(int=98)\
    \ %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106) %!s(int=108) %!s(int=110)\
    \ %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118) %!s(int=120) %!s(int=122)]'\n\
    \    --- FAIL: TestEven_Odd_Palindrome/test_num__1 (0.00s)\n        tmphi7_84pc_test.go:57:\
    \ expected '[%!s(int=4) %!s(int=6)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10) %!s(int=12) %!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12)]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__2 (0.00s)\n \
    \       tmphi7_84pc_test.go:57: expected '[%!s(int=1) %!s(int=2"
  timestamp: 1660074255
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    var evenPalindromes []interface{}\n    var oddPalindromes\
    \ []interface{}\n    for i := 1; i <= n; i++ {\n        if i%2 == 0 {\n      \
    \      if i%12 == 0 {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        } else {\n            if i%12 != 0 {\n          \
    \      evenPalindromes = append(evenPalindromes, i)\n            } else {\n  \
    \              oddPalindromes = append(oddPalindromes, i)\n            }\n   \
    \     }\n    }\n    return evenPalindromes, oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpmxdywbk4_test.go:41:29:\
    \ too many return values\n\thave ([]interface{}, []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074254
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    var oddPalindromes []interface{}\n    var evenPalindromes\
    \ []interface{}\n\n    if n == 1 {\n        return oddPalindromes\n    }\n\n \
    \   var isEven = false\n\n    for i := 1; i <= n; i++ {\n        isEven = isEven\
    \ || (i % 2 != 0 && i != n)\n        oddPalindromes = append(oddPalindromes, i)\n\
    \    }\n\n    for i := len(oddPalindromes) - 1; i >= 0; i-- {\n        if oddPalindromes[i]\
    \ == oddPalindromes[i+1] {\n            evenPalindromes = append(evenPalindromes,\
    \ oddPalindromes[i])\n            oddPalindromes = append(oddPalindromes[:i],\
    \ oddPalindromes[i+1:]...)\n        }\n    }\n\n    return evenPalindromes\n}\n\
    \nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Palindrome (0.00s)\npanic: runtime error: index\
    \ out of range [123] with length 123 [recovered]\n\tpanic: runtime error: index\
    \ out of range [123] with length 123\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5136a0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5136a0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.even_odd_palindrome(0x7b)\n\t/tmp/tmp2ialfqw8_test.go:39\
    \ +0x472\ncommand-line-arguments_test.TestEven_Odd_Palindrome(0x0?)\n\t/tmp/tmp2ialfqw8_test.go:55\
    \ +0x46\ntesting.tRunner(0xc000192680, 0x528fc8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    p := make([]interface{}, (n-1))\n    evenCount :=\
    \ 0\n    oddCount := 0\n    for i := 0; i < n; i++ {\n        even := true\n \
    \       odd := false\n        for j := 0; j < i/2; j++ {\n            if p[j]\
    \ != p[j+i] {\n                even = false\n                break\n         \
    \   }\n        }\n        for j := 0; j < i-1; j++ {\n            if p[j] != p[j+i]\
    \ {\n                odd = true\n                break\n            }\n      \
    \  }\n        if even {\n            evenCount++\n        } else {\n         \
    \   oddCount++\n        }\n        p = append(p, i)\n    }\n    return []interface{}{evenCount,\
    \ oddCount}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate :=\
    \ even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected:\
    \ []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfiz7t88f_test.go:29:9: odd declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074254
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    var evenPalindromes []interface{}\n    var oddPalindromes\
    \ []interface{}\n\n    if n < 1 {\n        return nil\n    }\n\n    for i := 1;\
    \ i <= n; i++ {\n        s := fmt.Sprintf(\"%d\", i)\n        if isPalindrome(s)\
    \ {\n            if s[len(s)-1] == '0' {\n                evenPalindromes = append(evenPalindromes,\
    \ s)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ s)\n            }\n        }\n    }\n\n    return evenPalindromes.concat(oddPalindromes)\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp28atd9v__test.go:33:12: undefined: isPalindrome

    /tmp/tmp28atd9v__test.go:42:28: evenPalindromes.concat undefined (type []interface{}
    has no field or method concat)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    if n < 1 || n > 10^3 {\n        return []interface{}{}\n\
    \    }\n    even_palindromes := make([]interface{}, 0)\n    odd_palindromes :=\
    \ make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        odd_palindromes\
    \ = append(odd_palindromes, i)\n    }\n    for i := 0; i < len(odd_palindromes);\
    \ i += 2 {\n        if odd_palindromes[i] == odd_palindromes[i+1] {\n        \
    \    even_palindromes = append(even_palindromes, odd_palindromes[i])\n       \
    \ } else {\n            even_palindromes = append(even_palindromes, odd_palindromes[i+1])\n\
    \        }\n    }\n    return even_palindromes\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Palindrome (0.00s)\npanic: runtime error: index\
    \ out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out\
    \ of range [3] with length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5136a0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5136a0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.even_odd_palindrome(0x3)\n\t/tmp/tmpytwjho1b_test.go:33\
    \ +0x39d\ncommand-line-arguments_test.TestEven_Odd_Palindrome(0x0?)\n\t/tmp/tmpytwjho1b_test.go:51\
    \ +0xa2\ntesting.tRunner(0xc0001a0340, 0x528fc8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    if n < 1 {\n        return nil\n    }\n\n    result\
    \ := make([]interface{}, 0, 2)\n\n    if n == 1 {\n        result = append(result,\
    \ 1)\n        return result\n    }\n\n    for i := 1; i <= n; i++ {\n        odd\
    \ := i\n        even := 0\n\n        // Find even and odd integers palindrome\
    \ from odd integer\n        for j, _ := range odd {\n            v := odd[j]\n\
    \            if v == 0 {\n                break\n            }\n            if\
    \ v%2 == 0 {\n                even++\n            }\n        }\n        result\
    \ = append(result, even)\n\n        // Find even and odd integers palindrome from\
    \ even integer\n        for j, _ := range even {\n            v := even[j]\n \
    \           if v == 0 {\n                break\n            }\n            if\
    \ v%2 == 0 {\n                odd++\n            }\n        }\n        result\
    \ = append(result, odd)\n    }\n    return result\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa3orzrac_test.go:40:27: cannot range over odd (variable of type int)

    /tmp/tmpa3orzrac_test.go:41:21: invalid operation: cannot index odd (variable
    of type int)

    /tmp/tmpa3orzrac_test.go:52:27: cannot range over even (variable of type int)

    /tmp/tmpa3orzrac_test.go:53:22: invalid operation: cannot index even (variable
    of type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074255
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    var ret []interface{}\n\n    for i := 0; i < n; i++\
    \ {\n        var isEven bool\n        var isOdd bool\n        if i < n-1 && i\
    \ > 0 {\n            isEven = i%2 == 0 && i%2 == -1\n            isOdd = i%2 ==\
    \ 1 && i%2 == 1\n        }\n        if isEven {\n            ret = append(ret,\
    \ i)\n        }\n        if isOdd {\n            ret = append(ret, i)\n      \
    \  }\n    }\n\n    return ret\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test

    /tmp/tmpewse36eo_test.go:30:22: suspect and: i%2 == 0 && i%2 == -1

    /tmp/tmpewse36eo_test.go:31:21: redundant and: i%2 == 1 && i%2 == 1

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    // write your code here\n    palindromes := make([]interface{},\
    \ 2)\n    if n == 1 {\n        palindromes[0] = 1\n        palindromes[1] = 2\n\
    \        return palindromes\n    }\n\n    for i := 1; i <= n; i++ {\n        for\
    \ j := n - i; j >= 0; j-- {\n            if i + j == i {\n                palindromes[0]\
    \ = i\n                palindromes[1] = j\n                break\n           \
    \ }\n        }\n    }\n    return palindromes\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Palindrome (0.00s)\n    --- FAIL: TestEven_Odd_Palindrome/test_num__0\
    \ (0.00s)\n        tmp3nse7zms_test.go:64: expected '[%!s(int=8) %!s(int=13)]',\
    \ got '[%!s(int=123) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__1\
    \ (0.00s)\n        tmp3nse7zms_test.go:64: expected '[%!s(int=4) %!s(int=6)]',\
    \ got '[%!s(int=12) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__2\
    \ (0.00s)\n        tmp3nse7zms_test.go:64: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=3) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__3\
    \ (0.00s)\n        tmp3nse7zms_test.go:64: expected '[%!s(int=6) %!s(int=8)]',\
    \ got '[%!s(int=63) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__4\
    \ (0.00s)\n        tmp3nse7zms_test.go:64: expected '[%!s(int=5) %!s(int=6)]',\
    \ got '[%!s(int=25) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__5\
    \ (0.00s)\n        tmp3nse7zms_test.go:64: expected '[%!s(int=4) %!s(int=6)]',\
    \ got '[%!s(int=19) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__6\
    \ (0.00s)\n        tmp3nse7zms_test.go:64: expected '[%!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=9) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__7\
    \ (0.00s)\n        tmp3nse7zms_test.go:64: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=1) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074255
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    if n <= 0 || n > 10^3 {\n        return []interface{}{}\n\
    \    }\n    even, odd := 0, 0\n    result := []interface{}{}\n    for k := 1;\
    \ k <= n; k++ {\n        odd = odd + 1\n        if isPalindrome(string(k)) {\n\
    \            even = even + 1\n        } else {\n            even = 0\n       \
    \ }\n        result = append(result, string(k))\n    }\n    return append(result,\n\
    \        string(k),\n        string(int(odd)+int(even)),\n    )\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1myqf9t9_test.go:31:12: undefined: isPalindrome

    /tmp/tmp1myqf9t9_test.go:39:16: undefined: k

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    var evenPalindromes []interface{}\n    var oddPalindromes\
    \ []interface{}\n    var i int\n    var j int\n    for i = n - 1; i >= 0; i--\
    \ {\n        for (j = i; j >= 0; j-- {\n            if ((i-n) % 2 == 0 && (j-n)\
    \ % 2 != 0) {\n                if ((i + j) % 2 == 0) {\n                    evenPalindromes\
    \ = append(evenPalindromes, i+j)\n                } else {\n                 \
    \   oddPalindromes = append(oddPalindromes, i+j)\n                }\n        \
    \        break\n            }\n        }\n    }\n    return evenPalindromes +\
    \ oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpceprvjpz_test.go:29:16: expected ''=='', found ''=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074255
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    var evenPal = []interface{}{}\n    var oddPal = []interface{}{}\n\
    \n    for i := 1; i < n; i++ {\n        // reverse the string and get its length\n\
    \        string := revString(nil)\n        strLen := len(string)\n        // check\
    \ if the string is even or odd\n        if string[strLen/2] == '\\\\' {\n    \
    \        evenPal = append(evenPal, i)\n        } else {\n            oddPal =\
    \ append(oddPal, i)\n        }\n    }\n    return evenPal\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi86m748y_test.go:29:19: undefined: revString

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindrome := make([]interface{}, 0, n)\n    oddPalindrome\
    \ := make([]interface{}, 0, n)\n    i := 1\n    for i <= n {\n        if n % i\
    \ == 0 {\n            if string(make([]rune, 0, i)) != string(make([]rune, 0,\
    \ int(n/i))) && int(n/i) != 0 {\n                evenPalindrome = append(evenPalindrome,\
    \ i)\n            }\n            if int(n/i) % 2 == 0 {\n                oddPalindrome\
    \ = append(oddPalindrome, i)\n            }\n        }\n        i++\n    }\n \
    \   return evenPalindrome\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n\
    \  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Palindrome (0.00s)\n    --- FAIL: TestEven_Odd_Palindrome/test_num__0\
    \ (0.00s)\n        tmpw7istq6n_test.go:61: expected '[%!s(int=8) %!s(int=13)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__1 (0.00s)\n      \
    \  tmpw7istq6n_test.go:61: expected '[%!s(int=4) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestEven_Odd_Palindrome/test_num__2 (0.00s)\n        tmpw7istq6n_test.go:61:\
    \ expected '[%!s(int=1) %!s(int=2)]', got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__3\
    \ (0.00s)\n        tmpw7istq6n_test.go:61: expected '[%!s(int=6) %!s(int=8)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__4 (0.00s)\n      \
    \  tmpw7istq6n_test.go:61: expected '[%!s(int=5) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestEven_Odd_Palindrome/test_num__5 (0.00s)\n        tmpw7istq6n_test.go:61:\
    \ expected '[%!s(int=4) %!s(int=6)]', got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__6\
    \ (0.00s)\n        tmpw7istq6n_test.go:61: expected '[%!s(int=4) %!s(int=5)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__7 (0.00s)\n      \
    \  tmpw7istq6n_test.go:61: expected '[%!s(int=0) %!s(int=1)]', got '[]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    if n <= 0 {\n        return nil\n    }\n    odd, even,\
    \ i := 0, 1, 1\n    result := []interface{}{}\n    for odd_palindrome := true;\
    \ odd_palindrome && i <= n; i++ {\n        odd_palindrome = false\n        for\
    \ even > 0 && i >= 1; i-- {\n            if even%2 == 0 {\n                if\
    \ odd_palindrome {\n                    odd = 1\n                } else {\n  \
    \                  even = 1\n                }\n            } else {\n       \
    \         if odd_palindrome {\n                    odd = 1\n                }\
    \ else {\n                    even = 1\n                }\n            }\n   \
    \     }\n        if odd_palindrome {\n            result = append(result, odd)\n\
    \        } else {\n            result = append(result, even)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpo8yi1yuw_test.go:31:33: expected boolean or range expression, found simple
    statement (missing parentheses around composite literal?)

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074255
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    // Your code here\n    oddPalindromes := make([]interface{},\
    \ 0)\n    evenPalindromes := make([]interface{}, 0)\n\n    for i := 1; i <= n;\
    \ i++ {\n        oddPalindrome := fmt.Sprintf(\"%d\", i)\n        isOdd := strings.HasSuffix(oddPalindrome,\
    \ \"1\")\n        if isOdd {\n            oddPalindromes = append(oddPalindromes,\
    \ oddPalindrome)\n        } else {\n            evenPalindromes = append(evenPalindromes,\
    \ oddPalindrome)\n        }\n    }\n    return evenPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1j_z1koj_test.go:30:18: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074255
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    result := make([]interface{}, 0, 2)\n    for i :=\
    \ 1; i <= n; i++ {\n        if i%2 == 0 {\n            palindrome := make([]int,\
    \ len(i)/2)\n            palindrome = append(palindrome, i, i-1)\n           \
    \ for index := range palindrome {\n                if palindrome[index] != palindrome[index-1]\
    \ {\n                    result = append(result, palindrome[index])\n        \
    \        }\n            }\n        }\n    }\n    return result\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq3eopeby_test.go:27:43: invalid argument: i (variable of type int) for
    len

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    // Write your code here\n    even_list := []interface{}{}\n\
    \    odd_list := []interface{}{}\n    for i := 0; i < n; i++ {\n        odd_list\
    \ = append(odd_list, i)\n    }\n    for i := n - 1; i > 0; i-- {\n        even_list\
    \ = append(even_list, i)\n    }\n    return even_list\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Palindrome (0.00s)\n    --- FAIL: TestEven_Odd_Palindrome/test_num__0\
    \ (0.00s)\n        tmpu72s13u8_test.go:56: expected '[%!s(int=8) %!s(int=13)]',\
    \ got '[%!s(int=122) %!s(int=121) %!s(int=120) %!s(int=119) %!s(int=118) %!s(int=117)\
    \ %!s(int=116) %!s(int=115) %!s(int=114) %!s(int=113) %!s(int=112) %!s(int=111)\
    \ %!s(int=110) %!s(int=109) %!s(int=108) %!s(int=107) %!s(int=106) %!s(int=105)\
    \ %!s(int=104) %!s(int=103) %!s(int=102) %!s(int=101) %!s(int=100) %!s(int=99)\
    \ %!s(int=98) %!s(int=97) %!s(int=96) %!s(int=95) %!s(int=94) %!s(int=93) %!s(int=92)\
    \ %!s(int=91) %!s(int=90) %!s(int=89) %!s(int=88) %!s(int=87) %!s(int=86) %!s(int=85)\
    \ %!s(int=84) %!s(int=83) %!s(int=82) %!s(int=81) %!s(int=80) %!s(int=79) %!s(int=78)\
    \ %!s(int=77) %!s(int=76) %!s(int=75) %!s(int=74) %!s(int=73) %!s(int=72) %!s(int=71)\
    \ %!s(int=70) %!s(int=69) %!s(int=68) %!s(int=67) %!s(int=66) %!s(int=65) %!s(int=64)\
    \ %!s(int=63) %!s(int=62) %!s(int=61) %!s(int=60) %!s(int=59) %!s(int=58) %!s(int=57)\
    \ %!s(int=56) %!s(int=55) %!s(int=54) %!s(int=53) %!s(int=52) %!s(int=51) %!s(int=50)\
    \ %!s(int=49) %!s(int=48) %!s(int=47) %!s(int=46) %!s(int=45) %!s(int=44) %!s(int=43)\
    \ %!s(int=42) %!s(int=41) %!s(int=40) %!s(int=39) %!s(int=38) %!s(int=37) %!s(int=36)\
    \ %!s(int=35) %!s(int=34) %!s(int=33) %!s(int=32) %!s(int=31) %!s(int=30) %!s(int=29)\
    \ %!s(int=28) %!s(int=27) %!s(int=26) %!s(int=25) %!s(int=24) %!s(int=23) %!s(int=22)\
    \ %!s(int=21) %!s(int=20) %!s(int=19) %!s(int=18) %!s(int=17) %!s(int=16) %!s(int=15)\
    \ %!s(int=14) %!s(int=13) %!s(int=12) %!s(int=11) %!s(int=10) %!s(int=9) %!s(int=8)\
    \ %!s(int=7) %!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n\
    \    --- FAIL: TestEven_Odd_Palindrome/test_num__1 (0.00s)\n        tmpu72s13u8_test.go:56:\
    \ expected '[%!s(int=4) %!s(int=6)]', got '[%!s(int=11) %!s(int=10) %!s(int=9)\
    \ %!s(int=8) %!s(int=7) %!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=1)]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__2 (0.00s)\n  \
    \      tmpu72s13u8_test.go:56: expected '[%!s(int=1) %!s(int=2)]', got '[%!s("
  timestamp: 1660074255
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    even_palindromes := make([]interface{}, 0)\n    odd_palindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        if palindromeIsEven(i)\
    \ {\n            even_palindromes = append(even_palindromes, i)\n        } else\
    \ {\n            odd_palindromes = append(odd_palindromes, i)\n        }\n   \
    \ }\n    return even_palindromes, odd_palindromes\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbcn5vvxy_test.go:27:12:\
    \ undefined: palindromeIsEven\n/tmp/tmpbcn5vvxy_test.go:33:30: too many return\
    \ values\n\thave ([]interface{}, []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    // Write your code here\n    res := make([]interface{},\
    \ 0, 2)\n    if n < 1 {\n        return res\n    }\n    odd := 0\n    for n >=\
    \ 2 {\n        if n & 1 == 1 {\n            odd = odd+1\n        }\n        n\
    \ >>= 1\n    }\n    even := n\n    for even >= 2 {\n        if even & 1 == 1 {\n\
    \            even = even-1\n        }\n        even >>= 1\n    }\n    even = even\n\
    \    if even >= 1 {\n        res = append(res, even)\n    }\n    if odd>0 {\n\
    \        res = append(res, odd)\n    }\n    return res\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Palindrome (0.00s)\n    --- FAIL: TestEven_Odd_Palindrome/test_num__0\
    \ (0.00s)\n        tmpoqde4qj4_test.go:73: expected '[%!s(int=8) %!s(int=13)]',\
    \ got '[%!s(int=1) %!s(int=5)]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__1\
    \ (0.00s)\n        tmpoqde4qj4_test.go:73: expected '[%!s(int=4) %!s(int=6)]',\
    \ got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__2\
    \ (0.00s)\n        tmpoqde4qj4_test.go:73: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__3\
    \ (0.00s)\n        tmpoqde4qj4_test.go:73: expected '[%!s(int=6) %!s(int=8)]',\
    \ got '[%!s(int=1) %!s(int=5)]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__4\
    \ (0.00s)\n        tmpoqde4qj4_test.go:73: expected '[%!s(int=5) %!s(int=6)]',\
    \ got '[%!s(int=1) %!s(int=2)]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__5\
    \ (0.00s)\n        tmpoqde4qj4_test.go:73: expected '[%!s(int=4) %!s(int=6)]',\
    \ got '[%!s(int=1) %!s(int=2)]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__6\
    \ (0.00s)\n        tmpoqde4qj4_test.go:73: expected '[%!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__7\
    \ (0.00s)\n        tmpoqde4qj4_test.go:73: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    if n <= 0 {\n        return nil\n    }\n    result\
    \ := []interface{}{}\n    evenPalindromes := getEvenPalindromes(n)\n    oddPalindromes\
    \ := getOddPalindromes(n)\n    for _, p := range evenPalindromes {\n        result\
    \ = append(result, p)\n    }\n    for _, p := range oddPalindromes {\n       \
    \ result = append(result, p)\n    }\n    return result\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdvj_mx3i_test.go:28:24: undefined: getEvenPalindromes

    /tmp/tmpdvj_mx3i_test.go:29:23: undefined: getOddPalindromes

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    if n < 1 {\n        return nil\n    }\n    if n ==\
    \ 1 {\n        return nil\n    }\n    if n%2 == 0 {\n        return nil\n    }\n\
    \n    var ret []interface{}\n    var temp int = 0\n\n    for i := 1; i <= n/2;\
    \ i++ {\n        temp = ((n*n-i) * (n*n-i))\n        if temp == n {\n        \
    \    ret = append(ret, i)\n        }\n        if temp % 2 == 0 {\n           \
    \ ret = append(ret, i)\n        }\n    }\n\n    if temp != n {\n        ret =\
    \ append(ret, temp)\n    }\n\n    return ret\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Palindrome (0.00s)\n    --- FAIL: TestEven_Odd_Palindrome/test_num__0\
    \ (0.00s)\n        tmp72_a14mw_test.go:74: expected '[%!s(int=8) %!s(int=13)]',\
    \ got '[%!s(int=1) %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)\
    \ %!s(int=15) %!s(int=17) %!s(int=19) %!s(int=21) %!s(int=23) %!s(int=25) %!s(int=27)\
    \ %!s(int=29) %!s(int=31) %!s(int=33) %!s(int=35) %!s(int=37) %!s(int=39) %!s(int=41)\
    \ %!s(int=43) %!s(int=45) %!s(int=47) %!s(int=49) %!s(int=51) %!s(int=53) %!s(int=55)\
    \ %!s(int=57) %!s(int=59) %!s(int=61) %!s(int=227044624)]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__1\
    \ (0.00s)\n        tmp72_a14mw_test.go:74: expected '[%!s(int=4) %!s(int=6)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__2 (0.00s)\n      \
    \  tmp72_a14mw_test.go:74: expected '[%!s(int=1) %!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=64)]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__3 (0.00s)\n \
    \       tmp72_a14mw_test.go:74: expected '[%!s(int=6) %!s(int=8)]', got '[%!s(int=1)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15)\
    \ %!s(int=17) %!s(int=19) %!s(int=21) %!s(int=23) %!s(int=25) %!s(int=27) %!s(int=29)\
    \ %!s(int=31) %!s(int=15507844)]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__4\
    \ (0.00s)\n        tmp72_a14mw_test.go:74: expected '[%!s(int=5) %!s(int=6)]',\
    \ got '[%!s(int=1) %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=375769)]'\n\
    \    --- FAIL: TestEven_Odd_Palindrome/test_num__5 (0.00s)\n        tmp72_a14mw_test.go:74:\
    \ expected '[%!s(int=4) %!s(int=6)]', got '[%!s(int=1) %!s(int=3) %!s(int=5) %!s(int=7)\
    \ %!s(int=9) %!s(int=123904)]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__6\
    \ (0.00s)\n        tmp72_a14mw_test.go:74: expected '[%!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=3) %!s(int=5929)]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__7\
    \ (0.00s)\n        tmp72_a14mw_test.go:74: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of\
    \ even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    odd_even := make([]interface{}, 2*n-1)\n\n    i :=\
    \ 0\n    for i < n {\n        if i == n {\n            break\n        }\n    \
    \    if i%2 == 0 {\n            odd_even[i] = i\n            i += 2\n        }\
    \ else {\n            odd_even[i] = 2*i - 1\n            i += 2\n        }\n \
    \   }\n\n    even_odd_palindrome := make([]interface{}, 0)\n    for i, j := 0,\
    \ len(odd_even)-1; i < j; i, j = i+2, j-1 {\n        if odd_even[i] == odd_even[j]\
    \ {\n            even_odd_palindrome = append(even_odd_palindrome, odd_even[i])\n\
    \        }\n    }\n\n    return even_odd_palindrome\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Palindrome (0.00s)\n    --- FAIL: TestEven_Odd_Palindrome/test_num__0\
    \ (0.00s)\n        tmpta8eict4_test.go:70: expected '[%!s(int=8) %!s(int=13)]',\
    \ got '[<nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil>\
    \ <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil>]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__1\
    \ (0.00s)\n        tmpta8eict4_test.go:70: expected '[%!s(int=4) %!s(int=6)]',\
    \ got '[<nil> <nil>]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__2 (0.00s)\n\
    \        tmpta8eict4_test.go:70: expected '[%!s(int=1) %!s(int=2)]', got '[]'\n\
    \    --- FAIL: TestEven_Odd_Palindrome/test_num__3 (0.00s)\n        tmpta8eict4_test.go:70:\
    \ expected '[%!s(int=6) %!s(int=8)]', got '[<nil> <nil> <nil> <nil> <nil> <nil>\
    \ <nil> <nil> <nil> <nil>]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__4\
    \ (0.00s)\n        tmpta8eict4_test.go:70: expected '[%!s(int=5) %!s(int=6)]',\
    \ got '[<nil> <nil> <nil>]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__5\
    \ (0.00s)\n        tmpta8eict4_test.go:70: expected '[%!s(int=4) %!s(int=6)]',\
    \ got '[<nil> <nil>]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__6 (0.00s)\n\
    \        tmpta8eict4_test.go:70: expected '[%!s(int=4) %!s(int=5)]', got '[<nil>]'\n\
    \    --- FAIL: TestEven_Odd_Palindrome/test_num__7 (0.00s)\n        tmpta8eict4_test.go:70:\
    \ expected '[%!s(int=0) %!s(int=1)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074256
