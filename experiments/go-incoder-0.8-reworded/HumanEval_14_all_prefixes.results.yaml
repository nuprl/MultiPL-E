language: go_test.go
name: HumanEval_14_all_prefixes
results:
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var prefix []string\n    for _, s := range myString\
    \ {\n        for _, r := range s {\n            prefix = append(prefix, r)\n \
    \       }\n    }\n    return prefix\n}\n\nfunc TestAll_Prefixes(t *testing.T)\
    \ {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"), expected:\
    \ []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     {\
    \ actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptv_x4mv1_test.go:14:27: cannot range over s (variable of type rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075358
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var prefixes []string\n    var myStringLen int\n   \
    \ for _, prefix := range myString {\n        myStringLen++\n    }\n    for i :=\
    \ 0; i < myStringLen; i++ {\n        for _, prefix := range myString {\n     \
    \       if i > 0 && myStringLen <= myString.LastIndexOf(prefix) {\n          \
    \      prefixes = append(prefixes, prefix)\n            }\n        }\n    }\n\
    \    return prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate\
    \ := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"asdfgh\"), expected: []string{\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"\
    WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0gc1gh73_test.go:14:12: prefix declared but not used

    /tmp/tmp0gc1gh73_test.go:19:49: myString.LastIndexOf undefined (type string has
    no field or method LastIndexOf)

    /tmp/tmp0gc1gh73_test.go:20:45: cannot use prefix (variable of type rune) as type
    string in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075358
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    if myString == \"\" {\n   \
    \     return result\n    }\n    length := len(myString)\n    prefix := myString[:length-1]\n\
    \    for i := 0; i < length; i++ {\n        prefix += myString[i]\n        if\
    \ strings.Contains(myString, prefix) {\n            result = append(result, prefix)\n\
    \        }\n    }\n    return result\n}\n\nfunc TestAll_Prefixes(t *testing.T)\
    \ {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"), expected:\
    \ []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     {\
    \ actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmps5p4atp4_test.go:19:9: invalid operation: prefix += myString[i] (mismatched
    types string and byte)

    /tmp/tmps5p4atp4_test.go:20:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075358
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    myString += myString\n    myString += myString\n   \
    \ myString = myString[0:len(myString) - 1]\n    myString = myString[0:len(myString)\
    \ - 1]\n    myString += myString\n    myString = myString[0:len(myString) - 1]\n\
    \    myString += myString\n    myString = myString[0:len(myString) - 1]\n    myString\
    \ = myString[0:len(myString) - 1]\n    myString = myString[0:len(myString) - 1]\n\
    \    myString = myString[0:len(myString) - 1]\n    return myString\n}\n\nfunc\
    \ TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"\
    asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"\
    WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgurqqj8z_test.go:23:12: cannot use myString (variable of type string)
    as type []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075358
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    prefixes := []string{}\n    for _, s := range myString\
    \ {\n        prefixes = append(prefixes, s)\n        prefixes = append(prefixes,\
    \ all_prefixes(s)...)\n    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb8e96_jr_test.go:14:37: cannot use s (variable of type rune) as type string
    in argument to append

    /tmp/tmpb8e96_jr_test.go:15:50: cannot use s (variable of type rune) as type string
    in argument to all_prefixes

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075358
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    shortest := myString\n    longest\
    \ := myString\n\n    shortest = myString[0:len(shortest)]\n    longest = myString[0:len(myString)]\n\
    \n    for {\n        if shortest == myString {\n            break\n        }\n\
    \        if longest == myString {\n            break\n        }\n        if shortest\
    \ < myString {\n            shortest = myString[0:len(shortest)]\n        }\n\
    \        if longest > myString {\n            longest = myString[0:len(myString)]\n\
    \        }\n        result = append(result, shortest)\n        result = append(result,\
    \ longest)\n    }\n\n    return result\n}\n\nfunc TestAll_Prefixes(t *testing.T)\
    \ {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"), expected:\
    \ []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     {\
    \ actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmpdzzwtage_test.go:54: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n        tmpdzzwtage_test.go:54:\
    \ expected '[W WW WWW]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075358
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    ret := []string{}\n    if len(myString) < 3 { return\
    \ ret }\n    for _, prefix := range all_prefixes_test{\n        prefix := prefix\n\
    \        fmt.Printf(\"Testing prefix: %s\\n\", prefix)\n        prefix += myString[0:len(myString)/2]\n\
    \        prefix += myString[len(myString)/2:]\n        fmt.Printf(\"Testing prefix:\
    \ %s\\n\", prefix)\n        if myString == prefix {\n            ret = append(ret,\
    \ prefix)\n        }\n    }\n    return ret\n}\n\nfunc TestAll_Prefixes(t *testing.T)\
    \ {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"), expected:\
    \ []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     {\
    \ actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxgm0tser_test.go:14:28: undefined: all_prefixes_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075358
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    prefixes := []string{}\n    for i := 0; i <= len(myString);\
    \ i++ {\n        prefixes = append(prefixes, myString[:i])\n    }\n    return\
    \ prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmpms02jz63_test.go:34: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg asdfgh]'\n    --- FAIL: TestAll_Prefixes/test_num__2\
    \ (0.00s)\n        tmpms02jz63_test.go:34: expected '[W WW WWW]', got '[ W WW\
    \ WWW]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075358
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var mySlice = strings.Split(myString, \"\")\n    longest,\
    \ prefixes := len(mySlice), []string{}\n    for _, s := range mySlice {\n    \
    \    if len(s) >= longest {\n            longest = len(s)\n            prefixes\
    \ = append(prefixes, s)\n        }\n    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpylcyc6s7_test.go:12:19: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075358
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    chars := myString\n    var prefixes []string\n    var\
    \ currentPrefix string\n    for _, i := range chars {\n        currentPrefix =\
    \ currentPrefix + \"a\"\n        prefixes = append(prefixes, currentPrefix)\n\
    \    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate\
    \ := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"asdfgh\"), expected: []string{\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"\
    WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0ab0f94v_test.go:15:12: i declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075358
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    result := append(result, myString[0:0])\n\
    \    for i := 1; i < len(myString); i++ {\n        result = append(result, myString[0:i])\n\
    \    }\n    return result\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate\
    \ := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"asdfgh\"), expected: []string{\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"\
    WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzct0pax5_test.go:13:12: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075358
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := len(myString); i >=\
    \ 0; i-- {\n        result = append(result, myString[0:i])\n    }\n    return\
    \ result\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmpuoe5it41_test.go:34: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[asdfgh asdfg asdf asd as a ]'\n    --- FAIL: TestAll_Prefixes/test_num__2\
    \ (0.00s)\n        tmpuoe5it41_test.go:34: expected '[W WW WWW]', got '[WWW WW\
    \ W ]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075358
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    allPrefixes := []string{}\n\n    for _, prefix := range\
    \ allPrefixes {\n        if myString == prefix {\n            return allPrefixes\n\
    \        }\n        allPrefixes = append(allPrefixes, prefix)\n    }\n\n    return\
    \ allPrefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmp4vuvstgv_test.go:39: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n        tmp4vuvstgv_test.go:39:\
    \ expected '[W WW WWW]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075358
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    prefixes := make([]string, 0)\n    prefix := myString\n\
    \    repeat := true\n\n    for repeat {\n        repeat = false\n        // Get\
    \ first letter of next prefix\n        firstLetter := myString[0]\n        //\
    \ Remove first letter from next prefix\n        myString = myString[1:]\n\n  \
    \      // Add prefix to prefixes if next prefix prefix contains first letter\n\
    \        for i := 0; i < len(prefix); i++ {\n            if prefix[i] == firstLetter\
    \ {\n                prefix = prefix[:i]\n                repeat = true\n    \
    \            break\n            }\n        }\n\n        if prefix != \"\" {\n\
    \            prefixes = append(prefixes, prefix)\n        }\n    }\n\n    return\
    \ prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\npanic: runtime error: index out of\
    \ range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range\
    \ [0] with length 0\n\ngoroutine 34 [running]:\ntesting.tRunner.func1.2({0x513700,\
    \ 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513700, 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.all_prefixes(...)\n\t/tmp/tmpptvpuetc_test.go:19\n\
    command-line-arguments_test.TestAll_Prefixes(0x0?)\n\t/tmp/tmpptvpuetc_test.go:47\
    \ +0x81d\ntesting.tRunner(0xc000198ea0, 0x529040)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075358
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    prefixes := []string{}\n    for i := 0; i < len(myString);\
    \ i++ {\n        prefixes = append(prefixes, myString[:i])\n    }\n    return\
    \ prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmpuk6v1ygy_test.go:34: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmpuk6v1ygy_test.go:34: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075233
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    prefix := myString\n    prefix := prefix[:len(myString)]\n\
    \    result := []string{}\n    for i := 0; i < len(myString); i++ {\n        result\
    \ := append(result, prefix[:i])\n        prefix = prefix[i:]\n    }\n    return\
    \ result\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4zn7hmbe_test.go:13:12: no new variables on left side of :=

    /tmp/tmp4zn7hmbe_test.go:16:9: result declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075358
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var all_prefixes []string\n    prefix := myString[0]\n\
    \    for _, char := range myString {\n        all_prefixes = append(all_prefixes,\
    \ prefix)\n        prefix = prefix + char\n    }\n    return all_prefixes\n}\n\
    \nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5u_kqusb_test.go:15:45: cannot use prefix (variable of type byte) as type
    string in argument to append

    /tmp/tmp5u_kqusb_test.go:16:18: invalid operation: prefix + char (mismatched types
    byte and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075358
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    length := len(myString)\n    result := make([]string,\
    \ length+1)\n    for i := 0; i < length; i++ {\n        result[i] = myString[0:i]\n\
    \    }\n    result[len(myString)] = myString\n    return result\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmpa3f8g_oe_test.go:36: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg asdfgh]'\n    --- FAIL: TestAll_Prefixes/test_num__2\
    \ (0.00s)\n        tmpa3f8g_oe_test.go:36: expected '[W WW WWW]', got '[ W WW\
    \ WWW]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075358
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    result := make([]string, len(myString))\n    for i :=\
    \ 0; i < len(myString); i++ {\n        result[i] = myString[0:i]\n    }\n    return\
    \ result\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmpwa8_s9ul_test.go:34: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmpwa8_s9ul_test.go:34: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075359
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    allPrefixes := []string{}\n    allPrefixes = append(allPrefixes,\
    \ myString[:len(myString)/2])\n    allPrefixes = append(allPrefixes, all_prefixes(myString[len(myString)/2:]))\n\
    \    return allPrefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate\
    \ := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"asdfgh\"), expected: []string{\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"\
    WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6cmquegq_test.go:14:39: cannot use all_prefixes(myString[len(myString)
    / 2:]) (value of type []string) as type string in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075358
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    return all_prefixes_test(myString).results\n}\n\nfunc\
    \ TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"\
    asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"\
    WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqo3fscs8_test.go:12:12: undefined: all_prefixes_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075358
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var prefixes []string\n    currentIndex := 0\n    for\
    \ {\n        if currentIndex == len(myString) {\n            prefixes = append(prefixes,\
    \ myString[currentIndex:])\n            break\n        }\n        prefixes = append(prefixes,\
    \ myString[currentIndex:currentIndex+len(myString[currentIndex])])\n        currentIndex\
    \ += len(myString[currentIndex])\n    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvftcvx6w_test.go:19:76: invalid argument: myString[currentIndex] (value
    of type byte) for len

    /tmp/tmpvftcvx6w_test.go:20:29: invalid argument: myString[currentIndex] (value
    of type byte) for len

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075358
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var prefixes []string\n    myString = \"_\" + myString\
    \ + \"_\"\n    longestPrefix, _ := longestPrefix(myString)\n    for i := 0; i\
    \ <= longestPrefix; i++ {\n        prefixes = append(prefixes, myString[0:i])\n\
    \    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate\
    \ := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"asdfgh\"), expected: []string{\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"\
    WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzxoyu4fz_test.go:14:25: undefined: longestPrefix

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075358
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    // Return []string with first and last character of\
    \ the string\n    lengthString := len(myString)\n    prefixes := make([]string,\
    \ 0, lengthString+1)\n    if lengthString == 0 {\n        return []string{}\n\
    \    }\n\n    prefixes[0] = myString[0]\n    for i := 1; i < lengthString; i++\
    \ {\n        prefixes[i] = myString[0:i]\n    }\n\n    return prefixes\n}\n\n\
    func TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjh9fswt0_test.go:19:19: cannot use myString[0] (value of type byte) as
    type string in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075358
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    prefixes := []string{}\n    for i := 0; i < len(myString);\
    \ i++ {\n        prefix := myString[0:i]\n        prefixes = append(prefixes,\
    \ prefix)\n    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T)\
    \ {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"), expected:\
    \ []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     {\
    \ actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmp9mwdseg__test.go:35: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmp9mwdseg__test.go:35: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075360
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    result := []string{}\n    \n    prefix := \"\"\n   \
    \ for i := 0; i < len(myString); i++ {\n        if myString[i] != myString[len(prefix)]\
    \ {\n            result = append(result, prefix)\n            prefix = myString[i]\n\
    \        }\n    }\n    \n    result = append(result, prefix)\n    \n    return\
    \ result\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo5vggabz_test.go:18:22: cannot use myString[i] (value of type byte) as
    type string in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075360
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var prefixes []string\n    if myString == \"\" {\n \
    \       return prefixes\n    }\n    shortest := myString\n    longest := myString\n\
    \    if len(myString) < 3 {\n        return prefixes\n    }\n    for i := 1; i\
    \ <= len(myString); i++ {\n        shortest = myString[:i]\n        longest =\
    \ myString[i:]\n        prefixes = append(prefixes, all_prefixes(shortest))\n\
    \        prefixes = append(prefixes, all_prefixes(longest))\n    }\n    return\
    \ prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2qhhkah1_test.go:24:37: cannot use all_prefixes(shortest) (value of type
    []string) as type string in argument to append

    /tmp/tmp2qhhkah1_test.go:25:37: cannot use all_prefixes(longest) (value of type
    []string) as type string in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075360
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    // Find length of longest prefix first\n    prefixes\
    \ := make([]string, 0)\n    longest := \"\"\n    longestLen := 0\n    for i :=\
    \ 0; i < len(myString); i++ {\n        if myString[i] != myString[0] {\n     \
    \       if longestLen > 0 {\n                prefixes = append(prefixes, longest)\n\
    \            }\n            longest = myString[i]\n            longestLen = 1\n\
    \        } else {\n            longestLen++\n        }\n    }\n    prefixes =\
    \ append(prefixes, longest)\n\n    // Now generate all possible prefixes from\
    \ longest to shortest\n    for i := 0; i < len(prefixes); i++ {\n        if i\
    \ > 0 {\n            prefixes[i] += \"-\"\n        }\n        prefixes[i] += prefixes[i-1]\n\
    \    }\n\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate\
    \ := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"asdfgh\"), expected: []string{\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"\
    WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1rhaw59t_test.go:21:23: cannot use myString[i] (value of type byte) as
    type string in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075360
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    shortest := myString\n    longest := myString\n\n  \
    \  for {\n        shortest = longest[0:len(shortest)-1]\n        longest = longest[len(shortest)-1:]\n\
    \n        if shortest == \"\" {\n            break\n        }\n\n        if longest\
    \ != \"\" {\n            break\n        }\n    }\n\n    if shortest == \"\" {\n\
    \        return []string{shortest, longest}\n    }\n\n    return all_prefixes(shortest)\
    \ + all_prefixes(longest)\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate\
    \ := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"asdfgh\"), expected: []string{\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"\
    WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgskh_dr4_test.go:32:12: invalid operation: operator + not defined on all_prefixes(shortest)
    (value of type []string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075360
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    l := len(myString)\n    var prefixes []string\n\n  \
    \  if l == 0 {\n        return prefixes\n    }\n\n    prefixes = append(prefixes,\
    \ myString[:len(myString)])\n\n    for i := 1; i <= l && len(myString) > 0; i++\
    \ {\n        prefixes = append(prefixes, myString[:i+1])\n    }\n\n    return\
    \ prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [:7] with length 6 [recovered]\n\tpanic: runtime error: slice bounds\
    \ out of range [:7] with length 6\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513700,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.all_prefixes(...)\n\t/tmp/tmpisegj_ii_test.go:22\n\
    command-line-arguments_test.TestAll_Prefixes(0x0?)\n\t/tmp/tmpisegj_ii_test.go:36\
    \ +0x534\ntesting.tRunner(0xc0001964e0, 0x529040)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075360
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    myString = strings.ToLower(myString)\n    prefixes :=\
    \ make([]string, len(myString))\n    for i := range prefixes {\n        prefixes[i]\
    \ = strings.Repeat(myString[i], len(myString) - i)\n    }\n    return prefixes\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpquz1sbpf_test.go:12:16: undefined: strings

    /tmp/tmpquz1sbpf_test.go:15:23: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075360
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var all_prefixes = []string{}\n\n    for _, prefix :=\
    \ range all_prefixes_(myString) {\n        all_prefixes = append(all_prefixes,\
    \ prefix)\n    }\n\n    return all_prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T)\
    \ {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"), expected:\
    \ []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     {\
    \ actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9v2vgeci_test.go:14:28: undefined: all_prefixes_

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075360
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var prefixes []string\n    var longest = myString\n\
    \    var shortest := myString\n\n    for i := 0; i < len(myString); i++ {\n  \
    \      if i == 0 {\n            shortest = myString\n        } else {\n      \
    \      if myString[i] > myString[i-1] {\n                shortest = myString[:i]\n\
    \                longest = myString[i:]\n            }\n        }\n        prefixes\
    \ = append(prefixes, shortest)\n    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpxpadc17k_test.go:14:18: expected '';'', found '':=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075359
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var list []string\n    for i := 0; i < len(myString);\
    \ i++ {\n        for j := i; j < len(myString); j++ {\n            if myString[i:j]\
    \ == myString[:i] {\n                list = append(list, myString[i:j])\n    \
    \        }\n        }\n    }\n    return list\n}\n\nfunc TestAll_Prefixes(t *testing.T)\
    \ {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"), expected:\
    \ []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     {\
    \ actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmpvensymtq_test.go:38: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n        tmpvensymtq_test.go:38:\
    \ expected '[W WW WWW]', got '[ W]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075360
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n\n    if myString == \"\" {\n \
    \       return result\n    }\n\n    firstPrefix := myString[0:len(myString)-1]\n\
    \    result = append(result, firstPrefix)\n\n    for i := len(firstPrefix); i\
    \ < len(myString); i++ {\n        result = append(result, myString[:i] + myString[i+1:])\n\
    \    }\n\n    return result\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate\
    \ := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"asdfgh\"), expected: []string{\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"\
    WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmpiv24q0sy_test.go:43: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[asdfg asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n  \
    \      tmpiv24q0sy_test.go:43: expected '[W WW WWW]', got '[WW WW]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075360
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    if myString == \"\" {\n        return []string{\"\"\
    }\n    }\n\n    prefix := []string{}\n    for len(myString) > 0 {\n        myString\
    \ = myString[1:]\n        prefix = append(prefix, myString...)\n    }\n\n    return\
    \ prefix\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpac9roldz_test.go:19:33: cannot use myString (variable of type string)
    as type []string in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075360
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    // Return empty list if empty string\n    if len(myString)\
    \ == 0 {\n        return []string{}\n    }\n    \n    // Return list of all prefixes\
    \ of length 1 starting from given letter\n    var prefixes []string\n    for _,\
    \ letter := range myString {\n        prefixes = append(prefixes, myString[0:letter+1])\n\
    \    }\n    \n    // Return list of all prefixes of length 2 starting from given\
    \ letter\n    for _, letter := range myString {\n        if letter != 0 {\n  \
    \          for _, prefix2 := range prefixes {\n                prefixes = append(prefixes,\
    \ prefix2[0:letter+1])\n            }\n        }\n    }\n    \n    return prefixes\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [:98] with length 6 [recovered]\n\tpanic: runtime error: slice\
    \ bounds out of range [:98] with length 6\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513700,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.all_prefixes(...)\n\t/tmp/tmpeheavz9o_test.go:20\n\
    command-line-arguments_test.TestAll_Prefixes(0x0?)\n\t/tmp/tmpeheavz9o_test.go:43\
    \ +0x989\ntesting.tRunner(0xc0001a0340, 0x529040)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075360
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var allPrefixes []string\n\n    for i := range myString\
    \ {\n        allPrefixes = append(allPrefixes, myString[0:i])\n    }\n\n    return\
    \ allPrefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmp8lops1lg_test.go:36: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmp8lops1lg_test.go:36: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075360
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    return prefixes(myString, 0, len(myString))\n}\n\nfunc\
    \ TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"\
    asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"\
    WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9ave81qf_test.go:12:12: undefined: prefixes

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075360
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    lenLongest := len(myString)\n    prefixes := make([]string,\
    \ lenLongest)\n    for i, letter := range myString {\n        if i > 0 {\n   \
    \         if letter != myString[i-1] {\n                prefixes = append(prefixes,\
    \ letter)\n            }\n        } else {\n            prefixes = append(prefixes,\
    \ letter)\n        }\n    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc6xt1s7i_test.go:16:26: invalid operation: letter != myString[i - 1] (mismatched
    types rune and byte)

    /tmp/tmpc6xt1s7i_test.go:17:45: cannot use letter (variable of type rune) as type
    string in argument to append

    /tmp/tmpc6xt1s7i_test.go:20:41: cannot use letter (variable of type rune) as type
    string in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075360
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    prefixes := []string{}\n    length := len(myString)\n\
    \    for i := 0; i <= length; i++ {\n        prefixes = append(prefixes, myString[0:i])\n\
    \    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate\
    \ := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"asdfgh\"), expected: []string{\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"\
    WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmp4mlybk3t_test.go:35: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg asdfgh]'\n    --- FAIL: TestAll_Prefixes/test_num__2\
    \ (0.00s)\n        tmp4mlybk3t_test.go:35: expected '[W WW WWW]', got '[ W WW\
    \ WWW]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075361
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    result := make([]string, 0)\n    result := append(result,\
    \ myString[:len(myString)-1])\n    for i := len(myString) - 2; i >= 0; i-- {\n\
    \        result := append(result, myString[:i+1])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu761arvr_test.go:13:12: no new variables on left side of :=

    /tmp/tmpu761arvr_test.go:15:9: result declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075361
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    if myString == \"\" {\n        return []string{}\n \
    \   }\n\n    var result []string\n    for i := len(myString) - 1; i >= 0; i--\
    \ {\n        result = append(result, myString[:i+1])\n    }\n\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmp3eee3it__test.go:39: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[asdfgh asdfg asdf asd as a]'\n    --- FAIL: TestAll_Prefixes/test_num__2\
    \ (0.00s)\n        tmp3eee3it__test.go:39: expected '[W WW WWW]', got '[WWW WW\
    \ W]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075361
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    prefixes := []string{\"\"}\n    i := len(myString)\n\
    \    for i -= 1; i > 0; i-- {\n        prefix := myString[0:i]\n        prefixes\
    \ = append(prefixes, prefix)\n    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmppjj_n8yj_test.go:36: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ asdfg asdf asd as a]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmppjj_n8yj_test.go:36: expected '[W WW WWW]', got '[ WW W]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075361
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    prefixes := make([]string, len(myString))\n\n    for\
    \ i := 0; i < len(myString); i++ {\n        prefixes[i] = myString[0:i]\n    }\n\
    \    \n    return prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate\
    \ := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"asdfgh\"), expected: []string{\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"\
    WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmpmpdyn8io_test.go:36: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmpmpdyn8io_test.go:36: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075361
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var myPrefixes []string\n    for i := 0; i < len(myString);\
    \ i++ {\n        prefix := myString[:i]\n        if prefix != myString {\n   \
    \         myPrefixes = append(myPrefixes, prefix)\n        }\n    }\n    return\
    \ myPrefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmp2dtnngkn_test.go:37: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmp2dtnngkn_test.go:37: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075361
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    result := []string{}\n    for i := 1; i < len(myString);\
    \ i++ {\n        result := append(result, myString[0:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsl6qu_3q_test.go:14:9: result declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075361
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    prefix := []string{}\n    i := 0\n    for myString[i]\
    \ != \"\" {\n        prefix = append(prefix, myString[0:i])\n        i += len(myString[i])\n\
    \    }\n    return prefix\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate\
    \ := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"asdfgh\"), expected: []string{\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"\
    WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprw2g2eua_test.go:14:24: invalid operation: myString[i] != "" (mismatched
    types byte and untyped string)

    /tmp/tmprw2g2eua_test.go:16:18: invalid argument: myString[i] (value of type byte)
    for len

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075361
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    result := make([]string, 0)\n    longestLength := len(myString)\n\
    \    // Find first non-prefix character in input string and add prefix to result\n\
    \    for i := 0; longestLength > i; i++ {\n        char, _ := myString[i]\n  \
    \      prefix := string(myString[:i])\n        result = append(result, prefix)\n\
    \        longestLength -= 1\n    }\n    return result // Return result to caller\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_0wfz7sc_test.go:16:20: assignment mismatch: 2 variables but 1 value

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075362
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    lastPrefix := \"\"\n    lastLen := 0\n\n    for _, p\
    \ := range myString {\n        l, n := len(p), 0\n        if n > lastLen {\n \
    \           lastLen = n\n            lastPrefix = p\n        }\n        if n ==\
    \ lastLen {\n            lastPrefix += string(p[:l])\n        }\n    }\n    return\
    \ []string(lastPrefix)\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate\
    \ := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"asdfgh\"), expected: []string{\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"\
    WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3mdx9sgk_test.go:16:21: invalid argument: p (variable of type rune) for
    len

    /tmp/tmp3mdx9sgk_test.go:19:26: cannot use p (variable of type rune) as type string
    in assignment

    /tmp/tmp3mdx9sgk_test.go:22:34: invalid operation: cannot slice p (variable of
    type rune)

    /tmp/tmp3mdx9sgk_test.go:25:21: cannot convert lastPrefix (variable of type string)
    to type []string

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075362
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    result := []string{}\n    for i := 0; i < len(myString);\
    \ i++ {\n        for j := i; j < len(myString); j++ {\n            result := append(result,\
    \ myString[0:i+1])\n        }\n    }\n    return result\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_twm7ztc_test.go:15:13: result declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075362
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    result := []string{}\n    for i := 0; i < len(myString);\
    \ i++ {\n        prefix = myString[0:i]\n        result = append(result, prefix)\n\
    \    }\n    return result\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate\
    \ := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"asdfgh\"), expected: []string{\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"\
    WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr_r22uyc_test.go:14:9: undefined: prefix

    /tmp/tmpr_r22uyc_test.go:15:33: undefined: prefix

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075362
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    ret := make([]string, len(myString))\n    var start\
    \ int\n    for start := 0; start < len(myString); start++ {\n        prefix :=\
    \ myString[start:]\n        for i := start; i < len(myString); i++ {\n       \
    \     ret[i] = prefix + myString[i]\n        }\n    }\n    return ret\n}\n\nfunc\
    \ TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"\
    asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"\
    WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo03zqe0s_test.go:13:9: start declared but not used

    /tmp/tmpo03zqe0s_test.go:17:22: invalid operation: prefix + myString[i] (mismatched
    types string and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075362
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    prefixes := []string{}\n    for i := 0; i < len(myString);\
    \ i++ {\n        prefixes = append(prefixes, myString[0:i])\n    }\n    return\
    \ prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmp7k5sb0b9_test.go:34: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmp7k5sb0b9_test.go:34: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075233
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    allPrefixes := make([]string, 0)\n    for i := len(myString);\
    \ i >= 0; i-- {\n        prefix := myString[0:i]\n        allPrefixes = append(allPrefixes,\
    \ prefix)\n    }\n    return allPrefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T)\
    \ {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"), expected:\
    \ []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     {\
    \ actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmpxdv9rimy_test.go:35: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[asdfgh asdfg asdf asd as a ]'\n    --- FAIL: TestAll_Prefixes/test_num__2\
    \ (0.00s)\n        tmpxdv9rimy_test.go:35: expected '[W WW WWW]', got '[WWW WW\
    \ W ]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075362
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    myStringLen := len(myString)\n    prefixes := make([]string,\
    \ myStringLen)\n    for i := 0; i < myStringLen; i++ {\n        prefixes[i] =\
    \ myString[:i]\n    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T)\
    \ {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"), expected:\
    \ []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     {\
    \ actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmp00eb6k75_test.go:35: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmp00eb6k75_test.go:35: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075362
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    myStrings := make([]string, 0)\n    for myString !=\
    \ \"\" {\n        myStrings = append(myStrings, myString[:len(myString)])\n  \
    \      myString = myString[len(myString):]\n    }\n    return myStrings\n}\n\n\
    func TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmprr3z4u2x_test.go:35: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[asdfgh]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n       \
    \ tmprr3z4u2x_test.go:35: expected '[W WW WWW]', got '[WWW]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075362
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    if myString == \"\" {\n        return []string{}\n \
    \   }\n\n    ret := make([]string, len(myString)/2)\n    for i := range ret {\n\
    \        ret[i] = myString[(i*2): (i*2)+2]\n    }\n\n    return ret\n}\n\nfunc\
    \ TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"\
    asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"\
    WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmp3lidlazn_test.go:39: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[as df gh]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n     \
    \   tmp3lidlazn_test.go:39: expected '[W WW WWW]', got '[WW]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075362
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    prefixes := []string{\"\"}\n    for i := len(myString);\
    \ i >= 0; i-- {\n        prefixes = append(prefixes, myString[0:i])\n    }\n \
    \   return prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate :=\
    \ all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\",\
    \ \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"\
    ), expected: []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__0\
    \ (0.00s)\n        tmpszo3a06o_test.go:34: expected '[]', got '[ ]'\n    --- FAIL:\
    \ TestAll_Prefixes/test_num__1 (0.00s)\n        tmpszo3a06o_test.go:34: expected\
    \ '[a as asd asdf asdfg asdfgh]', got '[ asdfgh asdfg asdf asd as a ]'\n    ---\
    \ FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n        tmpszo3a06o_test.go:34:\
    \ expected '[W WW WWW]', got '[ WWW WW W ]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075363
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    prefix := []string{}\n    shortest := len(myString)\n\
    \    longest := 0\n\n    for {\n        if shortest > 0 {\n            prefix\
    \ := append(prefix, myString[:shortest])\n            myString = myString[shortest:]\n\
    \            shortest = len(myString)\n        }\n\n        if longest < len(myString)\
    \ {\n            prefix := append(prefix, myString[:longest])\n            myString\
    \ = myString[longest:]\n            longest = len(myString)\n        }\n\n   \
    \     if longest == 0 {\n            break\n        }\n    }\n\n    return prefix\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7l1871xv_test.go:18:13: prefix declared but not used

    /tmp/tmp7l1871xv_test.go:24:13: prefix declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075362
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    prefixes := []string{}\n    for _, part := range myString\
    \ {\n        for _, prefix := range prefixes {\n            if part[:len(prefix)]\
    \ == prefix {\n                prefix += part[len(prefix):]\n                break\n\
    \            }\n        }\n        if len(prefixes) < len(myString) {\n      \
    \      prefixes = append(prefixes, prefix)\n        }\n    }\n    return prefixes\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwek0q_hx_test.go:15:16: invalid operation: cannot slice part (variable
    of type rune)

    /tmp/tmpwek0q_hx_test.go:16:27: invalid operation: cannot slice part (variable
    of type rune)

    /tmp/tmpwek0q_hx_test.go:21:41: undefined: prefix

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075362
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    prefix := myString\n    if\
    \ len(myString) == 0 {\n        result = append(result, prefix)\n        return\
    \ result\n    }\n    result := []string{prefix}\n    for i := 1; i <= len(myString);\
    \ i++ {\n        if myString[:i] == prefix {\n            result = append(result,\
    \ myString[:i])\n        }\n    }\n    return result\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa9bkjp21_test.go:18:12: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075362
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    shortest := myString\n    longest := myString\n    shortest\
    \ += \"a\"\n    longest = longest + \"a\"\n\n    allPrefixes := []string{}\n\n\
    \    for len(shortest) < len(longest) {\n        allPrefixes = append(allPrefixes,\
    \ shortest[:len(shortest)])\n        shortest = shortest[len(shortest) + 1:]\n\
    \    }\n    return allPrefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n \
    \ candidate := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: []string{} },\n     { actual: candidate(\"asdfgh\"), expected: []string{\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"\
    WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmporncwc9k_test.go:41: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n        tmporncwc9k_test.go:41:\
    \ expected '[W WW WWW]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075363
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    length := len(myString)\n    if length == 0 {\n    \
    \    return []string{}\n    }\n\n    // Initialize current prefix and remainder\
    \ strings\n    current := myString[:length-1]\n    remainder := myString[:length-1]\n\
    \n    // Initialize result list with current prefix\n    result := make([]string,\
    \ 0)\n    result = append(result, current)\n\n    // Initialize remainder list\
    \ with remainder\n    remainderList := make([]string, 0)\n    remainderList =\
    \ append(remainderList, remainder)\n\n    // Iterate through all possible prefixes\
    \ of current string\n    for i := 0; i < length-len(current); i++ {\n        //\
    \ Add current prefix to result\n        result = append(result, current)\n\n \
    \       // Add current prefix to remainder list\n        remainderList = append(remainderList,\
    \ remainder[:i]+remainder[i+1:])\n\n        // Remove prefix from remainder\n\
    \        remainder = remainder[i:]\n    }\n\n    // Add remainder to result\n\
    \    result = append(result, remainder)\n\n    // Return result\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmplvhmriiz_test.go:63: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[asdfg asdfg asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmplvhmriiz_test.go:63: expected '[W WW WWW]', got '[WW WW WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075363
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    lengths := make([]int, len(myString))\n    var currentLength\
    \ int\n    var currentPrefix string\n    for currentLength = 0; currentLength\
    \ < len(myString); currentLength++ {\n        currentPrefix = myString[:currentLength]\n\
    \        if currentPrefix == \"\" {\n            currentPrefix = currentPrefix[:1]\n\
    \        }\n        if lengths[currentLength] != 0 {\n            for i := 0;\
    \ i < currentLength; i++ {\n                lengths[i] = max(lengths[i], lengths[i+1])\n\
    \            }\n        } else {\n            lengths[currentLength] = 1\n   \
    \     }\n    }\n    result := make([]string, 0, len(lengths))\n    for i := 0;\
    \ i < len(lengths); i++ {\n        currentLength := lengths[i]\n        if currentLength\
    \ == 1 {\n            result := append(result, currentPrefix)\n        } else\
    \ {\n            prefix := currentPrefix\n            for i := 0; i < currentLength;\
    \ i++ {\n                prefix = prefix[:1] + prefix\n            }\n       \
    \     result := append(result, prefix)\n        }\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpayyvpz_q_test.go:22:30: undefined: max

    /tmp/tmpayyvpz_q_test.go:32:13: result declared but not used

    /tmp/tmpayyvpz_q_test.go:38:13: result declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075362
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    // Initialize result list\n    result := make([]string,\
    \ 0)\n\n    // Loop through all letters in myString starting from beginning of\
    \ string\n    for i := 0; i < len(myString); i++ {\n        // Check character\
    \ is prefix\n        if myString[:i] == myString {\n            // Add prefix\n\
    \            result = append(result, myString[:i])\n        }\n    }\n\n    return\
    \ result\n}\n</code>\n<|/ a tags=string,algorithm,go |>\n<| c |>\nPlease don't\
    \ post only code as an answer, but also provide an explanation of what your code\
    \ does and how it solves the problem of the question. Answers with an explanation\
    \ are usually more helpful and of better quality, and are more likely to attract\
    \ upvotes.\n<|/ c |>\n<| a tags=string,algorithm,go |>\n<code>\npackage main\n\
    \nimport (\n    \"bufio\"\n    \"fmt\"\n    \"os\"\n    \"strings\"\n    \"time\"\
    \n)\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps6ir5b4l_test.go:26:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075362
- exit_code: null
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    result := []string{}\n\n    for myString != \"\" {\n\
    \        result = append(result, myString[:len(myString)/2])\n        myString\
    \ = myString[len(myString)/2:]\n    }\n\n    return result\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660075376
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    currentPrefix := \"\"\n    allPrefixes := []string{}\n\
    \    allPrefixes = append(allPrefixes, currentPrefix)\n    for _, currentCharacter\
    \ := range myString {\n        currentPrefix = currentPrefix + currentCharacter\n\
    \        allPrefixes = append(allPrefixes, currentPrefix)\n    }\n    return allPrefixes\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn_h89tcj_test.go:16:25: invalid operation: currentPrefix + currentCharacter
    (mismatched types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075363
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    result := make([]string, 0)\n    prefix := myString[:1]\n\
    \    for _, char := range myString {\n        if prefix == \"\" {\n          \
    \  result = append(result, prefix)\n            prefix = char\n        } else\
    \ {\n            prefix = prefix + char\n        }\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcbn5_1ox_test.go:17:22: cannot use char (variable of type rune) as type
    string in assignment

    /tmp/tmpcbn5_1ox_test.go:19:22: invalid operation: prefix + char (mismatched types
    string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075363
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    words := strings.Split(myString, \"_\")\n    prefixes\
    \ := []string{}\n    lastWord := words[len(words)-1]\n    for _, word := range\
    \ words {\n        if word == lastWord {\n            continue\n        }\n  \
    \      prefixes = append(prefixes, word)\n    }\n    return prefixes\n}\n\nfunc\
    \ TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"\
    asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"\
    WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6czz_bza_test.go:12:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075363
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var allPrefixes []string\n    \n    for i := 0; i <\
    \ len(myString); i++ {\n        for j := 0; j < len(allPrefixes); j++ {\n    \
    \        if myString[i:i+len(allPrefixes[j])] == allPrefixes[j] {\n          \
    \      allPrefixes = append(allPrefixes, allPrefixes[j])\n            }\n    \
    \    }\n    }\n    \n    return allPrefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T)\
    \ {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"), expected:\
    \ []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     {\
    \ actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmphny70x6s_test.go:40: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n        tmphny70x6s_test.go:40:\
    \ expected '[W WW WWW]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075363
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    // Base case: myString is empty\n    if myString ==\
    \ \"\" {\n        return []string{}\n    }\n\n    // Recursion: Find shortest\
    \ prefix of myString\n    shortestPrefix := []string{}\n    for _, prefix := range\
    \ all_prefixes_(myString[1:]) {\n        shortestPrefix = append(shortestPrefix,\
    \ prefix)\n    }\n\n    // Recursion: Find longest prefix of myString\n    longestPrefix\
    \ := []string{}\n    for _, prefix := range all_prefixes_(myString) {\n      \
    \  longestPrefix = append(longestPrefix, prefix)\n    }\n\n    return append(shortestPrefix,\
    \ longestPrefix...)\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate :=\
    \ all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\",\
    \ \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"\
    ), expected: []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9pqf3sgp_test.go:19:28: undefined: all_prefixes_

    /tmp/tmp9pqf3sgp_test.go:25:28: undefined: all_prefixes_

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075363
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    stacks := make(map[string]bool)\n\
    \    stacks[\"_\"] = true\n\n    for _, c := range myString {\n        if stacks[c]\
    \ {\n            continue\n        }\n\n        result = append(result, c)\n \
    \       stacks[c] = true\n    }\n\n    return result\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2b0p_77l_test.go:17:19: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmp2b0p_77l_test.go:21:33: cannot use c (variable of type rune) as type string
    in argument to append

    /tmp/tmp2b0p_77l_test.go:22:16: cannot use c (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075364
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    return all_prefixes_test.AllPrefixes(myString)\n}\n\n\
    func TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_9llwqkg_test.go:12:12: undefined: all_prefixes_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075364
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    if myString == \"\" {\n        return []string{}\n \
    \   }\n\n    // Loop over all possible starting points (beginning with any character)\n\
    \    var prefixes []string\n\n    for i := 0; i < len(myString); i++ {\n     \
    \   // Append all possible prefixes for current character to prefixes\n      \
    \  prefixes = append(prefixes, myString[0:i])\n    }\n\n    return prefixes\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmp2oo6zv_r_test.go:42: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmp2oo6zv_r_test.go:42: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075364
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    result := make([]string, 0)\n    prefix := \"\"\n  \
    \  for _, letter := range myString {\n        prefix += letter\n        result\
    \ <- prefix\n    }\n    return result\n}\n\nfunc TestAll_Prefixes(t *testing.T)\
    \ {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"), expected:\
    \ []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     {\
    \ actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl_axypvd_test.go:15:9: invalid operation: prefix += letter (mismatched
    types string and rune)

    /tmp/tmpl_axypvd_test.go:16:9: invalid operation: cannot send to non-channel result
    (variable of type []string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075364
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var prefixes []string\n    var k int\n    var shortest\
    \ int\n    var longest int\n\n    for k = 0; k < len(myString); k++ {\n      \
    \  shortest = myString[:k]\n        longest = myString[k:]\n        prefixes =\
    \ append(prefixes, shortest...)\n        prefixes = append(prefixes, longest...)\n\
    \    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate\
    \ := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"asdfgh\"), expected: []string{\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"\
    WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx1xqzvpw_test.go:18:28: cannot use myString[:k] (value of type string)
    as type int in assignment

    /tmp/tmpx1xqzvpw_test.go:19:27: cannot use myString[k:] (value of type string)
    as type int in assignment

    /tmp/tmpx1xqzvpw_test.go:20:37: cannot use shortest (variable of type int) as
    type []string in argument to append

    /tmp/tmpx1xqzvpw_test.go:21:37: cannot use longest (variable of type int) as type
    []string in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075364
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    myLen := len(myString)\n    prefixList := make([]string,\
    \ myLen)\n    prefix := myString\n    for i := 0; i < myLen; i++ {\n        prefixList[len(prefix):]\
    \ = append(prefixList, prefix)\n        prefix = prefix[:0]\n    }\n    return\
    \ prefixList\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7kxa1rky_test.go:16:19: cannot assign to prefixList[len(prefix):] (value
    of type []string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075364
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    if len(myString) < 3 {\n        return []string{}\n\
    \    }\n    var prefixes []string\n    if myString[0] != 'a' {\n        return\
    \ all_prefixes(myString[1:])\n    }\n    for len(myString) > 0 {\n        if myString[0]\
    \ == 'a' {\n            prefixes = append(prefixes, myString[:1])\n          \
    \  myString = myString[1:]\n        } else {\n            myString = myString[1:]\n\
    \        }\n    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T)\
    \ {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"), expected:\
    \ []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     {\
    \ actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmp683i8ozp_test.go:45: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[a]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n        tmp683i8ozp_test.go:45:\
    \ expected '[W WW WWW]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075365
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    allPrefixes := make([]string, len(myString)+1-len(myString)%2)\n\
    \    allPrefixes[0] = myString\n    for i := 1; i < len(allPrefixes); i++ {\n\
    \        allPrefixes[i] = allPrefixes[i-1] + myString[len(allPrefixes[i-1])-1]\n\
    \    }\n    return allPrefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n \
    \ candidate := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: []string{} },\n     { actual: candidate(\"asdfgh\"), expected: []string{\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"\
    WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu2bqm0us_test.go:15:26: invalid operation: allPrefixes[i - 1] + myString[len(allPrefixes[i
    - 1]) - 1] (mismatched types string and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075364
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    myStringLen := len(myString)\n    prefix := make([]string,\
    \ myStringLen)\n    prefix := append(prefix, myString[:myStringLen-1])\n    return\
    \ prefix\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi80p4nhn_test.go:14:12: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075364
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var prefixes []string\n    for i := 0; i < len(myString);\
    \ i++ {\n        prefixes = append(prefixes, myString[0:i])\n    }\n    return\
    \ prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmpu6fhxsgy_test.go:34: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmpu6fhxsgy_test.go:34: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075233
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    i := 0\n    l := len(myString)\n    result := make([]string,\
    \ l)\n    for i >= 0 {\n        result[i] = myString[0:i]\n        i = i + 1\n\
    \    }\n    return result\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate\
    \ := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"asdfgh\"), expected: []string{\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"\
    WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\npanic: runtime error: index out of\
    \ range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range\
    \ [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.all_prefixes(...)\n\t/tmp/tmpxc3jq2y5_test.go:16\n\
    command-line-arguments_test.TestAll_Prefixes(0x0?)\n\t/tmp/tmpxc3jq2y5_test.go:29\
    \ +0x2f\ntesting.tRunner(0xc0001a01a0, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075365
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    prefixes := []string{}\n    if len(myString) == 0 {\n\
    \        return prefixes\n    }\n    prefix := myString[:1]\n    prefixes = append(prefixes,\
    \ prefix)\n    for len(myString) > 1 {\n        prefix += myString[:1]\n     \
    \   prefixes = append(prefixes, prefix)\n        myString = myString[1:]\n   \
    \ }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate\
    \ := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"asdfgh\"), expected: []string{\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"\
    WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmp6xf4l272_test.go:41: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[a aa aas aasd aasdf aasdfg]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660075365
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    result := []string{}\n    current := myString\n    if\
    \ len(current) == 0 {\n        return nil\n    }\n    current += \"_\"\n    foundPrefix\
    \ := false\n    for i := range all_prefixes_test1 {\n        if all_prefixes_test1[i]\
    \ == current {\n            foundPrefix = true\n            break\n        }\n\
    \    }\n    if !foundPrefix {\n        return nil\n    }\n    result := append(result,\
    \ all_prefixes_test1[0:i])\n    return result\n}\n\nfunc TestAll_Prefixes(t *testing.T)\
    \ {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"), expected:\
    \ []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     {\
    \ actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpix6ehyue_test.go:19:20: undefined: all_prefixes_test1

    /tmp/tmpix6ehyue_test.go:20:12: undefined: all_prefixes_test1

    /tmp/tmpix6ehyue_test.go:28:12: no new variables on left side of :=

    /tmp/tmpix6ehyue_test.go:28:30: undefined: all_prefixes_test1

    /tmp/tmpix6ehyue_test.go:28:51: undefined: i

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075364
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var prefixes []string\n    for _, str := range strings.Split(myString,\
    \ \"\") {\n        for _, prefix := range strings.Split(myString, prefix) {\n\
    \            prefixes = append(prefixes, prefix)\n        }\n    }\n    return\
    \ prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy2f6d_sk_test.go:13:25: undefined: strings

    /tmp/tmpy2f6d_sk_test.go:14:32: undefined: strings

    /tmp/tmpy2f6d_sk_test.go:14:56: undefined: prefix

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075364
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n\n    for _, letter := range myString\
    \ {\n        for _, prefix := range all_prefixes_test(letter) {\n            result\
    \ = append(result, prefix)\n        }\n    }\n\n    return result\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6cwru5ng_test.go:15:32: undefined: all_prefixes_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075364
- exit_code: null
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    prefixes := []string{}\n    prefix := \"\"\n    for\
    \ len(myString) > 0 {\n        prefix = myString[:len(myString)-1]\n        prefixes\
    \ = append(prefixes, prefix)\n        myString = myString[len(prefix):]\n    }\n\
    \    return prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate\
    \ := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"asdfgh\"), expected: []string{\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"\
    WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660075378
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    result := make([]string, 0)\n    for {\n        if myString\
    \ == \"\" {\n            break\n        }\n        result <- myString[:len(myString)]\n\
    \        myString = myString[len(myString):]\n    }\n    return result\n}\n\n\
    func TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpocfwqwtu_test.go:17:9: invalid operation: cannot send to non-channel result
    (variable of type []string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075365
- exit_code: null
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    if len(myString) == 0 {\n        return []string{}\n\
    \    }\n\n    prefixes := make([]string, 0, 10)\n    for len(prefixes) < len(myString)\
    \ {\n        prefix := myString[:len(prefixes)]\n        if prefix != \"\" &&\
    \ prefix != myString {\n            prefixes = append(prefixes, prefix)\n    \
    \    }\n    }\n\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T)\
    \ {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"), expected:\
    \ []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     {\
    \ actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660075378
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    result := make([]string, 0)\n    for i := 0; i < len(myString);\
    \ i++ {\n        result += append(result, myString[0:i+1]) // prefix\n    }\n\
    \    return result\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate :=\
    \ all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\",\
    \ \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"\
    ), expected: []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyz1g2fjf_test.go:14:9: invalid operation: operator + not defined on result
    (variable of type []string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075365
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    allPrefixes := make([]string, 0)\n\n    // Iterate over\
    \ the input string\n    for idx := 0; idx < len(myString); idx++ {\n        //\
    \ Iterate over all possible substrings\n        for idx := 0; idx < len(myString);\
    \ idx++ {\n            // If the current substring is the full string\n      \
    \      if idx == len(myString) {\n                allPrefixes = append(allPrefixes,\
    \ myString[idx:])\n            }\n            // If the current substring is the\
    \ prefix of the input string\n            if myString[idx] == myString[idx:] {\n\
    \                // Append to allPrefixes\n                allPrefixes = append(allPrefixes,\
    \ myString[idx:])\n            }\n        }\n    }\n\n    // Return list of prefixes\n\
    \    return allPrefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate\
    \ := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"asdfgh\"), expected: []string{\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"\
    WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpglqtpyq1_test.go:23:41: invalid operation: myString[idx] == myString[idx:]
    (mismatched types byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075365
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    // Initialize a table with one row (1 column) of length\
    \ equal to the size of the input string\n    prefixes := make([]string, len(myString))\n\
    \    // Initialize a table with one row (1 column) of length equal to the size\
    \ of the input string\n    currentPrefixes := make([]string, len(myString))\n\n\
    \    // Initialize table with empty string\n    for i := range currentPrefixes\
    \ {\n        currentPrefixes[i] = \"\"\n    }\n\n    // Iterate through the input\
    \ string from the front to end to build the prefix table\n    for i := range myString\
    \ {\n        currentPrefixes[i] = myString[i]\n        // Iterate through the\
    \ input string from the back to start to build the prefix table\n        for i\
    \ := range currentPrefixes {\n            currentPrefixes[i] += currentPrefixes[i-1]\n\
    \        }\n    }\n\n    // Extract all prefixes from the prefix table\n    for\
    \ i := range currentPrefixes {\n        if currentPrefixes[i] != \"\" {\n    \
    \        prefixes = append(prefixes, currentPrefixes[i])\n        }\n    }\n \
    \   return prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate :=\
    \ all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\",\
    \ \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"\
    ), expected: []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9aeezjso_test.go:24:30: cannot use myString[i] (value of type byte) as
    type string in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075365
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    if len(myString) == 0 {\n        return []string{}\n\
    \    }\n    return all_prefixes_test(myString, len(myString))\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw8v1wphs_test.go:15:12: undefined: all_prefixes_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075365
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    l := myString[:len(myString)]\n    return make([]string,\
    \ len(l)+1, len(l))\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate :=\
    \ all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\",\
    \ \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"\
    ), expected: []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\npanic: runtime error: makeslice: cap\
    \ out of range [recovered]\n\tpanic: runtime error: makeslice: cap out of range\n\
    \ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x502980, 0x549120})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x502980, 0x549120})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.all_prefixes(...)\n\t/tmp/tmp9bypr_li_test.go:13\n\
    command-line-arguments_test.TestAll_Prefixes(0x0?)\n\t/tmp/tmp9bypr_li_test.go:23\
    \ +0x3e\ntesting.tRunner(0xc0001a0340, 0x528040)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075366
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    if myString == \"\" {\n        return nil\n    }\n \
    \   result := []string{}\n    last := myString[0]\n    for _, c := range myString\
    \ {\n        if c == last {\n            result = append(result, last)\n     \
    \   } else {\n            result = append(result, fmt.Sprintf(\"%s%s\", last,\
    \ c))\n        }\n        last = c // Update last character as we look at other\
    \ characters\n    }\n    return result\n}\n\nfunc TestAll_Prefixes(t *testing.T)\
    \ {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"), expected:\
    \ []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     {\
    \ actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgsfa59qs_test.go:18:17: invalid operation: c == last (mismatched types
    rune and byte)

    /tmp/tmpgsfa59qs_test.go:19:37: cannot use last (variable of type byte) as type
    string in argument to append

    /tmp/tmpgsfa59qs_test.go:23:16: cannot use c (variable of type rune) as type byte
    in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075365
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    result := make([]string, 0)\n    myStringArray := strings.Split(myString,\
    \ \"b\")\n    // Add each string in input array prefix by one\n    for _, myStringArray\
    \ := range strings.Split(myString, \"b\") {\n        result = append(result, fmt.Sprintf(\"\
    %b\", myStringArray))\n    }\n    return result\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptgbrcdkw_test.go:13:22: undefined: strings

    /tmp/tmptgbrcdkw_test.go:15:35: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075365
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    result := make([]string, 0)\n    i := 0\n    for len(myString)\
    \ > i {\n        j := i\n        for ; j < len(myString) && myString[j] == myString[i];\
    \ j ++ {\n            j ++\n        }\n        result = append(result, myString[0:j])\n\
    \        i = j\n    }\n    return result\n}\n\nfunc TestAll_Prefixes(t *testing.T)\
    \ {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"), expected:\
    \ []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     {\
    \ actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [:4] with length 3 [recovered]\n\tpanic: runtime error: slice bounds\
    \ out of range [:4] with length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513700,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.all_prefixes(...)\n\t/tmp/tmpg_gxa63e_test.go:19\n\
    command-line-arguments_test.TestAll_Prefixes(0x0?)\n\t/tmp/tmpg_gxa63e_test.go:34\
    \ +0x518\ntesting.tRunner(0xc0001a0340, 0x529040)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075366
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    splitString := strings.Split(myString, \"\")\n    result\
    \ := make([]string, len(splitString))\n    for i := 0; i < len(splitString); i++\
    \ {\n        result[i] = splitString[0:i+1]\n    }\n    return result\n}\n\nfunc\
    \ TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"\
    asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"\
    WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcssewd7l_test.go:12:20: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075365
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    ret := make([]string, 0)\n    prefix := \"\"\n\n   \
    \ for _, c := range myString {\n        ret <- prefix\n        prefix = prefix\
    \ + c\n    }\n\n    return ret\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n \
    \ candidate := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: []string{} },\n     { actual: candidate(\"asdfgh\"), expected: []string{\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"\
    WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8hjs58u6_test.go:16:9: invalid operation: cannot send to non-channel ret
    (variable of type []string)

    /tmp/tmp8hjs58u6_test.go:17:18: invalid operation: prefix + c (mismatched types
    string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075365
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var myPrefixes []string\n    if len(myString) <= 1 {\n\
    \        return myPrefixes\n    }\n    firstLetter := myString[:1]\n    myPrefixes\
    \ = append(myPrefixes, firstLetter)\n    for i := 1; i <= len(myString); i++ {\n\
    \        myPrefixes = append(myPrefixes, myString[:i])\n    }\n    return myPrefixes\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmp6o_yv1l__test.go:39: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[a a as asd asdf asdfg asdfgh]'\n    --- FAIL: TestAll_Prefixes/test_num__2\
    \ (0.00s)\n        tmp6o_yv1l__test.go:39: expected '[W WW WWW]', got '[W W WW\
    \ WWW]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075366
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    result := []string{}\n    shortestString := myString\n\
    \    for i := 0; i < len(shortestString); i++ {\n        result = append(result,\
    \ shortestString[:i])\n    }\n    return result\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmpu6jg5k20_test.go:35: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmpu6jg5k20_test.go:35: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075366
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    prefixes := make([]string, 0, 16)\n    for i := range\
    \ myString {\n        prefixes = append(prefixes, myString[:i])\n    }\n    return\
    \ prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmpiyoabd2x_test.go:34: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmpiyoabd2x_test.go:34: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075366
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    prefixes := []string{}\n    for i := range myString\
    \ {\n        prefixes = append(prefixes, myString[:i])\n    }\n    return prefixes\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmpo0udawfb_test.go:34: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmpo0udawfb_test.go:34: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075366
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    prefixes := []string{}\n    var prefix string\n    var\
    \ i int\n    for i < len(myString) {\n        prefix = myString[0:i]\n       \
    \ prefixes = append(prefixes, prefix)\n        i = i + 1\n    }\n    return prefixes\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmpsiasej69_test.go:38: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmpsiasej69_test.go:38: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075366
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    result := make([]string, 0, len(myString))\n    start\
    \ := 0\n    for {\n        end = myString[start]\n        start = end + 1\n  \
    \      if end >= len(myString) {\n            break\n        }\n        result\
    \ = append(result, myString[start:end])\n    }\n    return result\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvehj_nwi_test.go:15:9: undefined: end

    /tmp/tmpvehj_nwi_test.go:16:17: undefined: end

    /tmp/tmpvehj_nwi_test.go:17:12: undefined: end

    /tmp/tmpvehj_nwi_test.go:20:48: undefined: end

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075366
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    myStringLen, longestPrefixLen := longestPrefix(myString)\n\
    \    prefixes := make([]string, longestPrefixLen)\n    for i := longestPrefixLen;\
    \ i <= myStringLen; i++ {\n        prefixes[i-1] = myString[:i]\n    }\n    return\
    \ prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkb5zy2h0_test.go:12:38: undefined: longestPrefix

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075366
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var prefixes []string\n    var curPrefix string\n  \
    \  for curPrefix := range allPrefixes {\n        if myString[0] == curPrefix[0]\
    \ {\n            prefixes = append(prefixes, curPrefix)\n        }\n    }\n  \
    \  return prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate :=\
    \ all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\",\
    \ \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"\
    ), expected: []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptswrmt09_test.go:13:9: curPrefix declared but not used

    /tmp/tmptswrmt09_test.go:14:28: undefined: allPrefixes

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075366
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    prefix := []string{}\n    for i := 0; i < len(myString);\
    \ i++ {\n        prefix <- myString[0:i]\n    }\n    return prefix\n}\n\nfunc\
    \ TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"\
    asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"\
    WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgmo5d15__test.go:14:9: invalid operation: cannot send to non-channel prefix
    (variable of type []string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075366
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    result := make([]string, 0, myString)\n    prefix =\
    \ make([]string, 0, myString)\n    for _, s := range myString {\n        if s\
    \ == \"a\" || s == \"b\" || s == \"c\" {\n            prefix = append(prefix,\
    \ s)\n        } else {\n            result = append(result, prefix...)\n     \
    \       prefix = make([]string, 0, s)\n        }\n    }\n    result = append(result,\
    \ prefix...)\n    return result\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n\
    \  candidate := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"), expected:\
    \ []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     {\
    \ actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplz0lnavo_test.go:12:33: invalid argument: index myString (variable of
    type string) must be integer

    /tmp/tmplz0lnavo_test.go:13:5: undefined: prefix

    /tmp/tmplz0lnavo_test.go:13:32: invalid argument: index myString (variable of
    type string) must be integer

    /tmp/tmplz0lnavo_test.go:15:17: invalid operation: s == "a" (mismatched types
    rune and untyped string)

    /tmp/tmplz0lnavo_test.go:15:29: invalid operation: s == "b" (mismatched types
    rune and untyped string)

    /tmp/tmplz0lnavo_test.go:15:41: invalid operation: s == "c" (mismatched types
    rune and untyped string)

    /tmp/tmplz0lnavo_test.go:16:29: undefined: prefix

    /tmp/tmplz0lnavo_test.go:18:37: undefined: prefix

    /tmp/tmplz0lnavo_test.go:19:13: undefined: prefix

    /tmp/tmplz0lnavo_test.go:22:29: undefined: prefix

    /tmp/tmplz0lnavo_test.go:22:29: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075366
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    result := []string{}\n    for len(myString) > 0 {\n\
    \        result := append(result, myString[:len(myString)/2])\n        myString\
    \ = myString[len(myString)/2:]\n    }\n    return result\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa99b1qz4_test.go:14:9: result declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075367
- exit_code: null
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    myStringLen := len(myString)\n    myStringPrefix :=\
    \ myString[:myStringLen]\n    prefixes := []string{myStringPrefix}\n    for {\n\
    \        myStringPrefix = myStringPrefix[:0]\n        for i := 0; i < myStringLen;\
    \ i++ {\n            myStringPrefix += myString\n        }\n        if myStringPrefix\
    \ != myString {\n            prefixes = append(prefixes, myStringPrefix)\n   \
    \     } else {\n            break\n        }\n    }\n    return prefixes\n}\n\n\
    func TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660075380
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    prefixes := make([]string, 0, len(myString))\n    for\
    \ i := range myString {\n        prefixes = append(prefixes, myString[:i])\n \
    \   }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate\
    \ := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"asdfgh\"), expected: []string{\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"\
    WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmpvk6ahyp__test.go:34: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmpvk6ahyp__test.go:34: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075367
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var ret []string\n    for i := 0; i < len(myString);\
    \ i++ {\n        for j := i + 1; j < len(myString); j++ {\n            if myString[i:j]\
    \ == myString {\n                ret = append(ret, myString[i:j])\n          \
    \  }\n        }\n    }\n    return ret\n}\n\nfunc TestAll_Prefixes(t *testing.T)\
    \ {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"), expected:\
    \ []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     {\
    \ actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmpfgrn_o92_test.go:38: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n        tmpfgrn_o92_test.go:38:\
    \ expected '[W WW WWW]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075367
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    result := []string{}\n    prefix := myString\n    for\
    \ _, s := range myString {\n        if s == prefix[0] {\n            result =\
    \ append(result, prefix)\n            prefix = \"\"\n        } else {\n      \
    \      prefix += s\n        }\n    }\n    if len(prefix) == 0 {\n        result\
    \ = append(result, prefix)\n    }\n    return result\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpno6hwr2g_test.go:15:17: invalid operation: s == prefix[0] (mismatched
    types rune and byte)

    /tmp/tmpno6hwr2g_test.go:19:13: invalid operation: prefix += s (mismatched types
    string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075367
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    \n    // Create slice to store all prefixes\n    var\
    \ prefixes []string\n    \n    // Loop through each letter\n    for i := 0; i\
    \ < len(myString); i++ {\n        // Append the prefix to the slice if the letter\
    \ is equal to the \n        // current letter\n        if myString[i] == myString[0]\
    \ {\n            prefixes = append(prefixes, myString[0:i])\n        }\n    }\n\
    \n    // Return the slice\n    return prefixes\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| a tags=string,go |>\n<code>\npackage main\n\nimport (\n    \"fmt\"\n    \"\
    strings\"\n)\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbmu_7o5g_test.go:28:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075366
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    if len(myString) < 1 {\n        return []string{}\n\
    \    }\n\n    result := []string{}\n    for i := 0; i < len(myString); i++ {\n\
    \        myPrefix, length := all_prefixes_(myString, i)\n        result = append(result,\
    \ myPrefix)\n        if length != 0 {\n            break\n        }\n    }\n\n\
    \    return result\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate :=\
    \ all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\",\
    \ \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"\
    ), expected: []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuzvstgny_test.go:18:29: undefined: all_prefixes_

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075367
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    prefix := []string{}\n    for len(myString) > 0 {\n\
    \        prefix = append(prefix, myString[0:len(myString)])\n        myString\
    \ = myString[len(myString):]\n    }\n    return prefix\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmp2zbwg0b0_test.go:35: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[asdfgh]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n       \
    \ tmp2zbwg0b0_test.go:35: expected '[W WW WWW]', got '[WWW]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075367
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    // return an empty slice if the input string is empty\n\
    \    if len(myString) == 0 {\n        return []string{}\n    }\n\n    // initialize\
    \ a slice for results\n    allPrefixes := []string{}\n\n    // add first prefix\
    \ to result\n    allPrefixes = append(allPrefixes, myString[:1])\n\n    // add\
    \ all prefixes in reverse of the input string until myString is empty\n    for\
    \ len(myString) > 0 {\n        allPrefixes = append(allPrefixes, myString[:1])\n\
    \        myString = myString[1:]\n    }\n\n    // reverse the results\n    for\
    \ i := 0; i < len(allPrefixes)/2; i++ {\n        allPrefixes[i], allPrefixes[len(allPrefixes)-i-1]\
    \ = allPrefixes[len(allPrefixes)-i-1], allPrefixes[i]\n    }\n\n    // return\
    \ the results\n    return allPrefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T)\
    \ {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"), expected:\
    \ []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     {\
    \ actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmp8m_elgl2_test.go:53: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[h g f d s a a]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmp8m_elgl2_test.go:53: expected '[W WW WWW]', got '[W W W W]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075368
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    prefix := []string{}\n    for _, c := range myString\
    \ {\n        for _, p := range prefix {\n            if p <= c {\n           \
    \     break\n            }\n        }\n        if p == \"\" {\n            prefix\
    \ = append(prefix, c)\n        }\n    }\n    return prefix\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgmdkvcj6_test.go:15:21: invalid operation: p <= c (mismatched types string
    and rune)

    /tmp/tmpgmdkvcj6_test.go:19:12: undefined: p

    /tmp/tmpgmdkvcj6_test.go:20:37: cannot use c (variable of type rune) as type string
    in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075367
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var prefixes []string\n    \n    for i := 0; i < len(myString);\
    \ i++ {\n        prefix := myString[0:i]\n        \n        if i == 0 {\n    \
    \        prefixes = append(prefixes, prefix)\n            continue\n        }\n\
    \        \n        if myString[i] != myString[i-1] {\n            prefixes = append(prefixes,\
    \ prefix)\n        }\n    }\n    \n    return prefixes\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmphjsorp1z_test.go:45: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmphjsorp1z_test.go:45: expected '[W WW WWW]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075368
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    start := 0\n    end := len(myString) - 1\n    prefixes\
    \ := []string{}\n    for start < end {\n        prefix = myString[start:end]\n\
    \        if prefix == \"\" {\n            break\n        }\n        prefixes =\
    \ append(prefixes, prefix)\n        start = end + 1\n        end = start - 1\n\
    \    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate\
    \ := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"asdfgh\"), expected: []string{\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"\
    WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp94e1luyq_test.go:16:9: undefined: prefix

    /tmp/tmp94e1luyq_test.go:17:12: undefined: prefix

    /tmp/tmp94e1luyq_test.go:20:37: undefined: prefix

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075368
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    prefix = append(prefix, \"\"\
    )\n    shortest := myString\n    longest = \"\"\n    for len(myString) > 0 {\n\
    \        longest, myString = myString, myString[len(myString):]\n        prefix\
    \ = append(prefix, longest)\n    }\n    result = prefix\n    return result\n}\n\
    \nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjb1laab__test.go:13:21: undefined: prefix

    /tmp/tmpjb1laab__test.go:14:5: shortest declared but not used

    /tmp/tmpjb1laab__test.go:15:5: undefined: longest

    /tmp/tmpjb1laab__test.go:17:9: undefined: longest

    /tmp/tmpjb1laab__test.go:18:9: undefined: prefix

    /tmp/tmpjb1laab__test.go:18:25: undefined: prefix

    /tmp/tmpjb1laab__test.go:18:33: undefined: longest

    /tmp/tmpjb1laab__test.go:20:14: undefined: prefix

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075368
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    result := make([]string, 0, len(myString))\n    for\
    \ _, element := range myString {\n        result = append(result, element)\n \
    \   }\n    return result\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate\
    \ := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"asdfgh\"), expected: []string{\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"\
    WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg1sfqp8h_test.go:14:33: cannot use element (variable of type rune) as
    type string in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075368
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    result := []string{}\n    longestLength := len(myString)\n\
    \    for i := 0; i < longestLength; i++ {\n        prefix := myString[:i]\n  \
    \      result = append(result, prefix)\n    }\n    return result\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmpmndl4aug_test.go:36: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmpmndl4aug_test.go:36: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075368
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    prefixes := make([]string, 0)\n    stringLength := len(myString)\n\
    \    for i := 0; i < stringLength; i++ {\n        prefixes = append(prefixes,\
    \ myString[0:i])\n    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T)\
    \ {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"), expected:\
    \ []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     {\
    \ actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmpbynsfb1d_test.go:35: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmpbynsfb1d_test.go:35: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075368
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    if myString == \"\" {\n        return []string{}\n \
    \   }\n\n    chars := []rune(myString)\n    prefixes := make([]string, len(chars))\n\
    \    current := myString\n    i := len(chars) - 1\n\n    // Find shortest and\
    \ longest prefixes in string and add them to prefixes array\n    for i >= 0 &&\
    \ len(current) > 1 {\n        if current[0:1] != chars[i] {\n            break\n\
    \        }\n        current := current[1:]\n        i -= 1\n    }\n    prefixes\
    \ = append(prefixes, current)\n\n    // Find next shortest and longest prefixes\
    \ in string and add them to prefixes array\n    for i := len(chars) - 1; i >=\
    \ 0; i-- {\n        if current[0:1] != chars[i] {\n            break\n       \
    \ }\n        current := current[1:]\n    }\n    prefixes = append(prefixes, current)\n\
    \n    return prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate\
    \ := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"asdfgh\"), expected: []string{\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"\
    WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjj2gi0jn_test.go:23:28: invalid operation: current[0:1] != chars[i] (mismatched
    types string and rune)

    /tmp/tmpjj2gi0jn_test.go:26:9: current declared but not used

    /tmp/tmpjj2gi0jn_test.go:33:28: invalid operation: current[0:1] != chars[i] (mismatched
    types string and rune)

    /tmp/tmpjj2gi0jn_test.go:36:9: current declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075368
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var prefixes []string\n    if myString == \"\" {\n \
    \       return prefixes\n    }\n\n    chars := myString[:len(myString)-1]\n  \
    \  for i := 0; i < len(chars); i++ {\n        prefixes = append(prefixes, chars[:i])\n\
    \    }\n\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate\
    \ := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"asdfgh\"), expected: []string{\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"\
    WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmpyf0t41rz_test.go:40: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmpyf0t41rz_test.go:40: expected '[W WW WWW]', got '[ W]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075368
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    prefix := []string{}\n    prefix := append(prefix, myString[0:1])\
    \ // The first character\n    prefix := append(prefix, myString[0:2]) // The first\
    \ two characters\n    prefix := append(prefix, myString[0:3]) // The first three\
    \ characters\n    prefix := append(prefix, myString[0:4]) // The first four characters\n\
    \    prefix := append(prefix, myString[0:5]) // The first five characters\n  \
    \  prefix := append(prefix, myString[0:6]) // The first six characters\n    prefix\
    \ := append(prefix, myString[0:7]) // The first seven characters\n    prefix :=\
    \ append(prefix, myString[0:8]) // The first eight characters\n    prefix := append(prefix,\
    \ myString[0:9]) // The first nine characters\n    prefix := append(prefix, myString[0:10])\
    \ // The first ten characters\n    prefix := append(prefix, myString[0:11]) //\
    \ The first eleven characters\n    prefix := append(prefix, myString[0:12]) //\
    \ The first twelve characters\n    prefix := append(prefix, myString[0:13]) //\
    \ The first thirteen characters\n    prefix := append(prefix, myString[0:14])\
    \ // The first fourteen characters\n    prefix := append(prefix, myString[0:15])\
    \ // The first fifteen characters\n    prefix := append(prefix, myString[0:16])\
    \ // The first sixteen characters\n    prefix := append(prefix, myString[0:17])\
    \ // The first seventeen characters\n    prefix := append(prefix, myString[0:18])\
    \ // The first eighteen characters\n    prefix := append(prefix, myString[0:19])\
    \ // The first nineteen characters\n    prefix := append(prefix, myString[0:20])\
    \ // The first twenty characters\n    prefix := append(prefix, myString[0:21])\
    \ // The first twenty-one characters\n    prefix := append(prefix, myString[0:22])\
    \ // The first twenty-two characters\n    prefix := append(prefix, myString[0:23])\
    \ // The first twenty-three characters\n    prefix := append(prefix, myString[0:24])\
    \ // The first twenty-four characters\n    prefix := append(prefix, myString[0:25])\
    \ // The first twenty-five characters\n    prefix := append(prefix, myString[0:26])\
    \ // The first twenty-six characters\n    prefix := append(prefix, myString[0:27])\
    \ // The first twenty-seven characters\n    prefix := append(prefix, myString[0:28])\
    \ // The first twenty-eight characters\n    prefix := append(prefix, myString[0:29])\
    \ // The \nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpm2m_nzph_test.go:42:6: expected ''('', found TestAll_Prefixes

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075367
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    // Initialize a list of empty strings\n    var prefixes\
    \ []string\n    for i := 0; i <= len(myString); i++ {\n        // Initialize the\
    \ new prefix\n        var prefix string\n        if i == len(myString) {\n   \
    \         // If the input string is the same length as the prefix\n          \
    \  // string then append the prefix string to the list of prefixes\n         \
    \   // and exit\n            prefix = myString\n        } else {\n           \
    \ // Otherwise append the prefix string to the list of prefixes\n            //\
    \ with the prefix string removed\n            prefix = myString[:i]\n        }\n\
    \        // Append the prefix to the list of prefixes\n        prefixes = append(prefixes,\
    \ prefix)\n    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T)\
    \ {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"), expected:\
    \ []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     {\
    \ actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmpt235ak6g_test.go:48: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg asdfgh]'\n    --- FAIL: TestAll_Prefixes/test_num__2\
    \ (0.00s)\n        tmpt235ak6g_test.go:48: expected '[W WW WWW]', got '[ W WW\
    \ WWW]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075369
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    result := []string{}\n    prefix := \"\"\n    for _,\
    \ s := range myString {\n        if len(prefix) == 0 {\n            prefix = s\n\
    \            continue\n        }\n        if s == prefix[len(prefix)] {\n    \
    \        prefix += s\n        } else {\n            result = append(result, prefix)\n\
    \            prefix = s\n        }\n    }\n    if prefix != \"\" {\n        result\
    \ = append(result, prefix)\n    }\n    return result\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpaaaahiwj_test.go:16:22: cannot use s (variable of type rune) as type string
    in assignment

    /tmp/tmpaaaahiwj_test.go:19:17: invalid operation: s == prefix[len(prefix)] (mismatched
    types rune and byte)

    /tmp/tmpaaaahiwj_test.go:20:13: invalid operation: prefix += s (mismatched types
    string and rune)

    /tmp/tmpaaaahiwj_test.go:23:22: cannot use s (variable of type rune) as type string
    in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075368
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var prefixes []string\n    var currentLen int\n    var\
    \ lastChar = myString[currentLen]\n    for i := 0; i < len(myString); i++ {\n\
    \        if myString[i] == lastChar {\n            currentLen++\n        } else\
    \ {\n            currentLen = 0\n            prefixes = append(prefixes, myString[0:currentLen])\n\
    \        }\n        lastChar = myString[i]\n    }\n    return prefixes\n}\n\n\
    func TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\npanic: runtime error: index out of\
    \ range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range\
    \ [0] with length 0\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc0001ce000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc0001ce000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.all_prefixes(...)\n\t/tmp/tmpk_0bxobr_test.go:14\n\
    command-line-arguments_test.TestAll_Prefixes(0x0?)\n\t/tmp/tmpk_0bxobr_test.go:34\
    \ +0x18\ntesting.tRunner(0xc00019b040, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075369
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var myPrefixes []string\n    for _, myPrefix := range\
    \ strings.Split(myString, \"\") {\n        myPrefixes = append(myPrefixes, myPrefix)\n\
    \    }\n    return myPrefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate\
    \ := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"asdfgh\"), expected: []string{\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"\
    WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmn5mmotn_test.go:13:30: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075369
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var prefixes []string\n    var length int\n\n    for\
    \ len(myString) > 0 {\n        length += 1\n        myString = myString[:length]\n\
    \        prefixes = append(prefixes, myString)\n    }\n\n    return prefixes\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [:2] with length 1 [recovered]\n\tpanic: runtime error: slice bounds\
    \ out of range [:2] with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513700,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.all_prefixes(...)\n\t/tmp/tmpxrnthxe5_test.go:17\n\
    command-line-arguments_test.TestAll_Prefixes(0x0?)\n\t/tmp/tmpxrnthxe5_test.go:32\
    \ +0x605\ntesting.tRunner(0xc0001a0340, 0x529040)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075369
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    prefixes := make([]string, 0)\n    for i := 0; i < len(myString);\
    \ i++ {\n        prefix := myString[0:i]\n        if !prefixes.Contains(prefix)\
    \ {\n            prefixes = append(prefixes, prefix)\n        }\n    }\n    return\
    \ prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxdxdfmex_test.go:15:22: prefixes.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075369
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    myStrList := make([]string, 0)\n\n    for _, v := range\
    \ myString {\n        myStrList = append(myStrList, string(v))\n    }\n    return\
    \ myStrList\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmpl230kvwq_test.go:35: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[a s d f g h]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n  \
    \      tmpl230kvwq_test.go:35: expected '[W WW WWW]', got '[W W W]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075369
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    prefixes := make([]string, len(myString))\n    longestPrefix\
    \ := myString\n    for i := 0; i < len(myString); i++ {\n        prefixes[i] =\
    \ longestPrefix[:i]\n        longestPrefix = longestPrefix[i:]\n    }\n    return\
    \ prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [:4] with length 0 [recovered]\n\tpanic: runtime error: slice bounds\
    \ out of range [:4] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513700,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.all_prefixes(...)\n\t/tmp/tmpryinj8pc_test.go:15\n\
    command-line-arguments_test.TestAll_Prefixes(0x0?)\n\t/tmp/tmpryinj8pc_test.go:29\
    \ +0x439\ntesting.tRunner(0xc000192680, 0x529040)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075370
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    prefixes := []string{}\n    for len(myString) > 0 {\n\
    \        myPrefixes := all_prefixes_recurse(myString)\n        prefixes = append(prefixes,\
    \ myPrefixes[0])\n        myString = myPrefixes[1]\n    }\n    return prefixes\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppxbs9618_test.go:14:23: undefined: all_prefixes_recurse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075369
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    if myString == \"\" {\n        return []string{}\n \
    \   }\n\n    // init current prefix with first character\n    var currentPrefix\
    \ string\n    currentPrefix = myString[0]\n\n    // init prefix list\n    var\
    \ prefix []string = currentPrefix\n\n    // add first character to prefix list\
    \ if myString is length > 1\n    if len(myString) > 1 {\n        prefix = append(prefix,\
    \ currentPrefix)\n    }\n\n    // add remaining characters to prefix list\n  \
    \  for _, s := range myString[1:] {\n        prefix := append(prefix, currentPrefix+s)\n\
    \    }\n\n    return prefix\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate\
    \ := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"asdfgh\"), expected: []string{\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"\
    WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5d4q7_sd_test.go:18:21: cannot use myString[0] (value of type byte) as
    type string in assignment

    /tmp/tmp5d4q7_sd_test.go:21:27: cannot use currentPrefix (variable of type string)
    as type []string in variable declaration

    /tmp/tmp5d4q7_sd_test.go:30:9: prefix declared but not used

    /tmp/tmp5d4q7_sd_test.go:30:34: invalid operation: currentPrefix + s (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075369
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    prefix := []string{}\n    prefix := append(prefix, myString[0:len(myString)-1])\n\
    \    return prefix\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate :=\
    \ all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\",\
    \ \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"\
    ), expected: []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb_jbafz0_test.go:13:12: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075370
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    result := []string{}\n    for i := 0; i < len(myString);\
    \ i++ {\n        result := append(result, myString[0:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpe11a_dvy_test.go:14:9: result declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075233
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    result := []string{}\n    for _, letter := range myString\
    \ {\n        result = append(result, myString[:len(myString)-len(letter)])\n \
    \   }\n    return result\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate\
    \ := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"asdfgh\"), expected: []string{\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"\
    WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1m40pn7t_test.go:14:61: invalid argument: letter (variable of type rune)
    for len

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075370
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    result := make([]string, 0)\n    result <- myString\n\
    \    for len(myString) > 0 {\n        next := myString\n        myString = \"\"\
    \n        for _, prefix := range result {\n            myString += prefix\n  \
    \      }\n        result <- myString\n    }\n    return result\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx60fg8lw_test.go:13:5: invalid operation: cannot send to non-channel result
    (variable of type []string)

    /tmp/tmpx60fg8lw_test.go:15:9: next declared but not used

    /tmp/tmpx60fg8lw_test.go:20:9: invalid operation: cannot send to non-channel result
    (variable of type []string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075370
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    allPrefixes := []string{}\n    for i := 1; i < len(myString);\
    \ i++ {\n        for prefix := myString[:i]; prefix == myString && !strings.HasPrefix(prefix,\
    \ myString); prefix  = prefix[:len(prefix)-1] {\n            allPrefixes = append(allPrefixes,\
    \ prefix)\n        }\n    }\n    return allPrefixes\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbfrm0r97_test.go:14:60: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075370
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    prefixes := make([]string, len(myString))\n\n    for\
    \ i, v := range myString {\n        prefixes[i] = v\n    }\n\n    return prefixes\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp586fa4n9_test.go:15:23: cannot use v (variable of type rune) as type string
    in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075370
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var prefixes = []string{}\n\n    for _, char := range\
    \ myString {\n        if char == '_' {\n            prefixes = append(prefixes,\
    \ \"\")\n            continue\n        }\n\n        prefix := char\n        prefix\
    \ += string(rune(prefix[0]+1))\n\n        for {\n            if isPrefix(prefix,\
    \ myString) {\n                prefixes = append(prefixes, prefix)\n         \
    \       break\n            }\n\n            prefix += string(rune(prefix[0]))\n\
    \        }\n    }\n\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T)\
    \ {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"), expected:\
    \ []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     {\
    \ actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpklh1dfuy_test.go:21:37: invalid operation: cannot index prefix (variable
    of type rune)

    /tmp/tmpklh1dfuy_test.go:24:16: undefined: isPrefix

    /tmp/tmpklh1dfuy_test.go:25:45: cannot use prefix (variable of type rune) as type
    string in argument to append

    /tmp/tmpklh1dfuy_test.go:29:41: invalid operation: cannot index prefix (variable
    of type rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075370
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var prefix []string = myString\n    var longest string\n\
    \    for {\n        if len(longest) < len(prefix) {\n            longest = prefix\n\
    \        }\n        if len(longest) == 0 {\n            break\n        }\n   \
    \     longest = longest[:len(longest)-1]\n        prefix = append(prefix, longest)\n\
    \    }\n    return prefix\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate\
    \ := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"asdfgh\"), expected: []string{\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"\
    WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmply2dn3xr_test.go:12:27: cannot use myString (variable of type string)
    as type []string in variable declaration

    /tmp/tmply2dn3xr_test.go:16:23: cannot use prefix (variable of type []string)
    as type string in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075370
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var prefixes []string\n    for i := 0; i <= len(myString);\
    \ i++ {\n        if i == len(myString) {\n            prefixes = append(prefixes,\
    \ myString[0:i])\n            break\n        }\n        prefix := myString[0:i]\n\
    \        if prefix != \"\" {\n            prefixes = append(prefixes, prefix)\n\
    \        }\n    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T)\
    \ {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"), expected:\
    \ []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     {\
    \ actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075371
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var prefixes []string\n    for i := 0; i < len(myString);\
    \ i++ {\n        if i > 0 {\n            prefixes = append(prefixes, myString[:i])\n\
    \        }\n    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T)\
    \ {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"), expected:\
    \ []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     {\
    \ actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmp6b66hw87_test.go:36: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmp6b66hw87_test.go:36: expected '[W WW WWW]', got '[W WW]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075371
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    prefixes := make([]string, 0)\n    mySubset := \"\"\n\
    \    longestLength := len(myString)\n    for i := 0; i < longestLength; i++ {\n\
    \        mySubset += myString[i]\n        prefixes = append(prefixes, mySubset)\n\
    \    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate\
    \ := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"asdfgh\"), expected: []string{\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"\
    WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa7agle_e_test.go:16:9: invalid operation: mySubset += myString[i] (mismatched
    types string and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075370
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    allPrefixes := make([]string, 0, len(myString))\n  \
    \  i := 0\n    for _, v := range myString {\n        allPrefixes = append(allPrefixes,\
    \ fmt.Sprintf(\"%c\", v))\n        if i < len(myString)-1 {\n            i +=\
    \ len(myString) - i\n        }\n    }\n    return allPrefixes\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmp3vhitdqc_test.go:38: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[a s d f g h]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n  \
    \      tmp3vhitdqc_test.go:38: expected '[W WW WWW]', got '[W W W]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075371
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    allPrefixes := []string{}\n    for len(myString) > 0\
    \ {\n        allPrefixes = append(allPrefixes, myString[0:len(myString)])\n  \
    \      myString = myString[len(myString):]\n    }\n    return allPrefixes\n}\n\
    \nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmpyugbckix_test.go:35: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[asdfgh]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n       \
    \ tmpyugbckix_test.go:35: expected '[W WW WWW]', got '[WWW]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075371
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    s := make([]string, 0, myString)\n    for len(s) > 0\
    \ {\n        prefix := s[len(s)-1]\n        start = len(myString)\n        for\
    \ i := len(myString) - 1; ; i-- {\n            if len(myString) <= i {\n     \
    \           s = append(s, prefix)\n                break\n            }\n    \
    \        if myString[i] != prefix {\n                break\n            }\n  \
    \          start--\n        }\n    }\n    return s\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpt1we5kxn_test.go:12:28: invalid argument: index myString (variable of
    type string) must be integer

    /tmp/tmpt1we5kxn_test.go:15:9: undefined: start

    /tmp/tmpt1we5kxn_test.go:21:31: invalid operation: myString[i] != prefix (mismatched
    types byte and string)

    /tmp/tmpt1we5kxn_test.go:24:13: undefined: start

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075371
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var prefixes []string\n    for i := 0; i < len(myString);\
    \ i++ {\n        if i == 0 {\n            prefixes = append(prefixes, myString[0:i])\n\
    \        } else {\n            prefixes = append(prefixes, myString[0:i]+myString[i+1:])\n\
    \        }\n    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T)\
    \ {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"), expected:\
    \ []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     {\
    \ actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmpnz90r5mb_test.go:38: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ adfgh asfgh asdgh asdfh asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2\
    \ (0.00s)\n        tmpnz90r5mb_test.go:38: expected '[W WW WWW]', got '[ WW WW]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075371
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    allPrefixes := []string{}\n    prefix := myString\n\
    \    length := len(myString)\n\n    for i := length; i >= 1; i-- {\n        prefix\
    \ += myString[:i]\n        allPrefixes = append(allPrefixes, prefix)\n    }\n\n\
    \    return allPrefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate\
    \ := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"asdfgh\"), expected: []string{\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"\
    WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmp81d5vrue_test.go:39: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[asdfghasdfgh asdfghasdfghasdfg asdfghasdfghasdfgasdf asdfghasdfghasdfgasdfasd\
    \ asdfghasdfghasdfgasdfasdas asdfghasdfghasdfgasdfasdasa]'\n    --- FAIL: TestAll_Prefixes/test_num__2\
    \ (0.00s)\n        tmp81d5vrue_test.go:39: expected '[W WW WWW]', got '[WWWWWW\
    \ WWWWWWWW WWWWWWWWW]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075371
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    res := []string{}\n    for _, prefix := range prefixes(myString)\
    \ {\n        res = append(res, prefix)\n    }\n    return res\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz6c9vs8s_test.go:13:28: undefined: prefixes

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075371
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    l := len(myString)\n    result := make([]string, 0,\
    \ l)\n    for i := 0; i < l; i++ {\n        if myString[i] == myString[0] {\n\
    \            result = append(result, myString[:i+1])\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmp8m8gj3zy_test.go:37: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[a]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075372
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    result := []string{}\n    length := len(myString)\n\
    \    i := 0\n    for j := i; j < length; j++ {\n        for prefixes := all_prefixes(myString[j:]);\
    \ prefixes != nil; {\n            result = append(result, prefixes[0])\n     \
    \       prefixes = all_prefixes(myString[j:])\n        }\n        i++\n    }\n\
    \    return result\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate :=\
    \ all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\",\
    \ \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"\
    ), expected: []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0358\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x520442?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.all_prefixes({0x51e88a,\
    \ 0x6})\n\t/tmp/tmp_ln4umkc_test.go:11 +0x1d5 fp=0xc0201e0368 sp=0xc0201e0360\
    \ pc=0x4ef9b5\ncommand-line-arguments_test.all_prefixes({0x51e88a, 0x6})\n\t/tmp/tmp_ln4umkc_test.go:16\
    \ +0xaf fp=0xc0201e0400 sp=0xc0201e0368 pc=0x4ef88f\ncommand-line-arguments_test.all_prefixes({0x51e88a,\
    \ 0x6})\n\t/tmp/tmp_ln4umkc_test.go:16 +0xaf fp=0xc0201e0498 sp=0xc0201e0400 pc=0x4ef88f\n\
    command-line-arguments_test.all_prefixes({0x51e88a, 0x6})\n\t/tmp/tmp_ln4umkc_test.go:16\
    \ +0xaf fp=0xc0201e0530 sp=0xc0201e0498 pc=0x4ef88f\ncommand-line-arguments_test.all_prefixes({0x51e88a,\
    \ 0x6})\n\t/tmp/tmp_ln4umkc_test.go:16 +0xaf fp=0xc0201e05c8 sp=0xc0201e0530 pc=0x4ef88f\n\
    command-line-arguments_test.all_prefixes({0x51e88a, 0x6})\n\t/tmp/tmp_ln4umkc_test.go:16\
    \ +0xaf fp=0xc0201e0660 sp=0xc0201e05c8 pc=0x4ef88f\ncommand-line-arguments_test.all_prefixes({0x51e88a,\
    \ 0x6})\n\t/tmp/tmp_ln4umkc_test.go:16 +0xaf fp=0xc0201e06f8 sp=0xc0201e0660 pc=0x4ef88f\n\
    command-line-arguments_test.all_prefixes({0x51e88a, 0x6})\n\t/tmp/tmp_ln4umkc_test.go:16\
    \ +0xaf fp=0xc0201e0790 sp=0xc0201e06f8 pc=0x4ef88f\ncommand-line-arguments_test.all_prefixes({0x51e88a,\
    \ 0x6})\n\t/tmp/tmp_ln4umkc_test.go:16 +0xaf fp=0xc0201e0828 sp=0xc0201e0790 pc=0x4ef88f\n\
    command-line-arguments_test.all_prefixes({0x51e88a, 0x6})\n\t/tmp/tmp_ln4umkc_test.go:16\
    \ +0xaf fp=0xc0201e08c0 sp=0xc0201e0828 pc=0x4ef88f\ncommand-line-arguments_test.all_prefixes({0x51e88a,\
    \ 0x6})\n\t/tmp/tmp_ln4umkc_test.go:16 +0xaf fp=0xc0201e0958 sp=0xc0201e08c0 pc=0x4ef88f\n\
    command-line-arguments_test.all_prefixes({0x51e88a, 0x6})\n\t/tmp/tmp_"
  timestamp: 1660075373
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    prefixes := []string{}\n    for _, myPrefix := range\
    \ all_prefixes_short(myString) {\n        prefixes = append(prefixes, myPrefix)\n\
    \    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate\
    \ := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"asdfgh\"), expected: []string{\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"\
    WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmw3szia8_test.go:13:30: undefined: all_prefixes_short

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075371
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var myPrefixes []string\n    prefix := myString\n  \
    \  for {\n        myPrefixes = append(myPrefixes, prefix)\n        prefix = prefix[1:len(prefix)-1]\n\
    \        if len(prefix) < 1 {\n            break\n        }\n    }\n    return\
    \ myPrefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [:-1] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [:-1]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513700, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513700,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.all_prefixes(...)\n\t/tmp/tmpch2puzsc_test.go:16\n\
    command-line-arguments_test.TestAll_Prefixes(0x0?)\n\t/tmp/tmpch2puzsc_test.go:31\
    \ +0x6d0\ntesting.tRunner(0xc0001924e0, 0x529040)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075372
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    // Get prefix by comparing the length of input string\
    \ to prefix length limit\n    var myPrefixesByLength = [][]string{{\"a\"}, {\"\
    ab\"}, {\"abc\"}}\n    for _, p := range myPrefixesByLength {\n        if len(p)\
    \ < len(myString) {\n            break\n        }\n    }\n    return p\n}\n\n\
    func TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwgxnd9ex_test.go:19:12: undefined: p

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075372
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    if len(myString) == 0 {\n        return nil\n    }\n\
    \n    result := []string{}\n    for len(myString) > 0 {\n        myPrefix, myLen\
    \ := all_prefixes_helper(myString, myString[0:])\n        result = append(result,\
    \ myPrefix)\n        myString = myString[myLen:]\n    }\n\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphg6_eiw9_test.go:18:28: undefined: all_prefixes_helper

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075372
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var myStringList = myString.List()\n    var prefixes\
    \ []string\n    for _, myString := range myStringList {\n        for _,prefix\
    \ := range myString.prefixes{\n            if prefix == myString {\n         \
    \       prefixes = append(prefixes, prefix)\n            }\n        }\n    }\n\
    \    return prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate\
    \ := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"asdfgh\"), expected: []string{\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"\
    WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8gvqxo6u_test.go:12:33: myString.List undefined (type string has no field
    or method List)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075372
- exit_code: null
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var prefixes []string\n\n    for len(myString) > 0 {\n\
    \        prefixes = append(prefixes, myString[0:len(myString)-1])\n        myString\
    \ = myString[len(myString)-1:]\n    }\n\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660075385
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    myString += \"\"\n    result := make([]string, 0)\n\
    \    for i := 0; i < len(myString); i++ {\n        result = append(result, myString[0:i])\n\
    \    }\n    return result\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate\
    \ := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"asdfgh\"), expected: []string{\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"\
    WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmpsk96dv6r_test.go:35: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmpsk96dv6r_test.go:35: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075372
- exit_code: null
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var prefixes []string\n    for len(myString) > 0 {\n\
    \        prefixes = append(prefixes, myString[:len(myString)-1])\n        myString\
    \ = myString[len(myString)-1:]\n    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660075385
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    if len(myString) == 0 {\n        return []string{}\n\
    \    }\n    var prefixes []string\n    for prefix := myString; prefix != \"\"\
    ; {\n        prefix, found = all_prefixes_test.FindPrefix(prefix)\n        if\
    \ found {\n            prefixes = append(prefixes, prefix)\n        }\n    }\n\
    \    return prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate\
    \ := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"asdfgh\"), expected: []string{\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"\
    WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4u_03tsv_test.go:17:17: undefined: found

    /tmp/tmp4u_03tsv_test.go:17:25: undefined: all_prefixes_test

    /tmp/tmp4u_03tsv_test.go:18:12: undefined: found

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075372
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var prefixes []string\n    for _, prefix := range myString\
    \ {\n        prefixes = append(prefixes, prefix)\n    }\n    return prefixes\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_lqapj60_test.go:14:37: cannot use prefix (variable of type rune) as type
    string in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075372
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    myString = myString + myString\n    myString = strings.ToLower(myString)\n\
    \n    result := make([]string, 0, len(myString))\n    for i := 0; i < len(myString);\
    \ i++ {\n        mySubString := myString[:i]\n        if mySubString == \"\" {\n\
    \            continue\n        }\n        result := append(result, mySubString)\n\
    \    }\n\n    return result\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate\
    \ := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"asdfgh\"), expected: []string{\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"\
    WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxrzzoziz_test.go:13:16: undefined: strings

    /tmp/tmpxrzzoziz_test.go:21:9: result declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075372
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    result := []string{}\n    currentPrefix := \"\"\n  \
    \  for _, charInString := range myString {\n        currentPrefix = currentPrefix\
    \ + charInString\n        if currentPrefix in allPrefixes {\n            result\
    \ = append(result, currentPrefix)\n        }\n    }\n    return result\n}\n\n\
    func TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpp5au9k36_test.go:16:26: expected '';'', found in

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075372
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    result := make([]string, 0, myString.Len())\n\n    for\
    \ i := 0; i < myString.Len(); i++ {\n        if i < (myString.Len()-1) {\n   \
    \         result = append(result, myString[0:i+1])\n        }\n    }\n\n    return\
    \ result\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmps96o4jkx_test.go:12:42: myString.Len undefined (type string has no field
    or method Len)

    /tmp/tmps96o4jkx_test.go:14:30: myString.Len undefined (type string has no field
    or method Len)

    /tmp/tmps96o4jkx_test.go:15:26: myString.Len undefined (type string has no field
    or method Len)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075373
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    result := []string{}\n    if len(myString) == 0 {\n\
    \        return result\n    }\n\n    firstPrefix := myString[0:1]\n    if len(firstPrefix)\
    \ == 0 {\n        return result\n    }\n    result = append(result, firstPrefix)\n\
    \n    prefix := firstPrefix[0:1]\n    for _, letter := range myString[1:] {\n\
    \        if len(prefix) == 0 {\n            break\n        }\n\n        result\
    \ = append(result, prefix+letter)\n        prefix = prefix[0:1]\n    }\n\n   \
    \ return result\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzrob1rxb_test.go:29:33: invalid operation: prefix + letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075373
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    return prefixes(myString, \"\")\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjzrxbeud_test.go:12:12: undefined: prefixes

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075373
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    prefix := []string{}\n    i := 0\n    for {\n      \
    \  i = myString[:i] + myString[i:len(myString)]\n        prefix = append(prefix,\
    \ i)\n        if len(i) < len(myString) {\n            break\n        }\n    }\n\
    \    return prefix\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate :=\
    \ all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\",\
    \ \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"\
    ), expected: []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp88gdgrr4_test.go:15:21: cannot use myString[:i] + myString[i:len(myString)]
    (value of type string) as type int in assignment

    /tmp/tmp88gdgrr4_test.go:16:33: cannot use i (variable of type int) as type string
    in argument to append

    /tmp/tmp88gdgrr4_test.go:17:16: invalid argument: i (variable of type int) for
    len

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075373
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    prefixes := []string{}\n    longestPrefix := myString\n\
    \    for len(longestPrefix) > 0 {\n        longestPrefix = longestPrefix[:len(longestPrefix)-1]\n\
    \        prefixes = append(prefixes, longestPrefix)\n    }\n    return prefixes\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmpo5se4rxq_test.go:36: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[asdfg asdf asd as a ]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmpo5se4rxq_test.go:36: expected '[W WW WWW]', got '[WW W ]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075373
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    currentPrefix, nextPrefix := myString, \"\"\n    prefixes\
    \ := []string{}\n    for len(currentPrefix) > 0 {\n        nextPrefix = append(nextPrefix,\
    \ currentPrefix[0])\n        currentPrefix = currentPrefix[1:]\n    }\n    for\
    \ _, currentPrefix := range nextPrefix {\n        prefixes = append(prefixes,\
    \ currentPrefix)\n    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T)\
    \ {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"), expected:\
    \ []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     {\
    \ actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp58uopbbi_test.go:15:29: first argument to append must be a slice; have
    nextPrefix (variable of type string)

    /tmp/tmp58uopbbi_test.go:19:37: cannot use currentPrefix (variable of type rune)
    as type string in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075373
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    list := []string{myString}\n    for len(list) != 0 {\n\
    \        current = list[0]\n        list, _ = all_prefixes_recurse(current, list[1:])\n\
    \    }\n    return list\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate\
    \ := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"asdfgh\"), expected: []string{\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"\
    WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd45iro80_test.go:14:9: undefined: current

    /tmp/tmpd45iro80_test.go:15:19: undefined: all_prefixes_recurse

    /tmp/tmpd45iro80_test.go:15:40: undefined: current

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075373
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var prefixes []string\n    prefix, _ := myString[0],\
    \ myString[1:]\n    prefixes = append(prefixes, prefix)\n    for _, str := range\
    \ myString[1:] {\n        prefix = prefix + str\n        prefixes = append(prefixes,\
    \ prefix)\n    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T)\
    \ {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"), expected:\
    \ []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     {\
    \ actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvn9tol5m_test.go:14:33: cannot use prefix (variable of type byte) as type
    string in argument to append

    /tmp/tmpvn9tol5m_test.go:16:18: invalid operation: prefix + str (mismatched types
    byte and rune)

    /tmp/tmpvn9tol5m_test.go:17:37: cannot use prefix (variable of type byte) as type
    string in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075373
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    prefixes := []string{}\n    i := 0\n    for ; i < len(myString);\
    \ i++ {\n        prefixes = append(prefixes, myString[0:i])\n    }\n    return\
    \ prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmpaf1q63s4_test.go:35: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmpaf1q63s4_test.go:35: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075374
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    prefixes := make([]string, 0)\n    prefix := myString\n\
    \    for len(prefix) > 0 {\n        prefix = prefix[:len(prefix)-1]\n        prefixes\
    \ = append(prefixes, prefix)\n    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmpkfxdcmbn_test.go:36: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[asdfg asdf asd as a ]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmpkfxdcmbn_test.go:36: expected '[W WW WWW]', got '[WW W ]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075374
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    if len(myString) == 0 {\n        return []string{}\n\
    \    }\n\n    allPrefixes := make([]string, 0)\n    shortest := myString\n   \
    \ longest := myString\n    for len(shortest) > 0 {\n        shortest = shortest[:len(shortest)-1]\n\
    \        for len(longest) > 0 {\n            longest = longest[:len(longest)-1]\n\
    \            if longest == shortest {\n                allPrefixes = append(allPrefixes,\
    \ longest)\n                longest = \"\"\n            }\n        }\n    }\n\
    \    return allPrefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate\
    \ := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"asdfgh\"), expected: []string{\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"\
    WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmp_9pxiikh_test.go:47: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n        tmp_9pxiikh_test.go:47:\
    \ expected '[W WW WWW]', got '[WW]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660075374
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    prefixes := []string{}\n    for _, p := range myString\
    \ {\n        prefixes = append(prefixes, p)\n        prefixes = append(prefixes,\
    \ myString[0:len(p)])\n    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2198gs_v_test.go:14:37: cannot use p (variable of type rune) as type string
    in argument to append

    /tmp/tmp2198gs_v_test.go:15:52: invalid argument: p (variable of type rune) for
    len

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075374
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    allPrefixes := []string{}\n    for i := 0; i < len(myString);\
    \ i++ {\n        allPrefixes = append(allPrefixes, myString[0:i])\n    }\n   \
    \ return allPrefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate\
    \ := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"asdfgh\"), expected: []string{\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"\
    WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmpm2oyl26n_test.go:34: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmpm2oyl26n_test.go:34: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075374
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var myList []string\n    var prefixList []string\n \
    \   var currPrefixList []string\n    currPrefixList = append(currPrefixList, myString[0:len(myString)])\n\
    \    myList = append(myList, currPrefixList)\n\n    for _, currPrefix := range\
    \ currPrefixList {\n        for _, prefix := range prefixList {\n            if\
    \ prefix == currPrefix {\n                continue\n            }\n          \
    \  if currPrefix[len(currPrefix)-len(prefix):] == prefix {\n                myList\
    \ = append(myList, currPrefix)\n                prefixList = append(prefixList,\
    \ prefix)\n                currPrefixList = append(currPrefixList, myString[0:len(myString)-len(prefix)])\n\
    \                break\n            }\n            if currPrefix[len(currPrefix)-len(prefix):]\
    \ == prefix+\"a\" {\n                myList = append(myList, currPrefix)\n   \
    \             prefixList = append(prefixList, prefix)\n                currPrefixList\
    \ = append(currPrefixList, myString[0:len(myString)-len(prefix)])\n          \
    \      break\n            }\n            if currPrefix[len(currPrefix)-len(prefix):]\
    \ == prefix+\"ab\" {\n                myList = append(myList, currPrefix)\n  \
    \              prefixList = append(prefixList, prefix)\n                currPrefixList\
    \ = append(currPrefixList, myString[0:len(myString)-len(prefix)])\n          \
    \      break\n            }\n        }\n    }\n\n    return myList\n}\n\nfunc\
    \ TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"\
    asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"\
    WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkaepmvhu_test.go:16:29: cannot use currPrefixList (variable of type []string)
    as type string in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075374
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    if len(myString) == 0 {\n        return []string{}\n\
    \    }\n\n    // Initialize prefix array\n    prefix := make([]string, 0, len(myString))\n\
    \n    // Initialize prefix and string\n    prefix := append(prefix, myString...)\n\
    \    myString = myString[:len(myString)]\n\n    // Build prefix array by splitting\
    \ string into substrings\n    for len(myString) > 0 {\n        // If string is\
    \ empty, we're done building prefix\n        if myString == \"\" {\n         \
    \   break\n        }\n\n        // Append prefix and string and start new string\n\
    \        prefix = append(prefix, myString...)\n        myString = myString[:len(myString)]\n\
    \    }\n\n    // Return prefix array\n    return prefix\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmxr2pxlw_test.go:20:12: no new variables on left side of :=

    /tmp/tmpmxr2pxlw_test.go:20:30: cannot use myString (variable of type string)
    as type []string in argument to append

    /tmp/tmpmxr2pxlw_test.go:31:33: cannot use myString (variable of type string)
    as type []string in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075374
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    prefixes := []string{}\n\n    k := len(myString)\n \
    \   for i := 0; i < k; i++ {\n        prefix := myString[0:i]\n        prefixes\
    \ = append(prefixes, prefix)\n    }\n\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmp50l1bexp_test.go:38: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmp50l1bexp_test.go:38: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075375
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    allPrefixes := make([]string, 0, myString.Length())\n\
    \n    for i := 0; i < myString.Length(); i++ {\n        prefix := myString[:i]\n\
    \        allPrefixes = append(allPrefixes, prefix)\n    }\n\n    return allPrefixes\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfwei4_f__test.go:12:47: myString.Length undefined (type string has no
    field or method Length)

    /tmp/tmpfwei4_f__test.go:14:30: myString.Length undefined (type string has no
    field or method Length)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075374
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var output []string\n    for i := 0; i < len(myString);\
    \ i++ {\n        output := append(output, myString[:i])\n    }\n    return output\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp25_e7dfa_test.go:14:9: output declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075374
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var prefixes []string\n    lengthsTuple := make([]int,\
    \ len(myString)+1) // +1 for the empty string prefix\n    for i := 0; i < len(myString);\
    \ i++ {\n        lengthsTuple[i] = 1\n    }\n    for i := 0; i < len(myString);\
    \ i++ {\n        for j := i+1; j < len(myString); j++ {\n            if myString[i]\
    \ == myString[j] {\n                lengthsTuple[i]++\n                lengthsTuple[j]++\n\
    \                if lengthsTuple[i] > lengthsTuple[j] {\n                    lengthsTuple[i]\
    \ = lengthsTuple[j]\n                }\n            }\n        }\n    }\n    //\
    \ Iterate over the list of lengths in reverse order to get our final list\n  \
    \  for i := len(myString); i > 0; i-- {\n        prefix := myString[0:lengthsTuple[i]]\n\
    \        prefixes = append(prefixes, prefix)\n    }\n    return prefixes\n}\n\n\
    func TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmp7p_ohzd4_test.go:51: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a a a a a]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n   \
    \     tmp7p_ohzd4_test.go:51: expected '[W WW WWW]', got '[ WWW WWW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075375
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    result := make([]string, 0)\n    shortest := myString\n\
    \    longestLength := len(myString)\n    for i := 0; i <= longestLength; i++ {\n\
    \        prefix := myString[0:i]\n        if i == 0 {\n            shortest =\
    \ prefix\n        } else if longestLength <= i {\n            longest = prefix\n\
    \        } else {\n            longest = prefix + longest\n        }\n       \
    \ result = append(result, prefix)\n    }\n    return result\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp00rw8ybu_test.go:13:5: shortest declared but not used

    /tmp/tmp00rw8ybu_test.go:20:13: undefined: longest

    /tmp/tmp00rw8ybu_test.go:22:32: undefined: longest

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075374
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    result := make([]string, len(myString))\n    for i :=\
    \ range myString {\n        if i == 0 {\n            result[i] = myString[i]\n\
    \            continue\n        }\n        if myString[i - 1] == myString[i] {\n\
    \            result[i] = myString[i - 1]\n        } else {\n            if result[i-1]\
    \ != \"\" {\n                result[i-1] = result[i-1] + myString[i]\n       \
    \     } else {\n                result[i-1] = myString[i]\n            }\n   \
    \     }\n    }\n    return result\n}\n</code>\n<|/ a tags=go,algorithm |>\n<|\
    \ c |>\nI like that this is using recursion, but in golang that doesn't make much\
    \ sense, as golang has recursion (and generators). Do you know if there is a golang\
    \ version of that code?\n<|/ c |>\n<| c |>\nI believe there is no recursion. There\
    \ is an infinite loop here, but it would break in python (at some point, of course).\n\
    <|/ c |>\n<| c |>\nI wonder why you think that Python would break when it comes\
    \ to infinite loops?\n<|/ c |>\n<| c |>\nI don't think so. Python will simply\
    \ continue executing the code from the first line. That's all. I can confirm that\
    \ when I execute the code from your question, Python will also end up breaking.\n\
    <|/ c |>\n<| c |>\nI didn't say that Python would break, just that I would not\
    \ expect that to happen. Python's interpreter does not need to \"stop execution\"\
    , it can simply execute it again to see the effect of the change in the return\
    \ value. But anyway you are right, there is no recursion and I believe this answer\
    \ is wrong.\n<|/ c |>\n<| a tags=go,algorithm |>\nI suggest you use a map to store\
    \ the result rather than a slice, because slices are expensive.\n<code>\npackage\
    \ main\n\nimport \"fmt\"\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate\
    \ := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"asdfgh\"), expected: []string{\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"\
    WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp78egdtye_test.go:30:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075374
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    output := make([]string, len(myString))\n    j := 0\n\
    \    for i, c := range myString {\n        output[i] = string(c) + string(myString[i:j])\n\
    \        j++\n    }\n    return output\n}\n\nfunc TestAll_Prefixes(t *testing.T)\
    \ {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"), expected:\
    \ []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     {\
    \ actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmp2d9181a9_test.go:36: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[a s d f g h]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n  \
    \      tmp2d9181a9_test.go:36: expected '[W WW WWW]', got '[W W W]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075375
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    // Return empty list if string is empty or just spaces\n\
    \    if myString == \"\" || myString == \" \" {\n        return []string{}\n \
    \   }\n\n    // Create list of all prefixes\n    allPrefixes := make([]string,\
    \ 0)\n    for i := 0; i < len(myString); i++ {\n        // Add prefixes of myString\
    \ to allPrefixes\n        for j := i; j < len(myString); j++ {\n            allPrefixes\
    \ = append(allPrefixes, myString[0:j])\n        }\n    }\n\n    // Return list\n\
    \    return allPrefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate\
    \ := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"asdfgh\"), expected: []string{\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"\
    WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmpglsvaoji_test.go:45: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg a as asd asdf asdfg as asd asdf asdfg asd asdf asdfg\
    \ asdf asdfg asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n   \
    \     tmpglsvaoji_test.go:45: expected '[W WW WWW]', got '[ W WW W WW WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075375
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    shortest := myString\n    longest := myString\n\n  \
    \  shortest = shortest[0:len(shortest)-1]\n    longest = longest[0:len(longest)-1]\n\
    \n    all_prefixes := []string{}\n\n    for i := 0; i < len(shortest); i++ {\n\
    \        all_prefixes = append(all_prefixes, shortest[:i])\n    }\n\n    for i\
    \ := 0; i < len(longest); i++ {\n        all_prefixes = append(all_prefixes, longest[:i])\n\
    \    }\n\n    return all_prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n\
    \  candidate := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"), expected:\
    \ []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     {\
    \ actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [:-1] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [:-1]\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000162000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.all_prefixes(...)\n\t/tmp/tmppxhiv3z9_test.go:15\n\
    command-line-arguments_test.TestAll_Prefixes(0x0?)\n\t/tmp/tmppxhiv3z9_test.go:38\
    \ +0x1c\ntesting.tRunner(0xc000103a00, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075375
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var prefixes []string\n    var myStringLength int\n\
    \    for _, myString := range myString {\n        myStringLength++\n    }\n\n\
    \    prefixes = append(prefixes, myString[0:myStringLength])\n    for i := 0;\
    \ i < myStringLength; i++ {\n        prefixes = append(prefixes, myString[0:myStringLength-i])\n\
    \    }\n\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate\
    \ := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"asdfgh\"), expected: []string{\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"\
    WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjghv6zxl_test.go:14:12: myString declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075375
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    prefixes := []string{}\n    for _, char := range myString\
    \ {\n        if char != prefixes[len(prefixes)-1] {\n            prefixes = append(prefixes,\
    \ char)\n        }\n    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T)\
    \ {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"), expected:\
    \ []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     {\
    \ actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp37tt6pej_test.go:14:20: invalid operation: char != prefixes[len(prefixes)
    - 1] (mismatched types rune and string)

    /tmp/tmp37tt6pej_test.go:15:41: cannot use char (variable of type rune) as type
    string in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075375
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    result := make([]string, len(myString))\n    for i :=\
    \ range result {\n        result[i] = myString[0:i]\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmpf2v356_b_test.go:34: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmpf2v356_b_test.go:34: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.044s\nFAIL\n"
  timestamp: 1660075375
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var allPrefixes []string\n    longestLength := 0\n\n\
    \    for i := 1; i < len(myString); i++ {\n        if myString[i] > myString[i-1]\
    \ {\n            allPrefixes = append(allPrefixes, myString[:longestLength])\n\
    \            longestLength = 0\n        } else {\n            longestLength +=\
    \ 1\n        }\n    }\n\n    if longestLength > 0 {\n        allPrefixes = append(allPrefixes,\
    \ myString[:longestLength])\n    }\n    return allPrefixes\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmphqzptxgp_test.go:45: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a  ]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n        tmphqzptxgp_test.go:45:\
    \ expected '[W WW WWW]', got '[WW]'\nFAIL\nFAIL\tcommand-line-arguments\t0.035s\n\
    FAIL\n"
  timestamp: 1660075375
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    if myString == \"\" {\n        return []string{}\n \
    \   }\n    result := []string{}\n    i := 0\n    for j := 0; j < len(myString);\
    \ j++ {\n        result[i] = myString[0:j]\n        i = j + 1\n    }\n    return\
    \ result\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\npanic: runtime error: index out of\
    \ range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range\
    \ [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.all_prefixes(...)\n\t/tmp/tmpjr3uz5d4_test.go:18\n\
    command-line-arguments_test.TestAll_Prefixes(0x0?)\n\t/tmp/tmpjr3uz5d4_test.go:32\
    \ +0x18\ntesting.tRunner(0xc0001a01a0, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075375
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    result := []string{}\n    if len(myString) < 2 {\n \
    \       return result\n    }\n    prefix := myString[:len(myString)/2]\n    result\
    \ := append(result, prefix)\n    myString = myString[len(prefix):]\n    for len(myString)\
    \ > 0 {\n        prefix = myString[:len(myString)/2]\n        result := append(result,\
    \ prefix)\n        myString = myString[len(prefix):]\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0xat27qe_test.go:17:12: no new variables on left side of :=

    /tmp/tmp0xat27qe_test.go:21:9: result declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075375
