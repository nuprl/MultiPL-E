name: HumanEval_76_is_simple_power
language: go_test.go
prompt: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
  )\n\n// Your task is to write a function that returns true if a number x is a simple\n\
  // power of n and false in other cases.\n// x is a simple power of n if n**int=x\n\
  // For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2,\
  \ 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3,\
  \ 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5,\
  \ 3)\n// false\nfunc is_simple_power(x int, n int) bool {\n"
tests: "func TestIs_Simple_Power(t *testing.T) {\n  candidate := is_simple_power\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate(16, 2), expected: true },\n     {\
  \ actual: candidate(143214, 16), expected: false },\n     { actual: candidate(4,\
  \ 2), expected: true },\n     { actual: candidate(9, 3), expected: true },\n   \
  \  { actual: candidate(16, 4), expected: true },\n     { actual: candidate(24, 2),\
  \ expected: false },\n     { actual: candidate(128, 4), expected: false },\n   \
  \  { actual: candidate(12, 6), expected: false },\n     { actual: candidate(1, 1),\
  \ expected: true },\n     { actual: candidate(1, 12), expected: true },\n   }\n\n\
  \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
  \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\",\
  \ tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
  \t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    d := n\n    k := n - 1\n    ans := false\n    for n > 0 && (x ==\
    \ 1 || k == 0 || x % n == 0 || x % n == 0 || x % n == 0 || x % n == 0) {\n   \
    \     ans = true\n        d = n\n        k = n - 1\n        n--\n    }\n    return\
    \ ans\n}\n", "    if x==0 {\n        if n==1 {\n            return true\n    \
    \    }\n        return false\n    }\n    if n==1 {\n        return true\n    }\n\
    \    if x%n==0 {\n        return is_simple_power(x/n, n)\n    }\n    return false\n\
    }", "    // base case\n    if n%x == 0 {\n        return true\n    } else {\n\
    \        return false\n    }\n}\n", "    if n == 1 {\n        return true\n  \
    \  }\n    if n%2 == 0 {\n        return is_simple_power(x, n/2)\n    }\n    return\
    \ false\n}\n", "    x /= n\n    if x == 1 {\n        return true\n    }\n    return\
    \ false\n}\n", "    if x == 1 {\n        return true\n    }\n    x /= n\n    return\
    \ is_simple_power(x, n)\n}\n", "    d := n\n    for i := 0; i < n; i++ {\n   \
    \     d *= x\n    }\n    return x == d\n}\n", "    if x == 1 {\n        return\
    \ true\n    }\n    if n == 1 {\n        return true\n    }\n    if x < n {\n \
    \       return false\n    }\n    if n == 2 {\n        return n == x * x\n    }\n\
    \    if n == 3 {\n        return x == x * x * x\n    }\n    if n == 4 {\n    \
    \    return x == x * x * x * x\n    }\n    if n == 5 {\n        return x == x\
    \ * x * x * x * x\n    }\n    return false\n}\n", "    return true\n}\n", "  \
    \  if x == 1 {\n        return true\n    }\n\n    if n%x == 0 {\n        return\
    \ true\n    }\n\n    return false\n}\n", "    if n < 0 {\n        return false\n\
    \    }\n    if n%2 == 0 && n == x {\n        return true\n    }\n    if n%2 ==\
    \ 1 && n-x == 1 {\n        return true\n    }\n    if n%2 == 0 && n-x == x {\n\
    \        return true\n    }\n    if n%2 == 1 && n-x == x {\n        return true\n\
    \    }\n    return false\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=c |>\nMy answer\
    \ is as follows\n<code>\n#include<stdio.h>\n\nint main()\n{\n    int x, n;\n \
    \   scanf(\"%d%d\", &x, &n);\n\n    int power = 0;\n\n    while (n > 1) {\n  \
    \      power = power + 1;\n        n = n/2;\n    }\n\n    if (n == 1)\n      \
    \  printf(\"1\\n\");\n    else\n        if (power == x)\n            printf(\"\
    1\\n\");\n        else\n            printf(\"0\\n\");\n\n    return 0;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=c |>\n<code>\n#include <stdio.h>\nint main()\n{\n\
    \    int x,n;\n    scanf(\"%d%d\",&x,&n);\n    int power=0;\n    while(n > 1)\n\
    \    {\n        power+=1;\n        n/=2;\n    }\n    if(power==x)\n    {\n   \
    \     printf(\"1\\n\");\n    }\n    else\n        printf(\"0\\n\");\n    return\
    \ 0;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\nThe answer given by Abhishek\
    \ is perfectly fine. Here are some more variations that you can try as well:\n\
    <code>\n#include <stdio.h>\n\nint main()\n{\n    int x,n;\n    scanf(\"%d%d\"\
    ,&x,&n);\n\n    int power=0;\n    while(n > 1)\n    {\n        power+=1;\n   \
    \     n/=2;\n    }\n    if(power==x)\n    {\n        printf(\"1\\n\");\n    }\n\
    \    else\n        printf(\"0\\n\");\n    return 0;\n}\n</code>\nAnother version:\n\
    <code>\n#include <stdio.h>\n\nint main()\n{\n    int x,n;\n    scanf(\"%d%d\"\
    ,&x,&n);\n    int power=0;\n    int i=x;\n    while(i!=0)\n    {\n        power+=i;\n\
    \        i/=2;\n    }\n    if(power==x)\n    {\n        printf(\"1\\n\");\n  \
    \  }\n    else\n        printf(\"0\\n\");\n    return 0;\n}\n</code>\nA third\
    \ version is:\n<code>\n#include <stdio.h>\n\nint main()\n{\n    int x,n;\n   \
    \ scanf(\"%d%d\",&x,&n);\n\n    if(x == 1)\n", "    m := x\n    for i := n - 1;\
    \ i >= 0; i-- {\n        if (m%n) != 0 {\n            m = x/n\n        } else\
    \ {\n            return true\n        }\n    }\n    return false\n}\n", "    return\
    \ n%x==0\n}\n", "    if n==0 {\n        return true\n    }\n    if n%2==0 {\n\
    \        return is_simple_power(x, n/2)\n    }\n    if x==1||n%2==0 {\n      \
    \  return false\n    }\n    if x%n==0||x%(n+1)==0 {\n        return false\n  \
    \  }\n    return is_simple_power(x, n+1)\n}\n", "    // Your code here\n    if\
    \ n==1 {\n        return true\n    }\n    return false\n}", "    if x%n == 0 {\n\
    \        return true\n    } else {\n        return false\n    }\n}\n", "    if\
    \ n%x==0 { //if n is a simple power of x\n        return true;\n    }\n    return\
    \ false\n}\n", "    if x <= 0 || n > 0 {\n        return false\n    }\n    for\
    \ i := 0; i < n; i++ {\n        if x%i == 0 {\n            return false\n    \
    \    }\n    }\n    return true\n}\n", "    if x < n {\n        return false\n\
    \    }\n    if n%x == 0 {\n        return true\n    }\n    return is_simple_power(x,\
    \ n-1)\n}\n", "    if n == 0 {\n        return true\n    }\n\n    // n squared\
    \ is an integer.\n    // We use that fact to determine if the x is a power of\
    \ n.\n    if n%2 == 0 {\n        return (x == 1)\n    } else {\n        return\
    \ (x*x == n) && (x * n / x == x)\n    }\n}\n</code>\nNow that the function is\
    \ written, we can write our test function:\n<code>", "    n := int(n)\n    return\
    \ (x&(n-1)) == 0 && (x&(n-2)) == 0\n}\n", "    // Your code here\n    if n<1 {\n\
    \        return false\n    }\n    if n==1 {\n        return true\n    }\n    if\
    \ n%2==0 {\n        return is_simple_power(x//2, n)\n    }\n    if n%3==0 {\n\
    \        return is_simple_power(x//3, n)\n    }\n    if n%5==0 {\n        return\
    \ is_simple_power(x//5, n)\n    }\n    if n%7==0 {\n        return is_simple_power(x//7,\
    \ n)\n    }\n    return false\n}\n</code>\n<|/ a tags=recursion,go,algorithm |>\n\
    <| a dscore=2 |>\nHere is my solution using recursion to calculate nth power of\
    \ x (where x is integer).\n<code>\npackage main\n\nimport (\n    \"fmt\"\n)\n",
  "    if x == 0 {\n        return true\n    }\n    if n%x == 0 {\n        return\
    \ is_simple_power(x, n/x)\n    } else {\n        return false\n    }\n}\n", " \
    \   if n%x==0 {\n        return true;\n    }\n    return false;\n}\n", "    if\
    \ x == 1 {\n        if n%x == 0 {\n            return true\n        } else {\n\
    \            return false\n        }\n    } else {\n        if n%x == 0 {\n  \
    \          return is_simple_power(x/2, n)\n        } else {\n            return\
    \ false\n        }\n    }\n}\n", "    if n==1 {\n        return true\n    }\n\
    \    if n%2==0 {\n        return is_simple_power(x, n/2)\n    }\n    return false\n\
    }\n</cell>\n<text>\nTask 7: Write a function to compute the greatest common divisor\
    \ of two numbers a and b.\n\n</text>\n<cell>\n%%file greatest_common_divisor.py",
  "    if x == 1 {\n        return true\n    }\n    if x < 1 {\n        return false\n\
    \    }\n    if x == n {\n        return true\n    }\n    if n < 1 {\n        return\
    \ false\n    }\n\n    if n == 1 {\n        return true\n    }\n\n    return is_simple_power(x%n,\
    \ n-1)\n}\n", "    if n==1 {\n        return true\n    }\n\n    if n==0 {\n  \
    \      return false\n    }\n\n    x %= n\n    if x%n==0 {\n        return true\n\
    \    }\n    return is_simple_power(x, n-1)\n}\n", "    if x == 0 || n==0 {\n \
    \       return false\n    }\n    if n%2 == 0 {\n        return true\n    }\n \
    \   return is_simple_power(x, n/2)\n}\n", "    if n%2 != 0 {\n        return false\n\
    \    }\n    if n == 1 {\n        return true\n    }\n    if n < 1 {\n        return\
    \ false\n    }\n    m := int(n-1)\n    if x%m != 0 {\n        return false\n \
    \   }\n    return is_simple_power(x, n-1)\n}\n</code>\nOutput:\n<code>\npackage\
    \ is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n", "    //\
    \ insert code here\n    return true\n}\n", "    \n}\n", "    if n%2!=0 {\n   \
    \     return false\n    }\n    m := n\n    for x != 0 {\n        m += 2\n    \
    \    x--\n        if x%n==0 {\n            return true\n        }\n    }\n   \
    \ return false\n}", "    if n==1 {\n        return true\n    }\n    if n%2 ==\
    \ 0 {\n        return false\n    }\n    return is_simple_power(x, n/2)\n}\n",
  "    if n==1 {\n        return true\n    }\n    if n%2 == 1 {\n        if x == n*n-1\
    \ {\n            return true\n        }\n    }\n    return false\n}\n", "    //\
    \ return false\n    if n == 0 {\n        return false\n    }\n    // return true\n\
    \    if n%2 == 0 {\n        if x == n*n*n*n {\n            return true\n     \
    \   }\n    }\n    return false\n}\n", "    if n%x!=0 {\n        return false\n\
    \    }\n    if n==1 {\n        return true\n    }\n    return is_simple_power(x,\
    \ n-1)\n}\n", "    if n == 0 {\n        return true\n    }\n\n    if n%2 == 0\
    \ {\n        return is_simple_power(x, n/2)\n    } else {\n        return !is_simple_power(x,\
    \ n/2)\n    }\n}\n", "    if n == 1 {\n        return true\n    }\n    if n%2\
    \ == 0 {\n        return is_simple_power(x, n/2)\n    }\n    if n%3 == 0 {\n \
    \       return is_simple_power(x, n/3)\n    }\n    if n%5 == 0 {\n        return\
    \ is_simple_power(x, n/5)\n    }\n    return false\n}\n", "    if n < 0 {\n  \
    \      return false\n    }\n    x /= n\n    return x == int(x)\n}\n", "    if\
    \ n == 1 {\n        return true\n    }\n    if n%x != 0 {\n        return false\n\
    \    }\n    if n%x == 0 {\n        if x != 1 {\n            return false\n   \
    \     }\n        return is_simple_power(x, n-1)\n    }\n    if x != 1 {\n    \
    \    return false\n    }\n    return is_simple_power(x, n-1)\n}\n", "    if n%x\
    \ == 0 {\n        return true\n    }\n    return false\n}\n</cell>\n<cell>\n%%bash\n\
    go test is_simple_power_test.go\n</cell>\n<text>\nPart 3: Write a function that\
    \ counts the number of 1s in a given byte array.\n\n\n</text>\n<cell>\npackage\
    \ main\n\nimport (\n    \"fmt\"\n    \"bytes\"\n)\n", "    // TODO: implement\
    \ the function\n    if x == 1 {\n        return true\n    }\n    if n == 0 {\n\
    \        return false\n    }\n\n    i := 0\n    mul := 1\n    j := n-1\n    if\
    \ n > 1 {\n        i = j\n        mul = j\n    }\n\n    for ; i <= j; i++ {\n\
    \        if x%mul == 0 {\n            return true\n        }\n        mul *= n\n\
    \    }\n    return false\n}\n", "    if x == 1 {\n        return true\n    }\n\
    \    if n%x == 0 {\n        return true\n    }\n    return false\n}\n", "    if\
    \ x == 1 {\n        return true\n    }\n    if n%x == 0 {\n        return true\n\
    \    }\n    return false\n}\n", "    // Your code goes here\n    if n == 1 {\n\
    \        return true\n    }\n    if n%2 == 0 {\n        return is_simple_power(x*x,\
    \ n/2)\n    }\n    return false\n}", "    // Solution here\n    return true\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| c |>\ni think this should be the best answer\
    \ since there is no need to use any if/else\n<|/ c |>\n<| a tags=powers,math,algorithm\
    \ |>\n<code>", "    if x <= 1 || n<=1 {\n        return false\n    }\n\n    if\
    \ n == 1 {\n        return true\n    }\n    if n%2 != 0 {\n        return false\n\
    \    }\n\n    return is_simple_power(x, n-1)\n}\n", "    // Your code here\n \
    \   if x==0 || n==0 {\n        return false\n    }\n    x %= n\n    for i := 0;\
    \ i < n; i++ {\n        if x==n**i {\n            return true\n        }\n   \
    \ }\n    return false\n}\n", "    if x == 1 {\n        return true\n    }\n  \
    \  if n%x == 0 {\n        return is_simple_power(x, n//x)\n    }\n    return false\n\
    }\n", "    if n < 0 {\n        return false\n    }\n    if n%x != 0 {\n      \
    \  return false\n    }\n    if n == 0 {\n        return true\n    }\n    return\
    \ is_simple_power(x, n-1)\n}\n", "    if n<0 {\n        return false\n    }\n\
    \    if n==1 {\n        return true\n    }\n    if n==2 {\n        return x==1\n\
    \    }\n    if n%3 == 0 {\n        return is_simple_power(x, n/3)\n    }\n   \
    \ if n%5 == 0 {\n        return is_simple_power(x, n/5)\n    }\n    return false\n\
    }\n</code>\n<|/ a |>\n<| c |>\nHi, thanks for the answer. I'm sorry I didn't mention\
    \ that this is a HackerRank problem and I'm not allowed to use any built in functions.\
    \ I have tried using some of those functions but still can't get it to work.\n\
    <|/ c |>\n<| c |>\nHi, I updated my post to include some extra explanation, but\
    \ still I'm not getting it to work. Would you mind taking a look at the code that\
    \ I posted and see if you can figure out why it's not working?\n<|/ c |>\n<| c\
    \ |>\nI actually updated my answer to include a working solution.\n<|/ c |>\n\
    <| c |>\nThank you for the update. The original code works perfectly fine but\
    \ when I change the code to use your updated code it still doesn't work.\n<|/\
    \ c |>\n<| c |>\nI updated my post again to include the whole code that I used.\n\
    <|/ c |>\n<| a tags=c,recursion |>\nRecursion is nice when you have some idea\
    \ of what to do.  In this case, since we're dealing with a power, the base case\
    \ is when the power is 1, which is easy.  We can just check that and return true\
    \ if so, and false if we get to the end.\n<code>\nbool is_power(int x, int n)\n\
    {\n    if (n == 1)\n    {\n        return (x % n == 0);\n    }\n\n    return (is_power(x,\
    \ n / 3)) && (is_power(x, n / 5));\n}\n</code>\nA couple of things to notice:\
    \  It was a little bit tricky when dealing with negative powers, since we actually\
    \ wanted it to say \"is a power\", not \"is power of x\", since the negative numbers\
    \ don't exist in our computer (at least not in the way we represent them in our\
    \ program).  We needed to use \"modular arithmetic\" to check if the \"n\" number\
    \ was even or odd.\nAlso remember that we can use recursion to avoid unnecessary\
    \ function calls.  In this case, we are only calling the is_power function twice,\
    \ once for 3 and once for 5.  It's very easy to see that this works out because\
    \ if the power is even, the 3 must be divisible by the 5.  And if the power is\
    \ odd, the 5 must be divisible by the 3.\n<|/ a dscore=1 |>\n<| c |>\nH", "  \
    \  // Your code here\n    return true\n}\n", "    if x < n {\n        return false\n\
    \    }\n\n    if x%n == 0 {\n        return true\n    }\n\n    return is_simple_power(x//n,\
    \ n)\n}\n", "    if x == 1 {\n        return true\n    }\n    if x > n || n ==\
    \ 1 {\n        return false\n    }\n    if x == n^1 {\n        return true\n \
    \   }\n\n    // find k and l such that x^(2^k) == n\n    // k = floor(log2(n))\n\
    \    // l = n - pow(2, k)\n\n    // find k and l such that x^(l-2) == n\n    //\
    \ k = floor(log2(l))\n    // l = l - pow(2, k - 1)\n\n    // find k and l such\
    \ that x^(l-1) == n\n    // k = floor(log2(l - 1))\n    // l = l - pow(2, k -\
    \ 1)\n\n    return false\n}\n", "    // your code\n    if x==n {\n        return\
    \ true\n    }\n    if n==1 {\n        return false\n    }\n    if n==2 {\n   \
    \     return true\n    }\n    if n%2==0 {\n        n /= 2\n    }\n    for i :=\
    \ 3; i <= n; i += 2 {\n        if x%i == 0 {\n            return false\n     \
    \   }\n    }\n    return true\n}\n", "    return true\n}\n</code>\n<|/ a tags=algorithm,python\
    \ |>\n<| a dscore=0 tags=algorithm,python |>\nOne more solution:\n<code>\n# python\
    \ 3.7\n\ndef isSimplePower(x, n):\n    if x < 0:\n        return False\n    if\
    \ x % n == 0 and n > 1:\n        return True\n\n    # x is a simple power if any\
    \ power of n is equal to x\n    for i in range(1, n):\n        if x % i == 0:\n\
    \            return True\n\n    return False\n\nprint(isSimplePower(16, 4))\n\
    print(isSimplePower(16, 5))\nprint(isSimplePower(16, 6))\n</code>\n<|/ a |>\n\
    <| a dscore=0 |>\nIn Python it is very easy to check if the power is simple or\
    \ not by using the modulus operator\n<code>\ndef is_simple_power(x, n):\n    return\
    \ not x % n and x > 1\n\nprint(is_simple_power(16, 4))\nprint(is_simple_power(16,\
    \ 5))\nprint(is_simple_power(16, 6))\n</code>\nOutput:\n<code>\nFalse\nTrue\n\
    False\n</code>\n<|/ a tags=algorithm,python |>\n<| a tags=algorithm,python |>\n\
    <code>\ndef is_simple_power(x, n):\n    flag = True\n    while n:\n        if\
    \ x % n == 0:\n            flag = False\n            break\n        else:\n  \
    \          x /= n\n            n -= 1\n    return flag\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nCould you explain why this would work, instead of just posting\
    \ a piece of code?\n<|/ c |>\n<| c |>\n`if x % n == 0:` will ensure that the number\
    \ is simple. `flag = True` will set the flag when the `if` statement is true.\
    \ `flag = True` is at the top of the loop so we need not worry about it. And,\
    \ `n -= 1` is at the top so it will decrease `n` every time.\n<|/ c |>\n<| c |>\n\
    If `n` is `0`, then this returns `True` every time, no?\n<|/ c |>\n<| c |>\nNo.\
    \ `n` will be decremented every time `x /= n` is executed.\n<|/ c |>\n<| c |>\n\
    It won\u2019t be executed at all since `n` becomes `0` at the top of the loop.\
    \ That is, if `n` is `0` initially, it\u2019ll be decremented every time `x /=\
    \ n` is executed. `n -= 1` is executed every time `n > 0` as well.\n<|/ c |>\n\
    <| a |>\nThis solution works even if n is not a power of x.\n<code>\ndef isSimplePower(x,\
    \ n):\n    return x == n or n == x or x == ", "    if n%x == 0 {\n        return\
    \ true\n    }\n    return false\n}", "    if x<1 {\n        return false\n   \
    \ }\n    if n<1 {\n        return false\n    }\n    if n==1 {\n        if x==1\
    \ {\n            return true\n        }\n        return false\n    }\n    if n%2==0\
    \ {\n        if x%2==1 {\n            return is_simple_power(x, n/2)\n       \
    \ }\n        if x%2==0 {\n            return false\n        }\n    }\n    return\
    \ is_simple_power(x, n-1)\n}\n", "    \n}\n", "    if n<0 {\n        return false\n\
    \    }\n\n    if x==1 {\n        return true\n    }\n\n    if x*n==x {\n     \
    \   return is_simple_power(n-1, x)\n    }\n\n    return false\n}\n", "    // check\
    \ if n is power of x\n    if n%x == 0 {\n        return true\n    }\n\n    return\
    \ false\n}\n", "    if n%x != 0 {\n        return false\n    }\n    if n<0 {\n\
    \        return false\n    }\n    if n==1 {\n        return true\n    }\n    for\
    \ i := 1; i<=n; i++ {\n        if x*i!=n {\n            return false\n       \
    \ }\n    }\n    return true\n}\n", "    return true\n}\n", "    if x == 0 {\n\
    \        return true\n    }\n    if n == 0 {\n        return false\n    }\n  \
    \  if n%2 == 0 {\n        return is_simple_power(x, n/2)\n    }\n    if n%4 ==\
    \ 0 {\n        return is_simple_power(x, n/4)\n    }\n    return false\n}\n",
  "    if x%n == 0 {\n        return true\n    }\n    for i:= range 1...n {\n    \
    \    if x%n == 0 || x%(n+i)==0 {\n            return false\n        }\n    }\n\
    \    return true\n}\n</code>\n<|/ a |>\n<| c |>\nthis would be better as a comment,\
    \ as it doesn't show any attempt at an answer\n<|/ c |>\n<| c |>\nHi Aurelius,\n\
    Thanks for your reply, but I cannot understand the code. What does \"if x > n\
    \ and x < n^2\" mean and how do I change my code?\n<|/ c |>\n<| c |>\n, what do\
    \ you not understand? The code should be obviously read as a comment, explaining\
    \ how it works. What is your specific question about it? And what did you try\
    \ doing yourself? This site is for helping programmers, not for doing your work\
    \ for you.\n<|/ c |>\n<| c |>\nmy specific question is: how do I change the code?\n\
    I tried to change \"for i := range 1...n\" to \"for i := range 2...n\", but I\
    \ don't know what to do next.\n<|/ c |>\n<| c |>\n, okay, so you changed that\
    \ part, but what exactly do you want to do next? And what do you not understand,\
    \ how does `for i := range 1...n` work?\n<|/ c |>\n<| a tags=go |>\n<code>", " \
    \   d := x\n    d *= d\n    d *= d\n    d *= d\n    return d == n\n}\n", "   \
    \ if n == 0 {\n        return true\n    }\n    if n%2 == 0 {\n        return is_simple_power(x//2,\
    \ n-1) && is_simple_power(x*x, n)\n    }\n    return is_simple_power(x//2, n-1)\
    \ && is_simple_power(x*x, n)\n}\n", "    if x%n == 0 {\n        for i := 0; i\
    \ < n; i++ {\n            if x%n == 0 {\n                return true\n       \
    \     }\n            x *= x\n        }\n        return false\n    }\n    return\
    \ true\n}\n", "    if x == 1 {\n        return true\n    }\n    if n == 0 {\n\
    \        return false\n    }\n    if n == 1 {\n        return true\n    }\n  \
    \  if n%2 == 0 {\n        return is_simple_power(x//2, n)\n    }\n    return false\n\
    }\n", "    return is_simple_power_test(float64(x), float64(n))\n}", "    // Your\
    \ code here\n    \n    return true\n}\n", "    if x == 0 || n == 0 {\n       \
    \ return false\n    }\n    if n % x == 0 {\n        if n != x {\n            return\
    \ false\n        }\n        return true\n    }\n    return is_simple_power(x,\
    \ n-1)\n}\n", "    if n%x == 0 {\n        return true\n    }\n    return false\n\
    }\n</code>\n<|/ a tags=go,algorithm |>\n<| c |>\nI really like the use of `return\
    \ n == 1; return n == 0;`, but I'd also like to point out that `return n == n\
    \ == 0;` is probably not what you want to do.\n<|/ c |>\n<| c |>\n: You're right,\
    \ of course that line makes no sense. I'll just remove it since it's superfluous.\n\
    <|/ c |>\n<| c |>\n`return n == n == 0;` is what people actually want, but it's\
    \ a bug, it's an infinite loop and therefore a bug.\n<|/ c |>\n<| c |>\n: Yeah,\
    \ thanks for the hint, I completely missed that one. I've edited my answer.\n\
    <|/ c |>\n<| a tags=go,algorithm |>\nA simple approach would be to convert the\
    \ given number to a binary representation and perform some bitwise operations.\n\
    <code>", "    if n == 1 {\n        return true\n    }\n\n    x /= n\n    n /=\
    \ n\n\n    return n == x\n}\n", "    if n%x == 0 {\n        return true\n    }\n\
    \    return false\n}\n", "    if x<=0 || n<=1{\n        return false\n    }\n\
    \    for i:=0;i<n-1;i++{\n        if x%n!=0 {\n            break\n        }\n\
    \        x/=n\n    }\n    return true\n}\n", "    if x==1 {\n        return true\n\
    \    }\n    if n==0 {\n        return false\n    }\n    return is_simple_power(x,\
    \ n-1) && (x&(n-1))==0\n}\n", "    if x%n == 0 {\n        return true\n    }\n\
    \    if n == 1 {\n        return true\n    }\n    if x%n != 0 {\n        return\
    \ false\n    }\n    if n == 2 {\n        return true\n    }\n    if x%n != 0 {\n\
    \        return false\n    }\n    if n == 3 {\n        return true\n    }\n  \
    \  if x%n != 0 {\n        return false\n    }\n    if n == 4 {\n        return\
    \ true\n    }\n    if x%n != 0 {\n        return false\n    }\n    if n == 5 {\n\
    \        return true\n    }\n    if x%n != 0 {\n        return false\n    }\n\
    \    return false\n}\n", "    if x%n == 0 {\n        return true\n    }\n    for\
    \ i := 0; i < n; i++ {\n        if x%n%i == 0 {\n            return false\n  \
    \      }\n    }\n    return true\n}\n", "    if n == 1 {\n        return true\n\
    \    }\n    if n%2 == 0 {\n        if x == n*n*n {\n            return true\n\
    \        }\n    }\n    return false\n}\n", "    if x < 0 || n < 0 {\n        return\
    \ false\n    }\n    if x == n {\n        return true\n    }\n    if n%x == 0 {\n\
    \        return false\n    }\n    for i := 0; i < x; i++ {\n        if n%(i*i)\
    \ == 0 {\n            return false\n        }\n    }\n    return true\n}\n", " \
    \   if x == 1 {\n        return true\n    }\n    if n == 0 || x%n == 0 {\n   \
    \     return false\n    }\n    for i := 0; i < n; i++ {\n        if (x*x == n*n*n\
    \ && i%n != 0) {\n            return false\n        }\n    }\n    return true\n\
    }\n", "    if x < 0 || n > 32 {\n        return false\n    }\n    if n == 1 {\n\
    \        return true\n    }\n    if n%2 != 0 {\n        return false\n    }\n\
    \    if x&(n-1) != 0 {\n        return false\n    }\n    if n == x {\n       \
    \ return true\n    }\n    return is_simple_power(x, n-1)\n}\n", "    if n == 1\
    \ {\n        return true\n    }\n    if x != x {\n        return false\n    }\n\
    \    if n % x != 0 {\n        return false\n    }\n    if n%x == 0 {\n       \
    \ return is_simple_power(x, n/x)\n    }\n    return true\n}", "    if n == 1 {\n\
    \        return true\n    }\n    if n != x {\n        return false\n    }\n  \
    \  return is_simple_power(x, n-1)\n}\n", "    if n < 2 {\n        return false\n\
    \    }\n    if n == 1 {\n        return true\n    }\n    if n == 2 {\n       \
    \ return x != 1\n    }\n\n    for i := 1; i <= n; i++ {\n        if x != n**i\
    \ {\n            return false\n        }\n    }\n    return true\n}\n", "    if\
    \ n%x == 0 {\n        return true\n    }\n    return false\n}", "    return n\
    \ == x\n}\n", "    if n<1 {\n        return false\n    }\n    if n==1 {\n    \
    \    return true\n    }\n    if n%2==0 {\n        return is_simple_power(x*x,\
    \ n/2)\n    }\n    return false\n}\n", "    if x == 1 {\n        return true\n\
    \    }\n    if n == 0 {\n        return false\n    }\n    if n%2 == 1 {\n    \
    \    if x == n*(x + 1) {\n            return true\n        }\n        if x ==\
    \ n*(x + 2)+1 {\n            return true\n        }\n    }\n    return false\n\
    }\n", "    if n < 1 {\n        return false\n    }\n    pow_t := pow(x, n)\n \
    \   if pow_t == x {\n        return true\n    }\n    if pow_t < x {\n        return\
    \ false\n    }\n    if pow_t > x {\n        return is_simple_power(pow_t, n)\n\
    \    }\n}\n", "    if n == 0 {\n        return true\n    }\n    if x == 1 {\n\
    \        return n == 1\n    }\n    if x%n != 0 {\n        return false\n    }\n\
    \    return is_simple_power(x, n-1)\n}\n", "    if n<0 {\n        return false\n\
    \    }\n\n    if n==1 {\n        return true\n    }\n\n    if n==x {\n       \
    \ return true\n    }\n\n    for i := 0; i < n; i++ {\n        if x&1 == 1 {\n\
    \            if x%2==1 {\n                return false\n            }\n      \
    \  }\n        x >>= 1\n    }\n    return true\n}\n", "    x := x ^ n\n    if x\
    \ == 0 {\n        return true\n    }\n    return false\n}\n", "    \n}\n", " \
    \   if x%n == 0 {\n        return true\n    }\n    return false\n}\n</code>\n\
    <|/ a tags=go |>\n<| c |>\nYour answer is good but a little bit more concise and\
    \ compact for golang, please check my answer.\n<|/ c |>\n<| a dscore=1 |>\n<code>\n\
    package main\n\nimport (\n    \"fmt\"\n    \"math\"\n)\n", "    if n < 1 || n\
    \ > x {\n        return false\n    }\n    if x == 1 {\n        return true\n \
    \   }\n    if n%2 != 0 {\n        return false\n    }\n    return is_simple_power(x,\
    \ n//2)\n}\n", "    if n**int = x{\n        return true\n    }\n    return false\n\
    }\n", "    // Your code here\n\n    if x == 0 {\n        return true\n    }\n\n\
    \    power := 1\n    for i := 1; i <= n; i++ {\n        power *= x\n    }\n\n\
    \    if power == x {\n        return true\n    }\n\n    return false\n}\n", " \
    \   \n    if n==1 {\n        return true\n    }\n    if n>1&&n%2==0&&n%3==0&&n%5==0&&n%7==0{\n\
    \        return false\n    }\n    \n    for i := 5; i <= n; i++ {\n        \n\
    \        if x % n == 0 {\n            \n            if x//n%n==x {\n         \
    \       return true\n            }\n            \n            return false\n \
    \       }\n    }\n    \n    return false\n}\n", "    if n == 0 {\n        return\
    \ true\n    }\n    return false\n}\n", "    if n == 0 {\n        return false\n\
    \    }\n    if n%x == 0 {\n        return true\n    } else {\n        return is_simple_power(x,\
    \ n-1)\n    }\n}\n</code>\nSolution 3:\n<code>\npackage is_simple_power_test\n\
    \nimport (\n    \"testing\"\n    \"fmt\"\n    \"math\"\n)\n", "    if n < 0 {\n\
    \        fmt.Println(\"n must be positive\")\n        return false\n    }\n  \
    \  if x < 0 {\n        fmt.Println(\"x must be positive\")\n        return false\n\
    \    }\n    if n == 0 {\n        fmt.Println(\"n must be positive\")\n       \
    \ return false\n    }\n    if n == 1 {\n        return true\n    }\n    q := n\n\
    \    p := 1\n    q := n\n    i := 0\n    s := 1\n    s := 1\n    for i := 1; i\
    \ <= n; i++ {\n        if q == x {\n            return true\n        }\n     \
    \   p *= q\n        q = s\n        s *= i\n    }\n    return false\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nHow would I write this to test it with a package to\
    \ test my is_power_of_2 function?\n<|/ c |>\n<| c |>\nSee my answer. Also see\
    \ this [SO post](https://stackoverflow.com/questions/64405794/check-whether-a-number-is-power-of-2-without-using-mod/64405948#64405948)\n\
    <|/ c |>\n<| a dscore=0 tags=math,algorithm,go,java,c++ |>\nThis is an implementation\
    \ using Gauss's Theorem:\n<code>\npackage main\n\nimport (\n    \"fmt\"\n    \"\
    math\"\n)\n", "    if n == 0 {\n        return true\n    }\n    if x == 0 {\n\
    \        return false\n    }\n    if n <= 0 {\n        return false\n    }\n\n\
    \    // find power of n\n    pow, err := func() (int, error) {\n        r := n\n\
    \        for {\n            r = r * n\n            if r < 1 {\n              \
    \  return 0, fmt.Errorf(\"cannot find power of %d for %d!\", n, x)\n         \
    \   }\n            if r == x {\n                return r, nil\n            }\n\
    \        }\n    }()\n    if err != nil {\n        return false\n    }\n\n    return\
    \ true\n}\n", "    if x < 0 || n < 1 {\n        return false\n    }\n\n    if\
    \ n == 1 {\n        return true\n    }\n\n    i := x\n    for i < (n-1)/2 {\n\
    \        i *= 2\n        if i == x {\n            return true\n        }\n   \
    \ }\n\n    if n != 1<<len(fmt.Sprintf(\"%d\", n)) {\n        return false\n  \
    \  }\n    return false\n}\n", "    // Your code here\n    if n == 0 {\n      \
    \  return true\n    } else if n%2 == 0 {\n        return is_simple_power(x/2,\
    \ n/2)\n    } else {\n        return is_simple_power(x/2, n/2)\n    }\n}\n", " \
    \   if n**x == x {\n        return true\n    }\n    return false\n}\n", "    if\
    \ x == 1 {\n        return true\n    }\n    if x == 0 {\n        return false\n\
    \    }\n    if n<0 {\n        return false\n    }\n    if x > n-1 {\n        return\
    \ false\n    }\n\n    y := int(n-1)\n    if y*y == x {\n        return true\n\
    \    }\n    return is_simple_power(x/y, y)\n}\n</code>\n<|/ a tags=go,algorithm\
    \ |>\n<| c |>\nThank you! I never know that the problem is about prime numbers\
    \ but i appreciate your answer!\n<|/ c |>\n<| c |>\nYou can't really define prime\
    \ numbers other than for integers so you aren't really working with prime numbers.\
    \ Your algorithm only works for natural numbers but in reality we do have natural\
    \ numbers that can be expressed as prime numbers (except for 1 and 2) so in general\
    \ a number is a simple power of x if and only if x = n-1\n<|/ c |>\n<| c |>\n\
    The complexity of this solution is O(log n). Do you know a faster method?\n<|/\
    \ c |>\n<| c |>\nThis is still O(log n) but it's not the O(log^2 n)-time solution\
    \ to the problem (although that can be amended by doing a binary search for a\
    \ prime number rather than a linear search). The asymptotic complexity of the\
    \ binary search is still O(log n) but the constant factors are much larger.\n\
    <|/ c |>\n<| c |>\nThanks. I didn't know that\n<|/ c |>\n<| a tags=go,algorithm\
    \ |>\nI implemented this in GO just recently, using prime number factorization.\
    \ It took me a little bit of time to understand how it works, but I figured it\
    \ out. Here is my code and the full example. Hope this helps.\n<code>\npackage\
    \ main\n\nimport (\n    \"math\"\n    \"math/big\"\n    \"math/bits\"\n    \"\
    testing\"\n)\n", "    if x < n {\n        return false\n    }\n    for i := 1;\
    \ i <= n; i++ {\n        if x == n**i {\n            return true\n        }\n\
    \    }\n    return false\n}\n", "    return true // TODO: implement this function\n\
    }\n", "    if n <= 1 {\n        return true\n    }\n    if x == 1 {\n        return\
    \ true\n    }\n    return is_simple_power_test(n, x%n)\n}\n", "    if n == 1 {\n\
    \        return true\n    }\n    if n <= 1 {\n        return false\n    }\n  \
    \  if n % 2 == 0 {\n        x /= 2\n    }\n    if x != 1 {\n        return false\n\
    \    }\n    return is_simple_power(x, n/2)\n}\n", "    if n != 1 {\n        if\
    \ n % x == 0 {\n            if n/x == x {\n                if n == 1 {\n     \
    \               return true\n                }\n                return false\n\
    \            }\n            return false\n        }\n    }\n    return true\n\
    }\n", "    // Your code here\n    if n != x {\n        return false\n    }\n \
    \   if n%2 == 0 {\n        return true\n    }\n    if x != 1 {\n        return\
    \ false\n    }\n    for i := 3; i <= n; i += 2 {\n        if x%i == 0 {\n    \
    \        return false\n        }\n    }\n    return true\n}\n", "    if n <= 1\
    \ {\n        return true\n    }\n    if x <= 0 {\n        return false\n    }\n\
    \    if n%2 == 0 {\n        return is_simple_power(x, n//2)\n    }\n    return\
    \ is_simple_power(x, n-1)\n}\n", "    if x == n {\n        return true\n    }\n\
    \    if n < x {\n        return false\n    }\n    if n == 1 {\n        return\
    \ true\n    }\n    if x > n {\n        return false\n    }\n    if x == 1 {\n\
    \        return true\n    }\n    if n == 2 {\n        return true\n    }\n   \
    \ if x > n {\n        return false\n    }\n    if n == 4 {\n        return true\n\
    \    }\n    if x > n {\n        return false\n    }\n    if n == 8 {\n       \
    \ return true\n    }\n    if n > 8 {\n        return false\n    }\n    if n ==\
    \ 16 {\n        return true\n    }\n    if n > 16 {\n        return false\n  \
    \  }\n    return false\n}\n", "    // Write your code here\n    if x==0 || n==0\
    \ {\n        return true\n    }\n    if n==1 {\n        return true\n    }\n \
    \   if x%n==0 {\n        return is_simple_power(x/n, n)\n    }\n    return false\n\
    }\n", "    if x==1 {\n        return true\n    }\n    if n==1 {\n        return\
    \ true\n    }\n    if n%x==0 {\n        return true\n    }\n    if x%n==0 {\n\
    \        return true\n    }\n    if n%x==0 || n%n==0 {\n        return false\n\
    \    }\n    return true\n}", "    if x < n {\n        return is_simple_power(x,\
    \ n-1)\n    } else {\n        if x == n**n {\n            return true\n      \
    \  } else {\n            return false\n        }\n    }\n}\n", "    if x == 1\
    \ {\n        return true\n    }\n    if n%x == 0 {\n        return is_simple_power(x,\
    \ n//x)\n    }\n    return false\n}\n", "    if n==1 {\n        return x==1\n\
    \    }\n    if n%2==0 {\n        return (x%n)==0\n    } else {\n        return\
    \ (x%n)==(n-1)/2\n    }\n}\n</code>\nIt takes about 3 seconds to run:\n<code>\n\
    go test -count 40000\n</code>\n<|/ a dscore=2 |>\n<| c |>\n`is_simple_power` does\
    \ not work for negative powers. It also doesn't work for non-integer powers (eg\
    \ `is_simple_power(2, 3.2)`).\n<|/ c |>\n<| c |>\n, thanks, added a version for\
    \ non-integer powers. It's not very efficient, but it's quick for most cases.\n\
    <|/ c |>\n<| c |>\n: It doesn't even work for non-integer powers (eg `is_simple_power(2,\
    \ 3.4)`).\n<|/ c |>\n<| a tags=algorithm,powers,numbers |>\nYou can use logarithms\
    \ to solve this problem using logarithm of base 2 in O(log n)\n<code>\npublic\
    \ boolean isPowerOfTwo(int value) {\n    if(value == 0) return false;\n\n    long\
    \ log2 = Math.log(value) / Math.log(2);\n\n    return log2 == (int) log2;\n}\n\
    </code>\n<|/ a dscore=2 |>\n<| a dscore=1 tags=algorithm,powers,numbers |>\nIn\
    \ Python, using math.isclose and math.isclose:\n<code>\nimport math\n\ndef is_pow2(num,\
    \ tol=1e-5):\n    if num == 0: return False\n    else: return bool(num == int(num)\
    \ ** 2)\n\ndef isPowerOfTwo(num, tol=1e-5):\n    if num == 0 or num == 1:\n  \
    \      return False\n    if num > 1:\n        return bool(num == int(num) ** 2)\
    \ and math.isclose(int(num) ** 2, num, rel_tol=tol)\n    return bool(num == int(num)\
    \ ** 2) or isPowerOfTwo(int(num) ** 2, tol=tol)\n</code>\n<|/ a |>\n<| c |>\n\
    This doesn't work (gives wrong results) when `num` <= 0.\n<|/ c |>\n<| c |>\n\
    The `if` statements don't seem right. `if num > 1:` should be `if num > 1:` and\
    \ `if num == int(num) ** 2`\n<|/ c |>\n<| a tags=algorithm,powers,numbers dscore=1\
    \ |>\nHere is my implementation to check if a number is power of 2 (integer).\n\
    <code>\ndef isPowerOfTwo(n):\n    if n == 0:\n        return True\n    if n ==\
    \ 1:\n        return True\n    else:\n        if n & (n - 1) == 0:\n         \
    \   return False\n        else:\n            return isPower", "    if n <= 1 {\n\
    \        return true\n    }\n    if n%2 != 0 {\n        return false\n    }\n\
    \    return is_simple_power(x, n-1)\n}\n", "    // TODO: Write your code here\n\
    \n    return true\n}\n", "    if n%x == 0 {\n        return true\n    }\n    return\
    \ false\n}\n", "    if n == 0:\n        return true\n    \n    if n%2 != 0 {\n\
    \        if n&1 == 1 {\n            return false\n        }\n        return is_simple_power(x*x,\
    \ n-1)\n    }\n    \n    return is_simple_power(x*x, n-1)\n}\n", "    if x==0\
    \ {\n        fmt.Println(\"x==0\", x, n)\n        return false\n    }\n    if\
    \ x<n {\n        fmt.Println(\"x < n\", x, n)\n        return false\n    }\n \
    \   if n==1 {\n        fmt.Println(\"n==1\", x, n)\n        return true\n    }\n\
    \n    fmt.Println(\"n==2\", x, n)\n\n    //fmt.Println(\"x=\", x, \", n=\", n)\n\
    \    sqrt_x := int(math.Sqrt(float64(x)))\n    sqrt_x := int(math.Sqrt(float64(x)))\n\
    \    //fmt.Println(\"sqrt\", sqrt_x, x)\n    if sqrt_x==x {\n        fmt.Println(\"\
    sqrt_x == x\", x, n)\n        return true\n    }\n\n    if sqrt_x>x {\n      \
    \  fmt.Println(\"sqrt_x > x\", x, n)\n        return false\n    }\n\n    //fmt.Println(\"\
    sqrt_x <= x\", x, n)\n    if sqrt_x<x {\n        fmt.Println(\"sqrt_x < x\", x,\
    \ n)\n        return false\n    }\n\n    //fmt.Println(\"sqrt_x >= x\", x, n)\n\
    \    return false\n}\n</code>\n<|/ a dscore=0 tags=go |>\n<| c |>\nWhat about\
    \ negative numbers?\n<|/ c |>\n<| c |>\nYeah, I agree with you, it is very simple\
    \ to solve. But the original code has a condition `if x==0` which does not cover\
    \ the case of negative numbers.\n<|/ c |>\n<| c |>\nAh, I see what you mean now.\
    \ `math.Sqrt(float64(x))` can cause errors if `x` happens to be negative as it\
    \ will return NaN.\n<|/ c |>\n<| c |>\nAlso if x is really big it will probably\
    \ take forever to get sqrt_x. Probably better to compare it to x instead of sqrt_x.\n\
    <|/ c |>\n<| a tags=go dscore=0 |>\n<code>\npackage main\n\nimport (\n    \"fmt\"\
    \n)\n", "    if n^x==x {\n        return true\n    } else {\n        return false\n\
    \    }\n}\n", "    if n%int(x) != 0 {\n        return false\n    }\n    if n ==\
    \ 1 {\n        return true\n    }\n    return is_simple_power(x, n-1)\n}\n", " \
    \   if n==0 {\n        return true\n    }\n    if n%2==0 {\n        if x%n==0\
    \ {\n            return true\n        }\n        return false\n    }\n    if n%2==1\
    \ {\n        if x%n+1==0 {\n            return true\n        }\n        return\
    \ false\n    }\n    return is_simple_power(x, n-1)\n}\n</code>\n<|/ a dscore=2\
    \ tags=recursion,function,go |>\n<| c |>\nThe solution is fine but what is the\
    \ point of recursion? Why not just use loops and no recursion?\n<|/ c |>\n<| c\
    \ |>\n: There are cases where recursion makes sense. For example the [Karatsuba\
    \ algorithm](https://en.wikipedia.org/wiki/Karatsuba_algorithm#Looping_and_recursion)\
    \ uses it as an optimization technique for divide and conquer\n<|/ c |>\n<| c\
    \ |>\nI wouldn't call that a technique as recursion is just a loop which gets\
    \ executed again, but thanks for pointing that out.\n<|/ c |>\n<| a dscore=2 tags=recursion,function,go\
    \ |>\nThis implementation checks to see if n is a simple power of x by checking\
    \ if n has a factor of x or a factor greater than x, and if so, checks the power\
    \ of the divisor:\n<code>\npackage main\n\nimport (\n    \"fmt\"\n    \"math\"\
    \n    \"math/big\"\n)\n", "    return n**int(x) == x\n}\n", "    // Your code\
    \ goes here\n    if x != n**x {\n        return false\n    }\n    return true\n\
    }\n", "    if n == 1 {\n        return true\n    }\n    y := n\n    for {\n  \
    \      if y == x {\n            return true\n        }\n        y *= 2\n    }\n\
    \    return false\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nYeah sorry I forgot\
    \ to mention, that is what I wrote, but it is taking a lot longer\n<|/ c |>\n\
    <| c |>\nSo you should use `math.Pow`.  It's also worth noting that for large\
    \ numbers such as `n = 300`, you run out of memory and get an `Overflow` error.\n\
    <|/ c |>\n<| c |>\nYeah I ran it in my pc and it was taking 1 second to run but\
    \ now it takes 3 seconds. I am wondering why it is taking so long to run ?\n<|/\
    \ c |>\n<| c |>\nIt takes longer than your pc because your pc is a laptop.\n<|/\
    \ c |>\n<| c |>\nBut it is supposed to take more then 5 seconds, right? So if\
    \ I want to run this for 300 it is going to take more then 5 minutes\n<|/ c |>\n\
    <| a |>\nHere is another solution. This one uses recursion and does not require\
    \ any libraries. It returns true if the number is a power of n\n<code>", "   \
    \ if x == 0 || n == 0 {\n        return false\n    }\n\n    pow_n := n\n    for\
    \ {\n        if pow_n == 0 {\n            return true\n        }\n        if pow_n%2\
    \ == 0 {\n            pow_n = (pow_n / 2)\n        } else {\n            pow_n\
    \ = (pow_n * 3)\n        }\n    }\n}\n", "    if n < 0 {\n        fmt.Println(\"\
    n must be positive integer\")\n        return false\n    }\n    if n%x == 0 {\n\
    \        return true\n    } else {\n        return false\n    }\n}\n", "    return\
    \ true\n}\n</code>\n<|/ a tags=go,math,algorithm |>\n<| c |>\nThis is more of\
    \ a comment than an answer.\n<|/ c |>\n<| c |>\nHow is this not an answer?\n<|/\
    \ c |>\n<| c |>\nThe question was asking to write his own algorithm to check a\
    \ number `x` is a simple power of `n`, your answer is trying to write his own\
    \ algorithm to check a number `x` is simple, not the way you stated it.\n<|/ c\
    \ |>\n<| c |>\nI agree that your answer was a better fit, but I don't think this\
    \ should be the accepted answer. Not only because it doesn't explain how he can\
    \ write the code, but also because it does not actually explain what he's doing,\
    \ which would make a more efficient answer.\n<|/ c |>\n<| a dscore=2 |>\nI believe\
    \ it could be done using math/big:\n<code>\npackage main\n\nimport (\n    \"fmt\"\
    \n    \"math/big\"\n)\n", "    // Write your code here\n    if x == 0 {\n    \
    \    return true\n    }\n    if n == 0 {\n        return false\n    }\n\n    if\
    \ n%2 == 0 {\n        return is_simple_power(x, n//2)\n    } else {\n        return\
    \ !is_simple_power(x, n//2)\n    }\n}\n", "    if x == 0 || n == 0 {\n       \
    \ return false\n    }\n    return n%int(pow(x, int(n/2))) == 0 && is_simple_power(x,\
    \ int(n/2))\n}\n</code>\n<|/ a |>\n<| c |>\n`n % (int(n/2))` will always return\
    \ 0\n<|/ c |>\n<| c |>\nyes, that's why it is written as `n%int(pow(x,int(n/2)))`\n\
    <|/ c |>\n<| c |>\n`n % (int(n/2))` will always return 0\n<|/ c |>\n<| c |>\n\
    The test cases say 3 power of 2 and 1 power of 3\n<|/ c |>\n<| c |>\nI know, I\
    \ was talking about the case when `n` is odd. When `n` is odd, `n%int(pow(x,int(n/2)))`\
    \ will always be 0, and `is_simple_power(x, int(n/2))` will always be true (since\
    \ n is odd, n % int(pow(x,int(n/2))) == 0 && is_simple_power(x, int(n/2)) will\
    \ always be true).\n<|/ c |>\n<| a |>\n<code>\n#include <stdio.h>\n#include <math.h>\n\
    \nint main(void) {\n    int x = 0;\n    int n;\n    int y = 0;\n\n    printf(\"\
    Enter an odd number n: \");\n    scanf(\"%d\", &n);\n\n    if (n % 2 == 0)\n \
    \       printf(\"The number %d is a simple power of %d.\\n\", n, n);\n    else\
    \ {\n        while (n--) {\n            y += x;\n        }\n        if (y == n)\n\
    \            printf(\"The number %d is a simple power of %d.\\n\", n, n);\n  \
    \      else\n            printf(\"The number %d is not a simple power of %d.\\\
    n\", n, n);\n    }\n    return 0;\n}\n</code>\n<|/ a dscore=0 tags=c,algorithm\
    \ |>\n<| c |>\nThe test cases say 3 power of 2 and 1 power of 3\n<|/ c |>\n<|\
    \ c |>\nThe test cases say 3 power of 2 and 1 power of 3\n<|/ c |>\n<| c |>\n\
    It says 2 power of 3\n<|/ c |>\n<| c |>\nI checked the code with the test cases\
    \ and it works fine.\n<|/ c |>\n<| c |>\nIt says 3 power of 2 and 1 power of 3\n\
    <|/ c |>\n<| a |>\nHere's a Python solution:\n<code>\ndef powerof3(n):\n    return\
    \ int(n**0.5) == n\n\ndef powerof2(n):\n    s = 0\n    while n:\n        s +=\
    \ n\n        n /= 3\n    return s == n\n\ndef powerof1(n):\n", "    if n==1 {\n\
    \        return x==1\n    }\n    if x<0 {\n        fmt.Println(\"x is negative\
    \ number or bigger than 0\")\n        return false\n    }\n    if n<0 {\n    \
    \    fmt.Println(\"n is negative number\")\n        return false\n    }\n    if\
    \ x%n==0 {\n        return true\n    }\n    if n%x==0 {\n        return true\n\
    \    }\n    if n==1 {\n        return x==1\n    }\n    if x==1 {\n        return\
    \ false\n    }\n    if n%2==0 {\n        return is_simple_power(x, n/2)\n    }\n\
    \    if x%2==0 {\n        return false\n    }\n    if x%3==0 {\n        return\
    \ false\n    }\n    if x%5==0 {\n        return false\n    }\n    if x%7==0 {\n\
    \        return false\n    }\n    if x%11==0 {\n        return false\n    }\n\
    \    if x%13==0 {\n        return false\n    }\n    if x%17==0 {\n        return\
    \ false\n    }\n    if x%19==0 {\n        return false\n    }\n    if x%23==0\
    \ {\n        return false\n    }\n    if x%29==0 {\n        return false\n   \
    \ }\n    if x%31==0 {\n        return false\n    }\n    if x%35==0 {\n       \
    \ return false\n    }\n    if x%37==0 {\n        return false\n    }\n    if x%41==0\
    \ {\n        return false\n    }\n    if x%43==0 {\n        return false\n   \
    \ }\n    if x%47==0 {\n        return false\n    }\n    if x%49==0 {\n       \
    \ return false\n    }\n    if x%51==0 {\n        return false\n    }\n    if x%55==0\
    \ {\n        return false\n    }\n    if x%57==0 {\n        return false\n   \
    \ }\n    if x%59==0 {\n        return false\n    }\n    if x%61==0 {\n       \
    \ return false\n    }\n    if x%63==0 {\n        return false\n    }\n    if x%65==0\
    \ {\n        return false\n    }\n    if x%67==0 {\n        return false\n   \
    \ }\n    if x%69==0 {\n        return false\n    }\n    if x%71==0 {\n       \
    \ return false\n    }\n    if x%73==0 {\n        return false\n    }\n    if x%75==0\
    \ {\n        return false\n    }\n    if x%77==0 {\n        return false\n   \
    \ }\n    if x%79==0 {\n        return false\n    }\n    if x%81==0 {\n       \
    \ return false\n    }\n    if x%83==0 {\n        return false\n    }\n", "   \
    \ if n == 1 {\n        return true\n    }\n    if x != n*n*n {\n        return\
    \ false\n    }\n    return is_simple_power(x, n-1)\n}\n", "    if n%x == 0 {\n\
    \        fmt.Println(\"true\")\n        return true\n    } else {\n        fmt.Println(\"\
    false\")\n        return false\n    }\n}\n", "    if n < 0 {\n        return false\n\
    \    }\n    if n&1 == 0 {\n        return true\n    }\n    if n == 1 {\n     \
    \   return true\n    }\n    x /= n\n    if x == 1 {\n        return true\n   \
    \ }\n    return is_simple_power(x, n-1)\n}\n</code>\n<|/ a dscore=0 tags=python,recursion,algorithm,big-o\
    \ |>\n<| c |>\n`is_simple_power` is a very specific `isPower` function, which\
    \ can be trivially expressed as a call to `isPower` on `n`.\n<|/ c |>\n<| c |>\n\
    : yes, it can be expressed as an exact call to `isPower` on `n` but then `n` must\
    \ be an `int`. A much better solution is to pass in a `power` function as an argument\
    \ of `isPower`. An example implementation of `power` would be `func(x int, n int)\
    \ bool`\n<|/ c |>\n<| c |>\nI'm sorry to disagree with you, but this is just a\
    \ special case of [the dual problem](https://en.wikipedia.org/wiki/Catamorphism#The_dual-problem).\
    \ I'm just saying that it should _technically_ be expressed as a call to `isPower`\
    \ on `n`.\n<|/ c |>\n<| c |>\n: I totally agree. The problem is that the solution\
    \ to `isPower` is _very_ specific to `power`.  I guess I should edit the answer\
    \ to be more explicit.\n<|/ c |>\n<| c |>\nThis is awesome and I appreciate it,\
    \ however, I cannot get the code to do exactly what I want. In the example, 1\
    \ and 4 are simple powers of 2 and 2 and 8 are simple powers of 2 but 3 and 4\
    \ are not.\n<|/ c |>\n<| a tags=python,recursion,algorithm,big-o |>\nHere is a\
    \ C++ solution:\n<code>\nbool isSimplePower(int x, int n)\n{\n    if (n < 0) return\
    \ false;\n    if (n == 1) return true;\n    if (n & 1 == 0) return x == 1;\n \
    \   if (n < 2) return false;\n    int r = 1;\n    while(n /= 2)\n    {\n     \
    \   r *= x;\n    }\n    return x == r;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    This doesn't work for negative numbers. What if x is negative and n is positive?\
    \ I'm missing something in the logic.\n<|/ c |>\n<| c |>\nThen the negative number\
    \ is not power of the positive number. So the answer is false. Which is exactly\
    \ what the problem asks for.\n<|/ c |>\n<| c |>\n", "    x /= n\n    for y :=\
    \ 1; x*y <= n; y++ {\n        if x*y == x {\n            return true\n       \
    \ }\n    }\n    return false\n}\n", "    if x<0 {\n        return false\n    }\n\
    \n    if x%n == 0 {\n        return true\n    }\n\n    return is_simple_power(x,\
    \ n-1)\n}\n", "    if x == 1 {\n        return true\n    }\n    if n%x == 0 {\n\
    \        return true\n    }\n    return false\n}\n", "    if n==1 {\n        return\
    \ true\n    }\n    if n%2 != 0 {\n        return false\n    }\n    \n    if n<10\
    \ {\n        return is_simple_power(x, n/2)\n    }\n    \n    x /= n\n    if x\
    \ == 1 {\n        return true\n    }\n    \n    return false\n}\n", "    if x\
    \ == 0 || n == 0 {\n        return false\n    }\n    if n%x == 0 {\n        return\
    \ true\n    }\n    return false\n}\n", "    if x%n == 0 {\n        return true\n\
    \    } else {\n        return false\n    }\n}", "    if n%x == 0 {\n        return\
    \ true\n    }\n    if x > n/x+1 {\n        return false\n    }\n    if n == 1\
    \ {\n        return true\n    }\n    if n%2 == 0 {\n        return is_simple_power(x,\
    \ n-1)\n    }\n    if n%3 == 0 {\n        return is_simple_power(x, n/2)\n   \
    \ }\n    return false\n}\n", "    if n == 0 {\n        return false\n    }\n \
    \   if n < 0 || n > 10 {\n        return false\n    }\n\n    if x != n**x {\n\
    \        return false\n    }\n    return true\n}\n", "    if n%x == 0 {\n    \
    \    return true\n    }\n    return false\n}\n", "    if n%2 == 1 {\n        fmt.Println(\"\
    n must be even\")\n        return false\n    }\n    if n%x == 0 {\n        fmt.Println(\"\
    n must be even\")\n        return false\n    }\n    y := n\n    while y > x {\n\
    \        y--\n        if y%x%x == 0 {\n            return true\n        }\n  \
    \  }\n    return false\n}\n", "    if n<1 {\n        return false\n    }\n   \
    \ return x*x == n\n}\n", "    if n < 0 {\n        return false\n    }\n    if\
    \ x == 1 {\n        return true\n    }\n    if x != n**x {\n        return false\n\
    \    }\n    n /= 2\n    for {\n        if x == 1 {\n            return true\n\
    \        }\n        if x != n**x {\n            return false\n        }\n    \
    \    x *= 2\n        n--\n    }\n}\n", "    if n <= 0 {\n        return false\n\
    \    }\n    if n%2 == 0 {\n        return x == n*n\n    }\n    if n%2 == 1 {\n\
    \        return x == n*(n+1)/2\n    }\n    return is_simple_power(x, n/2)\n}\n",
  "    if n<1 {\n        return false\n    }\n    if n==1 {\n        return true\n\
    \    }\n    if n==2 {\n        return x==1\n    }\n    if n%2==0 {\n        return\
    \ is_simple_power(x, n/2)\n    }\n    return is_simple_power(x*x, n/2)\n}\n",
  "    // Your code here\n    // return true\n}\n</code>\nNow let's test our function\n\
    <code>\npackage is_simple_power_test\n\nimport (\n    \"testing\"\n)\n", "   \
    \ if n==0 {\n        fmt.Println(\"n==0\")\n        return false\n    }\n    if\
    \ n==1 {\n        fmt.Println(\"n==1\")\n        return true\n    }\n    if n%2==0\
    \ {\n        fmt.Println(\"n%2==0\")\n        return false\n    }\n    if x==n**(n/2)\
    \ {\n        fmt.Println(\"x==n**(n/2)\")\n        return true\n    }\n    return\
    \ false\n}\n", "    if x < 0 {\n        return false\n    }\n    if n == 1 {\n\
    \        return true\n    }\n    if x == 1 {\n        return true\n    }\n   \
    \ if n % 2 == 0 {\n        return is_simple_power(x//2, n)\n    }\n    if x%2\
    \ == 0 {\n        return false\n    }\n    if n%2 == 0 {\n        return false\n\
    \    }\n    if x > (n-1)/2 {\n        return false\n    }\n    if n%2 == 1 {\n\
    \        return is_simple_power(x//2, n)\n    }\n    if x%2 == 1 {\n        return\
    \ false\n    }\n    return is_simple_power(x//2, n)\n}\n", "    if n == 1 {\n\
    \        return true\n    }\n    if n == 2 {\n        return true\n    }\n   \
    \ if x%n == 0 {\n        return true\n    }\n    return false\n}\n", "    if x\
    \ < n {\n        return false\n    }\n    if n%x == 0 {\n        return true\n\
    \    }\n    return is_simple_power(x, n/x-1)\n}\n", "    if x == 0 {\n       \
    \ return true\n    }\n    if n <= 0 {\n        return false\n    }\n    if n%x\
    \ == 0 {\n        return is_simple_power(x, n/x)\n    } else {\n        return\
    \ false\n    }\n}\n", "    if x == 1 {\n        return true\n    }\n    if n ==\
    \ 1 {\n        return true\n    }\n    if x < n {\n        return false\n    }\n\
    \n    x, n := x, n\n    x, n >>= 1\n    if x == 1 {\n        return true\n   \
    \ }\n\n    // Go down\n    x, n = n, x\n    x, n = n >> 1, (n >> 1) >> (n - 1)\n\
    \    if x == 1 {\n        return true\n    }\n\n    // Go up\n    x, n = n, x\n\
    \    x, n = n >> 1, (n >> 1) >> (n - 1)\n    if x == 1 {\n        return true\n\
    \    }\n\n    // Go down\n    x, n = n, x\n    x, n = n >> 1, (n >> 1) >> (n -\
    \ 1)\n    if x == 1 {\n        return true\n    }\n\n    // Go up\n    x, n =\
    \ n, x\n    x, n = n >> 1, (n >> 1) >> (n - 1)\n    if x == 1 {\n        return\
    \ true\n    }\n\n    // Go down\n    x, n = n, x\n    x, n = n >> 1, (n >> 1)\
    \ >> (n - 1)\n    if x == 1 {\n        return true\n    }\n\n    // Go up\n  \
    \  x, n = n, x\n    x, n = n >> 1, (n >> 1) >> (n - 1)\n    if x == 1 {\n    \
    \    return true\n    }\n\n    // Go down\n    x, n = n, x\n    x, n = n >> 1,\
    \ (n >> 1) >> (n - 1)\n    if x == 1 {\n        return true\n    }\n\n    // Go\
    \ up\n    x, n = n, x\n    x, n = n >> 1, (n >> 1) >> (n - 1)\n    if x == 1 {\n\
    \        return true\n    }\n\n    // Go down\n    x, n = n, x\n    x, n = n >>\
    \ 1, (n >> 1) >> (n - 1)\n    if x == 1 {\n        return true\n    }\n\n    //\
    \ Go up\n    x, n = n, x\n    x, n = n >> 1, (n >> 1) >> (n - 1)\n    if x ==\
    \ 1 {\n        return true\n    }\n\n    // Go down\n    x, n = n, x\n    x, n\
    \ = n >> 1, (n >> 1) >> (n - 1)\n    if x == 1 {\n        return true\n    }\n\
    \n    // Go up\n    x, n = n, x\n    x, n = n >> 1, (n >> 1) >> (n - 1)\n    if\
    \ x == 1 {\n        return true\n    }\n\n    // Go down\n    x, n = n, x\n  \
    \  x, n = n >> 1, (n >> 1) >> (n - 1)\n    if x == 1 {\n        return true\n\
    \    }\n\n    // Go up\n    x, n = n, x\n    x, n = n >> 1, (n >> ", "    res,\
    \ err := power_n(n, x)\n    if err != nil {\n        panic(err)\n    }\n    return\
    \ res == x\n}\n", "    if x==0 || n==0 {\n        return false\n    }\n\n    if\
    \ x == 1 {\n        return true\n    }\n    if n == 1 {\n        return true\n\
    \    }\n    if n < 1 {\n        return false\n    }\n    \n    // If x=n*n, then\
    \ x*x=n*n\n    if x*x==n*n {\n        return is_simple_power(x, n*n-1)\n    }\n\
    \    \n    // If x=n/n, then x*x=(n-1)*n\n    if x*x==(n-1)*n {\n        return\
    \ is_simple_power(x, n-1)\n    }\n\n    // If n<x, then x*x<=(n-1)*n\n    if n<x\
    \ {\n        return is_simple_power(x, n-1)\n    }\n\n    // If n>=x, then x*x>=(n-1)*n\n\
    \    if n>=x {\n        return is_simple_power(x, n-1)\n    }\n\n    // If n==x,\
    \ then x*x=n\n    if n==x {\n        return is_simple_power(x, n)\n    }\n\n \
    \   // If n!=x, then x*x!=(n-1)*n\n    return is_simple_power(x, n-1)\n}\n", " \
    \   if n == 0 {\n        return true\n    }\n    if n == 1 {\n        return true\n\
    \    }\n    return (x%n == 0)\n}\n", "    if n < 0 {\n        return false\n \
    \   }\n\n    if n == 1 {\n        return true\n    }\n\n    if n%2 == 0 {\n  \
    \      return is_simple_power(x, n/2)\n    }\n\n    // n is odd and x is not power\
    \ of n\n    if x != math.Pow(x, int(n)) {\n        return false\n    }\n\n   \
    \ return true\n}\n", "    if n < 0 {\n        return false\n    }\n    if n%2\
    \ == 0 {\n        return (n*x)%n == 0\n    } else {\n        return ((n*(3*x))%n)%n\
    \ == 0\n    }\n}\n", "    if x==0 {\n        return true\n    }\n    if n<=1 {\n\
    \        return false\n    }\n    if n%2==1 {\n        return is_simple_power(x/2,n)\n\
    \    }\n    return is_simple_power(x,n/2)\n}\n", "    // your code here\n    if\
    \ x == 1 {\n        return true\n    }\n    if x == n*n*n {\n        return true\n\
    \    }\n    if x == n*n*n + n*n*n - n*n*(n-1)/2 {\n        return true\n    }\n\
    \    return false\n}\n", "    q := x\n    s := 1\n    for i := 0; i < n; i++ {\n\
    \        q *= x\n        s += x\n    }\n    if q == x {\n        if x == 1 {\n\
    \            return true\n        }\n        return is_simple_power(x, n-1)\n\
    \    }\n    if q != 1 {\n        return false\n    }\n    return s == 1\n}\n</code>\n\
    The test function above is meant to test the function is_simple_power, not the\
    \ function is_simple_power_test. The test function is defined below:\n<code>\n\
    package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n",
  "    if n%x == 0 {\n        return true\n    }\n    return false\n}\n", "    if\
    \ x == 0 {\n        return true\n    }\n\n    if n%x == 0 {\n        return false\n\
    \    }\n\n    r := x\n    for i := 1; i <= n/x; i++ {\n        if r%x == 0 {\n\
    \            return false\n        }\n        r /= x\n    }\n    return true\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\nI wrote this function for finding\
    \ the power of a number N using the power recursion method\n<code>", "    if n\
    \ == 0 {\n        return true\n    }\n    if x == 1 {\n        return true\n \
    \   }\n    return is_simple_power(x / n, n-1)\n}\n", "    if n<=1 {\n        return\
    \ false\n    }\n    if n==1 {\n        return true\n    }\n    if n==2 {\n   \
    \     return x==1\n    }\n    if n%2==0 {\n        return (n*is_simple_power(x,n/2))==x\n\
    \    }\n    return false\n}\n</code>\n<|/ a dscore=3 |>\n<| c |>\nThis doesn't\
    \ work for x = 1, n = 3. It returns false.\n<|/ c |>\n<| c |>\n: It works. Please\
    \ try with x = 1, n = 4, or x = 8, n = 2. You'll see that it works.\n<|/ c |>\n\
    <| a |>\nThis is my first post on stackoverflow, and I am very new to programming.\
    \ Thank you for all the help!\nI used this website to help me understand how a\
    \ binary search works: https://www.geeksforgeeks.org/binary-search/\nHere is my\
    \ code for the problem I presented:\n<code>\npackage is_simple_power_test\n\n\
    import (\n    \"testing\"\n    \"fmt\"\n)\n", "    return true\n}\n", "    if\
    \ x%n!=0 {\n        return false\n    }\n    if n==1 {\n        return true\n\
    \    }\n    return is_simple_power(x, n-1)\n}", "    if n==1 {\n        return\
    \ true\n    }\n    if n%2==0 {\n        return is_simple_power(x*x, n/2)\n   \
    \ }\n    return false\n}\n</code>\n<|/ a tags=go dscore=2 |>\n<| c |>\nCan I suggest\
    \ that you don't reuse the variable `i` for the loop counter (`for i := 0; i<n;\
    \ i++`), or else the compiler will get confused. Also, you probably want to `break`\
    \ out of the `for` loop in the `else` branch of the `if`.\n<|/ c |>\n<| c |>\n\
    I agree with your suggestion. I'm just following the requirements of the OP and\
    \ I already changed the name of the variable. I didn't know that it was legal\
    \ to reuse the variable so thanks for the hint!\n<|/ c |>\n<| c |>\nI don't think\
    \ this is what OP is looking for. He wants a function that returns true if the\
    \ number is a power of n. Your function returns true if the number is a power\
    \ of n.\n<|/ c |>\n<| c |>\nThank you for your comment. Maybe I didn't understand\
    \ well the question but I thought that the OP wants to know if the number is a\
    \ power of `n` in the first place.\n<|/ c |>\n<| c |>\nAh, I missed the part that\
    \ OP said \"a number is a simple power of n and false in other cases.\"\n<|/ c\
    \ |>\n<| a tags=go dscore=2 |>\nHere's another take that also takes care of negative\
    \ numbers by first comparing with n. Also it won't handle 0 as a power of n.\n\
    <code>\npackage is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n    \"math\"\n)\n", "    if x == 1 {\n        return true\n    }\n    if x <\
    \ n {\n        return false\n    }\n    if n%x == 0 {\n        return is_simple_power(x,\
    \ n/x+1)\n    }\n    return is_simple_power(x, n-1)\n}\n", "    // Your code here\n\
    \    if x == 1 {\n        return true\n    }\n    if x == n {\n        return\
    \ true\n    }\n    if n % x == 0 {\n        return is_simple_power(x, n//x)\n\
    \    }\n    return false\n}\n</code>\n<|/ a dscore=1 tags=recursion,loops,function,go,algorithm\
    \ |>\n<| c |>\nThis is a nice approach! But if you look closely, you see that\
    \ this is not the same as simple power (which means power of x to the power of\
    \ n), but instead is the same as power of x to the power of x. And it's actually\
    \ a very bad one :)\n<|/ c |>\n<| a tags=recursion,loops,function,go,algorithm\
    \ |>\nHere is a simple recursive solution in Go:\n<code>\npackage main\n\nimport\
    \ \"fmt\"\n", "    z := int(x)\n    y := 1\n    for i := 0; i < n; i++ {\n   \
    \     y = (y*z) % n\n    }\n    return y == z\n}\n", "    if n == 0 {\n      \
    \  return true\n    }\n    if n%2 != 0 {\n        return false\n    }\n    if\
    \ n == 1 {\n        return true\n    }\n    if x == 1 {\n        return true\n\
    \    }\n    if x <= n-1 {\n        return is_simple_power(x, n-1)\n    }\n   \
    \ return false\n}\n", "    if n < 2 {\n        return false\n    }\n    if n%x\
    \ == 0 {\n        return true\n    }\n    if x > n/2 {\n        return false\n\
    \    }\n    if x%n == 0 {\n        return true\n    }\n    return is_simple_power(x,\
    \ n//2)\n}\n", "    if x == 1 || x == n {\n        return true\n    }\n    if\
    \ n < 0 {\n        return false\n    }\n    if n == 0 {\n        return false\n\
    \    }\n    if n > 0 {\n        x, n := x, n-1\n        x /= n\n    }\n    return\
    \ is_simple_power(x, n)\n}\n", "    // Your code here\n    \n    if x == 1 {\n\
    \        return true\n    }\n    if x < n {\n        return false\n    }\n   \
    \ if n % 2 == 0 {\n        return is_simple_power(x//2, n)\n    }\n    return\
    \ is_simple_power(x//2, n-1)\n}\n</cell>\n<cell>\n%run \"./visuals/is_simple_power_test.ipynb\"\
    \n</cell>\n<text>\nProblem 4\nWrite a function that returns the factorial of a\
    \ positive integer. \nThe factorial of a non-negative integer is the product of\
    \ all the integers starting from 1 to that integer.\nFor example, the factorial\
    \ of 5 is 5 * 4 * 3 * 2 * 1 = 120. The factorial of 0 is 1, and the factorial\
    \ of a negative number is undefined.\n\n</text>\n<cell>", "    // Your code here\n\
    \    // ...\n}\n", "    if x==1 {\n        return true\n    }\n\n    if n%x==0\
    \ {\n        return true\n    }\n\n    return false\n}\n", "    if n == 1 {\n\
    \        return true\n    }\n    if x == 1 {\n        return true\n    }\n   \
    \ if n > 1 {\n        for i := 1; i <= n; i++ {\n            if x%i == 0 {\n \
    \               return false\n            }\n        }\n    }\n    return true\n\
    }\n", "    if x == 1 {\n        return true\n    }\n    if n%2 == 0 {\n      \
    \  if n%x == 0 {\n            return true\n        } else {\n            return\
    \ false\n        }\n    } else {\n        if x%n%n == 0 {\n            return\
    \ true\n        } else {\n            return false\n        }\n    }\n}\n", " \
    \   if n%x == 0 {\n        return true\n    }\n    return false\n}\n", "    if\
    \ n == 0 {\n        return true\n    }\n\n    if n % x == 0 {\n        return\
    \ is_simple_power(x, n-1)\n    } else {\n        return false\n    }\n}\n", " \
    \   if n == 1 {\n        return true\n    }\n\n    if n == 0 {\n        return\
    \ false\n    }\n\n    if n%2 == 1 {\n        return is_simple_power(x, n/2)\n\
    \    }\n\n    if n%2 == 0 {\n        return is_simple_power(x, n/2)\n    }\n\n\
    \    return is_simple_power(x, n/2)\n}\n", "    if n < 2 {\n        return false\n\
    \    }\n\n    for i := 0; i < n; i++ {\n        if x%n == 0 {\n            return\
    \ true\n        }\n        x /= n\n    }\n    return false\n}\n", "    if x==1\
    \ {\n        return true\n    }\n    if n%x==0 {\n        return is_simple_power(x/n,\
    \ n)\n    }\n    return false\n}\n", "    if x == 1 {\n        return true\n \
    \   }\n\n    if n < 2 {\n        return false\n    }\n\n    r := x\n    r /= n\n\
    \n    for i := 1; i <= n; i++ {\n        if r*r <= x {\n            return false\n\
    \        }\n        r *= n\n    }\n\n    return true\n}\n</code>\n<|/ a tags=python\
    \ dscore=1 |>\n<| c |>\nThank you for your help.\n<|/ c |>\n<| a tags=python dscore=0\
    \ |>\nUsing mathematical functions:\n<code>\ndef is_power(self, x, n):\n    if\
    \ n == 0:\n        return True\n    elif n == 1:\n        return x == 0\n    else:\n\
    \        return x % n == 0 or is_power(self, x // n, n-1)\n</code>\n<|/ a |>\n\
    <| a |>\nI wrote this solution in Python to solve the problem. It should be fairly\
    \ self explanatory. It uses a recursive approach which could be optimized, but\
    \ I am leaving that to you. I am also providing the solution without using recursion.\n\
    <code>\ndef isPower(self, n, p):\n    if n == 1:\n        return n == p\n    if\
    \ n < 0:\n        return False\n    if p % n != 0:\n        return False\n   \
    \ else:\n        self.isPower(n//p, n)\n        return True\n</code>\n<|/ a tags=python\
    \ dscore=0 |>\n<| a dscore=0 |>\n<code>\nfrom math import log\n\ndef isPower(self,\
    \ x, n):\n    return n <= 0 and x != 1 or x == 1\n\ndef isPower(n):\n    if n\
    \ == 0:\n        return True\n    elif n == 1:\n        return True\n    elif\
    \ n < 0:\n        return False\n    else:\n        temp = n\n        while temp\
    \ >= 1:\n            temp //= log(x, temp)\n        return True\n</code>\n<|/\
    \ a tags=python |>\n<| a dscore=0 tags=python |>\nMy approach is to use binary\
    \ search, and divide the number by two:\n<code>\ndef isPower(self, n, p):\n  \
    \  # check\n    if n == 1:\n        return n == p\n    # check\n    elif n < 1:\n\
    \        return False\n    # check\n    elif p % n != 0:\n        return False\n\
    \    # check\n    else:\n        # binary\n        nhalf = n // 2\n        left\
    \ = 0\n        right = n\n        middle = int((left + right) / 2)\n        #\
    \ go right\n        while left < right:\n            if middle == left:\n    \
    \            if isPower(middle, n):\n                    return True\n       \
    \     elif middle == right:\n                if isPower(middle, n):\n        \
    \            return True\n            elif isPower(middle, n):\n             \
    \   return True\n            else:\n                if middle == nhalf:\n    \
    \                if isPower(middle + nhalf, n):\n                        return\
    \ True\n                else:\n                    if middle ", "    if n%2 ==\
    \ 0 {\n        return is_simple_power(x, n/2)\n    }\n    if n%x == 0 {\n    \
    \    return true\n    }\n    return false\n}\n</code>\n<|/ a |>\n<| c |>\nI believe\
    \ that this function would only return true if the number x is exactly divisible\
    \ by n, but not if x is divisible by n and also divisible by another number.\n\
    <|/ c |>\n<| c |>\nThanks for pointing that out. Just fixed it.\n<|/ c |>\n<|\
    \ a dscore=0 |>\nHere's a solution that returns true/false with or without using\
    \ modulo.\n<code>\ndef checkIfPowerOfN(int n, int x) :\n  if n == 1: return True\n\
    \  if n%x == 0 : return False\n  for i in range(2,n):\n    if n%i == 0:\n    \
    \  ans = checkIfPowerOfN(n/i, x)\n      if ans:\n        return True\n      if\
    \ not ans: return False\n  return True\n</code>\n<|/ a tags=python,algorithm,recursion\
    \ |>\n<| a tags=python,algorithm,recursion |>\nUsing python we can try this using\
    \ while and factorial. Here I am assuming that the number to be tested is always\
    \ bigger than 1. \n<code>\nimport math\n\ndef power(n, factor):\n    if math.fmod(n,\
    \ factor) != 0:\n        return False\n    elif factor == 1:\n        return True\n\
    \    elif n == 1:\n        return True\n    elif n < 1:\n        return False\n\
    \    else:\n        temp = power(n, factor)\n        ans = power(temp, factor\
    \ // 2)\n        ans = ans or power(temp, factor // 4)\n        ans = ans or power(temp,\
    \ factor // 8)\n        ans = ans or power(temp, factor // 16)\n        ans =\
    \ ans or power(temp, factor // 32)\n        ans = ans or power(temp, factor //\
    \ 64)\n        ans = ans or power(temp, factor // 128)\n        ans = ans or power(temp,\
    \ factor // 256)\n        ans = ans or power(temp, factor // 512)\n        ans\
    \ = ans or power(temp, factor // 1024)\n        ans = ans or power(temp, factor\
    \ // 2048)\n        ans = ans or power(temp, factor // 4096)\n        ans = ans\
    \ or power(temp, factor // 8192)\n        return ans\n\ndef power(n, factor):\n\
    \    if math.fmod(n, factor) != 0:\n        return False\n    elif factor == 1:\n\
    \        return True\n    elif n == 1:\n        return True\n    elif n < 1:\n\
    \        return False\n    else:\n        temp = power(n, factor)\n        ans\
    \ = power(temp, factor // 2)\n        ans = ans or power(temp, ", "    if n<1\
    \ {\n        return false\n    }\n\n    if n%2 == 0 {\n        if x == 1 {\n \
    \           return true\n        }\n        return false\n    }\n\n    for i :=\
    \ 3; i <= n; i++ {\n        if x%i == 0 {\n            return false\n        }\n\
    \    }\n\n    return true\n}\n", "    if x < 0 || n < 0 || n < x {\n        return\
    \ false\n    }\n    return is_power_of_two(x >> n) == is_power_of_two(x)\n}\n",
  "    if n == 1 {\n        return true\n    }\n    if x == 0 {\n        return false\n\
    \    }\n    if x != n {\n        return false\n    }\n    return is_simple_power(x%n,\
    \ n)\n}\n", "    // your code here\n    if n==1 {\n        return true\n    }\n\
    \    return false\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
