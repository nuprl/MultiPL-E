name: HumanEval_82_prime_length
language: go_test.go
prompt: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
  // Write a function that takes a string and returns true if the string\n// length\
  \ is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\"\
  )\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\"\
  )\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
  \ string) bool {\n"
tests: "func TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype\
  \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
  \ := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual:\
  \ candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"\
  ), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n\
  \     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"\
  world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true\
  \ },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
  \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n \
  \    { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
  gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
  \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
  \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
  \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
  \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
  %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
  \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: []
stop_tokens:
- "\nfunc"
- struct
- "\n// "
